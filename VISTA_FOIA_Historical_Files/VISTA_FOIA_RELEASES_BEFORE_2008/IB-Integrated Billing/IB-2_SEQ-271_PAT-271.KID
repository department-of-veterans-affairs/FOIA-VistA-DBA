Released IB*2*271 SEQ #271
Extracted from mail message
**KIDS**:IB*2.0*271^

**INSTALL NAME**
IB*2.0*271
"BLD",4995,0)
IB*2.0*271^INTEGRATED BILLING^0^3050208^y
"BLD",4995,1,0)
^^8^8^3050103^
"BLD",4995,1,1,0)
This patch addresses the following NOIS messages:
"BLD",4995,1,2,0)
------------------------------------------------
"BLD",4995,1,3,0)
BAY-0204-31962         IIV inquiries are increasing
"BLD",4995,1,4,0)
FGH-0304-32103         Important IIV Msg-Monetary Amount
"BLD",4995,1,5,0)
UNY-0204-11346         ERROR - CHK+23^IBCNEHLQ
"BLD",4995,1,6,0)
WPB-0904-32212         ERROR - EN+43^IBCNEDE2:1, %DSM-E-NULLSUBSCR
"BLD",4995,1,7,0)
 
"BLD",4995,1,8,0)
This patch also includes several enhancements for the IIV interface.
"BLD",4995,4,0)
^9.64PA^365^3
"BLD",4995,4,350.9,0)
350.9
"BLD",4995,4,350.9,2,0)
^9.641^350.9003^2
"BLD",4995,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",4995,4,350.9,2,350.9,1,0)
^9.6411^51.2^7
"BLD",4995,4,350.9,2,350.9,1,51.09,0)
INQUIRE POPULAR PAYERS
"BLD",4995,4,350.9,2,350.9,1,51.1,0)
NO. POPULAR PAYERS
"BLD",4995,4,350.9,2,350.9,1,51.11,0)
POPULAR INSUR CO. FROM DATE
"BLD",4995,4,350.9,2,350.9,1,51.12,0)
POPULAR INSUR CO. THRU DATE
"BLD",4995,4,350.9,2,350.9,1,51.2,0)
FAILURE MAILMAN MSG
"BLD",4995,4,350.9,2,350.9,1,51.21,0)
MOST POPULAR LAST SAVE DATE
"BLD",4995,4,350.9,2,350.9,1,51.24,0)
MODIFIED BY
"BLD",4995,4,350.9,2,350.9003,0)
POPULAR PAYERS  (sub-file)
"BLD",4995,4,350.9,2,350.9003,1,0)
^9.6411^.01^1
"BLD",4995,4,350.9,2,350.9003,1,.01,0)
POPULAR PAYER
"BLD",4995,4,350.9,222)
y^n^p^^^^n^^n
"BLD",4995,4,350.9,224)

"BLD",4995,4,365,0)
365
"BLD",4995,4,365,2,0)
^9.641^365.02^1
"BLD",4995,4,365,2,365.02,0)
ELIGIBILITY/BENEFIT  (sub-file)
"BLD",4995,4,365,2,365.02,1,0)
^9.6411^.08^1
"BLD",4995,4,365,2,365.02,1,.08,0)
MONETARY AMOUNT
"BLD",4995,4,365,222)
y^n^p^^^^n^^n
"BLD",4995,4,365,224)

"BLD",4995,4,365.15,0)
365.15
"BLD",4995,4,365.15,222)
y^y^f^^n^^y^o^n
"BLD",4995,4,365.15,224)

"BLD",4995,4,"APDD",350.9,350.9)

"BLD",4995,4,"APDD",350.9,350.9,51.09)

"BLD",4995,4,"APDD",350.9,350.9,51.1)

"BLD",4995,4,"APDD",350.9,350.9,51.11)

"BLD",4995,4,"APDD",350.9,350.9,51.12)

"BLD",4995,4,"APDD",350.9,350.9,51.2)

"BLD",4995,4,"APDD",350.9,350.9,51.21)

"BLD",4995,4,"APDD",350.9,350.9,51.24)

"BLD",4995,4,"APDD",350.9,350.9003)

"BLD",4995,4,"APDD",350.9,350.9003,.01)

"BLD",4995,4,"APDD",365,365.02)

"BLD",4995,4,"APDD",365,365.02,.08)

"BLD",4995,4,"B",350.9,350.9)

"BLD",4995,4,"B",365,365)

"BLD",4995,4,"B",365.15,365.15)

"BLD",4995,"ABPKG")
n
"BLD",4995,"INI")
IBY271PR
"BLD",4995,"INID")
^y^y
"BLD",4995,"INIT")
IBY271PS
"BLD",4995,"KRN",0)
^9.67PA^8989.52^19
"BLD",4995,"KRN",.4,0)
.4
"BLD",4995,"KRN",.4,"NM",0)
^9.68A^^
"BLD",4995,"KRN",.401,0)
.401
"BLD",4995,"KRN",.402,0)
.402
"BLD",4995,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",4995,"KRN",.402,"NM",1,0)
IBCNE GENERAL PARAMETER EDIT    FILE #350.9^350.9^0
"BLD",4995,"KRN",.402,"NM","B","IBCNE GENERAL PARAMETER EDIT    FILE #350.9",1)

"BLD",4995,"KRN",.403,0)
.403
"BLD",4995,"KRN",.5,0)
.5
"BLD",4995,"KRN",.84,0)
.84
"BLD",4995,"KRN",3.6,0)
3.6
"BLD",4995,"KRN",3.8,0)
3.8
"BLD",4995,"KRN",9.2,0)
9.2
"BLD",4995,"KRN",9.8,0)
9.8
"BLD",4995,"KRN",9.8,"NM",0)
^9.68A^51^48
"BLD",4995,"KRN",9.8,"NM",1,0)
IBCNERP3^^0^B33550221
"BLD",4995,"KRN",9.8,"NM",2,0)
IBCNEKIT^^0^B58412281
"BLD",4995,"KRN",9.8,"NM",3,0)
IBCNEKI2^^0^B10075063
"BLD",4995,"KRN",9.8,"NM",4,0)
IBCNERP1^^0^B76118662
"BLD",4995,"KRN",9.8,"NM",5,0)
IBCNERP2^^0^B33851537
"BLD",4995,"KRN",9.8,"NM",6,0)
IBCNEDE^^0^B20803060
"BLD",4995,"KRN",9.8,"NM",7,0)
IBCNERPA^^0^B29062798
"BLD",4995,"KRN",9.8,"NM",8,0)
IBCNERP4^^0^B13084938
"BLD",4995,"KRN",9.8,"NM",9,0)
IBCNERP5^^0^B59387291
"BLD",4995,"KRN",9.8,"NM",10,0)
IBCNERP6^^0^B76775707
"BLD",4995,"KRN",9.8,"NM",11,0)
IBJPI^^0^B66054979
"BLD",4995,"KRN",9.8,"NM",12,0)
IBJPI2^^0^B18638540
"BLD",4995,"KRN",9.8,"NM",13,0)
IBCNEUT6^^0^B28657707
"BLD",4995,"KRN",9.8,"NM",14,0)
IBJPI3^^0^B36319045
"BLD",4995,"KRN",9.8,"NM",15,0)
IBJPI4^^0^B54576421
"BLD",4995,"KRN",9.8,"NM",16,0)
IBCNEDE4^^0^B79553596
"BLD",4995,"KRN",9.8,"NM",17,0)
IBCNEUT4^^0^B49767116
"BLD",4995,"KRN",9.8,"NM",18,0)
IBCNEDEQ^^0^B23685960
"BLD",4995,"KRN",9.8,"NM",19,0)
IBCNBLE1^^0^B27903709
"BLD",4995,"KRN",9.8,"NM",21,0)
IBCNBLA^^0^B65200465
"BLD",4995,"KRN",9.8,"NM",22,0)
IBCNBLL^^0^B59623585
"BLD",4995,"KRN",9.8,"NM",23,0)
IBCNEHLR^^0^B44471872
"BLD",4995,"KRN",9.8,"NM",24,0)
IBCNEHLS^^0^B65873110
"BLD",4995,"KRN",9.8,"NM",25,0)
IBCNERP0^^0^B5712540
"BLD",4995,"KRN",9.8,"NM",26,0)
IBCNERP8^^0^B54393232
"BLD",4995,"KRN",9.8,"NM",27,0)
IBCNERP9^^0^B85343498
"BLD",4995,"KRN",9.8,"NM",28,0)
IBCNEDEP^^0^B94875041
"BLD",4995,"KRN",9.8,"NM",30,0)
IBCNEHLQ^^0^B30801715
"BLD",4995,"KRN",9.8,"NM",31,0)
IBCNEDE2^^0^B38407052
"BLD",4995,"KRN",9.8,"NM",33,0)
IBCNEUT5^^0^B60224642
"BLD",4995,"KRN",9.8,"NM",34,0)
IBCNBLA1^^0^B76644494
"BLD",4995,"KRN",9.8,"NM",35,0)
IBCNEBF^^0^B27036786
"BLD",4995,"KRN",9.8,"NM",36,0)
IBCNEHLD^^0^B4387851
"BLD",4995,"KRN",9.8,"NM",37,0)
IBCNEHLI^^0^B7261424
"BLD",4995,"KRN",9.8,"NM",38,0)
IBCNEHLP^^0^B76489309
"BLD",4995,"KRN",9.8,"NM",39,0)
IBCNEHLT^^0^B59932024
"BLD",4995,"KRN",9.8,"NM",40,0)
IBJPM^^0^B11425259
"BLD",4995,"KRN",9.8,"NM",41,0)
IBCNEDE6^^0^B27396831
"BLD",4995,"KRN",9.8,"NM",42,0)
IBCNEUT3^^0^B58297927
"BLD",4995,"KRN",9.8,"NM",43,0)
IBCNEDE7^^0^B21406402
"BLD",4995,"KRN",9.8,"NM",44,0)
IBCNEDE1^^0^B33576444
"BLD",4995,"KRN",9.8,"NM",45,0)
IBCNEDE3^^0^B51661172
"BLD",4995,"KRN",9.8,"NM",46,0)
IBCNEQU^^0^B85417611
"BLD",4995,"KRN",9.8,"NM",47,0)
IBCNEDE5^^0^B30882453
"BLD",4995,"KRN",9.8,"NM",48,0)
IBCNERPE^^0^B67284569
"BLD",4995,"KRN",9.8,"NM",49,0)
IBCNERPB^^0^B47281674
"BLD",4995,"KRN",9.8,"NM",50,0)
IBCNERPC^^0^B46100582
"BLD",4995,"KRN",9.8,"NM",51,0)
IBCNEPST^^1^
"BLD",4995,"KRN",9.8,"NM","B","IBCNBLA",21)

"BLD",4995,"KRN",9.8,"NM","B","IBCNBLA1",34)

"BLD",4995,"KRN",9.8,"NM","B","IBCNBLE1",19)

"BLD",4995,"KRN",9.8,"NM","B","IBCNBLL",22)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEBF",35)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE",6)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE1",44)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE2",31)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE3",45)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE4",16)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE5",47)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE6",41)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDE7",43)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDEP",28)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEDEQ",18)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEHLD",36)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEHLI",37)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEHLP",38)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEHLQ",30)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEHLR",23)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEHLS",24)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEHLT",39)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEKI2",3)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEKIT",2)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEPST",51)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEQU",46)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP0",25)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP1",4)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP2",5)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP3",1)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP4",8)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP5",9)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP6",10)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP8",26)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERP9",27)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERPA",7)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERPB",49)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERPC",50)

"BLD",4995,"KRN",9.8,"NM","B","IBCNERPE",48)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEUT3",42)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEUT4",17)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEUT5",33)

"BLD",4995,"KRN",9.8,"NM","B","IBCNEUT6",13)

"BLD",4995,"KRN",9.8,"NM","B","IBJPI",11)

"BLD",4995,"KRN",9.8,"NM","B","IBJPI2",12)

"BLD",4995,"KRN",9.8,"NM","B","IBJPI3",14)

"BLD",4995,"KRN",9.8,"NM","B","IBJPI4",15)

"BLD",4995,"KRN",9.8,"NM","B","IBJPM",40)

"BLD",4995,"KRN",19,0)
19
"BLD",4995,"KRN",19,"NM",0)
^9.68A^5^5
"BLD",4995,"KRN",19,"NM",1,0)
IBCNE IIV AMBIGUOUS POLICY RPT^^0
"BLD",4995,"KRN",19,"NM",2,0)
IBCNE IIV INACTIVE POLICY RPT^^0
"BLD",4995,"KRN",19,"NM",3,0)
IBCNE POTENTIAL NEW INS FOUND^^0
"BLD",4995,"KRN",19,"NM",4,0)
IBCNE IIV RESPONSE REPORT^^0
"BLD",4995,"KRN",19,"NM",5,0)
IBCNE IIV MENU^^2
"BLD",4995,"KRN",19,"NM","B","IBCNE IIV AMBIGUOUS POLICY RPT",1)

"BLD",4995,"KRN",19,"NM","B","IBCNE IIV INACTIVE POLICY RPT",2)

"BLD",4995,"KRN",19,"NM","B","IBCNE IIV MENU",5)

"BLD",4995,"KRN",19,"NM","B","IBCNE IIV RESPONSE REPORT",4)

"BLD",4995,"KRN",19,"NM","B","IBCNE POTENTIAL NEW INS FOUND",3)

"BLD",4995,"KRN",19.1,0)
19.1
"BLD",4995,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",4995,"KRN",101,0)
101
"BLD",4995,"KRN",101,"NM",0)
^9.68A^9^9
"BLD",4995,"KRN",101,"NM",1,0)
IBJP IIV MOST POPULAR ADD^^0
"BLD",4995,"KRN",101,"NM",2,0)
IBJP IIV MOST POPULAR DELETE^^0
"BLD",4995,"KRN",101,"NM",3,0)
IBJP IIV MOST POPULAR REORDER^^0
"BLD",4995,"KRN",101,"NM",4,0)
IBJP IIV MOST POPULAR MODIFY^^0
"BLD",4995,"KRN",101,"NM",5,0)
IBJP IIV MOST POPULAR MENU^^0
"BLD",4995,"KRN",101,"NM",6,0)
IBJP IIV MOST POPULAR RESTORE^^0
"BLD",4995,"KRN",101,"NM",7,0)
IBJP IIV MOST POPULAR EXIT^^0
"BLD",4995,"KRN",101,"NM",8,0)
IBJP IIV MOST POPULAR SAVE^^0
"BLD",4995,"KRN",101,"NM",9,0)
IBJP IIV MOST POPULAR EDIT^^0
"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR ADD",1)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR DELETE",2)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR EDIT",9)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR EXIT",7)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR MENU",5)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR MODIFY",4)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR REORDER",3)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR RESTORE",6)

"BLD",4995,"KRN",101,"NM","B","IBJP IIV MOST POPULAR SAVE",8)

"BLD",4995,"KRN",409.61,0)
409.61
"BLD",4995,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",4995,"KRN",409.61,"NM",1,0)
IBJP IIV MOST POPULAR PAYERS^^0
"BLD",4995,"KRN",409.61,"NM","B","IBJP IIV MOST POPULAR PAYERS",1)

"BLD",4995,"KRN",771,0)
771
"BLD",4995,"KRN",870,0)
870
"BLD",4995,"KRN",8989.51,0)
8989.51
"BLD",4995,"KRN",8989.52,0)
8989.52
"BLD",4995,"KRN",8994,0)
8994
"BLD",4995,"KRN","B",.4,.4)

"BLD",4995,"KRN","B",.401,.401)

"BLD",4995,"KRN","B",.402,.402)

"BLD",4995,"KRN","B",.403,.403)

"BLD",4995,"KRN","B",.5,.5)

"BLD",4995,"KRN","B",.84,.84)

"BLD",4995,"KRN","B",3.6,3.6)

"BLD",4995,"KRN","B",3.8,3.8)

"BLD",4995,"KRN","B",9.2,9.2)

"BLD",4995,"KRN","B",9.8,9.8)

"BLD",4995,"KRN","B",19,19)

"BLD",4995,"KRN","B",19.1,19.1)

"BLD",4995,"KRN","B",101,101)

"BLD",4995,"KRN","B",409.61,409.61)

"BLD",4995,"KRN","B",771,771)

"BLD",4995,"KRN","B",870,870)

"BLD",4995,"KRN","B",8989.51,8989.51)

"BLD",4995,"KRN","B",8989.52,8989.52)

"BLD",4995,"KRN","B",8994,8994)

"BLD",4995,"QUES",0)
^9.62^^
"BLD",4995,"REQB",0)
^9.611^6^4
"BLD",4995,"REQB",3,0)
IB*2.0*252^2
"BLD",4995,"REQB",4,0)
IB*2.0*184^2
"BLD",4995,"REQB",5,0)
IB*2.0*284^2
"BLD",4995,"REQB",6,0)
IB*2.0*251^2
"BLD",4995,"REQB","B","IB*2.0*184",4)

"BLD",4995,"REQB","B","IB*2.0*251",6)

"BLD",4995,"REQB","B","IB*2.0*252",3)

"BLD",4995,"REQB","B","IB*2.0*284",5)

"DATA",365.15,1,0)
B1^33^1
"DATA",365.15,1,1,0)
^365.152^3^3^3040811^^^^
"DATA",365.15,1,1,1,0)
IIV could not create an inquiry for this entry.  IIV could not match the 
"DATA",365.15,1,1,2,0)
insurance company name in the Insurance Buffer file (#355.33) to a valid insurance 
"DATA",365.15,1,1,3,0)
company name in the Insurance Company file (#36).
"DATA",365.15,1,2,0)
^365.17^4^4^3040811^^^
"DATA",365.15,1,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,1,2,2,0)
in the buffer so that it matches one found in the Insurance Company file (#36).
"DATA",365.15,1,2,3,0)
Otherwise, contact the insurance company to manually verify this
"DATA",365.15,1,2,4,0)
insurance information.
"DATA",365.15,2,0)
B2^33^1
"DATA",365.15,2,1,0)
^365.152^5^5^3040811^^^^
"DATA",365.15,2,1,1,0)
IIV could not create an inquiry for this entry.  IIV matched the insurance
"DATA",365.15,2,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one uniquely named
"DATA",365.15,2,1,3,0)
insurance company in the Insurance Company file (#36).  This indicates that the
"DATA",365.15,2,1,4,0)
Auto Match check or the Synonym check yielded multiple 
"DATA",365.15,2,1,5,0)
insurance companies from the Insurance Company file.
"DATA",365.15,2,2,0)
^365.17^8^8^3040811^^^
"DATA",365.15,2,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,2,2,2,0)
in the buffer so that it matches one found in the Insurance Company file (#36).
"DATA",365.15,2,2,3,0)
Otherwise, contact the insurance company to manually verify this insurance
"DATA",365.15,2,2,4,0)
information.  (* Advanced users: Use the option "Enter/Edit Auto Match
"DATA",365.15,2,2,5,0)
Entries" to check the entries in the Auto Match file (#365.11).  Make sure there is
"DATA",365.15,2,2,6,0)
no more than one entry in the Auto Match file, if any, which corresponds
"DATA",365.15,2,2,7,0)
to the insurance company name found in this buffer
"DATA",365.15,2,2,8,0)
entry.)
"DATA",365.15,3,0)
B3^33^1
"DATA",365.15,3,1,0)
^365.152^4^4^3040811^^^^
"DATA",365.15,3,1,1,0)
IIV could not create an inquiry for this entry.  IIV matched the insurance
"DATA",365.15,3,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one insurance
"DATA",365.15,3,1,3,0)
company entry with the same name in the Insurance Company file (#36).  At least
"DATA",365.15,3,1,4,0)
one of these matching entries are linked to a different payer.
"DATA",365.15,3,2,0)
^365.17^6^6^3040811^^^^
"DATA",365.15,3,2,1,0)
Action to take:  Run the "IIV Payer Link Report" option by Insurance
"DATA",365.15,3,2,2,0)
Company List, for all linked insurance companies, using the keyword
"DATA",365.15,3,2,3,0)
feature to narrow down the search.  This will provide a report showing
"DATA",365.15,3,2,4,0)
which payer the different insurance company records are linked to.  Next,
"DATA",365.15,3,2,5,0)
use the "Insurance Company Entry/Edit" option to correct those insurance
"DATA",365.15,3,2,6,0)
companies who are linked to the wrong payer.
"DATA",365.15,4,0)
B4^33^1
"DATA",365.15,4,1,0)
^365.152^6^6^3040811^^^^
"DATA",365.15,4,1,1,0)
IIV could not create an inquiry for this entry.  There is no link for this
"DATA",365.15,4,1,2,0)
insurance company between the Insurance Company file (#36) and the Payer file (#365.12).
"DATA",365.15,4,1,3,0)
This may occur because the insurance staff did not attempt to manually
"DATA",365.15,4,1,4,0)
link the named insurance company to the payer list or the insurance staff
"DATA",365.15,4,1,5,0)
did not find a payer in the payer list that they wanted to link this
"DATA",365.15,4,1,6,0)
insurance company to.
"DATA",365.15,4,2,0)
^365.17^9^9^3040811^^^^
"DATA",365.15,4,2,1,0)
Action to take:  Either contact the insurance company to manually verify
"DATA",365.15,4,2,2,0)
this insurance information or link the insurance company to a payer.
"DATA",365.15,4,2,3,0)
Steps to link an insurance company to a payer are as follows: run the
"DATA",365.15,4,2,4,0)
"IIV Payer Link Report" option by Insurance Company List, for all
"DATA",365.15,4,2,5,0)
unlinked insurance companies.  Use the keyword feature when running the
"DATA",365.15,4,2,6,0)
report to narrow down the search.  This will provide a report showing
"DATA",365.15,4,2,7,0)
which insurance companies are not linked to a payer.  Next, use the
"DATA",365.15,4,2,8,0)
"Insurance Company Entry/Edit" option to link those insurance companies
"DATA",365.15,4,2,9,0)
to the correct payer.
"DATA",365.15,5,0)
B5^33^1
"DATA",365.15,5,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,5,1,1,0)
IIV could not create an inquiry for this entry.  The payer is not
"DATA",365.15,5,1,2,0)
nationally active for IIV.
"DATA",365.15,5,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,5,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,5,2,2,0)
insurance information.
"DATA",365.15,6,0)
B6^33^1
"DATA",365.15,6,1,0)
^365.152^2^2^3040811^^^^
"DATA",365.15,6,1,1,0)
IIV could not create an inquiry for this entry.  The payer is not locally
"DATA",365.15,6,1,2,0)
active for IIV.
"DATA",365.15,6,2,0)
^365.17^3^3^3040811^^^
"DATA",365.15,6,2,1,0)
Action to take:  Either use the option "Payer Edit (Activate/Inactivate)"
"DATA",365.15,6,2,2,0)
to locally activate this payer or contact the insurance company to
"DATA",365.15,6,2,3,0)
manually verify this insurance information.
"DATA",365.15,7,0)
B7^33^1
"DATA",365.15,7,1,0)
^365.152^3^3^3040811^^^
"DATA",365.15,7,1,1,0)
IIV could not create an inquiry for this entry.  The payer does not accept
"DATA",365.15,7,1,2,0)
electronic insurance eligibility requests.  The IIV application data does
"DATA",365.15,7,1,3,0)
not exist in the Payer file (#365.12) for this payer.
"DATA",365.15,7,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,7,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,7,2,2,0)
insurance information.
"DATA",365.15,8,0)
A1^43^0
"DATA",365.15,8,1,0)
^365.152^2^2^3040811^^^^
"DATA",365.15,8,1,1,0)
Information received via electronic inquiry indicates patient has active
"DATA",365.15,8,1,2,0)
insurance.
"DATA",365.15,8,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,8,2,1,0)
Action to take:  Review the details listed in the IIV Response Report
"DATA",365.15,8,2,2,0)
before processing this buffer entry.
"DATA",365.15,9,0)
D1^45^0
"DATA",365.15,9,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,9,1,1,0)
Information received via electronic inquiry indicates patient does NOT
"DATA",365.15,9,1,2,0)
have active insurance.
"DATA",365.15,9,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,9,2,1,0)
Action to take:  Review the details listed in the IIV Response Report
"DATA",365.15,9,2,2,0)
before processing this buffer entry.
"DATA",365.15,10,0)
Q1^63^0
"DATA",365.15,10,1,0)
^365.152^3^3^3040811^^^
"DATA",365.15,10,1,1,0)
This buffer entry is currently still being processed by the IIV
"DATA",365.15,10,1,2,0)
application.  Unless instructed otherwise, there is no reason you should 
"DATA",365.15,10,1,3,0)
do anything with this buffer entry.
"DATA",365.15,10,2,0)
^365.17^1^1^3040811^^^
"DATA",365.15,10,2,1,0)
Action to take: None.
"DATA",365.15,11,0)
B8^33^0
"DATA",365.15,11,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,11,1,1,0)
The electronic response indicated an error of some kind that needs to be
"DATA",365.15,11,1,2,0)
corrected before the insurance inquiry can be re-transmitted.
"DATA",365.15,11,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,11,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,11,2,2,0)
insurance information.
"DATA",365.15,12,0)
B9^33^1
"DATA",365.15,12,1,0)
^365.152^1^1^3040811^^^
"DATA",365.15,12,1,1,0)
An unknown and unforeseen error has occurred with this entry.
"DATA",365.15,12,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,12,2,1,0)
Action to take:  Please log a NOIS for this issue; include a trace number
"DATA",365.15,12,2,2,0)
if available.
"DATA",365.15,13,0)
B10^33^1
"DATA",365.15,13,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,13,1,1,0)
IIV could not create an inquiry for this entry.  The insurance
"DATA",365.15,13,1,2,0)
company found is listed as inactive in the Insurance Company file (#36).
"DATA",365.15,13,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,13,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,13,2,2,0)
insurance information.
"DATA",365.15,14,0)
B11^33^1
"DATA",365.15,14,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,14,1,1,0)
IIV could not create an inquiry for this entry.  IIV cannot send inquiries
"DATA",365.15,14,1,2,0)
to Medicare or Medicaid.
"DATA",365.15,14,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,14,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,14,2,2,0)
insurance information.
"DATA",365.15,15,0)
B12^33^0
"DATA",365.15,15,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,15,1,1,0)
IIV was unable to electronically verify this insurance information due to
"DATA",365.15,15,1,2,0)
a communication failure.
"DATA",365.15,15,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,15,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,15,2,2,0)
insurance information.
"DATA",365.15,16,0)
B13^33^1
"DATA",365.15,16,1,0)
^365.152^1^1^3040811^^^
"DATA",365.15,16,1,1,0)
The insurance company name for this buffer entry is blank.
"DATA",365.15,16,2,0)
^365.17^5^5^3040811^^^
"DATA",365.15,16,2,1,0)
Action to take:  Please review the NOIS ROS-0402-53243.  If the cause of
"DATA",365.15,16,2,2,0)
the problem described in the NOIS does not apply to your site, please log
"DATA",365.15,16,2,3,0)
a new NOIS for this issue; include a trace number if available.
"DATA",365.15,16,2,4,0)
Otherwise, please contact your IRM and provide them with this buffer
"DATA",365.15,16,2,5,0)
information and the NOIS ROS-0402-53243.
"DATA",365.15,17,0)
B14^33^1
"DATA",365.15,17,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,17,1,1,0)
IIV could not create an inquiry for this entry.  The payer associated with
"DATA",365.15,17,1,2,0)
this insurance company has been deactivated.
"DATA",365.15,17,2,0)
^365.17^3^3^3040811^^^
"DATA",365.15,17,2,1,0)
Action to take:  Either edit this insurance company and link it to another
"DATA",365.15,17,2,2,0)
payer, using the "Insurance Company Entry/Edit" option; otherwise, contact
"DATA",365.15,17,2,3,0)
the insurance company to manually verify this insurance information.
"DATA",365.15,18,0)
B15^33^1
"DATA",365.15,18,1,0)
^365.152^3^3^3040811^^^
"DATA",365.15,18,1,1,0)
IIV could not create an inquiry for this entry.  This patient's 
"DATA",365.15,18,1,2,0)
insurance must be verified manually because the Subscriber ID is 
"DATA",365.15,18,1,3,0)
missing.
"DATA",365.15,18,2,0)
^365.17^2^2^3040811^^^
"DATA",365.15,18,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,18,2,2,0)
insurance information.
"DATA",365.15,21,0)
U1^35^0
"DATA",365.15,21,1,0)
^365.152^4^4^3040811^^^
"DATA",365.15,21,1,1,0)
An ambiguous response has been received.  It could NOT be determined 
"DATA",365.15,21,1,2,0)
whether the insurance company identified the patient as an active member 
"DATA",365.15,21,1,3,0)
of the insurance plan.  Please contact the insurance company to manually 
"DATA",365.15,21,1,4,0)
verify this insurance information.
"DATA",365.15,21,2,0)
^365.17^3^3^3040811^^^
"DATA",365.15,21,2,1,0)
Action to take:  Review the details listed in the IIV Response Report and
"DATA",365.15,21,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,21,2,3,0)
information.
"DATA",365.15,22,0)
U2^35^0
"DATA",365.15,22,1,0)
^365.152^2^2^3040811^^^
"DATA",365.15,22,1,1,0)
While processing a payer response, an unknown and unforeseen error has 
"DATA",365.15,22,1,2,0)
occurred with this entry.
"DATA",365.15,22,2,0)
^365.17^5^5^3040811^^^^
"DATA",365.15,22,2,1,0)
Action to take:  Please log a NOIS for this issue; include a trace number
"DATA",365.15,22,2,2,0)
if available.  A user may process this buffer entry if a NOIS has been
"DATA",365.15,22,2,3,0)
logged with the associated trace number.  To process this buffer entry, 
"DATA",365.15,22,2,4,0)
review the details listed in the IIV Response Report and contact the
"DATA",365.15,22,2,5,0)
insurance company to manually verify this insurance information.
"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^n^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,51.09)

"FIA",350.9,350.9,51.1)

"FIA",350.9,350.9,51.11)

"FIA",350.9,350.9,51.12)

"FIA",350.9,350.9,51.18)

"FIA",350.9,350.9,51.2)

"FIA",350.9,350.9,51.21)

"FIA",350.9,350.9,51.24)

"FIA",350.9,350.9003)
1
"FIA",350.9,350.9003,.01)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^n^p^^^^n^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
1
"FIA",365,365.02)
1
"FIA",365,365.02,.08)

"FIA",365.15)
IIV STATUS TABLE
"FIA",365.15,0)
^IBE(365.15,
"FIA",365.15,0,0)
365.15
"FIA",365.15,0,1)
y^y^f^^n^^y^o^n
"FIA",365.15,0,10)

"FIA",365.15,0,11)

"FIA",365.15,0,"RLRO")

"FIA",365.15,0,"VR")
2.0^IB
"FIA",365.15,365.15)
0
"FIA",365.15,365.152)
0
"FIA",365.15,365.17)
0
"INI")
IBY271PR
"INIT")
IBY271PS
"KRN",.402,2853535,-1)
0^1
"KRN",.402,2853535,0)
IBCNE GENERAL PARAMETER EDIT^3040429.1627^@^350.9^^@^3050106
"KRN",.402,2853535,"DIAB",1,1,200,0)
OFFICE PHONE;REQ
"KRN",.402,2853535,"DIAB",2,1,200,0)
EMAIL ADDRESS;REQ
"KRN",.402,2853535,"DIAB",14,0,350.9,0)
CONTACT PERSON:
"KRN",.402,2853535,"DR",1,350.9)
51.01;51.02;S:'X Y="@10";51.03;@10;51.04;51.13;S:X="I" Y="@1";51.14;51.19;@1;51.15;51.16;^200^VA(200,^^S I(0,0)=D0 S Y(1)=$S($D(^IBE(350.9,D0,51)):^(51),1:"") S X=$P(Y(1),U,16),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");51.2;
"KRN",.402,2853535,"DR",2,200)
.132R~;.151R~;
"KRN",19,15082,-1)
0^4
"KRN",19,15082,0)
IBCNE IIV RESPONSE REPORT^IIV Response Report^^R^^^^^^^^
"KRN",19,15082,1,0)
^^3^3^3030422^
"KRN",19,15082,1,1,0)
Generate IIV Payer Report based on the IIV Responses for a given date
"KRN",19,15082,1,2,0)
range, Payer name range and Patient name range.  All the response
"KRN",19,15082,1,3,0)
information is displayed for the selected responses.
"KRN",19,15082,25)
EN^IBCNERP1(0)
"KRN",19,15082,"U")
IIV RESPONSE REPORT
"KRN",19,15321,-1)
2^5
"KRN",19,15321,0)
IBCNE IIV MENU^IIV Menu^^M^12827^^^^^^^248
"KRN",19,15321,10,0)
^19.01IP^9^8
"KRN",19,15321,10,6,0)
15082^RR
"KRN",19,15321,10,6,"^")
IBCNE IIV RESPONSE REPORT
"KRN",19,15321,10,9,0)
15683^NI
"KRN",19,15321,10,9,"^")
IBCNE POTENTIAL NEW INS FOUND
"KRN",19,15321,"U")
IIV MENU
"KRN",19,15682,-1)
0^2
"KRN",19,15682,0)
IBCNE IIV INACTIVE POLICY RPT^IIV Inactive Policy Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,15682,1,0)
^19.06^3^3^3040806^^^
"KRN",19,15682,1,1,0)
This report will allow a user to display any Inactive Insurance Policies
"KRN",19,15682,1,2,0)
that the IIV software discovered while questioning Payers.  These policies
"KRN",19,15682,1,3,0)
are not necessarily on the patient's insurance file.
"KRN",19,15682,25)
EN^IBCNERP1(1)
"KRN",19,15682,"U")
IIV INACTIVE POLICY REPORT
"KRN",19,15683,-1)
0^3
"KRN",19,15683,0)
IBCNE POTENTIAL NEW INS FOUND^Potential New Insurance Found^^M^^^^^^^^
"KRN",19,15683,1,0)
^^3^3^3040706^
"KRN",19,15683,1,1,0)
While IIV was trying to identify/find (guess) insurance policies, using
"KRN",19,15683,1,2,0)
the Most Popular Payer list and/or old expired insurance policies, 
"KRN",19,15683,1,3,0)
potential insurance policies were discovered.
"KRN",19,15683,10,0)
^19.01IP^2^2
"KRN",19,15683,10,1,0)
15682^IR
"KRN",19,15683,10,1,"^")
IBCNE IIV INACTIVE POLICY RPT
"KRN",19,15683,10,2,0)
15684^AR
"KRN",19,15683,10,2,"^")
IBCNE IIV AMBIGUOUS POLICY RPT
"KRN",19,15683,99)
59939,51629
"KRN",19,15683,"U")
POTENTIAL NEW INSURANCE FOUND
"KRN",19,15684,-1)
0^1
"KRN",19,15684,0)
IBCNE IIV AMBIGUOUS POLICY RPT^IIV Ambiguous Policy Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,15684,1,0)
^^5^5^3040806^
"KRN",19,15684,1,1,0)
This report will allow a user to display any Ambiguous Payer Responses
"KRN",19,15684,1,2,0)
for insurance policies that the IIV software discovered while questioning 
"KRN",19,15684,1,3,0)
Payers.  These policies are not necessarily on the patient's insurance
"KRN",19,15684,1,4,0)
file.  Ambiguous payer responses are those responses that do not have
"KRN",19,15684,1,5,0)
enough information to safely determine if the policy is active or not.
"KRN",19,15684,25)
EN^IBCNERP1(2)
"KRN",19,15684,"U")
IIV AMBIGUOUS POLICY REPORT
"KRN",101,5306,-1)
0^9
"KRN",101,5306,0)
IBJP IIV MOST POPULAR EDIT^Most Popular Payers^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5306,20)
D MP^IBJPI2
"KRN",101,5306,99)
59939,51627
"KRN",101,5576,-1)
0^5
"KRN",101,5576,0)
IBJP IIV MOST POPULAR MENU^Most Popular Payers Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,5576,4)
26^4
"KRN",101,5576,10,0)
^101.01PA^8^8
"KRN",101,5576,10,1,0)
5577^AD^10^
"KRN",101,5576,10,1,"^")
IBJP IIV MOST POPULAR ADD
"KRN",101,5576,10,2,0)
5578^DE^20^
"KRN",101,5576,10,2,"^")
IBJP IIV MOST POPULAR DELETE
"KRN",101,5576,10,3,0)
5579^MO^30^
"KRN",101,5576,10,3,"^")
IBJP IIV MOST POPULAR MODIFY
"KRN",101,5576,10,4,0)
5580^RO^40^
"KRN",101,5576,10,4,"^")
IBJP IIV MOST POPULAR REORDER
"KRN",101,5576,10,6,0)
5584^RS^70^
"KRN",101,5576,10,6,"^")
IBJP IIV MOST POPULAR RESTORE
"KRN",101,5576,10,7,0)
5585^SA^80^
"KRN",101,5576,10,7,"^")
IBJP IIV MOST POPULAR SAVE
"KRN",101,5576,10,8,0)
5586^EX^100^
"KRN",101,5576,10,8,"^")
IBJP IIV MOST POPULAR EXIT
"KRN",101,5576,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,5576,20)
K IBFASTXT
"KRN",101,5576,26)
D SHOW^VALM
"KRN",101,5576,28)
Select Action:  
"KRN",101,5576,99)
59939,51627
"KRN",101,5577,-1)
0^1
"KRN",101,5577,0)
IBJP IIV MOST POPULAR ADD^Add Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5577,20)
D ADD^IBJPI4
"KRN",101,5577,99)
59939,51627
"KRN",101,5578,-1)
0^2
"KRN",101,5578,0)
IBJP IIV MOST POPULAR DELETE^Delete Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5578,20)
D DELETE^IBJPI4
"KRN",101,5578,99)
59939,51627
"KRN",101,5579,-1)
0^4
"KRN",101,5579,0)
IBJP IIV MOST POPULAR MODIFY^Modify Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5579,20)
D MODIFY^IBJPI4
"KRN",101,5579,99)
59939,51627
"KRN",101,5580,-1)
0^3
"KRN",101,5580,0)
IBJP IIV MOST POPULAR REORDER^Reorder Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5580,20)
D REORDER^IBJPI4
"KRN",101,5580,99)
59939,51627
"KRN",101,5584,-1)
0^6
"KRN",101,5584,0)
IBJP IIV MOST POPULAR RESTORE^Restore Saved List^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5584,4)
^^^
"KRN",101,5584,20)
D RESTORE^IBJPI4
"KRN",101,5584,99)
59939,51627
"KRN",101,5585,-1)
0^8
"KRN",101,5585,0)
IBJP IIV MOST POPULAR SAVE^Save Current List^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5585,4)
^^^
"KRN",101,5585,20)
D SAVE^IBJPI4
"KRN",101,5585,99)
59939,51627
"KRN",101,5586,-1)
0^7
"KRN",101,5586,0)
IBJP IIV MOST POPULAR EXIT^Exit Action^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5586,20)
D EXIT^IBJPI4
"KRN",101,5586,99)
59939,51627
"KRN",409.61,640,-1)
0^1
"KRN",409.61,640,0)
IBJP IIV MOST POPULAR PAYERS^1^^80^6^19^1^1^^IBJP IIV MOST POPULAR MENU^eIIV Most Popular Payers List^1^^1
"KRN",409.61,640,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,640,"ARRAY")
 ^TMP($J,"IBJPI3")
"KRN",409.61,640,"FNL")
D EXIT^IBJPI3
"KRN",409.61,640,"HDR")
D HDR^IBJPI3
"KRN",409.61,640,"HLP")
D HELP^IBJPI3
"KRN",409.61,640,"INIT")
D INIT^IBJPI3
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",248,-1)
1^1
"PKG",248,0)
INTEGRATED BILLING^IB^APP
"PKG",248,20,0)
^9.402P^1^1
"PKG",248,20,1,0)
2^^IBAXDR
"PKG",248,20,1,1)

"PKG",248,20,"B",2,1)

"PKG",248,22,0)
^9.49I^1^1
"PKG",248,22,1,0)
2.0^2940321^2940616
"PKG",248,22,1,"PAH",1,0)
271^3050208^12813
"PKG",248,22,1,"PAH",1,1,0)
^^8^8^3050208
"PKG",248,22,1,"PAH",1,1,1,0)
This patch addresses the following NOIS messages:
"PKG",248,22,1,"PAH",1,1,2,0)
------------------------------------------------
"PKG",248,22,1,"PAH",1,1,3,0)
BAY-0204-31962         IIV inquiries are increasing
"PKG",248,22,1,"PAH",1,1,4,0)
FGH-0304-32103         Important IIV Msg-Monetary Amount
"PKG",248,22,1,"PAH",1,1,5,0)
UNY-0204-11346         ERROR - CHK+23^IBCNEHLQ
"PKG",248,22,1,"PAH",1,1,6,0)
WPB-0904-32212         ERROR - EN+43^IBCNEDE2:1, %DSM-E-NULLSUBSCR
"PKG",248,22,1,"PAH",1,1,7,0)
 
"PKG",248,22,1,"PAH",1,1,8,0)
This patch also includes several enhancements for the IIV interface.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
50
"RTN","IBCNBLA")
0^21^B65200465
"RTN","IBCNBLA",1,0)
IBCNBLA ;ALB/ARH - Ins Buffer: LM action calls ;1 Jun 97
"RTN","IBCNBLA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,184,271**;21-MAR-94
"RTN","IBCNBLA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLA",4,0)
 ;
"RTN","IBCNBLA",5,0)
NEWSCRN(TEMPLAT,TMPARR,IBBUFDA) ; open a new screen for a specific buffer entry, pass in LM template and the array to select from
"RTN","IBCNBLA",6,0)
 ; if temp array is defined then user selects the buffer entry, otherwise use entry passed in
"RTN","IBCNBLA",7,0)
 ;
"RTN","IBCNBLA",8,0)
 I $G(TMPARR)'="" N IBBUFDA S IBBUFDA=$$SEL(TMPARR)
"RTN","IBCNBLA",9,0)
 I +$G(IBBUFDA),$G(TEMPLAT)'="",+$$LOCK^IBCNBU1(IBBUFDA,1) D EN^VALM(TEMPLAT) D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA",10,0)
 S VALMBCK="R"
"RTN","IBCNBLA",11,0)
 Q
"RTN","IBCNBLA",12,0)
 ;
"RTN","IBCNBLA",13,0)
SEL(TMPARR) ; user selects one of the items from the list on the screen
"RTN","IBCNBLA",14,0)
 ;
"RTN","IBCNBLA",15,0)
 N VALMY,IBX,IBY,IBSELN S IBX=""
"RTN","IBCNBLA",16,0)
 I $G(TMPARR)'="",'$O(^TMP(TMPARR,$J,0)) D  G SELQ
"RTN","IBCNBLA",17,0)
 . W !!,"There are no '",$S($G(VALM("ENTITY"))'="":VALM("ENTITY"),1:"record"),"s' to select.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",18,0)
 ;
"RTN","IBCNBLA",19,0)
 D EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCNBLA",20,0)
 I $D(VALMY),$G(TMPARR)'="" S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
"RTN","IBCNBLA",21,0)
 . S IBX=$P($G(^TMP(TMPARR,$J,IBSELN)),U,2,99)
"RTN","IBCNBLA",22,0)
 . ;
"RTN","IBCNBLA",23,0)
 . I TMPARR="IBCNBLLX" S IBY=$P($G(^IBA(355.33,+IBX,0)),U,4) I IBY'="E" D  S IBX=""
"RTN","IBCNBLA",24,0)
 .. W !!," >>> Selected entry has been ",$S(IBY="A":"ACCEPTED",IBY="R":"REJECTED",1:"UNKNOWN STATUS")
"RTN","IBCNBLA",25,0)
 .. W " and may no longer be edited or modified.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",26,0)
 ;
"RTN","IBCNBLA",27,0)
SELQ Q IBX
"RTN","IBCNBLA",28,0)
 ;
"RTN","IBCNBLA",29,0)
PNXTSCRN(TEMPLAT,IBBUFDA) ; open a new screen for a buffer entry, rebuild the process screen on return since it may have changed
"RTN","IBCNBLA",30,0)
 D NEWSCRN^IBCNBLA(TEMPLAT,"",IBBUFDA)
"RTN","IBCNBLA",31,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R"
"RTN","IBCNBLA",32,0)
 Q
"RTN","IBCNBLA",33,0)
 ;
"RTN","IBCNBLA",34,0)
LNXTSCRN(TEMPLAT,TMPARR) ; select entries from list to process/expand
"RTN","IBCNBLA",35,0)
 ;
"RTN","IBCNBLA",36,0)
 ; This procedure is called from the ListMan action protocols for
"RTN","IBCNBLA",37,0)
 ; processing and expanding buffer entries.
"RTN","IBCNBLA",38,0)
 ;    TEMPLAT - list template name for associated action
"RTN","IBCNBLA",39,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",40,0)
 ;
"RTN","IBCNBLA",41,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",42,0)
 NEW ACT,REMAIN,DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNBLA",43,0)
 D FULL^VALM1
"RTN","IBCNBLA",44,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",45,0)
 I '$D(IBCNEZAR) G LNXTX
"RTN","IBCNBLA",46,0)
 ;
"RTN","IBCNBLA",47,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",48,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",49,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",50,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",51,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)    ; buffer ien
"RTN","IBCNBLA",52,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",53,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",54,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",55,0)
 .. D EN^VALM(TEMPLAT)                      ; invoke list template
"RTN","IBCNBLA",56,0)
 .. I $G(IBFASTXT) S IBCNEZQ=1 Q            ; Fast Exit processing
"RTN","IBCNBLA",57,0)
 .. S ACT="expand"
"RTN","IBCNBLA",58,0)
 .. I TEMPLAT["PROCESS" S ACT="process"
"RTN","IBCNBLA",59,0)
 .. S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",60,0)
 .. I 'REMAIN Q
"RTN","IBCNBLA",61,0)
 .. W @IOF
"RTN","IBCNBLA",62,0)
 .. W !!!,"You are ",ACT,"ing multiple insurance buffer entries."
"RTN","IBCNBLA",63,0)
 .. W !,"You just completed entry number ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,")."
"RTN","IBCNBLA",64,0)
 .. S DIR(0)="Y"
"RTN","IBCNBLA",65,0)
 .. S DIR("A")="Do you want to "_ACT_" the remaining entry"
"RTN","IBCNBLA",66,0)
 .. I REMAIN>1 S DIR("A")="Do you want to "_ACT_" the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",67,0)
 .. S DIR("B")="YES"
"RTN","IBCNBLA",68,0)
 .. W ! D ^DIR K DIR
"RTN","IBCNBLA",69,0)
 .. I 'Y S IBCNEZQ=1       ; User said NO so set the Quitting variable
"RTN","IBCNBLA",70,0)
 .. Q
"RTN","IBCNBLA",71,0)
 . ;
"RTN","IBCNBLA",72,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",73,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",74,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",75,0)
 . Q
"RTN","IBCNBLA",76,0)
LNXTX ;
"RTN","IBCNBLA",77,0)
 S VALMBCK="R"
"RTN","IBCNBLA",78,0)
 Q
"RTN","IBCNBLA",79,0)
 ;
"RTN","IBCNBLA",80,0)
LREJECT(TMPARR) ; user select entries from list then reject/delete them
"RTN","IBCNBLA",81,0)
 ;
"RTN","IBCNBLA",82,0)
 ; This procedure is called from the ListMan action protocol for
"RTN","IBCNBLA",83,0)
 ; rejecting buffer entries.
"RTN","IBCNBLA",84,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",85,0)
 ;
"RTN","IBCNBLA",86,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",87,0)
 D FULL^VALM1
"RTN","IBCNBLA",88,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",89,0)
 I '$D(IBCNEZAR) G LREJX
"RTN","IBCNBLA",90,0)
 ;
"RTN","IBCNBLA",91,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",92,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",93,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",94,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",95,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)
"RTN","IBCNBLA",96,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",97,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",98,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",99,0)
 .. W @IOF,!?2,$G(IORVON)
"RTN","IBCNBLA",100,0)
 .. W " Entry ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,") "
"RTN","IBCNBLA",101,0)
 .. W $G(IORVOFF)
"RTN","IBCNBLA",102,0)
 .. D REJECT^IBCNBLA1(IBCNEZBF,.IBCNEZQ)
"RTN","IBCNBLA",103,0)
 .. ;
"RTN","IBCNBLA",104,0)
 .. ; If the user wants to stop and we're not processing the last one,
"RTN","IBCNBLA",105,0)
 .. ; then determine if we should process the remaining entries
"RTN","IBCNBLA",106,0)
 .. ;
"RTN","IBCNBLA",107,0)
 .. I $D(IBCNEZQ),IBCNEZCT<IBCNEZGD D
"RTN","IBCNBLA",108,0)
 ... NEW REMAIN,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNBLA",109,0)
 ... S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",110,0)
 ... S DIR(0)="Y"
"RTN","IBCNBLA",111,0)
 ... S DIR("A")="Do you want to process the remaining entry"
"RTN","IBCNBLA",112,0)
 ... I REMAIN>1 S DIR("A")="Do you want to process the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",113,0)
 ... S DIR("B")="NO"
"RTN","IBCNBLA",114,0)
 ... W ! D ^DIR K DIR
"RTN","IBCNBLA",115,0)
 ... ; if user wants to continue, then kill the quitting variable
"RTN","IBCNBLA",116,0)
 ... I Y KILL IBCNEZQ
"RTN","IBCNBLA",117,0)
 ... Q
"RTN","IBCNBLA",118,0)
 .. Q
"RTN","IBCNBLA",119,0)
 . ;
"RTN","IBCNBLA",120,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",121,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",122,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",123,0)
 . Q
"RTN","IBCNBLA",124,0)
LREJX ;
"RTN","IBCNBLA",125,0)
 S VALMBCK="R"
"RTN","IBCNBLA",126,0)
 Q
"RTN","IBCNBLA",127,0)
 ;
"RTN","IBCNBLA",128,0)
 ;
"RTN","IBCNBLA",129,0)
FASTEXIT ; sets flag signaling system should be exited
"RTN","IBCNBLA",130,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNBLA",131,0)
 S VALMBCK="Q"
"RTN","IBCNBLA",132,0)
 D FULL^VALM1
"RTN","IBCNBLA",133,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO" D ^DIR
"RTN","IBCNBLA",134,0)
 I +Y S IBFASTXT=1
"RTN","IBCNBLA",135,0)
 Q
"RTN","IBCNBLA",136,0)
 ;
"RTN","IBCNBLA",137,0)
SELSORT ;  select the way to sort the list screen
"RTN","IBCNBLA",138,0)
 N DIR,DIRUT,X,Y,DTOUT,DUOUT,DIROUT,ST,STDES
"RTN","IBCNBLA",139,0)
 ;
"RTN","IBCNBLA",140,0)
 D FULL^VALM1 W !
"RTN","IBCNBLA",141,0)
 W !,"Select the item to sort the buffer records on the buffer list screen."
"RTN","IBCNBLA",142,0)
 S DIR(0)="SO^1:Patient Name;2:Insurance Company;3:Source of Information;4:Date Entered;5:Inpatients;6:Means Test;7:On Hold;8:Verified;9:IIV Status"
"RTN","IBCNBLA",143,0)
 S DIR("A")="Sort the list by",DIR("B")=$P($G(IBCNSORT),"^",2)
"RTN","IBCNBLA",144,0)
 D ^DIR K DIR
"RTN","IBCNBLA",145,0)
 I 'Y G SELSORTX
"RTN","IBCNBLA",146,0)
 S IBCNSORT=Y_"^"_Y(0)
"RTN","IBCNBLA",147,0)
 ;
"RTN","IBCNBLA",148,0)
 ; ESG - 6/7/02 - SDD 5.1.1
"RTN","IBCNBLA",149,0)
 ; If the user wants to sort by symbol, then ask them which
"RTN","IBCNBLA",150,0)
 ; symbol should appear first and process accordingly.
"RTN","IBCNBLA",151,0)
 ;
"RTN","IBCNBLA",152,0)
 KILL IBCNSORT(1)       ; initialize the symbol sort array
"RTN","IBCNBLA",153,0)
 I +IBCNSORT=9 D  I $D(DIRUT)!('Y) G SELSORTX
"RTN","IBCNBLA",154,0)
 . ;
"RTN","IBCNBLA",155,0)
 . ; build the array of default sort order
"RTN","IBCNBLA",156,0)
 . S IBCNSORT(1,"+")=10
"RTN","IBCNBLA",157,0)
 . S IBCNSORT(1,"-")=20
"RTN","IBCNBLA",158,0)
 . S IBCNSORT(1,"#")=25 ; Added pound to sort criteria
"RTN","IBCNBLA",159,0)
 . S IBCNSORT(1,"!")=30
"RTN","IBCNBLA",160,0)
 . S IBCNSORT(1," ")=40
"RTN","IBCNBLA",161,0)
 . S IBCNSORT(1,"?")=50
"RTN","IBCNBLA",162,0)
 . S IBCNSORT(1,"*")=60
"RTN","IBCNBLA",163,0)
 . ;
"RTN","IBCNBLA",164,0)
 . ; build the DIR array to ask the question
"RTN","IBCNBLA",165,0)
 . S DIR(0)="SO^"
"RTN","IBCNBLA",166,0)
 . F ST="1:+'A1","2:-'D1","3:#'U1","4:!'B1","5: '","6:?'Q1" D  ; removed blanks ; replaced tilde w/apostrophe and added pound as option 3
"RTN","IBCNBLA",167,0)
 .. I ST="5: '" S STDES="No Problems Identified, Awaiting Electronic Processing" ; removed blanks
"RTN","IBCNBLA",168,0)
 .. E  S STDES=$$GET1^DIQ(365.15,$$FIND1^DIC(365.15,"","X",$P(ST,"'",2)),.01,"E")
"RTN","IBCNBLA",169,0)
 .. S DIR(0)=DIR(0)_$P(ST,"'")_"  "_STDES_$S(ST="6:?'Q1":"",1:";")
"RTN","IBCNBLA",170,0)
 . S DIR("A")="Which IIV Status do you want to appear first?"
"RTN","IBCNBLA",171,0)
 . S DIR("B")=1
"RTN","IBCNBLA",172,0)
 . S DIR("?",1)=" Please identify the IIV status that you want to appear first in the Insurance"
"RTN","IBCNBLA",173,0)
 . S DIR("?",2)=" Buffer listing.  The symbol appears immediately to the left of the patient"
"RTN","IBCNBLA",174,0)
 . S DIR("?",3)=" name in the list.  The default sort order for statuses is the same as"
"RTN","IBCNBLA",175,0)
 . S DIR("?",4)=" they are presented in this list below.  You may choose which status will appear"
"RTN","IBCNBLA",176,0)
 . S DIR("?",5)=" first in the list.  The remaining statuses will be sorted according to this"
"RTN","IBCNBLA",177,0)
 . S DIR("?",6)=" default sort order.  When sorting by IIV status, the secondary sort"
"RTN","IBCNBLA",178,0)
 . S DIR("?",7)=" is the entered date and the final sort is by patient name."
"RTN","IBCNBLA",179,0)
 . S DIR("?")=" "
"RTN","IBCNBLA",180,0)
 . D ^DIR K DIR
"RTN","IBCNBLA",181,0)
 . I $D(DIRUT) Q
"RTN","IBCNBLA",182,0)
 . I 'Y Q
"RTN","IBCNBLA",183,0)
 . ;
"RTN","IBCNBLA",184,0)
 . ; update the sort order array with the chosen symbol
"RTN","IBCNBLA",185,0)
 . S IBCNSORT(1,$E(Y(0)))=1
"RTN","IBCNBLA",186,0)
 . S $P(IBCNSORT,U,3)=$E(Y(0))
"RTN","IBCNBLA",187,0)
 . Q
"RTN","IBCNBLA",188,0)
 ;
"RTN","IBCNBLA",189,0)
 ; rebuild and resort the list and update the list header
"RTN","IBCNBLA",190,0)
 D INIT^IBCNBLL,HDR^IBCNBLL
"RTN","IBCNBLA",191,0)
 ;
"RTN","IBCNBLA",192,0)
SELSORTX ;
"RTN","IBCNBLA",193,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",194,0)
 Q
"RTN","IBCNBLA",195,0)
 ;
"RTN","IBCNBLA",196,0)
TGLSCRN(IBBUFDA) ; toggle process screen from policy to insurance info, glbal variable IBCNSCRN contains ins co chosen
"RTN","IBCNBLA",197,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA",198,0)
 D FULL^VALM1
"RTN","IBCNBLA",199,0)
 W !!,"Enter an Insurance Company to display the Groups/Plans for that company or ",!,"enter Return to display a patient's policies.",!!
"RTN","IBCNBLA",200,0)
 S IBCNSCRN=+$$SELINS^IBCNBU1
"RTN","IBCNBLA",201,0)
 ;
"RTN","IBCNBLA",202,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",203,0)
 Q
"RTN","IBCNBLA",204,0)
 ;
"RTN","IBCNBLA",205,0)
AMCHK ; This procedure is called from the main buffer screen as an action
"RTN","IBCNBLA",206,0)
 ; to check the insurance company names in the buffer file.  This will
"RTN","IBCNBLA",207,0)
 ; invoke another ListMan screen that shows a list of all insurance 
"RTN","IBCNBLA",208,0)
 ; company names that do not exist in File 36 either as names or as
"RTN","IBCNBLA",209,0)
 ; synonyms and also they do not exist in the Auto Match file.  These
"RTN","IBCNBLA",210,0)
 ; are bad insurance company names that need to be corrected before
"RTN","IBCNBLA",211,0)
 ; electronic insurance verification attempts can be made.
"RTN","IBCNBLA",212,0)
 ; esg - 6/20/02 - SDD 5.1.11 - Add an action on the main buffer
"RTN","IBCNBLA",213,0)
 ;       screen to call the buffer names check option
"RTN","IBCNBLA",214,0)
 ;
"RTN","IBCNBLA",215,0)
 D EN^IBCNEAMC
"RTN","IBCNBLA",216,0)
 S VALMBCK="R"
"RTN","IBCNBLA",217,0)
AMCHKX ;
"RTN","IBCNBLA",218,0)
 Q
"RTN","IBCNBLA",219,0)
 ;
"RTN","IBCNBLA1")
0^34^B76644494
"RTN","IBCNBLA1",1,0)
IBCNBLA1 ;ALB/ARH - Ins Buffer: LM action calls (cont) ;1 Jun 97
"RTN","IBCNBLA1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,133,149,184,252,271**;21-MAR-94
"RTN","IBCNBLA1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLA1",4,0)
 ;
"RTN","IBCNBLA1",5,0)
ADDBUF ; add a new buffer entry protocol
"RTN","IBCNBLA1",6,0)
 N DIC,DIR,DIRUT,DUOUT,X,Y,IBIN,DFN,IBBUFDA,IBDATA,AMLIST,IBHELP
"RTN","IBCNBLA1",7,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",8,0)
 ;
"RTN","IBCNBLA1",9,0)
 ; Patient lookup
"RTN","IBCNBLA1",10,0)
 S DIC(0)="AEQM",DIC="^DPT(" D ^DIC Q:Y'>0  S DFN=+Y W !
"RTN","IBCNBLA1",11,0)
 ;
"RTN","IBCNBLA1",12,0)
INS ; Insurance company lookup
"RTN","IBCNBLA1",13,0)
 S DIR("A")="Insurance Company",DIR(0)="FO^1:30"
"RTN","IBCNBLA1",14,0)
 S DIR("?",1)="Please enter the name of the insurance company that provides coverage for this"
"RTN","IBCNBLA1",15,0)
 S DIR("?",2)="patient.  This response is a free text response, however, a partial insurance"
"RTN","IBCNBLA1",16,0)
 S DIR("?")="company name look-up is available here."
"RTN","IBCNBLA1",17,0)
 ; BHS - 10/15/03 - Removed quit condition when user enters a caret
"RTN","IBCNBLA1",18,0)
 ;                  during the insurance lister and only sets IBIN
"RTN","IBCNBLA1",19,0)
 ;                  when a valid selection is made
"RTN","IBCNBLA1",20,0)
 D ^DIR K DIR Q:$D(DIRUT)  S IBIN=Y,Y=$$DICINS^IBCNBU1(Y,1,10) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",21,0)
 ;
"RTN","IBCNBLA1",22,0)
 ; ESG - 6/17/02 - Usage of Auto Match file when adding a buffer entry
"RTN","IBCNBLA1",23,0)
 ;     - SDD 5.1.3
"RTN","IBCNBLA1",24,0)
 ;
"RTN","IBCNBLA1",25,0)
 ; BHS - 10/15/03 - Added condition to allow Auto Match lookup when user
"RTN","IBCNBLA1",26,0)
 ;                  entered a caret during the insurance lister
"RTN","IBCNBLA1",27,0)
 I Y=0!(Y<0),$$AMLOOK^IBCNEUT1(IBIN,1,.AMLIST) S Y=$$AMSEL^IBCNEUT1(.AMLIST) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",28,0)
 I '$$INPTTR(355.33,20.01,$$UP^XLFSTR(IBIN)) D  G INS
"RTN","IBCNBLA1",29,0)
 . D FIELD^DID(355.33,20.01,"","HELP-PROMPT","IBHELP")
"RTN","IBCNBLA1",30,0)
 . W !?5,IBHELP("HELP-PROMPT") Q
"RTN","IBCNBLA1",31,0)
 ;
"RTN","IBCNBLA1",32,0)
 S DIR(0)="Y",DIR("A")="Add a new Insurance Buffer entry for this patient and company",DIR("B")="YES" W ! D ^DIR K DIR Q:Y'=1
"RTN","IBCNBLA1",33,0)
 ;
"RTN","IBCNBLA1",34,0)
 S IBDATA(20.01)=$$UP^XLFSTR(IBIN),IBDATA(60.01)=DFN
"RTN","IBCNBLA1",35,0)
 S IBBUFDA=+$$ADDSTF^IBCNBES(1,DFN,.IBDATA) K IBDATA Q:'IBBUFDA
"RTN","IBCNBLA1",36,0)
 ;
"RTN","IBCNBLA1",37,0)
 I '$$LOCK^IBCNBU1(IBBUFDA,1) Q
"RTN","IBCNBLA1",38,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",39,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",40,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",41,0)
 D BUFF^IBCNEUT2(IBBUFDA,+$$INSERROR^IBCNEUT3("B",IBBUFDA))   ; symbol
"RTN","IBCNBLA1",42,0)
 D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",43,0)
 ;
"RTN","IBCNBLA1",44,0)
 D INIT^IBCNBLL,HDR^IBCNBLL S VALMBCK="R"
"RTN","IBCNBLA1",45,0)
 Q
"RTN","IBCNBLA1",46,0)
 ;
"RTN","IBCNBLA1",47,0)
INSEDIT(IBBUFDA) ; edit the Insurance data of a buffer entry
"RTN","IBCNBLA1",48,0)
 ;
"RTN","IBCNBLA1",49,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",50,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",51,0)
 ;
"RTN","IBCNBLA1",52,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",53,0)
 Q
"RTN","IBCNBLA1",54,0)
 ;
"RTN","IBCNBLA1",55,0)
GRPEDIT(IBBUFDA) ; edit the Group/Plan data of a buffer entry
"RTN","IBCNBLA1",56,0)
 ;
"RTN","IBCNBLA1",57,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",58,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",59,0)
 ;
"RTN","IBCNBLA1",60,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R"
"RTN","IBCNBLA1",61,0)
 Q
"RTN","IBCNBLA1",62,0)
 ;
"RTN","IBCNBLA1",63,0)
POLEDIT(IBBUFDA) ; edit the Subscriber Policy data of a buffer entry
"RTN","IBCNBLA1",64,0)
 ;
"RTN","IBCNBLA1",65,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",66,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",67,0)
 ;
"RTN","IBCNBLA1",68,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",69,0)
 Q
"RTN","IBCNBLA1",70,0)
 ;
"RTN","IBCNBLA1",71,0)
ALLEDIT(IBBUFDA) ; edit All data of a buffer entry
"RTN","IBCNBLA1",72,0)
 ;
"RTN","IBCNBLA1",73,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",74,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",75,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",76,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",77,0)
 ;
"RTN","IBCNBLA1",78,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",79,0)
 Q
"RTN","IBCNBLA1",80,0)
 ;
"RTN","IBCNBLA1",81,0)
CMPEDIT(IBBUFDA) ; display a buffer entry and an existing ins entry for comparison, allow edit of buffer data
"RTN","IBCNBLA1",82,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",83,0)
 N IBDA,IBPOLDA,IBGRPDA,IBINSDA,DIR,DIRUT,X,Y
"RTN","IBCNBLA1",84,0)
 ;
"RTN","IBCNBLA1",85,0)
 D FULL^VALM1
"RTN","IBCNBLA1",86,0)
 ;
"RTN","IBCNBLA1",87,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX") I 'IBDA G CMPQ
"RTN","IBCNBLA1",88,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G CMPQ
"RTN","IBCNBLA1",89,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",90,0)
 ;
"RTN","IBCNBLA1",91,0)
CEINS W @IOF
"RTN","IBCNBLA1",92,0)
 I 'IBINSDA W !,"No Insurance Company Selected for Comparison."
"RTN","IBCNBLA1",93,0)
 W ! D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBLA1",94,0)
 S DIR("?")="The Buffer entry's Insurance Company data may be edited or Return advances the display to the Group/Plan data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBLA1",95,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",96,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",97,0)
 I Y'="","EEee"[Y D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA) G CEINS
"RTN","IBCNBLA1",98,0)
 ;
"RTN","IBCNBLA1",99,0)
CEGRP W @IOF
"RTN","IBCNBLA1",100,0)
 I 'IBGRPDA W !,"No Insurance Group/Plan Selected for Comparison."
"RTN","IBCNBLA1",101,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBLA1",102,0)
 W ! D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBLA1",103,0)
 S DIR("?")="The Buffer entry's Group/Plan data may be edited or Return advances the display to the Patient Policy data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBLA1",104,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",105,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",106,0)
 I Y'="","EEee"[Y D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA) G CEGRP
"RTN","IBCNBLA1",107,0)
 ;
"RTN","IBCNBLA1",108,0)
CEPOL W @IOF
"RTN","IBCNBLA1",109,0)
 I 'IBPOLDA W !,"No Patient Policy Selected for Comparison."
"RTN","IBCNBLA1",110,0)
 W ! D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",111,0)
 S DIR("?")="The Buffer entry's Patient Policy data may be edited or return to the screen display.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBLA1",112,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",113,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",114,0)
 I Y'="","EEee"[Y D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA) G CEPOL
"RTN","IBCNBLA1",115,0)
 ;
"RTN","IBCNBLA1",116,0)
CMPQ D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",117,0)
 Q
"RTN","IBCNBLA1",118,0)
 ;
"RTN","IBCNBLA1",119,0)
VERIFY(IBBUFDA) ; verify a buffer entry
"RTN","IBCNBLA1",120,0)
 ;
"RTN","IBCNBLA1",121,0)
 N DIR,DIRUT,X,Y,IBX,IBY Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",122,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",123,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",124,0)
 ;
"RTN","IBCNBLA1",125,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)),IBY="" I +$P(IBX,U,10) S IBY="Re-" W !!,"This entry already verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),"."
"RTN","IBCNBLA1",126,0)
 ;
"RTN","IBCNBLA1",127,0)
 S DIR("?")="Enter Yes if the coverage and information in this Buffer entry has been verified to be accurate." W !!
"RTN","IBCNBLA1",128,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")=IBY_"Verify the coverage in this buffer entry"
"RTN","IBCNBLA1",129,0)
 D ^DIR
"RTN","IBCNBLA1",130,0)
 I Y=1 D
"RTN","IBCNBLA1",131,0)
 . ; WCW - 04/11/2003 Clear out IIV Status when manually verified
"RTN","IBCNBLA1",132,0)
 . D CLEAR^IBCNEUT4(IBBUFDA,.IIVERR,1) K IIVERR
"RTN","IBCNBLA1",133,0)
 . K IBX S IBX(.1)="NOW",IBX(.11)=DUZ D EDITSTF^IBCNBES(IBBUFDA,.IBX)
"RTN","IBCNBLA1",134,0)
 . D INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED") W "  Coverage Verified ..." H 2
"RTN","IBCNBLA1",135,0)
 ;
"RTN","IBCNBLA1",136,0)
 Q
"RTN","IBCNBLA1",137,0)
 ;
"RTN","IBCNBLA1",138,0)
REJECT(IBBUFDA,DIRUT) ; process a reject and then delete a buffer entry
"RTN","IBCNBLA1",139,0)
 ; Output parameter DIRUT is optional and passed in by reference.  This
"RTN","IBCNBLA1",140,0)
 ; variable will be defined if the user enters a leading up-arrow,
"RTN","IBCNBLA1",141,0)
 ; times out, or enters a null response.  This is so the calling routine
"RTN","IBCNBLA1",142,0)
 ; can detect if the user did something other than say Yes or No to
"RTN","IBCNBLA1",143,0)
 ; this question.
"RTN","IBCNBLA1",144,0)
 ;
"RTN","IBCNBLA1",145,0)
 N DIR,X,Y,IBX Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",146,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",147,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",148,0)
 W !!,"This action will delete all insurance and patient specific data from a buffer ",!,"entry without first saving that data to the insurance files, leaving a stub ",!,"entry for reporting purposes.",!
"RTN","IBCNBLA1",149,0)
 ;
"RTN","IBCNBLA1",150,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)) I +$P(IBX,U,10) W !!,"This entry has been verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),".",!!
"RTN","IBCNBLA1",151,0)
 ;
"RTN","IBCNBLA1",152,0)
 S DIR("?")="Enter Yes to delete this buffer entry without saving any of it's data to the Insurance files."
"RTN","IBCNBLA1",153,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")="Reject this buffer entry (delete without saving to Insurance files)"
"RTN","IBCNBLA1",154,0)
 D ^DIR
"RTN","IBCNBLA1",155,0)
 I $D(DIRUT) G REJX
"RTN","IBCNBLA1",156,0)
 I Y=1 D REJECT^IBCNBAR(IBBUFDA) S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"REJECTED")
"RTN","IBCNBLA1",157,0)
REJX ;
"RTN","IBCNBLA1",158,0)
 Q
"RTN","IBCNBLA1",159,0)
 ;
"RTN","IBCNBLA1",160,0)
ACCEPT(IBBUFDA) ; process a buffer entry for acceptance
"RTN","IBCNBLA1",161,0)
 ;
"RTN","IBCNBLA1",162,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",163,0)
 N IBDA,IBINSDA,IBGRPDA,IBPOLDA,IBACCEPT S IBACCEPT=0
"RTN","IBCNBLA1",164,0)
 ;
"RTN","IBCNBLA1",165,0)
 D FULL^VALM1
"RTN","IBCNBLA1",166,0)
 ;
"RTN","IBCNBLA1",167,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX")
"RTN","IBCNBLA1",168,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G ACCPTQ
"RTN","IBCNBLA1",169,0)
 I +$P(IBDA,U,3),'$P(IBDA,U,2) W !!,"Error: the selected policy has no associated plan.  Can not continue." D WAIT^IBCNBUH G ACCPTQ
"RTN","IBCNBLA1",170,0)
 ;
"RTN","IBCNBLA1",171,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",172,0)
 S:'IBINSDA (IBGRPDA,IBPOLDA)=0 S:'IBGRPDA IBPOLDA=0
"RTN","IBCNBLA1",173,0)
 ;
"RTN","IBCNBLA1",174,0)
 I 'IBINSDA,'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) D  G ACCPTQ
"RTN","IBCNBLA1",175,0)
 . W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies."
"RTN","IBCNBLA1",176,0)
 . D WAIT^IBCNBUH
"RTN","IBCNBLA1",177,0)
 ;
"RTN","IBCNBLA1",178,0)
 S IBACCEPT=$$ACCEPT^IBCNBAA(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBLA1",179,0)
 ;
"RTN","IBCNBLA1",180,0)
ACCPTQ S VALMBCK="R" I +IBACCEPT S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"ACCEPTED")
"RTN","IBCNBLA1",181,0)
 Q
"RTN","IBCNBLA1",182,0)
 ;
"RTN","IBCNBLA1",183,0)
RESP(BUFF) ; List Response Report for Trace # associated with this entry
"RTN","IBCNBLA1",184,0)
 ; BUFF = buffer IEN
"RTN","IBCNBLA1",185,0)
 N NG,IBRSP,IBSTR,IBTRC,STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNBLA1",186,0)
 ; Reset to Full Screen Mode
"RTN","IBCNBLA1",187,0)
 D FULL^VALM1
"RTN","IBCNBLA1",188,0)
 S NG=0
"RTN","IBCNBLA1",189,0)
 I $G(BUFF)="" S NG=1
"RTN","IBCNBLA1",190,0)
 I 'NG S IBRSP=$O(^IBCN(365,"AF",BUFF,"")) I IBRSP="" S NG=1
"RTN","IBCNBLA1",191,0)
 I 'NG S IBSTR=$G(^IBCN(365,IBRSP,0)),IBTRC=$P(IBSTR,U,9) I IBTRC="" S NG=1
"RTN","IBCNBLA1",192,0)
 I NG W !!,"This entry does not have an associated IIV response." D PAUSE^VALM1 G RESPX
"RTN","IBCNBLA1",193,0)
 S STOP=0,IBCNERTN="IBCNERP1",IBCNESPC("TRCN")=IBTRC_U_IBRSP
"RTN","IBCNBLA1",194,0)
 D R100^IBCNERP1
"RTN","IBCNBLA1",195,0)
RESPX S VALMBCK="R"
"RTN","IBCNBLA1",196,0)
 Q
"RTN","IBCNBLA1",197,0)
INPTTR(FILE,FLD,X) ; Does value X pass input transform for file, field?
"RTN","IBCNBLA1",198,0)
 N XCUTE
"RTN","IBCNBLA1",199,0)
 S XCUTE=$$GET1^DID(FILE,FLD,,"INPUT TRANSFORM")
"RTN","IBCNBLA1",200,0)
 X XCUTE
"RTN","IBCNBLA1",201,0)
 Q $D(X)
"RTN","IBCNBLE1")
0^19^B27903709
"RTN","IBCNBLE1",1,0)
IBCNBLE1 ;DAOU/ESG - Ins Buffer, Expand Entry, con't ;25-JUN-2002
"RTN","IBCNBLE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNBLE1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLE1",4,0)
 ;
"RTN","IBCNBLE1",5,0)
 ; Can't be called from the top
"RTN","IBCNBLE1",6,0)
 Q
"RTN","IBCNBLE1",7,0)
 ;
"RTN","IBCNBLE1",8,0)
BLD ; Continuation of Expand Entry list build procedure
"RTN","IBCNBLE1",9,0)
 ; --- Called by IBCNBLE
"RTN","IBCNBLE1",10,0)
 ;
"RTN","IBCNBLE1",11,0)
 NEW ERR,MSG,IBL,IBY,IBLINE,IBER,IBLN,EDITED,ORIGSYME,ORIGSYMI,EEUPDATE
"RTN","IBCNBLE1",12,0)
 NEW ORIGSYMS
"RTN","IBCNBLE1",13,0)
 ;
"RTN","IBCNBLE1",14,0)
 ; save the external and internal IIV status values
"RTN","IBCNBLE1",15,0)
 S ORIGSYMS=$$SYMBOL^IBCNBLL(IBBUFDA)
"RTN","IBCNBLE1",16,0)
 S ORIGSYME=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",17,0)
 S ORIGSYMI=$P(IB0,U,12)
"RTN","IBCNBLE1",18,0)
 ;
"RTN","IBCNBLE1",19,0)
 ; Determine if Expand Entry is allowed to update the IIV Status
"RTN","IBCNBLE1",20,0)
 S EEUPDATE=1    ; default Expand Entry update flag to true
"RTN","IBCNBLE1",21,0)
 I ORIGSYMI,'$P($G(^IBE(365.15,ORIGSYMI,0)),U,3) S EEUPDATE=0
"RTN","IBCNBLE1",22,0)
 ;
"RTN","IBCNBLE1",23,0)
 ; Do not update the IIV status if manually verified
"RTN","IBCNBLE1",24,0)
 I ORIGSYMS="*" S EEUPDATE=0
"RTN","IBCNBLE1",25,0)
 ;
"RTN","IBCNBLE1",26,0)
 ; If the current IIV Status allows updates by Expand Entry, then
"RTN","IBCNBLE1",27,0)
 ; invoke the function that trys to find a valid payer
"RTN","IBCNBLE1",28,0)
 I EEUPDATE D
"RTN","IBCNBLE1",29,0)
 . S ERR=$$INSERROR^IBCNEUT3("B",IBBUFDA,1,.MSG)
"RTN","IBCNBLE1",30,0)
 . ; If no errors, then remove the IIV Status
"RTN","IBCNBLE1",31,0)
 . I 'ERR S ERR=$$SIDERR(IBBUFDA,$P(ERR,U,2))
"RTN","IBCNBLE1",32,0)
 . I 'ERR D CLEAR^IBCNEUT4(IBBUFDA,.EDITED)
"RTN","IBCNBLE1",33,0)
 . ; If errors found, then update with the new IIV Status
"RTN","IBCNBLE1",34,0)
 . I ERR D BUFF^IBCNEUT2(IBBUFDA,$P(ERR,U,1)) S EDITED=1
"RTN","IBCNBLE1",35,0)
 . ; refresh the IB0 variable for the possible symbol change
"RTN","IBCNBLE1",36,0)
 . S $P(IB0,U,12)=$P($G(^IBA(355.33,IBBUFDA,0)),U,12)
"RTN","IBCNBLE1",37,0)
 . Q
"RTN","IBCNBLE1",38,0)
 ;
"RTN","IBCNBLE1",39,0)
 ; Possibly display information if the OVERRIDE FRESHNESS FLAG is on
"RTN","IBCNBLE1",40,0)
 I $P(IB0,U,13) D
"RTN","IBCNBLE1",41,0)
 . S IBL="User Requested Inquiry?: ",IBY="YES"
"RTN","IBCNBLE1",42,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,3)
"RTN","IBCNBLE1",43,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",44,0)
 . Q
"RTN","IBCNBLE1",45,0)
 ;
"RTN","IBCNBLE1",46,0)
 ; Display the Current Status line
"RTN","IBCNBLE1",47,0)
 S IBL="Current IIV Status: "
"RTN","IBCNBLE1",48,0)
 S IBY=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",49,0)
 I IBY="",$$SYMBOL^IBCNBLL(IBBUFDA)'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",50,0)
 I $$SYMBOL^IBCNBLL(IBBUFDA)="*" S IBY="Manually verified, No IIV activity at this time"
"RTN","IBCNBLE1",51,0)
 S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",52,0)
 D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",53,0)
 ;
"RTN","IBCNBLE1",54,0)
 ; Display any text returned by the payer function
"RTN","IBCNBLE1",55,0)
 F IBER=1:1:$G(MSG) D SET^IBCNBLE(" ") F IBLN=1:1:$P($G(MSG(IBER)),U,2) D SET^IBCNBLE("  "_$G(MSG(IBER,IBLN)))
"RTN","IBCNBLE1",56,0)
 ;
"RTN","IBCNBLE1",57,0)
 ; Display the current IIV Status generic description
"RTN","IBCNBLE1",58,0)
 D SYMTXT($P(IB0,U,12),1)
"RTN","IBCNBLE1",59,0)
 D SYMTXT($P(IB0,U,12),2)
"RTN","IBCNBLE1",60,0)
 ;
"RTN","IBCNBLE1",61,0)
 ; If the IIV Status ien changed from what it once was, then display the
"RTN","IBCNBLE1",62,0)
 ; Prior Status line
"RTN","IBCNBLE1",63,0)
 I ORIGSYMI'=$P(IB0,U,12) D
"RTN","IBCNBLE1",64,0)
 . I $P(IB0,U,12) D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",65,0)
 . S IBL="Prior Status: "
"RTN","IBCNBLE1",66,0)
 . S IBY=ORIGSYME
"RTN","IBCNBLE1",67,0)
 . I IBY="",ORIGSYMS'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",68,0)
 . I ORIGSYMS="*" S IBY="Manually verified, No IIV activity at this time"
"RTN","IBCNBLE1",69,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",70,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",71,0)
 . D SYMTXT(ORIGSYMI,1)
"RTN","IBCNBLE1",72,0)
 . Q
"RTN","IBCNBLE1",73,0)
 ;
"RTN","IBCNBLE1",74,0)
 ; Display any existing EC errors
"RTN","IBCNBLE1",75,0)
 D ECERR
"RTN","IBCNBLE1",76,0)
 ;D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",77,0)
 ;
"RTN","IBCNBLE1",78,0)
 ; If the IIV Status was modified then refresh the visual display
"RTN","IBCNBLE1",79,0)
 I $G(EDITED) D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLE1",80,0)
BLDX ;
"RTN","IBCNBLE1",81,0)
 Q
"RTN","IBCNBLE1",82,0)
 ;
"RTN","IBCNBLE1",83,0)
SYMTXT(IEN,TYPE) ; Display the text from the IIV symbol file for this entry
"RTN","IBCNBLE1",84,0)
 ; TYPE=1 - Display Description from IIV Status Table file
"RTN","IBCNBLE1",85,0)
 ; TYPE=2 - Display Corrective Action from IIV Status Table file
"RTN","IBCNBLE1",86,0)
 NEW IBJ
"RTN","IBCNBLE1",87,0)
 I '$G(IEN) G SYMX
"RTN","IBCNBLE1",88,0)
 I '$P($G(^IBE(365.15,IEN,TYPE,0)),U,4) G SYMX
"RTN","IBCNBLE1",89,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",90,0)
 S IBJ=0
"RTN","IBCNBLE1",91,0)
 F  S IBJ=$O(^IBE(365.15,IEN,TYPE,IBJ)) Q:'IBJ  D SET^IBCNBLE("  "_$G(^IBE(365.15,IEN,TYPE,IBJ,0)))
"RTN","IBCNBLE1",92,0)
SYMX ;
"RTN","IBCNBLE1",93,0)
 Q
"RTN","IBCNBLE1",94,0)
 ;
"RTN","IBCNBLE1",95,0)
ECERR ; Display the Eligibility Communicator Error data from the
"RTN","IBCNBLE1",96,0)
 ; response file if it exists
"RTN","IBCNBLE1",97,0)
 ;
"RTN","IBCNBLE1",98,0)
 NEW RESP,RESPDATA,ERRTXT,IBY,IBLINE,ERRDATA,FUTDT,TQIEN,IBERR,IBCT
"RTN","IBCNBLE1",99,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)
"RTN","IBCNBLE1",100,0)
 I 'RESP G ECERRX
"RTN","IBCNBLE1",101,0)
 S RESPDATA=$G(^IBCN(365,RESP,1))
"RTN","IBCNBLE1",102,0)
 S ERRTXT=$P($G(^IBCN(365,RESP,4)),U,1)
"RTN","IBCNBLE1",103,0)
 S TQIEN=+$P($G(^IBCN(365,RESP,0)),U,5)    ; Trans Queue file ien
"RTN","IBCNBLE1",104,0)
 S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9)  ; Future date to transmit
"RTN","IBCNBLE1",105,0)
 I '$P(RESPDATA,U,14),'$P(RESPDATA,U,15),ERRTXT="",'FUTDT G ECERRX
"RTN","IBCNBLE1",106,0)
 ;
"RTN","IBCNBLE1",107,0)
 ; At this point, we know there's something to get displayed
"RTN","IBCNBLE1",108,0)
 ;
"RTN","IBCNBLE1",109,0)
 ; Display section header
"RTN","IBCNBLE1",110,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",111,0)
 S IBY=$J("",19)_"Eligibility Communicator Error Information"
"RTN","IBCNBLE1",112,0)
 D SET^IBCNBLE(IBY,"B") S IBLINE=""
"RTN","IBCNBLE1",113,0)
 ;
"RTN","IBCNBLE1",114,0)
 ; Display Error Condition data - field# 1.14
"RTN","IBCNBLE1",115,0)
 I $P(RESPDATA,U,14) D
"RTN","IBCNBLE1",116,0)
 . S ERRDATA=$G(^IBE(365.017,$P(RESPDATA,U,14),0))
"RTN","IBCNBLE1",117,0)
 . K IBERR
"RTN","IBCNBLE1",118,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Condition '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",119,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",120,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",121,0)
 . Q
"RTN","IBCNBLE1",122,0)
 ;
"RTN","IBCNBLE1",123,0)
 ; Display Error Action data - field# 1.15
"RTN","IBCNBLE1",124,0)
 I $P(RESPDATA,U,15) D
"RTN","IBCNBLE1",125,0)
 . S ERRDATA=$G(^IBE(365.018,$P(RESPDATA,U,15),0))
"RTN","IBCNBLE1",126,0)
 . K IBERR
"RTN","IBCNBLE1",127,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Action '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",128,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",129,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",130,0)
 . Q
"RTN","IBCNBLE1",131,0)
 ;
"RTN","IBCNBLE1",132,0)
 ; Display Error Text data - field# 4.01
"RTN","IBCNBLE1",133,0)
 I ERRTXT'="" D SET^IBCNBLE(ERRTXT)
"RTN","IBCNBLE1",134,0)
 ;
"RTN","IBCNBLE1",135,0)
 ; Display Date of Future Transmission - field# .09 in file 365.1
"RTN","IBCNBLE1",136,0)
 I FUTDT D
"RTN","IBCNBLE1",137,0)
 . S FUTDT=$$FMTE^XLFDT(FUTDT,"5Z")
"RTN","IBCNBLE1",138,0)
 . D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",139,0)
 . S IBLINE="     Date of Future Transmission:  "_FUTDT
"RTN","IBCNBLE1",140,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",141,0)
 . Q
"RTN","IBCNBLE1",142,0)
ECERRX ;
"RTN","IBCNBLE1",143,0)
 Q
"RTN","IBCNBLE1",144,0)
 ;
"RTN","IBCNBLE1",145,0)
SIDERR(BUF,PIEN) ;
"RTN","IBCNBLE1",146,0)
 ; If Subscriber ID is required and SSN cannot be substituted
"RTN","IBCNBLE1",147,0)
 ; and buffer does not have a sub id -> return error
"RTN","IBCNBLE1",148,0)
 ; BUF = buffer IEN
"RTN","IBCNBLE1",149,0)
 ; PIEN = payer IEN
"RTN","IBCNBLE1",150,0)
 ;
"RTN","IBCNBLE1",151,0)
 N ERR,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN
"RTN","IBCNBLE1",152,0)
 S ERR=""
"RTN","IBCNBLE1",153,0)
 S SID=$P($G(^IBA(355.33,BUF,60)),U,4)
"RTN","IBCNBLE1",154,0)
 I SID]"" G SIDX ; Subscriber id is populated, further checking is moot
"RTN","IBCNBLE1",155,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNBLE1",156,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNBLE1",157,0)
 S SIDREQ=$P(SIDSTR,U,8) I 'SIDREQ G SIDX ; if sub id is not req'd - ok
"RTN","IBCNBLE1",158,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNBLE1",159,0)
 I 'SIDSSN S ERR=18 ; if ssn cannot be used -> B15 status (IEN = 18)
"RTN","IBCNBLE1",160,0)
SIDX Q ERR
"RTN","IBCNBLE1",161,0)
 ;
"RTN","IBCNBLL")
0^22^B59623585
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271**;21-MAR-94
"RTN","IBCNBLL",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",6,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",7,0)
 Q
"RTN","IBCNBLL",8,0)
 ;
"RTN","IBCNBLL",9,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",10,0)
 S VALMHDR(1)="Buffer File entries not yet processed."
"RTN","IBCNBLL",11,0)
 S VALMHDR(1)=VALMHDR(1)_"   (sorted by "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",12,0)
 I $P(IBCNSORT,U,3)="" S VALMHDR(1)=VALMHDR(1)_")"
"RTN","IBCNBLL",13,0)
 E  S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first)"
"RTN","IBCNBLL",14,0)
 Q
"RTN","IBCNBLL",15,0)
 ;
"RTN","IBCNBLL",16,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",17,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS")
"RTN","IBCNBLL",18,0)
 I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",19,0)
 D BLD
"RTN","IBCNBLL",20,0)
 Q
"RTN","IBCNBLL",21,0)
 ;
"RTN","IBCNBLL",22,0)
HELP ;  list manager help
"RTN","IBCNBLL",23,0)
 D FULL^VALM1
"RTN","IBCNBLL",24,0)
 W @IOF
"RTN","IBCNBLL",25,0)
 W !,"This screen lists all Insurance plans and policies in the Insurance Buffer",!,"that have not yet been processed (accepted or rejected).",!
"RTN","IBCNBLL",26,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:",!,"   i - Patient has other currently effective Insurance",!,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",27,0)
 W !,"   E - Patient has Expired",!,"   Y - Means Test Copay Patient",!,"   H - Patient has Bills On Hold",!,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",28,0)
 ;
"RTN","IBCNBLL",29,0)
 ; ESG - 6/7/02 - SDD 5.1.9
"RTN","IBCNBLL",30,0)
 ; Help screen description of new symbols
"RTN","IBCNBLL",31,0)
 ;
"RTN","IBCNBLL",32,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",33,0)
 W !!,"IIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",34,0)
 W !,"  The following IIV Status indicators may appear to the left of the"
"RTN","IBCNBLL",35,0)
 W !,"  patient name:"
"RTN","IBCNBLL",36,0)
 W !,"   + - The IIV payer indicated that this is an active policy via"
"RTN","IBCNBLL",37,0)
 W !,"           electronic inquiry/response."
"RTN","IBCNBLL",38,0)
 W !,"   ? - IIV inquiry was sent; awaiting reply from Payer."
"RTN","IBCNBLL",39,0)
 W !,"   # - IIV received an electronic response from the Payer, but was not able to"
"RTN","IBCNBLL",40,0)
 W !,"           determine whether or not the Payer is indicating active coverage.  "
"RTN","IBCNBLL",41,0)
 W !,"           Carefully review the associated IIV Response Report, specifically "
"RTN","IBCNBLL",42,0)
 W !,"           focusing on the Eligibility/Benefits section, if present."
"RTN","IBCNBLL",43,0)
 W !,"           Manual confirmation is required."
"RTN","IBCNBLL",44,0)
 W !,"   ! - IIV was unable to send an electronic inquiry for this insurance "
"RTN","IBCNBLL",45,0)
 W !,"           information. User correction may be required to allow IIV to send "
"RTN","IBCNBLL",46,0)
 W !,"           this inquiry."
"RTN","IBCNBLL",47,0)
 W !,"           Please use the Expand Entry option to see more information."
"RTN","IBCNBLL",48,0)
 W !,"   - - The IIV payer indicated that this is NOT an active policy via "
"RTN","IBCNBLL",49,0)
 W !,"           electronic inquiry/response."
"RTN","IBCNBLL",50,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",51,0)
 W !!,"When an entry is Processed it is either:"
"RTN","IBCNBLL",52,0)
 W !,?3,"Accepted - the Buffer entry's data is stored in the main Insurance files.",!,?12,"- the modified Insurance entry is flagged as Verified.",!,?3,"Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",53,0)
 W !!,"Once an entry is processed (either accepted or rejected) most of the data in ",!,"the Buffer File entry is deleted leaving only a stub entry for tracking ",!,"and reporting purposes."
"RTN","IBCNBLL",54,0)
 W !!,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",55,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLL",56,0)
 Q
"RTN","IBCNBLL",57,0)
 ;
"RTN","IBCNBLL",58,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",59,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",60,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",61,0)
 Q
"RTN","IBCNBLL",62,0)
 ;
"RTN","IBCNBLL",63,0)
BLD ;  build screen display
"RTN","IBCNBLL",64,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",65,0)
 ;
"RTN","IBCNBLL",66,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",67,0)
 ;
"RTN","IBCNBLL",68,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",69,0)
 . S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",70,0)
 ..  S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",71,0)
 ...  ;
"RTN","IBCNBLL",72,0)
 ...  S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",73,0)
 ...  S IBLINE=$$BLDLN(IBBUFDA,IBCNT)
"RTN","IBCNBLL",74,0)
 ...  D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",75,0)
 ;
"RTN","IBCNBLL",76,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",77,0)
 Q
"RTN","IBCNBLL",78,0)
 ;
"RTN","IBCNBLL",79,0)
BLDLN(IBBUFDA,IBCNT) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",80,0)
 N DFN,IB0,IB20,IB60,IBLINE,IBY,VAIN,VADM,VA,VAERR,X,Y,IBMTS S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",81,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",82,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",83,0)
 ;
"RTN","IBCNBLL",84,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",85,0)
 ;
"RTN","IBCNBLL",86,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",87,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",88,0)
 ;
"RTN","IBCNBLL",89,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",90,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,16)
"RTN","IBCNBLL",91,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,23,4)
"RTN","IBCNBLL",92,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,29,17)
"RTN","IBCNBLL",93,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,48,10)
"RTN","IBCNBLL",94,0)
 S IBY=$$SOURCE($P(IB0,U,3)),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,60,4)
"RTN","IBCNBLL",95,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",96,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",97,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",98,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",99,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",100,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",101,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",102,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",103,0)
 Q IBLINE
"RTN","IBCNBLL",104,0)
 ;
"RTN","IBCNBLL",105,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",106,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",107,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",108,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",109,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",110,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",111,0)
 Q
"RTN","IBCNBLL",112,0)
 ;
"RTN","IBCNBLL",113,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",114,0)
 ;  1^PATIENT NAME, 2^INS NAME, 3^SOURCE OF INFO, 4^DATE ENTERED, 5^INPATIENT (Y/N), 6^MEANS TEST (Y/N), 7^ON HOLD, 8^VERIFIED, 9^IIV STATUS
"RTN","IBCNBLL",115,0)
 N IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,DFN,VAIN,VA,VAERR,IBX,IBCNT,X,Y S IBCNT=0
"RTN","IBCNBLL",116,0)
 ;
"RTN","IBCNBLL",117,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",118,0)
 ;
"RTN","IBCNBLL",119,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",120,0)
 .  S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",121,0)
 ..   S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",122,0)
 ..   ;
"RTN","IBCNBLL",123,0)
 ..   S IBCNDFN=+$G(^IBA(355.33,IBBUFDA,60)),IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",124,0)
 ..   ;
"RTN","IBCNBLL",125,0)
 ..   I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",126,0)
 ..   I +IBCNSORT=2 S IBCSORT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBLL",127,0)
 ..   I +IBCNSORT=3 S IBCSORT1=$P($G(^IBA(355.33,IBBUFDA,0)),U,3)
"RTN","IBCNBLL",128,0)
 ..   I +IBCNSORT=4 S IBCSORT1=$P(+$G(^IBA(355.33,IBBUFDA,0)),".",1)
"RTN","IBCNBLL",129,0)
 ..   I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",130,0)
 ..   I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",131,0)
 ..   I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",132,0)
 ..   I +IBCNSORT=8 S IBCSORT1=$S(+$P($G(^IBA(355.33,IBBUFDA,0)),U,10):1,1:2)
"RTN","IBCNBLL",133,0)
 ..   ; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",134,0)
 ..   ; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",135,0)
 ..   I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,$$SYMBOL(IBBUFDA)))_"."_$P(+$G(^IBA(355.33,IBBUFDA,0)),".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",136,0)
 ..   ;
"RTN","IBCNBLL",137,0)
 ..   S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",138,0)
 ..   ;
"RTN","IBCNBLL",139,0)
 ..   S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)="" K VAIN,IBCSORT1
"RTN","IBCNBLL",140,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",141,0)
 Q
"RTN","IBCNBLL",142,0)
 ;
"RTN","IBCNBLL",143,0)
DATE(X) ;
"RTN","IBCNBLL",144,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",145,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",146,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",147,0)
SOURCE(X) ;
"RTN","IBCNBLL",148,0)
 Q $S(X=1:"INTVW",X=2:"DMTCH",X=3:"IVM",X=4:"PreRg",X=5:"eIIV",1:"")
"RTN","IBCNBLL",149,0)
 ;
"RTN","IBCNBLL",150,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",151,0)
 NEW IB0,SYM
"RTN","IBCNBLL",152,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",153,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",154,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",155,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",156,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",157,0)
 Q SYM
"RTN","IBCNBLL",158,0)
 ;
"RTN","IBCNBLL",159,0)
 ;
"RTN","IBCNBLL",160,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",161,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",162,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",163,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",164,0)
 ;
"RTN","IBCNBLL",165,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",166,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",167,0)
 ;
"RTN","IBCNBLL",168,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",169,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",170,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",171,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",172,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",173,0)
 ;
"RTN","IBCNBLL",174,0)
 ; if the action is EDITED then the line for the buffer entry is recomplied and the updated line is set into 
"RTN","IBCNBLL",175,0)
 ; the display array
"RTN","IBCNBLL",176,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",177,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2))
"RTN","IBCNBLL",178,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",179,0)
 Q
"RTN","IBCNEBF")
0^35^B27036786
"RTN","IBCNEBF",1,0)
IBCNEBF ;DAOU/ALA - Create an Entry in the Buffer File ;20-JUN-2002
"RTN","IBCNEBF",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEBF",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEBF",4,0)
 ;
"RTN","IBCNEBF",5,0)
 ;**Program Description**
"RTN","IBCNEBF",6,0)
 ;  This program will create a Buffer entry based upon
"RTN","IBCNEBF",7,0)
 ;  input values
"RTN","IBCNEBF",8,0)
 ;
"RTN","IBCNEBF",9,0)
 Q
"RTN","IBCNEBF",10,0)
 ;
"RTN","IBCNEBF",11,0)
PT(DFN,IRIEN,SYMBOL,OVRRIDE,ADD,IBERROR) ;  Get data from a specific patient and insurance
"RTN","IBCNEBF",12,0)
 ;  record entry
"RTN","IBCNEBF",13,0)
 ;
"RTN","IBCNEBF",14,0)
 ;  Input Parameters
"RTN","IBCNEBF",15,0)
 ;    DFN = Patient IEN
"RTN","IBCNEBF",16,0)
 ;    IRIEN = Patient Insurance Record IEN
"RTN","IBCNEBF",17,0)
 ;    SYMBOL = IIV Symbol IEN
"RTN","IBCNEBF",18,0)
 ;    OVRRIDE = Override flag for ins. buffer record  (0 or 1)
"RTN","IBCNEBF",19,0)
 ;    ADD = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",20,0)
 ;    IBERROR = If defined, then it will be updated with error info.
"RTN","IBCNEBF",21,0)
 ;              OPTIONALLY PASSED BY REFERENCE
"RTN","IBCNEBF",22,0)
 ;
"RTN","IBCNEBF",23,0)
 I DFN=""!(IRIEN="") Q   ; * do not required SYMBOL or OVRRIDE
"RTN","IBCNEBF",24,0)
 ;
"RTN","IBCNEBF",25,0)
 ;
"RTN","IBCNEBF",26,0)
 NEW VBUF,IEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE
"RTN","IBCNEBF",27,0)
 NEW BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",28,0)
 NEW MSG,XMSUB,MSGP,INSDATA,PCE,BFD,BFN,INSPCE,ESGHPARR
"RTN","IBCNEBF",29,0)
 ;
"RTN","IBCNEBF",30,0)
 S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",31,0)
 S INAME=$$GET1^DIQ(36,IIEN,.01,"E")
"RTN","IBCNEBF",32,0)
 S PPHONE=$P($G(^DIC(36,IIEN,.13)),U,3)
"RTN","IBCNEBF",33,0)
 S BPHONE=$P($G(^DIC(36,IIEN,.13)),U,2)
"RTN","IBCNEBF",34,0)
 S NAME=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEBF",35,0)
 S SUBID=$P($G(^DPT(DFN,.312,IRIEN,0)),U,2)
"RTN","IBCNEBF",36,0)
 S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEBF",37,0)
 S COB=$P($G(^DPT(DFN,.312,IRIEN,0)),U,20)
"RTN","IBCNEBF",38,0)
 S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1)
"RTN","IBCNEBF",39,0)
 S ISSN=$P($G(^DPT(DFN,.312,IRIEN,3)),U,5)
"RTN","IBCNEBF",40,0)
 S EFFDT=$P(^DPT(DFN,.312,IRIEN,0),U,8)
"RTN","IBCNEBF",41,0)
 S EXPDT=$P(^DPT(DFN,.312,IRIEN,0),U,4)
"RTN","IBCNEBF",42,0)
 S REL=$P(^DPT(DFN,.312,IRIEN,0),U,16)
"RTN","IBCNEBF",43,0)
 ;
"RTN","IBCNEBF",44,0)
 S IENS=IRIEN_","_DFN_","
"RTN","IBCNEBF",45,0)
 S GNUMB=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEBF",46,0)
 S GNAME=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEBF",47,0)
 ;
"RTN","IBCNEBF",48,0)
 ; Capture the employer sponsored insurance fields into array
"RTN","IBCNEBF",49,0)
 ;   ESGHPARR(buffer field number) = data
"RTN","IBCNEBF",50,0)
 ;
"RTN","IBCNEBF",51,0)
 S INSDATA=$G(^DPT(DFN,.312,IRIEN,2)),PCE=0
"RTN","IBCNEBF",52,0)
 F BFD=5:1:12,2,1,3,4 S PCE=PCE+1,BFN=BFD/100+61,INSPCE=$P(INSDATA,U,PCE) I INSPCE'="" S ESGHPARR(BFN)=INSPCE
"RTN","IBCNEBF",53,0)
 ;
"RTN","IBCNEBF",54,0)
 D FIL
"RTN","IBCNEBF",55,0)
 K ADD
"RTN","IBCNEBF",56,0)
 Q
"RTN","IBCNEBF",57,0)
 ;
"RTN","IBCNEBF",58,0)
RP(IEN,ADD,BUFF) ;  Get data from a specific response record
"RTN","IBCNEBF",59,0)
 ;
"RTN","IBCNEBF",60,0)
 ;  Input Parameter
"RTN","IBCNEBF",61,0)
 ;    IEN  = Internal entry number of the Response
"RTN","IBCNEBF",62,0)
 ;    ADD  = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",63,0)
 ;    BUFF = IEN of the Buffer Entry to be updated (optional)
"RTN","IBCNEBF",64,0)
 ;
"RTN","IBCNEBF",65,0)
 S BUFF=$G(BUFF) ; Initialize optional parameter
"RTN","IBCNEBF",66,0)
 ;
"RTN","IBCNEBF",67,0)
 NEW PIEN,RSTYPE
"RTN","IBCNEBF",68,0)
 S DFN=$P(^IBCN(365,IEN,0),U,2),TQIEN=$P(^IBCN(365,IEN,0),U,5)
"RTN","IBCNEBF",69,0)
 S PIEN=$P(^IBCN(365,IEN,0),U,3),RSTYPE=$P(^(0),U,10)
"RTN","IBCNEBF",70,0)
 I PIEN'="" S PNAME=$P(^IBE(365.12,PIEN,0),U,1)
"RTN","IBCNEBF",71,0)
 I TQIEN'="" S IRIEN=$P($G(^IBCN(365.1,TQIEN,0)),U,13)
"RTN","IBCNEBF",72,0)
 I $G(IRIEN)'="" S INAME="" D
"RTN","IBCNEBF",73,0)
 . S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",74,0)
 . I IIEN="" Q
"RTN","IBCNEBF",75,0)
 . S INAME=$P(^DIC(36,IIEN,0),U,1)
"RTN","IBCNEBF",76,0)
 S RDATA=$G(^IBCN(365,IEN,1))
"RTN","IBCNEBF",77,0)
 S NAME=$P(RDATA,U,1)
"RTN","IBCNEBF",78,0)
 S INAME=$S($G(INAME)'=""&(RSTYPE="O"):INAME,1:$G(PNAME))
"RTN","IBCNEBF",79,0)
 S IDOB=$P(RDATA,U,2)
"RTN","IBCNEBF",80,0)
 S ISSN=$P(RDATA,U,3)
"RTN","IBCNEBF",81,0)
 S ISEX=$P(RDATA,U,4)
"RTN","IBCNEBF",82,0)
 S COB=$P(RDATA,U,13)
"RTN","IBCNEBF",83,0)
 S SUBID=$P(RDATA,U,5)
"RTN","IBCNEBF",84,0)
 S GNAME=$P(RDATA,U,6)
"RTN","IBCNEBF",85,0)
 S GNUMB=$P(RDATA,U,7)
"RTN","IBCNEBF",86,0)
 S WHO=$P(RDATA,U,8)
"RTN","IBCNEBF",87,0)
 S REL=$P(RDATA,U,9)
"RTN","IBCNEBF",88,0)
 S EFFDT=$P(RDATA,U,11)
"RTN","IBCNEBF",89,0)
 S EXPDT=$P(RDATA,U,12)
"RTN","IBCNEBF",90,0)
 S PPHONE="",BPHONE=""
"RTN","IBCNEBF",91,0)
 ;
"RTN","IBCNEBF",92,0)
 D FIL
"RTN","IBCNEBF",93,0)
 K DFN,VBUF,IEN,IRIEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE
"RTN","IBCNEBF",94,0)
 K BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",95,0)
 K ADD,%DT,D0,DG,DIC,DISYS,DIW,IENS
"RTN","IBCNEBF",96,0)
 Q
"RTN","IBCNEBF",97,0)
 ;
"RTN","IBCNEBF",98,0)
FIL ;  File Buffer Data
"RTN","IBCNEBF",99,0)
 ;
"RTN","IBCNEBF",100,0)
 S MSGP=$$MGRP^IBCNEUT5()
"RTN","IBCNEBF",101,0)
 ;
"RTN","IBCNEBF",102,0)
 ; Variable IDUZ is optionally set by the calling routine.  If it is
"RTN","IBCNEBF",103,0)
 ; not defined, it will be set to the specific, non-human user.
"RTN","IBCNEBF",104,0)
 ;
"RTN","IBCNEBF",105,0)
 I $G(IDUZ)="" S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEBF",106,0)
 ;
"RTN","IBCNEBF",107,0)
 I $G(ADD) S VBUF(.02)=IDUZ  ; Entered By
"RTN","IBCNEBF",108,0)
 S VBUF(.12)=$G(SYMBOL)   ; Buffer Symbol
"RTN","IBCNEBF",109,0)
 S VBUF(.13)=$G(OVRRIDE) ; Override freshness flag
"RTN","IBCNEBF",110,0)
 I '$G(ERACT) D  ; Only file if not an error
"RTN","IBCNEBF",111,0)
 . S VBUF(20.01)=INAME  ; Insurance Company/Payer Name
"RTN","IBCNEBF",112,0)
 . S VBUF(60.01)=DFN  ; Patient IEN
"RTN","IBCNEBF",113,0)
 . S VBUF(40.03)=GNUMB  ; Group Number
"RTN","IBCNEBF",114,0)
 . S VBUF(40.02)=GNAME  ; Group Name
"RTN","IBCNEBF",115,0)
 . S VBUF(60.07)=NAME  ; Name of Insured
"RTN","IBCNEBF",116,0)
 . S VBUF(60.04)=SUBID  ; Subscriber ID
"RTN","IBCNEBF",117,0)
 . S VBUF(20.04)=PPHONE  ; Precertification Phone
"RTN","IBCNEBF",118,0)
 . S VBUF(20.03)=BPHONE  ; Billing Phone
"RTN","IBCNEBF",119,0)
 . S VBUF(60.02)=EFFDT  ; Effective Date
"RTN","IBCNEBF",120,0)
 . S VBUF(60.03)=EXPDT  ; Expiration Date
"RTN","IBCNEBF",121,0)
 . S VBUF(60.05)=WHO  ; Whose Insurance
"RTN","IBCNEBF",122,0)
 . S VBUF(60.06)=REL  ;  Patient Relationship
"RTN","IBCNEBF",123,0)
 . S VBUF(60.08)=IDOB  ;  Insured's DOB
"RTN","IBCNEBF",124,0)
 . S VBUF(60.09)=ISSN  ;  Insured's SSN
"RTN","IBCNEBF",125,0)
 . S VBUF(60.12)=COB  ;  Coordination of Benefits
"RTN","IBCNEBF",126,0)
 . ;
"RTN","IBCNEBF",127,0)
 . ; If the employer sponsored insurance array exists, then merge it in
"RTN","IBCNEBF",128,0)
 . I $D(ESGHPARR) M VBUF=ESGHPARR
"RTN","IBCNEBF",129,0)
 ;
"RTN","IBCNEBF",130,0)
 ; Do not overwrite the existing insurance co. name if it already exists
"RTN","IBCNEBF",131,0)
 I $G(ADD)="",$G(BUFF)'="" K VBUF(20.01)
"RTN","IBCNEBF",132,0)
 ;
"RTN","IBCNEBF",133,0)
 ; ** initialize IBERROR
"RTN","IBCNEBF",134,0)
 S IBERROR=""
"RTN","IBCNEBF",135,0)
 ;
"RTN","IBCNEBF",136,0)
 ;  If need to add a new Buffer entry ...
"RTN","IBCNEBF",137,0)
 ;
"RTN","IBCNEBF",138,0)
 ;  Variable IBFDA is returned to the calling routine as the IEN of
"RTN","IBCNEBF",139,0)
 ;  the buffer entry that was just added.
"RTN","IBCNEBF",140,0)
 ;
"RTN","IBCNEBF",141,0)
 I $G(ADD) D
"RTN","IBCNEBF",142,0)
 . S IBFDA=$$ADDSTF^IBCNBES(5,DFN,.VBUF)
"RTN","IBCNEBF",143,0)
 . ; Error Message is 2nd piece of result
"RTN","IBCNEBF",144,0)
 . S IBERROR=$P(IBFDA,U,2)
"RTN","IBCNEBF",145,0)
 . S IBFDA=$P(IBFDA,U,1)
"RTN","IBCNEBF",146,0)
 ;
"RTN","IBCNEBF",147,0)
 ;  If an error, send an email message
"RTN","IBCNEBF",148,0)
 I IBERROR'="" D  Q
"RTN","IBCNEBF",149,0)
 . S MSG(1)="Error returned by $$ADDSTF^IBCNBES:"
"RTN","IBCNEBF",150,0)
 . S MSG(2)=IBERROR
"RTN","IBCNEBF",151,0)
 . S MSG(3)="Values:"
"RTN","IBCNEBF",152,0)
 . S MSG(4)=" Patient DFN = "_$G(DFN)
"RTN","IBCNEBF",153,0)
 . S MSG(5)=" Pt Ins Record IEN = "_$G(IRIEN)
"RTN","IBCNEBF",154,0)
 . S MSG(6)="Please log a NOIS for this problem."
"RTN","IBCNEBF",155,0)
 . S XMSUB="Error creating Buffer Entry."
"RTN","IBCNEBF",156,0)
 . D MSG^IBCNEUT5(MSGP,XMSUB,"MSG(")
"RTN","IBCNEBF",157,0)
 . K MSGP,MSG,XMSUB,IBERR
"RTN","IBCNEBF",158,0)
 ;
"RTN","IBCNEBF",159,0)
 ;  If need to update a new Buffer Entry ...
"RTN","IBCNEBF",160,0)
 ;
"RTN","IBCNEBF",161,0)
 ;  Variable BUFF is passed into this routine whenever the buffer
"RTN","IBCNEBF",162,0)
 ;  entry is known and the ADD flag is off.  The existing buffer entry
"RTN","IBCNEBF",163,0)
 ;  is edited in this case.
"RTN","IBCNEBF",164,0)
 ;
"RTN","IBCNEBF",165,0)
 I $G(ADD)="" D EDITSTF^IBCNBES(BUFF,.VBUF)
"RTN","IBCNEBF",166,0)
 ;
"RTN","IBCNEBF",167,0)
 ;  If an error occured in EDITSTF, the error array is not returned
"RTN","IBCNEBF",168,0)
 ;
"RTN","IBCNEBF",169,0)
 Q
"RTN","IBCNEDE")
0^6^B20803060
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - IIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDE",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the Insurance Identification and Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the IIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the IIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 N $ES,$ET
"RTN","IBCNEDE",25,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",26,0)
 ; Check lock
"RTN","IBCNEDE",27,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",28,0)
 . I '$D(ZTSK) W !!,"The IIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",29,0)
 S $P(^IBE(350.9,1,51),U,22)=0
"RTN","IBCNEDE",30,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",31,0)
 ;  the existing utility
"RTN","IBCNEDE",32,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",33,0)
 ;
"RTN","IBCNEDE",34,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",35,0)
 ; before the extract is run
"RTN","IBCNEDE",36,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",37,0)
 ;
"RTN","IBCNEDE",38,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",39,0)
 ;
"RTN","IBCNEDE",40,0)
 ; Run All 4 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",41,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",42,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",43,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",44,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",45,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",46,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",47,0)
 D EN^IBCNEDE3 ; Non Verified Extract
"RTN","IBCNEDE",48,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",49,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",50,0)
 D EN^IBCNEDE4 ; No Insurance Extract
"RTN","IBCNEDE",51,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",52,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",53,0)
 ; Send enrollment message
"RTN","IBCNEDE",54,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",55,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",56,0)
 I '$G(QFL) D
"RTN","IBCNEDE",57,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",58,0)
 . D WAIT  Q:'QFL
"RTN","IBCNEDE",59,0)
 . KILL QFL
"RTN","IBCNEDE",60,0)
 . ;
"RTN","IBCNEDE",61,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",62,0)
 ;
"RTN","IBCNEDE",63,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",64,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",65,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",66,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",67,0)
 ;  eligible to be purged
"RTN","IBCNEDE",68,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",69,0)
 ;
"RTN","IBCNEDE",70,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",71,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",72,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",73,0)
 Q
"RTN","IBCNEDE",74,0)
 ;
"RTN","IBCNEDE",75,0)
TBLCHK() ;
"RTN","IBCNEDE",76,0)
 ; Confirm that at least one IIV payer and that all X12 tables
"RTN","IBCNEDE",77,0)
 ; have been loaded
"RTN","IBCNEDE",78,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",79,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",80,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",81,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",82,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",83,0)
 I PAYOK D
"RTN","IBCNEDE",84,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",85,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",86,0)
 ;
"RTN","IBCNEDE",87,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",88,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",89,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",90,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",91,0)
 F  D  Q:QFL!(CT>360)
"RTN","IBCNEDE",92,0)
 . S QFL=+$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",93,0)
 . Q:QFL
"RTN","IBCNEDE",94,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",95,0)
 KILL CT
"RTN","IBCNEDE",96,0)
 Q
"RTN","IBCNEDE",97,0)
 ;
"RTN","IBCNEDE",98,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",99,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",100,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",101,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",102,0)
 N STALEDT
"RTN","IBCNEDE",103,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",104,0)
 Q STALEDT
"RTN","IBCNEDE",105,0)
 ;
"RTN","IBCNEDE",106,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",107,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",108,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",109,0)
 ; defined this appropriately in the IIV site parameters.
"RTN","IBCNEDE",110,0)
 ;
"RTN","IBCNEDE",111,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",112,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",113,0)
 ;
"RTN","IBCNEDE",114,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",115,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",116,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",117,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",118,0)
 ;
"RTN","IBCNEDE",119,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",120,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",121,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",122,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",123,0)
 ;
"RTN","IBCNEDE",124,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",125,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",126,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",127,0)
 ;
"RTN","IBCNEDE",128,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",129,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",130,0)
 ;
"RTN","IBCNEDE",131,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",132,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",133,0)
 S ZTDESC="IIV Daily Statistics E-Mail"
"RTN","IBCNEDE",134,0)
 S ZTIO=""
"RTN","IBCNEDE",135,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",136,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",137,0)
 ;
"RTN","IBCNEDE",138,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",139,0)
 S MSG(1)="TaskManager could not schedule the daily IIV MailMan message"
"RTN","IBCNEDE",140,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",141,0)
 S MSG(3)="This is defined in the IIV Site Parameters option."
"RTN","IBCNEDE",142,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",143,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",144,0)
 D MSG^IBCNEUT5(MGRP,"IIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",145,0)
 ;
"RTN","IBCNEDE",146,0)
MMQX ;
"RTN","IBCNEDE",147,0)
 Q
"RTN","IBCNEDE",148,0)
 ;
"RTN","IBCNEDE",149,0)
ER ; Unlock the IIV Nightly Task and return to log error
"RTN","IBCNEDE",150,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",151,0)
 D ^%ZTER
"RTN","IBCNEDE",152,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",153,0)
 Q
"RTN","IBCNEDE",154,0)
 ;
"RTN","IBCNEDE1")
0^44^B33576444
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - IIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDE1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates IIV transaction queue entries when approriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SCNT5,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",31,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",32,0)
 ;
"RTN","IBCNEDE1",33,0)
 S LOOPDT="" ; Date used to loop throught the IB global
"RTN","IBCNEDE1",34,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",35,0)
 . S IEN=""
"RTN","IBCNEDE1",36,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",38,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",39,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",40,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",41,0)
 .. ;
"RTN","IBCNEDE1",42,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",43,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",44,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",45,0)
 .. ;
"RTN","IBCNEDE1",46,0)
 .. ; Get the IIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",47,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",48,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",49,0)
 .. ;
"RTN","IBCNEDE1",50,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",51,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",52,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",53,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q           ; Exclude if test patient
"RTN","IBCNEDE1",54,0)
 .. ;
"RTN","IBCNEDE1",55,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",56,0)
 .. S SRVICEDT=DT I PDOD S SRVICEDT=PDOD             ; Service Date
"RTN","IBCNEDE1",57,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",58,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",59,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",60,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",61,0)
 .. ;
"RTN","IBCNEDE1",62,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",63,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",64,0)
 .. ;
"RTN","IBCNEDE1",65,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",66,0)
 .. ;
"RTN","IBCNEDE1",67,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",68,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",69,0)
 .. ;
"RTN","IBCNEDE1",70,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",71,0)
 .. ;  date range
"RTN","IBCNEDE1",72,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",73,0)
 .. ;
"RTN","IBCNEDE1",74,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",75,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",76,0)
 .. ;
"RTN","IBCNEDE1",77,0)
 .. ; If freshness overide flag is set, file to TQ and quit
"RTN","IBCNEDE1",78,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",79,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",80,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",81,0)
 ... D TQ
"RTN","IBCNEDE1",82,0)
 .. ;
"RTN","IBCNEDE1",83,0)
 .. ; If ADDTQ^IBCNEUT5 is 1 set TQ, otherwise stop processing that entry
"RTN","IBCNEDE1",84,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE1",85,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",86,0)
 .. ; not included
"RTN","IBCNEDE1",87,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",88,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",89,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",90,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",91,0)
 .. I TQOK D TQ
"RTN","IBCNEDE1",92,0)
 Q
"RTN","IBCNEDE1",93,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",94,0)
 ;
"RTN","IBCNEDE1",95,0)
 S BSID=$P($G(^IBA(355.33,IEN,60)),U,4)     ; Subscriber ID from buffer
"RTN","IBCNEDE1",96,0)
 K SIDARRAY
"RTN","IBCNEDE1",97,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",98,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",99,0)
 S SIDCNT=$P(SIDDATA,U,2)                   ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",100,0)
 ;
"RTN","IBCNEDE1",101,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q    ; update buffer w/ bang & quit
"RTN","IBCNEDE1",102,0)
 S SCNT5=$S(SIDACT=5:1,1:0)
"RTN","IBCNEDE1",103,0)
 I CNT+SCNT5+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",104,0)
 S SID=""
"RTN","IBCNEDE1",105,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE1",106,0)
 . I SIDACT=5 D SET(IEN,OVRFRESH,0,$P(SID,"_")) Q  ; set TQ w/o 'Pass Buffer' flag
"RTN","IBCNEDE1",107,0)
 . D SET(IEN,OVRFRESH,1,$P(SID,"_"))       ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",108,0)
 I SIDACT=4!(SIDACT=5) D SET(IEN,OVRFRESH,1,"")  ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",109,0)
 Q
"RTN","IBCNEDE1",110,0)
 ;
"RTN","IBCNEDE1",111,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",112,0)
 ;
"RTN","IBCNEDE1",113,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",114,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,40)) ; Original group string
"RTN","IBCNEDE1",115,0)
 S ORGRPNUM=$P(ORGRPSTR,U,3) ;Original group number
"RTN","IBCNEDE1",116,0)
 S ORGRPNAM=$P(ORGRPSTR,U,2) ;Original group name
"RTN","IBCNEDE1",117,0)
 S ORGSUBCR=$P($G(^IBA(355.33,IEN,60)),U,4) ; Original subscriber
"RTN","IBCNEDE1",118,0)
 ;
"RTN","IBCNEDE1",119,0)
 Q
"RTN","IBCNEDE1",120,0)
 ;
"RTN","IBCNEDE1",121,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",122,0)
 D RET
"RTN","IBCNEDE1",123,0)
 ;
"RTN","IBCNEDE1",124,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",125,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",126,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",127,0)
 ;
"RTN","IBCNEDE1",128,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",129,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",130,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",131,0)
 ;
"RTN","IBCNEDE1",132,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",133,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,ORIG,$G(OVRFRESH)) ; File TQ entry
"RTN","IBCNEDE1",134,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",135,0)
 ;
"RTN","IBCNEDE1",136,0)
 Q
"RTN","IBCNEDE2")
0^31^B38407052
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - IIV PRE REG EXTRACT (APPTS) ;18-JUN-2002
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDE2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ;
"RTN","IBCNEDE2",15,0)
 N TODAYSDT,FRESHDAY,SLCCRIT1,MAXCNT,CNT,ENDDT,CLNC,FRESHDT
"RTN","IBCNEDE2",16,0)
 N APTDT,APTNUM,INREC,INSIEN,PAYER,PIEN,PAYERSTR,SYMBOL,SUPPBUFF
"RTN","IBCNEDE2",17,0)
 N DFN,OK,VAIN,INS,DATA1,DATA2,ELG,PAYERID,SETSTR,SRVICEDT,ACTINS
"RTN","IBCNEDE2",18,0)
 N TQIEN,IBINDT,IBOUTP,QURYFLAG,INSNAME,FOUND1,FOUND2,IBCNETOT
"RTN","IBCNEDE2",19,0)
 N SID,SIDACT,SIDDATA,SCNT5,SIDARRAY,SIDCNT,IBDDI,IBINS,DISYS
"RTN","IBCNEDE2",20,0)
 ;
"RTN","IBCNEDE2",21,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",22,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",23,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",24,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",25,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",26,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",27,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",28,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",29,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",30,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",31,0)
 ;
"RTN","IBCNEDE2",32,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",33,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",34,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",35,0)
 . ;
"RTN","IBCNEDE2",36,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",37,0)
 . ;
"RTN","IBCNEDE2",38,0)
 . S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",39,0)
 . ;
"RTN","IBCNEDE2",40,0)
 . ; Loop through dates in range at clinic
"RTN","IBCNEDE2",41,0)
 . F  S APTDT=$O(^SC(CLNC,"S",APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",42,0)
 .. S APTNUM=0 ; Init Appoint #
"RTN","IBCNEDE2",43,0)
 .. S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",44,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",45,0)
 .. ;
"RTN","IBCNEDE2",46,0)
 .. ; Loop through all appointments on each date 
"RTN","IBCNEDE2",47,0)
 .. F  S APTNUM=$O(^SC(CLNC,"S",APTDT,1,APTNUM)) Q:('APTNUM)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",48,0)
 ... ;
"RTN","IBCNEDE2",49,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",50,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",51,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",52,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",53,0)
 ... ;
"RTN","IBCNEDE2",54,0)
 ... S DFN=$P(^SC(CLNC,"S",APTDT,1,APTNUM,0),U) Q:DFN=""
"RTN","IBCNEDE2",55,0)
 ... S ELG=$P(^SC(CLNC,"S",APTDT,1,APTNUM,0),U,10)
"RTN","IBCNEDE2",56,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",57,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",58,0)
 ... I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",59,0)
 ... ;
"RTN","IBCNEDE2",60,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",61,0)
 ... ; D INP Q:'OK     ; No longer check for inpatient status
"RTN","IBCNEDE2",62,0)
 ... ;
"RTN","IBCNEDE2",63,0)
 ... K ACTINS
"RTN","IBCNEDE2",64,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",1)
"RTN","IBCNEDE2",65,0)
 ... ;
"RTN","IBCNEDE2",66,0)
 ... I '$D(ACTINS(0)) D NOACTIVE Q   ; Patient has no active ins
"RTN","IBCNEDE2",67,0)
 ... ;
"RTN","IBCNEDE2",68,0)
 ... S INREC=0 ; Record ien
"RTN","IBCNEDE2",69,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",70,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",71,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",72,0)
 ... . ;
"RTN","IBCNEDE2",73,0)
 ... . ; check for ins. to exclude (i.e. Medicare/Medicaid)
"RTN","IBCNEDE2",74,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",75,0)
 ... . ;
"RTN","IBCNEDE2",76,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",77,0)
 ... . ;
"RTN","IBCNEDE2",78,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",79,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",80,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",81,0)
 ... . ;
"RTN","IBCNEDE2",82,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",83,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",84,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",85,0)
 ... . ;
"RTN","IBCNEDE2",86,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",87,0)
 ... . ;  date range
"RTN","IBCNEDE2",88,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",89,0)
 ... . ;
"RTN","IBCNEDE2",90,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",91,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",92,0)
 ... . ;
"RTN","IBCNEDE2",93,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",94,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",95,0)
 ... . ;
"RTN","IBCNEDE2",96,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",97,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",98,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",99,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",100,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",101,0)
 ... . S SCNT5=$S(SIDACT=5:1,1:0)
"RTN","IBCNEDE2",102,0)
 ... . I CNT+SCNT5+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",103,0)
 ... . ;
"RTN","IBCNEDE2",104,0)
 ... . S SID=""
"RTN","IBCNEDE2",105,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D SET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE2",106,0)
 ... . I SIDACT=4!(SIDACT=5) D SET("","")
"RTN","IBCNEDE2",107,0)
 ... . Q
"RTN","IBCNEDE2",108,0)
 ... Q
"RTN","IBCNEDE2",109,0)
 Q
"RTN","IBCNEDE2",110,0)
 ;
"RTN","IBCNEDE2",111,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",112,0)
 S OK=1
"RTN","IBCNEDE2",113,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",114,0)
 Q
"RTN","IBCNEDE2",115,0)
 ;
"RTN","IBCNEDE2",116,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",117,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",118,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",119,0)
 S OK=1
"RTN","IBCNEDE2",120,0)
 Q
"RTN","IBCNEDE2",121,0)
 ;
"RTN","IBCNEDE2",122,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",123,0)
 D INP^VADPT
"RTN","IBCNEDE2",124,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",125,0)
 K VAIN
"RTN","IBCNEDE2",126,0)
 S OK=1
"RTN","IBCNEDE2",127,0)
 Q
"RTN","IBCNEDE2",128,0)
 ;
"RTN","IBCNEDE2",129,0)
NOACTIVE ; No active insurance
"RTN","IBCNEDE2",130,0)
 ;
"RTN","IBCNEDE2",131,0)
 ; Call IB utility to search for patient's inactive insurance
"RTN","IBCNEDE2",132,0)
 ; IBCNS passes back IBINS = 1 if active insurance was found
"RTN","IBCNEDE2",133,0)
 ; IBCNS sets the array IBDD to the patient's valid insurance
"RTN","IBCNEDE2",134,0)
 ; IBCNS sets the array IBDDI to the patient's invalid insurance
"RTN","IBCNEDE2",135,0)
 ;
"RTN","IBCNEDE2",136,0)
 N SVIBDDI
"RTN","IBCNEDE2",137,0)
 K IBINS,IBDD,IBDDI
"RTN","IBCNEDE2",138,0)
 S IBINDT=APTDT,IBOUTP=2,(FOUND1,FOUND2)=0
"RTN","IBCNEDE2",139,0)
 ;
"RTN","IBCNEDE2",140,0)
 D ^IBCNS
"RTN","IBCNEDE2",141,0)
 K IBDD           ; don't need this array
"RTN","IBCNEDE2",142,0)
 I $G(IBINS)=1 Q  ; if active insurance was found quit
"RTN","IBCNEDE2",143,0)
 M SVIBDDI=IBDDI
"RTN","IBCNEDE2",144,0)
 ;
"RTN","IBCNEDE2",145,0)
 ; Inactive Insurance
"RTN","IBCNEDE2",146,0)
 I CNT<MAXCNT,$D(IBDDI)>0 S FOUND2=$$INAC^IBCNEDE6(.CNT,MAXCNT,.IBDDI,SRVICEDT,FRESHDAY,1)
"RTN","IBCNEDE2",147,0)
 M IBDDI=SVIBDDI
"RTN","IBCNEDE2",148,0)
 ;
"RTN","IBCNEDE2",149,0)
 ; Popular insurance
"RTN","IBCNEDE2",150,0)
 I CNT<MAXCNT S FOUND1=$$POP^IBCNEDE4(.CNT,MAXCNT,SRVICEDT,FRESHDAY,1,.IBDDI)
"RTN","IBCNEDE2",151,0)
 ;
"RTN","IBCNEDE2",152,0)
 I 'FOUND1,'FOUND2,(CNT<MAXCNT) D BLANKTQ
"RTN","IBCNEDE2",153,0)
 ;
"RTN","IBCNEDE2",154,0)
 K INS,IBBDI
"RTN","IBCNEDE2",155,0)
 Q
"RTN","IBCNEDE2",156,0)
 ;
"RTN","IBCNEDE2",157,0)
SET(SID,INR) ; Set data in TQ
"RTN","IBCNEDE2",158,0)
 ;
"RTN","IBCNEDE2",159,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",160,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",161,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",162,0)
 ;
"RTN","IBCNEDE2",163,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",164,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",165,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",166,0)
 ;
"RTN","IBCNEDE2",167,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",168,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",169,0)
 ;
"RTN","IBCNEDE2",170,0)
 Q
"RTN","IBCNEDE2",171,0)
 ;
"RTN","IBCNEDE2",172,0)
BLANKTQ ; no new records were created in file 365.1 for this DFN
"RTN","IBCNEDE2",173,0)
 ; need to check if a blank inquiry exists (patient w/o a payer)
"RTN","IBCNEDE2",174,0)
 ; if it doesn't exist create a new blank inquiry
"RTN","IBCNEDE2",175,0)
 ;
"RTN","IBCNEDE2",176,0)
 N DISYS
"RTN","IBCNEDE2",177,0)
 S PIEN=$$FIND1^DIC(365.12,,"X","~NO PAYER"),SID=""
"RTN","IBCNEDE2",178,0)
 ;
"RTN","IBCNEDE2",179,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE2",180,0)
 ;  date range
"RTN","IBCNEDE2",181,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",182,0)
 ; 
"RTN","IBCNEDE2",183,0)
 ; Update service dates for inquiry to be transmitted - necessary here?
"RTN","IBCNEDE2",184,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",185,0)
 ;
"RTN","IBCNEDE2",186,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY,1) G BLANKXT
"RTN","IBCNEDE2",187,0)
 ;
"RTN","IBCNEDE2",188,0)
 S QURYFLAG="I" D SET("","")
"RTN","IBCNEDE2",189,0)
 S PIEN=""
"RTN","IBCNEDE2",190,0)
BLANKXT ;
"RTN","IBCNEDE2",191,0)
 Q
"RTN","IBCNEDE2",192,0)
 ;
"RTN","IBCNEDE3")
0^45^B51661172
"RTN","IBCNEDE3",1,0)
IBCNEDE3 ;DAOU/DJW - NONVERINS DATA EXTRACT ;18-JUN-2002
"RTN","IBCNEDE3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDE3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE3",4,0)
 ;
"RTN","IBCNEDE3",5,0)
 ;**Program Description**
"RTN","IBCNEDE3",6,0)
 ;  This program finds veterans who have been seen within a
"RTN","IBCNEDE3",7,0)
 ;  specified date range that have active insurance records which has
"RTN","IBCNEDE3",8,0)
 ;  not been verified recently.
"RTN","IBCNEDE3",9,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE3",10,0)
 ;
"RTN","IBCNEDE3",11,0)
 Q   ; program can not be called directly
"RTN","IBCNEDE3",12,0)
 ;
"RTN","IBCNEDE3",13,0)
EN ; Loop through designated cross-references for updates 
"RTN","IBCNEDE3",14,0)
 ; (Non verified insurance)
"RTN","IBCNEDE3",15,0)
 ;
"RTN","IBCNEDE3",16,0)
 ; Initialize 
"RTN","IBCNEDE3",17,0)
 NEW DIC,DA,X,Y,DLAYGO,DINUM,DTOUT,DFN,FRESHDT,IBD,IBPM,IBPMD
"RTN","IBCNEDE3",18,0)
 NEW IEN,MAXCNT,IBCNECNT,EACTIVE,XDAYS,YDAYS,TDT,VI,IBBDT,IBEDT
"RTN","IBCNEDE3",19,0)
 NEW VINCON,VNOK,SRVICEDT,RESULT,PAYER,PAYERID,ARRAY,ERROR,SUPPBUFF
"RTN","IBCNEDE3",20,0)
 NEW TRANSNO,IBQUERY,PTN,INSNAME,IBCNETOT,SID,SIDACT,SIDDATA,SCNT5
"RTN","IBCNEDE3",21,0)
 NEW SIDARRAY,SIDCNT,DISYS,DGPMDT,AUPNDT,II
"RTN","IBCNEDE3",22,0)
 ;
"RTN","IBCNEDE3",23,0)
 S IEN="",IBCNECNT=0
"RTN","IBCNEDE3",24,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE3",25,0)
 S IBCNETOT=0
"RTN","IBCNEDE3",26,0)
 ;
"RTN","IBCNEDE3",27,0)
 ; Get site parameter settings for non-verified ins. extract
"RTN","IBCNEDE3",28,0)
 S EACTIVE=$$SETTINGS^IBCNEDE7(3)
"RTN","IBCNEDE3",29,0)
 I 'EACTIVE G EXIT                   ; Quit if extract not active
"RTN","IBCNEDE3",30,0)
 S XDAYS=$P(EACTIVE,U,2)
"RTN","IBCNEDE3",31,0)
 S YDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE3",32,0)
 S MAXCNT=$P(EACTIVE,U,4)
"RTN","IBCNEDE3",33,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE3",34,0)
 S SUPPBUFF=$P(EACTIVE,U,5)
"RTN","IBCNEDE3",35,0)
 ;
"RTN","IBCNEDE3",36,0)
 ;  Check for Date Last Treated and get DFN's
"RTN","IBCNEDE3",37,0)
 S IBBDT=$$FMADD^XLFDT(DT,-XDAYS),IBEDT=DT
"RTN","IBCNEDE3",38,0)
 ;
"RTN","IBCNEDE3",39,0)
 ;  * main control
"RTN","IBCNEDE3",40,0)
 ;
"RTN","IBCNEDE3",41,0)
 S IBD=IBBDT-.0001
"RTN","IBCNEDE3",42,0)
 K ^TMP("IBCNEDE3",$J,"PTS")
"RTN","IBCNEDE3",43,0)
 F II=1:1 D  Q:(IBD="")!(IBD\1>IBEDT)!(IBCNECNT'<MAXCNT)!($G(ZTSTOP))
"RTN","IBCNEDE3",44,0)
 . S DGPMDT=$O(^DGPM("ATT3",IBD)),AUPNDT=$O(^AUPNVSIT("B",IBD))
"RTN","IBCNEDE3",45,0)
 . I (AUPNDT="")!((DGPMDT\1)<(AUPNDT\1)) S IBD=DGPMDT
"RTN","IBCNEDE3",46,0)
 . I (DGPMDT="")!((DGPMDT\1)>(AUPNDT\1)) S IBD=AUPNDT
"RTN","IBCNEDE3",47,0)
 . I (IBD\1>IBEDT)!(IBD="") Q
"RTN","IBCNEDE3",48,0)
 . ;
"RTN","IBCNEDE3",49,0)
 . K ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",50,0)
 . D INP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",51,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",52,0)
 . D OUTP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",53,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",54,0)
 . ;D REST(IBBDT-.0001,IBEDT)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",55,0)
 . D PROCESS
"RTN","IBCNEDE3",56,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",57,0)
 . S IBD=($$FMADD^XLFDT(IBD,+1))-.0001
"RTN","IBCNEDE3",58,0)
 ;
"RTN","IBCNEDE3",59,0)
EXIT ;
"RTN","IBCNEDE3",60,0)
 K VINS,^TMP("IBJDI51",$J),^TMP("IBCNEDE3",$J,"PTS")   ; clean up
"RTN","IBCNEDE3",61,0)
 ;
"RTN","IBCNEDE3",62,0)
 Q
"RTN","IBCNEDE3",63,0)
 ; * end of routine processing
"RTN","IBCNEDE3",64,0)
 ;===========================================
"RTN","IBCNEDE3",65,0)
INP(DATE) ;  Find inpatients for that date (we want most recent encounter)
"RTN","IBCNEDE3",66,0)
 NEW IBD,IBPM,IBPMD,DFN
"RTN","IBCNEDE3",67,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",68,0)
 F  S IBD=$O(^DGPM("ATT3",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",69,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("ATT3",IBD,IBPM)) Q:IBPM=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",70,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",71,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",72,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",73,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",74,0)
 .. ;
"RTN","IBCNEDE3",75,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",76,0)
 .. S DFN=+$P(IBPMD,U,3) Q:'DFN
"RTN","IBCNEDE3",77,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE3",78,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"INP"))      ; already processed 
"RTN","IBCNEDE3",79,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",80,0)
 .. D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",81,0)
 Q
"RTN","IBCNEDE3",82,0)
 ;
"RTN","IBCNEDE3",83,0)
OUTP(DATE) ; Find outpatients treated for this date (most recent encounter)
"RTN","IBCNEDE3",84,0)
 NEW IBD,IEN,DFN
"RTN","IBCNEDE3",85,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",86,0)
 F  S IBD=$O(^AUPNVSIT("B",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",87,0)
 . S IEN=""
"RTN","IBCNEDE3",88,0)
 . F  S IEN=$O(^AUPNVSIT("B",IBD,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",89,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",90,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",91,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",92,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",93,0)
 .. ;
"RTN","IBCNEDE3",94,0)
 .. S DFN=$P($G(^AUPNVSIT(IEN,0)),U,5)
"RTN","IBCNEDE3",95,0)
 .. Q:DFN=""
"RTN","IBCNEDE3",96,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE3",97,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP"))    ; already processed
"RTN","IBCNEDE3",98,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",99,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",100,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",101,0)
 Q
"RTN","IBCNEDE3",102,0)
 ;
"RTN","IBCNEDE3",103,0)
REST(STARTDT,ENDDT) ; Check to see if there was a more recent inpatient
"RTN","IBCNEDE3",104,0)
 ; or outpatient encounter for this patient.
"RTN","IBCNEDE3",105,0)
 ;
"RTN","IBCNEDE3",106,0)
 NEW IBPM,IBPMD,IBD,DFN
"RTN","IBCNEDE3",107,0)
 S DFN=0
"RTN","IBCNEDE3",108,0)
 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:DFN=""  D
"RTN","IBCNEDE3",109,0)
 . ;
"RTN","IBCNEDE3",110,0)
 . ; inpatients
"RTN","IBCNEDE3",111,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("C",DFN,IBPM)) Q:IBPM=""  D
"RTN","IBCNEDE3",112,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",113,0)
 .. S IBD=$P(IBPMD,U,1) I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",114,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD))  ;already checked
"RTN","IBCNEDE3",115,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",116,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",117,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",118,0)
 . ;
"RTN","IBCNEDE3",119,0)
 . ; outpatients
"RTN","IBCNEDE3",120,0)
 . S IBD="" F  S IBD=$O(^AUPNVSIT("AA",DFN,IBD)) Q:IBD=""  D
"RTN","IBCNEDE3",121,0)
 .. I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",122,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD))  ;already checked
"RTN","IBCNEDE3",123,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",124,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",125,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",126,0)
 ;
"RTN","IBCNEDE3",127,0)
 K ^TMP("IBCNEDE3",$J,"PTS")  ; clean up - no longer needed
"RTN","IBCNEDE3",128,0)
 Q
"RTN","IBCNEDE3",129,0)
 ;
"RTN","IBCNEDE3",130,0)
PROCESS ;  Get insurance for each patient
"RTN","IBCNEDE3",131,0)
 S DFN=0 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:'DFN  D  Q:IBCNECNT'<MAXCNT!$G(ZTSTOP)
"RTN","IBCNEDE3",132,0)
 . ; Update count for periodic check
"RTN","IBCNEDE3",133,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",134,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",135,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",136,0)
 . ;
"RTN","IBCNEDE3",137,0)
 . S SRVICEDT=$P(^TMP("IBJDI51",$J,DFN),U)
"RTN","IBCNEDE3",138,0)
 . S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-YDAYS)
"RTN","IBCNEDE3",139,0)
 . K VINS
"RTN","IBCNEDE3",140,0)
 . D ALL^IBCNS1(DFN,"VINS",3)
"RTN","IBCNEDE3",141,0)
 . ;
"RTN","IBCNEDE3",142,0)
 . I $G(VINS(0))="" Q  ; no active insurance
"RTN","IBCNEDE3",143,0)
 . ;
"RTN","IBCNEDE3",144,0)
 . S VI=0 F  S VI=$O(VINS(VI)) Q:VI=""!(IBCNECNT'<MAXCNT)  D
"RTN","IBCNEDE3",145,0)
 .. S VINCON=$P(VINS(VI,0),U)
"RTN","IBCNEDE3",146,0)
 .. ;
"RTN","IBCNEDE3",147,0)
 .. ;Check for ins. companies to exclude (i.e. Medicare/Medicaid)
"RTN","IBCNEDE3",148,0)
 .. S INSNAME=$P($G(^DIC(36,VINCON,0)),U)
"RTN","IBCNEDE3",149,0)
 .. I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE3",150,0)
 .. ;
"RTN","IBCNEDE3",151,0)
 .. ;Check for Ins. Company/Payer problems
"RTN","IBCNEDE3",152,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",VINCON)
"RTN","IBCNEDE3",153,0)
 .. ;
"RTN","IBCNEDE3",154,0)
 .. I $P(RESULT,U)'="" D BUFF Q    ; error encountered
"RTN","IBCNEDE3",155,0)
 .. ;
"RTN","IBCNEDE3",156,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3) ; Payer IEN & Payer ID
"RTN","IBCNEDE3",157,0)
 .. I 'PAYER!(PAYERID="") Q
"RTN","IBCNEDE3",158,0)
 .. ;
"RTN","IBCNEDE3",159,0)
 .. ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE3",160,0)
 .. ;  date range
"RTN","IBCNEDE3",161,0)
 .. D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE3",162,0)
 .. ;
"RTN","IBCNEDE3",163,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE3",164,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE3",165,0)
 .. ;
"RTN","IBCNEDE3",166,0)
 .. ; Check for outstanding/current entries in File 365.1
"RTN","IBCNEDE3",167,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS) Q
"RTN","IBCNEDE3",168,0)
 .. K SIDARRAY
"RTN","IBCNEDE3",169,0)
 .. S SIDDATA=$$SIDCHK^IBCNEDE5(PAYER,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE3",170,0)
 .. S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE3",171,0)
 .. S SCNT5=$S(SIDACT=5:1,1:"")
"RTN","IBCNEDE3",172,0)
 .. ;
"RTN","IBCNEDE3",173,0)
 .. I SIDACT=3 D  Q
"RTN","IBCNEDE3",174,0)
 ... I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,18,"",1)
"RTN","IBCNEDE3",175,0)
 .. I IBCNECNT+SCNT5+SIDCNT>MAXCNT S IBCNECNT=MAXCNT Q  ;quit if TQ entries>MAXCNT
"RTN","IBCNEDE3",176,0)
 .. S SID=""
"RTN","IBCNEDE3",177,0)
 .. F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D SET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE3",178,0)
 .. I SIDACT=4!(SIDACT=5) D SET("","")
"RTN","IBCNEDE3",179,0)
 Q
"RTN","IBCNEDE3",180,0)
 ;
"RTN","IBCNEDE3",181,0)
SET(SID,INR) ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE3",182,0)
 NEW DATA1,DATA2,TQIEN
"RTN","IBCNEDE3",183,0)
 ;
"RTN","IBCNEDE3",184,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE3",185,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE3",186,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESHDT
"RTN","IBCNEDE3",187,0)
 ;
"RTN","IBCNEDE3",188,0)
 ; The hardcoded '3' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE3",189,0)
 ; the file 365.1 that it is the non-verified extract.
"RTN","IBCNEDE3",190,0)
 S DATA2=3_U_"V"_U_SRVICEDT_U_INR
"RTN","IBCNEDE3",191,0)
 ;
"RTN","IBCNEDE3",192,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE3",193,0)
 I TQIEN'="" S IBCNECNT=IBCNECNT+1
"RTN","IBCNEDE3",194,0)
 ;
"RTN","IBCNEDE3",195,0)
 Q
"RTN","IBCNEDE3",196,0)
BUFF ; Create new buffer entry, if one doesn't already exist, with a 
"RTN","IBCNEDE3",197,0)
 ; bang symbol
"RTN","IBCNEDE3",198,0)
 I SUPPBUFF Q   ; determine if we suppress buffer entries
"RTN","IBCNEDE3",199,0)
 I '$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,$P(RESULT,U),"",1)
"RTN","IBCNEDE3",200,0)
 Q
"RTN","IBCNEDE3",201,0)
 ;
"RTN","IBCNEDE4")
0^16^B79553596
"RTN","IBCNEDE4",1,0)
IBCNEDE4 ;DAOU/ALA - NO INSURANCE DATA EXTRACT ;24-JUN-2002
"RTN","IBCNEDE4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDE4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE4",4,0)
 ;
"RTN","IBCNEDE4",5,0)
 ;**Program Description**
"RTN","IBCNEDE4",6,0)
 ;  This program finds veterans who have been seen within a
"RTN","IBCNEDE4",7,0)
 ;  specified date range but who have no active or no
"RTN","IBCNEDE4",8,0)
 ;  insurance records
"RTN","IBCNEDE4",9,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE4",10,0)
 ;
"RTN","IBCNEDE4",11,0)
 Q   ;can't call directly
"RTN","IBCNEDE4",12,0)
 ;
"RTN","IBCNEDE4",13,0)
EN ;
"RTN","IBCNEDE4",14,0)
 NEW TMPCNT,IEN,TQIEN,DATA1,DATA2,EACTIVE,XDAYS,YDAYS,MAXCNT,IBBDT,IBEDT
"RTN","IBCNEDE4",15,0)
 NEW IBD,IBPM,IBPMD,IBQUERY,IBCNCNT,SRVICEDT,IBINS,IBDD,IBDDI,DFN
"RTN","IBCNEDE4",16,0)
 NEW IBOUTP,PTN,PAYER,FOUND1,FOUND2,DFN,DISYS,TDT,IBCNETOT,FRESH,FRESHDT
"RTN","IBCNEDE4",17,0)
 NEW DGPMDT,AUPNDT
"RTN","IBCNEDE4",18,0)
 ;
"RTN","IBCNEDE4",19,0)
 S IBCNCNT=0
"RTN","IBCNEDE4",20,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE4",21,0)
 S IBCNETOT=0
"RTN","IBCNEDE4",22,0)
 ;
"RTN","IBCNEDE4",23,0)
 ;  Get Extract parameters
"RTN","IBCNEDE4",24,0)
 S EACTIVE=$$SETTINGS^IBCNEDE7(4)
"RTN","IBCNEDE4",25,0)
 I 'EACTIVE Q                   ; quit if not active
"RTN","IBCNEDE4",26,0)
 S XDAYS=$P(EACTIVE,U,2)
"RTN","IBCNEDE4",27,0)
 S YDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE4",28,0)
 S MAXCNT=$P(EACTIVE,U,4)
"RTN","IBCNEDE4",29,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE4",30,0)
 ;
"RTN","IBCNEDE4",31,0)
 ;  Check for Date Last Treated and get DFN's
"RTN","IBCNEDE4",32,0)
 S IBBDT=$$FMADD^XLFDT(DT,-XDAYS),IBEDT=DT
"RTN","IBCNEDE4",33,0)
 ;
"RTN","IBCNEDE4",34,0)
 ; * Main Control
"RTN","IBCNEDE4",35,0)
 ;
"RTN","IBCNEDE4",36,0)
 S IBD=IBBDT-.0001
"RTN","IBCNEDE4",37,0)
 K ^TMP("IBCNEDE4",$J,"PTS")
"RTN","IBCNEDE4",38,0)
 F II=1:1 D  Q:(IBD="")!(IBD\1>IBEDT)!(IBCNCNT'<MAXCNT)!($G(ZTSTOP))
"RTN","IBCNEDE4",39,0)
 . S DGPMDT=$O(^DGPM("ATT3",IBD)),AUPNDT=$O(^AUPNVSIT("B",IBD))
"RTN","IBCNEDE4",40,0)
 . I (AUPNDT="")!((DGPMDT\1)<(AUPNDT\1)) S IBD=DGPMDT
"RTN","IBCNEDE4",41,0)
 . I (DGPMDT="")!((DGPMDT\1)>(AUPNDT\1)) S IBD=AUPNDT
"RTN","IBCNEDE4",42,0)
 . I (IBD\1>IBEDT)!(IBD="") Q
"RTN","IBCNEDE4",43,0)
 . ;
"RTN","IBCNEDE4",44,0)
 . K ^TMP("IBJDI51",$J)
"RTN","IBCNEDE4",45,0)
 . D INP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE4",46,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",47,0)
 . D OUTP(IBD)
"RTN","IBCNEDE4",48,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",49,0)
 . D REST(IBBDT-.0001,IBEDT)
"RTN","IBCNEDE4",50,0)
 . D PROCESS
"RTN","IBCNEDE4",51,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",52,0)
 . S IBD=($$FMADD^XLFDT(IBD,+1))-.0001
"RTN","IBCNEDE4",53,0)
 ;
"RTN","IBCNEDE4",54,0)
EXIT ;
"RTN","IBCNEDE4",55,0)
 K VINS,^TMP("IBJDI51",$J),^TMP("IBCNEDE4",$J,"PTS")   ; clean up
"RTN","IBCNEDE4",56,0)
 ;
"RTN","IBCNEDE4",57,0)
 Q
"RTN","IBCNEDE4",58,0)
 ; * end of routine processing
"RTN","IBCNEDE4",59,0)
 ;============================
"RTN","IBCNEDE4",60,0)
 ;
"RTN","IBCNEDE4",61,0)
INP(DATE) ;  Find inpatients for that date (we want most recent encounter)
"RTN","IBCNEDE4",62,0)
 NEW IBD,IBPM,IBPMD,DFN
"RTN","IBCNEDE4",63,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE4",64,0)
 F  S IBD=$O(^DGPM("ATT3",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",65,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("ATT3",IBD,IBPM)) Q:IBPM=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",66,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE4",67,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",68,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",69,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",70,0)
 .. ;
"RTN","IBCNEDE4",71,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE4",72,0)
 .. S DFN=+$P(IBPMD,U,3) Q:'DFN
"RTN","IBCNEDE4",73,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE4",74,0)
 .. Q:$D(^TMP("IBCNEDE4",$J,"PTS",DFN,"INP"))      ; already processed
"RTN","IBCNEDE4",75,0)
 .. S ^TMP("IBCNEDE4",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE4",76,0)
 .. D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE4",77,0)
 Q
"RTN","IBCNEDE4",78,0)
 ;
"RTN","IBCNEDE4",79,0)
OUTP(DATE) ; Find outpatients treated for this date (most recent encounter)
"RTN","IBCNEDE4",80,0)
 NEW IBD,IEN,DFN
"RTN","IBCNEDE4",81,0)
 S IBD=DATE-.000001
"RTN","IBCNEDE4",82,0)
 F  S IBD=$O(^AUPNVSIT("B",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",83,0)
 . S IEN=""
"RTN","IBCNEDE4",84,0)
 . F  S IEN=$O(^AUPNVSIT("B",IBD,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",85,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE4",86,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",87,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",88,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",89,0)
 .. ;
"RTN","IBCNEDE4",90,0)
 .. S DFN=$P($G(^AUPNVSIT(IEN,0)),U,5)
"RTN","IBCNEDE4",91,0)
 .. Q:DFN=""
"RTN","IBCNEDE4",92,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE4",93,0)
 .. Q:$D(^TMP("IBCNEDE4",$J,"PTS",DFN,"OUTP"))    ; already processed
"RTN","IBCNEDE4",94,0)
 .. S ^TMP("IBCNEDE4",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE4",95,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",96,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE4",97,0)
 Q
"RTN","IBCNEDE4",98,0)
 ;
"RTN","IBCNEDE4",99,0)
REST(STARTDT,ENDDT) ; Check for a more recent encounter (inpat. or outpat.)
"RTN","IBCNEDE4",100,0)
 ;
"RTN","IBCNEDE4",101,0)
 NEW IBPM,IBPMD,IBD,DFN
"RTN","IBCNEDE4",102,0)
 S DFN=0
"RTN","IBCNEDE4",103,0)
 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:DFN=""  D
"RTN","IBCNEDE4",104,0)
 . ;
"RTN","IBCNEDE4",105,0)
 . ; inpatients
"RTN","IBCNEDE4",106,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("C",DFN,IBPM)) Q:IBPM=""  D
"RTN","IBCNEDE4",107,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE4",108,0)
 .. S IBD=$P(IBPMD,U,1) I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE4",109,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD))  ;already checked
"RTN","IBCNEDE4",110,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE4",111,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",112,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE4",113,0)
 . ;
"RTN","IBCNEDE4",114,0)
 . ; outpatients
"RTN","IBCNEDE4",115,0)
 . S IBD="" F  S IBD=$O(^AUPNVSIT("AA",DFN,IBD)) Q:IBD=""  D
"RTN","IBCNEDE4",116,0)
 .. I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE4",117,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD))  ;already checked
"RTN","IBCNEDE4",118,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE4",119,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",120,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE4",121,0)
 ;
"RTN","IBCNEDE4",122,0)
 Q
"RTN","IBCNEDE4",123,0)
 ;
"RTN","IBCNEDE4",124,0)
PROCESS ;  Check selection criteria for each person with
"RTN","IBCNEDE4",125,0)
 ;  a visit in the last defined time frame (e.g. 6 months)
"RTN","IBCNEDE4",126,0)
 N SVIBDDI
"RTN","IBCNEDE4",127,0)
 S DFN=0 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:'DFN  D  Q:IBCNCNT'<MAXCNT!$G(ZTSTOP)
"RTN","IBCNEDE4",128,0)
 . ;
"RTN","IBCNEDE4",129,0)
 . ; Update count for periodic check
"RTN","IBCNEDE4",130,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",131,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",132,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",133,0)
 . ;
"RTN","IBCNEDE4",134,0)
 . S SRVICEDT=$P(^TMP("IBJDI51",$J,DFN),U)
"RTN","IBCNEDE4",135,0)
 . S FRESHDT=$$FMADD^XLFDT(SRVICEDT,YDAYS)
"RTN","IBCNEDE4",136,0)
 . ;
"RTN","IBCNEDE4",137,0)
 . ; Call IB utility to search for patient's inactive insurance
"RTN","IBCNEDE4",138,0)
 . ; IBCNS passes back IBINS = 1 if active insurance was found
"RTN","IBCNEDE4",139,0)
 . ; IBCNS sets the array IBDD to the patient's valid insurance
"RTN","IBCNEDE4",140,0)
 . ; IBCNS sets the array IBDDI to the patient's invalid insurance
"RTN","IBCNEDE4",141,0)
 . ;
"RTN","IBCNEDE4",142,0)
 . K IBINS,IBDD,IBDDI,SVIBDDI
"RTN","IBCNEDE4",143,0)
 . S IBOUTP=2
"RTN","IBCNEDE4",144,0)
 . D ^IBCNS
"RTN","IBCNEDE4",145,0)
 . K IBDD           ; don't need this array
"RTN","IBCNEDE4",146,0)
 . I $G(IBINS)=1 Q  ; if active insurance was found quit
"RTN","IBCNEDE4",147,0)
 . M SVIBDDI=IBDDI
"RTN","IBCNEDE4",148,0)
 . ;
"RTN","IBCNEDE4",149,0)
 . S (FOUND1,FOUND2)=0
"RTN","IBCNEDE4",150,0)
 . ;
"RTN","IBCNEDE4",151,0)
 . ; Returned all inactive insurances in IBDDI array
"RTN","IBCNEDE4",152,0)
 . I $D(IBDDI)>0,(IBCNCNT<MAXCNT) S FOUND2=$$INAC^IBCNEDE6(.IBCNCNT,MAXCNT,.IBDDI,SRVICEDT,YDAYS)
"RTN","IBCNEDE4",153,0)
 . M IBDDI=SVIBDDI
"RTN","IBCNEDE4",154,0)
 . ;
"RTN","IBCNEDE4",155,0)
 . ;  If no inactive insurances, work the popular insurances
"RTN","IBCNEDE4",156,0)
 . I IBCNCNT<MAXCNT S FOUND1=$$POP(.IBCNCNT,MAXCNT,SRVICEDT,YDAYS,,.IBDDI)
"RTN","IBCNEDE4",157,0)
 . ;
"RTN","IBCNEDE4",158,0)
 . I 'FOUND1,'FOUND2,(IBCNCNT<MAXCNT) D BLANKTQ^IBCNEDE6(SRVICEDT,FRESHDT,YDAYS,.IBCNCNT)
"RTN","IBCNEDE4",159,0)
 K ^TMP("IBJDI51",$J),IBDD,IBDDI,IBINS
"RTN","IBCNEDE4",160,0)
 Q
"RTN","IBCNEDE4",161,0)
 ;
"RTN","IBCNEDE4",162,0)
POP(IBCNCNT,MAXCNT,SRVICEDT,FDAYS,APPTFLG,IBDDI) ; Get Popular Insurances
"RTN","IBCNEDE4",163,0)
 ; FDAYS (Fresh Days value)
"RTN","IBCNEDE4",164,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE4",165,0)
 ;
"RTN","IBCNEDE4",166,0)
 NEW PDATA,POPFL,PNUM,PCNT,II,RESULT,PAYER,PAYERID
"RTN","IBCNEDE4",167,0)
 NEW DATA1,DATA2,TQIEN,FOUND,SIDARRAY,SID,SIDACT,SIDCNT
"RTN","IBCNEDE4",168,0)
 NEW FRESHDT,INACT,SKIPPAY
"RTN","IBCNEDE4",169,0)
 ;
"RTN","IBCNEDE4",170,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE4",171,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE4",172,0)
 ; extract was created.
"RTN","IBCNEDE4",173,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE4",174,0)
 ;
"RTN","IBCNEDE4",175,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE4",176,0)
 S PDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE4",177,0)
 S POPFL=$P(PDATA,U,9),PNUM=$P(PDATA,U,10)
"RTN","IBCNEDE4",178,0)
 S INACT=$P(PDATA,U,8)   ; get inactive flag from site parameters
"RTN","IBCNEDE4",179,0)
 ;
"RTN","IBCNEDE4",180,0)
 ;  If the search for popular insurances is 'No', quit
"RTN","IBCNEDE4",181,0)
 I 'POPFL G POPX
"RTN","IBCNEDE4",182,0)
 ;
"RTN","IBCNEDE4",183,0)
 ; If the site does not check inactive insurances and the patient
"RTN","IBCNEDE4",184,0)
 ; has inactive insurances, set up the array of payers to skip.
"RTN","IBCNEDE4",185,0)
 ; This will be used to screen the patient's inactive payers from being
"RTN","IBCNEDE4",186,0)
 ; included with the most popular payers. 
"RTN","IBCNEDE4",187,0)
 I 'INACT,$D(IBDDI) D
"RTN","IBCNEDE4",188,0)
 . N INCP,INSPAYID
"RTN","IBCNEDE4",189,0)
 . S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:'INCP  D
"RTN","IBCNEDE4",190,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INCP)
"RTN","IBCNEDE4",191,0)
 .. Q:$P(RESULT,U)'=""
"RTN","IBCNEDE4",192,0)
 .. S INSPAYID=$P(RESULT,U,3)
"RTN","IBCNEDE4",193,0)
 .. I INSPAYID="" Q
"RTN","IBCNEDE4",194,0)
 .. S SKIPPAY(INSPAYID)=""
"RTN","IBCNEDE4",195,0)
 ;
"RTN","IBCNEDE4",196,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE4",197,0)
 ;
"RTN","IBCNEDE4",198,0)
 ;  If no list of popular insurances, quit
"RTN","IBCNEDE4",199,0)
 I $O(^IBE(350.9,1,51.18,0))="" G POPX
"RTN","IBCNEDE4",200,0)
 S II=0 F PCNT=1:1:PNUM S II=$O(^IBE(350.9,1,51.18,II)) Q:'II  D  Q:IBCNCNT'<MAXCNT
"RTN","IBCNEDE4",201,0)
 . S PAYER=$P(^IBE(350.9,1,51.18,II,0),U,1)
"RTN","IBCNEDE4",202,0)
 . ;
"RTN","IBCNEDE4",203,0)
 . S RESULT=$$PAYER^IBCNEUT4(PAYER)
"RTN","IBCNEDE4",204,0)
 . I $P(RESULT,U)'="" Q   ; quit if error, don't record in ins. buffer
"RTN","IBCNEDE4",205,0)
 . ; PAYERID = National ID
"RTN","IBCNEDE4",206,0)
 . S PAYERID=$P(RESULT,U,2)
"RTN","IBCNEDE4",207,0)
 . I PAYERID="" Q
"RTN","IBCNEDE4",208,0)
 . ;
"RTN","IBCNEDE4",209,0)
 . I $D(SKIPPAY(PAYERID)) Q  ; quit if it was determined that this payer be skipped
"RTN","IBCNEDE4",210,0)
 . ;
"RTN","IBCNEDE4",211,0)
 . S FOUND=1  ; potential inquiry
"RTN","IBCNEDE4",212,0)
 . ;
"RTN","IBCNEDE4",213,0)
 . ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE4",214,0)
 . ;  date range
"RTN","IBCNEDE4",215,0)
 . D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE4",216,0)
 . ;
"RTN","IBCNEDE4",217,0)
 . ; DAOU/BHS - Update service dates for inquiries to be transmitted
"RTN","IBCNEDE4",218,0)
 . D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE4",219,0)
 . ;
"RTN","IBCNEDE4",220,0)
 . ;check for outstanding/current entries in File 356.1
"RTN","IBCNEDE4",221,0)
 . ; Freshness check - are we allowed to add this entry to the TQ file
"RTN","IBCNEDE4",222,0)
 . I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE4",223,0)
 . ;
"RTN","IBCNEDE4",224,0)
 . ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE4",225,0)
 . ;
"RTN","IBCNEDE4",226,0)
 . K SIDARRAY
"RTN","IBCNEDE4",227,0)
 . S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE4",228,0)
 . S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE4",229,0)
 . ;  Add to TQ to compensate for TQ w/ blank Sub ID
"RTN","IBCNEDE4",230,0)
 . I SIDACT'<5,(SIDACT'>8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE4",231,0)
 . I IBCNCNT+SIDCNT>MAXCNT S IBCNCNT=MAXCNT Q     ; see if TQ entries will exceed MAXCNT
"RTN","IBCNEDE4",232,0)
 . S SID=""
"RTN","IBCNEDE4",233,0)
 . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D POPSET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE4",234,0)
 . ;
"RTN","IBCNEDE4",235,0)
 . ; Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE4",236,0)
 . I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D POPSET("","") ;D POPSET()
"RTN","IBCNEDE4",237,0)
POPX ; POP exit point
"RTN","IBCNEDE4",238,0)
 Q FOUND
"RTN","IBCNEDE4",239,0)
 ;
"RTN","IBCNEDE4",240,0)
POPSET(SID,INREC) ;
"RTN","IBCNEDE4",241,0)
 N FRESH
"RTN","IBCNEDE4",242,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE4",243,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE4",244,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE4",245,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE4",246,0)
 ;
"RTN","IBCNEDE4",247,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE4",248,0)
 ; it is.
"RTN","IBCNEDE4",249,0)
 I APPTFLG S DATA2=2  ; appt extract IBCNEDE2
"RTN","IBCNEDE4",250,0)
 I 'APPTFLG S DATA2=4 ; no ins extract IBCNEDE4
"RTN","IBCNEDE4",251,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE4",252,0)
 ;
"RTN","IBCNEDE4",253,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE4",254,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE4",255,0)
 ;
"RTN","IBCNEDE4",256,0)
 Q
"RTN","IBCNEDE4",257,0)
 ;
"RTN","IBCNEDE5")
0^47^B30882453
"RTN","IBCNEDE5",1,0)
IBCNEDE5 ;DAOU/DAC - IIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDE5",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE5",4,0)
 ;
"RTN","IBCNEDE5",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE5",6,0)
 ;
"RTN","IBCNEDE5",7,0)
SIDCHK(PIEN,DFN,BSID,SIDARRAY,FRESHDT) ; Checks the flag settings of 'Identification
"RTN","IBCNEDE5",8,0)
 ; Requires Subscriber ID' and 'Use SSN as Subscriber ID'.  The function 
"RTN","IBCNEDE5",9,0)
 ; returns a "^" delimited string.  The first value is between 1 and 5
"RTN","IBCNEDE5",10,0)
 ; telling the calling program what action(s) it should perform.  The
"RTN","IBCNEDE5",11,0)
 ; 2nd piece indicates the Subcriber ID that the calling program should
"RTN","IBCNEDE5",12,0)
 ; use for setting the Subscriber IDs in the IIV Transmission Queue file
"RTN","IBCNEDE5",13,0)
 ; (365.1).  The calling program is to address the blank Sub IDs and 
"RTN","IBCNEDE5",14,0)
 ; make sure the data extract does not exceed the max extract number.
"RTN","IBCNEDE5",15,0)
 ;
"RTN","IBCNEDE5",16,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",17,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",18,0)
 ; INREC - Insurance IEN of Patients record (subfile 2.312)
"RTN","IBCNEDE5",19,0)
 ; BSID - Subscriber ID from buffer file (file 355.3 field )
"RTN","IBCNEDE5",20,0)
 ; SIDARRAY - Array of active subscribers - may be subscripted by SSN 
"RTN","IBCNEDE5",21,0)
 ; FRESHDT - Freshness Date - used for checking verified date
"RTN","IBCNEDE5",22,0)
 ;
"RTN","IBCNEDE5",23,0)
 ; Logic to follow:
"RTN","IBCNEDE5",24,0)
 ;
"RTN","IBCNEDE5",25,0)
 ; Id. Req.| Use SSN  | Sub ID|Action|
"RTN","IBCNEDE5",26,0)
 ;  Sub ID | as Sub ID| found |  #   | Create
"RTN","IBCNEDE5",27,0)
 ; ________|__________|_______|______|________
"RTN","IBCNEDE5",28,0)
 ; YES        -         YES     1     1 Verification TQ entry w/ Sub ID
"RTN","IBCNEDE5",29,0)
 ; YES       YES        NO      2     1 Ver. TQ entry, use SSN as Sub ID
"RTN","IBCNEDE5",30,0)
 ; YES       NO         NO      3     new buffer entry or modify existing
"RTN","IBCNEDE5",31,0)
 ;                                    saying manual verification required
"RTN","IBCNEDE5",32,0)
 ; NO        NO         NO      4     1 Ver. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",33,0)
 ; NO        YES        NO      5     2 Ver. TQ entries, 1 w/ SSN as Sub
"RTN","IBCNEDE5",34,0)
 ;                                    ID and other w/ blank Sub ID
"RTN","IBCNEDE5",35,0)
 ;
"RTN","IBCNEDE5",36,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN,SSN
"RTN","IBCNEDE5",37,0)
 N INSSTR,INSSTR1,SYMBOL,EXP,SUBID,SUBIDS,SIDCNT,INREC,MVER,VFLG
"RTN","IBCNEDE5",38,0)
 ;
"RTN","IBCNEDE5",39,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",40,0)
 ;
"RTN","IBCNEDE5",41,0)
 I $G(BSID)'="" D  G SIDCHKX
"RTN","IBCNEDE5",42,0)
 . S SID=BSID,(SIDACT,SIDCNT)=1
"RTN","IBCNEDE5",43,0)
 . S SIDARRAY($$STRIP(SID,,DFN)_"_")=""
"RTN","IBCNEDE5",44,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",45,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",46,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",47,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNEDE5",48,0)
 ;
"RTN","IBCNEDE5",49,0)
 S INSSTR="",SIDCNT=0,INREC=$O(^DPT(DFN,.312,0)) S:'INREC INREC=1
"RTN","IBCNEDE5",50,0)
 ;
"RTN","IBCNEDE5",51,0)
 I $D(BSID),BSID="" G SIDC1
"RTN","IBCNEDE5",52,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC
"RTN","IBCNEDE5",53,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",54,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",55,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",56,0)
 . I $P(SYMBOL,U)="" D            ; no IIV related error w/ ins. company
"RTN","IBCNEDE5",57,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",58,0)
 .. S SUBID=$P(INSSTR,U,2)
"RTN","IBCNEDE5",59,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",60,0)
 .. I $P(INSSTR,U,8)>DT Q                  ; future effective date
"RTN","IBCNEDE5",61,0)
 .. S EXP=$P(INSSTR,U,4) I EXP,EXP<DT Q    ; expired
"RTN","IBCNEDE5",62,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",63,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q     ; verified recently
"RTN","IBCNEDE5",64,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",65,0)
 .. I $D(SIDARRAY(SUBIDS_"_"_INREC)) Q            ; already in the array
"RTN","IBCNEDE5",66,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",67,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",68,0)
 . Q
"RTN","IBCNEDE5",69,0)
 ;
"RTN","IBCNEDE5",70,0)
 I SIDCNT S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",71,0)
 I 'SIDCNT,VFLG S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",72,0)
SIDC1 I SIDREQ,SIDSSN S SIDACT=2 D SSN(DFN) G SIDCHKX
"RTN","IBCNEDE5",73,0)
 I SIDREQ,'SIDSSN S SIDACT=3 G SIDCHKX
"RTN","IBCNEDE5",74,0)
 I 'SIDREQ,'SIDSSN S SIDACT=4 G SIDCHKX
"RTN","IBCNEDE5",75,0)
 I 'SIDREQ,SIDSSN S SIDACT=5 D SSN(DFN)
"RTN","IBCNEDE5",76,0)
 ;
"RTN","IBCNEDE5",77,0)
SIDCHKX ; EXIT POINT
"RTN","IBCNEDE5",78,0)
 ;
"RTN","IBCNEDE5",79,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",80,0)
 ;
"RTN","IBCNEDE5",81,0)
SSN(DFN) ; Get Patient SSN and update SIDARRAY, if needed
"RTN","IBCNEDE5",82,0)
 S SSN=$$GETSSN(DFN)
"RTN","IBCNEDE5",83,0)
 N SSNS
"RTN","IBCNEDE5",84,0)
 S SSNS=$$STRIP(SSN,1,DFN)
"RTN","IBCNEDE5",85,0)
 I $P($O(SIDARRAY(SSNS_"_")),"_")=SSNS Q
"RTN","IBCNEDE5",86,0)
 I SSNS'="",'$D(SIDARRAY(SSNS_"_")) S SIDARRAY(SSNS_"_")="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",87,0)
 Q
"RTN","IBCNEDE5",88,0)
 ;
"RTN","IBCNEDE5",89,0)
GETSSN(DFN) ; Get Patient SSN
"RTN","IBCNEDE5",90,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDE5",91,0)
 Q $P($G(^DPT(DFN,0)),U,9)
"RTN","IBCNEDE5",92,0)
 ;
"RTN","IBCNEDE5",93,0)
STRIP(ID,SS,DFN) ; Strip dashes and spaces if ssn
"RTN","IBCNEDE5",94,0)
 ;         ID can be ssn or subid
"RTN","IBCNEDE5",95,0)
 ;         if SS, ssn is being passed
"RTN","IBCNEDE5",96,0)
 N SSN,IDS,IDB
"RTN","IBCNEDE5",97,0)
 S SS=$G(SS)
"RTN","IBCNEDE5",98,0)
 ; If a ssn is passed, strip dashes and spaces
"RTN","IBCNEDE5",99,0)
 I SS Q $TR(ID,"- ")
"RTN","IBCNEDE5",100,0)
 ; If not ssn format, do not strip
"RTN","IBCNEDE5",101,0)
 S IDB=$TR(ID," ")
"RTN","IBCNEDE5",102,0)
 I IDB'?3N1"-"2N1"-"4N,IDB'?9N Q ID
"RTN","IBCNEDE5",103,0)
 ; Compare w/SSN - if it matches, strip dashes and spaces
"RTN","IBCNEDE5",104,0)
 S IDS=$TR(ID,"- ")
"RTN","IBCNEDE5",105,0)
 S SSN=$TR($$GETSSN(DFN),"- ")
"RTN","IBCNEDE5",106,0)
 I SSN=IDS Q IDS
"RTN","IBCNEDE5",107,0)
 Q ID
"RTN","IBCNEDE5",108,0)
 ;
"RTN","IBCNEDE5",109,0)
SIDCHK2(DFN,PIEN,SIDARRAY,FRESHDT) ;Checks the flag settings of 
"RTN","IBCNEDE5",110,0)
 ; 'Identification Requires Subscriber ID' and 'Use SSN as Subscriber
"RTN","IBCNEDE5",111,0)
 ; ID'.  The function returns a "^" delimited string.  The first value 
"RTN","IBCNEDE5",112,0)
 ; is between 1 and 8 telling the calling program what action(s) it 
"RTN","IBCNEDE5",113,0)
 ; should perform.  The 2nd piece indicates the number of unique 
"RTN","IBCNEDE5",114,0)
 ; Subscriber IDs found for the patient/payer combo.  In addition, a
"RTN","IBCNEDE5",115,0)
 ; local array of Subcriber IDs are passed back by reference that the
"RTN","IBCNEDE5",116,0)
 ; calling program should use for setting the Subscriber IDs in IIV 
"RTN","IBCNEDE5",117,0)
 ; Transmission Queue file (#365.1).  The calling program is to address
"RTN","IBCNEDE5",118,0)
 ; the blank Sub IDs and make sure the data extract does not exceed the
"RTN","IBCNEDE5",119,0)
 ; max extract number.
"RTN","IBCNEDE5",120,0)
 ;
"RTN","IBCNEDE5",121,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",122,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",123,0)
 ; SIDARRAY - Local array passed by reference.  This function returns
"RTN","IBCNEDE5",124,0)
 ;            the array populated with the possible Subscriber IDs for
"RTN","IBCNEDE5",125,0)
 ;            that patient/payer combination.
"RTN","IBCNEDE5",126,0)
 ; FRESHDT - Freshness date used for checking last verified condition
"RTN","IBCNEDE5",127,0)
 ;
"RTN","IBCNEDE5",128,0)
 ; Logic to follow:
"RTN","IBCNEDE5",129,0)
 ;
"RTN","IBCNEDE5",130,0)
 ; Id. Req.| Use SSN  | Sub ID|Action|
"RTN","IBCNEDE5",131,0)
 ;  Sub ID | as Sub ID| found |  #   | Create
"RTN","IBCNEDE5",132,0)
 ; ________|__________|_______|______|________
"RTN","IBCNEDE5",133,0)
 ; YES       YES        YES     1     1 Identification TQ entry w/ SSN 
"RTN","IBCNEDE5",134,0)
 ;                                    as Sub ID, & 1 Iden. TQ entry for
"RTN","IBCNEDE5",135,0)
 ;                                    each unique old Sub ID
"RTN","IBCNEDE5",136,0)
 ; YES       YES        NO      2     1 Iden. TQ entry, use SSN as Sub ID
"RTN","IBCNEDE5",137,0)
 ; YES       NO         YES     3     1 Iden. TQ entry for each unique 
"RTN","IBCNEDE5",138,0)
 ;                                    old Sub ID
"RTN","IBCNEDE5",139,0)
 ; YES       NO         NO      4     No TQ entries (may flag as error)
"RTN","IBCNEDE5",140,0)
 ; NO        NO         YES     5     1 Iden. TQ entry w/ blank Sub ID, 
"RTN","IBCNEDE5",141,0)
 ;                                    & 1 Iden. TQ entry for each unique 
"RTN","IBCNEDE5",142,0)
 ;                                    old Sub ID
"RTN","IBCNEDE5",143,0)
 ; NO        NO         NO      6     1 Iden. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",144,0)
 ; NO        YES        YES     7     1 Iden. TQ entry w/ blank Sub ID,
"RTN","IBCNEDE5",145,0)
 ;                                    & 1 Iden. TQ entry w/ SSN as Sub 
"RTN","IBCNEDE5",146,0)
 ;                                    ID, & 1 Iden. TQ entry for each 
"RTN","IBCNEDE5",147,0)
 ;                                    unique old Sub ID
"RTN","IBCNEDE5",148,0)
 ; NO        YES        NO      8     2 Iden. TQ entries, 1 w/ SSN as Sub
"RTN","IBCNEDE5",149,0)
 ;                                    ID and other w/ blank Sub ID
"RTN","IBCNEDE5",150,0)
 ;
"RTN","IBCNEDE5",151,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN,SSN,INSSTR,INSSTR1,INREC
"RTN","IBCNEDE5",152,0)
 N SYMBOL,SUBID,SUBIDS,SIDCNT,MVER,VFLG
"RTN","IBCNEDE5",153,0)
 ;
"RTN","IBCNEDE5",154,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",155,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",156,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",157,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",158,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNEDE5",159,0)
 S INSSTR="",(SID,SIDCNT)=0,INREC=$O(^DPT(DFN,.312,0)) S:'INREC INREC=1
"RTN","IBCNEDE5",160,0)
 ;
"RTN","IBCNEDE5",161,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC!VFLG
"RTN","IBCNEDE5",162,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",163,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",164,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",165,0)
 . I $P(SYMBOL,U)="" D            ; no IIV related error w/ ins. company
"RTN","IBCNEDE5",166,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",167,0)
 .. S SUBID=$P(INSSTR,U,2)
"RTN","IBCNEDE5",168,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",169,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",170,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q    ; verified recently
"RTN","IBCNEDE5",171,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",172,0)
 .. I $D(SIDARRAY(SUBIDS_"_")) Q            ; already in the array
"RTN","IBCNEDE5",173,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SID=1,SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",174,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",175,0)
 ;
"RTN","IBCNEDE5",176,0)
 I VFLG K SIDARRAY S SIDCNT=0,SIDACT=4 G SIDCK2X
"RTN","IBCNEDE5",177,0)
 I SID,SIDREQ,SIDSSN S SIDACT=1 D SSN(DFN) G SIDCK2X
"RTN","IBCNEDE5",178,0)
 I 'SID,SIDREQ,SIDSSN S SIDACT=2 D SSN(DFN) G SIDCK2X
"RTN","IBCNEDE5",179,0)
 I SID,SIDREQ,'SIDSSN S SIDACT=3 G SIDCK2X
"RTN","IBCNEDE5",180,0)
 I 'SID,SIDREQ,'SIDSSN S SIDACT=4 G SIDCK2X
"RTN","IBCNEDE5",181,0)
 I SID,'SIDREQ,'SIDSSN S SIDACT=5 G SIDCK2X
"RTN","IBCNEDE5",182,0)
 I 'SID,'SIDREQ,'SIDSSN S SIDACT=6 G SIDCK2X
"RTN","IBCNEDE5",183,0)
 I SID,'SIDREQ,SIDSSN S SIDACT=7 D SSN(DFN) G SIDCK2X
"RTN","IBCNEDE5",184,0)
 I 'SID,'SIDREQ,SIDSSN S SIDACT=8 D SSN(DFN) G SIDCK2X
"RTN","IBCNEDE5",185,0)
 ;
"RTN","IBCNEDE5",186,0)
SIDCK2X ; EXIT POINT
"RTN","IBCNEDE5",187,0)
 ;
"RTN","IBCNEDE5",188,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",189,0)
 ;
"RTN","IBCNEDE6")
0^41^B27396831
"RTN","IBCNEDE6",1,0)
IBCNEDE6 ;DAOU/DAC - IIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDE6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE6",4,0)
 ;
"RTN","IBCNEDE6",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE6",6,0)
 ;
"RTN","IBCNEDE6",7,0)
INAC(IBCNCNT,MAXNUM,IBDDI,SRVICEDT,FDAYS,APPTFLG) ;Get Inactive Insurances
"RTN","IBCNEDE6",8,0)
 ; DAOU/BHS - 10/15/2002 - Replaced VRFDT w/ FDAYS (fresh days value)
"RTN","IBCNEDE6",9,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE6",10,0)
 ;
"RTN","IBCNEDE6",11,0)
 NEW IDATA,INCP,IEN,TQIEN,INS,INACT,DATA1,DATA2,FRESHDT
"RTN","IBCNEDE6",12,0)
 NEW PAYER,PAYERID,RESULT,FOUND,SIDARRAY,SIDACT,SIDCNT,SID,INREC
"RTN","IBCNEDE6",13,0)
 ;
"RTN","IBCNEDE6",14,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE6",15,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE6",16,0)
 ; extract was created.
"RTN","IBCNEDE6",17,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE6",18,0)
 ;
"RTN","IBCNEDE6",19,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE6",20,0)
 S IDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE6",21,0)
 S INACT=$P(IDATA,U,8)
"RTN","IBCNEDE6",22,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",23,0)
 ;
"RTN","IBCNEDE6",24,0)
 ;  If the search for inactive insurances is 'No', quit
"RTN","IBCNEDE6",25,0)
 I 'INACT G INACX
"RTN","IBCNEDE6",26,0)
 ;
"RTN","IBCNEDE6",27,0)
 S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:INCP=""  D  Q:IBCNCNT'<MAXNUM
"RTN","IBCNEDE6",28,0)
 . S IEN="" F  S IEN=$O(^DPT(DFN,.312,"B",INCP,IEN)) Q:IEN=""  D
"RTN","IBCNEDE6",29,0)
 .. S INS=$P(^DPT(DFN,.312,IEN,0),U)
"RTN","IBCNEDE6",30,0)
 .. ;
"RTN","IBCNEDE6",31,0)
 .. ;Check for Medicare/Medicaid
"RTN","IBCNEDE6",32,0)
 .. I $$EXCLUDE^IBCNEUT4($P($G(^DIC(36,INS,0)),U)) Q
"RTN","IBCNEDE6",33,0)
 .. ;
"RTN","IBCNEDE6",34,0)
 .. ;  Check for insurance company payer, etc.
"RTN","IBCNEDE6",35,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INS)
"RTN","IBCNEDE6",36,0)
 .. I $P(RESULT,U)'="" Q
"RTN","IBCNEDE6",37,0)
 .. ;
"RTN","IBCNEDE6",38,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3)
"RTN","IBCNEDE6",39,0)
 .. I ('PAYER)!(PAYERID="") Q
"RTN","IBCNEDE6",40,0)
 .. ;
"RTN","IBCNEDE6",41,0)
 .. S FOUND=1  ; potential inquiry
"RTN","IBCNEDE6",42,0)
 .. ;
"RTN","IBCNEDE6",43,0)
 .. ; Update service date based on payer's allowed range
"RTN","IBCNEDE6",44,0)
 .. D UPDDTS(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",45,0)
 .. ;  update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",46,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",47,0)
 .. ;  check for outstanding/current entries in File 356.1
"RTN","IBCNEDE6",48,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE6",49,0)
 .. ;
"RTN","IBCNEDE6",50,0)
 .. ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE6",51,0)
 .. ;
"RTN","IBCNEDE6",52,0)
 .. K SIDARRAY
"RTN","IBCNEDE6",53,0)
 .. S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE6",54,0)
 .. S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE6",55,0)
 .. ;  Add to SIDCNT to compensate for a TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",56,0)
 .. I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE6",57,0)
 .. I IBCNCNT+SIDCNT>MAXNUM S IBCNCNT=MAXNUM Q  ; see if TQ entries will exceed MAXNUM
"RTN","IBCNEDE6",58,0)
 .. S SID="" F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE6",59,0)
 ... S INREC=$P(SID,"_",2)   ; which patient ins rec ID is from
"RTN","IBCNEDE6",60,0)
 ... D INACSET($P(SID,"_"),INREC)
"RTN","IBCNEDE6",61,0)
 ... ; 
"RTN","IBCNEDE6",62,0)
 .. ;  Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",63,0)
 .. I (SIDACT=5)!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D INACSET("","")
"RTN","IBCNEDE6",64,0)
 K SIDARRAY
"RTN","IBCNEDE6",65,0)
INACX ;
"RTN","IBCNEDE6",66,0)
 Q FOUND
"RTN","IBCNEDE6",67,0)
 ;
"RTN","IBCNEDE6",68,0)
INACSET(SID,INREC) ; INAC. SET
"RTN","IBCNEDE6",69,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",70,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",71,0)
 N FRESH
"RTN","IBCNEDE6",72,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",73,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE6",74,0)
 ;
"RTN","IBCNEDE6",75,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE6",76,0)
 ; it is.
"RTN","IBCNEDE6",77,0)
 I APPTFLG S DATA2=2    ; appt extract IBCNEDE2
"RTN","IBCNEDE6",78,0)
 I 'APPTFLG S DATA2=4   ; no ins extract IBCNEDE4
"RTN","IBCNEDE6",79,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE6",80,0)
 ;
"RTN","IBCNEDE6",81,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE6",82,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",83,0)
 ;
"RTN","IBCNEDE6",84,0)
 Q
"RTN","IBCNEDE6",85,0)
 ;
"RTN","IBCNEDE6",86,0)
UPDDTS(PIEN,SVDT,FRDT) ;  Update service date and freshness date per payer
"RTN","IBCNEDE6",87,0)
 ; date parameters FUTURE SERVICE DAYS (365.121,.14) and PAST SERVICE
"RTN","IBCNEDE6",88,0)
 ; DAYS (365.121,.15)
"RTN","IBCNEDE6",89,0)
 ; Output:
"RTN","IBCNEDE6",90,0)
 ;  SVDT - passed by reference - updates service date
"RTN","IBCNEDE6",91,0)
 ;  FRDT - passed by reference - updates freshness date - except for 
"RTN","IBCNEDE6",92,0)
 ;         INAC where it is optional
"RTN","IBCNEDE6",93,0)
 N FDAYS,PDAYS,DIFF,AIEN,DATA,OSVDT,EDTFLG
"RTN","IBCNEDE6",94,0)
 ;
"RTN","IBCNEDE6",95,0)
 ; Init vars - save original service date to calc diff
"RTN","IBCNEDE6",96,0)
 S (FDAYS,PDAYS,EDTFLG)=0,OSVDT=SVDT
"RTN","IBCNEDE6",97,0)
 ; Determine Payer App IEN
"RTN","IBCNEDE6",98,0)
 S AIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE6",99,0)
 I AIEN="" Q  ; Quit without changing if app is not defined
"RTN","IBCNEDE6",100,0)
 S DATA=$G(^IBE(365.12,PIEN,1,AIEN,0))
"RTN","IBCNEDE6",101,0)
 I DATA="" Q  ; Quit without changing if node is not defined
"RTN","IBCNEDE6",102,0)
 S FDAYS=$P(DATA,U,14),PDAYS=$P(DATA,U,15)
"RTN","IBCNEDE6",103,0)
 ; DAOU/WCW - Overriding this to allow service date of only today
"RTN","IBCNEDE6",104,0)
 ;            for the time being - setting params to 0
"RTN","IBCNEDE6",105,0)
 S FDAYS=0,PDAYS=0
"RTN","IBCNEDE6",106,0)
 ; Process past service days if not null
"RTN","IBCNEDE6",107,0)
 I PDAYS'="" D
"RTN","IBCNEDE6",108,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",109,0)
 . I PDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",110,0)
 . ; If non-zero and service date is earlier than the allowed
"RTN","IBCNEDE6",111,0)
 . ;  payer service date range, reset service date to earliest allowed
"RTN","IBCNEDE6",112,0)
 . ;  date for the payer
"RTN","IBCNEDE6",113,0)
 . I PDAYS,SVDT<$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1) D
"RTN","IBCNEDE6",114,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1),EDTFLG=1
"RTN","IBCNEDE6",115,0)
 ; Process future service days if not edited and if not null
"RTN","IBCNEDE6",116,0)
 I EDTFLG=0,FDAYS'="" D
"RTN","IBCNEDE6",117,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",118,0)
 . I FDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",119,0)
 . ; If non-zero and service date is later than the allowed
"RTN","IBCNEDE6",120,0)
 . ;  payer service date range, reset service date to latest allowed
"RTN","IBCNEDE6",121,0)
 . ;  date for the payer
"RTN","IBCNEDE6",122,0)
 . I FDAYS,SVDT>$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1) D
"RTN","IBCNEDE6",123,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1),EDTFLG=1
"RTN","IBCNEDE6",124,0)
 ;
"RTN","IBCNEDE6",125,0)
 ; Determine if difference exists
"RTN","IBCNEDE6",126,0)
 I EDTFLG,$G(FRDT)'="" S FRDT=$$FMADD^XLFDT(FRDT,$$FMDIFF^XLFDT(SVDT,OSVDT))
"RTN","IBCNEDE6",127,0)
 ;
"RTN","IBCNEDE6",128,0)
 Q
"RTN","IBCNEDE6",129,0)
 ;
"RTN","IBCNEDE6",130,0)
BLANKTQ(SRVICEDT,FRESHDT,YDAYS,IBCNCNT) ; 
"RTN","IBCNEDE6",131,0)
 ; This tag is only called from PROCESS^IBCNEDE4 
"RTN","IBCNEDE6",132,0)
 ; No new records were created in file 365.1 for this DFN.
"RTN","IBCNEDE6",133,0)
 ; Need to check if an inquiry for any payer exists for this DFN within
"RTN","IBCNEDE6",134,0)
 ; the freshness period.  If it doesn't exist create a new blank inquiry
"RTN","IBCNEDE6",135,0)
 ;
"RTN","IBCNEDE6",136,0)
 ; Input
"RTN","IBCNEDE6",137,0)
 ;    SRVICEDT - Service Date
"RTN","IBCNEDE6",138,0)
 ;    FRESHDT - Freshness Date
"RTN","IBCNEDE6",139,0)
 ;    YDAYS - 
"RTN","IBCNEDE6",140,0)
 ;    IBCNCNT - updated - Counter for the extract
"RTN","IBCNEDE6",141,0)
 ;
"RTN","IBCNEDE6",142,0)
 N PAYER,DATA1,DATA2,TQIEN
"RTN","IBCNEDE6",143,0)
 ;
"RTN","IBCNEDE6",144,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEDE6",145,0)
 ;
"RTN","IBCNEDE6",146,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE6",147,0)
 ;  date range
"RTN","IBCNEDE6",148,0)
 D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",149,0)
 ;
"RTN","IBCNEDE6",150,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",151,0)
 D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",152,0)
 ;
"RTN","IBCNEDE6",153,0)
 ; Are we allowed to add it to the TQ file
"RTN","IBCNEDE6",154,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS,1) G BLANKXT
"RTN","IBCNEDE6",155,0)
 ;
"RTN","IBCNEDE6",156,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",157,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",158,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEDE6",159,0)
 ;
"RTN","IBCNEDE6",160,0)
 ; The hardcoded '4' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE6",161,0)
 ; the file 365.1 that it is the no active insurance extract.
"RTN","IBCNEDE6",162,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEDE6",163,0)
 ;
"RTN","IBCNEDE6",164,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2),PAYER=""
"RTN","IBCNEDE6",165,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",166,0)
 ;
"RTN","IBCNEDE6",167,0)
BLANKXT ;
"RTN","IBCNEDE6",168,0)
 Q
"RTN","IBCNEDE6",169,0)
 ;
"RTN","IBCNEDE6",170,0)
 ;
"RTN","IBCNEDE7")
0^43^B21406402
"RTN","IBCNEDE7",1,0)
IBCNEDE7 ;DAOU/DAC - IIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE7",2,0)
 ;;2.0;INTEGRATED BILLING;**271**;21-MAR-94
"RTN","IBCNEDE7",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE7",4,0)
 ;
"RTN","IBCNEDE7",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE7",6,0)
 ; 
"RTN","IBCNEDE7",7,0)
SETTINGS(EXTNUM) ; Check site parameter settings for the extracts
"RTN","IBCNEDE7",8,0)
 ; Input Parameter:
"RTN","IBCNEDE7",9,0)
 ;
"RTN","IBCNEDE7",10,0)
 ; EXTNUM is either 1, 2, 3, 4 to represent the different extracts
"RTN","IBCNEDE7",11,0)
 ; 1 - Insurance Buffer extract
"RTN","IBCNEDE7",12,0)
 ; 2 - Pre-Reg (appointments)
"RTN","IBCNEDE7",13,0)
 ; 3 - Non Verified
"RTN","IBCNEDE7",14,0)
 ; 4 - No Ins. / No Active
"RTN","IBCNEDE7",15,0)
 ;
"RTN","IBCNEDE7",16,0)
 ; Output:
"RTN","IBCNEDE7",17,0)
 ; Returns a "^" delimited string passing back:
"RTN","IBCNEDE7",18,0)
 ;    A flag of whether to consider the extract active
"RTN","IBCNEDE7",19,0)
 ;    Number of days to look back in the past when extracting data
"RTN","IBCNEDE7",20,0)
 ;    STALEDYS - "stale days": number of days from today to determine the
"RTN","IBCNEDE7",21,0)
 ;          freshness this is only used for the non-verified and no 
"RTN","IBCNEDE7",22,0)
 ;          insurance extract.  The other two extracts pull their days
"RTN","IBCNEDE7",23,0)
 ;          from the IB SITE PARAMETER file within their specific 
"RTN","IBCNEDE7",24,0)
 ;          extract routine.
"RTN","IBCNEDE7",25,0)
 ;    Max Number of entries you are allowed to set into the IIV 
"RTN","IBCNEDE7",26,0)
 ;          Transmission Queue file.  If null, # of entries allowed is
"RTN","IBCNEDE7",27,0)
 ;          unlimited.
"RTN","IBCNEDE7",28,0)
 ;    Suppress Buffer Flag - Either '0' (No) or '1' (Yes)
"RTN","IBCNEDE7",29,0)
 ;          1 will suppress the creation of buffer entries
"RTN","IBCNEDE7",30,0)
 ;          0 will not
"RTN","IBCNEDE7",31,0)
 ;          Applies to extracts 2 (Pre Reg) and 3 (Non verified)
"RTN","IBCNEDE7",32,0)
 ;
"RTN","IBCNEDE7",33,0)
 N DIC,DISYS,DA,X,Y,EACTIVE,XDAYS,STALEDYS,MAXCNT,OK,SUPPBUFF
"RTN","IBCNEDE7",34,0)
 S EACTIVE=0,(XDAYS,STALEDYS,MAXCNT)=""
"RTN","IBCNEDE7",35,0)
 S OK=$S(EXTNUM=1:1,EXTNUM=2:1,EXTNUM=3:1,EXTNUM=4:1,1:0)
"RTN","IBCNEDE7",36,0)
 I 'OK G EXIT
"RTN","IBCNEDE7",37,0)
 S DA=1,DIC="^IBE(350.9,"_DA_",51.17,",DIC(0)="X",X=EXTNUM D ^DIC
"RTN","IBCNEDE7",38,0)
 ;
"RTN","IBCNEDE7",39,0)
 I Y<1 G EXIT  ; extract not defined in the IB Site Parameter
"RTN","IBCNEDE7",40,0)
 ;
"RTN","IBCNEDE7",41,0)
 S EACTIVE=$G(^IBE(350.9,1,51.17,+Y,0))
"RTN","IBCNEDE7",42,0)
 S XDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE7",43,0)
 S STALEDYS=$P(EACTIVE,U,4)
"RTN","IBCNEDE7",44,0)
 S MAXCNT=$P(EACTIVE,U,5)
"RTN","IBCNEDE7",45,0)
 S SUPPBUFF=$P(EACTIVE,U,6)
"RTN","IBCNEDE7",46,0)
 I SUPPBUFF="" S SUPPBUFF=0
"RTN","IBCNEDE7",47,0)
 S EACTIVE=$P(EACTIVE,U,2)
"RTN","IBCNEDE7",48,0)
EXIT ;
"RTN","IBCNEDE7",49,0)
 I EXTNUM=2,(XDAYS="") S EACTIVE=0  ; missing required data
"RTN","IBCNEDE7",50,0)
 I EXTNUM=3!(EXTNUM=4) D
"RTN","IBCNEDE7",51,0)
 . I XDAYS=""!(STALEDYS="") S EACTIVE=0   ; missing required data
"RTN","IBCNEDE7",52,0)
 Q EACTIVE_U_XDAYS_U_STALEDYS_U_MAXCNT_U_SUPPBUFF
"RTN","IBCNEDE7",53,0)
 ;
"RTN","IBCNEDE7",54,0)
SETTQ(DATA1,DATA2,ORIG,OVERRIDE) ;Set extract data in TQ file 365.1
"RTN","IBCNEDE7",55,0)
 ;
"RTN","IBCNEDE7",56,0)
 ; DATA1, DATA2, & ORIG are "^" delimited variables containing the data
"RTN","IBCNEDE7",57,0)
 ; listed below
"RTN","IBCNEDE7",58,0)
 ;
"RTN","IBCNEDE7",59,0)
 ; OVERRIDE - flag indicates that this entry is a result of the 
"RTN","IBCNEDE7",60,0)
 ;         'Request Re-Verification' menu option.
"RTN","IBCNEDE7",61,0)
 ;
"RTN","IBCNEDE7",62,0)
 N FDA,IENARRAY,ERROR,TRANSNO,DFN
"RTN","IBCNEDE7",63,0)
 ;
"RTN","IBCNEDE7",64,0)
 S TRANSNO=$P($G(^IBCN(365.1,0)),U,3)+1
"RTN","IBCNEDE7",65,0)
 S FDA(365.1,"+1,",.01)=TRANSNO             ; Transaction #
"RTN","IBCNEDE7",66,0)
 ;
"RTN","IBCNEDE7",67,0)
 S DFN=$P(DATA1,U)
"RTN","IBCNEDE7",68,0)
 S FDA(365.1,"+1,",.02)=DFN                 ; patient DFN
"RTN","IBCNEDE7",69,0)
 S FDA(365.1,"+1,",.03)=$P(DATA1,U,2)       ; ien of payer
"RTN","IBCNEDE7",70,0)
 S FDA(365.1,"+1,",.04)=$P(DATA1,U,3)       ; ien of transmission status
"RTN","IBCNEDE7",71,0)
 S FDA(365.1,"+1,",.15)=DT                  ; trans status date
"RTN","IBCNEDE7",72,0)
 S FDA(365.1,"+1,",.05)=$P(DATA1,U,4)       ; ien of buffer
"RTN","IBCNEDE7",73,0)
 ;
"RTN","IBCNEDE7",74,0)
 S FDA(365.1,"+1,",.06)=$$NOW^XLFDT         ; creation date/time
"RTN","IBCNEDE7",75,0)
 S FDA(365.1,"+1,",.07)=0                   ; transmission retries
"RTN","IBCNEDE7",76,0)
 S FDA(365.1,"+1,",.08)=0                   ; number of retries
"RTN","IBCNEDE7",77,0)
 I $D(OVERRIDE) S FDA(365.1,"+1,",.14)=OVERRIDE  ; override flag
"RTN","IBCNEDE7",78,0)
 S FDA(365.1,"+1,",.16)=$P(DATA1,U,5)        ; Sub. ID
"RTN","IBCNEDE7",79,0)
 S FDA(365.1,"+1,",.17)=$P(DATA1,U,6)        ; Freshness Date
"RTN","IBCNEDE7",80,0)
 S FDA(365.1,"+1,",.18)=$P(DATA1,U,7)        ; Pass Buffer ien?
"RTN","IBCNEDE7",81,0)
 ;
"RTN","IBCNEDE7",82,0)
 I $D(DATA2) D
"RTN","IBCNEDE7",83,0)
 . S FDA(365.1,"+1,",.1)=$P(DATA2,U)          ; which extract (ien)
"RTN","IBCNEDE7",84,0)
 . S FDA(365.1,"+1,",.11)=$P(DATA2,U,2)       ; query flag
"RTN","IBCNEDE7",85,0)
 . S FDA(365.1,"+1,",.12)=$P(DATA2,U,3)       ; service date
"RTN","IBCNEDE7",86,0)
 . S FDA(365.1,"+1,",.13)=$P(DATA2,U,4)       ; patient insur. ien
"RTN","IBCNEDE7",87,0)
 ;
"RTN","IBCNEDE7",88,0)
 I $D(ORIG) D
"RTN","IBCNEDE7",89,0)
 . S FDA(365.1,"+1,",1.02)=$P(ORIG,U)   ; original ins co (in buffer)
"RTN","IBCNEDE7",90,0)
 . S FDA(365.1,"+1,",1.03)=$P(ORIG,U,2)   ; original grp # (in buffer)
"RTN","IBCNEDE7",91,0)
 . S FDA(365.1,"+1,",1.04)=$P(ORIG,U,3)   ; original grp name (in buffer)
"RTN","IBCNEDE7",92,0)
 . S FDA(365.1,"+1,",1.05)=$P(ORIG,U,4)   ; original subscriber ID
"RTN","IBCNEDE7",93,0)
 ;
"RTN","IBCNEDE7",94,0)
 D UPDATE^DIE("","FDA","IENARRAY","ERROR")
"RTN","IBCNEDE7",95,0)
 ;
"RTN","IBCNEDE7",96,0)
 I $D(ERROR) D  ; MailMan msg
"RTN","IBCNEDE7",97,0)
 . NEW MGRP,XMSUB,MSG
"RTN","IBCNEDE7",98,0)
 . KILL MSG
"RTN","IBCNEDE7",99,0)
 . ;
"RTN","IBCNEDE7",100,0)
 . ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE7",101,0)
 . S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE7",102,0)
 . ;
"RTN","IBCNEDE7",103,0)
 . S XMSUB="IIV Problem: Trouble setting entry in File 365.1"
"RTN","IBCNEDE7",104,0)
 . S MSG(1)="Tried to create an entry in the IIV Transmission Queue File #365.1 without"
"RTN","IBCNEDE7",105,0)
 . S MSG(2)="success."
"RTN","IBCNEDE7",106,0)
 . S MSG(3)=""
"RTN","IBCNEDE7",107,0)
 . S MSG(4)="Error encountered: "_ERROR("DIERR",1,"TEXT",1)
"RTN","IBCNEDE7",108,0)
 . S MSG(5)=""
"RTN","IBCNEDE7",109,0)
 . S MSG(6)="The data that was to be stored is as follows:"
"RTN","IBCNEDE7",110,0)
 . S MSG(7)=""
"RTN","IBCNEDE7",111,0)
 . S MSG(8)="Transaction #: "_TRANSNO
"RTN","IBCNEDE7",112,0)
 . S MSG(9)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNEDE7",113,0)
 . S MSG(10)="Extract: "_$G(FDA(365.1,"+1,",.1))
"RTN","IBCNEDE7",114,0)
 . S MSG(11)="Payer: "_$P($G(^IBE(365.12,FDA(365.1,"+1,",.03),0)),U,1)
"RTN","IBCNEDE7",115,0)
 . S MSG(12)="Please log a NOIS for this problem."
"RTN","IBCNEDE7",116,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE7",117,0)
 ;
"RTN","IBCNEDE7",118,0)
 Q $G(IENARRAY(1))
"RTN","IBCNEDE7",119,0)
 ;
"RTN","IBCNEDEP")
0^28^B94875041
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;17-JUN-2002
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDEP",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;  This program finds records needing HL7 msg creation
"RTN","IBCNEDEP",6,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",7,0)
 ;
"RTN","IBCNEDEP",8,0)
 ;  Variables
"RTN","IBCNEDEP",9,0)
 ;    RETR = # retries allowed
"RTN","IBCNEDEP",10,0)
 ;    HLMAX = Maximum # of HL7 msgs
"RTN","IBCNEDEP",11,0)
 ;    MGRP = Msg Mailgroup
"RTN","IBCNEDEP",12,0)
 ;    FAIL = # of days before failure
"RTN","IBCNEDEP",13,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",14,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",15,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",16,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",17,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",18,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",19,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",20,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",21,0)
 ;    NRETR = # of retries accomplished
"RTN","IBCNEDEP",22,0)
 ;    IHCNT = Count of successful HL7 msgs
"RTN","IBCNEDEP",23,0)
 ;    QUERY = Type of msg
"RTN","IBCNEDEP",24,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",25,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",26,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",27,0)
 ;    NTRAN = # of transmissions accomplished
"RTN","IBCNEDEP",28,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",29,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",30,0)
 ;
"RTN","IBCNEDEP",31,0)
EN ;  Entry point
"RTN","IBCNEDEP",32,0)
 ;
"RTN","IBCNEDEP",33,0)
 ;  Start processing of data
"RTN","IBCNEDEP",34,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",35,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",36,0)
 S IBCNETOT=0
"RTN","IBCNEDEP",37,0)
 ;
"RTN","IBCNEDEP",38,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",39,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",40,0)
 S RETR=+$P(IBCNEP,U,6),HLMAX=$P(IBCNEP,U,15),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",41,0)
 S:HLMAX="" HLMAX=99999999
"RTN","IBCNEDEP",42,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",43,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",44,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",45,0)
 ; Statuses
"RTN","IBCNEDEP",46,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",47,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",48,0)
 ;   4 = Hold
"RTN","IBCNEDEP",49,0)
 ;   6 = Retry
"RTN","IBCNEDEP",50,0)
 ;
"RTN","IBCNEDEP",51,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",52,0)
 S IEN=""
"RTN","IBCNEDEP",53,0)
 F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",54,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",55,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",56,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",57,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",58,0)
 . ;
"RTN","IBCNEDEP",59,0)
 . S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",60,0)
 . ;
"RTN","IBCNEDEP",61,0)
 . ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",62,0)
 . ;  clear future transmission date
"RTN","IBCNEDEP",63,0)
 . I FUTDT'>DT D SST^IBCNEUT2(IEN,6) D
"RTN","IBCNEDEP",64,0)
 .. NEW DA,DIE,DR
"RTN","IBCNEDEP",65,0)
 .. S DA=IEN,DIE="^IBCN(365.1,",DR=".09////@" D ^DIE
"RTN","IBCNEDEP",66,0)
 ;
"RTN","IBCNEDEP",67,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",68,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",69,0)
 ;
"RTN","IBCNEDEP",70,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",71,0)
 ;  'Comm Failure'
"RTN","IBCNEDEP",72,0)
 S IEN=""
"RTN","IBCNEDEP",73,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",74,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",75,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",76,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",77,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",78,0)
 . ;
"RTN","IBCNEDEP",79,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB,VERID
"RTN","IBCNEDEP",80,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",81,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",82,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",83,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",84,0)
 . ;
"RTN","IBCNEDEP",85,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",86,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",87,0)
 . ;
"RTN","IBCNEDEP",88,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",89,0)
 . I RETR>0 D  Q
"RTN","IBCNEDEP",90,0)
 .. ;
"RTN","IBCNEDEP",91,0)
 .. ;  Send timeout mail msg
"RTN","IBCNEDEP",92,0)
 .. I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D TMRR^IBCNEDEQ
"RTN","IBCNEDEP",93,0)
 .. D SST^IBCNEUT2(IEN,6)
"RTN","IBCNEDEP",94,0)
 . ;
"RTN","IBCNEDEP",95,0)
 . ; If no retries defined, set to fail
"RTN","IBCNEDEP",96,0)
 . D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",97,0)
 . ;
"RTN","IBCNEDEP",98,0)
 . ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",99,0)
 . ; 'Comm Failure'
"RTN","IBCNEDEP",100,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",101,0)
 . ;
"RTN","IBCNEDEP",102,0)
 . ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",103,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",104,0)
 . ;
"RTN","IBCNEDEP",105,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",106,0)
 . ;
"RTN","IBCNEDEP",107,0)
 . ; Issue comm fail MailMan msg only for ver'ns
"RTN","IBCNEDEP",108,0)
 . I VERID="V" D CERR^IBCNEDEQ
"RTN","IBCNEDEP",109,0)
 ;
"RTN","IBCNEDEP",110,0)
 ; Exit for stop request
"RTN","IBCNEDEP",111,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",112,0)
 ;
"RTN","IBCNEDEP",113,0)
RET ;  If status is 'Retry'
"RTN","IBCNEDEP",114,0)
 S IEN=""
"RTN","IBCNEDEP",115,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",116,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",117,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",118,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",119,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",120,0)
 . ;
"RTN","IBCNEDEP",121,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB,VERID
"RTN","IBCNEDEP",122,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",123,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",124,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",125,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",126,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",127,0)
 . ;
"RTN","IBCNEDEP",128,0)
 . ;  If retries are finished, set to fail
"RTN","IBCNEDEP",129,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",130,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",131,0)
 .. ;
"RTN","IBCNEDEP",132,0)
 .. ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",133,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",134,0)
 .. ;
"RTN","IBCNEDEP",135,0)
 .. ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",136,0)
 .. ; 'Comm Failure'
"RTN","IBCNEDEP",137,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",138,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",139,0)
 .. ;
"RTN","IBCNEDEP",140,0)
 .. I VERID="V" D CERE^IBCNEDEQ
"RTN","IBCNEDEP",141,0)
 . ; If generating retry, set IIV status to comm failure (5) for
"RTN","IBCNEDEP",142,0)
 . ; remaining related responses
"RTN","IBCNEDEP",143,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",144,0)
 ;
"RTN","IBCNEDEP",145,0)
 ; Exit for stop request
"RTN","IBCNEDEP",146,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",147,0)
 ;
"RTN","IBCNEDEP",148,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",149,0)
 ;
"RTN","IBCNEDEP",150,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",151,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",152,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",153,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",154,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",155,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",156,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",157,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",158,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",159,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",160,0)
 ... S VNUM=4
"RTN","IBCNEDEP",161,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",162,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",163,0)
 ... S VNUM=1
"RTN","IBCNEDEP",164,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",165,0)
 ;
"RTN","IBCNEDEP",166,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",167,0)
 ;  or identifications
"RTN","IBCNEDEP",168,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",169,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)!$G(QFL)=1
"RTN","IBCNEDEP",170,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",171,0)
 . D ID
"RTN","IBCNEDEP",172,0)
 ;
"RTN","IBCNEDEP",173,0)
EXIT ;  Finish
"RTN","IBCNEDEP",174,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",175,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",176,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",177,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",178,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",179,0)
 K ZMID,IHCNT,HLMAX,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",180,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA
"RTN","IBCNEDEP",181,0)
 Q
"RTN","IBCNEDEP",182,0)
 ;
"RTN","IBCNEDEP",183,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",184,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",185,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",186,0)
 ;
"RTN","IBCNEDEP",187,0)
 S DFN=""
"RTN","IBCNEDEP",188,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)
"RTN","IBCNEDEP",189,0)
 . ;
"RTN","IBCNEDEP",190,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",191,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",192,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",193,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",194,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",195,0)
 .. ;
"RTN","IBCNEDEP",196,0)
 .. ;  If the total # of "bundled" verifications is
"RTN","IBCNEDEP",197,0)
 .. ;  greater than the maximum # of HL7 allowed, quit
"RTN","IBCNEDEP",198,0)
 .. I (TOT+IHCNT)>HLMAX S QFL=1 Q
"RTN","IBCNEDEP",199,0)
 . ;
"RTN","IBCNEDEP",200,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",201,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)
"RTN","IBCNEDEP",202,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",203,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",204,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",205,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",206,0)
 .. ;
"RTN","IBCNEDEP",207,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",208,0)
 .. ;
"RTN","IBCNEDEP",209,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",210,0)
 .. D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",211,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",212,0)
 .. ;
"RTN","IBCNEDEP",213,0)
 .. ;  If not successful
"RTN","IBCNEDEP",214,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",215,0)
 .. ;  If successful
"RTN","IBCNEDEP",216,0)
 .. D SCC
"RTN","IBCNEDEP",217,0)
 .. I BNDL D
"RTN","IBCNEDEP",218,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",219,0)
 ;
"RTN","IBCNEDEP",220,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",221,0)
 ;
"RTN","IBCNEDEP",222,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",223,0)
 I $G(ZTSTOP) Q
"RTN","IBCNEDEP",224,0)
 ;
"RTN","IBCNEDEP",225,0)
 ;  If the # of HL7 msgs generate equals the
"RTN","IBCNEDEP",226,0)
 ;  maximum # of HL7 msgs allowed, quit
"RTN","IBCNEDEP",227,0)
 I IHCNT=HLMAX Q
"RTN","IBCNEDEP",228,0)
 ;
"RTN","IBCNEDEP",229,0)
 Q
"RTN","IBCNEDEP",230,0)
 ;
"RTN","IBCNEDEP",231,0)
ID ;  Send Identification Msgs
"RTN","IBCNEDEP",232,0)
 ;
"RTN","IBCNEDEP",233,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",234,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",235,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",236,0)
 ;
"RTN","IBCNEDEP",237,0)
 S DFN=""
"RTN","IBCNEDEP",238,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",239,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",240,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",241,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",242,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",243,0)
 . ;
"RTN","IBCNEDEP",244,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",245,0)
 . ;
"RTN","IBCNEDEP",246,0)
 . ;  Get the total # of identification msgs for a patient
"RTN","IBCNEDEP",247,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",248,0)
 . ;
"RTN","IBCNEDEP",249,0)
 . ;  If the total # of identification msgs for this
"RTN","IBCNEDEP",250,0)
 . ;  patient is greater than the maximum # of allowed
"RTN","IBCNEDEP",251,0)
 . ;  HL7 msgs, stop processing until the next night
"RTN","IBCNEDEP",252,0)
 . I (TOT+IHCNT)>HLMAX S QFL=1 Q
"RTN","IBCNEDEP",253,0)
 . ;
"RTN","IBCNEDEP",254,0)
 . ;  For each identification transaction generate an HL7 msg
"RTN","IBCNEDEP",255,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:IHCNT=HLMAX
"RTN","IBCNEDEP",256,0)
 .. D PROC
"RTN","IBCNEDEP",257,0)
 .. ;
"RTN","IBCNEDEP",258,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",259,0)
 .. D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",260,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",261,0)
 .. ;
"RTN","IBCNEDEP",262,0)
 .. ;  If not successful
"RTN","IBCNEDEP",263,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",264,0)
 .. ;
"RTN","IBCNEDEP",265,0)
 .. ;  If successful
"RTN","IBCNEDEP",266,0)
 .. D SCC
"RTN","IBCNEDEP",267,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",268,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",269,0)
 ;
"RTN","IBCNEDEP",270,0)
 Q
"RTN","IBCNEDEP",271,0)
 ;
"RTN","IBCNEDEP",272,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",273,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",274,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",275,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",276,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",277,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",278,0)
 S FRDT=$P(TRANSR,U,17)
"RTN","IBCNEDEP",279,0)
 ;
"RTN","IBCNEDEP",280,0)
 ;  Build the HL7 msg
"RTN","IBCNEDEP",281,0)
 D PID^IBCNEHLQ I PID="" Q
"RTN","IBCNEDEP",282,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=PID
"RTN","IBCNEDEP",283,0)
 D GT1^IBCNEHLQ I GT1'="" S HCT=HCT+1,^TMP("HLS",$J,HCT)=GT1
"RTN","IBCNEDEP",284,0)
 D IN1^IBCNEHLQ I IN1'="" D
"RTN","IBCNEDEP",285,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",286,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=IN1 Q
"RTN","IBCNEDEP",287,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=IN1 Q
"RTN","IBCNEDEP",288,0)
 . S CNT=CNT+1
"RTN","IBCNEDEP",289,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",290,0)
 . S ^TMP("HLS",$J,HCT)=IN1
"RTN","IBCNEDEP",291,0)
 Q
"RTN","IBCNEDEP",292,0)
 ;
"RTN","IBCNEDEP",293,0)
SCC ;  If successfully creates an HL7 msg
"RTN","IBCNEDEP",294,0)
 S MSGID=$P(HLRESLT,U,1),NTRAN=NTRAN+1,MDTM=$$NOW^XLFDT(),IHCNT=IHCNT+1
"RTN","IBCNEDEP",295,0)
 I NTRAN>1 S NRETR=NRETR+1
"RTN","IBCNEDEP",296,0)
 D SST^IBCNEUT2(IEN,2)
"RTN","IBCNEDEP",297,0)
 S DA=IEN,DIE="^IBCN(365.1,",DR=".07////^S X=NTRAN;.08////^S X=NRETR"
"RTN","IBCNEDEP",298,0)
 D ^DIE
"RTN","IBCNEDEP",299,0)
 ;
"RTN","IBCNEDEP",300,0)
 ;  Create Response Record
"RTN","IBCNEDEP",301,0)
 S RSTYPE="O"
"RTN","IBCNEDEP",302,0)
 D RESP^IBCNEDEQ
"RTN","IBCNEDEP",303,0)
 ;
"RTN","IBCNEDEP",304,0)
 ;  Create HL7 subrecord
"RTN","IBCNEDEP",305,0)
 D SUB^IBCNEDEQ
"RTN","IBCNEDEP",306,0)
 ;
"RTN","IBCNEDEP",307,0)
 ; If a buffer entry exists, set the buffer symbol to a '?'
"RTN","IBCNEDEP",308,0)
 I BUFF'="" D BUFF^IBCNEUT2(BUFF,10)
"RTN","IBCNEDEP",309,0)
 Q
"RTN","IBCNEDEQ")
0^18^B23685960
"RTN","IBCNEDEQ",1,0)
IBCNEDEQ ;DAOU/ALA - Process Transactions continued ;21-AUG-2002
"RTN","IBCNEDEQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEDEQ",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDEQ",4,0)
 ;
"RTN","IBCNEDEQ",5,0)
 ;**Program Description**
"RTN","IBCNEDEQ",6,0)
 ;  This program contains some subroutines for processing a transmission
"RTN","IBCNEDEQ",7,0)
 ;
"RTN","IBCNEDEQ",8,0)
HLER ;  HL7 Creation error message
"RTN","IBCNEDEQ",9,0)
 ;
"RTN","IBCNEDEQ",10,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",11,0)
 ;
"RTN","IBCNEDEQ",12,0)
 ;  Parameters
"RTN","IBCNEDEQ",13,0)
 ;    HLRESLT = Error from GENERATE^HLMA call
"RTN","IBCNEDEQ",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",15,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",16,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",17,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",18,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",19,0)
 ;
"RTN","IBCNEDEQ",20,0)
 S HLRESLT="Error - "_$P(HLRESLT,U,2,99)
"RTN","IBCNEDEQ",21,0)
 S MSG(1)=HLRESLT
"RTN","IBCNEDEQ",22,0)
 S MSG(2)="occurred when trying to create the outgoing HL7 message for"
"RTN","IBCNEDEQ",23,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)_"."
"RTN","IBCNEDEQ",24,0)
 S MSG(4)="Please log a NOIS for this problem."
"RTN","IBCNEDEQ",25,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",26,0)
 S XMSUB="IIV HL7 Creation Error"
"RTN","IBCNEDEQ",27,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",28,0)
 K XMSUB,MSG,HLRESLT
"RTN","IBCNEDEQ",29,0)
 Q
"RTN","IBCNEDEQ",30,0)
 ;
"RTN","IBCNEDEQ",31,0)
CERR ;  Communication Error Mail Message - No Retries defined
"RTN","IBCNEDEQ",32,0)
 ;
"RTN","IBCNEDEQ",33,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",34,0)
 ;
"RTN","IBCNEDEQ",35,0)
 ;  Parameters
"RTN","IBCNEDEQ",36,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",37,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",38,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",39,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",40,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",41,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",42,0)
 ;
"RTN","IBCNEDEQ",43,0)
 I 'FMSG G CERRQ
"RTN","IBCNEDEQ",44,0)
 S XMSUB="IIV Communication Error"
"RTN","IBCNEDEQ",45,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",46,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",47,0)
 S MSG(3)="A single attempt was made to electronically confirm the insurance"
"RTN","IBCNEDEQ",48,0)
 S MSG(4)="with this payer."
"RTN","IBCNEDEQ",49,0)
 ;
"RTN","IBCNEDEQ",50,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",51,0)
 ;
"RTN","IBCNEDEQ",52,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",53,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",54,0)
CERRQ Q
"RTN","IBCNEDEQ",55,0)
 ;
"RTN","IBCNEDEQ",56,0)
CERE ;  Communication Error Mail Message - Exceeds Retries
"RTN","IBCNEDEQ",57,0)
 ;
"RTN","IBCNEDEQ",58,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",59,0)
 ;
"RTN","IBCNEDEQ",60,0)
 ;  Parameters
"RTN","IBCNEDEQ",61,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",62,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",63,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",64,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",65,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",66,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",67,0)
 ;
"RTN","IBCNEDEQ",68,0)
 I 'FMSG G CEREQ
"RTN","IBCNEDEQ",69,0)
 S XMSUB="IIV Communication Error"
"RTN","IBCNEDEQ",70,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",71,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",72,0)
 ;
"RTN","IBCNEDEQ",73,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",74,0)
 ;
"RTN","IBCNEDEQ",75,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",76,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",77,0)
CEREQ Q
"RTN","IBCNEDEQ",78,0)
 ;
"RTN","IBCNEDEQ",79,0)
SUB ;  Create HL7 subrecord in TQ file
"RTN","IBCNEDEQ",80,0)
 ;
"RTN","IBCNEDEQ",81,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",82,0)
 ;
"RTN","IBCNEDEQ",83,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",84,0)
 ;    IEN = the transmission IEN
"RTN","IBCNEDEQ",85,0)
 ;    RSIEN = the response IEN
"RTN","IBCNEDEQ",86,0)
 ;    MDTM = the date/time message was created
"RTN","IBCNEDEQ",87,0)
 ;    MSGID = the HL7 message ID
"RTN","IBCNEDEQ",88,0)
 ;
"RTN","IBCNEDEQ",89,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y
"RTN","IBCNEDEQ",90,0)
 S DIC="^IBCN(365.1,"_IEN_",2,",DIE=DIC,X=MDTM,DA(1)=IEN
"RTN","IBCNEDEQ",91,0)
 S DLAYGO=365.16,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",92,0)
 I '$D(^IBCN(365.1,IEN,2,0)) S ^IBCN(365.1,IEN,2,0)="^365.16D^^"
"RTN","IBCNEDEQ",93,0)
 K DD,DO
"RTN","IBCNEDEQ",94,0)
 D FILE^DICN
"RTN","IBCNEDEQ",95,0)
 S HIEN=+Y
"RTN","IBCNEDEQ",96,0)
 S DR=".02////^S X=MSGID;.03////^S X=RSIEN" D ^DIE
"RTN","IBCNEDEQ",97,0)
 S DA=HIEN D ^DIE
"RTN","IBCNEDEQ",98,0)
 ;
"RTN","IBCNEDEQ",99,0)
 K HIEN,RSIEN,DR,MDTM
"RTN","IBCNEDEQ",100,0)
 Q
"RTN","IBCNEDEQ",101,0)
 ;
"RTN","IBCNEDEQ",102,0)
RESP ;  Create Response Record
"RTN","IBCNEDEQ",103,0)
 ;
"RTN","IBCNEDEQ",104,0)
 ;  Called from IBCNEDEP and IBCNEHLS
"RTN","IBCNEDEQ",105,0)
 ;
"RTN","IBCNEDEQ",106,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",107,0)
 ;    MSGID = Message Control ID (required)
"RTN","IBCNEDEQ",108,0)
 ;    MDTM = Message date/time created (optional)
"RTN","IBCNEDEQ",109,0)
 ;    DFN = Patient IEN (optional)
"RTN","IBCNEDEQ",110,0)
 ;    PAYR = Payer IEN (optional)
"RTN","IBCNEDEQ",111,0)
 ;    BUFF = Buffer IEN (optional)
"RTN","IBCNEDEQ",112,0)
 ;    IEN = Transmission IEN (optional)
"RTN","IBCNEDEQ",113,0)
 ;    RSTYPE = Response Type (O=Original, U=Unsolicited)
"RTN","IBCNEDEQ",114,0)
 ;
"RTN","IBCNEDEQ",115,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,RARRAY
"RTN","IBCNEDEQ",116,0)
 S DIC="^IBCN(365,",X=MSGID,DLAYGO=365,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",117,0)
 K DD,DO
"RTN","IBCNEDEQ",118,0)
 D FILE^DICN
"RTN","IBCNEDEQ",119,0)
 S RSIEN=+Y
"RTN","IBCNEDEQ",120,0)
 S RARRAY(365,RSIEN_",",.02)=$G(DFN),RARRAY(365,RSIEN_",",.03)=$G(PAYR)
"RTN","IBCNEDEQ",121,0)
 I $G(IEN)'="" D
"RTN","IBCNEDEQ",122,0)
 . I $P(^IBCN(365.1,IEN,0),U,18)=1 S RARRAY(365,RSIEN_",",.04)=$G(BUFF)
"RTN","IBCNEDEQ",123,0)
 S RARRAY(365,RSIEN_",",.05)=$G(IEN)
"RTN","IBCNEDEQ",124,0)
 S RARRAY(365,RSIEN_",",.06)=2,RARRAY(365,RSIEN_",",.08)=$G(MDTM)
"RTN","IBCNEDEQ",125,0)
 ;
"RTN","IBCNEDEQ",126,0)
 I $G(RSTYPE)="" S RSTYPE="U"
"RTN","IBCNEDEQ",127,0)
 S RARRAY(365,RSIEN_",",.1)=RSTYPE
"RTN","IBCNEDEQ",128,0)
 ;
"RTN","IBCNEDEQ",129,0)
 D FILE^DIE("I","RARRAY","ERR")
"RTN","IBCNEDEQ",130,0)
 I $D(ERR) D
"RTN","IBCNEDEQ",131,0)
 . S ERFLG=1,MCT=0,VEN=0
"RTN","IBCNEDEQ",132,0)
 . F  S VEN=$O(ERR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEDEQ",133,0)
 .. S MCT=MCT+1,MSG(MCT)=ERR("DIERR",VEN,"TEXT",1)
"RTN","IBCNEDEQ",134,0)
 . ;
"RTN","IBCNEDEQ",135,0)
 . S MCT=MCT+1,MSG(MCT)="Please log a NOIS for this problem."
"RTN","IBCNEDEQ",136,0)
 . S XMSUB="Error creating Response"
"RTN","IBCNEDEQ",137,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",138,0)
 . K ERR,VEN,MCT
"RTN","IBCNEDEQ",139,0)
 Q
"RTN","IBCNEDEQ",140,0)
 ;
"RTN","IBCNEDEQ",141,0)
TMRR ;  Communication Timeout message
"RTN","IBCNEDEQ",142,0)
 I 'TMSG Q
"RTN","IBCNEDEQ",143,0)
 S XMSUB="IIV Communication Timeout"
"RTN","IBCNEDEQ",144,0)
 S MSG(1)="No Response has been received within the defined failure days of "_FAIL_" for "
"RTN","IBCNEDEQ",145,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",146,0)
 ;
"RTN","IBCNEDEQ",147,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",148,0)
 ;
"RTN","IBCNEDEQ",149,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",150,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",151,0)
 Q
"RTN","IBCNEDEQ",152,0)
 ;
"RTN","IBCNEDEQ",153,0)
SSN(DFN) ; Retrieve patient's ssn and return last 4 digits
"RTN","IBCNEDEQ",154,0)
 ; Subsequently added Date of Birth to display as well
"RTN","IBCNEDEQ",155,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDEQ",156,0)
 N SSN,DOB
"RTN","IBCNEDEQ",157,0)
 S SSN=$$GETSSN^IBCNEDE5(DFN)
"RTN","IBCNEDEQ",158,0)
 S DOB=$$GETDOB(DFN)
"RTN","IBCNEDEQ",159,0)
 I SSN="",DOB="" Q ""
"RTN","IBCNEDEQ",160,0)
 I SSN="" Q " (DOB: "_DOB_")"
"RTN","IBCNEDEQ",161,0)
 S SSN=" (SSN: xxx-xx-"_$E(SSN,6,9)
"RTN","IBCNEDEQ",162,0)
 I DOB'="" S DOB="  DOB: "_DOB
"RTN","IBCNEDEQ",163,0)
 Q SSN_DOB_")"
"RTN","IBCNEDEQ",164,0)
 ;
"RTN","IBCNEDEQ",165,0)
GETDOB(DFN) ;
"RTN","IBCNEDEQ",166,0)
 Q:'$G(DFN) "Unknown"
"RTN","IBCNEDEQ",167,0)
 N DOB
"RTN","IBCNEDEQ",168,0)
 S DOB=$P($G(^DPT(DFN,0)),U,3)
"RTN","IBCNEDEQ",169,0)
 S DOB=$S('DOB:"Unknown",1:$$FMTE^XLFDT(DOB,"5Z"))
"RTN","IBCNEDEQ",170,0)
 Q DOB
"RTN","IBCNEHLD")
0^36^B4387851
"RTN","IBCNEHLD",1,0)
IBCNEHLD ;DAOU/ALA - IIV Deactivate MFN Message ;02-AUG-2002
"RTN","IBCNEHLD",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEHLD",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLD",4,0)
 ;
"RTN","IBCNEHLD",5,0)
 ;**Program Description**
"RTN","IBCNEHLD",6,0)
 ;  This program will process deactivate registration MFN message
"RTN","IBCNEHLD",7,0)
 ;
"RTN","IBCNEHLD",8,0)
 ;*** WARNING-This program should only be executed by the integration team ***
"RTN","IBCNEHLD",9,0)
 ;
"RTN","IBCNEHLD",10,0)
 Q
"RTN","IBCNEHLD",11,0)
 ;
"RTN","IBCNEHLD",12,0)
 ;  Variables
"RTN","IBCNEHLD",13,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLD",14,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLD",15,0)
 ;    APP = Application
"RTN","IBCNEHLD",16,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLD",17,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLD",18,0)
 ;    LNK = HL7 Link
"RTN","IBCNEHLD",19,0)
 ;
"RTN","IBCNEHLD",20,0)
DEAC ;  Deactivation message for when a site consolidates with another site
"RTN","IBCNEHLD",21,0)
 NEW MGRP,APP,EVENT,CODE,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX
"RTN","IBCNEHLD",22,0)
 NEW HLEID,LNK,HLCS,HLINST,HLN,HLPARAM,HLDOM,HLHDR,HLSAN
"RTN","IBCNEHLD",23,0)
 NEW HLTYPE,HLQ,HLRESLT,ID,DA,DISYS,MFE,RESP,ZMID
"RTN","IBCNEHLD",24,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLD",25,0)
 ;
"RTN","IBCNEHLD",26,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLD",27,0)
 ;
"RTN","IBCNEHLD",28,0)
HL ;  When a site deactivates, the enrollment should be an
"RTN","IBCNEHLD",29,0)
 ;  "MDC" (delete) record
"RTN","IBCNEHLD",30,0)
 S MFE(1)="MDC"
"RTN","IBCNEHLD",31,0)
 ;
"RTN","IBCNEHLD",32,0)
 ;  Initialize the HL7
"RTN","IBCNEHLD",33,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLD",34,0)
 S HLFS=HL("FS"),HLECH=$E(HL("ECH"),1),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLD",35,0)
 S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLD",36,0)
 ;
"RTN","IBCNEHLD",37,0)
 ;   Set the MFI segment
"RTN","IBCNEHLD",38,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="AL"
"RTN","IBCNEHLD",39,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLD",40,0)
 ;
"RTN","IBCNEHLD",41,0)
 ;  Set the MFE segment
"RTN","IBCNEHLD",42,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLD",43,0)
 S CODE=""
"RTN","IBCNEHLD",44,0)
 S ^TMP("HLS",$J,2)=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)_HLFS_"CE"
"RTN","IBCNEHLD",45,0)
 ;
"RTN","IBCNEHLD",46,0)
 D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"")
"RTN","IBCNEHLD",47,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLD",48,0)
 . S MSG(1)="IIV Deactivation Message not created."
"RTN","IBCNEHLD",49,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLD",50,0)
 . S MSG(3)="Please log a NOIS for this problem."
"RTN","IBCNEHLD",51,0)
 . D MLMN
"RTN","IBCNEHLD",52,0)
 K ^TMP("HLS",$J),%H,%I,X,EDT
"RTN","IBCNEHLD",53,0)
 Q
"RTN","IBCNEHLD",54,0)
 ;
"RTN","IBCNEHLD",55,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLD",56,0)
 S XMSUB="IIV Deactivation Failure"
"RTN","IBCNEHLD",57,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLD",58,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLD",59,0)
 Q
"RTN","IBCNEHLI")
0^37^B7261424
"RTN","IBCNEHLI",1,0)
IBCNEHLI ;DAOU/ALA - Incoming HL7 messages ;16-JUN-2002
"RTN","IBCNEHLI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,251,271**;21-MAR-94
"RTN","IBCNEHLI",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLI",4,0)
 ;
"RTN","IBCNEHLI",5,0)
 ;**Program Description**
"RTN","IBCNEHLI",6,0)
 ;  This program parses each incoming HL7 message.
"RTN","IBCNEHLI",7,0)
 ;
"RTN","IBCNEHLI",8,0)
EN ;  Starting point - put message into a TMP global
"RTN","IBCNEHLI",9,0)
 ;
"RTN","IBCNEHLI",10,0)
 N ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HLECH,HLEID
"RTN","IBCNEHLI",11,0)
 N HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",12,0)
 N SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN,CNT
"RTN","IBCNEHLI",13,0)
 N ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",14,0)
 N DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL,IBIEN,TQDATA,IBQFL
"RTN","IBCNEHLI",15,0)
 N DATAMFK,EPHARM
"RTN","IBCNEHLI",16,0)
 ;
"RTN","IBCNEHLI",17,0)
 K ^TMP($J,"IBCNEHLI")
"RTN","IBCNEHLI",18,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IBCNEHLI",19,0)
 . S CNT=0
"RTN","IBCNEHLI",20,0)
 . S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE
"RTN","IBCNEHLI",21,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IBCNEHLI",22,0)
 .. S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE(CNT)
"RTN","IBCNEHLI",23,0)
 ;
"RTN","IBCNEHLI",24,0)
 ;  Get the IIV user
"RTN","IBCNEHLI",25,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEHLI",26,0)
 ;   Determine which protocol to use
"RTN","IBCNEHLI",27,0)
 S SEGMT=$G(^TMP($J,"IBCNEHLI",1,0))
"RTN","IBCNEHLI",28,0)
 I $E(SEGMT,1,3)'="MSH" D  D ERR Q
"RTN","IBCNEHLI",29,0)
 . S MSG(1)="MSH Segment is not the first segment found"
"RTN","IBCNEHLI",30,0)
 . S MSG(2)="Please log a NOIS for this problem."
"RTN","IBCNEHLI",31,0)
 S HLFS=$E(SEGMT,4)
"RTN","IBCNEHLI",32,0)
 S EVENT=$P(SEGMT,HLFS,9),IBPRTCL=""
"RTN","IBCNEHLI",33,0)
 ;
"RTN","IBCNEHLI",34,0)
 ;  The event type determines protocol
"RTN","IBCNEHLI",35,0)
 I EVENT="MFN^M01" S TAG="TBL",IBPRTCL="IBCNE IIV MFN IN"
"RTN","IBCNEHLI",36,0)
 I EVENT="RPI^I01" S TAG="RSP",IBPRTCL="IBCNE IIV IN"
"RTN","IBCNEHLI",37,0)
 I EVENT="MFK^M01" S TAG="ACK",IBPRTCL="IBCNE IIV REGISTER"
"RTN","IBCNEHLI",38,0)
 I IBPRTCL="" S MSG(1)="Unable to find a protocol for Event = "_EVENT D ERR Q
"RTN","IBCNEHLI",39,0)
 S HLEID=$$HLP^IBCNEHLU(IBPRTCL)
"RTN","IBCNEHLI",40,0)
 ;
"RTN","IBCNEHLI",41,0)
 ;  Initialize the HL7 variables
"RTN","IBCNEHLI",42,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","IBCNEHLI",43,0)
 S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","IBCNEHLI",44,0)
 ;
"RTN","IBCNEHLI",45,0)
 ;  Call the event tag
"RTN","IBCNEHLI",46,0)
 D @TAG
"RTN","IBCNEHLI",47,0)
 ;
"RTN","IBCNEHLI",48,0)
 K ^TMP($J,"IBCNEHLI"),HL,HLNEXT,HLNODE,HLQUIT,SEGCNT
"RTN","IBCNEHLI",49,0)
 Q
"RTN","IBCNEHLI",50,0)
 ;
"RTN","IBCNEHLI",51,0)
TBL ;  Table Update Processing
"RTN","IBCNEHLI",52,0)
 D ^IBCNEHLT
"RTN","IBCNEHLI",53,0)
 ;
"RTN","IBCNEHLI",54,0)
 I ERFLG D ERR
"RTN","IBCNEHLI",55,0)
 K ERFLG
"RTN","IBCNEHLI",56,0)
 ;
"RTN","IBCNEHLI",57,0)
 ; Send MFK Message (Application Acknowledgement)?
"RTN","IBCNEHLI",58,0)
 I HL("APAT")="AL",$G(EPHARM) D ^IBCNRMFK
"RTN","IBCNEHLI",59,0)
 Q
"RTN","IBCNEHLI",60,0)
 ;
"RTN","IBCNEHLI",61,0)
RSP ;  Response Processing
"RTN","IBCNEHLI",62,0)
 D ^IBCNEHLR
"RTN","IBCNEHLI",63,0)
 ;
"RTN","IBCNEHLI",64,0)
 K ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HL,HLECH,HLEID
"RTN","IBCNEHLI",65,0)
 K HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",66,0)
 K SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN
"RTN","IBCNEHLI",67,0)
 K ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",68,0)
 K DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL
"RTN","IBCNEHLI",69,0)
 Q
"RTN","IBCNEHLI",70,0)
 ;
"RTN","IBCNEHLI",71,0)
ACK ;  Acknowledgement Processing
"RTN","IBCNEHLI",72,0)
 D ^IBCNEHLK
"RTN","IBCNEHLI",73,0)
 ;
"RTN","IBCNEHLI",74,0)
 Q
"RTN","IBCNEHLI",75,0)
 ;
"RTN","IBCNEHLI",76,0)
ERR ; Process an error
"RTN","IBCNEHLI",77,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLI",78,0)
 D MSG^IBCNEUT5(MGRP,"INCOMING IIV HL7 PROBLEM","MSG(")
"RTN","IBCNEHLI",79,0)
 K MSG,MGRP
"RTN","IBCNEHLI",80,0)
 Q
"RTN","IBCNEHLP")
0^38^B76489309
"RTN","IBCNEHLP",1,0)
IBCNEHLP ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002
"RTN","IBCNEHLP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271**;21-MAR-94
"RTN","IBCNEHLP",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLP",4,0)
 ;
"RTN","IBCNEHLP",5,0)
 ;**Program Description**
"RTN","IBCNEHLP",6,0)
 ;  This program will process the individual segments of the 
"RTN","IBCNEHLP",7,0)
 ;  incoming IIV response messages.
"RTN","IBCNEHLP",8,0)
 ; 
"RTN","IBCNEHLP",9,0)
 ; * Each of these tags are called by IBCNEHLR.
"RTN","IBCNEHLP",10,0)
 ;
"RTN","IBCNEHLP",11,0)
 ;  Variables
"RTN","IBCNEHLP",12,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHLP",13,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHLP",14,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHLP",15,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHLP",16,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHLP",17,0)
 ;    ERACT = Error Action
"RTN","IBCNEHLP",18,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHLP",19,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHLP",20,0)
 ;
"RTN","IBCNEHLP",21,0)
 Q  ; No direct calls
"RTN","IBCNEHLP",22,0)
 ;
"RTN","IBCNEHLP",23,0)
MSA ;  Process the MSA segment
"RTN","IBCNEHLP",24,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(5))
"RTN","IBCNEHLP",25,0)
 S ERTXT=$G(IBSEG(4)),ERACT=$G(IBSEG(6)),ERCON=$G(IBSEG(7))
"RTN","IBCNEHLP",26,0)
 ;
"RTN","IBCNEHLP",27,0)
 I MSGID="" D  G MSAX
"RTN","IBCNEHLP",28,0)
 . ;Find the PID segment to extract ICN and patient name
"RTN","IBCNEHLP",29,0)
 . N ICN,NAME
"RTN","IBCNEHLP",30,0)
 . S (ICN,NAME)=""
"RTN","IBCNEHLP",31,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLP",32,0)
 ..  D SPAR
"RTN","IBCNEHLP",33,0)
 ..  S SEG=$G(IBSEG(1)) Q:SEG'="PID"
"RTN","IBCNEHLP",34,0)
 ..  S ICN=$G(IBSEG(4)),NAME=$G(IBSEG(6)),ERFLG=1
"RTN","IBCNEHLP",35,0)
 . D ERRMSG S ERFLG=1
"RTN","IBCNEHLP",36,0)
 ;
"RTN","IBCNEHLP",37,0)
 ;  Check for message id/payer combination and get response IEN
"RTN","IBCNEHLP",38,0)
 D PCK^IBCNEHLS
"RTN","IBCNEHLP",39,0)
 ;
"RTN","IBCNEHLP",40,0)
 ;  If no record IEN, quit
"RTN","IBCNEHLP",41,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHLP",42,0)
 ;
"RTN","IBCNEHLP",43,0)
 ; Update record with information
"RTN","IBCNEHLP",44,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHLP",45,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHLP",46,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHLP",47,0)
 ;
"RTN","IBCNEHLP",48,0)
 ; Update with internal values
"RTN","IBCNEHLP",49,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",50,0)
 ;
"RTN","IBCNEHLP",51,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHLP",52,0)
 ;
"RTN","IBCNEHLP",53,0)
 ; Update with external values
"RTN","IBCNEHLP",54,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHLP",55,0)
MSAX ;
"RTN","IBCNEHLP",56,0)
 Q
"RTN","IBCNEHLP",57,0)
 ;
"RTN","IBCNEHLP",58,0)
CTD ;  Contact segment processing
"RTN","IBCNEHLP",59,0)
 NEW CTNAME,CTQUAL,CTNUM,CTQIEN,IENS,FLD,DATA,II,FFL
"RTN","IBCNEHLP",60,0)
 ;
"RTN","IBCNEHLP",61,0)
 ;  Parse out data from segment
"RTN","IBCNEHLP",62,0)
 S CTNAME=$G(IBSEG(3)),CTQUAL=$G(IBSEG(7)),CTNUM=$G(IBSEG(6))
"RTN","IBCNEHLP",63,0)
 I $TR(CTNAME," ")="" S CTNAME="NOT SPECIFIED"
"RTN","IBCNEHLP",64,0)
 S CTQIEN=$$FIND1^DIC(365.021,"","X",CTQUAL)
"RTN","IBCNEHLP",65,0)
 I CTNAME[$E(HLECH,1,1) S CTNAME=$$FMNAME^HLFNC(CTNAME,HLECH)
"RTN","IBCNEHLP",66,0)
 S CTNAME=$E(CTNAME,1,32)
"RTN","IBCNEHLP",67,0)
 ;
"RTN","IBCNEHLP",68,0)
 ;  Look up contact person
"RTN","IBCNEHLP",69,0)
 NEW DA,DIC,DLAYGO,X,Y,D1,DILN,DISYS
"RTN","IBCNEHLP",70,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",3,",DIC(0)="LZ",DLAYGO=365.03
"RTN","IBCNEHLP",71,0)
 I '$D(^IBCN(365,DA(1),3,0)) S ^IBCN(365,DA(1),3,0)="^365.03^^"
"RTN","IBCNEHLP",72,0)
 S X=CTNAME D ^DIC
"RTN","IBCNEHLP",73,0)
 S DA=+Y,DATA=^IBCN(365,DA(1),3,DA,0),FLD=2,FFL=0
"RTN","IBCNEHLP",74,0)
 ;
"RTN","IBCNEHLP",75,0)
 ;  Check if contact already has this communication qualifier on file
"RTN","IBCNEHLP",76,0)
 F II=2,4,6 I $P(DATA,U,II)=CTQIEN S FLD=II,FFL=1 Q
"RTN","IBCNEHLP",77,0)
 I 'FFL F II=2,4,6 I $P(DATA,U,II)="" S FLD=II Q
"RTN","IBCNEHLP",78,0)
 ;
"RTN","IBCNEHLP",79,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHLP",80,0)
 S RSUPDT(365.03,IENS,".0"_(FLD+1))=CTNUM
"RTN","IBCNEHLP",81,0)
 S RSUPDT(365.03,IENS,".0"_FLD)=CTQIEN
"RTN","IBCNEHLP",82,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",83,0)
CTDX ;
"RTN","IBCNEHLP",84,0)
 Q
"RTN","IBCNEHLP",85,0)
 ;
"RTN","IBCNEHLP",86,0)
PID ;  Patient segment processing
"RTN","IBCNEHLP",87,0)
 NEW ICN,DOB,SEX,SSN,NAME,DFN,DOD,LUPDT,LFAC,XDFN
"RTN","IBCNEHLP",88,0)
 ;
"RTN","IBCNEHLP",89,0)
 S ICN=$G(IBSEG(4)),DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHLP",90,0)
 S SSN=$G(IBSEG(20)),NAME=$G(IBSEG(6)),DFN=$G(IBSEG(5))
"RTN","IBCNEHLP",91,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHLP",92,0)
 ;
"RTN","IBCNEHLP",93,0)
 ;  Convert data from HL7 format to VISTA format
"RTN","IBCNEHLP",94,0)
 S NAME=$$FMNAME^HLFNC(NAME,HLECH)
"RTN","IBCNEHLP",95,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHLP",96,0)
 ;
"RTN","IBCNEHLP",97,0)
 ; Use ICN to find the patients DFN at this site
"RTN","IBCNEHLP",98,0)
 S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHLP",99,0)
 I +XDFN'>0,+ICN>0 D  Q
"RTN","IBCNEHLP",100,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHLP",101,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Unable to determine the patient's DFN value for this site."
"RTN","IBCNEHLP",102,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" The ICN for the patient in this response is ICN: "_ICN
"RTN","IBCNEHLP",103,0)
 . S ERROR("DIERR",IERN,"TEXT",3)=" eIIV was unable to file the response information."
"RTN","IBCNEHLP",104,0)
 ;
"RTN","IBCNEHLP",105,0)
 I +ICN>0 S DFN=XDFN
"RTN","IBCNEHLP",106,0)
 ;
"RTN","IBCNEHLP",107,0)
 ;  Perform date of death check
"RTN","IBCNEHLP",108,0)
 I DOD'="" D DODCK
"RTN","IBCNEHLP",109,0)
 ;
"RTN","IBCNEHLP",110,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,RIEN_",",.02)=DFN
"RTN","IBCNEHLP",111,0)
 S RSUPDT(365,RIEN_",",1.02)=DOB,RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHLP",112,0)
 S RSUPDT(365,RIEN_",",1.03)=SSN,RSUPDT(365,RIEN_",",1.16)=DOD
"RTN","IBCNEHLP",113,0)
 S RSUPDT(365,RIEN_",",1.01)=NAME,RSUPDT(365,RIEN_",",1.08)="v"
"RTN","IBCNEHLP",114,0)
 S RSUPDT(365,RIEN_",",1.09)="01"
"RTN","IBCNEHLP",115,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",116,0)
PIDX ;
"RTN","IBCNEHLP",117,0)
 Q
"RTN","IBCNEHLP",118,0)
DODCK ;  Date of death check
"RTN","IBCNEHLP",119,0)
 NEW CDOD,CIDDSP,IDDSP,IDSSN,XMSUB,MSG
"RTN","IBCNEHLP",120,0)
 S CDOD=$P($G(^DPT(DFN,.35)),U,1),CIDDSP=$$FMTE^XLFDT(CDOD,"5Z")
"RTN","IBCNEHLP",121,0)
 S IDDSP=$$FMTE^XLFDT(DOD,"5Z")
"RTN","IBCNEHLP",122,0)
 S IDSSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","IBCNEHLP",123,0)
 ;
"RTN","IBCNEHLP",124,0)
 ; If the two dates of death are the same, quit
"RTN","IBCNEHLP",125,0)
 I CDOD=DOD Q
"RTN","IBCNEHLP",126,0)
 ;
"RTN","IBCNEHLP",127,0)
 ;  If no current date of death but payer sent one
"RTN","IBCNEHLP",128,0)
 I CDOD="" D  Q
"RTN","IBCNEHLP",129,0)
 . ;  Send an email message
"RTN","IBCNEHLP",130,0)
 . S XMSUB="Date of Death Received"
"RTN","IBCNEHLP",131,0)
 . S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from"
"RTN","IBCNEHLP",132,0)
 . S MSG(2)="payer "_$$GET1^DIQ(365,RIEN,.03,"E")_".  There is no current Date of Death on file for "
"RTN","IBCNEHLP",133,0)
 . S MSG(3)="this patient."
"RTN","IBCNEHLP",134,0)
 . D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLP",135,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLP",136,0)
 ;
"RTN","IBCNEHLP",137,0)
 S XMSUB="Variant Date of Death"
"RTN","IBCNEHLP",138,0)
 S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from payer "_$$GET1^DIQ(365,RIEN,.03,"E")_"."
"RTN","IBCNEHLP",139,0)
 S MSG(2)="This Date of Death does not currently match the Date of Death ("_CIDDSP_") on file for this patient. "
"RTN","IBCNEHLP",140,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLP",141,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLP",142,0)
 ;
"RTN","IBCNEHLP",143,0)
 Q
"RTN","IBCNEHLP",144,0)
GT1 ;  Guarantor segment processing
"RTN","IBCNEHLP",145,0)
 NEW NAME,DOB,SEX,WHO,RELTN,SSN
"RTN","IBCNEHLP",146,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHLP",147,0)
 S WHO=$G(IBSEG(11)),RELTN=$G(IBSEG(12)),SSN=$G(IBSEG(13))
"RTN","IBCNEHLP",148,0)
 S SUBID=$G(IBSEG(3))
"RTN","IBCNEHLP",149,0)
 ;
"RTN","IBCNEHLP",150,0)
 S WHO=$S(WHO="01":"s",WHO="34":"o",1:WHO)
"RTN","IBCNEHLP",151,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$FMNAME^HLFNC(NAME,HLECH)
"RTN","IBCNEHLP",152,0)
 ;
"RTN","IBCNEHLP",153,0)
 S RSUPDT(365,RIEN_",",1.01)=NAME,RSUPDT(365,RIEN_",",1.08)=WHO
"RTN","IBCNEHLP",154,0)
 S RSUPDT(365,RIEN_",",1.02)=DOB,RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHLP",155,0)
 S RSUPDT(365,RIEN_",",1.03)=SSN,RSUPDT(365,RIEN_",",1.09)=RELTN
"RTN","IBCNEHLP",156,0)
 S RSUPDT(365,RIEN_",",1.18)=SUBID
"RTN","IBCNEHLP",157,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",158,0)
GT1X ;
"RTN","IBCNEHLP",159,0)
 Q
"RTN","IBCNEHLP",160,0)
IN1 ;  Insurance segment processing
"RTN","IBCNEHLP",161,0)
 NEW PAYRID,PYRNM,GNAME,GNUMB,EFFDT,EXPDT,COB,SRVDT,MBRID
"RTN","IBCNEHLP",162,0)
 ;
"RTN","IBCNEHLP",163,0)
 S MBRID=$G(IBSEG(3)),PAYRID=$G(IBSEG(4)),PYRNM=$G(IBSEG(5))
"RTN","IBCNEHLP",164,0)
 S GNAME=$G(IBSEG(10)),GNUMB=$G(IBSEG(9))
"RTN","IBCNEHLP",165,0)
 S EFFDT=$G(IBSEG(13)),EXPDT=$G(IBSEG(14))
"RTN","IBCNEHLP",166,0)
 S COB=$G(IBSEG(23)),SRVDT=$G(IBSEG(27))
"RTN","IBCNEHLP",167,0)
 ;
"RTN","IBCNEHLP",168,0)
 S EFFDT=$$FMDATE^HLFNC(EFFDT),EXPDT=$$FMDATE^HLFNC(EXPDT)
"RTN","IBCNEHLP",169,0)
 S SRVDT=$$FMDATE^HLFNC(SRVDT)
"RTN","IBCNEHLP",170,0)
 ;
"RTN","IBCNEHLP",171,0)
 S RSUPDT(365,RIEN_",",1.05)=$S($G(SUBID)'="":SUBID,1:MBRID)
"RTN","IBCNEHLP",172,0)
 S RSUPDT(365,RIEN_",",1.07)=GNUMB
"RTN","IBCNEHLP",173,0)
 S RSUPDT(365,RIEN_",",1.06)=GNAME,RSUPDT(365,RIEN_",",1.11)=EFFDT
"RTN","IBCNEHLP",174,0)
 S RSUPDT(365,RIEN_",",1.12)=EXPDT,RSUPDT(365,RIEN_",",1.1)=SRVDT
"RTN","IBCNEHLP",175,0)
 S RSUPDT(365,RIEN_",",1.13)=COB,RSUPDT(365,RIEN_",",1.18)=MBRID
"RTN","IBCNEHLP",176,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",177,0)
IN1X ;
"RTN","IBCNEHLP",178,0)
 Q
"RTN","IBCNEHLP",179,0)
IN3 ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHLP",180,0)
 NEW CRDT
"RTN","IBCNEHLP",181,0)
 ;
"RTN","IBCNEHLP",182,0)
 S CRDT=$G(IBSEG(8))
"RTN","IBCNEHLP",183,0)
 S CRDT=$$FMDATE^HLFNC(CRDT)
"RTN","IBCNEHLP",184,0)
 S RSUPDT(365,RIEN_",",1.17)=CRDT
"RTN","IBCNEHLP",185,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",186,0)
IN3X ;
"RTN","IBCNEHLP",187,0)
 Q
"RTN","IBCNEHLP",188,0)
ZEB ;  Eligibility/Benefit segment processing
"RTN","IBCNEHLP",189,0)
 NEW DA,DIC,DLAYGO,X,Y,D1,DILN,DISYS,EBN,IENS,RSUPDT
"RTN","IBCNEHLP",190,0)
 S EBN=$G(IBSEG(2))
"RTN","IBCNEHLP",191,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",2,",DIC(0)="L",DLAYGO=365.02
"RTN","IBCNEHLP",192,0)
 I '$D(^IBCN(365,DA(1),2,0)) S ^IBCN(365,DA(1),2,0)="^365.02^^"
"RTN","IBCNEHLP",193,0)
 S X=EBN D ^DIC
"RTN","IBCNEHLP",194,0)
 S DA=+Y,EBDA=DA
"RTN","IBCNEHLP",195,0)
 ;
"RTN","IBCNEHLP",196,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHLP",197,0)
 ;
"RTN","IBCNEHLP",198,0)
 F II=2:1:9 S RSUPDT(365.02,IENS,".0"_II)=$G(IBSEG(II+1))
"RTN","IBCNEHLP",199,0)
 S RSUPDT(365.02,IENS,".1")=$G(IBSEG(11))
"RTN","IBCNEHLP",200,0)
 F II=11:1:13 S RSUPDT(365.02,IENS,"."_II)=$G(IBSEG(II+1))
"RTN","IBCNEHLP",201,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHLP",202,0)
ZEBX ;
"RTN","IBCNEHLP",203,0)
 Q
"RTN","IBCNEHLP",204,0)
NTE ;  Notes segment processing
"RTN","IBCNEHLP",205,0)
 I $G(EBDA)="" Q
"RTN","IBCNEHLP",206,0)
 S NOTES(1)=$G(IBSEG(4))
"RTN","IBCNEHLP",207,0)
 S DA(1)=RIEN,DA=EBDA
"RTN","IBCNEHLP",208,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHLP",209,0)
 D WP^DIE(365.02,IENS,2,"A","NOTES","ERROR")
"RTN","IBCNEHLP",210,0)
 K NOTES
"RTN","IBCNEHLP",211,0)
NTEX ;
"RTN","IBCNEHLP",212,0)
 Q
"RTN","IBCNEHLP",213,0)
 ;
"RTN","IBCNEHLP",214,0)
SPAR ;  Segment Parsing
"RTN","IBCNEHLP",215,0)
 NEW ISCT,II,IJ,IK,ISDATA,ISPEC,ISBEG,ISEND,IS,LSDATA,IM,NPC
"RTN","IBCNEHLP",216,0)
 ;
"RTN","IBCNEHLP",217,0)
 S ISCT="",II=0,IS=0
"RTN","IBCNEHLP",218,0)
 F  S ISCT=$O(^TMP($J,"IBCNEHLI",HCT,ISCT)) Q:ISCT=""  D
"RTN","IBCNEHLP",219,0)
 . S IS=IS+1
"RTN","IBCNEHLP",220,0)
 . S ISDATA(IS)=$G(^TMP($J,"IBCNEHLI",HCT,ISCT))
"RTN","IBCNEHLP",221,0)
 . I $O(^TMP($J,"IBCNEHLI",HCT,ISCT))="" S ISDATA(IS)=ISDATA(IS)_"|"
"RTN","IBCNEHLP",222,0)
 . S ISPEC(IS)=$L(ISDATA(IS),HLFS)
"RTN","IBCNEHLP",223,0)
 ;
"RTN","IBCNEHLP",224,0)
 S IM=0,LSDATA=""
"RTN","IBCNEHLP",225,0)
LP S IM=IM+1 Q:IM>IS
"RTN","IBCNEHLP",226,0)
 S LSDATA=LSDATA_ISDATA(IM),NPC=ISPEC(IM)
"RTN","IBCNEHLP",227,0)
 F IJ=1:1:NPC-1 D
"RTN","IBCNEHLP",228,0)
 . S II=II+1,IBSEG(II)=$$CLNSTR($P(LSDATA,HLFS,IJ),$E(HL("ECH"),1,2)_$E(HL("ECH"),4),$E(HL("ECH")))
"RTN","IBCNEHLP",229,0)
 S LSDATA=$P(LSDATA,HLFS,NPC)
"RTN","IBCNEHLP",230,0)
 G LP
"RTN","IBCNEHLP",231,0)
 ;
"RTN","IBCNEHLP",232,0)
CLNSTR(STRING,CHARS,SUBSEP) ; Remove extra trailing components and subcompo^
"RTN","IBCNEHLP",233,0)
 ;                         in the HL7 segment
"RTN","IBCNEHLP",234,0)
 N RTSTRING,NUMPEC,PEC
"RTN","IBCNEHLP",235,0)
 S RTSTRING=$$RTRIMCH(STRING,CHARS)
"RTN","IBCNEHLP",236,0)
 ; Now we have string without trailing chars, remove from subs
"RTN","IBCNEHLP",237,0)
 S NUMPEC=$L(RTSTRING,SUBSEP)
"RTN","IBCNEHLP",238,0)
 F PEC=1:1:NUMPEC S $P(RTSTRING,SUBSEP,PEC)=$$RTRIMCH($P(RTSTRING,SUBSEP,PEC),CHARS)
"RTN","IBCNEHLP",239,0)
 Q RTSTRING
"RTN","IBCNEHLP",240,0)
 ;
"RTN","IBCNEHLP",241,0)
RTRIMCH(STR,CHRS) ; Remove the trailing chars from string
"RTN","IBCNEHLP",242,0)
 N R,L
"RTN","IBCNEHLP",243,0)
 S L=1,CHRS=$G(CHRS," ")
"RTN","IBCNEHLP",244,0)
 F R=$L(STR):-1:1 Q:CHRS'[$E(STR,R)
"RTN","IBCNEHLP",245,0)
 I L=R,(CHRS[$E(STR)) S STR=""
"RTN","IBCNEHLP",246,0)
 Q $E(STR,L,R)
"RTN","IBCNEHLP",247,0)
 ;
"RTN","IBCNEHLP",248,0)
ERRMSG ; Send Mailman message if message ctrl id = ""
"RTN","IBCNEHLP",249,0)
 N XMSUB,MSG,MSGCT
"RTN","IBCNEHLP",250,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHLP",251,0)
 S MSG(1)="A response was received with a blank Message Control Id"
"RTN","IBCNEHLP",252,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHLP",253,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHLP",254,0)
 I TRACE="" D
"RTN","IBCNEHLP",255,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHLP",256,0)
 S MSG(MSGCT)="This response cannot be processed.  Please log a NOIS."
"RTN","IBCNEHLP",257,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLP",258,0)
 Q
"RTN","IBCNEHLQ")
0^30^B30801715
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEHLQ",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an IIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;  DAOU/DB      03/19/2004  Stripped dashes from SSN (PID, GT1)
"RTN","IBCNEHLQ",12,0)
 ;
"RTN","IBCNEHLQ",13,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",14,0)
 ;  Variables
"RTN","IBCNEHLQ",15,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",18,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",19,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",20,0)
 ;
"RTN","IBCNEHLQ",21,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",22,0)
 NEW VAERR,VAFSTR,VADM,VA,ICN,SNDSSN
"RTN","IBCNEHLQ",23,0)
 S SNDSSN=$$SNDSSN^IBCNEUT5(PAYR,"IIV")
"RTN","IBCNEHLQ",24,0)
 D DEM^VADPT
"RTN","IBCNEHLQ",25,0)
 S VAFSTR=",1,7,8,11,"
"RTN","IBCNEHLQ",26,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",27,0)
 S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",28,0)
 S $P(PID,HLFS,4)=ICN,$P(PID,HLFS,5)=DFN
"RTN","IBCNEHLQ",29,0)
 I SNDSSN S $P(PID,HLFS,20)=$TR(VA("PID"),"-")
"RTN","IBCNEHLQ",30,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",31,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",32,0)
 Q
"RTN","IBCNEHLQ",33,0)
 ;
"RTN","IBCNEHLQ",34,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",35,0)
 NEW WHO,NM,IDOB,ISSN,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",36,0)
 NEW SNDSSN
"RTN","IBCNEHLQ",37,0)
 ;
"RTN","IBCNEHLQ",38,0)
 S SNDSSN=$$SNDSSN^IBCNEUT5(PAYR,"IIV")
"RTN","IBCNEHLQ",39,0)
 ;
"RTN","IBCNEHLQ",40,0)
 S GT1=""
"RTN","IBCNEHLQ",41,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",42,0)
 ;
"RTN","IBCNEHLQ",43,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",44,0)
 I EXT=1 D
"RTN","IBCNEHLQ",45,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",46,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",47,0)
 . S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",48,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",49,0)
 . S $P(GT1,HLFS,3)=NM
"RTN","IBCNEHLQ",50,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",51,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",52,0)
 . S $P(GT1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",53,0)
 . I SNDSSN S $P(GT1,HLFS,12)=$TR($P($G(^IBA(355.33,BUFF,60)),U,9),"-")
"RTN","IBCNEHLQ",54,0)
 ;
"RTN","IBCNEHLQ",55,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",56,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",57,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",58,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",59,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",60,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEHLQ",61,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",62,0)
 . S $P(GT1,HLFS,3)=NM
"RTN","IBCNEHLQ",63,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",64,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",65,0)
 . S $P(GT1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",66,0)
 . ;
"RTN","IBCNEHLQ",67,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",68,0)
 . ;
"RTN","IBCNEHLQ",69,0)
 . S ISSN=$P(IBSDATA,U,5)
"RTN","IBCNEHLQ",70,0)
 . I SNDSSN S $P(GT1,HLFS,12)=$TR(ISSN,"-")
"RTN","IBCNEHLQ",71,0)
 . ;
"RTN","IBCNEHLQ",72,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,12))
"RTN","IBCNEHLQ",73,0)
 . S $P(GT1,HLFS,6)=IBADDR
"RTN","IBCNEHLQ",74,0)
 . ;
"RTN","IBCNEHLQ",75,0)
 . D CHK
"RTN","IBCNEHLQ",76,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",77,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",78,0)
 . ;I $P(GT1,HLFS,12)=""&(ISSN'="") S $P(GT1,HLFS,12)=ISSN
"RTN","IBCNEHLQ",79,0)
 . I SNDSSN,$P(GT1,HLFS,12)=""&(ISSN'="") S $P(GT1,HLFS,12)=$TR(ISSN,"-")
"RTN","IBCNEHLQ",80,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",81,0)
 .. S SEX=$P(^DPT(DFN,0),U,2)
"RTN","IBCNEHLQ",82,0)
 .. S $P(GT1,HLFS,9)=$S(SEX="M":"F",1:"M")
"RTN","IBCNEHLQ",83,0)
 ;
"RTN","IBCNEHLQ",84,0)
 I GT1="" Q
"RTN","IBCNEHLQ",85,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",86,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",87,0)
 Q
"RTN","IBCNEHLQ",88,0)
 ;
"RTN","IBCNEHLQ",89,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",90,0)
 NEW EFFDT,EXPDT,WHO,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",91,0)
 S IN1="",SRVDT=$$HLDATE^HLFNC(SRVDT)
"RTN","IBCNEHLQ",92,0)
 ;
"RTN","IBCNEHLQ",93,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",94,0)
 I EXT=1 D
"RTN","IBCNEHLQ",95,0)
 . ;S $P(IN1,HLFS,2)=$P($G(^IBA(355.33,BUFF,60)),U,4)
"RTN","IBCNEHLQ",96,0)
 . S $P(IN1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",97,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",98,0)
 .. S $P(IN1,HLFS,3)=$P(^IBE(365.12,PAYR,0),U,2)
"RTN","IBCNEHLQ",99,0)
 .. S $P(IN1,HLFS,4)=$P(^IBE(365.12,PAYR,0),U,1)
"RTN","IBCNEHLQ",100,0)
 . S $P(IN1,HLFS,8)=$P($G(^IBA(355.33,BUFF,40)),U,3)
"RTN","IBCNEHLQ",101,0)
 . S $P(IN1,HLFS,9)=$P($G(^IBA(355.33,BUFF,40)),U,2)
"RTN","IBCNEHLQ",102,0)
 . S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",103,0)
 . S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",104,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",105,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",106,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",107,0)
 . S $P(IN1,HLFS,17)=$S(WHO="v":18,WHO="":18,WHO="s":"01",1:34)
"RTN","IBCNEHLQ",108,0)
 ;
"RTN","IBCNEHLQ",109,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",110,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",111,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",112,0)
 . I $G(SUBID)'=$P($G(^DPT(DFN,.312,IRIEN,0)),U,2) Q
"RTN","IBCNEHLQ",113,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",114,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",115,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",116,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",117,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6) I WHO="" Q
"RTN","IBCNEHLQ",118,0)
 . S $P(IN1,HLFS,17)=$S(WHO="v":18,WHO="":18,WHO="s":"01",1:34)
"RTN","IBCNEHLQ",119,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",120,0)
 . S $P(IN1,HLFS,8)=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEHLQ",121,0)
 . S $P(IN1,HLFS,9)=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEHLQ",122,0)
 ;
"RTN","IBCNEHLQ",123,0)
 ;  If it's an inquire with 'No Payer', don't send payer info
"RTN","IBCNEHLQ",124,0)
 I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",125,0)
 . S $P(IN1,HLFS,3)=$P(^IBE(365.12,PAYR,0),U,2)
"RTN","IBCNEHLQ",126,0)
 . S $P(IN1,HLFS,4)=$P(^IBE(365.12,PAYR,0),U,1)
"RTN","IBCNEHLQ",127,0)
 . S $P(IN1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",128,0)
 ;
"RTN","IBCNEHLQ",129,0)
 I IN1="" Q
"RTN","IBCNEHLQ",130,0)
 ;
"RTN","IBCNEHLQ",131,0)
 I $G(QUERY)="I",$P(IN1,HLFS,17)'=18 S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",132,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",133,0)
 ;
"RTN","IBCNEHLQ",134,0)
 ;  Set the admission date if patient currently admitted
"RTN","IBCNEHLQ",135,0)
 S ADMN=$P($G(^DPT(DFN,.105)),U,1) I ADMN'="" D
"RTN","IBCNEHLQ",136,0)
 . S ADMDT=$P(^DGPM(ADMN,0),U,1),ADMDT=$$HLDATE^HLFNC(ADMDT)
"RTN","IBCNEHLQ",137,0)
 . S $P(IN1,HLFS,24)=ADMDT
"RTN","IBCNEHLQ",138,0)
 ;
"RTN","IBCNEHLQ",139,0)
 ;  Set the service date
"RTN","IBCNEHLQ",140,0)
 S $P(IN1,HLFS,26)=SRVDT
"RTN","IBCNEHLQ",141,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",142,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",143,0)
 Q
"RTN","IBCNEHLQ",144,0)
 ;
"RTN","IBCNEHLQ",145,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",146,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",147,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",148,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",149,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",150,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",151,0)
 . ;
"RTN","IBCNEHLQ",152,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",153,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",154,0)
 . ;
"RTN","IBCNEHLQ",155,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",156,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",157,0)
 . ;
"RTN","IBCNEHLQ",158,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",159,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",160,0)
 ;
"RTN","IBCNEHLQ",161,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",162,0)
 ;
"RTN","IBCNEHLQ",163,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",164,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",165,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",166,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",167,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",168,0)
 S RDATA=$G(^DGPR(408.13,PLIEN,0))
"RTN","IBCNEHLQ",169,0)
 S ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3),ISSN=$P(RDATA,U,9)
"RTN","IBCNEHLQ",170,0)
 I $P(RDATA,U,4)'="" D
"RTN","IBCNEHLQ",171,0)
 . NEW DFN
"RTN","IBCNEHLQ",172,0)
 . S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",173,0)
 . S ISSN=$P(^DPT(DFN,0),U,9)
"RTN","IBCNEHLQ",174,0)
 Q
"RTN","IBCNEHLR")
0^23^B44471872
"RTN","IBCNEHLR",1,0)
IBCNEHLR ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHLR",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271**;21-MAR-94
"RTN","IBCNEHLR",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLR",4,0)
 ;
"RTN","IBCNEHLR",5,0)
 ;**Program Description**
"RTN","IBCNEHLR",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHLR",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHLR",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHLR",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHLR",10,0)
 ;
"RTN","IBCNEHLR",11,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLR",12,0)
 ;  DAOU/BHS     10/04/2002  Added logic to update the service date in
"RTN","IBCNEHLR",13,0)
 ;                           the TQ entry so long as the Error Action is
"RTN","IBCNEHLR",14,0)
 ;                           not Please submit original transaction.
"RTN","IBCNEHLR",15,0)
 ;  DAOU/DB      03/11/2004  Added logic to utilize new status flag
"RTN","IBCNEHLR",16,0)
 ;                           transmitted to VistA from EC (IIVSTAT)
"RTN","IBCNEHLR",17,0)
 ;               03/15/2004  Update other retries to comm failure (if
"RTN","IBCNEHLR",18,0)
 ;                           not response rcvd)
"RTN","IBCNEHLR",19,0)
 ;
"RTN","IBCNEHLR",20,0)
 ;  Variables
"RTN","IBCNEHLR",21,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHLR",22,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHLR",23,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHLR",24,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHLR",25,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHLR",26,0)
 ;    ERACT = Error Action
"RTN","IBCNEHLR",27,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHLR",28,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHLR",29,0)
 ;    IIVSTAT = EC generated flag interpreting status of response
"RTN","IBCNEHLR",30,0)
 ;              1 = +
"RTN","IBCNEHLR",31,0)
 ;              6 = -
"RTN","IBCNEHLR",32,0)
 ;              V = #
"RTN","IBCNEHLR",33,0)
 ;    MAP = Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15) IEN
"RTN","IBCNEHLR",34,0)
 ;
"RTN","IBCNEHLR",35,0)
EN ; Entry Point
"RTN","IBCNEHLR",36,0)
 N RSUPDT,UP,IIVSTAT,MAP
"RTN","IBCNEHLR",37,0)
 S ERFLG=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1
"RTN","IBCNEHLR",38,0)
 ; Create map from EC to VistA
"RTN","IBCNEHLR",39,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHLR",40,0)
 ;
"RTN","IBCNEHLR",41,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHLR",42,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLR",43,0)
 . D SPAR^IBCNEHLP
"RTN","IBCNEHLR",44,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLR",45,0)
 . ;
"RTN","IBCNEHLR",46,0)
 . I SEG="MSA" D MSA^IBCNEHLP Q:ERFLG
"RTN","IBCNEHLR",47,0)
 . ;
"RTN","IBCNEHLR",48,0)
 . ;  Contact Segment
"RTN","IBCNEHLR",49,0)
 . I SEG="CTD" D CTD^IBCNEHLP
"RTN","IBCNEHLR",50,0)
 . ;
"RTN","IBCNEHLR",51,0)
 . ;  Patient Segment
"RTN","IBCNEHLR",52,0)
 . I SEG="PID" D PID^IBCNEHLP
"RTN","IBCNEHLR",53,0)
 . ;
"RTN","IBCNEHLR",54,0)
 . ;  Guarantor Segment
"RTN","IBCNEHLR",55,0)
 . I SEG="GT1" D GT1^IBCNEHLP
"RTN","IBCNEHLR",56,0)
 . ;
"RTN","IBCNEHLR",57,0)
 . ;  Insurance Segment
"RTN","IBCNEHLR",58,0)
 . I SEG="IN1" D IN1^IBCNEHLP
"RTN","IBCNEHLR",59,0)
 . ;
"RTN","IBCNEHLR",60,0)
 . ;  Addt'l Insurance Segment
"RTN","IBCNEHLR",61,0)
 . ;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHLP
"RTN","IBCNEHLR",62,0)
 . ;
"RTN","IBCNEHLR",63,0)
 . ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHLR",64,0)
 . I SEG="IN3" D IN3^IBCNEHLP
"RTN","IBCNEHLR",65,0)
 . ;
"RTN","IBCNEHLR",66,0)
 . ;  Eligibility/Benefit Segment
"RTN","IBCNEHLR",67,0)
 . I SEG="ZEB" D
"RTN","IBCNEHLR",68,0)
 ..  ; Set a default IIV Status value of # ("V")
"RTN","IBCNEHLR",69,0)
 ..  I '$D(IIVSTAT) D
"RTN","IBCNEHLR",70,0)
 ...   I IBSEG(7)'="IIV Eligibility Determination" S IIVSTAT="V" Q
"RTN","IBCNEHLR",71,0)
 ...   I $F("_1_6_V_","_"_IBSEG(3)_"_") S IIVSTAT=IBSEG(3) Q
"RTN","IBCNEHLR",72,0)
 ...   ; Unknown code received from the EC
"RTN","IBCNEHLR",73,0)
 ...   N SUBJECT,MSG,XMY
"RTN","IBCNEHLR",74,0)
 ...   S SUBJECT="IIV: Invalid Eligibility Status flag"
"RTN","IBCNEHLR",75,0)
 ...   S MSG(1)="An invalid Eligibility Status flag '"_$G(IBSEG(3))_"' was received for site "_$P($$SITE^VASITE,"^",3)_","
"RTN","IBCNEHLR",76,0)
 ...   S MSG(2)="trace number "_$G(TRACE,"unknown")_" and message control id "_$G(MSGID,"unknown")_"."
"RTN","IBCNEHLR",77,0)
 ...   S MSG(3)="It has been interpreted as an ambiguous response in VistA."
"RTN","IBCNEHLR",78,0)
 ...   S XMY("FSCECADMIN@mail.va.gov")=""
"RTN","IBCNEHLR",79,0)
 ...   D MSG^IBCNEUT5("",SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEHLR",80,0)
 ...   S IIVSTAT="V"
"RTN","IBCNEHLR",81,0)
 ..  D ZEB^IBCNEHLP
"RTN","IBCNEHLR",82,0)
 . ;
"RTN","IBCNEHLR",83,0)
 . ;  Notes Segment
"RTN","IBCNEHLR",84,0)
 . I SEG="NTE" D NTE^IBCNEHLP
"RTN","IBCNEHLR",85,0)
 ;
"RTN","IBCNEHLR",86,0)
 D FIL
"RTN","IBCNEHLR",87,0)
 Q
"RTN","IBCNEHLR",88,0)
 ; ============================================
"RTN","IBCNEHLR",89,0)
FIL ;  Finish processing the response message
"RTN","IBCNEHLR",90,0)
 ;
"RTN","IBCNEHLR",91,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHLR",92,0)
 ; send an email
"RTN","IBCNEHLR",93,0)
 I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D
"RTN","IBCNEHLR",94,0)
 . ;
"RTN","IBCNEHLR",95,0)
 . D CE  ; send critical message
"RTN","IBCNEHLR",96,0)
 . ;
"RTN","IBCNEHLR",97,0)
 . ;If the response could not be created, stop processing
"RTN","IBCNEHLR",98,0)
 . I '$G(RIEN) Q
"RTN","IBCNEHLR",99,0)
 . ;
"RTN","IBCNEHLR",100,0)
 . ; Set the Transmission Queue Status to 'Response Received'
"RTN","IBCNEHLR",101,0)
 . S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHLR",102,0)
 . S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHLR",103,0)
 . I TQDATA="" Q
"RTN","IBCNEHLR",104,0)
 . D SST^IBCNEUT2(TQN,3)
"RTN","IBCNEHLR",105,0)
 . ; Response recvd - update remaining retries to comm failure (5)
"RTN","IBCNEHLR",106,0)
 . D RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHLR",107,0)
 . ;
"RTN","IBCNEHLR",108,0)
 . ; No further processing for identifications
"RTN","IBCNEHLR",109,0)
 . S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHLR",110,0)
 . I IBQFL="I",$G(IIVSTAT)'=1 Q
"RTN","IBCNEHLR",111,0)
 . ;
"RTN","IBCNEHLR",112,0)
 . ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHLR",113,0)
 . S IBIEN=$P(TQDATA,U,5),RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHLR",114,0)
 . I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHLR",115,0)
 . ;
"RTN","IBCNEHLR",116,0)
 . I IBIEN="" D  Q           ; create a new buffer entry
"RTN","IBCNEHLR",117,0)
 ..  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHLR",118,0)
 ..  ; symbol changed from ! to # since response received
"RTN","IBCNEHLR",119,0)
 ..  ;S SYMBOL=12 D BUF^IBCNEHLS  ; Determine Patient Ins record IEN
"RTN","IBCNEHLR",120,0)
 ..  S SYMBOL=22 D BUF^IBCNEHLS  ; Determine Patient Ins record IEN
"RTN","IBCNEHLR",121,0)
 . ;
"RTN","IBCNEHLR",122,0)
 . ;Update buffer symbol
"RTN","IBCNEHLR",123,0)
 . ;D BUFF^IBCNEUT2(IBIEN,12)
"RTN","IBCNEHLR",124,0)
 . D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHLR",125,0)
 ;
"RTN","IBCNEHLR",126,0)
 ; If an error occurred, you're done!
"RTN","IBCNEHLR",127,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHLR",128,0)
 ;
"RTN","IBCNEHLR",129,0)
 ; Initialize variables from Response file
"RTN","IBCNEHLR",130,0)
 S RDAT0=$G(^IBCN(365,RIEN,0))
"RTN","IBCNEHLR",131,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHLR",132,0)
 S RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHLR",133,0)
 S TRACE=$P(RDAT0,U,9)
"RTN","IBCNEHLR",134,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHLR",135,0)
 ;
"RTN","IBCNEHLR",136,0)
 ;  Set the Transmission Queue Status to 'Response Received'
"RTN","IBCNEHLR",137,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3)
"RTN","IBCNEHLR",138,0)
 ; Response rcvd - update remaining retries to comm failure (5)
"RTN","IBCNEHLR",139,0)
 D RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHLR",140,0)
 ;
"RTN","IBCNEHLR",141,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHLR",142,0)
 ; if they are different AND the Error Action <> 
"RTN","IBCNEHLR",143,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHLR",144,0)
 ;
"RTN","IBCNEHLR",145,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHLR",146,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHLR",147,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHLR",148,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHLR",149,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHLR",150,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHLR",151,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHLR",152,0)
 ;
"RTN","IBCNEHLR",153,0)
 K TQSRVDT,RSRVDT
"RTN","IBCNEHLR",154,0)
 ;
"RTN","IBCNEHLR",155,0)
 ;  Check for error action
"RTN","IBCNEHLR",156,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") D ERROR^IBCNEHLS(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHLR",157,0)
 ;
"RTN","IBCNEHLR",158,0)
 ; Do not place identification in the insurance buffer unless they are active
"RTN","IBCNEHLR",159,0)
 N FILEIT
"RTN","IBCNEHLR",160,0)
 S FILEIT=1
"RTN","IBCNEHLR",161,0)
 I $G(IIVSTAT)'=1,TQN]"" D
"RTN","IBCNEHLR",162,0)
 . N TQDATA,IBQFL
"RTN","IBCNEHLR",163,0)
 . S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHLR",164,0)
 . I TQDATA="" Q
"RTN","IBCNEHLR",165,0)
 . S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHLR",166,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHLR",167,0)
 . S FILEIT=0
"RTN","IBCNEHLR",168,0)
 I 'FILEIT G FILX
"RTN","IBCNEHLR",169,0)
 ;
"RTN","IBCNEHLR",170,0)
 ;  If a buffer entry, check if buffer status is still 'Entered'
"RTN","IBCNEHLR",171,0)
 I BUFF'="",(($P(^IBA(355.33,BUFF,0),U,4)'="E")!$$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHLR",172,0)
 ;
"RTN","IBCNEHLR",173,0)
 ;  Set buffer symbol to verified
"RTN","IBCNEHLR",174,0)
 ;  Replaced with: set buffer symbol based on value returned from EC
"RTN","IBCNEHLR",175,0)
 ; S SYMBOL=8
"RTN","IBCNEHLR",176,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHLR",177,0)
 ;
"RTN","IBCNEHLR",178,0)
 ;  If okay, update the buffer entry
"RTN","IBCNEHLR",179,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHLR",180,0)
 ;
"RTN","IBCNEHLR",181,0)
 ;  If not a buffer entry, create one
"RTN","IBCNEHLR",182,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHLR",183,0)
 ;
"RTN","IBCNEHLR",184,0)
 ;  Set IIV Processed Date to now
"RTN","IBCNEHLR",185,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHLR",186,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHLR",187,0)
FILX ;
"RTN","IBCNEHLR",188,0)
 Q
"RTN","IBCNEHLR",189,0)
 ;
"RTN","IBCNEHLR",190,0)
CE ;  Create and send response processing error message
"RTN","IBCNEHLR",191,0)
 N XMY,VEN,MCT,SUBCNT
"RTN","IBCNEHLR",192,0)
 S VEN=0,MCT=8,ERFLG=1,SUBCNT=""
"RTN","IBCNEHLR",193,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHLR",194,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHLR",195,0)
 S MSG(3)="*** IRM *** Please log a NOIS because the"
"RTN","IBCNEHLR",196,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHLR",197,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHLR",198,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHLR",199,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_".  If applicable,"
"RTN","IBCNEHLR",200,0)
 S MSG(8)="please review the response with the IIV Response Report by Trace #."
"RTN","IBCNEHLR",201,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHLR",202,0)
 . F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  D
"RTN","IBCNEHLR",203,0)
 . . S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHLR",204,0)
 . S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHLR",205,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHLR",206,0)
 Q
"RTN","IBCNEHLR",207,0)
 ;
"RTN","IBCNEHLS")
0^24^B65873110
"RTN","IBCNEHLS",1,0)
IBCNEHLS ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002
"RTN","IBCNEHLS",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEHLS",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLS",4,0)
 ;
"RTN","IBCNEHLS",5,0)
 ;**Program Description**
"RTN","IBCNEHLS",6,0)
 ;  This is a continuation of IBCNEHLR which processes an incoming
"RTN","IBCNEHLS",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHLS",8,0)
 ;
"RTN","IBCNEHLS",9,0)
 Q   ; no direct calls allow
"RTN","IBCNEHLS",10,0)
 ;
"RTN","IBCNEHLS",11,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHLS",12,0)
 ; Input:  TQN - IEN for IIV Transmission Queue (#365.1), required
"RTN","IBCNEHLS",13,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHLS",14,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHLS",15,0)
 ;         TRCN - Trace # from IIV Response (#365)
"RTN","IBCNEHLS",16,0)
 ;
"RTN","IBCNEHLS",17,0)
 ;         IIVSTAT - IIV status transmitted by EC
"RTN","IBCNEHLS",18,0)
 ;                   Note: MAP(IIVSTAT) = IIV STATUS IEN
"RTN","IBCNEHLS",19,0)
 N MSG,ERDESC,ERIEN,XMY
"RTN","IBCNEHLS",20,0)
 ;
"RTN","IBCNEHLS",21,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHLS",22,0)
 ;
"RTN","IBCNEHLS",23,0)
 ; Scenarios:
"RTN","IBCNEHLS",24,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHLS",25,0)
 ;  Original Transaction" - set TQ 
"RTN","IBCNEHLS",26,0)
 ;  Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHLS",27,0)
 I ERACT="R"!(ERACT="P") D  G ERRORX
"RTN","IBCNEHLS",28,0)
 . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHLS",29,0)
 . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHLS",30,0)
 ;
"RTN","IBCNEHLS",31,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHLS",32,0)
 ;  Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHLS",33,0)
 I ERACT="W" D  G ERRORX
"RTN","IBCNEHLS",34,0)
 . ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHLS",35,0)
 . D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHLS",36,0)
 ;
"RTN","IBCNEHLS",37,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHLS",38,0)
 ;  Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHLS",39,0)
 I ERACT="X" D  G ERRORX
"RTN","IBCNEHLS",40,0)
 . ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHLS",41,0)
 . D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHLS",42,0)
 ;
"RTN","IBCNEHLS",43,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHLS",44,0)
 ;  "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHLS",45,0)
 ;  - set TQ Status to "Response Received"
"RTN","IBCNEHLS",46,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHLS",47,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHLS",48,0)
 I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D  G ERRORX
"RTN","IBCNEHLS",49,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHLS",50,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHLS",51,0)
 ;
"RTN","IBCNEHLS",52,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHLS",53,0)
 ; *** Currently processed in IBCNEHLR ***
"RTN","IBCNEHLS",54,0)
 ;
"RTN","IBCNEHLS",55,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHLS",56,0)
 Q
"RTN","IBCNEHLS",57,0)
 ;
"RTN","IBCNEHLS",58,0)
 ;
"RTN","IBCNEHLS",59,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ; Update Transmission Queue (#365.1)
"RTN","IBCNEHLS",60,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHLS",61,0)
 ; * If unsolicited error or negative Verification response do not 
"RTN","IBCNEHLS",62,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHLS",63,0)
 ;
"RTN","IBCNEHLS",64,0)
 ; Init optional param
"RTN","IBCNEHLS",65,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHLS",66,0)
 ;
"RTN","IBCNEHLS",67,0)
 ; Init vars
"RTN","IBCNEHLS",68,0)
 N DIE,DA,DR,D,D0,DI,DIC,DQ,X,TQDATA,IBSTS,IBIEN,INSIEN,DFN,FTDT,IBQFL
"RTN","IBCNEHLS",69,0)
 N IBDATA,IBSYM
"RTN","IBCNEHLS",70,0)
 ;
"RTN","IBCNEHLS",71,0)
 ; If no ZEB segment received, set IIVSTAT to "V"
"RTN","IBCNEHLS",72,0)
 S IIVSTAT=$G(IIVSTAT,"V")
"RTN","IBCNEHLS",73,0)
 ;
"RTN","IBCNEHLS",74,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHLS",75,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHLS",76,0)
 ; Ins Buffer IEN
"RTN","IBCNEHLS",77,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHLS",78,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHLS",79,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHLS",80,0)
 ;
"RTN","IBCNEHLS",81,0)
 ; If unsolicited error or negative Identification response do not 
"RTN","IBCNEHLS",82,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHLS",83,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHLS",84,0)
 ;
"RTN","IBCNEHLS",85,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHLS",86,0)
 ;
"RTN","IBCNEHLS",87,0)
 ; Ins Buffer processing
"RTN","IBCNEHLS",88,0)
 I IBIEN'="" D
"RTN","IBCNEHLS",89,0)
 . ; Ins Buf data
"RTN","IBCNEHLS",90,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHLS",91,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHLS",92,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHLS",93,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHLS",94,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHLS",95,0)
 . ;  Resp Rec'd (3) and do NOT update the Ins Buffer symbol
"RTN","IBCNEHLS",96,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHLS",97,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHLS",98,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHLS",99,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error Action Codes ('N','Y','S')
"RTN","IBCNEHLS",100,0)
 . ; Removed ERACT 'C' from algorithm as this is handled by EC IIV flag
"RTN","IBCNEHLS",101,0)
 . ; I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C"&($$ERROVR(ERCON)))) D  Q
"RTN","IBCNEHLS",102,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C")) D  Q
"RTN","IBCNEHLS",103,0)
 .. S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHLS",104,0)
 .. D BUFF^IBCNEUT2(IBIEN,SYMBOL) ; Set buffer symbol to EC value
"RTN","IBCNEHLS",105,0)
 .. D IIVPROC(IBIEN)   ; Set IIV process date & IIV status
"RTN","IBCNEHLS",106,0)
 . ; If TQ status is "Responsed Received" & Error action="C" update buffer symbol to "!"
"RTN","IBCNEHLS",107,0)
 . ; Removed ERACT 'C' from algorithm as this is handled by EC IIV flag
"RTN","IBCNEHLS",108,0)
 . ;I TSTS=3,(ERACT="C"),'$$ERROVR(ERCON) D  Q
"RTN","IBCNEHLS",109,0)
 . ;. D BUFF^IBCNEUT2(IBIEN,11)  ; Set buffer symbol to "!"
"RTN","IBCNEHLS",110,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHLS",111,0)
 . ; Replaced '!' with '#' (12 -> 22)
"RTN","IBCNEHLS",112,0)
 . ;I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,12) Q
"RTN","IBCNEHLS",113,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,22) Q
"RTN","IBCNEHLS",114,0)
 ;
"RTN","IBCNEHLS",115,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHLS",116,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHLS",117,0)
 . ; Determine Patient DFN
"RTN","IBCNEHLS",118,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHLS",119,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHLS",120,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHLS",121,0)
 . ; If ERACT="C" symbol is passed by EC & removed 3rd & 4th lines
"RTN","IBCNEHLS",122,0)
 . I ERACT="C" S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHLS",123,0)
 . ; Add Ins Buffer entry with B8 - "!" (11) symbol for ERACT = "C"
"RTN","IBCNEHLS",124,0)
 . ; I ERACT="C",'$$ERROVR(ERCON) S SYMBOL=11 D BUF Q
"RTN","IBCNEHLS",125,0)
 . ; Add Ins Buffer entry with "-" (9) symbol for ERACTs N,Y or S 
"RTN","IBCNEHLS",126,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHLS",127,0)
 . ; I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C"&($$ERROVR(ERCON))) S SYMBOL=9 D BUF Q
"RTN","IBCNEHLS",128,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S") S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHLS",129,0)
 . ; An unknown error action - generate a '#'
"RTN","IBCNEHLS",130,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=22 D BUF Q
"RTN","IBCNEHLS",131,0)
 . ; Add Ins Buffer entry with "!" (12 = B9) symbol for new Error Action
"RTN","IBCNEHLS",132,0)
 . ; I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=12 D BUF Q
"RTN","IBCNEHLS",133,0)
 ;
"RTN","IBCNEHLS",134,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHLS",135,0)
 ;
"RTN","IBCNEHLS",136,0)
 ; Update TQ record - Status
"RTN","IBCNEHLS",137,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHLS",138,0)
 ;
"RTN","IBCNEHLS",139,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHLS",140,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHLS",141,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHLS",142,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09////^S X=FTDT"
"RTN","IBCNEHLS",143,0)
 . D ^DIE
"RTN","IBCNEHLS",144,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHLS",145,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08////0"
"RTN","IBCNEHLS",146,0)
 . D ^DIE
"RTN","IBCNEHLS",147,0)
 ;
"RTN","IBCNEHLS",148,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHLS",149,0)
 Q
"RTN","IBCNEHLS",150,0)
 ;
"RTN","IBCNEHLS",151,0)
ERROVR(ERCON) ; Error Override Check
"RTN","IBCNEHLS",152,0)
 ; Function to determine if the error action "C" should be overridden
"RTN","IBCNEHLS",153,0)
 ;
"RTN","IBCNEHLS",154,0)
 N RESULT
"RTN","IBCNEHLS",155,0)
 S RESULT=0
"RTN","IBCNEHLS",156,0)
 I ",52,67,75,77,78,"[(","_ERCON_",") S RESULT=1
"RTN","IBCNEHLS",157,0)
 Q RESULT
"RTN","IBCNEHLS",158,0)
 ;
"RTN","IBCNEHLS",159,0)
PCK ;  Payer check
"RTN","IBCNEHLS",160,0)
 ;
"RTN","IBCNEHLS",161,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHLS",162,0)
 ;  New IEN to prevent previous values from being assoc'd w/new response
"RTN","IBCNEHLS",163,0)
 ;
"RTN","IBCNEHLS",164,0)
 N IN1DATA,IEN,PRIEN
"RTN","IBCNEHLS",165,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHLS",166,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHLS",167,0)
 ;
"RTN","IBCNEHLS",168,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHLS",169,0)
 ; Don't create response if no assoc'd TQ
"RTN","IBCNEHLS",170,0)
 I '$O(^TMP("IBCNEMID",$J,"DILIST",0)) S RIEN="",ERFLG=1 Q
"RTN","IBCNEHLS",171,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHLS",172,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHLS",173,0)
 . ;
"RTN","IBCNEHLS",174,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHLS",175,0)
 . S IN1DATA=$$GIN1()
"RTN","IBCNEHLS",176,0)
 . I IN1DATA="",PRIEN'="" D
"RTN","IBCNEHLS",177,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365,PRIEN,0),U,3)
"RTN","IBCNEHLS",178,0)
 . ;
"RTN","IBCNEHLS",179,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHLS",180,0)
 . ;
"RTN","IBCNEHLS",181,0)
 . ; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHLS",182,0)
 . ; 'Response Received' create a new unsolicited response entry
"RTN","IBCNEHLS",183,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHLS",184,0)
 . . S RIEN=PRIEN,QFL=1
"RTN","IBCNEHLS",185,0)
 ;
"RTN","IBCNEHLS",186,0)
 ;  If message id/payer not found, create a new response entry
"RTN","IBCNEHLS",187,0)
 I RIEN="" D  Q:ERFLG
"RTN","IBCNEHLS",188,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHLS",189,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHLS",190,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHLS",191,0)
 . ;
"RTN","IBCNEHLS",192,0)
 . I PIEN="" D  Q:ERFLG
"RTN","IBCNEHLS",193,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHLS",194,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S RIEN="",ERFLG=1
"RTN","IBCNEHLS",195,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHLS",196,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHLS",197,0)
 . S RIEN=RSIEN
"RTN","IBCNEHLS",198,0)
 . K DFN,BUFF,MDTM,PAYR,RSIEN,PRDATA,IERN
"RTN","IBCNEHLS",199,0)
 ; If no payer in response file, set it
"RTN","IBCNEHLS",200,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,RIEN,0)),U,3)="" D
"RTN","IBCNEHLS",201,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03////^S X=PIEN" D ^DIE
"RTN","IBCNEHLS",202,0)
 Q
"RTN","IBCNEHLS",203,0)
 ;
"RTN","IBCNEHLS",204,0)
BUF ;  Create Buffer record if doesn't exist
"RTN","IBCNEHLS",205,0)
 N UP
"RTN","IBCNEHLS",206,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHLS",207,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHLS",208,0)
 N BUFF S BUFF=+IBFDA
"RTN","IBCNEHLS",209,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHLS",210,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHLS",211,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHLS",212,0)
 ; I SYMBOL=9 D IIVPROC(BUFF)   ; symbol 9 is a "-"
"RTN","IBCNEHLS",213,0)
 K SYMBOL
"RTN","IBCNEHLS",214,0)
 Q
"RTN","IBCNEHLS",215,0)
 ;
"RTN","IBCNEHLS",216,0)
IIVPROC(BUFF) ; Set IIV Processed Date to current dt/tm & IIV status (aka SYMBOL)
"RTN","IBCNEHLS",217,0)
 NEW IDUZ,UP
"RTN","IBCNEHLS",218,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHLS",219,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHLS",220,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEHLS",221,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHLS",222,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHLS",223,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHLS",224,0)
 Q
"RTN","IBCNEHLS",225,0)
 ;
"RTN","IBCNEHLS",226,0)
PFN(IN1DATA) ;  Find Payer from HL7 message
"RTN","IBCNEHLS",227,0)
 NEW IERN,PAYRIEN
"RTN","IBCNEHLS",228,0)
 S PAYRID=$$CLNSTR^IBCNEHLP($P(IN1DATA,HLFS,4),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHLS",229,0)
 S PAYRIEN=$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHLS",230,0)
 I +PAYRIEN=0 D  Q
"RTN","IBCNEHLS",231,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHLS",232,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHLS",233,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHLS",234,0)
 S PIEN=PAYRIEN
"RTN","IBCNEHLS",235,0)
 Q
"RTN","IBCNEHLS",236,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHLS",237,0)
 N IPCT,SEGMT
"RTN","IBCNEHLS",238,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHLS",239,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHLS",240,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHLS",241,0)
 Q SEGMT
"RTN","IBCNEHLT")
0^39^B59932024
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ;24-JUN-2002
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,271**;21-MAR-94
"RTN","IBCNEHLT",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,USSN,REQSUB,NAFLG,NPFLG
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 NEW BPSIEN,CMIEN,DATA,DATAAP,DATABPS,DATACM,DATE,ERROR,FIELDNO,FILENO
"RTN","IBCNEHLT",14,0)
 ;
"RTN","IBCNEHLT",15,0)
 S HCT=1,ERFLG=0,NAFLG=0,NPFLG=0
"RTN","IBCNEHLT",16,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",17,0)
 . D SPAR^IBCNEHLP
"RTN","IBCNEHLT",18,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",19,0)
 . ;
"RTN","IBCNEHLT",20,0)
 . I SEG="MFI" D
"RTN","IBCNEHLT",21,0)
 .. S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",22,0)
 .. S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",23,0)
 .. ;
"RTN","IBCNEHLT",24,0)
 .. ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",25,0)
 .. ;
"RTN","IBCNEHLT",26,0)
 .. ; Master File Identifier
"RTN","IBCNEHLT",27,0)
 .. S DATAMFK("MFI-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",28,0)
 .. ;
"RTN","IBCNEHLT",29,0)
 .. ; File-Level Event Code
"RTN","IBCNEHLT",30,0)
 .. S DATAMFK("MFI-3")=$G(IBSEG(4))
"RTN","IBCNEHLT",31,0)
 . ;
"RTN","IBCNEHLT",32,0)
 . I SEG="MFE" D
"RTN","IBCNEHLT",33,0)
 .. I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",34,0)
 .. I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",35,0)
 .. ;
"RTN","IBCNEHLT",36,0)
 .. ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",37,0)
 .. ;
"RTN","IBCNEHLT",38,0)
 .. ; Record-Level Event Code
"RTN","IBCNEHLT",39,0)
 .. S DATAMFK("MFE-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",40,0)
 .. ;
"RTN","IBCNEHLT",41,0)
 .. ; Primary Key Value
"RTN","IBCNEHLT",42,0)
 .. S DATAMFK("MFE-4")=$G(IBSEG(5))
"RTN","IBCNEHLT",43,0)
 .. ;
"RTN","IBCNEHLT",44,0)
 .. ; Primary Key Value Type
"RTN","IBCNEHLT",45,0)
 .. S DATAMFK("MFE-5")=$G(IBSEG(6))
"RTN","IBCNEHLT",46,0)
 .. ;
"RTN","IBCNEHLT",47,0)
 .. ; Transfer control if e-Pharmacy
"RTN","IBCNEHLT",48,0)
 .. I ",366.01,366.02,366.03,"[(","_FLN_",") D ^IBCNRHLT Q
"RTN","IBCNEHLT",49,0)
 .. I FLN=365.12,$P($G(IBSEG(5)),$E(HLECH,1),6)'["IIV" D ^IBCNRHLT Q
"RTN","IBCNEHLT",50,0)
 .. ;
"RTN","IBCNEHLT",51,0)
 .. S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",52,0)
 .. ;
"RTN","IBCNEHLT",53,0)
 .. I FLN'=365.12 D  Q
"RTN","IBCNEHLT",54,0)
 ... S ID=$P(DATA,$E(HLECH,1),1),DESC=$P(DATA,$E(HLECH,1),2)
"RTN","IBCNEHLT",55,0)
 ... D TFIL
"RTN","IBCNEHLT",56,0)
 .. ;
"RTN","IBCNEHLT",57,0)
 .. S ID=$P(DATA,$E(HLECH,1),1),NEWID=$P(DATA,$E(HLECH,1),2)
"RTN","IBCNEHLT",58,0)
 .. S DESC=$P(DATA,$E(HLECH,1),3)
"RTN","IBCNEHLT",59,0)
 .. S HEDI=$P(DATA,$E(HLECH,1),4),PEDI=$P(DATA,$E(HLECH,1),5)
"RTN","IBCNEHLT",60,0)
 .. S APP=$P(DATA,$E(HLECH,1),6),STAT=$P(DATA,$E(HLECH,1),7)
"RTN","IBCNEHLT",61,0)
 .. S STAT=$S(STAT="Y":"Active",1:"Not Active")
"RTN","IBCNEHLT",62,0)
 .. S TSSN=$P(DATA,$E(HLECH,1),8),USSN=$P(DATA,$E(HLECH,1),9)
"RTN","IBCNEHLT",63,0)
 .. S REQSUB=$P(DATA,$E(HLECH,1),10)
"RTN","IBCNEHLT",64,0)
 .. S FSVDY=$P(DATA,$E(HLECH,1),11),PSVDY=$P(DATA,$E(HLECH,1),12)
"RTN","IBCNEHLT",65,0)
 .. D PFIL
"RTN","IBCNEHLT",66,0)
 . ;
"RTN","IBCNEHLT",67,0)
 . ; Transfer control if e-Pharmacy
"RTN","IBCNEHLT",68,0)
 . I ",ZCM,ZP0,ZPB,ZPL,ZPT,ZRX,"[(","_SEG_",") D ^IBCNRHLT
"RTN","IBCNEHLT",69,0)
 . ;
"RTN","IBCNEHLT",70,0)
 Q
"RTN","IBCNEHLT",71,0)
 ;
"RTN","IBCNEHLT",72,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",73,0)
 ;  Set the action:
"RTN","IBCNEHLT",74,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",75,0)
 ; Pull the action code
"RTN","IBCNEHLT",76,0)
 S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",77,0)
 ; Effective Date
"RTN","IBCNEHLT",78,0)
 S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",79,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",80,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",81,0)
 ;
"RTN","IBCNEHLT",82,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",83,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR
"RTN","IBCNEHLT",84,0)
 S IBNOK=0,IBAPP=($TR(APP," ")="")
"RTN","IBCNEHLT",85,0)
 I IBCNACT="MAD" D  I IBNOK G PFILX
"RTN","IBCNEHLT",86,0)
 . ; Check certain required fields: Application, VA National & Payer Name
"RTN","IBCNEHLT",87,0)
 . ; If not populated, send MailMan message.
"RTN","IBCNEHLT",88,0)
 . S IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")="")
"RTN","IBCNEHLT",89,0)
 . S IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",90,0)
 . I 'IBNOK D MAD(DESC) Q
"RTN","IBCNEHLT",91,0)
 . S IBSTR="" I IBAPP S IBSTR="Application"
"RTN","IBCNEHLT",92,0)
 . I IBID S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"VA National"
"RTN","IBCNEHLT",93,0)
 . I IBDESC S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"Payer Name"
"RTN","IBCNEHLT",94,0)
 . S MSG(1)="MAD action received.  "_IBSTR_" unknown."
"RTN","IBCNEHLT",95,0)
 I IBCNACT'="MAD" D FND
"RTN","IBCNEHLT",96,0)
 N IBCNTYPE
"RTN","IBCNEHLT",97,0)
 I IEN<1!IBAPP D  G PFILX
"RTN","IBCNEHLT",98,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",99,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",100,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",101,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",102,0)
 . S MSG(4)="Payer Name  : "_DESC
"RTN","IBCNEHLT",103,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",104,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",105,0)
 . S MSG(7)="Log a NOIS for this issue."
"RTN","IBCNEHLT",106,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",107,0)
 . S MSG(9)="Please include in the NOIS that VISTA did not receive the required"
"RTN","IBCNEHLT",108,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",109,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"IIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",110,0)
 ;
"RTN","IBCNEHLT",111,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",112,0)
 S DR=".01////^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",113,0)
 ;
"RTN","IBCNEHLT",114,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",115,0)
 I NPFLG S DR=DR_";.04////^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",116,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",117,0)
 ;
"RTN","IBCNEHLT",118,0)
 ;  Check for application
"RTN","IBCNEHLT",119,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",120,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",121,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",122,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",123,0)
 . K DD,DO
"RTN","IBCNEHLT",124,0)
 . D FILE^DICN
"RTN","IBCNEHLT",125,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",126,0)
 ;
"RTN","IBCNEHLT",127,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",128,0)
 I APIEN="" D
"RTN","IBCNEHLT",129,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",130,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",131,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",132,0)
 . K DD,DO
"RTN","IBCNEHLT",133,0)
 . D FILE^DICN
"RTN","IBCNEHLT",134,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",135,0)
 ;
"RTN","IBCNEHLT",136,0)
 I $G(STAT)="" S STAT=$P(^IBE(365.12,IEN,1,APIEN,0),U,2)
"RTN","IBCNEHLT",137,0)
 ;
"RTN","IBCNEHLT",138,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",139,0)
 ;
"RTN","IBCNEHLT",140,0)
 I IBCNACT="MDC" S DR=DR_".11////^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",141,0)
 I IBCNACT="MAC" S DR=DR_".11////^S X=0;.12////@;",STAT=1
"RTN","IBCNEHLT",142,0)
 S DR=DR_".02///^S X=STAT;.06////^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",143,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.09///^S X=USSN;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",144,0)
 ;
"RTN","IBCNEHLT",145,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",146,0)
 I NAFLG S DR=DR_";.13////^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",147,0)
 ;
"RTN","IBCNEHLT",148,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",149,0)
 ;
"RTN","IBCNEHLT",150,0)
 I IBCNACT="MAC" Q
"RTN","IBCNEHLT",151,0)
 ;
"RTN","IBCNEHLT",152,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",153,0)
 ;
"RTN","IBCNEHLT",154,0)
 ;  If no EDI's, quit
"RTN","IBCNEHLT",155,0)
 I HEDI=""&(PEDI="") Q
"RTN","IBCNEHLT",156,0)
 ;
"RTN","IBCNEHLT",157,0)
 ;  Quit and don't match at this time
"RTN","IBCNEHLT",158,0)
PFILX Q
"RTN","IBCNEHLT",159,0)
 ;
"RTN","IBCNEHLT",160,0)
 NEW ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTDTH
"RTN","IBCNEHLT",161,0)
 ;  Queue off setting of the Payer Pointer
"RTN","IBCNEHLT",162,0)
 S ZTDESC="IIV Payer Table Update",ZTIO="",ZTRTN="PID^IBCNEHLT"
"RTN","IBCNEHLT",163,0)
 S ZTSAVE("HEDI")="",ZTSAVE("PEDI")="",ZTSAVE("IEN")="",ZTSAVE("DUZ")=IDUZ
"RTN","IBCNEHLT",164,0)
 S ZTDTH=$$HADD^XLFDT($H,,,1,)
"RTN","IBCNEHLT",165,0)
 D ^%ZTLOAD
"RTN","IBCNEHLT",166,0)
 Q
"RTN","IBCNEHLT",167,0)
 ;
"RTN","IBCNEHLT",168,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",169,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR,IEN
"RTN","IBCNEHLT",170,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",171,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",172,0)
 ;
"RTN","IBCNEHLT",173,0)
 ;  If no matching entry found, add it to table
"RTN","IBCNEHLT",174,0)
 I IEN<1 D
"RTN","IBCNEHLT",175,0)
 . S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",176,0)
 . K DD,DO
"RTN","IBCNEHLT",177,0)
 . D FILE^DICN S IEN=+Y
"RTN","IBCNEHLT",178,0)
 ;
"RTN","IBCNEHLT",179,0)
 S DR=".02////^S X=DESC",DA=IEN,DIE=DIC D ^DIE
"RTN","IBCNEHLT",180,0)
 Q
"RTN","IBCNEHLT",181,0)
 ;
"RTN","IBCNEHLT",182,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",183,0)
 D FND
"RTN","IBCNEHLT",184,0)
 I IEN>0 G MADX
"RTN","IBCNEHLT",185,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",186,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",187,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",188,0)
 K DD,DO
"RTN","IBCNEHLT",189,0)
 D FILE^DICN
"RTN","IBCNEHLT",190,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",191,0)
MADX ;
"RTN","IBCNEHLT",192,0)
 Q
"RTN","IBCNEHLT",193,0)
 ;
"RTN","IBCNEHLT",194,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",195,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",196,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",197,0)
 ;
"RTN","IBCNEHLT",198,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",199,0)
 D IX^DIC
"RTN","IBCNEHLT",200,0)
 S IEN=+Y
"RTN","IBCNEHLT",201,0)
 Q
"RTN","IBCNEHLT",202,0)
 ;
"RTN","IBCNEHLT",203,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",204,0)
 NEW STA,HIEN
"RTN","IBCNEHLT",205,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",206,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",207,0)
 .. ;
"RTN","IBCNEHLT",208,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",209,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",210,0)
 .. ;
"RTN","IBCNEHLT",211,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",212,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",213,0)
 .. ;
"RTN","IBCNEHLT",214,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",215,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",216,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",217,0)
 .. ;
"RTN","IBCNEHLT",218,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",219,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",220,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",221,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",222,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",223,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",224,0)
 Q
"RTN","IBCNEHLT",225,0)
 ;
"RTN","IBCNEHLT",226,0)
PID ;  Payer IDs
"RTN","IBCNEHLT",227,0)
 ; If both the Institutional and Professional IDs are blank
"RTN","IBCNEHLT",228,0)
 ; can't use them to search and match up insurance companies
"RTN","IBCNEHLT",229,0)
 ; with payers
"RTN","IBCNEHLT",230,0)
 ;
"RTN","IBCNEHLT",231,0)
 NEW DIC,DA,DR,IDATA,OK,PIEN,DIE,X
"RTN","IBCNEHLT",232,0)
 ;
"RTN","IBCNEHLT",233,0)
 S ZTREQ="@"
"RTN","IBCNEHLT",234,0)
 ;
"RTN","IBCNEHLT",235,0)
 S PIEN=0
"RTN","IBCNEHLT",236,0)
 F  S PIEN=$O(^DIC(36,PIEN)) Q:'PIEN  D
"RTN","IBCNEHLT",237,0)
 . ;
"RTN","IBCNEHLT",238,0)
 . ; If the insurance company is inactive, quit
"RTN","IBCNEHLT",239,0)
 . I '$$ACTIVE^IBCNEUT4(PIEN) Q
"RTN","IBCNEHLT",240,0)
 . ;
"RTN","IBCNEHLT",241,0)
 . S IDATA=$G(^DIC(36,PIEN,3))
"RTN","IBCNEHLT",242,0)
 . ;  If insurance company already has payer, quit
"RTN","IBCNEHLT",243,0)
 . I $P(IDATA,U,10)'="" Q
"RTN","IBCNEHLT",244,0)
 . ;
"RTN","IBCNEHLT",245,0)
 . S OK=0
"RTN","IBCNEHLT",246,0)
 . I PEDI'=""&($P(IDATA,U,2)=PEDI) S OK=1
"RTN","IBCNEHLT",247,0)
 . I HEDI'=""&($P(IDATA,U,4)=HEDI) S OK=1
"RTN","IBCNEHLT",248,0)
 . Q:'OK
"RTN","IBCNEHLT",249,0)
 . ;
"RTN","IBCNEHLT",250,0)
 . S DIE="^DIC(36,",DA=PIEN,DR="3.1////^S X=IEN" D ^DIE
"RTN","IBCNEHLT",251,0)
 Q
"RTN","IBCNEKI2")
0^3^B10075063
"RTN","IBCNEKI2",1,0)
IBCNEKI2 ;DAOU/BHS - PURGE IIV DATA FILES CONT'D ;11-JUL-2002
"RTN","IBCNEKI2",2,0)
 ;;2.0;INTEGRATED BILLING;**271**;21-MAR-94
"RTN","IBCNEKI2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEKI2",4,0)
 ;
"RTN","IBCNEKI2",5,0)
 ; This routine holds additional procedures for purging the IIV data
"RTN","IBCNEKI2",6,0)
 ; from the Trans Queue file (365.1) and the Response file (365).
"RTN","IBCNEKI2",7,0)
 ;
"RTN","IBCNEKI2",8,0)
 ; ---------------------------------------------------
"RTN","IBCNEKI2",9,0)
MMPURGE ; This procedure is responsible for the creation and
"RTN","IBCNEKI2",10,0)
 ; sending of the MailMan message on the first day of the month
"RTN","IBCNEKI2",11,0)
 ; if the site has data eligible to be purged and if the mail group is
"RTN","IBCNEKI2",12,0)
 ; defined appropriately in the IIV site parameters.
"RTN","IBCNEKI2",13,0)
 ;
"RTN","IBCNEKI2",14,0)
 ; Identify records eligible to be purged
"RTN","IBCNEKI2",15,0)
 NEW ENDDT,STATLIST,DATE,TQIEN,TOTTQ,PURTQ,TQS
"RTN","IBCNEKI2",16,0)
 NEW HLIEN,RPIEN,RPS,TOTRP,PURRP,MSG,MGRP
"RTN","IBCNEKI2",17,0)
 ;
"RTN","IBCNEKI2",18,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKI2",19,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKI2",20,0)
 S (TOTTQ,PURTQ,TOTRP,PURRP)=0
"RTN","IBCNEKI2",21,0)
 ;
"RTN","IBCNEKI2",22,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKI2",23,0)
 ;   3=Response Received
"RTN","IBCNEKI2",24,0)
 ;   5=Communication Failure
"RTN","IBCNEKI2",25,0)
 ;   7=Cancelled
"RTN","IBCNEKI2",26,0)
 S STATLIST=",3,5,7,"
"RTN","IBCNEKI2",27,0)
 ;
"RTN","IBCNEKI2",28,0)
 S DATE=""
"RTN","IBCNEKI2",29,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  S TOTTQ=TOTTQ+1 I $P(DATE,".")'>ENDDT D
"RTN","IBCNEKI2",30,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKI2",31,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKI2",32,0)
 . S PURTQ=PURTQ+1
"RTN","IBCNEKI2",33,0)
 . ; Loop thru responses to count them, too
"RTN","IBCNEKI2",34,0)
 . S HLIEN=0
"RTN","IBCNEKI2",35,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKI2",36,0)
 . .  I $P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) S PURRP=PURRP+1
"RTN","IBCNEKI2",37,0)
 ;
"RTN","IBCNEKI2",38,0)
 S DATE=""
"RTN","IBCNEKI2",39,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  S TOTRP=TOTRP+1 I $P(DATE,".")'>ENDDT D
"RTN","IBCNEKI2",40,0)
 . I $P($G(^IBCN(365,RPIEN,0)),U,5) Q    ; include only unsolicited
"RTN","IBCNEKI2",41,0)
 . S PURRP=PURRP+1
"RTN","IBCNEKI2",42,0)
 ;
"RTN","IBCNEKI2",43,0)
 ; Do not send message if no records are eligible
"RTN","IBCNEKI2",44,0)
 I 'PURTQ,'PURRP G MMPURGX
"RTN","IBCNEKI2",45,0)
 ;
"RTN","IBCNEKI2",46,0)
 ; Send a MailMan message with Eligible Purge counts
"RTN","IBCNEKI2",47,0)
 S MSG(1)="ATTENTION IRM:  There are IIV TRANSMISSION QUEUE and"
"RTN","IBCNEKI2",48,0)
 S MSG(2)="IIV RESPONSE records eligible to be purged."
"RTN","IBCNEKI2",49,0)
 S MSG(3)=""
"RTN","IBCNEKI2",50,0)
 S MSG(4)="File                                  Eligible   Total  "
"RTN","IBCNEKI2",51,0)
 S MSG(5)="                                       Count     Count  "
"RTN","IBCNEKI2",52,0)
 S MSG(6)="------------------------------------  --------  --------"
"RTN","IBCNEKI2",53,0)
 S MSG(7)="IIV RESPONSE FILE (#365)              "_$J(PURRP,8)_"  "_$J(TOTRP,8)
"RTN","IBCNEKI2",54,0)
 S MSG(8)="IIV TRANSMISSION QUEUE FILE (#365.1)  "_$J(PURTQ,8)_"  "_$J(TOTTQ,8)
"RTN","IBCNEKI2",55,0)
 S MSG(9)="====================================  ========  ========"
"RTN","IBCNEKI2",56,0)
 S MSG(10)="Total                                 "_$J(PURTQ+PURRP,8)_"  "_$J(TOTTQ+TOTRP,8)
"RTN","IBCNEKI2",57,0)
 S MSG(11)=""
"RTN","IBCNEKI2",58,0)
 S MSG(12)="Please run option IBCNE PURGE IIV DATA - Purge IIV Transactions,"
"RTN","IBCNEKI2",59,0)
 S MSG(13)="if you would like to purge the eligible records."
"RTN","IBCNEKI2",60,0)
 S MSG(14)=""
"RTN","IBCNEKI2",61,0)
 S MSG(15)="To purge IIV data, journaling should be temporarily disabled for ^IBCN!"
"RTN","IBCNEKI2",62,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEKI2",63,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEKI2",64,0)
 D MSG^IBCNEUT5(MGRP,"IIV Data Eligible for Purge","MSG(")
"RTN","IBCNEKI2",65,0)
 ;
"RTN","IBCNEKI2",66,0)
MMPURGX ;
"RTN","IBCNEKI2",67,0)
 Q
"RTN","IBCNEKI2",68,0)
 ;
"RTN","IBCNEKIT")
0^2^B58412281
"RTN","IBCNEKIT",1,0)
IBCNEKIT ;DAOU/ESG - PURGE IIV DATA FILES ;11-JUL-2002
"RTN","IBCNEKIT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEKIT",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEKIT",4,0)
 ;
"RTN","IBCNEKIT",5,0)
 ; This routine handles the purging of the IIV data stored in the
"RTN","IBCNEKIT",6,0)
 ; Trans Queue file (365.1) and in the Response file (365).  User can
"RTN","IBCNEKIT",7,0)
 ; pick a date range for the purge.  Data created within 6 months
"RTN","IBCNEKIT",8,0)
 ; cannot be purged.  The actual global kills are done by a background
"RTN","IBCNEKIT",9,0)
 ; task after hours.
"RTN","IBCNEKIT",10,0)
 ;
"RTN","IBCNEKIT",11,0)
EN ;
"RTN","IBCNEKIT",12,0)
 NEW STOP,BEGDT,ENDDT,STATLIST
"RTN","IBCNEKIT",13,0)
 D INIT I STOP G EXIT       ; initialize/calculate default dates
"RTN","IBCNEKIT",14,0)
 D BEGDT I STOP G EXIT      ; user interface for beginning date
"RTN","IBCNEKIT",15,0)
 D ENDDT I STOP G EXIT      ; user interface for ending date
"RTN","IBCNEKIT",16,0)
 D CONFIRM I STOP G EXIT    ; confirmation message/final check
"RTN","IBCNEKIT",17,0)
 D QUEUE                    ; queuing process
"RTN","IBCNEKIT",18,0)
EXIT ;
"RTN","IBCNEKIT",19,0)
 Q
"RTN","IBCNEKIT",20,0)
 ;
"RTN","IBCNEKIT",21,0)
PURGE ; This procedure is queued to run in the background and does the
"RTN","IBCNEKIT",22,0)
 ; actual purging.  Variables available from the TaskMan call are:
"RTN","IBCNEKIT",23,0)
 ;
"RTN","IBCNEKIT",24,0)
 ; STATLIST = list of statuses that are OK to purge
"RTN","IBCNEKIT",25,0)
 ;    BEGDT = beginning date for purging
"RTN","IBCNEKIT",26,0)
 ;    ENDDT = ending date for purging
"RTN","IBCNEKIT",27,0)
 ;
"RTN","IBCNEKIT",28,0)
 ; First loop through the transmission queue file and delete all
"RTN","IBCNEKIT",29,0)
 ; records in the date range whose status is in the list
"RTN","IBCNEKIT",30,0)
 ;
"RTN","IBCNEKIT",31,0)
 NEW DATE,TQIEN,TQS,HLIEN,DIK,DA,CNT
"RTN","IBCNEKIT",32,0)
 S DATE=$O(^IBCN(365.1,"AE",BEGDT),-1),CNT=0
"RTN","IBCNEKIT",33,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",34,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",35,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",36,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; trans queue status
"RTN","IBCNEKIT",37,0)
 . I '$F(STATLIST,","_TQS_",") Q             ; must be in the list
"RTN","IBCNEKIT",38,0)
 . ;
"RTN","IBCNEKIT",39,0)
 . ; loop through the HL7 messages multiple and kill any response
"RTN","IBCNEKIT",40,0)
 . ; records that are found for this transmission queue entry
"RTN","IBCNEKIT",41,0)
 . S HLIEN=0,DIK="^IBCN(365,"
"RTN","IBCNEKIT",42,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKIT",43,0)
 .. S DA=$P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) I DA D ^DIK
"RTN","IBCNEKIT",44,0)
 .. Q
"RTN","IBCNEKIT",45,0)
 . ;
"RTN","IBCNEKIT",46,0)
 . ; now we can kill the transmission queue entry itself
"RTN","IBCNEKIT",47,0)
 . S DA=TQIEN,DIK="^IBCN(365.1," D ^DIK
"RTN","IBCNEKIT",48,0)
 . Q
"RTN","IBCNEKIT",49,0)
 ;
"RTN","IBCNEKIT",50,0)
 ; Check for a stop request
"RTN","IBCNEKIT",51,0)
 I $G(ZTSTOP) G PURGEX
"RTN","IBCNEKIT",52,0)
 ;
"RTN","IBCNEKIT",53,0)
 ; Now we must loop through the response file itself to purge any
"RTN","IBCNEKIT",54,0)
 ; response records that do not have a corresponding transmission
"RTN","IBCNEKIT",55,0)
 ; queue entry.  These are the unsolicited responses.  The status of
"RTN","IBCNEKIT",56,0)
 ; these responses is always 'response received' so we don't need to
"RTN","IBCNEKIT",57,0)
 ; check the status.
"RTN","IBCNEKIT",58,0)
 ; For this loop, start from the very beginning of the file.
"RTN","IBCNEKIT",59,0)
 ;
"RTN","IBCNEKIT",60,0)
 S DATE="",DIK="^IBCN(365,",CNT=0
"RTN","IBCNEKIT",61,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S DA=0 F  S DA=$O(^IBCN(365,"AE",DATE,DA)) Q:'DA  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",62,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",63,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",64,0)
 . ;
"RTN","IBCNEKIT",65,0)
 . ; If there is a pointer to the transmission queue file, then we
"RTN","IBCNEKIT",66,0)
 . ; should get out of this loop because the purpose of this section
"RTN","IBCNEKIT",67,0)
 . ; is to purge those responses with no link to the transmission
"RTN","IBCNEKIT",68,0)
 . ; queue file.
"RTN","IBCNEKIT",69,0)
 . ;
"RTN","IBCNEKIT",70,0)
 . I $P($G(^IBCN(365,DA,0)),U,5) Q
"RTN","IBCNEKIT",71,0)
 . D ^DIK
"RTN","IBCNEKIT",72,0)
 . Q
"RTN","IBCNEKIT",73,0)
PURGEX ;
"RTN","IBCNEKIT",74,0)
 ; Tell TaskManager to delete the task's record
"RTN","IBCNEKIT",75,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEKIT",76,0)
 Q
"RTN","IBCNEKIT",77,0)
 ;
"RTN","IBCNEKIT",78,0)
 ;
"RTN","IBCNEKIT",79,0)
INIT ; This procedure calculates the default beginning and ending dates
"RTN","IBCNEKIT",80,0)
 ; and displays screen messages about this option to the user.
"RTN","IBCNEKIT",81,0)
 ;
"RTN","IBCNEKIT",82,0)
 NEW DATE,FOUND,TQIEN,TQS,RPIEN,RPS
"RTN","IBCNEKIT",83,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",84,0)
 NEW IOBON,IORVON,IOBOFF,IORVOFF
"RTN","IBCNEKIT",85,0)
 D GETATTR
"RTN","IBCNEKIT",86,0)
 ;
"RTN","IBCNEKIT",87,0)
 S STOP=0
"RTN","IBCNEKIT",88,0)
 ;
"RTN","IBCNEKIT",89,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKIT",90,0)
 ;   3=Response Received
"RTN","IBCNEKIT",91,0)
 ;   5=Communication Failure
"RTN","IBCNEKIT",92,0)
 ;   7=Cancelled
"RTN","IBCNEKIT",93,0)
 S STATLIST=",3,5,7,"
"RTN","IBCNEKIT",94,0)
 ;
"RTN","IBCNEKIT",95,0)
 ; Try to find a beginning date in the Trans Queue file
"RTN","IBCNEKIT",96,0)
 S DATE="",FOUND=0,BEGDT=DT
"RTN","IBCNEKIT",97,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!FOUND  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:FOUND
"RTN","IBCNEKIT",98,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKIT",99,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKIT",100,0)
 . S FOUND=1
"RTN","IBCNEKIT",101,0)
 . S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",102,0)
 . Q
"RTN","IBCNEKIT",103,0)
 ;
"RTN","IBCNEKIT",104,0)
 ; If not successful, try to find a beginning date in the Response file.
"RTN","IBCNEKIT",105,0)
 I 'FOUND D
"RTN","IBCNEKIT",106,0)
 . S DATE=""
"RTN","IBCNEKIT",107,0)
 . F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!FOUND  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  D  Q:FOUND
"RTN","IBCNEKIT",108,0)
 .. S RPS=$P($G(^IBCN(365,RPIEN,0)),U,6)    ; status
"RTN","IBCNEKIT",109,0)
 .. I '$F(STATLIST,","_RPS_",") Q
"RTN","IBCNEKIT",110,0)
 .. S FOUND=1
"RTN","IBCNEKIT",111,0)
 .. S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",112,0)
 .. Q
"RTN","IBCNEKIT",113,0)
 . Q
"RTN","IBCNEKIT",114,0)
 ;
"RTN","IBCNEKIT",115,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKIT",116,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKIT",117,0)
 ;
"RTN","IBCNEKIT",118,0)
 I 'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",119,0)
 . W !!?5,"Purging of IIV data is not possible at this time."
"RTN","IBCNEKIT",120,0)
 . I 'FOUND W !?5,"There are no entries in the file that are eligible to be",!?5,"purged or there is no data in the file."
"RTN","IBCNEKIT",121,0)
 . E  W !?5,"The oldest date in the file is ",$$FMTE^XLFDT(BEGDT,"5Z"),".",!?5,"Data cannot be purged unless it is at least 6 months old."
"RTN","IBCNEKIT",122,0)
 . W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",123,0)
 . Q
"RTN","IBCNEKIT",124,0)
 ;
"RTN","IBCNEKIT",125,0)
 ; At this point, we know that there are some entries eligible for
"RTN","IBCNEKIT",126,0)
 ; purging.  Display a message to the user about this option.
"RTN","IBCNEKIT",127,0)
 W @IOF
"RTN","IBCNEKIT",128,0)
 W !?3,"Purge Electronic Insurance Identification and Verification (IIV) Data Files"
"RTN","IBCNEKIT",129,0)
 W !!,IOBON,IORVON," To run this option, journaling should be temporarily disabled for ^IBCN.",IOBOFF,IORVOFF
"RTN","IBCNEKIT",130,0)
 W !!," This option will allow you to purge data from the IIV Response File (#365)"
"RTN","IBCNEKIT",131,0)
 W !," and the IIV Transmission Queue File (#365.1).  The data must be at least six"
"RTN","IBCNEKIT",132,0)
 W !," months old before it can be purged.  Only insurance transactions that have a"
"RTN","IBCNEKIT",133,0)
 W !," transmission status of ""Response Received"", ""Communication Failure"", or"
"RTN","IBCNEKIT",134,0)
 W !," ""Cancelled"" may be purged.  You will be allowed to select a date range for"
"RTN","IBCNEKIT",135,0)
 W !," this purging.  The default beginning date will be the date of the oldest"
"RTN","IBCNEKIT",136,0)
 W !," eligible record in the system.  The default ending date will be six months"
"RTN","IBCNEKIT",137,0)
 W !," ago from today's date.  You may modify this default date range.  However, you"
"RTN","IBCNEKIT",138,0)
 W !," may not select an ending date that is more recent than six months ago."
"RTN","IBCNEKIT",139,0)
 W !!
"RTN","IBCNEKIT",140,0)
INITX ;
"RTN","IBCNEKIT",141,0)
 Q
"RTN","IBCNEKIT",142,0)
 ;
"RTN","IBCNEKIT",143,0)
BEGDT ; This procedure captures the beginning date from the user.
"RTN","IBCNEKIT",144,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",145,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",146,0)
 S DIR("A")="Enter the purge begin date: "
"RTN","IBCNEKIT",147,0)
 S DIR("B")=$$FMTE^XLFDT(BEGDT,"5Z")
"RTN","IBCNEKIT",148,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",149,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",150,0)
 I $D(DIRUT)!'Y S STOP=1 G BEGDTX
"RTN","IBCNEKIT",151,0)
 S BEGDT=Y
"RTN","IBCNEKIT",152,0)
BEGDTX ;
"RTN","IBCNEKIT",153,0)
 Q
"RTN","IBCNEKIT",154,0)
 ;
"RTN","IBCNEKIT",155,0)
ENDDT ; This procedure captures the ending date from the user.
"RTN","IBCNEKIT",156,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",157,0)
 W !
"RTN","IBCNEKIT",158,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",159,0)
 S DIR("A")="  Enter the purge end date: "
"RTN","IBCNEKIT",160,0)
 S DIR("B")=$$FMTE^XLFDT(ENDDT,"5Z")
"RTN","IBCNEKIT",161,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",162,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",163,0)
 I $D(DIRUT)!'Y S STOP=1 G ENDDTX
"RTN","IBCNEKIT",164,0)
 S ENDDT=Y
"RTN","IBCNEKIT",165,0)
ENDDTX ;
"RTN","IBCNEKIT",166,0)
 Q
"RTN","IBCNEKIT",167,0)
 ;
"RTN","IBCNEKIT",168,0)
CONFIRM ; This procedure displays a confirmation message to the user and
"RTN","IBCNEKIT",169,0)
 ; asks if it is OK to proceed with the purge.
"RTN","IBCNEKIT",170,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",171,0)
 W !!!," You want to purge all IIV data created between "
"RTN","IBCNEKIT",172,0)
 W $$FMTE^XLFDT(BEGDT,"5Z")," and ",$$FMTE^XLFDT(ENDDT,"5Z"),"."
"RTN","IBCNEKIT",173,0)
 W !
"RTN","IBCNEKIT",174,0)
 S DIR(0)="YO",DIR("A")=" OK to continue"
"RTN","IBCNEKIT",175,0)
 S DIR("B")="NO"
"RTN","IBCNEKIT",176,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",177,0)
 I 'Y S STOP=1
"RTN","IBCNEKIT",178,0)
CONFX ;
"RTN","IBCNEKIT",179,0)
 Q
"RTN","IBCNEKIT",180,0)
 ;
"RTN","IBCNEKIT",181,0)
QUEUE ; This procedure queues the purge process for later at night.
"RTN","IBCNEKIT",182,0)
 ; The concept for queueing the purge came from the insurance buffer
"RTN","IBCNEKIT",183,0)
 ; purge routine, IBCNBPG.  That purge process is also hard-coded to
"RTN","IBCNEKIT",184,0)
 ; be run at 8:00 PM just like this one is.
"RTN","IBCNEKIT",185,0)
 ;
"RTN","IBCNEKIT",186,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEKIT",187,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",188,0)
 S ZTRTN="PURGE^IBCNEKIT"     ; TaskMan task entry point
"RTN","IBCNEKIT",189,0)
 S ZTDESC="Purge IIV Data"    ; Task description
"RTN","IBCNEKIT",190,0)
 S ZTDTH=DT_".20"             ; start it at 8:00 PM tonight
"RTN","IBCNEKIT",191,0)
 S ZTIO=""
"RTN","IBCNEKIT",192,0)
 S ZTSAVE("BEGDT")=""
"RTN","IBCNEKIT",193,0)
 S ZTSAVE("ENDDT")=""
"RTN","IBCNEKIT",194,0)
 S ZTSAVE("STATLIST")=""
"RTN","IBCNEKIT",195,0)
 D ^%ZTLOAD
"RTN","IBCNEKIT",196,0)
 I $G(ZTSK) W !!," Task# ",ZTSK," has been scheduled to purge the IIV data tonight at 8:00 PM."
"RTN","IBCNEKIT",197,0)
 E  W !!," TaskManager could not schedule this task.",!," Contact IRM for technical assistance."
"RTN","IBCNEKIT",198,0)
 W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",199,0)
QUEUEX ;
"RTN","IBCNEKIT",200,0)
 Q
"RTN","IBCNEKIT",201,0)
 ;
"RTN","IBCNEKIT",202,0)
GETATTR ;GET NEEDED SCREEN ATTRIBUTES
"RTN","IBCNEKIT",203,0)
 ;INPUT  : IOST(0) - Terminal type [as set by entry into DHCP]
"RTN","IBCNEKIT",204,0)
 ;OUTPUT : The following screen attributes will be defined
"RTN","IBCNEKIT",205,0)
 ;           IOBON   - Blink on
"RTN","IBCNEKIT",206,0)
 ;           IOBOFF  - Blink off
"RTN","IBCNEKIT",207,0)
 ;           IORVON  - Reverse video on
"RTN","IBCNEKIT",208,0)
 ;           IORVOFF - Reverse video off
"RTN","IBCNEKIT",209,0)
 ;NOTES  : If IOST(0) is not defined, a call to HOME^%ZIS will be made
"RTN","IBCNEKIT",210,0)
 ;
"RTN","IBCNEKIT",211,0)
 ;Check for IOST(0)
"RTN","IBCNEKIT",212,0)
 D:('$D(IOST(0))) HOME^%ZIS
"RTN","IBCNEKIT",213,0)
 ;Declare variables
"RTN","IBCNEKIT",214,0)
 N X
"RTN","IBCNEKIT",215,0)
 ;Get screen attributes
"RTN","IBCNEKIT",216,0)
 S X="IOBON;IOBOFF;IORVON;IORVOFF"
"RTN","IBCNEKIT",217,0)
 D ENDR^%ZISS
"RTN","IBCNEKIT",218,0)
 Q
"RTN","IBCNEPST")
1^51
"RTN","IBCNEQU")
0^46^B85417611
"RTN","IBCNEQU",1,0)
IBCNEQU ;DAOU/BHS - IIV REQUEST ELECTRONIC INSURANCE INQUIRY ;24-JUN-2002
"RTN","IBCNEQU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEQU",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEQU",4,0)
 ;
"RTN","IBCNEQU",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNEQU",6,0)
 ;
"RTN","IBCNEQU",7,0)
 ; Must call from EN
"RTN","IBCNEQU",8,0)
 Q
"RTN","IBCNEQU",9,0)
 ;
"RTN","IBCNEQU",10,0)
EN ; Entry pt
"RTN","IBCNEQU",11,0)
 ; Init vars
"RTN","IBCNEQU",12,0)
 N DFN,X,POP,IBFASTXT,VALMCNT,VALMBG,VALMHDR,VALMBCK,IDUZ
"RTN","IBCNEQU",13,0)
 ;
"RTN","IBCNEQU",14,0)
EN1 I $G(IBFASTXT) G ENX
"RTN","IBCNEQU",15,0)
 S DFN=$$PAT I 'DFN G ENX
"RTN","IBCNEQU",16,0)
 D EN^VALM("IBCNE REQUEST INS INQUIRY LIST")
"RTN","IBCNEQU",17,0)
 G EN1
"RTN","IBCNEQU",18,0)
 ;
"RTN","IBCNEQU",19,0)
ENX ; EN exit pt
"RTN","IBCNEQU",20,0)
 Q
"RTN","IBCNEQU",21,0)
 ;
"RTN","IBCNEQU",22,0)
INIT ; -- set up initial variables
"RTN","IBCNEQU",23,0)
 S VALMCNT=0,VALMBG=1,IDUZ=DUZ
"RTN","IBCNEQU",24,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",25,0)
 D HDR
"RTN","IBCNEQU",26,0)
 D BLD(DFN)
"RTN","IBCNEQU",27,0)
 ;
"RTN","IBCNEQU",28,0)
INITX ; INIT exit pt
"RTN","IBCNEQU",29,0)
 Q
"RTN","IBCNEQU",30,0)
 ;
"RTN","IBCNEQU",31,0)
HDR ; -- screen header for initial screen
"RTN","IBCNEQU",32,0)
 N VA,VAERR,%DT,II
"RTN","IBCNEQU",33,0)
 D PID^VADPT
"RTN","IBCNEQU",34,0)
 S VALMHDR(1)="Request Electronic Insurance Inquiry for Patient: "_$E($P($G(^DPT(DFN,0)),U),1,20)_" "_$E($G(^(0)),1)_VA("BID")
"RTN","IBCNEQU",35,0)
 S VALMHDR(2)=" "
"RTN","IBCNEQU",36,0)
 S VALMHDR(3)=" "
"RTN","IBCNEQU",37,0)
 S II=1
"RTN","IBCNEQU",38,0)
 I +$$BUFFER^IBCNBU1(DFN) S II=II+1,VALMHDR(II)="*** Patient has Insurance Buffer Records"
"RTN","IBCNEQU",39,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S II=II+1,VALMHDR(II)="*** Date of Death: "_$$FMTE^XLFDT($P($G(^DPT(DFN,.35)),U)\1,"5Z")
"RTN","IBCNEQU",40,0)
 Q
"RTN","IBCNEQU",41,0)
 ;
"RTN","IBCNEQU",42,0)
HELP ; -- help code
"RTN","IBCNEQU",43,0)
 D FULL^VALM1
"RTN","IBCNEQU",44,0)
 W @IOF
"RTN","IBCNEQU",45,0)
 W !,"This screen lists all eligible (non-Medicaid/non-Medicare) Insurance policies"
"RTN","IBCNEQU",46,0)
 W !,"for the patient.  Selecting an entry in this list creates an Insurance Buffer"
"RTN","IBCNEQU",47,0)
 W !,"entry with Source 'eIIV' and Override Freshness Flag 'Yes'.  Setting this flag"
"RTN","IBCNEQU",48,0)
 W !,"is designed to force the IIV extract to attempt to create an insurance"
"RTN","IBCNEQU",49,0)
 W !,"inquiry based on this entry."
"RTN","IBCNEQU",50,0)
 W !!,"Entries with an asterisk (*) preceding the Insurance Co name already exist in"
"RTN","IBCNEQU",51,0)
 W !,"the Insurance Buffer with the exact same name, the exact same Group Number,"
"RTN","IBCNEQU",52,0)
 W !,"and the Override Freshness Flag set to 'Yes'.  Selecting an entry with an"
"RTN","IBCNEQU",53,0)
 W !,"asterisk (*) will create a duplicate entry in the Insurance Buffer file for"
"RTN","IBCNEQU",54,0)
 W !,"the patient."
"RTN","IBCNEQU",55,0)
 W !!,"An option is available to Search for All.  This creates a generalized"
"RTN","IBCNEQU",56,0)
 W !,"electronic inquiry to search for any VA known insurance information for the"
"RTN","IBCNEQU",57,0)
 W !,"selected patient.  The inquiry is transmitted as part of the nightly"
"RTN","IBCNEQU",58,0)
 W !,"IIV batch extract process."
"RTN","IBCNEQU",59,0)
 D PAUSE^VALM1
"RTN","IBCNEQU",60,0)
 S VALMBCK="R"
"RTN","IBCNEQU",61,0)
 Q
"RTN","IBCNEQU",62,0)
 ;
"RTN","IBCNEQU",63,0)
EXIT ; -- exit code
"RTN","IBCNEQU",64,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",65,0)
 Q
"RTN","IBCNEQU",66,0)
 ;
"RTN","IBCNEQU",67,0)
PAT() ; Prompt user to select a patient
"RTN","IBCNEQU",68,0)
 ; Init vars
"RTN","IBCNEQU",69,0)
 N DIC,X,Y,DISYS,%H,%I,DUOUT,DTOUT
"RTN","IBCNEQU",70,0)
 ;
"RTN","IBCNEQU",71,0)
 W !
"RTN","IBCNEQU",72,0)
 ; Exclude non-Veterans
"RTN","IBCNEQU",73,0)
 S DIC(0)="AEQMN"
"RTN","IBCNEQU",74,0)
 S DIC("S")="I $G(^(""VET""))=""Y"",('$P($G(^(0)),U,21))",DIC="^DPT("
"RTN","IBCNEQU",75,0)
 ;S DIC(0)="AEQMN",DIC("S")="I $G(^(""VET""))=""Y""",DIC="^DPT("
"RTN","IBCNEQU",76,0)
 D ^DIC
"RTN","IBCNEQU",77,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) Q ""
"RTN","IBCNEQU",78,0)
 ;
"RTN","IBCNEQU",79,0)
 Q +Y
"RTN","IBCNEQU",80,0)
 ;
"RTN","IBCNEQU",81,0)
BLD(DFN) ; Build list of all insurance for patient
"RTN","IBCNEQU",82,0)
 N IBCT,IBINS,IBDATA0,IBDATA1,IBDATA2,II,STR,IBINSIEN,IBINAME,IBHOLD
"RTN","IBCNEQU",83,0)
 N VNODT,X,POP,IBBUF,IBBUFNM,IBIEN,IBBUFDT,TMPNM,GRPNUM,SFANAME
"RTN","IBCNEQU",84,0)
 ;
"RTN","IBCNEQU",85,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",86,0)
 ;
"RTN","IBCNEQU",87,0)
 S (IBCT,VALMCNT)=0
"RTN","IBCNEQU",88,0)
 ;
"RTN","IBCNEQU",89,0)
 ; Determine if buffer entries exist for this DFN and build array by name
"RTN","IBCNEQU",90,0)
 S IBIEN=0
"RTN","IBCNEQU",91,0)
 F  S IBIEN=$O(^IBA(355.33,"C",DFN,IBIEN)) Q:'IBIEN  D
"RTN","IBCNEQU",92,0)
 . S IBBUFDT=$G(^IBA(355.33,IBIEN,0))
"RTN","IBCNEQU",93,0)
 . ; Include E status and those with Override Freshness Flags = 1
"RTN","IBCNEQU",94,0)
 . I $P(IBBUFDT,U,4)'="E"!('$P(IBBUFDT,U,13)) Q
"RTN","IBCNEQU",95,0)
 . S IBBUFNM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,20)),U))
"RTN","IBCNEQU",96,0)
 . I IBBUFNM="" Q
"RTN","IBCNEQU",97,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,40)),U,3))
"RTN","IBCNEQU",98,0)
 . S IBBUF(IBBUFNM," "_GRPNUM)=""
"RTN","IBCNEQU",99,0)
 . Q
"RTN","IBCNEQU",100,0)
 ;
"RTN","IBCNEQU",101,0)
 ; Populate IBINS array with Patient Insurance records
"RTN","IBCNEQU",102,0)
 D ALL^IBCNS1(DFN,"IBINS")
"RTN","IBCNEQU",103,0)
 I $G(IBINS(0)) S II=0 F  S II=$O(IBINS(II)) Q:'II  D
"RTN","IBCNEQU",104,0)
 . S IBDATA0=$G(IBINS(II,0))
"RTN","IBCNEQU",105,0)
 . S IBDATA1=$G(IBINS(II,1))
"RTN","IBCNEQU",106,0)
 . S IBDATA2=$G(^IBA(355.3,+$P(IBDATA0,U,18),0))
"RTN","IBCNEQU",107,0)
 . S GRPNUM=$$TRIM^XLFSTR($P(IBDATA2,U,4))
"RTN","IBCNEQU",108,0)
 . S IBINSIEN=+$P(IBDATA0,U)
"RTN","IBCNEQU",109,0)
 . Q:'IBINSIEN!'$D(^DIC(36,IBINSIEN,0))
"RTN","IBCNEQU",110,0)
 . S IBINAME=$P($G(^DIC(36,IBINSIEN,0)),U)
"RTN","IBCNEQU",111,0)
 . S TMPNM=$$TRIM^XLFSTR(IBINAME)
"RTN","IBCNEQU",112,0)
 . ; Filter Ins Co's by name - currently filter Medicare/Medicaid
"RTN","IBCNEQU",113,0)
 . I $$EXCLUDE^IBCNEUT4(TMPNM) Q
"RTN","IBCNEQU",114,0)
 . S IBCT=IBCT+1
"RTN","IBCNEQU",115,0)
 . S STR=""
"RTN","IBCNEQU",116,0)
 . S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",117,0)
 . ; Update IBINAME if found in buffer already
"RTN","IBCNEQU",118,0)
 . S IBINAME=$S($D(IBBUF(TMPNM," "_GRPNUM)):"*",1:"")_IBINAME
"RTN","IBCNEQU",119,0)
 . S STR=$$SETFLD^VALM1(IBINAME,STR,"NAME")
"RTN","IBCNEQU",120,0)
 . S STR=$$SETFLD^VALM1($E($P(IBDATA0,U,2),1,14),STR,"POLICY")
"RTN","IBCNEQU",121,0)
 . S IBHOLD=$P(IBDATA0,U,6),STR=$$SETFLD^VALM1($S(IBHOLD="v":"SELF",IBHOLD="s":"SPOUSE",IBHOLD="o":"OTHER",1:"UNKNOWN"),STR,"HOLDER")
"RTN","IBCNEQU",122,0)
 . S STR=$$SETFLD^VALM1($E($$GRP^IBCNS($P(IBDATA0,U,18)),1,10),STR,"GROUP")
"RTN","IBCNEQU",123,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,8),"5Z"),STR,"EFFDT")
"RTN","IBCNEQU",124,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,4),"5Z"),STR,"EXPIRE")
"RTN","IBCNEQU",125,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),1,8),STR,"TYPE")
"RTN","IBCNEQU",126,0)
 . S STR=$$SETFLD^VALM1($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),STR,"TYPEPOL")
"RTN","IBCNEQU",127,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^VA(200,+$P(IBDATA1,U,4),0)),U),1,15),STR,"VERIFIED BY")
"RTN","IBCNEQU",128,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA1,U,3),"5Z"),STR,"VERIFIED ON")
"RTN","IBCNEQU",129,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,6)),STR,"PRECERT")
"RTN","IBCNEQU",130,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,5)),STR,"UR")
"RTN","IBCNEQU",131,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA0,U,20)),STR,"COB")
"RTN","IBCNEQU",132,0)
 . D SET(STR)
"RTN","IBCNEQU",133,0)
 ;
"RTN","IBCNEQU",134,0)
 S IBCT=IBCT+1
"RTN","IBCNEQU",135,0)
 S STR="",II=""
"RTN","IBCNEQU",136,0)
 S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",137,0)
 S SFANAME=$S($$ADD():"*",1:"")_"Search for All"
"RTN","IBCNEQU",138,0)
 S STR=$$SETFLD^VALM1(SFANAME,STR,"NAME")
"RTN","IBCNEQU",139,0)
 S IBINAME="~NO PAYER",IBDATA0=""
"RTN","IBCNEQU",140,0)
 D SET(STR)
"RTN","IBCNEQU",141,0)
 ;
"RTN","IBCNEQU",142,0)
 S VNODT=$G(^IBA(354,DFN,50)) I VNODT D
"RTN","IBCNEQU",143,0)
 . S IBCT=IBCT+1,VALMCNT=VALMCNT+1
"RTN","IBCNEQU",144,0)
 . S ^TMP("IBCNEQU",$J,IBCT,0)="      Verification of No Coverage "_$$FMTE^XLFDT(VNODT,"5Z")
"RTN","IBCNEQU",145,0)
 ;
"RTN","IBCNEQU",146,0)
BLDX ; BLD exit pt
"RTN","IBCNEQU",147,0)
 Q
"RTN","IBCNEQU",148,0)
 ;
"RTN","IBCNEQU",149,0)
SET(LINE) ; -- set arrays
"RTN","IBCNEQU",150,0)
 ; LINE - line of text to display
"RTN","IBCNEQU",151,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",152,0)
 S ^TMP("IBCNEQU",$J,VALMCNT,0)=LINE
"RTN","IBCNEQU",153,0)
 S ^TMP("IBCNEQU",$J,"IDX",VALMCNT,IBCT)=""
"RTN","IBCNEQU",154,0)
 S ^TMP("IBCNEQUX",$J,IBCT)=VALMCNT_U_DFN_U_II_U_IBINAME_U_IBDATA0
"RTN","IBCNEQU",155,0)
 Q
"RTN","IBCNEQU",156,0)
 ;
"RTN","IBCNEQU",157,0)
YN(X) ; -- convert 1 or 0 to yes/no/unknown
"RTN","IBCNEQU",158,0)
 Q $S(X=0:"NO",X=1:"YES",1:"UNK")
"RTN","IBCNEQU",159,0)
 ;
"RTN","IBCNEQU",160,0)
SELECT ; User selects insurance from list to be reconfirmed
"RTN","IBCNEQU",161,0)
 N IBDATA,IBDPT,IBDA,DIR,X,Y,D0,DG,DIC,DISYS,DIW,IENS,IBERROR,IBIEN,IBSYM
"RTN","IBCNEQU",162,0)
 ;
"RTN","IBCNEQU",163,0)
 D FULL^VALM1
"RTN","IBCNEQU",164,0)
 S (IBDPT,IBDA,IBERROR)=""
"RTN","IBCNEQU",165,0)
 S IBDATA=$$SEL
"RTN","IBCNEQU",166,0)
 S IBDPT=+$P(IBDATA,U)       ; Patient DFN
"RTN","IBCNEQU",167,0)
 S IBDA=+$P(IBDATA,U,2)      ; 2.312 ptr
"RTN","IBCNEQU",168,0)
 I +IBDPT,+IBDA D
"RTN","IBCNEQU",169,0)
 . S IBIEN=+$P(IBDATA,U,4)     ; Ins Co IEN (#36)
"RTN","IBCNEQU",170,0)
 . S IBSYM=+$$INSERROR^IBCNEUT3("I",IBIEN)
"RTN","IBCNEQU",171,0)
 . D PT^IBCNEBF(IBDPT,IBDA,IBSYM,1,1,.IBERROR)
"RTN","IBCNEQU",172,0)
 . ; Check for errors
"RTN","IBCNEQU",173,0)
 . I $G(IBERROR)'="" W !!,"Insurance Buffer entry could not be created due to error!  Please try again.",!
"RTN","IBCNEQU",174,0)
 . I $G(IBERROR)="" W !!,"Insurance Buffer entry created!",!
"RTN","IBCNEQU",175,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",176,0)
 ;
"RTN","IBCNEQU",177,0)
 I $P(IBDATA,U,3)="~NO PAYER" D
"RTN","IBCNEQU",178,0)
 . N PTNAME
"RTN","IBCNEQU",179,0)
 . S PTNAME=$P($G(^DPT(IBDPT,0)),U)
"RTN","IBCNEQU",180,0)
 . W !!,"A request to search for all known insurance information for patient"
"RTN","IBCNEQU",181,0)
 . W !,PTNAME," will be processed overnight."
"RTN","IBCNEQU",182,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",183,0)
 . D BLKTQ
"RTN","IBCNEQU",184,0)
 S VALMBCK="R"
"RTN","IBCNEQU",185,0)
 ;
"RTN","IBCNEQU",186,0)
 Q
"RTN","IBCNEQU",187,0)
 ;
"RTN","IBCNEQU",188,0)
SEL() ; User selects insurance from list
"RTN","IBCNEQU",189,0)
 N IBSELN,DIR,X,Y,DIRUT,DUOUT
"RTN","IBCNEQU",190,0)
 ;
"RTN","IBCNEQU",191,0)
 S IBSELN=""
"RTN","IBCNEQU",192,0)
 ; Select entry to reconfirm
"RTN","IBCNEQU",193,0)
 S DIR(0)="NO^1:"_VALMCNT_":0"
"RTN","IBCNEQU",194,0)
 S DIR("A")="Select entry to request electronic inquiry"
"RTN","IBCNEQU",195,0)
 S DIR("?",1)="  Select an entry to initiate an insurance inquiry."
"RTN","IBCNEQU",196,0)
 S DIR("?",2)="  If entry contains an Insurance Co name, an Insurance"
"RTN","IBCNEQU",197,0)
 S DIR("?",3)="  Buffer entry will be created for nightly batch extract."
"RTN","IBCNEQU",198,0)
 S DIR("?",4)="  Select 'Search for All' entry to find all identified"
"RTN","IBCNEQU",199,0)
 S DIR("?",5)="  insurances for this patient."
"RTN","IBCNEQU",200,0)
 S DIR("?")="  "
"RTN","IBCNEQU",201,0)
 D ^DIR K DIR
"RTN","IBCNEQU",202,0)
 I $D(DIRUT)!$D(DUOUT)!(Y<1) G SELX
"RTN","IBCNEQU",203,0)
 S IBSELN=$O(^TMP("IBCNEQU",$J,"IDX",Y,0))
"RTN","IBCNEQU",204,0)
 I IBSELN S IBSELN=$P($G(^TMP("IBCNEQUX",$J,IBSELN)),U,2,99)
"RTN","IBCNEQU",205,0)
 I $E($P(IBSELN,U,3))="*" W !!,"Selecting this entry will create a duplicate entry in the Insurance Buffer."
"RTN","IBCNEQU",206,0)
 ;
"RTN","IBCNEQU",207,0)
 W !
"RTN","IBCNEQU",208,0)
 S DIR(0)="Y"
"RTN","IBCNEQU",209,0)
 S DIR("A")="Are you sure you want to request an insurance inquiry"
"RTN","IBCNEQU",210,0)
 S DIR("B")="NO"
"RTN","IBCNEQU",211,0)
 S DIR("?",1)="  If yes, a request will be created for the nightly batch."
"RTN","IBCNEQU",212,0)
 D ^DIR K DIR
"RTN","IBCNEQU",213,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) S IBSELN=""
"RTN","IBCNEQU",214,0)
 ;
"RTN","IBCNEQU",215,0)
SELX Q IBSELN
"RTN","IBCNEQU",216,0)
 ;
"RTN","IBCNEQU",217,0)
FASTEXIT ; Sets flag to indicate a quick exit from the option
"RTN","IBCNEQU",218,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNEQU",219,0)
 S VALMBCK="Q"
"RTN","IBCNEQU",220,0)
 D FULL^VALM1
"RTN","IBCNEQU",221,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO"
"RTN","IBCNEQU",222,0)
 D ^DIR
"RTN","IBCNEQU",223,0)
 I +Y S IBFASTXT=1
"RTN","IBCNEQU",224,0)
 Q
"RTN","IBCNEQU",225,0)
 ;
"RTN","IBCNEQU",226,0)
ADD() ;
"RTN","IBCNEQU",227,0)
 NEW PAYER,TQIEN,OK,STR,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",228,0)
 I '$D(^IBCN(365.1,"E",DFN)) Q 0  ; Does this pt have a TQ entry?
"RTN","IBCNEQU",229,0)
 S (TQIEN,OK)=""
"RTN","IBCNEQU",230,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER") ; Get payer IEN
"RTN","IBCNEQU",231,0)
 F  S TQIEN=$O(^IBCN(365.1,"E",DFN,TQIEN)) Q:'TQIEN!OK  D
"RTN","IBCNEQU",232,0)
 . S STR=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEQU",233,0)
 . ; If "~NO PAYER" & Transmitted
"RTN","IBCNEQU",234,0)
 . I $P(STR,U,3)=PAYER,$P(STR,U,4)=2 S OK=1 Q
"RTN","IBCNEQU",235,0)
 . ; If "~NO PAYER" & Ready to Transmit & override flag
"RTN","IBCNEQU",236,0)
 . I $P(STR,U,3)=PAYER,($P(STR,U,4)=1),($P(STR,U,14)=1) S OK=1 Q
"RTN","IBCNEQU",237,0)
 I 'OK Q 0
"RTN","IBCNEQU",238,0)
 Q 1
"RTN","IBCNEQU",239,0)
 ;
"RTN","IBCNEQU",240,0)
BLKTQ ;  Create a ~NO PAYER request for 'Search for All'
"RTN","IBCNEQU",241,0)
 NEW PAYER,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",242,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEQU",243,0)
 D NPINIT ; Update service date and freshness
"RTN","IBCNEQU",244,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEQU",245,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEQU",246,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEQU",247,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,"",1)
"RTN","IBCNEQU",248,0)
 Q
"RTN","IBCNEQU",249,0)
 ;
"RTN","IBCNEQU",250,0)
BLKX Q
"RTN","IBCNEQU",251,0)
 ;
"RTN","IBCNEQU",252,0)
NPINIT ; Initialize variables for ~NO PAYER
"RTN","IBCNEQU",253,0)
 S SRVICEDT=DT
"RTN","IBCNEQU",254,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U)
"RTN","IBCNEQU",255,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEQU",256,0)
 ;
"RTN","IBCNEQU",257,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEQU",258,0)
 Q
"RTN","IBCNERP0")
0^25^B5712540
"RTN","IBCNERP0",1,0)
IBCNERP0 ;DAOU/BHS - IBCNE IIV STATISTICAL REPORT (cont'd) ;11-JUN-2002
"RTN","IBCNERP0",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP0",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP0",4,0)
 ;
"RTN","IBCNERP0",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP0",6,0)
 ;
"RTN","IBCNERP0",7,0)
 ; PYR tag called by IBCNERP8
"RTN","IBCNERP0",8,0)
 ;
"RTN","IBCNERP0",9,0)
 ; Cannot be called from top of routine
"RTN","IBCNERP0",10,0)
 Q
"RTN","IBCNERP0",11,0)
 ;
"RTN","IBCNERP0",12,0)
PYR(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP0",13,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP0",14,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP0",15,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP0",16,0)
 ; Output vars: Set ^TMP($J,RTN,"PYR",PAYER NAME,IEN of file 365.12)=""
"RTN","IBCNERP0",17,0)
 N PIEN,PYR,CREATEDT,APPIEN,APPDATA
"RTN","IBCNERP0",18,0)
 ;S BDT=$P(BDT,"."),EDT=$P(EDT,".")
"RTN","IBCNERP0",19,0)
 S PIEN=0 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D
"RTN","IBCNERP0",20,0)
 . S TOT=TOT+1
"RTN","IBCNERP0",21,0)
 . S CREATEDT=$P($G(^IBE(365.12,PIEN,0)),U,4)
"RTN","IBCNERP0",22,0)
 . I CREATEDT=""!(CREATEDT<BDT)!(CREATEDT>EDT) Q
"RTN","IBCNERP0",23,0)
 . S PYR=$P($G(^IBE(365.12,PIEN,0)),U)
"RTN","IBCNERP0",24,0)
 . Q:PYR="~NO PAYER"       ; used internally only - not a real IIV payer
"RTN","IBCNERP0",25,0)
 . ;
"RTN","IBCNERP0",26,0)
 . ; Get Payer app multiple IEN
"RTN","IBCNERP0",27,0)
 . S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP0",28,0)
 . ; Must have eIIV application
"RTN","IBCNERP0",29,0)
 . I 'APPIEN Q
"RTN","IBCNERP0",30,0)
 . S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP0",31,0)
 . ; Must be Nationally Active
"RTN","IBCNERP0",32,0)
 . I '$P(APPDATA,U,2) Q
"RTN","IBCNERP0",33,0)
 . ;
"RTN","IBCNERP0",34,0)
 . S ^TMP($J,RTN,"PYR",PYR,PIEN)=""
"RTN","IBCNERP0",35,0)
 Q
"RTN","IBCNERP0",36,0)
 ;
"RTN","IBCNERP0",37,0)
HEADER(HDRDATA,PGC,PXT,MAX,CRT,SITE,DTMRNG,MM) ; Print header info for each pg
"RTN","IBCNERP0",38,0)
 ; Init vars
"RTN","IBCNERP0",39,0)
 N CT,HDRCT,LIN,HDR
"RTN","IBCNERP0",40,0)
 ;
"RTN","IBCNERP0",41,0)
 ; Prompt to print next page for reports to the screen
"RTN","IBCNERP0",42,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP0",43,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP0",44,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP0",45,0)
 . I $D(DTOUT)!$D(DUOUT) S PXT=1 Q
"RTN","IBCNERP0",46,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERP0",47,0)
 ;
"RTN","IBCNERP0",48,0)
 ; Update page ct
"RTN","IBCNERP0",49,0)
 S PGC=PGC+1
"RTN","IBCNERP0",50,0)
 ;
"RTN","IBCNERP0",51,0)
 ; Update header based on MailMan message flag
"RTN","IBCNERP0",52,0)
 S HDRCT=0
"RTN","IBCNERP0",53,0)
 S HDRCT=HDRCT+1,HDRDATA(HDRCT)="IIV Statistical Report"_$$FO^IBCNEUT1($$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,56,"R")
"RTN","IBCNERP0",54,0)
 ;S HDRDATA(HDRCT)=$$FO^IBCNEUT1(SITE,(80-$L(SITE)\2)+$L(SITE),"R"),HDRCT=HDRCT+1
"RTN","IBCNERP0",55,0)
 S HDR="Report Timeframe:"
"RTN","IBCNERP0",56,0)
 S HDRCT=HDRCT+1,HDRDATA(HDRCT)=$$FO^IBCNEUT1(HDR,80-$L(HDR)\2+$L(HDR),"R")
"RTN","IBCNERP0",57,0)
 S HDRCT=HDRCT+1,HDRDATA(HDRCT)=$$FO^IBCNEUT1(DTMRNG,(80-$L(DTMRNG)\2)+$L(DTMRNG),"R")
"RTN","IBCNERP0",58,0)
 ;
"RTN","IBCNERP0",59,0)
 I MM S HDRCT=HDRCT+1,HDRDATA(HDRCT)=""
"RTN","IBCNERP0",60,0)
 ; Only write out Header for non-MailMan message output
"RTN","IBCNERP0",61,0)
 I MM="" W @IOF F CT=1:1:HDRCT W !,?1,HDRDATA(CT)
"RTN","IBCNERP0",62,0)
 ;
"RTN","IBCNERP0",63,0)
HEADERX ; HEADER exit pt
"RTN","IBCNERP0",64,0)
 Q
"RTN","IBCNERP0",65,0)
 ;
"RTN","IBCNERP1")
0^4^B76118662
"RTN","IBCNERP1",1,0)
IBCNERP1 ;DAOU/BHS - IBCNE USER IF IIV RESPONSE REPORT ;03-JUN-2002
"RTN","IBCNERP1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP1",4,0)
 ;
"RTN","IBCNERP1",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP1",6,0)
 ;
"RTN","IBCNERP1",7,0)
 ; Input parameters: N/A
"RTN","IBCNERP1",8,0)
 ; Other relevant variables ZTSAVED for queueing:
"RTN","IBCNERP1",9,0)
 ;  IBCNERTN = "IBCNERP1" (current routine name for queueing the 
"RTN","IBCNERP1",10,0)
 ;   COMPILE process)
"RTN","IBCNERP1",11,0)
 ;  IBCNESPC("BEGDT")=start dt for rpt
"RTN","IBCNERP1",12,0)
 ;  IBCNESPC("ENDDT")=end dt for rpt
"RTN","IBCNERP1",13,0)
 ;  IBCNESPC("PYR")=payer ien (365.12) or "" for all payers
"RTN","IBCNERP1",14,0)
 ;  IBCNESPC("SORT")=1 (Payer name) OR 2 (Patient name)
"RTN","IBCNERP1",15,0)
 ;  IBCNESPC("PAT")=patient ien (2) or "" for all patients
"RTN","IBCNERP1",16,0)
 ;  IBCNESPC("TYPE")=A (All Responses) for date range OR M (Most Recent
"RTN","IBCNERP1",17,0)
 ;   Responses) for date range (by unique Payer/Pat pair)
"RTN","IBCNERP1",18,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null all other params are null
"RTN","IBCNERP1",19,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP1",20,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous 
"RTN","IBCNERP1",21,0)
 ;   Report (2).
"RTN","IBCNERP1",22,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP1",23,0)
 ;
"RTN","IBCNERP1",24,0)
 ; Only call this routine at a tag
"RTN","IBCNERP1",25,0)
 Q
"RTN","IBCNERP1",26,0)
EN(IPRF) ; Main entry pt
"RTN","IBCNERP1",27,0)
 ; Init vars
"RTN","IBCNERP1",28,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP1",29,0)
 S IBCNESPC("RFLAG")=$G(IPRF)
"RTN","IBCNERP1",30,0)
 ;
"RTN","IBCNERP1",31,0)
 S STOP=0
"RTN","IBCNERP1",32,0)
 S IBCNERTN="IBCNERP1"
"RTN","IBCNERP1",33,0)
 W @IOF
"RTN","IBCNERP1",34,0)
 W !,"IIV ",$S(IPRF=1:"Inactive Policy",IPRF=2:"Ambiguous Policy",1:"Response")," Report",!
"RTN","IBCNERP1",35,0)
 I $G(IPRF) D
"RTN","IBCNERP1",36,0)
 . W !,"Please select a date range to view ",$S(IPRF=1:"inactive",1:"ambiguous")," policy information that the IIV"
"RTN","IBCNERP1",37,0)
 . W !,"process turned up while attempting to discover previously unknown"
"RTN","IBCNERP1",38,0)
 . W !,"insurance policies. (Date range selection is based on the date that"
"RTN","IBCNERP1",39,0)
 . W !,"IIV receives the response from the payer.)"
"RTN","IBCNERP1",40,0)
 ;
"RTN","IBCNERP1",41,0)
 I '$G(IPRF) D
"RTN","IBCNERP1",42,0)
 . W !,"Insurance verification and identification responses are received daily."
"RTN","IBCNERP1",43,0)
 . W !,"Please select a date range in which responses were received to view the"
"RTN","IBCNERP1",44,0)
 . W !,"associated response detail.  Otherwise, select a Trace # to view specific"
"RTN","IBCNERP1",45,0)
 . W !,"response detail."
"RTN","IBCNERP1",46,0)
 ;
"RTN","IBCNERP1",47,0)
 ; Rpt by Date Range or Trace #
"RTN","IBCNERP1",48,0)
R05 I '$G(IPRF) D RTYPE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",49,0)
 ; If rpt by Trace # - no other criteria is necessary
"RTN","IBCNERP1",50,0)
 I $G(IBCNESPC("TRCN")) G R100
"RTN","IBCNERP1",51,0)
 ; Date Range params
"RTN","IBCNERP1",52,0)
R10 D DTRANGE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",53,0)
 ; Payer Selection param
"RTN","IBCNERP1",54,0)
R20 D PYRSEL I STOP G:$$STOP EXIT G R10
"RTN","IBCNERP1",55,0)
 ; Patient Selection param
"RTN","IBCNERP1",56,0)
R30 D PTSEL I STOP G:$$STOP EXIT G R20
"RTN","IBCNERP1",57,0)
 ; Type of data to return param
"RTN","IBCNERP1",58,0)
R40 D TYPE I STOP G:$$STOP EXIT G R30
"RTN","IBCNERP1",59,0)
 ; How far back do you want the expiration date
"RTN","IBCNERP1",60,0)
R45 I $G(IPRF)=1 D DTEXP I STOP G:$$STOP EXIT G R40
"RTN","IBCNERP1",61,0)
 ; Sort by param - Payer or Patient
"RTN","IBCNERP1",62,0)
R50 D SORT I STOP G:$$STOP EXIT G R45
"RTN","IBCNERP1",63,0)
 ; Select output device
"RTN","IBCNERP1",64,0)
R100 D DEVICE(IBCNERTN,.IBCNESPC) I STOP G:$$STOP EXIT G:$G(IBCNESPC("TRCN"))'="" R05 G R50
"RTN","IBCNERP1",65,0)
 G EXIT
"RTN","IBCNERP1",66,0)
 ;
"RTN","IBCNERP1",67,0)
EXIT ; Exit pt
"RTN","IBCNERP1",68,0)
 Q
"RTN","IBCNERP1",69,0)
 ;
"RTN","IBCNERP1",70,0)
 ;
"RTN","IBCNERP1",71,0)
COMPILE(IBCNERTN,IBCNESPC) ; 
"RTN","IBCNERP1",72,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCNERP1",73,0)
 ; Input params:
"RTN","IBCNERP1",74,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",75,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",76,0)
 ;
"RTN","IBCNERP1",77,0)
 ; Init scratch globals
"RTN","IBCNERP1",78,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",79,0)
 ; Compile
"RTN","IBCNERP1",80,0)
 I IBCNERTN="IBCNERP1" D EN^IBCNERP2(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",81,0)
 I IBCNERTN="IBCNERP4" D EN^IBCNERP5(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",82,0)
 I IBCNERTN="IBCNERP7" D EN^IBCNERP8(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",83,0)
 ; Print
"RTN","IBCNERP1",84,0)
 I '$G(ZTSTOP) D
"RTN","IBCNERP1",85,0)
 . I IBCNERTN="IBCNERP1" D EN3^IBCNERPA(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",86,0)
 . I IBCNERTN="IBCNERP4" D EN6^IBCNERPA(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",87,0)
 . I IBCNERTN="IBCNERP7" D EN^IBCNERP9(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",88,0)
 ; Close device
"RTN","IBCNERP1",89,0)
 D ^%ZISC
"RTN","IBCNERP1",90,0)
 ; Kill scratch globals
"RTN","IBCNERP1",91,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",92,0)
 ; Purge task record
"RTN","IBCNERP1",93,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERP1",94,0)
 ;
"RTN","IBCNERP1",95,0)
COMPILX ; COMPILE exit pt
"RTN","IBCNERP1",96,0)
 Q
"RTN","IBCNERP1",97,0)
 ;
"RTN","IBCNERP1",98,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCNERP1",99,0)
 ; Init vars
"RTN","IBCNERP1",100,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",101,0)
 ;
"RTN","IBCNERP1",102,0)
 W !
"RTN","IBCNERP1",103,0)
 S DIR(0)="Y"
"RTN","IBCNERP1",104,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCNERP1",105,0)
 S DIR("B")="YES"
"RTN","IBCNERP1",106,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","IBCNERP1",107,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","IBCNERP1",108,0)
 D ^DIR K DIR
"RTN","IBCNERP1",109,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCNERP1",110,0)
 I 'Y S STOP=0
"RTN","IBCNERP1",111,0)
 ;
"RTN","IBCNERP1",112,0)
STOPX ; STOP exit pt
"RTN","IBCNERP1",113,0)
 Q Y
"RTN","IBCNERP1",114,0)
 ;
"RTN","IBCNERP1",115,0)
DTRANGE ; Determine start and end dates for date range param
"RTN","IBCNERP1",116,0)
 ; Init vars
"RTN","IBCNERP1",117,0)
 N X,Y,DIRUT
"RTN","IBCNERP1",118,0)
 ;
"RTN","IBCNERP1",119,0)
 W !
"RTN","IBCNERP1",120,0)
 ;
"RTN","IBCNERP1",121,0)
 S DIR(0)="D^:-NOW:EX"
"RTN","IBCNERP1",122,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP1",123,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Response"
"RTN","IBCNERP1",124,0)
 S DIR("?")="   would have been received. Future dates are not allowed."
"RTN","IBCNERP1",125,0)
 D ^DIR K DIR
"RTN","IBCNERP1",126,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",127,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP1",128,0)
 ; End date
"RTN","IBCNERP1",129,0)
DTRANG1 S DIR(0)="DA^"_Y_":-NOW:EX"
"RTN","IBCNERP1",130,0)
 S DIR("A")="  End DATE:  "
"RTN","IBCNERP1",131,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Response"
"RTN","IBCNERP1",132,0)
 S DIR("?",2)="   would have been received.  This date must not precede"
"RTN","IBCNERP1",133,0)
 S DIR("?")="   the Start Date.  Future dates are not allowed."
"RTN","IBCNERP1",134,0)
 D ^DIR K DIR
"RTN","IBCNERP1",135,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",136,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP1",137,0)
 ;
"RTN","IBCNERP1",138,0)
DTRANGX ; DTRANGE exit pt
"RTN","IBCNERP1",139,0)
 Q
"RTN","IBCNERP1",140,0)
 ;
"RTN","IBCNERP1",141,0)
PYRSEL ; Select one payer or ALL - File #365.12
"RTN","IBCNERP1",142,0)
 ; Init vars
"RTN","IBCNERP1",143,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERP1",144,0)
 ;
"RTN","IBCNERP1",145,0)
 W !
"RTN","IBCNERP1",146,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERP1",147,0)
 S DIC("A")=$$FO^IBCNEUT1("Payer or <Return> for All Payers: ",40,"R")
"RTN","IBCNERP1",148,0)
 ; Do not allow selection of '~NO PAYER' and non-IIV payers
"RTN","IBCNERP1",149,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER""),$$PYRAPP^IBCNEUT5(""IIV"",$G(Y))'="""""
"RTN","IBCNERP1",150,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERP1",151,0)
 D ^DIC
"RTN","IBCNERP1",152,0)
 I $D(DUOUT)!$D(DTOUT) S STOP=1 G PYRSELX
"RTN","IBCNERP1",153,0)
 ; If nothing was selected (Y=-1), select ALL payers
"RTN","IBCNERP1",154,0)
 S IBCNESPC("PYR")=$S(Y=-1:"",1:$P(Y,U,1))
"RTN","IBCNERP1",155,0)
 ;
"RTN","IBCNERP1",156,0)
PYRSELX ; PYRSEL exit pt
"RTN","IBCNERP1",157,0)
 Q
"RTN","IBCNERP1",158,0)
 ;
"RTN","IBCNERP1",159,0)
PTSEL ; Select one patient or ALL - File #2
"RTN","IBCNERP1",160,0)
 ; Init vars
"RTN","IBCNERP1",161,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERP1",162,0)
 ; Patient lookup
"RTN","IBCNERP1",163,0)
 W !
"RTN","IBCNERP1",164,0)
 S DIC(0)="AEQM"
"RTN","IBCNERP1",165,0)
 S DIC("A")=$$FO^IBCNEUT1("Patient or <Return> for All Patients: ",40,"R")
"RTN","IBCNERP1",166,0)
 S DIC="^DPT("
"RTN","IBCNERP1",167,0)
 D ^DIC
"RTN","IBCNERP1",168,0)
 I $D(DUOUT)!$D(DTOUT) S STOP=1 G PTSELX
"RTN","IBCNERP1",169,0)
 ; If nothing was selected (Y=-1), select ALL patients
"RTN","IBCNERP1",170,0)
 S IBCNESPC("PAT")=$S(Y=-1:"",1:$P(Y,U,1))
"RTN","IBCNERP1",171,0)
 ;
"RTN","IBCNERP1",172,0)
PTSELX ; PTSEL exit pt
"RTN","IBCNERP1",173,0)
 Q
"RTN","IBCNERP1",174,0)
 ;
"RTN","IBCNERP1",175,0)
TYPE ; Prompt to select to display All or Most Recent Responses for
"RTN","IBCNERP1",176,0)
 ; Patient/Payer combos
"RTN","IBCNERP1",177,0)
 ; Init vars
"RTN","IBCNERP1",178,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",179,0)
 ;
"RTN","IBCNERP1",180,0)
 S DIR(0)="S^A:All Responses;M:Most Recent Responses"
"RTN","IBCNERP1",181,0)
 S DIR("A")="Select the type of responses to display"
"RTN","IBCNERP1",182,0)
 S DIR("B")="A"
"RTN","IBCNERP1",183,0)
 S DIR("?",1)="  A - All responses from the payer during the date range will be"
"RTN","IBCNERP1",184,0)
 S DIR("?",2)="      displayed for each unique payer/patient combination."
"RTN","IBCNERP1",185,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",186,0)
 S DIR("?",4)="  M - Only the most recently received response from the payer"
"RTN","IBCNERP1",187,0)
 S DIR("?",5)="      during the date range will be displayed for each unique"
"RTN","IBCNERP1",188,0)
 S DIR("?")="      payer/patient combination."
"RTN","IBCNERP1",189,0)
 D ^DIR K DIR
"RTN","IBCNERP1",190,0)
 I $D(DIRUT) S STOP=1 G TYPEX
"RTN","IBCNERP1",191,0)
 S IBCNESPC("TYPE")=Y
"RTN","IBCNERP1",192,0)
 ;
"RTN","IBCNERP1",193,0)
TYPEX ; TYPE exit pt
"RTN","IBCNERP1",194,0)
 Q
"RTN","IBCNERP1",195,0)
 ;
"RTN","IBCNERP1",196,0)
DTEXP ; Prompt for oldest expiration date to pull for.
"RTN","IBCNERP1",197,0)
 ; Init Vars
"RTN","IBCNERP1",198,0)
 N Y,DIRUT,TODAY
"RTN","IBCNERP1",199,0)
 ;
"RTN","IBCNERP1",200,0)
 W !
"RTN","IBCNERP1",201,0)
 ;
"RTN","IBCNERP1",202,0)
 S DIR(0)="D^:-NOW:EX"
"RTN","IBCNERP1",203,0)
 S DIR("A")="Earliest Policy Expiration Date to Select From"
"RTN","IBCNERP1",204,0)
 S DIR("B")="T-365"
"RTN","IBCNERP1",205,0)
 S DIR("?",1)=" Please enter a valid date in the past. Any policy with a reported"
"RTN","IBCNERP1",206,0)
 S DIR("?")=" expiration date prior to this date will not be selected."
"RTN","IBCNERP1",207,0)
 D ^DIR K DIR
"RTN","IBCNERP1",208,0)
 I $D(DIRUT) S STOP=1 G DTEXPX
"RTN","IBCNERP1",209,0)
 S IBCNESPC("DTEXP")=Y
"RTN","IBCNERP1",210,0)
 ;
"RTN","IBCNERP1",211,0)
DTEXPX ; DTEXP Exit
"RTN","IBCNERP1",212,0)
 Q
"RTN","IBCNERP1",213,0)
 ;
"RTN","IBCNERP1",214,0)
SORT ; Prompt to allow users to sort the report by Payer(default) or 
"RTN","IBCNERP1",215,0)
 ;  Patient
"RTN","IBCNERP1",216,0)
 ; Init vars
"RTN","IBCNERP1",217,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",218,0)
 ;
"RTN","IBCNERP1",219,0)
 S DIR(0)="S^1:Payer Name;2:Patient Name"
"RTN","IBCNERP1",220,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERP1",221,0)
 S DIR("B")=1
"RTN","IBCNERP1",222,0)
 S DIR("?",1)="  1 - Payer Name is the primary sort, Patient Name is secondary."
"RTN","IBCNERP1",223,0)
 S DIR("?",2)="      (Default)"
"RTN","IBCNERP1",224,0)
 S DIR("?")="  2 - Patient Name is the primary sort, Payer Name is secondary."
"RTN","IBCNERP1",225,0)
 D ^DIR K DIR
"RTN","IBCNERP1",226,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP1",227,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP1",228,0)
 ;
"RTN","IBCNERP1",229,0)
SORTX ; SORT exit pt
"RTN","IBCNERP1",230,0)
 Q
"RTN","IBCNERP1",231,0)
 ;
"RTN","IBCNERP1",232,0)
RTYPE ; Prompt to allow users to report by date range or Trace #
"RTN","IBCNERP1",233,0)
 ; Init vars
"RTN","IBCNERP1",234,0)
 N D,DIC,DIR,X,Y,DIRUT,DTOUT,DUOUT
"RTN","IBCNERP1",235,0)
 ;
"RTN","IBCNERP1",236,0)
 S DIR(0)="S^1:Report by Date Range;2:Report by Trace #"
"RTN","IBCNERP1",237,0)
 S DIR("A")="Select the type of report to generate"
"RTN","IBCNERP1",238,0)
 S DIR("B")=1
"RTN","IBCNERP1",239,0)
 S DIR("?",1)="  1 - Generate report by date range, payer range, patient range"
"RTN","IBCNERP1",240,0)
 S DIR("?",2)="      and All or Most Recent responses for payer/patient."
"RTN","IBCNERP1",241,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",242,0)
 S DIR("?",4)="  2 - Generate report for a specific Trace # which corresponds"
"RTN","IBCNERP1",243,0)
 S DIR("?")="      to an unique response."
"RTN","IBCNERP1",244,0)
 D ^DIR K DIR
"RTN","IBCNERP1",245,0)
 I $D(DIRUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",246,0)
 I Y=1 S IBCNESPC("TRCN")="" G RTYPEX
"RTN","IBCNERP1",247,0)
 ;
"RTN","IBCNERP1",248,0)
 ; Allow user to select Trace # from x-ref "C"
"RTN","IBCNERP1",249,0)
 W !
"RTN","IBCNERP1",250,0)
 S DIC(0)="AEVZSQ"
"RTN","IBCNERP1",251,0)
 S DIC="^IBCN(365,",D="C",DIC("A")="Enter Trace # for report: "
"RTN","IBCNERP1",252,0)
 S DIC("W")="N IBX S IBX=$P($G(^(0)),U,2,3) W:$P(IBX,U,1) $P($G(^DPT($P(IBX,U,1),0)),U,1) W:$P(IBX,U,2) ""  ""_$P($G(^IBE(365.12,$P(IBX,U,2),0)),U,1)"
"RTN","IBCNERP1",253,0)
 D IX^DIC K DIC
"RTN","IBCNERP1",254,0)
 I $D(DTOUT)!$D(DUOUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",255,0)
 I 'Y!(Y<0) S STOP=1 G RTYPEX
"RTN","IBCNERP1",256,0)
 S IBCNESPC("TRCN")=$P(Y(0),U,9)_"^"_$P(Y,U,1)
"RTN","IBCNERP1",257,0)
 ;
"RTN","IBCNERP1",258,0)
RTYPEX ; RTYPE exit pt
"RTN","IBCNERP1",259,0)
 Q
"RTN","IBCNERP1",260,0)
 ;
"RTN","IBCNERP1",261,0)
DEVICE(IBCNERTN,IBCNESPC) ; Device Handler and possible TaskManager calls
"RTN","IBCNERP1",262,0)
 ;
"RTN","IBCNERP1",263,0)
 ; Input params:
"RTN","IBCNERP1",264,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",265,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",266,0)
 ;
"RTN","IBCNERP1",267,0)
 ; Init vars
"RTN","IBCNERP1",268,0)
 N ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCNERP1",269,0)
 ;
"RTN","IBCNERP1",270,0)
 I IBCNERTN="IBCNERP4" W !!!,"*** This report is 132 characters wide ***",!
"RTN","IBCNERP1",271,0)
 S ZTRTN="COMPILE^IBCNERP1("""_IBCNERTN_""",.IBCNESPC)"
"RTN","IBCNERP1",272,0)
 S ZTDESC="IBCNE IIV "_$S(IBCNERTN="IBCNERP1":"Response",1:"Payer")_" Report"
"RTN","IBCNERP1",273,0)
 S ZTSAVE("IBCNESPC(")=""
"RTN","IBCNERP1",274,0)
 S ZTSAVE("IBCNERTN")=""
"RTN","IBCNERP1",275,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE)
"RTN","IBCNERP1",276,0)
 I POP S STOP=1
"RTN","IBCNERP1",277,0)
 ;
"RTN","IBCNERP1",278,0)
DEVICEX ; DEVICE exit pt
"RTN","IBCNERP1",279,0)
 Q
"RTN","IBCNERP1",280,0)
 ;
"RTN","IBCNERP2")
0^5^B33851537
"RTN","IBCNERP2",1,0)
IBCNERP2 ;DAOU/BHS - IBCNE IIV RESPONSE REPORT COMPILE ;03-JUN-2002
"RTN","IBCNERP2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP2",4,0)
 ;
"RTN","IBCNERP2",5,0)
 ; Input vars from IBCNERP1:
"RTN","IBCNERP2",6,0)
 ;  IBCNERTN="IBCNERP1"
"RTN","IBCNERP2",7,0)
 ;  IBCNESPC("BEGDT")=Start Dt for rpt
"RTN","IBCNERP2",8,0)
 ;  IBCNESPC("ENDDT")=End Dt for rpt
"RTN","IBCNERP2",9,0)
 ;  IBCNESPC("PYR")=Pyr IEN for rpt. If "", then show all.
"RTN","IBCNERP2",10,0)
 ;  IBCNESPC("PAT")=Pt IEN for rpt. If "", then show all.
"RTN","IBCNERP2",11,0)
 ;  IBCNESPC("TYPE")=A (All Responses) for date range OR M (Most Recent
"RTN","IBCNERP2",12,0)
 ;   Responses) for date range (by unique Pyr/Pt pair)
"RTN","IBCNERP2",13,0)
 ;  IBCNESPC("SORT")=1 (Pyr nm) OR 2 (Pt nm)
"RTN","IBCNERP2",14,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all other params are null
"RTN","IBCNERP2",15,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP2",16,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous
"RTN","IBCNERP2",17,0)
 ;   Report (2).
"RTN","IBCNERP2",18,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP2",19,0)
 ;
"RTN","IBCNERP2",20,0)
 ; Output vars used by IBCNERP3:
"RTN","IBCNERP2",21,0)
 ;  Structure of ^TMP based on IIV Response File (#365)
"RTN","IBCNERP2",22,0)
 ;   IBCNERTN="IBCNERP1"
"RTN","IBCNERP2",23,0)
 ;   SORT1=PyrNm (SORT=1) or PtNm(SORT=2)
"RTN","IBCNERP2",24,0)
 ;   SORT2=PtNm (SORT=1) or PyrNm (SORT=2)
"RTN","IBCNERP2",25,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT,0/1) based on ^IBCN(365,DA,0/1)
"RTN","IBCNERP2",26,0)
 ;   CNT=Seq ct
"RTN","IBCNERP2",27,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,2,EBCT) based on ^IBCN(365,DA,2,EBCT,0)
"RTN","IBCNERP2",28,0)
 ;   EBCT = Elig/Benefit multiple field IEN (ptr to 365.02)
"RTN","IBCNERP2",29,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,2,EBCT,NTCT) based on
"RTN","IBCNERP2",30,0)
 ;   ^IBCN(365,DA,2,EB,0,NT,0) Notes for EB seg
"RTN","IBCNERP2",31,0)
 ;   NTCT = Notes Ct may not equal Notes IEN (365.22) if ln must wrap
"RTN","IBCNERP2",32,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,3,CNCT) based on ^IBCN(365,DA,3,CNCT,0)
"RTN","IBCNERP2",33,0)
 ;   CNCT = Contact Person multiple field IEN (ptr to 365.03)
"RTN","IBCNERP2",34,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,4,CT) based on ^IBCN(365,DA,4)
"RTN","IBCNERP2",35,0)
 ;    CT=1 if len of text <=70, else ln is split
"RTN","IBCNERP2",36,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,5,CT) based on # lns of comments reqd
"RTN","IBCNERP2",37,0)
 ;    CT=1 to display future retransmission date
"RTN","IBCNERP2",38,0)
 ;
"RTN","IBCNERP2",39,0)
 ; Must call at EN
"RTN","IBCNERP2",40,0)
 Q
"RTN","IBCNERP2",41,0)
 ;
"RTN","IBCNERP2",42,0)
 ;
"RTN","IBCNERP2",43,0)
EN(IBCNERTN,IBCNESPC) ; Entry
"RTN","IBCNERP2",44,0)
 ; Init
"RTN","IBCNERP2",45,0)
 N IBDT,IBBDT,IBPY,IBPYR,IBPT
"RTN","IBCNERP2",46,0)
 N IBPAT,IBPTR,SORT1,SORT2,RPTDATA,IBTOT
"RTN","IBCNERP2",47,0)
 N PYRIEN,PATIEN,IBTRC,IBTYP,IBCT,IBSRT,IBEXP,FRST,TQN,DONTINC,IPRF
"RTN","IBCNERP2",48,0)
 ;
"RTN","IBCNERP2",49,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP2",50,0)
 ;
"RTN","IBCNERP2",51,0)
 ; Temp ct
"RTN","IBCNERP2",52,0)
 S (IBTOT,IBCT)=0
"RTN","IBCNERP2",53,0)
 ;
"RTN","IBCNERP2",54,0)
 ; Kill scratch globals
"RTN","IBCNERP2",55,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP2",56,0)
 ;
"RTN","IBCNERP2",57,0)
 S IBTRC=$G(IBCNESPC("TRCN"))
"RTN","IBCNERP2",58,0)
 ; Skip for TRACE#
"RTN","IBCNERP2",59,0)
 I IBTRC'="" G TRCN
"RTN","IBCNERP2",60,0)
 ;
"RTN","IBCNERP2",61,0)
 S IBBDT=IBCNESPC("BEGDT")
"RTN","IBCNERP2",62,0)
 S IBPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERP2",63,0)
 S IBPT=$G(IBCNESPC("PAT"))
"RTN","IBCNERP2",64,0)
 S IBTYP=$G(IBCNESPC("TYPE"))
"RTN","IBCNERP2",65,0)
 S IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERP2",66,0)
 S IBEXP=$G(IBCNESPC("DTEXP"))
"RTN","IBCNERP2",67,0)
 S IPRF=$G(IBCNESPC("RFLAG"))
"RTN","IBCNERP2",68,0)
 ;
"RTN","IBCNERP2",69,0)
 ; Loop thru the IIV Response File (#365) by Date/Time Response Rec X-Ref
"RTN","IBCNERP2",70,0)
 ; S IBDT=$O(^IBCN(365,"AD",IBCNESPC("ENDDT")))
"RTN","IBCNERP2",71,0)
 ; Initialize IBDT to end date 
"RTN","IBCNERP2",72,0)
 S IBDT=IBCNESPC("ENDDT")_".999999"
"RTN","IBCNERP2",73,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT),-1) Q:IBDT=""!($P(IBDT,".",1)<IBBDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",74,0)
 . S PYRIEN=$S(IBPY="":0,1:$O(^IBCN(365,"AD",IBDT,IBPY),-1))
"RTN","IBCNERP2",75,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN!((IBPY'="")&(PYRIEN'=IBPY))  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",76,0)
 .. I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP2",77,0)
 .. ; Pyr nm from Pyr File (#365.12)
"RTN","IBCNERP2",78,0)
 .. S IBPYR=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP2",79,0)
 .. I IBPYR="" Q
"RTN","IBCNERP2",80,0)
 .. S PATIEN=$S(IBPT="":0,1:$O(^IBCN(365,"AD",IBDT,PYRIEN,IBPT),-1))
"RTN","IBCNERP2",81,0)
 .. F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN!((IBPT'="")&(PATIEN'=IBPT))  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",82,0)
 ... ; Pt nm from Pt File (#2)
"RTN","IBCNERP2",83,0)
 ... S IBPAT=$P($G(^DPT(PATIEN,0)),U)
"RTN","IBCNERP2",84,0)
 ... I IBPAT="" Q
"RTN","IBCNERP2",85,0)
 ... S IBPTR=0
"RTN","IBCNERP2",86,0)
 ... F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",87,0)
 .... S IBTOT=IBTOT+1
"RTN","IBCNERP2",88,0)
 .... ; Since non-positive identifications are no longer placed in the 
"RTN","IBCNERP2",89,0)
 .... ; insurance buffer, two new reports were added to allow users to
"RTN","IBCNERP2",90,0)
 .... ; view the responses.  One report (IPFR=1) shows only responses
"RTN","IBCNERP2",91,0)
 .... ; of inactive policies.  The other (IPFR=2) shows ambiguous responses.
"RTN","IBCNERP2",92,0)
 .... ; Any response that is not active nor inactive is considered 
"RTN","IBCNERP2",93,0)
 .... ; ambiguous for the purposes of this report.
"RTN","IBCNERP2",94,0)
 .... I IPRF D  Q:DONTINC
"RTN","IBCNERP2",95,0)
 ..... N EBIC,NODE1,PCD
"RTN","IBCNERP2",96,0)
 ..... S DONTINC=1
"RTN","IBCNERP2",97,0)
 ..... S TQN=$P($G(^IBCN(365,IBPTR,0)),U,5) Q:TQN=""  ; TQ ien (#365.1)
"RTN","IBCNERP2",98,0)
 ..... S NODE1=$G(^IBCN(365,IBPTR,1))
"RTN","IBCNERP2",99,0)
 ..... I $P($G(^IBCN(365.1,TQN,0)),U,11)="V" Q     ; If verification quit
"RTN","IBCNERP2",100,0)
 ..... I IPRF=1,($P(NODE1,U,12)="")!($P(NODE1,U,12)<$G(IBEXP)) Q
"RTN","IBCNERP2",101,0)
 ..... S FRST=$O(^IBCN(365,IBPTR,2,0))
"RTN","IBCNERP2",102,0)
 ..... I FRST="" Q
"RTN","IBCNERP2",103,0)
 ..... S PCD=$P($G(^IBCN(365,IBPTR,2,FRST,0)),U,6)
"RTN","IBCNERP2",104,0)
 ..... I PCD]"",PCD'="IIV Eligibility Determination" Q
"RTN","IBCNERP2",105,0)
 ..... S EBIC=$$GET1^DIQ(365.02,FRST_","_IBPTR_",","ELIGIBILITY/BENEFIT INFO:CODE")
"RTN","IBCNERP2",106,0)
 ..... I PCD]"",IPRF=1,EBIC'=6 Q
"RTN","IBCNERP2",107,0)
 ..... I PCD]"",IPRF=2,EBIC=6!(EBIC=1) Q
"RTN","IBCNERP2",108,0)
 ..... I $P(NODE1,U,14)]"" Q  ; Error Condition
"RTN","IBCNERP2",109,0)
 ..... I $P(NODE1,U,15)]"" Q  ; Error Action
"RTN","IBCNERP2",110,0)
 ..... I $P($G(^IBCN(365,IBPTR,4)),U)]"" Q  ; Error Text
"RTN","IBCNERP2",111,0)
 ..... S DONTINC=0
"RTN","IBCNERP2",112,0)
 ....;
"RTN","IBCNERP2",113,0)
 .... I $D(ZTQUEUED),IBTOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP2",114,0)
 .... ; Sort fields
"RTN","IBCNERP2",115,0)
 .... S SORT1=$S(IBSRT=1:IBPYR,1:IBPAT)
"RTN","IBCNERP2",116,0)
 .... S SORT2=$S(IBSRT=1:IBPAT,1:IBPYR)
"RTN","IBCNERP2",117,0)
 .... ; Only check for Most Recent - Pyr/Pt pair
"RTN","IBCNERP2",118,0)
 .... I IBTYP="M",$D(^TMP($J,IBCNERTN_"X",PYRIEN,PATIEN)) Q
"RTN","IBCNERP2",119,0)
 .... ; Set temp ind.
"RTN","IBCNERP2",120,0)
 .... I IBTYP="M" S ^TMP($J,IBCNERTN_"X",PYRIEN,PATIEN)=""
"RTN","IBCNERP2",121,0)
 .... ; Update ct
"RTN","IBCNERP2",122,0)
 .... S IBCT=IBCT+1
"RTN","IBCNERP2",123,0)
 .... ; Sort data - build RPTDATA array
"RTN","IBCNERP2",124,0)
 .... K RPTDATA
"RTN","IBCNERP2",125,0)
 .... D GETDATA^IBCNERPE(IBPTR,.RPTDATA)
"RTN","IBCNERP2",126,0)
 .... ; Merge data from RPTDATA to ^TMP
"RTN","IBCNERP2",127,0)
 .... ;M ^TMP($J,IBCNERTN,SORT1,SORT2,IBCT)=RPTDATA
"RTN","IBCNERP2",128,0)
 .... N %X,%Y
"RTN","IBCNERP2",129,0)
 .... S %X="RPTDATA("
"RTN","IBCNERP2",130,0)
 .... S %Y="^TMP($J,IBCNERTN,SORT1,SORT2,IBCT,"
"RTN","IBCNERP2",131,0)
 .... I $D(RPTDATA)#10=1 S ^TMP($J,IBCNERTN,SORT1,SORT2,IBCT)=RPTDATA
"RTN","IBCNERP2",132,0)
 .... D %XY^%RCR K %X,%Y
"RTN","IBCNERP2",133,0)
 ;
"RTN","IBCNERP2",134,0)
 ; Purge index of duplicate Pyr/Pt combos
"RTN","IBCNERP2",135,0)
 K ^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP2",136,0)
 ;
"RTN","IBCNERP2",137,0)
 G EXIT
"RTN","IBCNERP2",138,0)
 ;
"RTN","IBCNERP2",139,0)
TRCN ; Trace # proc.
"RTN","IBCNERP2",140,0)
 S IBPTR=$P(IBTRC,U,2)
"RTN","IBCNERP2",141,0)
 I IBPTR="" G EXIT
"RTN","IBCNERP2",142,0)
 ; Sort the data - build RPTDATA array
"RTN","IBCNERP2",143,0)
 KILL RPTDATA
"RTN","IBCNERP2",144,0)
 D GETDATA^IBCNERPE(IBPTR,.RPTDATA)
"RTN","IBCNERP2",145,0)
 ; Default sort - one record
"RTN","IBCNERP2",146,0)
 ; Pyr nm from Pyr File (#365.12)
"RTN","IBCNERP2",147,0)
 S PYRIEN=$P(RPTDATA(0),U,3)
"RTN","IBCNERP2",148,0)
 I PYRIEN="" G EXIT
"RTN","IBCNERP2",149,0)
 S SORT1=$P($G(^IBE(365.12,PYRIEN,0)),U,1)
"RTN","IBCNERP2",150,0)
 I SORT1="" G EXIT
"RTN","IBCNERP2",151,0)
 ; Pt nm from Pt File (#2)
"RTN","IBCNERP2",152,0)
 S PATIEN=$P(RPTDATA(0),U,2)
"RTN","IBCNERP2",153,0)
 I PATIEN="" G EXIT
"RTN","IBCNERP2",154,0)
 S SORT2=$P($G(^DPT(PATIEN,0)),U,1)
"RTN","IBCNERP2",155,0)
 I SORT2="" G EXIT
"RTN","IBCNERP2",156,0)
 ; Merge data- RPTDATA to ^TMP
"RTN","IBCNERP2",157,0)
 ;M ^TMP($J,IBCNERTN,SORT1,SORT2,1)=RPTDATA
"RTN","IBCNERP2",158,0)
 N %X,%Y
"RTN","IBCNERP2",159,0)
 S %X="RPTDATA("
"RTN","IBCNERP2",160,0)
 S %Y="^TMP($J,IBCNERTN,SORT1,SORT2,1,"
"RTN","IBCNERP2",161,0)
 I $D(RPTDATA)#10=1 S ^TMP($J,IBCNERTN,SORT1,SORT2,1)=RPTDATA
"RTN","IBCNERP2",162,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERP2",163,0)
 ;
"RTN","IBCNERP2",164,0)
EXIT ;
"RTN","IBCNERP2",165,0)
 Q
"RTN","IBCNERP2",166,0)
 ;
"RTN","IBCNERP2",167,0)
X12(FILE,CODE,FLD) ; Output based on File # and X12 code
"RTN","IBCNERP2",168,0)
 I $G(FILE)=""!($G(CODE)="") Q ""
"RTN","IBCNERP2",169,0)
 ; Quit w/o label if not defined in File Def.
"RTN","IBCNERP2",170,0)
 Q $$LBL(365.02,$G(FLD))_$P($G(^IBE(FILE,CODE,0)),U,2)
"RTN","IBCNERP2",171,0)
 ;
"RTN","IBCNERP2",172,0)
LBL(FILE,FLD) ; Determine label from File Def.
"RTN","IBCNERP2",173,0)
 N IBLBL
"RTN","IBCNERP2",174,0)
 ;
"RTN","IBCNERP2",175,0)
 I $G(FILE)=""!($G(FLD)="") Q ""
"RTN","IBCNERP2",176,0)
 S IBLBL=$$GET1^DID(FILE,FLD,"","TITLE")
"RTN","IBCNERP2",177,0)
 Q $S(IBLBL'="":IBLBL_": ",1:"")
"RTN","IBCNERP2",178,0)
 ;
"RTN","IBCNERP3")
0^1^B33550221
"RTN","IBCNERP3",1,0)
IBCNERP3 ;DAOU/BHS - IBCNE IIV RESPONSE REPORT PRINT ;03-JUN-2002
"RTN","IBCNERP3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP3",4,0)
 ;
"RTN","IBCNERP3",5,0)
 ; IIV - Insurance Identification and Verification
"RTN","IBCNERP3",6,0)
 ;
"RTN","IBCNERP3",7,0)
 ; Called by IBCNERPA
"RTN","IBCNERP3",8,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERP3",9,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERP3",10,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERP3",11,0)
 ;  IBCNESPC("PYR")=Pyr IEN OR "" for all
"RTN","IBCNERP3",12,0)
 ;  IBCNESPC("PAT")=Pat IEN OR "" for all
"RTN","IBCNERP3",13,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERP3",14,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERP3",15,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERP3",16,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERP3",17,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP3",18,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous
"RTN","IBCNERP3",19,0)
 ;   Report (2).
"RTN","IBCNERP3",20,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP3",21,0)
 ;
"RTN","IBCNERP3",22,0)
 ;  Based on structure of IIV Response File (#365)
"RTN","IBCNERP3",23,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERP3",24,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERP3",25,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERP3",26,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERP3",27,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERP3",28,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERP3",29,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERP3",30,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERP3",31,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERP3",32,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERP3",33,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERP3",34,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERP3",35,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,5,CT)= based on # lines of comments reqd
"RTN","IBCNERP3",36,0)
 ;   CT=1 to display future retransmission date
"RTN","IBCNERP3",37,0)
 ; Must call at appropriate tag
"RTN","IBCNERP3",38,0)
 Q
"RTN","IBCNERP3",39,0)
 ;
"RTN","IBCNERP3",40,0)
PRINT(RTN,BDT,EDT,PYR,PAT,TYP,SRT,PGC,PXT,MAX,CRT,TRC,EXP,IPRF) ; Print data
"RTN","IBCNERP3",41,0)
 ; Input: RTN="IBCENRP1", BDT=start dt, EDT=end dt, PYR=pyr ien,
"RTN","IBCNERP3",42,0)
 ;  PAT= pat ien, TYP=A/M, SRT=1/2, PGC=page ct, PXT=exit flg,
"RTN","IBCNERP3",43,0)
 ; MAX=max line ct/pg, CRT=1/0, TRC=trc#, EXP=earliest expiration date
"RTN","IBCNERP3",44,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT,EBFLG,CNFLG,ERFLG,PRT1,PRT2  ;,DISPDATA
"RTN","IBCNERP3",45,0)
 N OPRT1,OPRT2 ; Original values for PRT1 and PRT2, respectively
"RTN","IBCNERP3",46,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP3",47,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP3",48,0)
 S (SORT1,SORT2)=""
"RTN","IBCNERP3",49,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERP3",50,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",51,0)
 . S (OPRT1,PRT1)=$S(SORT1="~NO PAYER":"* No Payer Identified",1:SORT1)
"RTN","IBCNERP3",52,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",53,0)
 . . S (OPRT2,PRT2)=$S(SORT2="~NO PAYER":"* No Payer Identified",1:SORT2)
"RTN","IBCNERP3",54,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",55,0)
 . . . D SSDB ; add SSN (from ^DPT) and DOB to patient header info
"RTN","IBCNERP3",56,0)
 . . . D HEADER
"RTN","IBCNERP3",57,0)
 . . . I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",58,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERP3",59,0)
 . . . D DATA^IBCNERPE(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERP3",60,0)
 ;
"RTN","IBCNERP3",61,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",62,0)
 S (EBFLG,CNFLG,ERFLG)=0
"RTN","IBCNERP3",63,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",64,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERP3",65,0)
PRINTX ;
"RTN","IBCNERP3",66,0)
 Q
"RTN","IBCNERP3",67,0)
 ;
"RTN","IBCNERP3",68,0)
HEADER ; Print hdr info
"RTN","IBCNERP3",69,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERP3",70,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP3",71,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP3",72,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP3",73,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERP3",74,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERP3",75,0)
 S PGC=PGC+1
"RTN","IBCNERP3",76,0)
 W @IOF,!,?1,$S($G(IPRF)=1:"IIV Inactive Policy Report",$G(IPRF)=2:"IIV Ambiguous Policy Report",1:"IIV Response Report") I TRC'="" W " by Trace #"
"RTN","IBCNERP3",77,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,OFFSET=79-$L(HDR)
"RTN","IBCNERP3",78,0)
 W ?OFFSET,HDR
"RTN","IBCNERP3",79,0)
 I TRC'="" S HDR="Trace #: "_TRC,OFFSET=80-$L(HDR)\2 W !,?OFFSET,HDR
"RTN","IBCNERP3",80,0)
 I TRC="" D
"RTN","IBCNERP3",81,0)
 . W !,?1,"Sorted by: "_$S(SRT=1:"Payer",1:"Patient")_" Name"
"RTN","IBCNERP3",82,0)
 . S HDR="Responses Displayed: "_$S(TYP="M":"Most Recent",1:"All")
"RTN","IBCNERP3",83,0)
 . S OFFSET=79-$L(HDR)
"RTN","IBCNERP3",84,0)
 . W ?OFFSET,HDR
"RTN","IBCNERP3",85,0)
 . I $G(IPRF)=1 W !,?1,"Earliest Policy Expiration Date: ",$$FMTE^XLFDT(EXP,"5Z"),!
"RTN","IBCNERP3",86,0)
 . S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP3",87,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",88,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",89,0)
 . ; Disp SORT1 rng
"RTN","IBCNERP3",90,0)
 . S HDR=""
"RTN","IBCNERP3",91,0)
 . I SRT=1,PYR="" S HDR="All Payers"
"RTN","IBCNERP3",92,0)
 . I SRT=2,PAT="" S HDR="All Patients"
"RTN","IBCNERP3",93,0)
 . I HDR="" D
"RTN","IBCNERP3",94,0)
 ..  I SRT=1 S HDR=$P($G(^IBE(365.12,PYR,0)),U,1) Q
"RTN","IBCNERP3",95,0)
 ..  S HDR=$P($G(^DPT(PAT,0)),U,1)
"RTN","IBCNERP3",96,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",97,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",98,0)
 . ; Disp SORT2 rng
"RTN","IBCNERP3",99,0)
 . S HDR=""
"RTN","IBCNERP3",100,0)
 . I SRT=1,PAT="" S HDR="All Patients"
"RTN","IBCNERP3",101,0)
 . I SRT=2,PYR="" S HDR="All Payers"
"RTN","IBCNERP3",102,0)
 . I HDR="" D
"RTN","IBCNERP3",103,0)
 .. I SRT=1 S HDR=$P($G(^DPT(PAT,0)),U,1) Q
"RTN","IBCNERP3",104,0)
 .. S HDR=$P($G(^IBE(365.12,PYR,0)),U,1)
"RTN","IBCNERP3",105,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",106,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",107,0)
 W !
"RTN","IBCNERP3",108,0)
 ; Build disp
"RTN","IBCNERP3",109,0)
 I SORT1'="",SORT2'="" D
"RTN","IBCNERP3",110,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"  Payer: ",1:"Patient: "),9)_$E(PRT1,1,69)
"RTN","IBCNERP3",111,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"Patient: ",1:"  Payer: "),9)_$E(PRT2,1,69)
"RTN","IBCNERP3",112,0)
 . W !
"RTN","IBCNERP3",113,0)
HEADERX ;
"RTN","IBCNERP3",114,0)
 Q
"RTN","IBCNERP3",115,0)
 ;
"RTN","IBCNERP3",116,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERP3",117,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERP3",118,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP3",119,0)
 S (EBFLG,CNFLG,ERFLG,NWPG)=0
"RTN","IBCNERP3",120,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP3",121,0)
 . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",122,0)
 . I DISPDATA(LNCT)="Eligibility/Benefit Information:"!(DISPDATA(LNCT)="Contact Information:")!(DISPDATA(LNCT)="Error Information:"),$Y+3>MAX S (EBFLG,CNFLG,ERFLG)=0 D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",123,0)
 . I EBFLG,DISPDATA(LNCT)="",($G(DISPDATA(LNCT+1))="Contact Information:")!($G(DISPDATA(LNCT+1))="Error Information") S EBFLG=0
"RTN","IBCNERP3",124,0)
 . I CNFLG,DISPDATA(LNCT)="",$G(DISPDATA(LNCT+1))="Error Information:" S CNFLG=0
"RTN","IBCNERP3",125,0)
 . I NWPG,EBFLG W !,?1,"Eligibility/Benefit Information: (cont'd)",!
"RTN","IBCNERP3",126,0)
 . I NWPG,CNFLG W !,?1,"Contact Information: (cont'd)",!
"RTN","IBCNERP3",127,0)
 . I NWPG,ERFLG W !,?1,"Error Information: (cont'd)",!
"RTN","IBCNERP3",128,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERP3",129,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP3",130,0)
 . I DISPDATA(LNCT)["Eligibility/Benefit Information:" S EBFLG=1,(CNFLG,ERFLG)=0
"RTN","IBCNERP3",131,0)
 . I DISPDATA(LNCT)["Contact Information:" S (EBFLG,ERFLG)=0,CNFLG=1
"RTN","IBCNERP3",132,0)
 . I DISPDATA(LNCT)["Error Information:" S (EBFLG,CNFLG)=0,ERFLG=1
"RTN","IBCNERP3",133,0)
 . Q
"RTN","IBCNERP3",134,0)
 S (EBFLG,CNFLG,ERFLG)=0
"RTN","IBCNERP3",135,0)
LINEX ; 
"RTN","IBCNERP3",136,0)
 Q
"RTN","IBCNERP3",137,0)
 ;
"RTN","IBCNERP3",138,0)
SSDB ; Display last 4 digits of SSN and DOB to facilitate pt. identification
"RTN","IBCNERP3",139,0)
 ; $$SSN^IBCNEDEQ(DFN) returns SSN followed by DOB
"RTN","IBCNERP3",140,0)
 ;
"RTN","IBCNERP3",141,0)
 N DFN
"RTN","IBCNERP3",142,0)
 S DFN=$P($G(^TMP($J,RTN,SORT1,SORT2,CNT,0)),U,2)
"RTN","IBCNERP3",143,0)
 I DFN D
"RTN","IBCNERP3",144,0)
 . I SRT=1!TRC S PRT2=OPRT2_$$SSN^IBCNEDEQ(DFN) Q
"RTN","IBCNERP3",145,0)
 . S PRT1=OPRT1_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNERP3",146,0)
 Q
"RTN","IBCNERP4")
0^8^B13084938
"RTN","IBCNERP4",1,0)
IBCNERP4 ;DAOU/BHS - IBCNE USER IF IIV PAYER REPORT ;03-JUN-2002
"RTN","IBCNERP4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP4",4,0)
 ;
"RTN","IBCNERP4",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP4",6,0)
 ;
"RTN","IBCNERP4",7,0)
 ; Input parameter: N/A
"RTN","IBCNERP4",8,0)
 ; Other relevant variables:
"RTN","IBCNERP4",9,0)
 ;   IBCNERTN = "IBCNERP4" (current routine name for queueing the 
"RTN","IBCNERP4",10,0)
 ;                          COMPILE process)
"RTN","IBCNERP4",11,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERP4",12,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERP4",13,0)
 ;   IBCNESPC("PYR") = payer ien for report, if = "", then include all
"RTN","IBCNERP4",14,0)
 ;   IBCNESPC("SORT") = 1 - Payer name OR 2 - Total Inqs (PAYER)
"RTN","IBCNERP4",15,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO  Include Rejection Detail in
"RTN","IBCNERP4",16,0)
 ;                     report output - rejections broken down by code
"RTN","IBCNERP4",17,0)
 ;
"RTN","IBCNERP4",18,0)
 ; Enter only from EN tag
"RTN","IBCNERP4",19,0)
 QUIT
"RTN","IBCNERP4",20,0)
 ;
"RTN","IBCNERP4",21,0)
 ; Entry point
"RTN","IBCNERP4",22,0)
EN ;
"RTN","IBCNERP4",23,0)
 ; Initialize variables
"RTN","IBCNERP4",24,0)
 NEW STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP4",25,0)
 ;
"RTN","IBCNERP4",26,0)
 S STOP=0
"RTN","IBCNERP4",27,0)
 S IBCNERTN="IBCNERP4"
"RTN","IBCNERP4",28,0)
 W @IOF
"RTN","IBCNERP4",29,0)
 W !,"IIV Payer Report",!
"RTN","IBCNERP4",30,0)
 W !,"Insurance identification and verification inquiries are created daily."
"RTN","IBCNERP4",31,0)
 W !,"Select a date range in which inquiries were created by the eIIV extracts."
"RTN","IBCNERP4",32,0)
 ;
"RTN","IBCNERP4",33,0)
 ; Prompts for Payer Report
"RTN","IBCNERP4",34,0)
 ; Date Range parameters
"RTN","IBCNERP4",35,0)
P10 D DTRANGE I STOP G EXIT
"RTN","IBCNERP4",36,0)
 ; Payer Selection parameter
"RTN","IBCNERP4",37,0)
P20 D PYRSEL^IBCNERP1 I STOP G:$$STOP^IBCNERP1 EXIT G P10
"RTN","IBCNERP4",38,0)
 ; Include Rejection Detail in Payer report
"RTN","IBCNERP4",39,0)
P30 D REJDTL I STOP G:$$STOP^IBCNERP1 EXIT G P20
"RTN","IBCNERP4",40,0)
 ; Sort by parameter - Payer or Total Inquiries
"RTN","IBCNERP4",41,0)
P40 D SORT I STOP G:$$STOP^IBCNERP1 EXIT G P30
"RTN","IBCNERP4",42,0)
 ; Select the output device
"RTN","IBCNERP4",43,0)
P100 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC) I STOP G:$$STOP^IBCNERP1 EXIT G P40
"RTN","IBCNERP4",44,0)
 ;
"RTN","IBCNERP4",45,0)
EXIT ; Quit this routine
"RTN","IBCNERP4",46,0)
 QUIT
"RTN","IBCNERP4",47,0)
 ;
"RTN","IBCNERP4",48,0)
 ;
"RTN","IBCNERP4",49,0)
SORT ; Prompt to allow users to sort the report
"RTN","IBCNERP4",50,0)
 ;  by Payer(default) OR Total Inquiries, then Payer
"RTN","IBCNERP4",51,0)
 ; Initialize variables
"RTN","IBCNERP4",52,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",53,0)
 ;
"RTN","IBCNERP4",54,0)
 S DIR(0)="S^1:Payer Name;2:Total Inquiries"
"RTN","IBCNERP4",55,0)
 S DIR("A")=" Select the primary sort field"
"RTN","IBCNERP4",56,0)
 S DIR("B")=1
"RTN","IBCNERP4",57,0)
 S DIR("?",1)="  1 - Payer Name is the only sort. (Default)"
"RTN","IBCNERP4",58,0)
 S DIR("?",2)="  2 - Total Inquiries is the primary sort, Payer Name is"
"RTN","IBCNERP4",59,0)
 S DIR("?")="      the secondary sort."
"RTN","IBCNERP4",60,0)
 D ^DIR K DIR
"RTN","IBCNERP4",61,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP4",62,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP4",63,0)
 ;
"RTN","IBCNERP4",64,0)
SORTX ; SORT exit point
"RTN","IBCNERP4",65,0)
 QUIT
"RTN","IBCNERP4",66,0)
 ;
"RTN","IBCNERP4",67,0)
 ;
"RTN","IBCNERP4",68,0)
REJDTL ; Prompt to allow users to include the Rejection Detail in the report
"RTN","IBCNERP4",69,0)
 ; Initialize variables
"RTN","IBCNERP4",70,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",71,0)
 ;
"RTN","IBCNERP4",72,0)
 S DIR(0)="Y"
"RTN","IBCNERP4",73,0)
 S DIR("A")="      Include Rejection Detail"
"RTN","IBCNERP4",74,0)
 S DIR("B")="NO"
"RTN","IBCNERP4",75,0)
 S DIR("?",1)="  N - No, exclude Rejection Detail totals from report. (Default)"
"RTN","IBCNERP4",76,0)
 S DIR("?")="  Y - Yes, include Rejection Detail totals in report."
"RTN","IBCNERP4",77,0)
 D ^DIR K DIR
"RTN","IBCNERP4",78,0)
 I $D(DIRUT) S STOP=1 G REJDTLX
"RTN","IBCNERP4",79,0)
 S IBCNESPC("DTL")=Y
"RTN","IBCNERP4",80,0)
 ;
"RTN","IBCNERP4",81,0)
REJDTLX ; REJDTL exit point
"RTN","IBCNERP4",82,0)
 QUIT
"RTN","IBCNERP4",83,0)
 ;
"RTN","IBCNERP4",84,0)
 ;
"RTN","IBCNERP4",85,0)
DTRANGE ; Determine the start and end dates for the date range parameter
"RTN","IBCNERP4",86,0)
 ; Initialize variables
"RTN","IBCNERP4",87,0)
 NEW X,Y,DIRUT
"RTN","IBCNERP4",88,0)
 ;
"RTN","IBCNERP4",89,0)
 W !
"RTN","IBCNERP4",90,0)
 ;
"RTN","IBCNERP4",91,0)
 S DIR(0)="D^::EX"
"RTN","IBCNERP4",92,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP4",93,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Inquiry"
"RTN","IBCNERP4",94,0)
 S DIR("?")="   would have been created."
"RTN","IBCNERP4",95,0)
 D ^DIR K DIR
"RTN","IBCNERP4",96,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",97,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP4",98,0)
 ; End date
"RTN","IBCNERP4",99,0)
DTRANG1 S DIR(0)="D^::EX"
"RTN","IBCNERP4",100,0)
 S DIR("A")="  End DATE"
"RTN","IBCNERP4",101,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Inquiry"
"RTN","IBCNERP4",102,0)
 S DIR("?",2)="   would have been created.  This date must not precede"
"RTN","IBCNERP4",103,0)
 S DIR("?")="   the Start Date."
"RTN","IBCNERP4",104,0)
 D ^DIR K DIR
"RTN","IBCNERP4",105,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",106,0)
 I Y<IBCNESPC("BEGDT") D  G DTRANG1
"RTN","IBCNERP4",107,0)
 . W !,"     End Date must not precede the Start Date."
"RTN","IBCNERP4",108,0)
 . W !,"     Please reenter."
"RTN","IBCNERP4",109,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP4",110,0)
 ;
"RTN","IBCNERP4",111,0)
DTRANGX ; DTRANGE exit point
"RTN","IBCNERP4",112,0)
 QUIT
"RTN","IBCNERP5")
0^9^B59387291
"RTN","IBCNERP5",1,0)
IBCNERP5 ;DAOU/BHS - IBCNE IIV PAYER REPORT COMPILE ;03-JUN-2002
"RTN","IBCNERP5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP5",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP5",4,0)
 ;
"RTN","IBCNERP5",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP5",6,0)
 ;
"RTN","IBCNERP5",7,0)
 ; Input variables from IBCNERP4:
"RTN","IBCNERP5",8,0)
 ;   IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",9,0)
 ;   IBCNESPC("BEGDT") = Start Date for date range
"RTN","IBCNERP5",10,0)
 ;   IBCNESPC("ENDDT") = End Date for date range
"RTN","IBCNERP5",11,0)
 ;   IBCNESPC("PYR") = Payer IEN for report, if = "", then include all
"RTN","IBCNERP5",12,0)
 ;   IBCNESPC("SORT") = 1 - Payer OR 2 - Total Inquiries
"RTN","IBCNERP5",13,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO - include Rejection Detail?
"RTN","IBCNERP5",14,0)
 ; Output variables passed to IBCNERP6:
"RTN","IBCNERP5",15,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=InqCreatedCount^InqCancelledCt^
"RTN","IBCNERP5",16,0)
 ;                                       InqQueuedCt^1stTransCount^
"RTN","IBCNERP5",17,0)
 ;                                       RetryTransCt^Non-ErrorRespCt^
"RTN","IBCNERP5",18,0)
 ;                                       ErrorRespCount^TotRespTime-days^
"RTN","IBCNERP5",19,0)
 ;                                       CommFailRespCount^PendRespCount^
"RTN","IBCNERP5",20,0)
 ;                                       eIIVDeactivatedDt
"RTN","IBCNERP5",21,0)
 ;        IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",22,0)
 ;        SORT1 = PayerName (SORT=1) or -InquiryCount(SORT=2)
"RTN","IBCNERP5",23,0)
 ;        SORT2 = PayerIEN (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP5",24,0)
 ;        SORT3 = "*" (SORT=1) or PayerIEN (SORT=2)
"RTN","IBCNERP5",25,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3,ERRCD)=RespCount
"RTN","IBCNERP5",26,0)
 ;        (see above)
"RTN","IBCNERP5",27,0)
 ;        ERRCD = Error Condition code (ptr to 365.018) or Error Text
"RTN","IBCNERP5",28,0)
 ;                from the Eligibility Communicator (4.01)
"RTN","IBCNERP5",29,0)
 ;
"RTN","IBCNERP5",30,0)
 ; Must call at EN tag
"RTN","IBCNERP5",31,0)
 Q
"RTN","IBCNERP5",32,0)
 ;
"RTN","IBCNERP5",33,0)
EN(IBCNERTN,IBCNESPC) ; Entry point
"RTN","IBCNERP5",34,0)
 ;
"RTN","IBCNERP5",35,0)
 ; Initialize variables
"RTN","IBCNERP5",36,0)
 NEW IBCNEDT,IBCNEDT1,IBCNEDT2,IBCNEPY,IBCNEPYR,IBCNEPTR
"RTN","IBCNERP5",37,0)
 NEW IBCNETOT,IBCNESRT,IBCNEDTL,RPTDATA,PYRIEN,INQS,IEN
"RTN","IBCNERP5",38,0)
 NEW IBPNM,IBPIEN,ERR,PC,PYR
"RTN","IBCNERP5",39,0)
 ;
"RTN","IBCNERP5",40,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP5",41,0)
 ;
"RTN","IBCNERP5",42,0)
 ; Total responses selected
"RTN","IBCNERP5",43,0)
 S IBCNETOT=0
"RTN","IBCNERP5",44,0)
 ;
"RTN","IBCNERP5",45,0)
 ; Kill scratch globals
"RTN","IBCNERP5",46,0)
 KILL ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",47,0)
 ;
"RTN","IBCNERP5",48,0)
 ; Initialize looping variables
"RTN","IBCNERP5",49,0)
 S IBCNEDT2=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERP5",50,0)
 S IBCNEDT1=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERP5",51,0)
 S IBCNEPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERP5",52,0)
 S IBCNESRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERP5",53,0)
 S IBCNEDTL=$G(IBCNESPC("DTL"))
"RTN","IBCNERP5",54,0)
 ;
"RTN","IBCNERP5",55,0)
 ; Loop through the IIV Transmission Queue File (#365.1) 
"RTN","IBCNERP5",56,0)
 ;  by Date/Time Created Cross-Reference
"RTN","IBCNERP5",57,0)
 S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT1),-1)
"RTN","IBCNERP5",58,0)
 F  S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT)) Q:IBCNEDT=""!($P(IBCNEDT,".",1)>IBCNEDT2)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",59,0)
 . S IBCNEPTR=0
"RTN","IBCNERP5",60,0)
 . F  S IBCNEPTR=$O(^IBCN(365.1,"AE",IBCNEDT,IBCNEPTR)) Q:'IBCNEPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",61,0)
 . . ; Update selected count
"RTN","IBCNERP5",62,0)
 . . S IBCNETOT=IBCNETOT+1
"RTN","IBCNERP5",63,0)
 . . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP5",64,0)
 . . ; Determine Payer name from Payer File (#365.12)
"RTN","IBCNERP5",65,0)
 . . S PYRIEN=$P($G(^IBCN(365.1,IBCNEPTR,0)),U,3)
"RTN","IBCNERP5",66,0)
 . . I 'PYRIEN Q
"RTN","IBCNERP5",67,0)
 . . ; Check payer filter
"RTN","IBCNERP5",68,0)
 . . I IBCNEPY'="",PYRIEN'=IBCNEPY Q
"RTN","IBCNERP5",69,0)
 . . S IBCNEPYR=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP5",70,0)
 . . I IBCNEPYR="" Q
"RTN","IBCNERP5",71,0)
 . . ; Now get the data for the report - build RPTDATA
"RTN","IBCNERP5",72,0)
 . . KILL RPTDATA
"RTN","IBCNERP5",73,0)
 . . D GETDATA(IBCNEPTR,.RPTDATA,IBCNEDTL,IBCNEPYR,PYRIEN,IBCNEPY)
"RTN","IBCNERP5",74,0)
 . . ; Loop through results by Payer Name, Payer IEN
"RTN","IBCNERP5",75,0)
 . . S IBPNM=""
"RTN","IBCNERP5",76,0)
 . . F  S IBPNM=$O(RPTDATA(IBPNM)) Q:IBPNM=""  D
"RTN","IBCNERP5",77,0)
 . . . S IBPIEN=0
"RTN","IBCNERP5",78,0)
 . . . F  S IBPIEN=$O(RPTDATA(IBPNM,IBPIEN)) Q:'IBPIEN  D
"RTN","IBCNERP5",79,0)
 . . . . ; Store totals in global
"RTN","IBCNERP5",80,0)
 . . . . F PC=1:1:10 S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,PC)=$P($G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*")),U,PC)+$P(RPTDATA(IBPNM,IBPIEN),U,PC)
"RTN","IBCNERP5",81,0)
 . . . . ; Store deactivation date/time
"RTN","IBCNERP5",82,0)
 . . . . S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,11)=$P(RPTDATA(IBPNM,IBPIEN),U,11)
"RTN","IBCNERP5",83,0)
 . . . . I 'IBCNEDTL Q
"RTN","IBCNERP5",84,0)
 . . . . ; Store rejection detail
"RTN","IBCNERP5",85,0)
 . . . . S ERR=""
"RTN","IBCNERP5",86,0)
 . . . . F  S ERR=$O(RPTDATA(IBPNM,IBPIEN,ERR)) Q:ERR=""  D
"RTN","IBCNERP5",87,0)
 . . . . .  S ^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR)=$G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR))+$G(RPTDATA(IBPNM,IBPIEN,ERR))
"RTN","IBCNERP5",88,0)
 . . Q
"RTN","IBCNERP5",89,0)
 . Q
"RTN","IBCNERP5",90,0)
 ;
"RTN","IBCNERP5",91,0)
 I $G(ZTSTOP)!(IBCNESRT=1) G EXIT
"RTN","IBCNERP5",92,0)
 ;
"RTN","IBCNERP5",93,0)
 ; Resort if sorted by Total Inquiries
"RTN","IBCNERP5",94,0)
 ; M ^TMP($J,IBCNERTN_"X")=^TMP($J,IBCNERTN)
"RTN","IBCNERP5",95,0)
 N %X,%Y,SUB2
"RTN","IBCNERP5",96,0)
 S SUB2=IBCNERTN_"X"
"RTN","IBCNERP5",97,0)
 S %X="^TMP($J,IBCNERTN,"
"RTN","IBCNERP5",98,0)
 S %Y="^TMP($J,SUB2,"
"RTN","IBCNERP5",99,0)
 I $D(^TMP($J,IBCNERTN))#10=1 S ^TMP($J,SUB2)=^TMP($J,IBCNERTN)
"RTN","IBCNERP5",100,0)
 D %XY^%RCR K %X,%Y,SUB2
"RTN","IBCNERP5",101,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP5",102,0)
 S PYR=""
"RTN","IBCNERP5",103,0)
 F  S PYR=$O(^TMP($J,IBCNERTN_"X",PYR)) Q:PYR=""  D
"RTN","IBCNERP5",104,0)
 .  S IEN=0
"RTN","IBCNERP5",105,0)
 .  F  S IEN=$O(^TMP($J,IBCNERTN_"X",PYR,IEN)) Q:'IEN  D
"RTN","IBCNERP5",106,0)
 .  .  S INQS=-$G(^TMP($J,IBCNERTN_"X",PYR,IEN,"*"))
"RTN","IBCNERP5",107,0)
 .  .  ;M ^TMP($J,IBCNERTN,INQS,PYR,IEN)=^TMP($J,IBCNERTN_"X",PYR,IEN,"*")
"RTN","IBCNERP5",108,0)
 .  .  N %X,%Y,SUB2
"RTN","IBCNERP5",109,0)
 .  .  S SUB2=IBCNERTN_"X"
"RTN","IBCNERP5",110,0)
 .  .  S %X="^TMP($J,SUB2,PYR,IEN,""*"","
"RTN","IBCNERP5",111,0)
 .  .  S %Y="^TMP($J,IBCNERTN,INQS,PYR,IEN,"
"RTN","IBCNERP5",112,0)
 .  .  I $D(^TMP($J,SUB2,PYR,IEN,"*"))#10=1 S ^TMP($J,IBCNERTN,INQS,PYR,IEN)=^TMP($J,SUB2,PYR,IEN,"*")
"RTN","IBCNERP5",113,0)
 .  .  D %XY^%RCR K %X,%Y,SUB2
"RTN","IBCNERP5",114,0)
 .  .  QUIT
"RTN","IBCNERP5",115,0)
 .  QUIT
"RTN","IBCNERP5",116,0)
 ; KILL temporary report global - used to resort
"RTN","IBCNERP5",117,0)
 KILL ^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",118,0)
 ;
"RTN","IBCNERP5",119,0)
EXIT ; EN Exit point
"RTN","IBCNERP5",120,0)
 Q
"RTN","IBCNERP5",121,0)
 ;
"RTN","IBCNERP5",122,0)
 ;
"RTN","IBCNERP5",123,0)
GETDATA(IEN,RPTDATA,DTL,PYNM,PYIEN,PYR) ; Retrieve data for this inquiry and response(s)
"RTN","IBCNERP5",124,0)
 ; Output: 
"RTN","IBCNERP5",125,0)
 ;  RPTDATA(PayerName,PayerIEN) = Created(1)^Cancelled(0/1)^Queued(0/1)^
"RTN","IBCNERP5",126,0)
 ;   #1stTrans^#Retries^#Non-ErrorResponses^#ErrorResponses^
"RTN","IBCNERP5",127,0)
 ;   #ofDaysforResponses^#Timeouts^#Pending^DeactivationDTM
"RTN","IBCNERP5",128,0)
 ;  RPTDATA(PayerName,PayerIEN,ErrCond OR ErrText) = #ErrorResps subtotal
"RTN","IBCNERP5",129,0)
 ; Initialize variables
"RTN","IBCNERP5",130,0)
 NEW HLIEN,HLID,RIEN,RDATA0,RPYIEN,RPYNM,RDATA1,ERRTXT,X1,X2,FIRST,APIEN
"RTN","IBCNERP5",131,0)
 ;
"RTN","IBCNERP5",132,0)
 S RPTDATA(PYNM,PYIEN)=1
"RTN","IBCNERP5",133,0)
 ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP5",134,0)
 S APIEN=$$PYRAPP^IBCNEUT5("IIV",PYIEN)
"RTN","IBCNERP5",135,0)
 I APIEN,$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(PYNM,PYIEN),U,11)=$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",136,0)
 ; Logic by Transmission Status
"RTN","IBCNERP5",137,0)
 ;  Cancelled (7) - Payer deactivated
"RTN","IBCNERP5",138,0)
 I $P($G(^IBCN(365.1,IEN,0)),U,4)=7 S $P(RPTDATA(PYNM,PYIEN),U,2)=1 Q
"RTN","IBCNERP5",139,0)
 ;  Queued - no HL7 messages (# Transmissions = 0) - no multiples exist
"RTN","IBCNERP5",140,0)
 I '$P($G(^IBCN(365.1,IEN,2,0)),U,3) S $P(RPTDATA(PYNM,PYIEN),U,3)=1 Q
"RTN","IBCNERP5",141,0)
 ;  Sent processing - HL7 messages associated (# Transmissions > 0)
"RTN","IBCNERP5",142,0)
 S HLIEN=0,FIRST=1
"RTN","IBCNERP5",143,0)
 F  S HLIEN=$O(^IBCN(365.1,IEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNERP5",144,0)
 .  I 'FIRST S $P(RPTDATA(PYNM,PYIEN),U,5)=$P(RPTDATA(PYNM,PYIEN),U,5)+1
"RTN","IBCNERP5",145,0)
 .  I FIRST S $P(RPTDATA(PYNM,PYIEN),U,4)=$P(RPTDATA(PYNM,PYIEN),U,4)+1,FIRST=0
"RTN","IBCNERP5",146,0)
 .  ; Process response based on HL7 Message ID
"RTN","IBCNERP5",147,0)
 .  S HLID=$P($G(^IBCN(365.1,IEN,2,HLIEN,0)),U,2) I HLID="" Q
"RTN","IBCNERP5",148,0)
 .  ; Lookup responses by HL7 Message ID
"RTN","IBCNERP5",149,0)
 .  S RIEN=0
"RTN","IBCNERP5",150,0)
 .  F  S RIEN=$O(^IBCN(365,"B",HLID,RIEN)) Q:'RIEN  D
"RTN","IBCNERP5",151,0)
 .  .  S RDATA0=$G(^IBCN(365,RIEN,0))
"RTN","IBCNERP5",152,0)
 .  .  S RPYIEN=$P(RDATA0,U,3) I RPYIEN="" Q
"RTN","IBCNERP5",153,0)
 .  .  S RPYNM=$P($G(^IBE(365.12,RPYIEN,0)),U,1) I RPYNM="" Q
"RTN","IBCNERP5",154,0)
 .  .  ; Apply payer filter here, too!
"RTN","IBCNERP5",155,0)
 .  .  ; If there is a Payer filter, check against the IEN
"RTN","IBCNERP5",156,0)
 .  .  I PYR'="",RPYIEN'=PYR Q
"RTN","IBCNERP5",157,0)
 .  .  ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP5",158,0)
 .  .  S APIEN=$$PYRAPP^IBCNEUT5("IIV",RPYIEN)
"RTN","IBCNERP5",159,0)
 .  .  I APIEN,$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(RPYNM,RPYIEN),U,11)=$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",160,0)
 .  .  S RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNERP5",161,0)
 .  .  S ERRTXT=$G(^IBCN(365,RIEN,4))
"RTN","IBCNERP5",162,0)
 .  .  ; Transmitted (Pending)
"RTN","IBCNERP5",163,0)
 .  .  I $P(RDATA0,U,6)=2 D  Q
"RTN","IBCNERP5",164,0)
 .  .  . ; Increment for response pending 
"RTN","IBCNERP5",165,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,10)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,10)+1
"RTN","IBCNERP5",166,0)
 .  .  ; Timeout (Communication Failure)
"RTN","IBCNERP5",167,0)
 .  .  I $P(RDATA0,U,6)=5 D  Q
"RTN","IBCNERP5",168,0)
 .  .  . ; Increment for response timeout 
"RTN","IBCNERP5",169,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,9)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,9)+1
"RTN","IBCNERP5",170,0)
 .  .  ; Response Received - gather additional information
"RTN","IBCNERP5",171,0)
 .  .  I $P(RDATA0,U,6)=3 D  Q
"RTN","IBCNERP5",172,0)
 .  .  . ; Determine response time (in days) as difference between 
"RTN","IBCNERP5",173,0)
 .  .  . ;  IIV Response File - Date/Time Response Received and
"RTN","IBCNERP5",174,0)
 .  .  . ;                      Date/Time Response Created (based on HL7)
"RTN","IBCNERP5",175,0)
 .  .  . S X1=$P(RDATA0,U,8)
"RTN","IBCNERP5",176,0)
 .  .  . S X2=$P(RDATA0,U,7)
"RTN","IBCNERP5",177,0)
 .  .  . ; Determine date difference in days
"RTN","IBCNERP5",178,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,8)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,8)+$$FMDIFF^XLFDT(X2,X1,1)
"RTN","IBCNERP5",179,0)
 .  .  . ; Increment for non-error response and quit
"RTN","IBCNERP5",180,0)
 .  .  . I $P(RDATA1,U,14)="",ERRTXT="" S $P(RPTDATA(RPYNM,RPYIEN),U,6)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,6)+1 Q
"RTN","IBCNERP5",181,0)
 .  .  . ; Rejection is defined as having a value in the Error Condition field or Error Text field
"RTN","IBCNERP5",182,0)
 .  .  . ; Increment for error response
"RTN","IBCNERP5",183,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,7)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,7)+1
"RTN","IBCNERP5",184,0)
 .  .  . ; Store rejection detail only if user requested it
"RTN","IBCNERP5",185,0)
 .  .  . I 'DTL Q
"RTN","IBCNERP5",186,0)
 .  .  . ; Store rejection detail
"RTN","IBCNERP5",187,0)
 .  .  . I $P(RDATA1,U,14) S RPTDATA(RPYNM,RPYIEN,$P(RDATA1,U,14))=$G(RPTDATA(RPYNM,RPYIEN,$P(RDATA1,U,14)))+1
"RTN","IBCNERP5",188,0)
 .  .  . I '$P(RDATA1,U,14),ERRTXT'="" S RPTDATA(RPYNM,RPYIEN,0_U_ERRTXT)=$G(RPTDATA(RPYNM,RPYIEN,ERRTXT))+1
"RTN","IBCNERP5",189,0)
 ;
"RTN","IBCNERP5",190,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERP5",191,0)
 Q
"RTN","IBCNERP5",192,0)
 ;
"RTN","IBCNERP5",193,0)
 ;
"RTN","IBCNERP6")
0^10^B76775707
"RTN","IBCNERP6",1,0)
IBCNERP6 ;DAOU/BHS - IIV PAYER REPORT PRINT ;05-JUN-2002
"RTN","IBCNERP6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP6",4,0)
 ;
"RTN","IBCNERP6",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP6",6,0)
 ;
"RTN","IBCNERP6",7,0)
 ; Called by IBCNERPA
"RTN","IBCNERP6",8,0)
 ;
"RTN","IBCNERP6",9,0)
 ; Input variables from IBCNERP4 and IBCNERP5:
"RTN","IBCNERP6",10,0)
 ;   IBCNERTN = "IBCNERP4"
"RTN","IBCNERP6",11,0)
 ;   IBCNESPC("BEGDT") = Start Date for dt range
"RTN","IBCNERP6",12,0)
 ;   IBCNESPC("ENDDT") = End Date for dt range
"RTN","IBCNERP6",13,0)
 ;   IBCNESPC("PYR") = Payer IEN for report, if = "", then include all
"RTN","IBCNERP6",14,0)
 ;   IBCNESPC("SORT") = 1 - Payer name OR 2 - Total Inquiries
"RTN","IBCNERP6",15,0)
 ;   IBCNESPC("DTL")= 1 - YES OR 0 - NO - display Rejection detail
"RTN","IBCNERP6",16,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=InqCreatedCount^InqCancelledCt^
"RTN","IBCNERP6",17,0)
 ;                                       InqQueuedCt^1stTransCount^
"RTN","IBCNERP6",18,0)
 ;                                       RetryCount^Non-ErrorRespCount^
"RTN","IBCNERP6",19,0)
 ;                                       ErrorRespCount^TotRespTime-days^
"RTN","IBCNERP6",20,0)
 ;                                       CommFailRespCount^PendRespCount^
"RTN","IBCNERP6",21,0)
 ;                                       DeactivationDTM
"RTN","IBCNERP6",22,0)
 ;        IBCNERTN = "IBCNERP4"
"RTN","IBCNERP6",23,0)
 ;        SORT1 = PayerName (SORT=1) or -InquiryCount(SORT=2)
"RTN","IBCNERP6",24,0)
 ;        SORT2 = PayerIEN (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP6",25,0)
 ;        SORT3 = "*" (SORT=1) or PayerIEN (SORT=2)
"RTN","IBCNERP6",26,0)
 ;                                       
"RTN","IBCNERP6",27,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3,ERRCD)=InquiryCount
"RTN","IBCNERP6",28,0)
 ;        (see above)
"RTN","IBCNERP6",29,0)
 ;        ERRCD = Error Condition code (ptr to 365.018)
"RTN","IBCNERP6",30,0)
 ;
"RTN","IBCNERP6",31,0)
 ; Must call at appropriate tag
"RTN","IBCNERP6",32,0)
 Q
"RTN","IBCNERP6",33,0)
 ;
"RTN","IBCNERP6",34,0)
 ;
"RTN","IBCNERP6",35,0)
PRINT(RTN,BDT,EDT,PYR,RDTL,SRT,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERP6",36,0)
 ; Input params: RNT = "IBCNERP4" - routine, BDT = starting dt,
"RTN","IBCNERP6",37,0)
 ;  EDT = ending dt, PYR = payer ien,
"RTN","IBCNERP6",38,0)
 ;  RDTL = 0/1, SRT = 0/1, PGC = page ct, PXT = exit flg, MAX = max line
"RTN","IBCNERP6",39,0)
 ;  ct/page, CRT = 0/1
"RTN","IBCNERP6",40,0)
 ;
"RTN","IBCNERP6",41,0)
 ; Init vars
"RTN","IBCNERP6",42,0)
 N EORMSG,NONEMSG,COUNT,TOTDASHS,DISPDATA,SORT1,SORT2,SORT3,CT,PRT1,PRT2
"RTN","IBCNERP6",43,0)
 ;
"RTN","IBCNERP6",44,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP6",45,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP6",46,0)
 S $P(TOTDASHS,"=",89)=""
"RTN","IBCNERP6",47,0)
 S CT=0
"RTN","IBCNERP6",48,0)
 ;
"RTN","IBCNERP6",49,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(132-$L(NONEMSG)\2),NONEMSG,!! G PRINT2
"RTN","IBCNERP6",50,0)
 S SORT1=""
"RTN","IBCNERP6",51,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",52,0)
 .  S PRT1=$S(SORT1="~NO PAYER":"* No Payer Identified",1:SORT1)
"RTN","IBCNERP6",53,0)
 .  S SORT2=""
"RTN","IBCNERP6",54,0)
 .  F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",55,0)
 .  .  S PRT2=$S(SORT2="~NO PAYER":"* No Payer Identified",1:SORT2)
"RTN","IBCNERP6",56,0)
 .  .  S SORT3=""
"RTN","IBCNERP6",57,0)
 .  .  F  S SORT3=$O(^TMP($J,RTN,SORT1,SORT2,SORT3)) Q:SORT3=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",58,0)
 .  .  .  S CT=CT+1
"RTN","IBCNERP6",59,0)
 .  .  .  ; Build lines of data to display
"RTN","IBCNERP6",60,0)
 .  .  .  KILL DISPDATA
"RTN","IBCNERP6",61,0)
 .  .  .  D DATA(.DISPDATA)
"RTN","IBCNERP6",62,0)
 .  .  .  ; Display lines of response
"RTN","IBCNERP6",63,0)
 .  .  .  D LINE(.DISPDATA)
"RTN","IBCNERP6",64,0)
 .  .  .  Q
"RTN","IBCNERP6",65,0)
 .  .  Q
"RTN","IBCNERP6",66,0)
 .  Q
"RTN","IBCNERP6",67,0)
 ;
"RTN","IBCNERP6",68,0)
 ; Display totals line if space is available
"RTN","IBCNERP6",69,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",70,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",71,0)
 W !,?43,TOTDASHS
"RTN","IBCNERP6",72,0)
 ; Print totals for report
"RTN","IBCNERP6",73,0)
 KILL DISPDATA
"RTN","IBCNERP6",74,0)
 D TOTALS(.DISPDATA)
"RTN","IBCNERP6",75,0)
 ; Display lines of totals
"RTN","IBCNERP6",76,0)
 D LINE(.DISPDATA)
"RTN","IBCNERP6",77,0)
 ;
"RTN","IBCNERP6",78,0)
PRINT2 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",79,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",80,0)
 W !,?(132-$L(EORMSG)\2),EORMSG
"RTN","IBCNERP6",81,0)
 ;
"RTN","IBCNERP6",82,0)
PRINTX ; PRINT exit point
"RTN","IBCNERP6",83,0)
 Q
"RTN","IBCNERP6",84,0)
 ;
"RTN","IBCNERP6",85,0)
HEADER ; Print header info for each page
"RTN","IBCNERP6",86,0)
 ; Assumes vars from PRINT: CRT,PGC,PXT,MAX,SRT,BDT,EDT,PYR,RDTL,MAR
"RTN","IBCNERP6",87,0)
 ; Init vars
"RTN","IBCNERP6",88,0)
 N DIR,X,Y,DTOUT,DUOUT,OFFSET,HDR,DASHES,LIN
"RTN","IBCNERP6",89,0)
 ;
"RTN","IBCNERP6",90,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP6",91,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP6",92,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP6",93,0)
 . I $D(DTOUT)!$D(DUOUT) S PXT=1 Q
"RTN","IBCNERP6",94,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,PXT)=1 G HEADERX
"RTN","IBCNERP6",95,0)
 S PGC=PGC+1
"RTN","IBCNERP6",96,0)
 W @IOF,!,?1,"IIV Payer Report"
"RTN","IBCNERP6",97,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC
"RTN","IBCNERP6",98,0)
 S OFFSET=131-$L(HDR)
"RTN","IBCNERP6",99,0)
 W ?OFFSET,HDR
"RTN","IBCNERP6",100,0)
 W !,?1,"Sorted by: "_$S(SRT=1:"Payer",1:"Total Inquiries")
"RTN","IBCNERP6",101,0)
 S HDR="Rejection Detail: "_$S('RDTL:"Not",1:"")_" Included"
"RTN","IBCNERP6",102,0)
 S OFFSET=131-$L(HDR)
"RTN","IBCNERP6",103,0)
 W ?OFFSET,HDR
"RTN","IBCNERP6",104,0)
 S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP6",105,0)
 S OFFSET=132-$L(HDR)\2
"RTN","IBCNERP6",106,0)
 W !,?OFFSET,HDR
"RTN","IBCNERP6",107,0)
 ; Display Payer Range
"RTN","IBCNERP6",108,0)
 S HDR=""
"RTN","IBCNERP6",109,0)
 I PYR="" S HDR="All Payers"
"RTN","IBCNERP6",110,0)
 I HDR="" S HDR=$P($G(^IBE(365.12,PYR,0)),U,1)
"RTN","IBCNERP6",111,0)
 S OFFSET=132-$L(HDR)\2
"RTN","IBCNERP6",112,0)
 W !,?OFFSET,HDR
"RTN","IBCNERP6",113,0)
 W !  ; Skip line
"RTN","IBCNERP6",114,0)
 ; Display column headings
"RTN","IBCNERP6",115,0)
 W !,?70,"***** SENT *****",?88,"*** RECEIVED ***",?106,"AvgResp"
"RTN","IBCNERP6",116,0)
 W !,?1,"Payer [Inactive Date]",?43,"Created",?52," Cancel",?61," Queued",?70,"1st Att",?79,"  Retry",?88,"   Good",?97,"  Error",?106," (Days)",?115,"Timeout",?124,"Pending"
"RTN","IBCNERP6",117,0)
 S $P(DASHES,"=",131)=""
"RTN","IBCNERP6",118,0)
 W !,?1,DASHES
"RTN","IBCNERP6",119,0)
 ;
"RTN","IBCNERP6",120,0)
HEADERX ; HEADER exit pt
"RTN","IBCNERP6",121,0)
 Q
"RTN","IBCNERP6",122,0)
 ;
"RTN","IBCNERP6",123,0)
LINE(DISPDATA) ; Print line of data
"RTN","IBCNERP6",124,0)
 ; Assumes vars from PRINT: PGC,PXT,MAX
"RTN","IBCNERP6",125,0)
 ; Init vars
"RTN","IBCNERP6",126,0)
 N CT,II
"RTN","IBCNERP6",127,0)
 ;
"RTN","IBCNERP6",128,0)
 S CT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP6",129,0)
 I $Y+1+CT>MAX D HEADER I $G(ZTSTOP)!PXT G LINEX
"RTN","IBCNERP6",130,0)
 F II=1:1:CT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",131,0)
 . I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP6",132,0)
 . W !,?1,DISPDATA(II)
"RTN","IBCNERP6",133,0)
 . Q
"RTN","IBCNERP6",134,0)
 ;
"RTN","IBCNERP6",135,0)
LINEX ; LINE exit pt
"RTN","IBCNERP6",136,0)
 Q
"RTN","IBCNERP6",137,0)
 ;
"RTN","IBCNERP6",138,0)
DATA(DISPDATA) ; Gather and format lines of data to be printed
"RTN","IBCNERP6",139,0)
 ; Assumes vars from PRINT: RTN,SRT,SORT1,SORT2,SORT3,RDTL,CT,PRT1,PRT2
"RTN","IBCNERP6",140,0)
 ; Init vars
"RTN","IBCNERP6",141,0)
 N LINECT,INQS,TIME,AVG,APPS,REJS,DASHES2,ERRCD,ERROR,DEACMSG
"RTN","IBCNERP6",142,0)
 N REJDASHS,RPTDATA,FAIL,PEND,RETS,CT2,FIRST,QUED,CANC,PAYER,DEACDT
"RTN","IBCNERP6",143,0)
 ;
"RTN","IBCNERP6",144,0)
 S $P(DASHES2,"-",89)=""
"RTN","IBCNERP6",145,0)
 S $P(REJDASHS,"-",8)=""
"RTN","IBCNERP6",146,0)
 S LINECT=1
"RTN","IBCNERP6",147,0)
 ;M RPTDATA=^TMP($J,RTN,SORT1,SORT2,SORT3)
"RTN","IBCNERP6",148,0)
 N %X,%Y
"RTN","IBCNERP6",149,0)
 S %X="^TMP($J,RTN,SORT1,SORT2,SORT3,"
"RTN","IBCNERP6",150,0)
 S %Y="RPTDATA("
"RTN","IBCNERP6",151,0)
 I $D(^TMP($J,RTN,SORT1,SORT2,SORT3))#10=1 S RPTDATA=^TMP($J,RTN,SORT1,SORT2,SORT3)
"RTN","IBCNERP6",152,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERP6",153,0)
 S INQS=+$P(RPTDATA,U,1)
"RTN","IBCNERP6",154,0)
 S CANC=+$P(RPTDATA,U,2)
"RTN","IBCNERP6",155,0)
 S QUED=+$P(RPTDATA,U,3)
"RTN","IBCNERP6",156,0)
 S FIRST=+$P(RPTDATA,U,4)
"RTN","IBCNERP6",157,0)
 S RETS=+$P(RPTDATA,U,5)
"RTN","IBCNERP6",158,0)
 S APPS=+$P(RPTDATA,U,6)
"RTN","IBCNERP6",159,0)
 S REJS=+$P(RPTDATA,U,7)
"RTN","IBCNERP6",160,0)
 S TIME=+$P(RPTDATA,U,8)
"RTN","IBCNERP6",161,0)
 S FAIL=+$P(RPTDATA,U,9)
"RTN","IBCNERP6",162,0)
 S PEND=+$P(RPTDATA,U,10)
"RTN","IBCNERP6",163,0)
 S AVG=$FN($S((APPS+REJS)>0:TIME/(APPS+REJS),1:0),"",2)
"RTN","IBCNERP6",164,0)
 S PAYER=$S(SRT=1:PRT1,1:PRT2)
"RTN","IBCNERP6",165,0)
 I $P(RPTDATA,U,11) D
"RTN","IBCNERP6",166,0)
 . S DEACMSG=" [Inactive"
"RTN","IBCNERP6",167,0)
 . S DEACDT=" "_$$FMTE^XLFDT($P(RPTDATA,U,11)\1,"5Z")
"RTN","IBCNERP6",168,0)
 . I $L(PAYER)+$L(DEACMSG)+$L(DEACDT)<40 S PAYER=PAYER_DEACMSG_DEACDT_"]" Q
"RTN","IBCNERP6",169,0)
 . I $L(PAYER)+$L(DEACMSG)<40 S PAYER=PAYER_DEACMSG_"]" Q
"RTN","IBCNERP6",170,0)
 . S PAYER=$E(PAYER,1,39-$L(DEACMSG))_DEACMSG_"]"
"RTN","IBCNERP6",171,0)
 ; Update Report Totals
"RTN","IBCNERP6",172,0)
 F CT2=1:1:10 S $P(TOTALS,U,CT2)=$P($G(TOTALS),U,CT2)+$P(RPTDATA,U,CT2)
"RTN","IBCNERP6",173,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1(PAYER,40)_$$FO^IBCNEUT1(INQS,9,"R")_$$FO^IBCNEUT1(CANC,9,"R")_$$FO^IBCNEUT1(QUED,9,"R")_$$FO^IBCNEUT1(FIRST,9,"R")_$$FO^IBCNEUT1(RETS,9,"R")
"RTN","IBCNERP6",174,0)
 S DISPDATA(LINECT)=DISPDATA(LINECT)_$$FO^IBCNEUT1(APPS,9,"R")_$$FO^IBCNEUT1(REJS,9,"R")_$$FO^IBCNEUT1(AVG,9,"R")_$$FO^IBCNEUT1(FAIL,9,"R")_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP6",175,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",176,0)
 I 'RDTL!(REJS=0) G DATAX
"RTN","IBCNERP6",177,0)
 ; Include Rejection Detail - if necessary
"RTN","IBCNERP6",178,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_$$FO^IBCNEUT1("Rejection Detail",56)_REJDASHS
"RTN","IBCNERP6",179,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",180,0)
 S ERRCD=""
"RTN","IBCNERP6",181,0)
 F  S ERRCD=$O(RPTDATA(ERRCD)) Q:ERRCD=""  D
"RTN","IBCNERP6",182,0)
 .  ; Determine Error Condition Description based on ERRCD
"RTN","IBCNERP6",183,0)
 .  ; If just Error Text 4.01 field, then keep it as is
"RTN","IBCNERP6",184,0)
 .  I 'ERRCD D
"RTN","IBCNERP6",185,0)
 ..   S ERROR=$P(ERRCD,U,2,99)
"RTN","IBCNERP6",186,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1(ERROR,53)_$$FO^IBCNEUT1(+RPTDATA(ERRCD),9,"R")
"RTN","IBCNERP6",187,0)
 .  ; If IEN, get the code and description
"RTN","IBCNERP6",188,0)
 .  I ERRCD D
"RTN","IBCNERP6",189,0)
 ..   S ERROR=$G(^IBE(365.017,ERRCD,0))
"RTN","IBCNERP6",190,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1($P(ERROR,U)_$S($P(ERROR,U,2)'="":"-"_$P(ERROR,U,2),1:""),53)_$$FO^IBCNEUT1(+RPTDATA(ERRCD),9,"R")
"RTN","IBCNERP6",191,0)
 .  S LINECT=LINECT+1
"RTN","IBCNERP6",192,0)
 .  ; Update Report Totals
"RTN","IBCNERP6",193,0)
 .  S TOTALS(ERRCD)=+$G(TOTALS(ERRCD))+RPTDATA(ERRCD)
"RTN","IBCNERP6",194,0)
 .  Q
"RTN","IBCNERP6",195,0)
 ;
"RTN","IBCNERP6",196,0)
DATAX ; DATA exit pt
"RTN","IBCNERP6",197,0)
 ; Display end of record dashes only if other records follow
"RTN","IBCNERP6",198,0)
 I $O(^TMP($J,RTN,SORT1,SORT2,SORT3))'=""!($O(^TMP($J,RTN,SORT1,SORT2))'="")!($O(^TMP($J,RTN,SORT1))'="") S DISPDATA(LINECT)=$$FO^IBCNEUT1("",42)_DASHES2,LINECT=LINECT+1
"RTN","IBCNERP6",199,0)
 Q
"RTN","IBCNERP6",200,0)
 ;
"RTN","IBCNERP6",201,0)
TOTALS(DISPDATA) ; Gather and format lines of totals to be printed
"RTN","IBCNERP6",202,0)
 ; Assumes vars from PRINT: RDTL,MAR
"RTN","IBCNERP6",203,0)
 ; Init vars
"RTN","IBCNERP6",204,0)
 N LINECT,INQS,TIME,AVG,APPS,REJS,ERRCD,DASHES,REJDASHS,FAIL,PEND,RETS
"RTN","IBCNERP6",205,0)
 N FIRST,QUED,ERROR,CANC
"RTN","IBCNERP6",206,0)
 ;
"RTN","IBCNERP6",207,0)
 S $P(DASHES,"=",131)=""
"RTN","IBCNERP6",208,0)
 S $P(REJDASHS,"-",8)=""
"RTN","IBCNERP6",209,0)
 S LINECT=1
"RTN","IBCNERP6",210,0)
 S INQS=+$P(TOTALS,U,1)
"RTN","IBCNERP6",211,0)
 S CANC=+$P(TOTALS,U,2)
"RTN","IBCNERP6",212,0)
 S QUED=+$P(TOTALS,U,3)
"RTN","IBCNERP6",213,0)
 S FIRST=+$P(TOTALS,U,4)
"RTN","IBCNERP6",214,0)
 S RETS=+$P(TOTALS,U,5)
"RTN","IBCNERP6",215,0)
 S APPS=+$P(TOTALS,U,6)
"RTN","IBCNERP6",216,0)
 S REJS=+$P(TOTALS,U,7)
"RTN","IBCNERP6",217,0)
 S TIME=+$P(TOTALS,U,8)
"RTN","IBCNERP6",218,0)
 S FAIL=+$P(TOTALS,U,9)
"RTN","IBCNERP6",219,0)
 S PEND=+$P(TOTALS,U,10)
"RTN","IBCNERP6",220,0)
 S AVG=$FN($S((APPS+REJS)>0:TIME/(APPS+REJS),1:0),"",2)
"RTN","IBCNERP6",221,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("Grand Totals",40)_$$FO^IBCNEUT1(INQS,9,"R")_$$FO^IBCNEUT1(CANC,9,"R")_$$FO^IBCNEUT1(QUED,9,"R")_$$FO^IBCNEUT1(FIRST,9,"R")_$$FO^IBCNEUT1(RETS,9,"R")
"RTN","IBCNERP6",222,0)
 S DISPDATA(LINECT)=DISPDATA(LINECT)_$$FO^IBCNEUT1(APPS,9,"R")_$$FO^IBCNEUT1(REJS,9,"R")_$$FO^IBCNEUT1(AVG,9,"R")_$$FO^IBCNEUT1(FAIL,9,"R")_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP6",223,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",224,0)
 I 'RDTL!(REJS=0) G TOTALSX
"RTN","IBCNERP6",225,0)
 ; Include Rejection Detail - if necessary
"RTN","IBCNERP6",226,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_$$FO^IBCNEUT1("Rejection Detail",56)_REJDASHS
"RTN","IBCNERP6",227,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",228,0)
 S ERRCD=""
"RTN","IBCNERP6",229,0)
 F  S ERRCD=$O(TOTALS(ERRCD)) Q:ERRCD=""  D
"RTN","IBCNERP6",230,0)
 .  ; If IEN, get the code and description
"RTN","IBCNERP6",231,0)
 .  I ERRCD D
"RTN","IBCNERP6",232,0)
 ..   S ERROR=$G(^IBE(365.017,ERRCD,0))
"RTN","IBCNERP6",233,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1($P(ERROR,U)_$S($P(ERROR,U,2)'="":"-"_$P(ERROR,U,2),1:""),53)_$$FO^IBCNEUT1(+TOTALS(ERRCD),9,"R")
"RTN","IBCNERP6",234,0)
 .  ; If error text display as is
"RTN","IBCNERP6",235,0)
 .  I 'ERRCD D
"RTN","IBCNERP6",236,0)
 ..    S ERROR=$P(ERRCD,U,2,99)
"RTN","IBCNERP6",237,0)
 ..    S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1(ERROR,53)_$$FO^IBCNEUT1(+TOTALS(ERRCD),9,"R")
"RTN","IBCNERP6",238,0)
 .  S LINECT=LINECT+1
"RTN","IBCNERP6",239,0)
 .  Q
"RTN","IBCNERP6",240,0)
 ;
"RTN","IBCNERP6",241,0)
TOTALSX ; DATA exit pt
"RTN","IBCNERP6",242,0)
 S DISPDATA(LINECT)=DASHES
"RTN","IBCNERP6",243,0)
 Q
"RTN","IBCNERP6",244,0)
 ;
"RTN","IBCNERP6",245,0)
 ;
"RTN","IBCNERP8")
0^26^B54393232
"RTN","IBCNERP8",1,0)
IBCNERP8 ;DAOU/BHS - IBCNE IIV STATISTICAL REPORT COMPILE ;11-JUN-2002
"RTN","IBCNERP8",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP8",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP8",4,0)
 ;
"RTN","IBCNERP8",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP8",6,0)
 ;
"RTN","IBCNERP8",7,0)
 ;Input vars from IBCNERP7:
"RTN","IBCNERP8",8,0)
 ; IBCNERTN = "IBCNERP7"
"RTN","IBCNERP8",9,0)
 ; **IBCNESPC array ONLY passed by reference **
"RTN","IBCNERP8",10,0)
 ; IBCNESPC("BEGDTM") = Start Dt/Tm for rpt range
"RTN","IBCNERP8",11,0)
 ; IBCNESPC("ENDDTM") = End Dt/Tm for rpt range
"RTN","IBCNERP8",12,0)
 ; IBCNESPC("SECTS")  = 1 - All sections OR ',' sep'd list of 1 or more
"RTN","IBCNERP8",13,0)
 ;  of the following (not all)
"RTN","IBCNERP8",14,0)
 ;  2 - Outgoing data, inq trans stats
"RTN","IBCNERP8",15,0)
 ;  3 - Incoming data, resps rec'd stats
"RTN","IBCNERP8",16,0)
 ;  4 - Current status, pending resps, queued inqs, deferred inqs, payer
"RTN","IBCNERP8",17,0)
 ;      stats, ins buf stats
"RTN","IBCNERP8",18,0)
 ; IBCNESPC("MM") = "" - do not generate MailMan message OR MAILGROUP to
"RTN","IBCNERP8",19,0)
 ;  send report to Mail Group as defined in the IB site parameters
"RTN","IBCNERP8",20,0)
 ;Output vars:
"RTN","IBCNERP8",21,0)
 ; Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP8",22,0)
 ; may be built
"RTN","IBCNERP8",23,0)
 ; 1 OR contains 2 --> 
"RTN","IBCNERP8",24,0)
 ; ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",25,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",26,0)
 ; 1 OR contains 3 --> 
"RTN","IBCNERP8",27,0)
 ; ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",28,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",29,0)
 ; 1 OR contains 4 --> 
"RTN","IBCNERP8",30,0)
 ; ^TMP($J,RTN,"CUR")=TotPendingResponses^TotQueuedInquiries^...
"RTN","IBCNERP8",31,0)
 ;  TotDeferredInquiries(Hold)^TotInsCosw/oNationalID^...
"RTN","IBCNERP8",32,0)
 ;  ToteIIVPyrsDisabldLocally^TotInsBufVerified^TotalManVerified...
"RTN","IBCNERP8",33,0)
 ;  TotalIIVVerified^TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP8",34,0)
 ;  ? InsBufSubtotal^- InsBufSubtotal^Other InsBufSubtotal
"RTN","IBCNERP8",35,0)
 ; 1 OR contains 4 -->
"RTN","IBCNERP8",36,0)
 ; ^TMP($J,RTN,"PYR",PAYER,IEN)=""  (list of new payers)
"RTN","IBCNERP8",37,0)
 ;
"RTN","IBCNERP8",38,0)
 ; Must call at EN
"RTN","IBCNERP8",39,0)
 Q
"RTN","IBCNERP8",40,0)
 ;
"RTN","IBCNERP8",41,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP8",42,0)
 ; Init vars
"RTN","IBCNERP8",43,0)
 N IBBDT,IBEDT,IBSCT,IBTOT,PIECES,VALUE,CT
"RTN","IBCNERP8",44,0)
 ;
"RTN","IBCNERP8",45,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP8",46,0)
 ;
"RTN","IBCNERP8",47,0)
 S IBTOT=0
"RTN","IBCNERP8",48,0)
 ;
"RTN","IBCNERP8",49,0)
 ; Kill scratch global
"RTN","IBCNERP8",50,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERP8",51,0)
 ;
"RTN","IBCNERP8",52,0)
 ; Init looping vars
"RTN","IBCNERP8",53,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP8",54,0)
 S IBSCT=$G(IBCNESPC("SECTS"))
"RTN","IBCNERP8",55,0)
 ;
"RTN","IBCNERP8",56,0)
 I IBSCT=1!$F(IBSCT,",2,") D OUT(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",57,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",58,0)
 I IBSCT=1!$F(IBSCT,",3,") D IN(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",59,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",60,0)
 I IBSCT=1!$F(IBSCT,",4,") D CUR(IBCNERTN,.IBTOT),PYR^IBCNERP0(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",61,0)
 ;
"RTN","IBCNERP8",62,0)
EXIT ; EN Exit pt
"RTN","IBCNERP8",63,0)
 Q
"RTN","IBCNERP8",64,0)
 ;
"RTN","IBCNERP8",65,0)
IN(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP8",66,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP8",67,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP8",68,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP8",69,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"IN") as follows:
"RTN","IBCNERP8",70,0)
 ;  1=total Resps rec'd for date/time range
"RTN","IBCNERP8",71,0)
 ;  2=Ins Buf extract subtotal
"RTN","IBCNERP8",72,0)
 ;  3=Pre-Reg extract subtotal
"RTN","IBCNERP8",73,0)
 ;  4=Non-ver extract subtotal
"RTN","IBCNERP8",74,0)
 ;  5=No Act Ins subtotal
"RTN","IBCNERP8",75,0)
 ;
"RTN","IBCNERP8",76,0)
 ; Init vars
"RTN","IBCNERP8",77,0)
 N IBDT,PYRIEN,PATIEN,IBPTR,IBTYP,RPTDATA,TRANSIEN
"RTN","IBCNERP8",78,0)
 ;
"RTN","IBCNERP8",79,0)
 ; Loop thru the IIV Resp File (#365) x-ref on Date/Time Resp Rec'd
"RTN","IBCNERP8",80,0)
 S IBDT=$O(^IBCN(365,"AD",BDT),-1)
"RTN","IBCNERP8",81,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",82,0)
 . S PYRIEN=0
"RTN","IBCNERP8",83,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",84,0)
 . . S PATIEN=0
"RTN","IBCNERP8",85,0)
 . . F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",86,0)
 . . . S IBPTR=0
"RTN","IBCNERP8",87,0)
 . . . F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",88,0)
 . . . . S TOT=TOT+1
"RTN","IBCNERP8",89,0)
 . . . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",90,0)
 . . . . ; Update total
"RTN","IBCNERP8",91,0)
 . . . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",92,0)
 . . . . ; Update extract type total
"RTN","IBCNERP8",93,0)
 . . . . ; Get the data for the report - build RPTDATA
"RTN","IBCNERP8",94,0)
 . . . . S IBTYP=5,TRANSIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",95,0)
 . . . . I TRANSIEN'="" S IBTYP=$P($G(^IBCN(365.1,TRANSIEN,0)),U,10)
"RTN","IBCNERP8",96,0)
 . . . . S $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",97,0)
 ;
"RTN","IBCNERP8",98,0)
 I $G(ZTSTOP) G INX
"RTN","IBCNERP8",99,0)
 ;
"RTN","IBCNERP8",100,0)
 ; Save data to global
"RTN","IBCNERP8",101,0)
 S ^TMP($J,RTN,"IN")=$G(RPTDATA)
"RTN","IBCNERP8",102,0)
 ;
"RTN","IBCNERP8",103,0)
INX ; IN exit pt
"RTN","IBCNERP8",104,0)
 Q
"RTN","IBCNERP8",105,0)
 ;
"RTN","IBCNERP8",106,0)
OUT(RTN,BDT,EDT,TOT) ; Outgoing Data
"RTN","IBCNERP8",107,0)
 ;Input params:  RTN-routine name used as subscript in ^TMP($J),
"RTN","IBCNERP8",108,0)
 ; BDT-start date/time, EDT-end date/time, **TOT-total recs searched-used
"RTN","IBCNERP8",109,0)
 ; only for status checks when process is queued (passed by reference)
"RTN","IBCNERP8",110,0)
 ;Output vars: Set pcs of ^TMP($J,RTN,"OUT") as follows:
"RTN","IBCNERP8",111,0)
 ; 1=total Inqs transmitted for timeframe
"RTN","IBCNERP8",112,0)
 ; 2=Ins Buffer extract subtotal
"RTN","IBCNERP8",113,0)
 ; 3=Pre-Reg extract subtotal
"RTN","IBCNERP8",114,0)
 ; 4=Non-Ver extract subtotal
"RTN","IBCNERP8",115,0)
 ; 5=No Act Ins subtotal
"RTN","IBCNERP8",116,0)
 ;
"RTN","IBCNERP8",117,0)
 ; Init vars
"RTN","IBCNERP8",118,0)
 N IBDT,IBPTR,IBTYP,RPTDATA,TQIEN
"RTN","IBCNERP8",119,0)
 ;
"RTN","IBCNERP8",120,0)
 ; Loop thru the IIV Resp File (#365) by x-ref on Date/Time Resp Created
"RTN","IBCNERP8",121,0)
 ;  Only count responses for unique HL7 message IDs - filter out
"RTN","IBCNERP8",122,0)
 ;  unsolicited responses as they artificially inflate the Outgoing Count
"RTN","IBCNERP8",123,0)
 S IBDT=$O(^IBCN(365,"AE",BDT),-1)
"RTN","IBCNERP8",124,0)
 F  S IBDT=$O(^IBCN(365,"AE",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",125,0)
 . S IBPTR=0
"RTN","IBCNERP8",126,0)
 . F  S IBPTR=$O(^IBCN(365,"AE",IBDT,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",127,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",128,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",129,0)
 . . ; Quit, if response was not O - original
"RTN","IBCNERP8",130,0)
 . . I $P($G(^IBCN(365,IBPTR,0)),U,10)'="O" Q
"RTN","IBCNERP8",131,0)
 . . ; Update total
"RTN","IBCNERP8",132,0)
 . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",133,0)
 . . ; Update extract type total (1,2,3,4)
"RTN","IBCNERP8",134,0)
 . . S IBTYP=5
"RTN","IBCNERP8",135,0)
 . . S TQIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",136,0)
 . . I TQIEN="" Q
"RTN","IBCNERP8",137,0)
 . . S IBTYP=$P($G(^IBCN(365.1,TQIEN,0)),U,10)
"RTN","IBCNERP8",138,0)
 . . S $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",139,0)
 ;
"RTN","IBCNERP8",140,0)
 I $G(ZTSTOP) G OUTX
"RTN","IBCNERP8",141,0)
 ;
"RTN","IBCNERP8",142,0)
 ; Save data to global array
"RTN","IBCNERP8",143,0)
 S ^TMP($J,RTN,"OUT")=$G(RPTDATA)
"RTN","IBCNERP8",144,0)
 ;
"RTN","IBCNERP8",145,0)
OUTX ; OUT exit pt
"RTN","IBCNERP8",146,0)
 Q
"RTN","IBCNERP8",147,0)
 ;
"RTN","IBCNERP8",148,0)
CUR(RTN,TOT) ; Current Status - stats - timeframe independent
"RTN","IBCNERP8",149,0)
 ; Input params: RTN-routine name as subs in ^TMP($J), **TOT-total recs
"RTN","IBCNERP8",150,0)
 ;  searched - used only for status checks when the process is queued
"RTN","IBCNERP8",151,0)
 ;  passed by reference
"RTN","IBCNERP8",152,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"CUR") as follows:
"RTN","IBCNERP8",153,0)
 ;  1=total Pending Resps (Transmitted-2)
"RTN","IBCNERP8",154,0)
 ;  2=total Queued Inqs (Ready to Transmit-1/Retry-6)
"RTN","IBCNERP8",155,0)
 ;  3=total Deferred Inqs (Hold-4)
"RTN","IBCNERP8",156,0)
 ;  4=Ins Cos w/o National ID
"RTN","IBCNERP8",157,0)
 ;  5=Payers w/IIV disabled locally
"RTN","IBCNERP8",158,0)
 ;  6=total user action required (symbol'='*' or '#' or '!' or '?' or '-')
"RTN","IBCNERP8",159,0)
 ;  7=total Man. Ver'd Ins Buf entries (symbol='*')
"RTN","IBCNERP8",160,0)
 ;  8=total IIV Processed Ver. (symbol='+')
"RTN","IBCNERP8",161,0)
 ;  9=total awaiting processing (symbol='?' or BLANK)
"RTN","IBCNERP8",162,0)
 ;  10=total Ins Buf entries w/symbol='#'
"RTN","IBCNERP8",163,0)
 ;  11=total Ins Buf entries w/symbol='!'
"RTN","IBCNERP8",164,0)
 ;  12=total Ins Buf entries w/symbol='?'
"RTN","IBCNERP8",165,0)
 ;  13=total Ins Buf entries w/symbol='-'
"RTN","IBCNERP8",166,0)
 ;  14=total Ins Buffer entries w/symbol not in ('*','#','!','?','-')
"RTN","IBCNERP8",167,0)
 ;
"RTN","IBCNERP8",168,0)
 ; Init vars
"RTN","IBCNERP8",169,0)
 N RIEN,TQIEN,ICIEN,IBIEN,RPTDATA,IEN,IBSYMBOL,PIECE,IBSTS,APPIEN
"RTN","IBCNERP8",170,0)
 N PIEN,TMP,APPDATA,XDT
"RTN","IBCNERP8",171,0)
 ;
"RTN","IBCNERP8",172,0)
 S RPTDATA=""
"RTN","IBCNERP8",173,0)
 ;
"RTN","IBCNERP8",174,0)
 ; Responses pending (Transmitted - 2)
"RTN","IBCNERP8",175,0)
 S RIEN=0
"RTN","IBCNERP8",176,0)
 F  S RIEN=$O(^IBCN(365,"AC",2,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",177,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",178,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",179,0)
 .  S $P(RPTDATA,U,1)=$P(RPTDATA,U,1)+1
"RTN","IBCNERP8",180,0)
 ;
"RTN","IBCNERP8",181,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",182,0)
 ;
"RTN","IBCNERP8",183,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and 
"RTN","IBCNERP8",184,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNERP8",185,0)
 F IBSTS=1,6,4 D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",186,0)
 . S TQIEN=0
"RTN","IBCNERP8",187,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",IBSTS,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",188,0)
 . .  S TOT=TOT+1
"RTN","IBCNERP8",189,0)
 . .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",190,0)
 . .  I IBSTS'=4 S $P(RPTDATA,U,2)=$P(RPTDATA,U,2)+1 Q
"RTN","IBCNERP8",191,0)
 . .  S $P(RPTDATA,U,3)=$P(RPTDATA,U,3)+1
"RTN","IBCNERP8",192,0)
 ;
"RTN","IBCNERP8",193,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",194,0)
 ;
"RTN","IBCNERP8",195,0)
 ; Payer stats
"RTN","IBCNERP8",196,0)
 ; Ins cos w/o National ID
"RTN","IBCNERP8",197,0)
 S ICIEN=0
"RTN","IBCNERP8",198,0)
 F  S ICIEN=$O(^DIC(36,ICIEN)) Q:'ICIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",199,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",200,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",201,0)
 .  ; Exclude inactive
"RTN","IBCNERP8",202,0)
 .  S TMP=$$ACTIVE^IBCNEUT4(ICIEN) I 'TMP Q
"RTN","IBCNERP8",203,0)
 .  ; Exclude Medicare/Medicaid, etc.
"RTN","IBCNERP8",204,0)
 .  I $$EXCLUDE^IBCNEUT4($P(TMP,U,2)) Q
"RTN","IBCNERP8",205,0)
 .  ; Determine assoc Payer
"RTN","IBCNERP8",206,0)
 .  S PIEN=$P($G(^DIC(36,ICIEN,3)),U,10)
"RTN","IBCNERP8",207,0)
 .  ; Missing payer link
"RTN","IBCNERP8",208,0)
 .  I 'PIEN S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1 Q
"RTN","IBCNERP8",209,0)
 .  I $P($G(^IBE(365.12,PIEN,0)),U,3) Q
"RTN","IBCNERP8",210,0)
 .  S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1
"RTN","IBCNERP8",211,0)
 ;
"RTN","IBCNERP8",212,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",213,0)
 ;
"RTN","IBCNERP8",214,0)
 ; IIV Payers disabled locally
"RTN","IBCNERP8",215,0)
 S PIEN=0
"RTN","IBCNERP8",216,0)
 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",217,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",218,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",219,0)
 .  ; Must have National ID
"RTN","IBCNERP8",220,0)
 .  I $P($G(^IBE(365.12,PIEN,0)),U,2)="" Q
"RTN","IBCNERP8",221,0)
 .  ; Get Payer app multiple IEN
"RTN","IBCNERP8",222,0)
 .  S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP8",223,0)
 .  ; Must have eIIV application
"RTN","IBCNERP8",224,0)
 .  I 'APPIEN Q
"RTN","IBCNERP8",225,0)
 .  S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP8",226,0)
 .  ; Must be Nationally Active
"RTN","IBCNERP8",227,0)
 .  I '$P(APPDATA,U,2) Q
"RTN","IBCNERP8",228,0)
 .  ; Must not be Locally Active
"RTN","IBCNERP8",229,0)
 .  I $P(APPDATA,U,3) Q
"RTN","IBCNERP8",230,0)
 .  S $P(RPTDATA,U,5)=$P(RPTDATA,U,5)+1
"RTN","IBCNERP8",231,0)
 ;
"RTN","IBCNERP8",232,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",233,0)
 ;
"RTN","IBCNERP8",234,0)
 ; Buffer stats
"RTN","IBCNERP8",235,0)
 ; Loop thru the Ins Buffer File (#355.33)
"RTN","IBCNERP8",236,0)
 S IBIEN=0,XDT=0
"RTN","IBCNERP8",237,0)
 F  S XDT=$O(^IBA(355.33,"AEST","E",XDT)) Q:XDT=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",238,0)
 . F  S IBIEN=$O(^IBA(355.33,"AEST","E",XDT,IBIEN)) Q:IBIEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",239,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",240,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",241,0)
 . . S IBSYMBOL=$$SYMBOL^IBCNBLL(IBIEN)
"RTN","IBCNERP8",242,0)
 . . ; Determine piece to update based on symbol
"RTN","IBCNERP8",243,0)
 . . ; ('*') = Man. Verified,  ('#','!','-','?',blank/null) = IIV Processing
"RTN","IBCNERP8",244,0)
 . . ; ('+') = IIV Processed
"RTN","IBCNERP8",245,0)
 . . S PIECE=$S(IBSYMBOL="*":7,IBSYMBOL="+":8,IBSYMBOL="#":10,IBSYMBOL="!":11,IBSYMBOL="-":13,IBSYMBOL="?":12,1:14)
"RTN","IBCNERP8",246,0)
 . . I PIECE=12!(PIECE=14) S $P(RPTDATA,U,9)=$P($G(RPTDATA),U,9)+1
"RTN","IBCNERP8",247,0)
 . . E  S $P(RPTDATA,U,6)=$P($G(RPTDATA),U,6)+1
"RTN","IBCNERP8",248,0)
 . . S $P(RPTDATA,U,PIECE)=$P($G(RPTDATA),U,PIECE)+1
"RTN","IBCNERP8",249,0)
 ;
"RTN","IBCNERP8",250,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",251,0)
 ;
"RTN","IBCNERP8",252,0)
 ; Save data to global
"RTN","IBCNERP8",253,0)
 S ^TMP($J,RTN,"CUR")=$G(RPTDATA)
"RTN","IBCNERP8",254,0)
 ;
"RTN","IBCNERP8",255,0)
CURX ; CUR exit point
"RTN","IBCNERP8",256,0)
 Q
"RTN","IBCNERP8",257,0)
 ;
"RTN","IBCNERP8",258,0)
 ;
"RTN","IBCNERP9")
0^27^B85343498
"RTN","IBCNERP9",1,0)
IBCNERP9 ;DAOU/BHS - IIV STATISTICAL REPORT PRINT ;12-JUN-2002
"RTN","IBCNERP9",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERP9",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP9",4,0)
 ;
"RTN","IBCNERP9",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP9",6,0)
 ;
"RTN","IBCNERP9",7,0)
 ; Input variables from IBCNERP7:
"RTN","IBCNERP9",8,0)
 ;  IBCNERTN = "IBCNERP7"
"RTN","IBCNERP9",9,0)
 ; **IBCNESPC array ONLY passed by reference
"RTN","IBCNERP9",10,0)
 ;  IBCNESPC("BEGDTM") = Start Date/Time for date/time report range
"RTN","IBCNERP9",11,0)
 ;  IBCNESPC("ENDDTM") = End Date/Time for date/time report range
"RTN","IBCNERP9",12,0)
 ;  IBCNESPC("SECTS") = 1 - All, includes all sections OR
"RTN","IBCNERP9",13,0)
 ;   list of one or more of the following:
"RTN","IBCNERP9",14,0)
 ;   2 - Outgoing Data, Inquiry Transmission data,
"RTN","IBCNERP9",15,0)
 ;   3 - Incoming Data, Inquiry Response data,
"RTN","IBCNERP9",16,0)
 ;   4 - General Data, Insurance Buffer data,
"RTN","IBCNERP9",17,0)
 ;   Communication Failures, Outstanding Inquiries
"RTN","IBCNERP9",18,0)
 ;   IBCNESPC("MM") = "", do not generate MailMan message OR
"RTN","IBCNERP9",19,0)
 ;                    MAILGROUP, mailgroup to send MailMan message to
"RTN","IBCNERP9",20,0)
 ;                               based on IB site parameter
"RTN","IBCNERP9",21,0)
 ;   Assumes report data exists in ^TMP($J,IBCNERTN,...)
"RTN","IBCNERP9",22,0)
 ;   Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP9",23,0)
 ;   will be built
"RTN","IBCNERP9",24,0)
 ;   1 OR contains 2 --> 
"RTN","IBCNERP9",25,0)
 ;    ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",26,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",27,0)
 ;   1 OR contains 3 --> 
"RTN","IBCNERP9",28,0)
 ;    ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",29,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",30,0)
 ;   1 OR contains 4 --> 
"RTN","IBCNERP9",31,0)
 ;    ^TMP($J,RTN,"CUR")=TotOutstandingInq^TotInqRetries^...
"RTN","IBCNERP9",32,0)
 ;                       TotInqCommFailure^TotInsBufVerified^...
"RTN","IBCNERP9",33,0)
 ;                       ManVerifedSubtotal^IIVProcessedSubtotal...
"RTN","IBCNERP9",34,0)
 ;                       TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP9",35,0)
 ;                       ? InsBufSubtotal^- InsBufSubtotal^...
"RTN","IBCNERP9",36,0)
 ;                       Other InsBufSubtotal^TQReadyToTransmit^...
"RTN","IBCNERP9",37,0)
 ;                       TQHold^TQRetry
"RTN","IBCNERP9",38,0)
 ;    and ^TMP($J,RTN","PYR",PAYER NAME,IEN of file 365.12)=""
"RTN","IBCNERP9",39,0)
 ;
"RTN","IBCNERP9",40,0)
 ; Must call at EN
"RTN","IBCNERP9",41,0)
 Q
"RTN","IBCNERP9",42,0)
 ;
"RTN","IBCNERP9",43,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP9",44,0)
 ;
"RTN","IBCNERP9",45,0)
 ; Init vars
"RTN","IBCNERP9",46,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBSCT,IBMM,RETRY,OUTINQ,ATTEMPT
"RTN","IBCNERP9",47,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN
"RTN","IBCNERP9",48,0)
 ;
"RTN","IBCNERP9",49,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP9",50,0)
 S IBSCT=$G(IBCNESPC("SECTS")),IBMM=$G(IBCNESPC("MM"))
"RTN","IBCNERP9",51,0)
 ;
"RTN","IBCNERP9",52,0)
 S (IBPXT,IBPGC,CRT,MAXCNT)=0
"RTN","IBCNERP9",53,0)
 ;
"RTN","IBCNERP9",54,0)
 ; Determine IO parameters if output device is NOT MailMan message
"RTN","IBCNERP9",55,0)
 I IBMM="" D
"RTN","IBCNERP9",56,0)
 . I IOST["C-" S MAXCNT=IOSL-3,CRT=1 Q
"RTN","IBCNERP9",57,0)
 . S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERP9",58,0)
 ;
"RTN","IBCNERP9",59,0)
 D PRINT(IBCNERTN,IBBDT,IBEDT,IBSCT,IBMM,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERP9",60,0)
 I $G(ZTSTOP)!IBPXT G EXIT
"RTN","IBCNERP9",61,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D  G EXIT
"RTN","IBCNERP9",62,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERP9",63,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP9",64,0)
 ;
"RTN","IBCNERP9",65,0)
EXIT ; Exit pt
"RTN","IBCNERP9",66,0)
 Q
"RTN","IBCNERP9",67,0)
 ;
"RTN","IBCNERP9",68,0)
 ;
"RTN","IBCNERP9",69,0)
PRINT(RTN,BDT,EDT,SCT,MM,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERP9",70,0)
 ; Init vars
"RTN","IBCNERP9",71,0)
 N EORMSG,NONEMSG,LINECT,DISPDATA,HDRDATA,OFFSET,TMP,DTMRNG,SITE
"RTN","IBCNERP9",72,0)
 ;
"RTN","IBCNERP9",73,0)
 S LINECT=0
"RTN","IBCNERP9",74,0)
 ;
"RTN","IBCNERP9",75,0)
 ; Build End-Of-Report Message for display
"RTN","IBCNERP9",76,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP9",77,0)
 S OFFSET=80-$L(EORMSG)\2
"RTN","IBCNERP9",78,0)
 S EORMSG=$$FO^IBCNEUT1(EORMSG,OFFSET+$L(EORMSG),"R")
"RTN","IBCNERP9",79,0)
 ; Build No-Data-Found Message for display
"RTN","IBCNERP9",80,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP9",81,0)
 S OFFSET=80-$L(NONEMSG)\2
"RTN","IBCNERP9",82,0)
 S NONEMSG=$$FO^IBCNEUT1(NONEMSG,OFFSET+$L(NONEMSG),"R")
"RTN","IBCNERP9",83,0)
 ; Build Site for display
"RTN","IBCNERP9",84,0)
 S SITE=$P($$SITE^VASITE,U,2)
"RTN","IBCNERP9",85,0)
 ; Build Date/Time Range for display
"RTN","IBCNERP9",86,0)
 ;  Build Date/Time display for Starting date/time
"RTN","IBCNERP9",87,0)
 S TMP=$$FMTE^XLFDT(BDT,"5Z")
"RTN","IBCNERP9",88,0)
 S DTMRNG=$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",89,0)
 ;  Calculate Date/Time display for Ending date/time
"RTN","IBCNERP9",90,0)
 S TMP=$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP9",91,0)
 S DTMRNG=DTMRNG_" - "_$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",92,0)
 ;
"RTN","IBCNERP9",93,0)
 ; Print header to DISPDATA for MailMan message ONLY
"RTN","IBCNERP9",94,0)
 D HEADER^IBCNERP0(.HDRDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",95,0)
 I MM'="" M DISPDATA=HDRDATA S LINECT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",96,0)
 I MM="" KILL HDRDATA
"RTN","IBCNERP9",97,0)
 ;
"RTN","IBCNERP9",98,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERP9",99,0)
 I '$D(^TMP($J,RTN)) S LINECT=LINECT+1,DISPDATA(LINECT)=NONEMSG G PRINT2
"RTN","IBCNERP9",100,0)
 ;
"RTN","IBCNERP9",101,0)
 ; Display Outgoing Data - if selected
"RTN","IBCNERP9",102,0)
 I SCT=1!(SCT[2) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",103,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",104,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"OUT",MM)
"RTN","IBCNERP9",105,0)
 ;
"RTN","IBCNERP9",106,0)
 ; Display Incoming Data - if selected
"RTN","IBCNERP9",107,0)
 I SCT=1!(SCT[3) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",108,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",109,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"IN",MM)
"RTN","IBCNERP9",110,0)
 ;
"RTN","IBCNERP9",111,0)
 ; Display General Data - if selected
"RTN","IBCNERP9",112,0)
 I SCT=1!(SCT[4) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",113,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",114,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"CUR",MM)
"RTN","IBCNERP9",115,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"PYR",MM)
"RTN","IBCNERP9",116,0)
 ;
"RTN","IBCNERP9",117,0)
PRINT2 S LINECT=LINECT+1
"RTN","IBCNERP9",118,0)
 S DISPDATA(LINECT)=EORMSG
"RTN","IBCNERP9",119,0)
 ;
"RTN","IBCNERP9",120,0)
 I MM="" D LINE(.DISPDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",121,0)
 ; Generate MailMan message, if flag is set
"RTN","IBCNERP9",122,0)
 I MM'="" D MSG^IBCNEUT5(MM,"** IIV Statistical Rpt **","DISPDATA(")
"RTN","IBCNERP9",123,0)
 ;
"RTN","IBCNERP9",124,0)
PRINTX ; PRINT exit pt
"RTN","IBCNERP9",125,0)
 Q
"RTN","IBCNERP9",126,0)
 ;
"RTN","IBCNERP9",127,0)
LINE(DISPDATA,PGC,PXT,MAX,CRT,SITE,DTMRNG,MM) ; Print line of data
"RTN","IBCNERP9",128,0)
 ; Init vars
"RTN","IBCNERP9",129,0)
 N CT,II,ARRAY,NWPG
"RTN","IBCNERP9",130,0)
 ;
"RTN","IBCNERP9",131,0)
 S NWPG=0
"RTN","IBCNERP9",132,0)
 S CT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",133,0)
 I $Y+1+CT>MAX,PGC>1 D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) G LINEX
"RTN","IBCNERP9",134,0)
 F II=1:1:CT D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP9",135,0)
 . I $Y+1>MAX!('PGC) D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) Q
"RTN","IBCNERP9",136,0)
 . I 'NWPG!(NWPG&(DISPDATA(II)'="")) W !,?1,DISPDATA(II)
"RTN","IBCNERP9",137,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP9",138,0)
 ;
"RTN","IBCNERP9",139,0)
LINEX ; LINE exit pt
"RTN","IBCNERP9",140,0)
 Q
"RTN","IBCNERP9",141,0)
 ;
"RTN","IBCNERP9",142,0)
DATA(DISPDATA,LINECT,RTN,TYPE,MM) ; Format lines of data to be printed
"RTN","IBCNERP9",143,0)
 ; Init vars
"RTN","IBCNERP9",144,0)
 N DASHES,DASHES2,PEND,RPTDATA,CT,DEFINQ,INSCOS,PAYERS,QUEINQ,TXT
"RTN","IBCNERP9",145,0)
 ;
"RTN","IBCNERP9",146,0)
 S $P(DASHES,"=",15)=""
"RTN","IBCNERP9",147,0)
 I LINECT>0,MM="" S LINECT=LINECT+1,DISPDATA(LINECT)=""
"RTN","IBCNERP9",148,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",149,0)
 S DISPDATA(LINECT)=$S(TYPE="OUT":"Outgoing Data",TYPE="IN":"Incoming Data",1:"Current Status")
"RTN","IBCNERP9",150,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",151,0)
 S DISPDATA(LINECT)=DASHES
"RTN","IBCNERP9",152,0)
 ; Copy report data to local variable
"RTN","IBCNERP9",153,0)
 S RPTDATA=$G(^TMP($J,RTN,TYPE))      ; does not work for "PYR"
"RTN","IBCNERP9",154,0)
 ; Outgoing and Incoming Totals
"RTN","IBCNERP9",155,0)
 I TYPE="OUT"!(TYPE="IN") D  G DATAX
"RTN","IBCNERP9",156,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",157,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1($S(TYPE="OUT":"Inquiries Sent:",1:"Responses Received:"),36)_$$FO^IBCNEUT1(+$P(RPTDATA,U,1),9,"R")
"RTN","IBCNERP9",158,0)
 . F CT=1:1:4 D
"RTN","IBCNERP9",159,0)
 . . S TYPE="  "_$S(CT=1:"Insurance Buffer",CT=2:"Appointment",CT=3:"Non-verified Insurance",1:"No Active Insurance")
"RTN","IBCNERP9",160,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",161,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT+1),9,"R")
"RTN","IBCNERP9",162,0)
 ;
"RTN","IBCNERP9",163,0)
 ; General Data
"RTN","IBCNERP9",164,0)
 I TYPE="CUR" D  G DATAX
"RTN","IBCNERP9",165,0)
 . ; Responses Pending
"RTN","IBCNERP9",166,0)
 . S PEND=+$P(RPTDATA,U,1)
"RTN","IBCNERP9",167,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",168,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Responses Pending:",36)_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP9",169,0)
 . ; Queued Inqs
"RTN","IBCNERP9",170,0)
 . S QUEINQ=+$P(RPTDATA,U,2)
"RTN","IBCNERP9",171,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",172,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Queued Inquiries:",36)_$$FO^IBCNEUT1(QUEINQ,9,"R")
"RTN","IBCNERP9",173,0)
 . ; Deferred Inqs
"RTN","IBCNERP9",174,0)
 . S DEFINQ=+$P(RPTDATA,U,3)
"RTN","IBCNERP9",175,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",176,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Deferred Inquiries:",36)_$$FO^IBCNEUT1(DEFINQ,9,"R")
"RTN","IBCNERP9",177,0)
 . ; Ins Cos w/o Nat ID
"RTN","IBCNERP9",178,0)
 . S INSCOS=+$P(RPTDATA,U,4)
"RTN","IBCNERP9",179,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",180,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Companies w/o National ID:",36)_$$FO^IBCNEUT1(INSCOS,9,"R")
"RTN","IBCNERP9",181,0)
 . ; Payers disabled locally
"RTN","IBCNERP9",182,0)
 . S PAYERS=+$P(RPTDATA,U,5)
"RTN","IBCNERP9",183,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",184,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("eIIV Payers Disabled Locally:",36)_$$FO^IBCNEUT1(PAYERS,9,"R")
"RTN","IBCNERP9",185,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",186,0)
 . S DISPDATA(LINECT)=""
"RTN","IBCNERP9",187,0)
 . ; Insurance Buffer statistics
"RTN","IBCNERP9",188,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",189,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Buffer Entries: ",36)_$$FO^IBCNEUT1(($P(RPTDATA,U,6)+$P(RPTDATA,U,9)),9,"R")
"RTN","IBCNERP9",190,0)
 . ; *,+,#,! or -  symbol entries - User action required
"RTN","IBCNERP9",191,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",192,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  User Action Required: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,6),9,"R")
"RTN","IBCNERP9",193,0)
 . F CT=7,8,13,10,11 D
"RTN","IBCNERP9",194,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",195,0)
 . . ; Added # to report
"RTN","IBCNERP9",196,0)
 . . S TYPE="    # of "
"RTN","IBCNERP9",197,0)
 . . I CT=7 S TXT="* entries (User Verified policy)"
"RTN","IBCNERP9",198,0)
 . . I CT=8 S TXT="+ entries (Payer indicated Active policy)"
"RTN","IBCNERP9",199,0)
 . . I CT=10 S TXT="# entries (Policy status undetermined)"
"RTN","IBCNERP9",200,0)
 . . I CT=11 S TXT="! entries (IIV needs user assistance for entry)"
"RTN","IBCNERP9",201,0)
 . . I CT=13 S TXT="- entries (Payer indicated Inactive policy)"
"RTN","IBCNERP9",202,0)
 . . S TYPE=TYPE_TXT
"RTN","IBCNERP9",203,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT),9,"R")
"RTN","IBCNERP9",204,0)
 . ;
"RTN","IBCNERP9",205,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",206,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  Entries Awaiting Processing: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,9),9,"R")
"RTN","IBCNERP9",207,0)
 . ; Subtotal of ? entries (IIV is waiting for a response)
"RTN","IBCNERP9",208,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",209,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of ? entries (IIV is waiting for a response)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,12),9,"R")
"RTN","IBCNERP9",210,0)
 . ; Subtotal of blank entries (yet to be processed or accepted)
"RTN","IBCNERP9",211,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",212,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of blank entries (yet to be processed or accepted)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,14),9,"R")
"RTN","IBCNERP9",213,0)
 ;
"RTN","IBCNERP9",214,0)
 ; New Payers added to File 365.12
"RTN","IBCNERP9",215,0)
 I TYPE="PYR" D  G DATAX
"RTN","IBCNERP9",216,0)
 . ; Payers added to file 365.12
"RTN","IBCNERP9",217,0)
 . D DATAX
"RTN","IBCNERP9",218,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",219,0)
 . S DISPDATA(LINECT)="New eIIV Payers received during report date range:"
"RTN","IBCNERP9",220,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",221,0)
 . I '$D(^TMP($J,RTN,TYPE)) S DISPDATA(LINECT)="    No new Payers added" Q
"RTN","IBCNERP9",222,0)
 . S DISPDATA(LINECT)="  Please link the associated active insurance companies to these payers at your"
"RTN","IBCNERP9",223,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  earliest convenience.  Locally activate the payers after you link insurance"
"RTN","IBCNERP9",224,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  companies to them.  For further details regarding this process, please refer"
"RTN","IBCNERP9",225,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  to the Integrated Billing IIV Interface User Guide."
"RTN","IBCNERP9",226,0)
 . N PYR,PIEN
"RTN","IBCNERP9",227,0)
 . S PYR="",PIEN="" F  S PYR=$O(^TMP($J,RTN,TYPE,PYR)) Q:PYR=""  D
"RTN","IBCNERP9",228,0)
 . . F  S PIEN=$O(^TMP($J,RTN,TYPE,PYR,PIEN)) Q:'PIEN  S LINECT=LINECT+1,DISPDATA(LINECT)="    "_PYR
"RTN","IBCNERP9",229,0)
 ;
"RTN","IBCNERP9",230,0)
DATAX ; DATA exit pt
"RTN","IBCNERP9",231,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",232,0)
 S DISPDATA(LINECT)=""
"RTN","IBCNERP9",233,0)
 Q
"RTN","IBCNERP9",234,0)
 ;
"RTN","IBCNERP9",235,0)
 ;
"RTN","IBCNERPA")
0^7^B29062798
"RTN","IBCNERPA",1,0)
IBCNERPA ;DAOU/BHS - IBCNE IIV RESPONSE REPORT (cont'd) ;03-JUN-2002
"RTN","IBCNERPA",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNERPA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPA",4,0)
 ;
"RTN","IBCNERPA",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERPA",6,0)
 ;
"RTN","IBCNERPA",7,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERPA",8,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERPA",9,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERPA",10,0)
 ;  IBCNESPC("PYR")=Pyr IEN OR "" for all
"RTN","IBCNERPA",11,0)
 ;  IBCNESPC("PAT")=Pat IEN OR "" for all
"RTN","IBCNERPA",12,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERPA",13,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERPA",14,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERPA",15,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERPA",16,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERPA",17,0)
 ;   run.  Response Report (O), Inactive Report (1), or Ambiguous
"RTN","IBCNERPA",18,0)
 ;   Report (2).
"RTN","IBCNERPA",19,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERPA",20,0)
 ;
"RTN","IBCNERPA",21,0)
 ;  Based on structure of IIV Response File (#365)
"RTN","IBCNERPA",22,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERPA",23,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERPA",24,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERPA",25,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERPA",26,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERPA",27,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERPA",28,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERPA",29,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERPA",30,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERPA",31,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERPA",32,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERPA",33,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERPA",34,0)
 ; Must call at one of the entry points, EN3 or EN6
"RTN","IBCNERPA",35,0)
 Q
"RTN","IBCNERPA",36,0)
 ;
"RTN","IBCNERPA",37,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP3
"RTN","IBCNERPA",38,0)
 N IBBDT,IBEDT,IBPY,IBPT,IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPA",39,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC,IPRF
"RTN","IBCNERPA",40,0)
 S IBBDT=$G(IBCNESPC("BEGDT")),IBEDT=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPA",41,0)
 S IBPY=$G(IBCNESPC("PYR")),IBPT=$G(IBCNESPC("PAT"))
"RTN","IBCNERPA",42,0)
 S IBTYP=$G(IBCNESPC("TYPE")),IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPA",43,0)
 S IBTRC=$P($G(IBCNESPC("TRCN")),U,1),(IBPXT,IBPGC)=0
"RTN","IBCNERPA",44,0)
 S IBEXP=$G(IBCNESPC("DTEXP"))
"RTN","IBCNERPA",45,0)
 S IPRF=$G(IBCNESPC("RFLAG"))
"RTN","IBCNERPA",46,0)
 ; Determine IO params
"RTN","IBCNERPA",47,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",48,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",49,0)
 D PRINT^IBCNERP3(IBCNERTN,IBBDT,IBEDT,IBPY,IBPT,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT,IBTRC,IBEXP,IPRF)
"RTN","IBCNERPA",50,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPA",51,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",52,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",53,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",54,0)
EXIT3 ; Exit pt
"RTN","IBCNERPA",55,0)
 Q
"RTN","IBCNERPA",56,0)
 ;
"RTN","IBCNERPA",57,0)
 ;
"RTN","IBCNERPA",58,0)
EN6(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP6
"RTN","IBCNERPA",59,0)
 ;
"RTN","IBCNERPA",60,0)
 ; Init vars
"RTN","IBCNERPA",61,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBPY,IBSRT,IBDTL
"RTN","IBCNERPA",62,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN,TOTALS
"RTN","IBCNERPA",63,0)
 ;
"RTN","IBCNERPA",64,0)
 S IBBDT=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERPA",65,0)
 S IBEDT=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPA",66,0)
 S IBPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERPA",67,0)
 S IBDTL=$G(IBCNESPC("DTL"))
"RTN","IBCNERPA",68,0)
 S IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPA",69,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPA",70,0)
 ;
"RTN","IBCNERPA",71,0)
 ; Determine IO parameters
"RTN","IBCNERPA",72,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",73,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",74,0)
 ;
"RTN","IBCNERPA",75,0)
 D PRINT^IBCNERP6(IBCNERTN,IBBDT,IBEDT,IBPY,IBDTL,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERPA",76,0)
 I $G(ZTSTOP)!IBPXT G EXIT6
"RTN","IBCNERPA",77,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",78,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",79,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",80,0)
 ;
"RTN","IBCNERPA",81,0)
EXIT6 ; Exit pt
"RTN","IBCNERPA",82,0)
 Q
"RTN","IBCNERPA",83,0)
 ;
"RTN","IBCNERPA",84,0)
EBDISP(RPTDATA,DISPDATA,LCT) ; Build sorted Elig/Ben notes for display
"RTN","IBCNERPA",85,0)
 ; Called by IBCNERP3 - all inputs should be passed by reference
"RTN","IBCNERPA",86,0)
 ; Init local variables
"RTN","IBCNERPA",87,0)
 N EBCT,EBSEGS,CT,SRT1,SRT2,SRT3,SRT4,SRT5,SRT6,SEGCT,CT2,ITEM,NTCT
"RTN","IBCNERPA",88,0)
 N STATFLG
"RTN","IBCNERPA",89,0)
 ;
"RTN","IBCNERPA",90,0)
 ; Only build more display lines if notes exist
"RTN","IBCNERPA",91,0)
 S EBCT=+$O(RPTDATA(2,""),-1) I 'EBCT,'$D(RPTDATA(2,0)) G EBEXIT
"RTN","IBCNERPA",92,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Eligibility/Benefit Information:",LCT=LCT+1
"RTN","IBCNERPA",93,0)
 S STATFLG=""
"RTN","IBCNERPA",94,0)
 ; Build EB w/Notes
"RTN","IBCNERPA",95,0)
 I $D(RPTDATA(2,0)) S STATFLG=RPTDATA(2,0)
"RTN","IBCNERPA",96,0)
 F CT=1:1:EBCT D
"RTN","IBCNERPA",97,0)
 . S (SRT1,SRT2,SRT3,SRT4,SRT5)="*"
"RTN","IBCNERPA",98,0)
 . S SEGCT=$L($G(RPTDATA(2,CT)),U)
"RTN","IBCNERPA",99,0)
 . F CT2=2:1:SEGCT S ITEM=$P(RPTDATA(2,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPA",100,0)
 . . I CT2=3 S SRT4=ITEM Q
"RTN","IBCNERPA",101,0)
 . . I CT2=4 S SRT2=ITEM Q
"RTN","IBCNERPA",102,0)
 . . I CT2=5 S SRT3=ITEM Q
"RTN","IBCNERPA",103,0)
 . . I CT2=13 S SRT1=ITEM Q
"RTN","IBCNERPA",104,0)
 . S EBSEGS(SRT1,SRT2,SRT3,SRT4,SRT5,CT)=""
"RTN","IBCNERPA",105,0)
 ; Display Active/Inactive/Undetermined message
"RTN","IBCNERPA",106,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPA",107,0)
 I STATFLG]"" D
"RTN","IBCNERPA",108,0)
 . I STATFLG="U" S DISPDATA(LCT)="IIV was unable to determine the status of this patient's policy.",LCT=LCT+1 Q
"RTN","IBCNERPA",109,0)
 . S DISPDATA(LCT)="IIV has determined that this patient's policy is "_STATFLG_".",LCT=LCT+1
"RTN","IBCNERPA",110,0)
 ; Loop thru sorted EB Notes
"RTN","IBCNERPA",111,0)
 S SRT1="" F  S SRT1=$O(EBSEGS(SRT1)) Q:SRT1=""  D
"RTN","IBCNERPA",112,0)
 . S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPA",113,0)
 . I SRT1'="*" S DISPDATA(LCT)=" "_$$LBL^IBCNERP2(365.02,.13)_SRT1,LCT=LCT+1
"RTN","IBCNERPA",114,0)
 . S SRT2="" F  S SRT2=$O(EBSEGS(SRT1,SRT2)) Q:SRT2=""  D
"RTN","IBCNERPA",115,0)
 . . I SRT2'="*" S DISPDATA(LCT)="  "_$$LBL^IBCNERP2(365.02,.04)_SRT2,LCT=LCT+1
"RTN","IBCNERPA",116,0)
 . . S SRT3="" F  S SRT3=$O(EBSEGS(SRT1,SRT2,SRT3)) Q:SRT3=""  D
"RTN","IBCNERPA",117,0)
 . . . I SRT3'="*" S DISPDATA(LCT)="   "_$$LBL^IBCNERP2(365.02,.05)_SRT3,LCT=LCT+1
"RTN","IBCNERPA",118,0)
 . . . S SRT4="" F  S SRT4=$O(EBSEGS(SRT1,SRT2,SRT3,SRT4)) Q:SRT4=""  D
"RTN","IBCNERPA",119,0)
 . . . . I SRT4'="*" S DISPDATA(LCT)="    "_$$LBL^IBCNERP2(365.02,.03)_SRT4,LCT=LCT+1
"RTN","IBCNERPA",120,0)
 . . . . S SRT5="" F  S SRT5=$O(EBSEGS(SRT1,SRT2,SRT3,SRT4,SRT5)) Q:SRT5=""  D
"RTN","IBCNERPA",121,0)
 . . . . . I SRT5'="*" S DISPDATA(LCT)="     "_$$LBL^IBCNERP2(365.02,.02)_SRT5,LCT=LCT+1
"RTN","IBCNERPA",122,0)
 . . . . . S SRT6="" F  S SRT6=$O(EBSEGS(SRT1,SRT2,SRT3,SRT4,SRT5,SRT6)) Q:SRT6=""  D
"RTN","IBCNERPA",123,0)
 . . . . . . S DISPDATA(LCT)="       "
"RTN","IBCNERPA",124,0)
 . . . . . . S SEGCT=$L($G(RPTDATA(2,CT)),U)
"RTN","IBCNERPA",125,0)
 . . . . . . F CT2=6:1:$S(SEGCT>12:12,1:SEGCT) S ITEM=$P(RPTDATA(2,SRT6),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPA",126,0)
 . . . . . . . ; Display label for all but .09 field - Percentage
"RTN","IBCNERPA",127,0)
 . . . . . . . S ITEM=$S(CT2'=9:$$LBL^IBCNERP2(365.02,(.01*CT2)),1:"")_ITEM
"RTN","IBCNERPA",128,0)
 . . . . . . . I $L(ITEM)+$L(DISPDATA(LCT))>69 S LCT=LCT+1,DISPDATA(LCT)="       "_ITEM Q
"RTN","IBCNERPA",129,0)
 . . . . . . . I DISPDATA(LCT)'="       " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERPA",130,0)
 . . . . . . . S DISPDATA(LCT)="       "_ITEM
"RTN","IBCNERPA",131,0)
 . . . . . . I $TR(DISPDATA(LCT)," ","")'="" S LCT=LCT+1
"RTN","IBCNERPA",132,0)
 . . . . . ; Notes
"RTN","IBCNERPA",133,0)
 . . . . . S NTCT=$O(RPTDATA(2,CT,""),-1)
"RTN","IBCNERPA",134,0)
 . . . . . F CT2=1:1:NTCT D
"RTN","IBCNERPA",135,0)
 . . . . . . S DISPDATA(LCT)="        "_RPTDATA(2,CT,CT2),LCT=LCT+1
"RTN","IBCNERPA",136,0)
 ;
"RTN","IBCNERPA",137,0)
EBEXIT ; EBDISP exit point
"RTN","IBCNERPA",138,0)
 Q
"RTN","IBCNERPA",139,0)
 ;
"RTN","IBCNERPB")
0^49^B47281674
"RTN","IBCNERPB",1,0)
IBCNERPB ;DAOU/RO -  IIV PAYER LINK REPORT ;AUG-2003
"RTN","IBCNERPB",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271**;21-MAR-94
"RTN","IBCNERPB",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPB",4,0)
 ;
"RTN","IBCNERPB",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERPB",6,0)
 ;
"RTN","IBCNERPB",7,0)
 ; Input parameters: N/A
"RTN","IBCNERPB",8,0)
 ; Other relevant variables ZTSAVED for queueing:
"RTN","IBCNERPB",9,0)
 ;  IBCNERTN = "IBCNERPB" (current routine name for queueing the
"RTN","IBCNERPB",10,0)
 ;   COMPILE process)
"RTN","IBCNERPB",11,0)
 ; ********
"RTN","IBCNERPB",12,0)
 ;  IBCNESPC("REP")=1 for Payer List report, 2 for Company List
"RTN","IBCNERPB",13,0)
 ;  IBCNESPC("PTYPE")=Payer type (1-no active ins linked, 2-at least 1 ins linked, 3-All Payers)
"RTN","IBCNERPB",14,0)
 ;  IBCNESPC("PSORT")=Primary Sort for Payer report
"RTN","IBCNERPB",15,0)
 ;  IBCNESPC("PPYR")=single Payer name or '' for all
"RTN","IBCNERPB",16,0)
 ;  IBCNESPC("PDET")=Ins detail on payer report (1-include list of ins,2-do not list)
"RTN","IBCNERPB",17,0)
 ;
"RTN","IBCNERPB",18,0)
 ;  IBCNESPC("ITYPE")=Ins Company type (1-no payer link, 2-linked to payer, 3-All ins companies)
"RTN","IBCNERPB",19,0)
 ;  IBCNESPC("ISORT")=Primary Sort for Payer Insurance report
"RTN","IBCNERPB",20,0)
 ;  IBCNESPC("IMAT")=Partial matching Ins carriers
"RTN","IBCNERPB",21,0)
 ; Only call this routine at a tag
"RTN","IBCNERPB",22,0)
 Q
"RTN","IBCNERPB",23,0)
 ;
"RTN","IBCNERPB",24,0)
EN ; Main entry pt
"RTN","IBCNERPB",25,0)
 ; Init vars
"RTN","IBCNERPB",26,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERPB",27,0)
 ;
"RTN","IBCNERPB",28,0)
 S STOP=0
"RTN","IBCNERPB",29,0)
 S IBCNERTN="IBCNERPB"
"RTN","IBCNERPB",30,0)
 W @IOF
"RTN","IBCNERPB",31,0)
 W !,"IIV Payer Link Report",!
"RTN","IBCNERPB",32,0)
 W !,"In order for an Insurance Company to be eligible for electronic insurance"
"RTN","IBCNERPB",33,0)
 W !,"eligibility communications via the IIV software, the Insurance Company"
"RTN","IBCNERPB",34,0)
 W !,"needs to be linked to an appropriate payer from the National EDI Payer list."
"RTN","IBCNERPB",35,0)
 W !,"The National EDI Payer list contains the names of the payers that are"
"RTN","IBCNERPB",36,0)
 W !,"currently participating with the IIV process."
"RTN","IBCNERPB",37,0)
 W !!,"This report option provides information to assist with finding unlinked"
"RTN","IBCNERPB",38,0)
 W !,"insurance companies or payers, which can subsequently be linked through the"
"RTN","IBCNERPB",39,0)
 W !,"INSURANCE COMPANY EDIT option."
"RTN","IBCNERPB",40,0)
 ;
"RTN","IBCNERPB",41,0)
 ; Report type
"RTN","IBCNERPB",42,0)
R05 D RTYPE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",43,0)
 S IBCNESPC("PPYR")=""
"RTN","IBCNERPB",44,0)
 ; If rpt by ins company, go to questions
"RTN","IBCNERPB",45,0)
 I $G(IBCNESPC("REP"))=2 G R120
"RTN","IBCNERPB",46,0)
 ; Payer type params
"RTN","IBCNERPB",47,0)
R20 D PAYER I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",48,0)
 I IBCNESPC("PPYR")'="" S IBCNESPC("PTYPE")=3 G R30
"RTN","IBCNERPB",49,0)
 ; Payer details
"RTN","IBCNERPB",50,0)
R25 D PTYPE I STOP G:$$STOP EXIT G R20
"RTN","IBCNERPB",51,0)
 S IBCNESPC("PDET")=2 I IBCNESPC("PTYPE")=1 G R40
"RTN","IBCNERPB",52,0)
 ; insurance company details
"RTN","IBCNERPB",53,0)
R30 D PDET I STOP G:$$STOP EXIT G R25
"RTN","IBCNERPB",54,0)
 I IBCNESPC("PPYR")'="" S IBCNESPC("ISORT")=1 G R100
"RTN","IBCNERPB",55,0)
 ; Type of data to return param
"RTN","IBCNERPB",56,0)
R40 D PSORT I STOP G:$$STOP EXIT G R20
"RTN","IBCNERPB",57,0)
 G R100
"RTN","IBCNERPB",58,0)
 ; Payer type params
"RTN","IBCNERPB",59,0)
R120 D ITYPE^IBCNERPC I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",60,0)
 ; Partial Ins Name to include
"RTN","IBCNERPB",61,0)
R130 D IMAT^IBCNERPC I STOP G:$$STOP EXIT G R120
"RTN","IBCNERPB",62,0)
 I IBCNESPC("ITYPE")=1 S IBCNESPC("ISORT")=1 G R100
"RTN","IBCNERPB",63,0)
 ; Type of data to return param
"RTN","IBCNERPB",64,0)
R140 D ISORT^IBCNERPC I STOP G:$$STOP EXIT G R130
"RTN","IBCNERPB",65,0)
 ; Select output device
"RTN","IBCNERPB",66,0)
R100 ; Issue output width warning if not queued
"RTN","IBCNERPB",67,0)
 I IBCNERTN="IBCNERPB",'$D(ZTQUEUED) W !!!,"*** This report is 132 characters wide ***",!
"RTN","IBCNERPB",68,0)
 D DEVICE(IBCNERTN,.IBCNESPC) I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",69,0)
 G EXIT
"RTN","IBCNERPB",70,0)
 ;
"RTN","IBCNERPB",71,0)
EXIT ; Exit pt
"RTN","IBCNERPB",72,0)
 Q
"RTN","IBCNERPB",73,0)
 ;
"RTN","IBCNERPB",74,0)
 ;
"RTN","IBCNERPB",75,0)
COMPILE(IBCNERTN,IBCNESPC) ;
"RTN","IBCNERPB",76,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCNERPB",77,0)
 ; Input params:
"RTN","IBCNERPB",78,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERPB",79,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERPB",80,0)
 ;
"RTN","IBCNERPB",81,0)
 ; Init scratch globals
"RTN","IBCNERPB",82,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPB",83,0)
 ; Compile
"RTN","IBCNERPB",84,0)
 I IBCNERTN="IBCNERPB" D EN^IBCNERPC(IBCNERTN,.IBCNESPC)
"RTN","IBCNERPB",85,0)
 ; Print
"RTN","IBCNERPB",86,0)
 I '$G(ZTSTOP) D
"RTN","IBCNERPB",87,0)
 . I IBCNERTN="IBCNERPB" D EN3^IBCNERPD(IBCNERTN,.IBCNESPC)
"RTN","IBCNERPB",88,0)
 ; Close device
"RTN","IBCNERPB",89,0)
 D ^%ZISC
"RTN","IBCNERPB",90,0)
 ; Kill scratch globals
"RTN","IBCNERPB",91,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPB",92,0)
 ; Purge task record
"RTN","IBCNERPB",93,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERPB",94,0)
 ;
"RTN","IBCNERPB",95,0)
COMPILX ; COMPILE exit pt
"RTN","IBCNERPB",96,0)
 Q
"RTN","IBCNERPB",97,0)
 ;
"RTN","IBCNERPB",98,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCNERPB",99,0)
 ; Init vars
"RTN","IBCNERPB",100,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",101,0)
 ;
"RTN","IBCNERPB",102,0)
 W !
"RTN","IBCNERPB",103,0)
 S DIR(0)="Y"
"RTN","IBCNERPB",104,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCNERPB",105,0)
 S DIR("B")="YES"
"RTN","IBCNERPB",106,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","IBCNERPB",107,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","IBCNERPB",108,0)
 D ^DIR K DIR
"RTN","IBCNERPB",109,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCNERPB",110,0)
 I 'Y S STOP=0
"RTN","IBCNERPB",111,0)
 ;
"RTN","IBCNERPB",112,0)
STOPX ; STOP exit pt
"RTN","IBCNERPB",113,0)
 Q Y
"RTN","IBCNERPB",114,0)
 ;
"RTN","IBCNERPB",115,0)
RTYPE ; Prompt to allow users to select main report option
"RTN","IBCNERPB",116,0)
 ; Init vars
"RTN","IBCNERPB",117,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",118,0)
 ;
"RTN","IBCNERPB",119,0)
 S DIR(0)="S^1:Payer List;2:Insurance Company List"
"RTN","IBCNERPB",120,0)
 S DIR("A")="Select a report option"
"RTN","IBCNERPB",121,0)
 S DIR("B")=1
"RTN","IBCNERPB",122,0)
 S DIR("?",1)="  1 - Payer List:   This option lists the payers in the National"
"RTN","IBCNERPB",123,0)
 S DIR("?",2)="                    Payer list, and optionally provides information about"
"RTN","IBCNERPB",124,0)
 S DIR("?",3)="                    the insurance companies that are linked to that payer"
"RTN","IBCNERPB",125,0)
 S DIR("?",4)="  2 - Insurance"
"RTN","IBCNERPB",126,0)
 S DIR("?",5)="      Company List: This option lists insurance companies and"
"RTN","IBCNERPB",127,0)
 S DIR("?")="                    optionally displays linked payer information"
"RTN","IBCNERPB",128,0)
 D ^DIR K DIR
"RTN","IBCNERPB",129,0)
 I $D(DIRUT) S STOP=1 G RTYPEX
"RTN","IBCNERPB",130,0)
 S IBCNESPC("REP")=Y
"RTN","IBCNERPB",131,0)
 ;
"RTN","IBCNERPB",132,0)
RTYPEX ; RTYPE exit pt
"RTN","IBCNERPB",133,0)
 Q
"RTN","IBCNERPB",134,0)
 ;
"RTN","IBCNERPB",135,0)
PTYPE ; Prompt to select Payer Type to include
"RTN","IBCNERPB",136,0)
 ; Init vars
"RTN","IBCNERPB",137,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",138,0)
 ;
"RTN","IBCNERPB",139,0)
 S DIR(0)="S^1:Unlinked Payers;2:Linked Payers;3:ALL Payers"
"RTN","IBCNERPB",140,0)
 S DIR("A")="Select the type of payers to display"
"RTN","IBCNERPB",141,0)
 S DIR("B")="3"
"RTN","IBCNERPB",142,0)
 S DIR("?",1)="  1 - Only payers with no active insurance companies linked"
"RTN","IBCNERPB",143,0)
 S DIR("?",2)="  2 - Only payers with at least one insurance company linked"
"RTN","IBCNERPB",144,0)
 S DIR("?")="  3 - ALL Payers"
"RTN","IBCNERPB",145,0)
 D ^DIR K DIR
"RTN","IBCNERPB",146,0)
 I $D(DIRUT) S STOP=1 G PTYPEX
"RTN","IBCNERPB",147,0)
 S IBCNESPC("PTYPE")=Y
"RTN","IBCNERPB",148,0)
 ;
"RTN","IBCNERPB",149,0)
PTYPEX ; TYPE exit pt
"RTN","IBCNERPB",150,0)
 Q
"RTN","IBCNERPB",151,0)
PAYER ; Select Payer - File #365.12
"RTN","IBCNERPB",152,0)
 ; Init vars
"RTN","IBCNERPB",153,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERPB",154,0)
 ;
"RTN","IBCNERPB",155,0)
 W !!!
"RTN","IBCNERPB",156,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPB",157,0)
 S DIC("A")=$$FO^IBCNEUT1("Select a Payer (RETURN for ALL Payers): ",39,"L")
"RTN","IBCNERPB",158,0)
 ; Do not allow '~NO PAYER' or non-IIV payers
"RTN","IBCNERPB",159,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER""),$$PYRAPP^IBCNEUT5(""IIV"",$G(Y))'="""""
"RTN","IBCNERPB",160,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERPB",161,0)
 D ^DIC
"RTN","IBCNERPB",162,0)
 I $D(DUOUT)!$D(DTOUT) S Y="" S STOP=1 G PAYERX
"RTN","IBCNERPB",163,0)
 I Y=-1 S Y=""
"RTN","IBCNERPB",164,0)
 S IBCNESPC("PPYR")=Y
"RTN","IBCNERPB",165,0)
PAYERX ; Prompt for ending Payer value
"RTN","IBCNERPB",166,0)
 Q
"RTN","IBCNERPB",167,0)
PDET ; Prompt to select to display Insurance Company details to include
"RTN","IBCNERPB",168,0)
 ; Init vars
"RTN","IBCNERPB",169,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",170,0)
 ;
"RTN","IBCNERPB",171,0)
 S DIR(0)="S^1:List linked insurance company detail;2:Do not list linked insurance company detail"
"RTN","IBCNERPB",172,0)
 S DIR("A")="Select insurance company detail option"
"RTN","IBCNERPB",173,0)
 S DIR("B")="1"
"RTN","IBCNERPB",174,0)
 S DIR("?",1)="  1 - Include a list of insurance companies linked to the payers"
"RTN","IBCNERPB",175,0)
 S DIR("?")="  2 - Do not list linked insurance companies, total number only"
"RTN","IBCNERPB",176,0)
 D ^DIR K DIR
"RTN","IBCNERPB",177,0)
 I $D(DIRUT) S STOP=1 G PDETEX
"RTN","IBCNERPB",178,0)
 S IBCNESPC("PDET")=Y
"RTN","IBCNERPB",179,0)
 ;
"RTN","IBCNERPB",180,0)
PDETEX ; TYPE exit pt
"RTN","IBCNERPB",181,0)
 Q
"RTN","IBCNERPB",182,0)
 ;
"RTN","IBCNERPB",183,0)
PSORT ; Prompt to allow users to select primary sort
"RTN","IBCNERPB",184,0)
 ; Init vars
"RTN","IBCNERPB",185,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",186,0)
 ;
"RTN","IBCNERPB",187,0)
 S DIR(0)="S^1:Payer Name;2:VA National Payer ID;3:Nationally Enabled Status;4:Locally Enabled Status;5:# of Linked Insurance Companies"
"RTN","IBCNERPB",188,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERPB",189,0)
 S DIR("B")=1
"RTN","IBCNERPB",190,0)
 S DIR("?")="  Select a data field by which this report should be primarily sorted."
"RTN","IBCNERPB",191,0)
 D ^DIR K DIR
"RTN","IBCNERPB",192,0)
 I $D(DIRUT) S STOP=1 G PSORTX
"RTN","IBCNERPB",193,0)
 S IBCNESPC("PSORT")=Y
"RTN","IBCNERPB",194,0)
 ;
"RTN","IBCNERPB",195,0)
PSORTX ; SORT exit pt
"RTN","IBCNERPB",196,0)
 Q
"RTN","IBCNERPB",197,0)
 ;
"RTN","IBCNERPB",198,0)
DEVICE(IBCNERTN,IBCNESPC) ; Device Handler and possible TaskManager calls
"RTN","IBCNERPB",199,0)
 ;
"RTN","IBCNERPB",200,0)
 ; Input params:
"RTN","IBCNERPB",201,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERPB",202,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERPB",203,0)
 ;
"RTN","IBCNERPB",204,0)
 ; Init vars
"RTN","IBCNERPB",205,0)
 N ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCNERPB",206,0)
 ;
"RTN","IBCNERPB",207,0)
 S ZTRTN="COMPILE^IBCNERPB("""_IBCNERTN_""",.IBCNESPC)"
"RTN","IBCNERPB",208,0)
 S ZTDESC="IBCNE IIV Payer Link Report"
"RTN","IBCNERPB",209,0)
 S ZTSAVE("IBCNESPC(")=""
"RTN","IBCNERPB",210,0)
 S ZTSAVE("IBCNERTN")=""
"RTN","IBCNERPB",211,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE)
"RTN","IBCNERPB",212,0)
 I POP S STOP=1
"RTN","IBCNERPB",213,0)
 ;
"RTN","IBCNERPB",214,0)
DEVICEX ; DEVICE exit pt
"RTN","IBCNERPB",215,0)
 Q
"RTN","IBCNERPC")
0^50^B46100582
"RTN","IBCNERPC",1,0)
IBCNERPC ;DAOU/RO - IIV PAYER LINK REPORT COMPILE ;AUG-2003
"RTN","IBCNERPC",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271**;21-MAR-94
"RTN","IBCNERPC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPC",4,0)
 ;
"RTN","IBCNERPC",5,0)
 ; IIV - Insurance Identification and Verification
"RTN","IBCNERPC",6,0)
 ;
"RTN","IBCNERPC",7,0)
 ; Input vars from IBCNERPB:
"RTN","IBCNERPC",8,0)
 ;  IBCNESPC("REP")=1 for Payer List report, 2 for Company List
"RTN","IBCNERPC",9,0)
 ;  IBCNESPC("PTYPE")=Payer type (1-no active ins linked, 2-at least 1 ins linked, 3-All Payers)
"RTN","IBCNERPC",10,0)
 ;  IBCNESPC("PSORT")=Primary Sort for Payer report
"RTN","IBCNERPC",11,0)
 ;  IBCNESPC("PDET")=Ins detail on payer report (1-include list of ins,2-do not list)
"RTN","IBCNERPC",12,0)
 ;
"RTN","IBCNERPC",13,0)
 ;  IBCNESPC("ITYPE")=Ins Company type (1-no payer link, 2-linked to payer, 3-All ins companies)
"RTN","IBCNERPC",14,0)
 ;  IBCNESPC("ISORT")=Primary Sort for Payer Insurance report
"RTN","IBCNERPC",15,0)
 ;  IBCNESPC("IMAT")=Partial matching Ins carriers
"RTN","IBCNERPC",16,0)
 ;
"RTN","IBCNERPC",17,0)
 ; Output vars used by IBCNERPC:
"RTN","IBCNERPC",18,0)
 ;  
"RTN","IBCNERPC",19,0)
 ;   IBCNERTN="IBCNERPB"
"RTN","IBCNERPC",20,0)
 ;   SORT1=depends on sorting option chosen
"RTN","IBCNERPC",21,0)
 ;   SORT2=Payer Name (Report by Payer) or Ins Company Name (if report is Insurance)
"RTN","IBCNERPC",22,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT) 
"RTN","IBCNERPC",23,0)
 ;   CNT=Seq ct
"RTN","IBCNERPC",24,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT,1) 
"RTN","IBCNERPC",25,0)
 ;
"RTN","IBCNERPC",26,0)
 ; Must call at EN
"RTN","IBCNERPC",27,0)
 Q
"RTN","IBCNERPC",28,0)
 ;
"RTN","IBCNERPC",29,0)
EN(IBCNERTN,IBCNESPC) ; Entry
"RTN","IBCNERPC",30,0)
 ; Init
"RTN","IBCNERPC",31,0)
 N IBTYP,IBCT,IBCTX
"RTN","IBCNERPC",32,0)
 ;
"RTN","IBCNERPC",33,0)
 N IBDET,IBSRT,IBPY,IBVAID,IBPROF,IBINST,IBNAACT,IBLOACT,IBINS,IBINST
"RTN","IBCNERPC",34,0)
 N IBINSN,IBAPP,IBPYR,SORT1,SORT2,IBSRT,IBMAT,IBPPYR,IBREP
"RTN","IBCNERPC",35,0)
 ;
"RTN","IBCNERPC",36,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERPC",37,0)
 ;
"RTN","IBCNERPC",38,0)
 ; Temp ct
"RTN","IBCNERPC",39,0)
 S IBCT=0
"RTN","IBCNERPC",40,0)
 ;
"RTN","IBCNERPC",41,0)
 ; Kill scratch globals
"RTN","IBCNERPC",42,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPC",43,0)
 ;
"RTN","IBCNERPC",44,0)
 ;
"RTN","IBCNERPC",45,0)
 S IBREP=$G(IBCNESPC("REP"))
"RTN","IBCNERPC",46,0)
 S IBDET=$G(IBCNESPC("PDET"))
"RTN","IBCNERPC",47,0)
 S IBTYP=$G(IBCNESPC("PTYPE"))
"RTN","IBCNERPC",48,0)
 S IBSRT=$G(IBCNESPC("PSORT"))
"RTN","IBCNERPC",49,0)
 S IBPPYR=$G(IBCNESPC("PPYR"))
"RTN","IBCNERPC",50,0)
 ;
"RTN","IBCNERPC",51,0)
 ; Ins Report
"RTN","IBCNERPC",52,0)
 I IBREP=2 G INS
"RTN","IBCNERPC",53,0)
 ;
"RTN","IBCNERPC",54,0)
 ; Loop thru the IIV payer File (#365.12)
"RTN","IBCNERPC",55,0)
 S IBPY=0,SORT1=""
"RTN","IBCNERPC",56,0)
 F  S IBPY=$O(^IBE(365.12,IBPY)) Q:'IBPY  D  Q:$G(ZTSTOP)
"RTN","IBCNERPC",57,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPC",58,0)
 . ; Payer name from Payer File (#365.12)
"RTN","IBCNERPC",59,0)
 . S IBPYR=$P($G(^IBE(365.12,IBPY,0)),U) I IBSRT=1 S SORT1=IBPYR
"RTN","IBCNERPC",60,0)
 . S SORT2=IBPYR
"RTN","IBCNERPC",61,0)
 . I IBPYR=""!(IBPYR="~NO PAYER")!($$PYRAPP^IBCNEUT5("IIV",IBPY)="") Q
"RTN","IBCNERPC",62,0)
 . I IBPPYR'="",IBPY'=$P(IBPPYR,U) Q
"RTN","IBCNERPC",63,0)
 . ; get VA national ID
"RTN","IBCNERPC",64,0)
 . S IBVAID=$P($G(^IBE(365.12,IBPY,0)),U,2) I IBSRT=2 S SORT1=IBVAID
"RTN","IBCNERPC",65,0)
 . ; get the EDI numbers (professional and institutional)
"RTN","IBCNERPC",66,0)
 . S IBPROF=$P($G(^IBE(365.12,IBPY,0)),U,5)
"RTN","IBCNERPC",67,0)
 . S IBINST=$P($G(^IBE(365.12,IBPY,0)),U,6)
"RTN","IBCNERPC",68,0)
 . S IBAPP=$$PYRAPP^IBCNEUT5("IIV",IBPY),(IBNAACT,IBLOACT)=0
"RTN","IBCNERPC",69,0)
 . S:IBAPP'="" IBNAACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,2)
"RTN","IBCNERPC",70,0)
 . S:IBAPP'="" IBLOACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,3)
"RTN","IBCNERPC",71,0)
 . ; if no sort value, use 0
"RTN","IBCNERPC",72,0)
 . I IBSRT=3 S SORT1=IBNAACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",73,0)
 . I IBSRT=4 S SORT1=IBLOACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",74,0)
 . I SORT1="" S SORT1=" "
"RTN","IBCNERPC",75,0)
 . ; if sorting by count and detail, need to figure count first else sort will not work
"RTN","IBCNERPC",76,0)
 . I IBSRT=5,IBTYP>1,IBDET=1 D  S SORT1=-IBCTX
"RTN","IBCNERPC",77,0)
 . . S IBCTX=0,IBINS="" F  S IBINS=$O(^DIC(36,"AC",IBPY,IBINS)) Q:IBINS=""  D
"RTN","IBCNERPC",78,0)
 . . . S IBINSN=$G(^DIC(36,IBINS,0)),IBINSN=$P(IBINSN,U) Q:IBINSN=""  S IBCTX=IBCTX+1
"RTN","IBCNERPC",79,0)
 . ; search for insurance carriers for this payer
"RTN","IBCNERPC",80,0)
 . S IBCT=0,IBINS="" F  S IBINS=$O(^DIC(36,"AC",IBPY,IBINS)) Q:IBINS=""  D
"RTN","IBCNERPC",81,0)
 . . S IBINSN=$G(^DIC(36,IBINS,0)),IBINSN=$P(IBINSN,U) Q:IBINSN=""
"RTN","IBCNERPC",82,0)
 . . S IBCT=IBCT+1 I IBTYP=1 Q
"RTN","IBCNERPC",83,0)
 . . ; save off address and EDI#'s for Insurance carrier
"RTN","IBCNERPC",84,0)
 . . I IBDET=1 S ^TMP($J,IBCNERTN,SORT1,SORT2,IBPY,IBINSN,IBINS)=$P($G(^DIC(36,IBINS,.11)),U,1,6)_U_$P($G(^DIC(36,IBINS,3)),U,2)_U_$P($G(^DIC(36,IBINS,3)),U,4)
"RTN","IBCNERPC",85,0)
 . I IBTYP=1,IBCT>0 Q
"RTN","IBCNERPC",86,0)
 . I IBTYP=2,IBCT=0 Q
"RTN","IBCNERPC",87,0)
 . ; use reverse sort for count
"RTN","IBCNERPC",88,0)
 . I IBSRT=5 S SORT1=-IBCT
"RTN","IBCNERPC",89,0)
 . S ^TMP($J,IBCNERTN,SORT1,SORT2,IBPY)=IBVAID_U_IBPROF_U_IBINST_U_IBNAACT_U_IBLOACT_U_IBCT
"RTN","IBCNERPC",90,0)
 G EXIT
"RTN","IBCNERPC",91,0)
 ;
"RTN","IBCNERPC",92,0)
INS ;
"RTN","IBCNERPC",93,0)
 S IBTYP=$G(IBCNESPC("ITYPE"))
"RTN","IBCNERPC",94,0)
 S IBSRT=$G(IBCNESPC("ISORT"))
"RTN","IBCNERPC",95,0)
 S IBMAT=$G(IBCNESPC("IMAT"))
"RTN","IBCNERPC",96,0)
 ; Loop thru the Insurance company file
"RTN","IBCNERPC",97,0)
 S IBINS=0
"RTN","IBCNERPC",98,0)
 F  S IBINS=$O(^DIC(36,IBINS)) Q:'IBINS  D  Q:$G(ZTSTOP)
"RTN","IBCNERPC",99,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPC",100,0)
 . S (SORT1,IBPYR,IBNAACT,IBLOACT,IBPROF,IBINST,IBVAID)=""
"RTN","IBCNERPC",101,0)
 . S IBINSN=$P($G(^DIC(36,IBINS,0)),U) I IBSRT=1 S SORT1=IBINSN
"RTN","IBCNERPC",102,0)
 . S SORT2=IBINSN
"RTN","IBCNERPC",103,0)
 . I IBINSN="" Q
"RTN","IBCNERPC",104,0)
 . I IBMAT'="",'$F($$UP^XLFSTR(IBINSN),$$UP^XLFSTR(IBMAT)) Q
"RTN","IBCNERPC",105,0)
 . ; get payer
"RTN","IBCNERPC",106,0)
 . S IBPY=$P($G(^DIC(36,IBINS,3)),U,10)
"RTN","IBCNERPC",107,0)
 . I IBTYP=1,IBPY'="" Q
"RTN","IBCNERPC",108,0)
 . I IBTYP=2,IBPY="" Q
"RTN","IBCNERPC",109,0)
 . I IBPY'="" D
"RTN","IBCNERPC",110,0)
 . . ; Payer name from Payer File (#365.12)
"RTN","IBCNERPC",111,0)
 . . S IBPYR=$P($G(^IBE(365.12,IBPY,0)),U) I IBSRT=2 S SORT1=IBPYR
"RTN","IBCNERPC",112,0)
 . . ; get VA national ID
"RTN","IBCNERPC",113,0)
 . . S IBVAID=$P($G(^IBE(365.12,IBPY,0)),U,2) I IBSRT=3 S SORT1=IBVAID
"RTN","IBCNERPC",114,0)
 . . S IBPROF=$P($G(^IBE(365.12,IBPY,0)),U,5)
"RTN","IBCNERPC",115,0)
 . . S IBINST=$P($G(^IBE(365.12,IBPY,0)),U,6)
"RTN","IBCNERPC",116,0)
 . . S IBAPP=$$PYRAPP^IBCNEUT5("IIV",IBPY),(IBNAACT,IBLOACT)=0
"RTN","IBCNERPC",117,0)
 . . S:IBAPP'="" IBNAACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,2)
"RTN","IBCNERPC",118,0)
 . . S:IBAPP'="" IBLOACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,3)
"RTN","IBCNERPC",119,0)
 . . I IBSRT=4 S SORT1=IBNAACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",120,0)
 . . I IBSRT=5 S SORT1=IBLOACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",121,0)
 . I SORT1="" S SORT1=" "
"RTN","IBCNERPC",122,0)
 . S ^TMP($J,IBCNERTN,SORT1,SORT2,IBINS)=IBPYR_U_IBVAID_U_IBPROF_U_IBINST_U_IBNAACT_U_IBLOACT_U_IBCT_U_$G(^DIC(36,IBINS,.11))_U_"~"_$G(^DIC(36,IBINS,3))
"RTN","IBCNERPC",123,0)
 ;
"RTN","IBCNERPC",124,0)
EXIT ;
"RTN","IBCNERPC",125,0)
 Q
"RTN","IBCNERPC",126,0)
 ; Lines moved from IBCNERPB
"RTN","IBCNERPC",127,0)
ITYPE ; Prompt to select Insurance Company type to include
"RTN","IBCNERPC",128,0)
 ; Init vars
"RTN","IBCNERPC",129,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",130,0)
 ;
"RTN","IBCNERPC",131,0)
 S DIR(0)="S^1:Unlinked insurance companies;2:Linked insurance companies;3:All insurance companies"
"RTN","IBCNERPC",132,0)
 S DIR("A")="Select type of insurance companies to display"
"RTN","IBCNERPC",133,0)
 S DIR("B")="3"
"RTN","IBCNERPC",134,0)
 S DIR("?",1)="  1 - Only insurance companies that are not currently linked to a payer"
"RTN","IBCNERPC",135,0)
 S DIR("?",2)="  2 - Only insurance companies that are currently linked to a payer"
"RTN","IBCNERPC",136,0)
 S DIR("?")="  3 - ALL insurance companies"
"RTN","IBCNERPC",137,0)
 D ^DIR K DIR
"RTN","IBCNERPC",138,0)
 I $D(DIRUT) S STOP=1 G ITYPEX
"RTN","IBCNERPC",139,0)
 S IBCNESPC("ITYPE")=Y
"RTN","IBCNERPC",140,0)
 ;
"RTN","IBCNERPC",141,0)
ITYPEX ; TYPE exit pt
"RTN","IBCNERPC",142,0)
 Q
"RTN","IBCNERPC",143,0)
ISORT ; Prompt to allow users to select primary sort
"RTN","IBCNERPC",144,0)
 ; Init vars
"RTN","IBCNERPC",145,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",146,0)
 ;
"RTN","IBCNERPC",147,0)
 S DIR(0)="S^1:Insurance Company Name;2:Payer Name;3:VA National Payer ID;4:Nationally Enabled Status;5:Locally Enabled Status"
"RTN","IBCNERPC",148,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERPC",149,0)
 S DIR("B")=1
"RTN","IBCNERPC",150,0)
 S DIR("?")="  Select the data field by which this report should be primarily sorted."
"RTN","IBCNERPC",151,0)
 D ^DIR K DIR
"RTN","IBCNERPC",152,0)
 I $D(DIRUT) S STOP=1 G ISORTX
"RTN","IBCNERPC",153,0)
 S IBCNESPC("ISORT")=Y
"RTN","IBCNERPC",154,0)
 ;
"RTN","IBCNERPC",155,0)
ISORTX ; SORT exit pt
"RTN","IBCNERPC",156,0)
 Q
"RTN","IBCNERPC",157,0)
IMAT ; Prompt to allow users to select partial Ins carrier to include
"RTN","IBCNERPC",158,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",159,0)
 ;
"RTN","IBCNERPC",160,0)
 W !
"RTN","IBCNERPC",161,0)
 S DIR(0)="FO"
"RTN","IBCNERPC",162,0)
 S DIR("A")="Enter an insurance company search keyword (RETURN for ALL)"
"RTN","IBCNERPC",163,0)
 S DIR("B")=""
"RTN","IBCNERPC",164,0)
 S DIR("?",1)="     Enter a value to match insurance company names with."
"RTN","IBCNERPC",165,0)
 S DIR("?",2)="     Simply hit RETURN to select ALL or enter a keyword"
"RTN","IBCNERPC",166,0)
 S DIR("?",3)="     (ex. 'CIGNA' would return CIGNA, CIGNA HICN, NATIONAL CIGNA,"
"RTN","IBCNERPC",167,0)
 S DIR("?")="     REGION 1 CIGNA and any others with the term 'CIGNA' in it)"
"RTN","IBCNERPC",168,0)
 D ^DIR K DIR
"RTN","IBCNERPC",169,0)
 I $D(DUOUT)!$D(DTOUT) S Y="" S STOP=1 G IMATX
"RTN","IBCNERPC",170,0)
 S IBCNESPC("IMAT")=Y
"RTN","IBCNERPC",171,0)
 ;                                                                       
"RTN","IBCNERPC",172,0)
IMATX Q
"RTN","IBCNERPE")
0^48^B67284569
"RTN","IBCNERPE",1,0)
IBCNERPE ;DAOU/BHS - IBCNE IIV RESPONSE REPORT (cont'd);03-JUN-2002
"RTN","IBCNERPE",2,0)
 ;;2.0;INTEGRATED BILLING;**271**;21-MAR-94
"RTN","IBCNERPE",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPE",4,0)
 ;
"RTN","IBCNERPE",5,0)
 ; Must call at tag
"RTN","IBCNERPE",6,0)
 Q
"RTN","IBCNERPE",7,0)
 ;
"RTN","IBCNERPE",8,0)
 ; This tag is only called from IBCNERP2
"RTN","IBCNERPE",9,0)
 ;
"RTN","IBCNERPE",10,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERPE",11,0)
 ; Init
"RTN","IBCNERPE",12,0)
 N EBCT,NOTECT,EBPTR,PC,CNCT,CNPTR,NWNTCT,IBNOTES,IBERR
"RTN","IBCNERPE",13,0)
 N %,DIW,DIWI,DIWT,DIWTC,DIWX,DN,I,Z,ERRTEXT,II,FUTDT,TQIEN
"RTN","IBCNERPE",14,0)
 N FRST,IIVSTR,IIVSTAT
"RTN","IBCNERPE",15,0)
 ;
"RTN","IBCNERPE",16,0)
 ; Insured Info from IIV Response #365
"RTN","IBCNERPE",17,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERPE",18,0)
 ; Trans dates to ext format
"RTN","IBCNERPE",19,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERPE",20,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERPE",21,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERPE",22,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IEN_",",1.08,"E")   ; Whose Ins
"RTN","IBCNERPE",23,0)
 S $P(RPTDATA(1),U,9)=$$GET1^DIQ(365,IEN_",",1.09,"E")   ; Pt Rel to Sub
"RTN","IBCNERPE",24,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IEN_",",1.13,"E")  ; COB
"RTN","IBCNERPE",25,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERPE",26,0)
 S $P(RPTDATA(1),U,14)=$$X12^IBCNERP2(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERPE",27,0)
 S $P(RPTDATA(1),U,15)=$$X12^IBCNERP2(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERPE",28,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERPE",29,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERPE",30,0)
 ;
"RTN","IBCNERPE",31,0)
 ; Loop thru mult Elig/Ben segs
"RTN","IBCNERPE",32,0)
 S EBCT=0,IIVSTAT=""
"RTN","IBCNERPE",33,0)
 ; Check to see if the IIV STATUS flag was passed
"RTN","IBCNERPE",34,0)
 ; If so, set IIVSTAT to its value and update RPTDATA
"RTN","IBCNERPE",35,0)
 S FRST=$O(^IBCN(365,IEN,2,0))
"RTN","IBCNERPE",36,0)
 I FRST D
"RTN","IBCNERPE",37,0)
 . S IIVSTR=$G(^IBCN(365,IEN,2,FRST,0))
"RTN","IBCNERPE",38,0)
 . I $P(IIVSTR,U,6)="IIV Eligibility Determination" D
"RTN","IBCNERPE",39,0)
 ..  S EBCT=FRST,IIVSTAT=$P(IIVSTR,U)
"RTN","IBCNERPE",40,0)
 ..  ; Convert IEN to X12 code
"RTN","IBCNERPE",41,0)
 ..  S IIVSTAT=$$GET1^DIQ(365.02,EBCT_","_IEN_",","ELIGIBILITY/BENEFIT INFO:CODE")
"RTN","IBCNERPE",42,0)
 ..  S IIVSTAT=$S(IIVSTAT=1:"Active",IIVSTAT=6:"Inactive",1:"U")
"RTN","IBCNERPE",43,0)
 ..  S RPTDATA(2,0)=IIVSTAT,RPTDATA(2,EBCT)=""
"RTN","IBCNERPE",44,0)
 ; Error action/condition shd be flagged as Undetermined - no EC flg sent
"RTN","IBCNERPE",45,0)
 I IIVSTAT="",$P(RPTDATA(1),U,14)]""!($P(RPTDATA(1),U,15)]"") S (IIVSTAT,RPTDATA(2,0))="U"
"RTN","IBCNERPE",46,0)
 F  S EBCT=$O(^IBCN(365,IEN,2,EBCT)) Q:'EBCT  D
"RTN","IBCNERPE",47,0)
 .  S RPTDATA(2,EBCT)=$G(^IBCN(365,IEN,2,EBCT,0))
"RTN","IBCNERPE",48,0)
 .  ; Elig/Ben Info (ptr to EB01 table)
"RTN","IBCNERPE",49,0)
 .  S $P(RPTDATA(2,EBCT),U,2)=$$X12^IBCNERP2(365.011,$P(RPTDATA(2,EBCT),U,2))
"RTN","IBCNERPE",50,0)
 .  ; Cov Lvl Code (ptr to EB02 table)
"RTN","IBCNERPE",51,0)
 .  S $P(RPTDATA(2,EBCT),U,3)=$$X12^IBCNERP2(365.012,$P(RPTDATA(2,EBCT),U,3))
"RTN","IBCNERPE",52,0)
 .  ; Svc Type Code (ptr to EB03 table)
"RTN","IBCNERPE",53,0)
 .  S $P(RPTDATA(2,EBCT),U,4)=$$X12^IBCNERP2(365.013,$P(RPTDATA(2,EBCT),U,4))
"RTN","IBCNERPE",54,0)
 .  ; Ins Type Code (ptr to EB04 table)
"RTN","IBCNERPE",55,0)
 .  S $P(RPTDATA(2,EBCT),U,5)=$$X12^IBCNERP2(365.014,$P(RPTDATA(2,EBCT),U,5))
"RTN","IBCNERPE",56,0)
 .  ; Plan Cov Desc - free text
"RTN","IBCNERPE",57,0)
 .  ; Time Pd Qual (ptr to EB06 table)
"RTN","IBCNERPE",58,0)
 .  S $P(RPTDATA(2,EBCT),U,7)=$$X12^IBCNERP2(365.015,$P(RPTDATA(2,EBCT),U,7))
"RTN","IBCNERPE",59,0)
 .  ; Monetary Amt
"RTN","IBCNERPE",60,0)
 .  I $P(RPTDATA(2,EBCT),U,8)'="" S $P(RPTDATA(2,EBCT),U,8)="$"_$FN(+$P(RPTDATA(2,EBCT),U,8),",",2)
"RTN","IBCNERPE",61,0)
 .  ; Percent
"RTN","IBCNERPE",62,0)
 .  I $P(RPTDATA(2,EBCT),U,9)'="" S $P(RPTDATA(2,EBCT),U,9)=$S($P(RPTDATA(2,EBCT),U,9)<1:$P(RPTDATA(2,EBCT),U,9)*100,1:$P(RPTDATA(2,EBCT),U,9))_"%"
"RTN","IBCNERPE",63,0)
 .  ; Qty Qual (ptr to EB09)
"RTN","IBCNERPE",64,0)
 .  S $P(RPTDATA(2,EBCT),U,10)=$$X12^IBCNERP2(365.016,$P(RPTDATA(2,EBCT),U,10))
"RTN","IBCNERPE",65,0)
 .  ; Qty
"RTN","IBCNERPE",66,0)
 .  I $P(RPTDATA(2,EBCT),U,11)'="" S $P(RPTDATA(2,EBCT),U,10)=$P(RPTDATA(2,EBCT),U,11)_" "_$P(RPTDATA(2,EBCT),U,10),$P(RPTDATA(2,EBCT),U,11)=""
"RTN","IBCNERPE",67,0)
 .  ; Auth/Cert Ind (Y/N/U)
"RTN","IBCNERPE",68,0)
 .  I $P(RPTDATA(2,EBCT),U,12)'="" S $P(RPTDATA(2,EBCT),U,12)=$$GET1^DIQ(365.02,EBCT_","_IEN_",",.12,"E")
"RTN","IBCNERPE",69,0)
 .  ; In-Plan Network Ind (Y/N/U)
"RTN","IBCNERPE",70,0)
 .  I $P(RPTDATA(2,EBCT),U,13)'="" S $P(RPTDATA(2,EBCT),U,13)=$$GET1^DIQ(365.02,EBCT_","_IEN_",",.13,"E")
"RTN","IBCNERPE",71,0)
 .  ; Loop thru Notes (wp) - format to 70 chars
"RTN","IBCNERPE",72,0)
 .  S (NOTECT,NWNTCT)=0
"RTN","IBCNERPE",73,0)
 .  F  S NOTECT=$O(^IBCN(365,IEN,2,EBCT,2,NOTECT)) Q:'NOTECT  D
"RTN","IBCNERPE",74,0)
 .  .  D FSTRNG^IBJU1($G(^IBCN(365,IEN,2,EBCT,2,NOTECT,0)),70,.IBNOTES)
"RTN","IBCNERPE",75,0)
 .  .  ; Loop thru text (70 chars wide)
"RTN","IBCNERPE",76,0)
 .  .  S II=0
"RTN","IBCNERPE",77,0)
 .  .  F  S II=$O(IBNOTES(II)) Q:'II  I $G(IBNOTES(II))'="" D
"RTN","IBCNERPE",78,0)
 .  .  .  S NWNTCT=NWNTCT+1
"RTN","IBCNERPE",79,0)
 .  .  .  S RPTDATA(2,EBCT,NWNTCT)=$G(IBNOTES(II))
"RTN","IBCNERPE",80,0)
 ;
"RTN","IBCNERPE",81,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERPE",82,0)
 S CNCT=0
"RTN","IBCNERPE",83,0)
 F  S CNCT=$O(^IBCN(365,IEN,3,CNCT)) Q:'CNCT  D
"RTN","IBCNERPE",84,0)
 .  S RPTDATA(3,CNCT)=$G(^IBCN(365,IEN,3,CNCT,0))
"RTN","IBCNERPE",85,0)
 .  ; Disp. blank if NOT SPECIFIED
"RTN","IBCNERPE",86,0)
 .  I $P(RPTDATA(3,CNCT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CNCT),U)=""
"RTN","IBCNERPE",87,0)
 .  ; Comm Qual #1-3
"RTN","IBCNERPE",88,0)
 .  F II=1:1:3 D
"RTN","IBCNERPE",89,0)
 .  . S CNPTR=$$X12^IBCNERP2(365.021,$P(RPTDATA(3,CNCT),U,II*2))
"RTN","IBCNERPE",90,0)
 .  . I CNPTR'="" S $P(RPTDATA(3,CNCT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CNCT),U,II*2+1),$P(RPTDATA(3,CNCT),U,II*2+1)=""
"RTN","IBCNERPE",91,0)
 ;
"RTN","IBCNERPE",92,0)
 ; Error Txt
"RTN","IBCNERPE",93,0)
 S ERRTEXT=$G(^IBCN(365,IEN,4))
"RTN","IBCNERPE",94,0)
 ; Error text shd be flagged as Undetermined - no EC flg sent
"RTN","IBCNERPE",95,0)
 I IIVSTAT="" S (IIVSTAT,RPTDATA(2,0))="U"
"RTN","IBCNERPE",96,0)
 I ERRTEXT="" G FUTDT
"RTN","IBCNERPE",97,0)
 D FSTRNG^IBJU1(ERRTEXT,60,.IBERR)
"RTN","IBCNERPE",98,0)
 ; Loop thru text (60 chars)
"RTN","IBCNERPE",99,0)
 S II=0
"RTN","IBCNERPE",100,0)
 F  S II=$O(IBERR(II)) Q:'II  I $G(IBERR(II))'="" D
"RTN","IBCNERPE",101,0)
 .  S RPTDATA(4,II)=$G(IBERR(II))
"RTN","IBCNERPE",102,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERPE",103,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERPE",104,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERPE",105,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERPE",106,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERPE",107,0)
 ; 
"RTN","IBCNERPE",108,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERPE",109,0)
 Q
"RTN","IBCNERPE",110,0)
 ;
"RTN","IBCNERPE",111,0)
 ; This tag is only called from IBCNERP3
"RTN","IBCNERPE",112,0)
 ;
"RTN","IBCNERPE",113,0)
DATA(DISPDATA)  ;  Build disp lines
"RTN","IBCNERPE",114,0)
 N LCT,EBCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA
"RTN","IBCNERPE",115,0)
 ; Merge into local array
"RTN","IBCNERPE",116,0)
 ;M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",117,0)
 N %X,%Y
"RTN","IBCNERPE",118,0)
 S %X="^TMP($J,RTN,SORT1,SORT2,CNT,"
"RTN","IBCNERPE",119,0)
 S %Y="RPTDATA("
"RTN","IBCNERPE",120,0)
 I $D(^TMP($J,RTN,SORT1,SORT2,CNT))#10=1 S RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",121,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERPE",122,0)
 ; Build
"RTN","IBCNERPE",123,0)
 S LCT=1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.01),17,"R")_$P(RPTDATA(1),U,1)
"RTN","IBCNERPE",124,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.05),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,5),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),22,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERPE",125,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERPE",126,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.06),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,6),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.07),22,"R")_$P(RPTDATA(1),U,7)
"RTN","IBCNERPE",127,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.09),22,"R")_$P(RPTDATA(1),U,9)
"RTN","IBCNERPE",128,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERPE",129,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERPE",130,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERPE",131,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERPE",132,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERPE",133,0)
 S LCT=LCT+1
"RTN","IBCNERPE",134,0)
 ; Elig/Ben - added sorted EB notes to DISPDATA and update LCT (line ct)
"RTN","IBCNERPE",135,0)
 D EBDISP^IBCNERPA(.RPTDATA,.DISPDATA,.LCT)
"RTN","IBCNERPE",136,0)
 ;
"RTN","IBCNERPE",137,0)
 ; Contacts
"RTN","IBCNERPE",138,0)
CONT S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERPE",139,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Contact Information:",LCT=LCT+1
"RTN","IBCNERPE",140,0)
 ; Build
"RTN","IBCNERPE",141,0)
 F CT=1:1:CNCT D
"RTN","IBCNERPE",142,0)
 . S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",143,0)
 . S SEGCT=$L(RPTDATA(3,CT),U)
"RTN","IBCNERPE",144,0)
 . F CT2=1:1:SEGCT S ITEM=$P(RPTDATA(3,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPE",145,0)
 . . I $L(ITEM)+$L(DISPDATA(LCT))>74 S LCT=LCT+1,DISPDATA(LCT)=" "_ITEM Q
"RTN","IBCNERPE",146,0)
 . . I DISPDATA(LCT)'=" " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERPE",147,0)
 . . S DISPDATA(LCT)=" "_ITEM
"RTN","IBCNERPE",148,0)
 . S LCT=LCT+1
"RTN","IBCNERPE",149,0)
 ; Err Info
"RTN","IBCNERPE",150,0)
ERR I $P(RPTDATA(1),U,14)="",$P(RPTDATA(1),U,15)="",'$O(RPTDATA(4,""),-1) G DATAX
"RTN","IBCNERPE",151,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",152,0)
 S DISPDATA(LCT)="Error Information:",LCT=LCT+1
"RTN","IBCNERPE",153,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",154,0)
 I $P(RPTDATA(1),U,14)'="" D
"RTN","IBCNERPE",155,0)
 . ; Split text, if necessary
"RTN","IBCNERPE",156,0)
 . N IBERR,IBTOT,IBCT
"RTN","IBCNERPE",157,0)
 . D FSTRNG^IBJU1($P(RPTDATA(1),U,14),60,.IBERR)
"RTN","IBCNERPE",158,0)
 . S IBTOT=$O(IBERR(""),-1)
"RTN","IBCNERPE",159,0)
 . F IBCT=1:1:IBTOT S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($S(IBCT=1:$$LBL^IBCNERP2(365,1.14),1:" "),17,"R")_$G(IBERR(IBCT)),LCT=LCT+1
"RTN","IBCNERPE",160,0)
 I $P(RPTDATA(1),U,15)'="" D
"RTN","IBCNERPE",161,0)
 . ; Split text, if necessary
"RTN","IBCNERPE",162,0)
 . N IBERR,IBTOT,IBCT
"RTN","IBCNERPE",163,0)
 . D FSTRNG^IBJU1($P(RPTDATA(1),U,15),60,.IBERR)
"RTN","IBCNERPE",164,0)
 . S IBTOT=$O(IBERR(""),-1)
"RTN","IBCNERPE",165,0)
 . F IBCT=1:1:IBTOT S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($S(IBCT=1:$$LBL^IBCNERP2(365,1.15),1:" "),17,"R")_$G(IBERR(IBCT)),LCT=LCT+1
"RTN","IBCNERPE",166,0)
 ; Disp Err Txt
"RTN","IBCNERPE",167,0)
 F CT=1:1:+$O(RPTDATA(4,""),-1) D
"RTN","IBCNERPE",168,0)
 . I CT=1 S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,4.01),17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1 Q
"RTN","IBCNERPE",169,0)
 . S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1
"RTN","IBCNERPE",170,0)
DATAX ;
"RTN","IBCNERPE",171,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERPE",172,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERPE",173,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERPE",174,0)
 .. S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT)),LCT=LCT+1
"RTN","IBCNERPE",175,0)
 ;
"RTN","IBCNERPE",176,0)
 Q
"RTN","IBCNEUT3")
0^42^B58297927
"RTN","IBCNEUT3",1,0)
IBCNEUT3 ;DAOU/AM - IIV MISC. UTILITIES ;12-JUN-2002
"RTN","IBCNEUT3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271**;21-MAR-94
"RTN","IBCNEUT3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT3",4,0)
 ;
"RTN","IBCNEUT3",5,0)
 ; The purpose of the INSERROR utility is to identify a legitimate
"RTN","IBCNEUT3",6,0)
 ; Insurance Company name, returning the associated Payer IEN and
"RTN","IBCNEUT3",7,0)
 ; National ID.  This extrinsic function can receive either Insurance or
"RTN","IBCNEUT3",8,0)
 ; Buffer data, identified as TYPE I or B, respectively.
"RTN","IBCNEUT3",9,0)
 ;
"RTN","IBCNEUT3",10,0)
 ; The former is the simpler case.  The IEN, in this case the Insurance
"RTN","IBCNEUT3",11,0)
 ; IEN, is validated using the following criteria (some of which is
"RTN","IBCNEUT3",12,0)
 ; validated in routine IBCNEUT4) :
"RTN","IBCNEUT3",13,0)
 ;
"RTN","IBCNEUT3",14,0)
 ; [1] Does it have a National ID?
"RTN","IBCNEUT3",15,0)
 ; [2] Does the National ID have IIV defined?
"RTN","IBCNEUT3",16,0)
 ; [3] Is the Payer active (i.e. the deactivated flag is turned off)
"RTN","IBCNEUT3",17,0)
 ; [4] Is the national connection enabled?
"RTN","IBCNEUT3",18,0)
 ; [5] Is the National ID blocked by VISTA?
"RTN","IBCNEUT3",19,0)
 ;
"RTN","IBCNEUT3",20,0)
 ; If all 5 criteria are met, the Payer IEN and National ID are
"RTN","IBCNEUT3",21,0)
 ; returned.  If not, an error is generated and returned in ARRAY with
"RTN","IBCNEUT3",22,0)
 ; information specific to the type of problem encountered.
"RTN","IBCNEUT3",23,0)
 ;
"RTN","IBCNEUT3",24,0)
 ; If the TYPE passed is B for Buffer, the IEN is the Buffer IEN.
"RTN","IBCNEUT3",25,0)
 ; The Insurance Company name is retrieved from the Buffer file and
"RTN","IBCNEUT3",26,0)
 ; leading and trailing spaces are stripped.  This value is compared to
"RTN","IBCNEUT3",27,0)
 ; the entries in the "B" cross reference of the Insurance Company file
"RTN","IBCNEUT3",28,0)
 ; (whose values have also been stripped of leading and trailing spaces).
"RTN","IBCNEUT3",29,0)
 ; If a match (or several matches) is found,and a unique National ID is
"RTN","IBCNEUT3",30,0)
 ; identified, confirm the 5 set of insurance validation criteria and
"RTN","IBCNEUT3",31,0)
 ; process as above.
"RTN","IBCNEUT3",32,0)
 ;
"RTN","IBCNEUT3",33,0)
 ; If no match in the Insurance Company could be made, check the Auto
"RTN","IBCNEUT3",34,0)
 ; Match file.  If a unique IEN is identified, confirm the 5 set of
"RTN","IBCNEUT3",35,0)
 ; criteria stated above and process in kind.
"RTN","IBCNEUT3",36,0)
 ;
"RTN","IBCNEUT3",37,0)
 ; If no match could be established in both the Insurance Company and the
"RTN","IBCNEUT3",38,0)
 ; Auto Match files, check the insurance company synonym file (stripping 
"RTN","IBCNEUT3",39,0)
 ; off leading and trailing spaces) while preserving case sensitivity.
"RTN","IBCNEUT3",40,0)
 ; If a unique Insurance Company could be identified, confirm the 5 set
"RTN","IBCNEUT3",41,0)
 ; of validation criteria and process as above. 
"RTN","IBCNEUT3",42,0)
 ;
"RTN","IBCNEUT3",43,0)
 ; 
"RTN","IBCNEUT3",44,0)
 ; Can't be called from the top
"RTN","IBCNEUT3",45,0)
 Q
"RTN","IBCNEUT3",46,0)
 ;
"RTN","IBCNEUT3",47,0)
 ;
"RTN","IBCNEUT3",48,0)
INSERROR(TYPE,IEN,ERRFLG,ARRAY) ;
"RTN","IBCNEUT3",49,0)
 ; Formal parameters:
"RTN","IBCNEUT3",50,0)
 ;  TYPE:   Type of IEN passed in the second parameter.
"RTN","IBCNEUT3",51,0)
 ;          Either "B" for "Buffer" or "I" for "Insurance".
"RTN","IBCNEUT3",52,0)
 ;          Mandatory, passed by value.
"RTN","IBCNEUT3",53,0)
 ;  IEN:    IEN to perform a lookup for. Mandatory, passed by value.
"RTN","IBCNEUT3",54,0)
 ;  ERRFLG: Error flag. "" or 0 if no extended error information is
"RTN","IBCNEUT3",55,0)
 ;          requested, 1 if extended error information is requested.
"RTN","IBCNEUT3",56,0)
 ;          Optional (the default is 0), passed by value.
"RTN","IBCNEUT3",57,0)
 ;  ARRAY:  Array of error messages returned by the function.
"RTN","IBCNEUT3",58,0)
 ;          Optional, passed by reference. Whatever is passed in will be
"RTN","IBCNEUT3",59,0)
 ;          KILLed by the function. The structure of the return array is
"RTN","IBCNEUT3",60,0)
 ;          as follows:
"RTN","IBCNEUT3",61,0)
 ;          ARRAY         # of error messages passed back
"RTN","IBCNEUT3",62,0)
 ;          ARRAY(error#) Data for this error number, including error
"RTN","IBCNEUT3",63,0)
 ;          number 1 present in the value returned by the function.
"RTN","IBCNEUT3",64,0)
 ;                [1]   IEN of the error code in the symbol file
"RTN","IBCNEUT3",65,0)
 ;                [2]   # of lines in the error message text
"RTN","IBCNEUT3",66,0)
 ;          ARRAY(error #,line #) - One line of error message text
"RTN","IBCNEUT3",67,0)
 ;                                  up to 70 characters long
"RTN","IBCNEUT3",68,0)
 ;
"RTN","IBCNEUT3",69,0)
 ;          Returned value consists of the following "^"-delimited pcs:
"RTN","IBCNEUT3",70,0)
 ;           [1]   The IEN of the IIV SYMBOL File (#365.15) entry for
"RTN","IBCNEUT3",71,0)
 ;                 the first error condition encountered by the function.
"RTN","IBCNEUT3",72,0)
 ;                 This is only present if a valid Payer was not found.
"RTN","IBCNEUT3",73,0)
 ;           [2]   Payer IEN if a Payer was found, "" otherwise
"RTN","IBCNEUT3",74,0)
 ;           [3]   National ID if a Payer was found
"RTN","IBCNEUT3",75,0)
 ;
"RTN","IBCNEUT3",76,0)
 ; Initialize all variables used in this program
"RTN","IBCNEUT3",77,0)
 N INSIEN,INSNAME,NAMEARR,PAYID,PAYIEN,SYMIEN
"RTN","IBCNEUT3",78,0)
 ; Initialize return variables
"RTN","IBCNEUT3",79,0)
 S (PAYID,PAYIEN,SYMIEN)=""
"RTN","IBCNEUT3",80,0)
 ; If the calling program didn't pass the Extended Error flag, init it
"RTN","IBCNEUT3",81,0)
 S ERRFLG=+$G(ERRFLG)
"RTN","IBCNEUT3",82,0)
 ; Initialize array of extended error info to be returned
"RTN","IBCNEUT3",83,0)
 K ARRAY
"RTN","IBCNEUT3",84,0)
 ; Validate input parameters
"RTN","IBCNEUT3",85,0)
 I $G(TYPE)'="B",$G(TYPE)'="I" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN type "_$G(TYPE)_" passed to the insurance match algorithm is neither 'B' nor 'I'.") G EXIT
"RTN","IBCNEUT3",86,0)
 I $G(IEN)="" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN is not passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",87,0)
 I TYPE="B",'$D(^IBA(355.33,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Buffer IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",88,0)
 I TYPE="I",'$D(^DIC(36,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Insurance Company IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",89,0)
 ;
"RTN","IBCNEUT3",90,0)
 ; If the IEN is an Insurance Company IEN, validate it
"RTN","IBCNEUT3",91,0)
 I TYPE="I" D  G EXIT
"RTN","IBCNEUT3",92,0)
 . N TMP
"RTN","IBCNEUT3",93,0)
 . ; Check to see if ins co is ACTIVE
"RTN","IBCNEUT3",94,0)
 . S TMP=$$ACTIVE^IBCNEUT4(IEN)
"RTN","IBCNEUT3",95,0)
 . I 'TMP S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance Company "_$P(TMP,U,2)_" is not active.") Q
"RTN","IBCNEUT3",96,0)
 . D VALID^IBCNEUT4(IEN,.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",97,0)
 ;
"RTN","IBCNEUT3",98,0)
 ; Retrieve the ins co name from the Ins Buffer
"RTN","IBCNEUT3",99,0)
 S INSNAME=$$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U,1))
"RTN","IBCNEUT3",100,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B13") G EXIT
"RTN","IBCNEUT3",101,0)
 ; Retrieve all ins co IENs matching this ins co name
"RTN","IBCNEUT3",102,0)
 D INSIEN^IBCNEUT8(INSNAME,.INSIEN)
"RTN","IBCNEUT3",103,0)
 ; 
"RTN","IBCNEUT3",104,0)
 ; If one or more ins. co. name matches found, retrieve Payer info
"RTN","IBCNEUT3",105,0)
 I $D(INSIEN) D  G EXIT
"RTN","IBCNEUT3",106,0)
 . ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",107,0)
 . I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") Q
"RTN","IBCNEUT3",108,0)
 . ; Find National IDs for these ins co IENs
"RTN","IBCNEUT3",109,0)
 . D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",110,0)
 . ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",111,0)
 . I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active.") Q
"RTN","IBCNEUT3",112,0)
 . ; Quit with an error if no Payer is found for these ins cos
"RTN","IBCNEUT3",113,0)
 . I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") Q
"RTN","IBCNEUT3",114,0)
 . ; Quit with an error if more than one Payer found
"RTN","IBCNEUT3",115,0)
 . I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","There are multiple Insurance companies named "_INSNAME_" in the Insurance Company file that are linked to more than one Payer",.PAYID),PAYID="" Q
"RTN","IBCNEUT3",116,0)
 . ; Validate the found unique Payer
"RTN","IBCNEUT3",117,0)
 . D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",118,0)
 ;
"RTN","IBCNEUT3",119,0)
 ; If no exact ins co name match was found, check AutoMatch file
"RTN","IBCNEUT3",120,0)
 ; No need to filter out inactives as the AMLOOK will handle it
"RTN","IBCNEUT3",121,0)
 I $$AMLOOK^IBCNEUT1(INSNAME,1,.NAMEARR) D  I $D(INSIEN) G EXIT
"RTN","IBCNEUT3",122,0)
 . N NAME
"RTN","IBCNEUT3",123,0)
 . ; Based on the array of ins cos returned by the AutoMatch
"RTN","IBCNEUT3",124,0)
 . ; build an array of ins co IENs that they point to
"RTN","IBCNEUT3",125,0)
 . S NAME="" F  S NAME=$O(NAMEARR(NAME)) Q:NAME=""  D INSIEN^IBCNEUT8($$TRIM^XLFSTR(NAME),.INSIEN)
"RTN","IBCNEUT3",126,0)
 . ; If nothing found in the Insurance Co x-ref, quit w/o validation
"RTN","IBCNEUT3",127,0)
 . I '$D(INSIEN) Q
"RTN","IBCNEUT3",128,0)
 . ; Check if there is more than one ins co IEN that matches
"RTN","IBCNEUT3",129,0)
 . ; the entered name, in which case exit with an error
"RTN","IBCNEUT3",130,0)
 . I $O(INSIEN(""))'=$O(INSIEN(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company in the Auto Match file",.NAMEARR) Q
"RTN","IBCNEUT3",131,0)
 . ; Validate the found unique ins co IEN
"RTN","IBCNEUT3",132,0)
 . D VALID^IBCNEUT4($O(INSIEN("")),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",133,0)
 ;
"RTN","IBCNEUT3",134,0)
 ;  If the first two lookups failed, check the Ins Co Synonym file:
"RTN","IBCNEUT3",135,0)
 ; Retrieve all ins co IENs that match in the Synonym file
"RTN","IBCNEUT3",136,0)
 ;M INSIEN=^DIC(36,"C",INSNAME)
"RTN","IBCNEUT3",137,0)
 N %X,%Y
"RTN","IBCNEUT3",138,0)
 S %X="^DIC(36,""C"",INSNAME,"
"RTN","IBCNEUT3",139,0)
 S %Y="INSIEN("
"RTN","IBCNEUT3",140,0)
 I $D(^DIC(36,"C",INSNAME))#10=1 S INSIEN=^DIC(36,"C",INSNAME)
"RTN","IBCNEUT3",141,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNEUT3",142,0)
 ;
"RTN","IBCNEUT3",143,0)
 ; If nothing found in the Synonym file, error out
"RTN","IBCNEUT3",144,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B1","Insurance company "_INSNAME_" could not be matched to a valid entry in the Insurance Company file.") G EXIT
"RTN","IBCNEUT3",145,0)
 ; Loop thru the ins co IENs that matched in the Synonym file
"RTN","IBCNEUT3",146,0)
 S INSIEN=0 F  S INSIEN=$O(INSIEN(INSIEN)) Q:'INSIEN  D
"RTN","IBCNEUT3",147,0)
 . N NAME
"RTN","IBCNEUT3",148,0)
 . ; Retrieve the ins co name for this IEN
"RTN","IBCNEUT3",149,0)
 . S NAME=$$TRIM^XLFSTR($P($G(^DIC(36,INSIEN,0)),U,1))
"RTN","IBCNEUT3",150,0)
 . I NAME'="" S NAMEARR(NAME)=""
"RTN","IBCNEUT3",151,0)
 ;
"RTN","IBCNEUT3",152,0)
 ; If more than one ins co name was found, error out
"RTN","IBCNEUT3",153,0)
 I $O(NAMEARR(""))'=$O(NAMEARR(""),-1) D  G EXIT
"RTN","IBCNEUT3",154,0)
 . S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company name in the Synonym cross-reference of the Insurance Company file",.NAMEARR)
"RTN","IBCNEUT3",155,0)
 ;
"RTN","IBCNEUT3",156,0)
 ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",157,0)
 I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") G EXIT
"RTN","IBCNEUT3",158,0)
 ; Find Payers for these ins co IENs
"RTN","IBCNEUT3",159,0)
 D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",160,0)
 ;
"RTN","IBCNEUT3",161,0)
 ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",162,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active."),PAYID="" G EXIT
"RTN","IBCNEUT3",163,0)
 ; If no Payer was found, error out
"RTN","IBCNEUT3",164,0)
 I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_$O(NAMEARR(""))_" is not linked to a Payer.") G EXIT
"RTN","IBCNEUT3",165,0)
 ; If multiple Payers were found, error out
"RTN","IBCNEUT3",166,0)
 I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","Insurance company "_$O(NAMEARR(""))_" is linked to more than one Payer",.PAYID),PAYID="" G EXIT
"RTN","IBCNEUT3",167,0)
 ; Validate the found unique Payer
"RTN","IBCNEUT3",168,0)
 D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",169,0)
 ;
"RTN","IBCNEUT3",170,0)
EXIT ; Main function exit point
"RTN","IBCNEUT3",171,0)
 Q SYMIEN_U_PAYIEN_U_PAYID
"RTN","IBCNEUT3",172,0)
 ;
"RTN","IBCNEUT4")
0^17^B49767116
"RTN","IBCNEUT4",1,0)
IBCNEUT4 ;DAOU/ESG - IIV MISC. UTILITIES ;17-JUN-2002
"RTN","IBCNEUT4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBCNEUT4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT4",4,0)
 ;
"RTN","IBCNEUT4",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT4",6,0)
 Q
"RTN","IBCNEUT4",7,0)
 ;
"RTN","IBCNEUT4",8,0)
 ;
"RTN","IBCNEUT4",9,0)
ACTIVE(INSDA) ; Is this insurance company currently active?  1:yes or 0:no
"RTN","IBCNEUT4",10,0)
 ; Insurance company name returned in the second piece.
"RTN","IBCNEUT4",11,0)
 ; Input:  INSDA - insurance company ien
"RTN","IBCNEUT4",12,0)
 NEW ACTFLG,INSDATA
"RTN","IBCNEUT4",13,0)
 S ACTFLG=0                                  ; default inactive
"RTN","IBCNEUT4",14,0)
 I '$G(INSDA) G ACTIVEX                      ; bad data passed in
"RTN","IBCNEUT4",15,0)
 S INSDATA=$G(^DIC(36,INSDA,0))              ; zero node of File 36
"RTN","IBCNEUT4",16,0)
 I INSDATA="" G ACTIVEX                      ; bad record
"RTN","IBCNEUT4",17,0)
 I $P(INSDATA,U,5) G ACTIVEX                 ; INACTIVE flag is true
"RTN","IBCNEUT4",18,0)
 I $P($G(^DIC(36,INSDA,5)),U,1) G ACTIVEX    ; SCHEDULED FOR DELETION flag is true
"RTN","IBCNEUT4",19,0)
 S ACTFLG=1                                  ; Otherwise, its active
"RTN","IBCNEUT4",20,0)
ACTIVEX ;
"RTN","IBCNEUT4",21,0)
 Q ACTFLG_U_$P($G(^DIC(36,+$G(INSDA),0)),U,1)
"RTN","IBCNEUT4",22,0)
 ;
"RTN","IBCNEUT4",23,0)
 ;
"RTN","IBCNEUT4",24,0)
EXCLUDE(NAME) ; This function determines if we should exclude the insurance
"RTN","IBCNEUT4",25,0)
 ; company based on the name.
"RTN","IBCNEUT4",26,0)
 ; This function returns 1 if we should exclude the insurance company.
"RTN","IBCNEUT4",27,0)
 ; This function returns 0 if we should not exclude it (i.e. include it)
"RTN","IBCNEUT4",28,0)
 ;
"RTN","IBCNEUT4",29,0)
 ; Initialize flag; default to not exclude it
"RTN","IBCNEUT4",30,0)
 NEW EXCL
"RTN","IBCNEUT4",31,0)
 S EXCL=0
"RTN","IBCNEUT4",32,0)
 ;
"RTN","IBCNEUT4",33,0)
 ; Screen out bad data
"RTN","IBCNEUT4",34,0)
 I $G(NAME)="" S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",35,0)
 ;
"RTN","IBCNEUT4",36,0)
 ; Screen out MEDICAID or MEDICARE ins co names
"RTN","IBCNEUT4",37,0)
 I NAME["MEDICAID"!(NAME["MEDICARE") S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",38,0)
EXCLUDX ;
"RTN","IBCNEUT4",39,0)
 Q EXCL
"RTN","IBCNEUT4",40,0)
 ;
"RTN","IBCNEUT4",41,0)
 ;
"RTN","IBCNEUT4",42,0)
CLEAR(DA,EDITED,FORCE) ; This procedure will clear the IIV status field from an
"RTN","IBCNEUT4",43,0)
 ; Insurance Buffer entry (pass in the internal entry number of the
"RTN","IBCNEUT4",44,0)
 ; buffer entry).  If the FORCE variable is not passed then the IIV
"RTN","IBCNEUT4",45,0)
 ; status will only be cleared if the existing status is an error status
"RTN","IBCNEUT4",46,0)
 ;
"RTN","IBCNEUT4",47,0)
 ; Parameters
"RTN","IBCNEUT4",48,0)
 ;        DA - required input parameter; buffer ien
"RTN","IBCNEUT4",49,0)
 ;    EDITED - optional output parameter; this will tell you if the
"RTN","IBCNEUT4",50,0)
 ;             buffer symbol was cleared
"RTN","IBCNEUT4",51,0)
 ;     FORCE - optional input parameter; if this is set to 1 then the
"RTN","IBCNEUT4",52,0)
 ;             IIV status field will be cleared regardless of the
"RTN","IBCNEUT4",53,0)
 ;             current status 
"RTN","IBCNEUT4",54,0)
 NEW DIE,DR,D,D0,DI,DIC,DISYS,DQ,X,%
"RTN","IBCNEUT4",55,0)
 I '$G(DA) G CLEARX
"RTN","IBCNEUT4",56,0)
 I '$D(FORCE) S FORCE=0
"RTN","IBCNEUT4",57,0)
 I 'FORCE,$$SYMBOL^IBCNBLL(DA)'="!" G CLEARX
"RTN","IBCNEUT4",58,0)
 S DIE=355.33,DR=".12///@"
"RTN","IBCNEUT4",59,0)
 D ^DIE
"RTN","IBCNEUT4",60,0)
 S EDITED=1
"RTN","IBCNEUT4",61,0)
CLEARX ;
"RTN","IBCNEUT4",62,0)
 Q
"RTN","IBCNEUT4",63,0)
 ;
"RTN","IBCNEUT4",64,0)
 ;
"RTN","IBCNEUT4",65,0)
INFO(IBBUFDA) ; Return original and current buffer data
"RTN","IBCNEUT4",66,0)
 ; This procedure will retrieve the following data from the buffer and
"RTN","IBCNEUT4",67,0)
 ; from the transmission queue file.  The buffer holds the current data
"RTN","IBCNEUT4",68,0)
 ; and the TQ file holds the original buffer data.
"RTN","IBCNEUT4",69,0)
 ; Input
"RTN","IBCNEUT4",70,0)
 ;    IBBUFDA - buffer internal entry number
"RTN","IBCNEUT4",71,0)
 ; Output
"RTN","IBCNEUT4",72,0)
 ;    a pieced string as follows
"RTN","IBCNEUT4",73,0)
 ;    [1]  Has this buffer entry been transmitted? 1/0
"RTN","IBCNEUT4",74,0)
 ;    [2]  Current buffer source of information (external)
"RTN","IBCNEUT4",75,0)
 ;    [3]  Current buffer source of information (internal)
"RTN","IBCNEUT4",76,0)
 ;    [4]  Current buffer insurance company name
"RTN","IBCNEUT4",77,0)
 ;    [5]  Current buffer group number
"RTN","IBCNEUT4",78,0)
 ;    [6]  Current buffer group name
"RTN","IBCNEUT4",79,0)
 ;    [7]  Current buffer subscriber ID
"RTN","IBCNEUT4",80,0)
 ;    [8]  Original buffer insurance company name
"RTN","IBCNEUT4",81,0)
 ;    [9]  Original buffer group number
"RTN","IBCNEUT4",82,0)
 ;   [10]  Original buffer group name
"RTN","IBCNEUT4",83,0)
 ;   [11]  Original buffer subscriber ID
"RTN","IBCNEUT4",84,0)
 ;
"RTN","IBCNEUT4",85,0)
 NEW IB0,IB20,IB40,IB60,DATA,RESPIEN,FOUND,TQIEN,TQDATA,TQDATA1,DISYS
"RTN","IBCNEUT4",86,0)
 S DATA=""
"RTN","IBCNEUT4",87,0)
 I '$G(IBBUFDA) G INFOX
"RTN","IBCNEUT4",88,0)
 I '$D(^IBA(355.33,IBBUFDA)) G INFOX
"RTN","IBCNEUT4",89,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0))
"RTN","IBCNEUT4",90,0)
 S IB20=$G(^IBA(355.33,IBBUFDA,20))
"RTN","IBCNEUT4",91,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNEUT4",92,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNEUT4",93,0)
 S $P(DATA,U,1)=0    ; default to not been transmitted
"RTN","IBCNEUT4",94,0)
 S $P(DATA,U,2)=$$EXTERNAL^DILFD(355.33,.03,"",$P(IB0,U,3))  ; source
"RTN","IBCNEUT4",95,0)
 S $P(DATA,U,3)=$P(IB0,U,3)     ; internal source
"RTN","IBCNEUT4",96,0)
 S $P(DATA,U,4)=$P(IB20,U,1)    ; insurance company name
"RTN","IBCNEUT4",97,0)
 S $P(DATA,U,5)=$P(IB40,U,3)    ; group number
"RTN","IBCNEUT4",98,0)
 S $P(DATA,U,6)=$P(IB40,U,2)    ; group name
"RTN","IBCNEUT4",99,0)
 S $P(DATA,U,7)=$P(IB60,U,4)    ; subscriber id
"RTN","IBCNEUT4",100,0)
 ;
"RTN","IBCNEUT4",101,0)
 ; Look at the response file and the transmission queue file.  Since
"RTN","IBCNEUT4",102,0)
 ; we're trying to get the original data look at the oldest data first.
"RTN","IBCNEUT4",103,0)
 S RESPIEN=0,FOUND=0
"RTN","IBCNEUT4",104,0)
 F  S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,RESPIEN)) Q:'RESPIEN  D  Q:FOUND
"RTN","IBCNEUT4",105,0)
 . S TQIEN=$P($G(^IBCN(365,RESPIEN,0)),U,5)
"RTN","IBCNEUT4",106,0)
 . I 'TQIEN Q
"RTN","IBCNEUT4",107,0)
 . S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEUT4",108,0)
 . S TQDATA1=$G(^IBCN(365.1,TQIEN,1))
"RTN","IBCNEUT4",109,0)
 . I TQDATA="" Q
"RTN","IBCNEUT4",110,0)
 . S $P(DATA,U,8)=$P(TQDATA1,U,2)    ; insurance company name
"RTN","IBCNEUT4",111,0)
 . S $P(DATA,U,9)=$P(TQDATA1,U,3)    ; group number
"RTN","IBCNEUT4",112,0)
 . S $P(DATA,U,10)=$P(TQDATA1,U,4)    ; group name
"RTN","IBCNEUT4",113,0)
 . S $P(DATA,U,11)=$P(TQDATA1,U,5)    ; subscriber id
"RTN","IBCNEUT4",114,0)
 . S FOUND=1                          ; Stop once we have some data
"RTN","IBCNEUT4",115,0)
 . Q
"RTN","IBCNEUT4",116,0)
 ;
"RTN","IBCNEUT4",117,0)
 I FOUND S $P(DATA,U,1)=1
"RTN","IBCNEUT4",118,0)
INFOX ;
"RTN","IBCNEUT4",119,0)
 Q DATA
"RTN","IBCNEUT4",120,0)
 ;
"RTN","IBCNEUT4",121,0)
 ;
"RTN","IBCNEUT4",122,0)
VALID(INSIEN,PAYIEN,PAYID,SYMIEN) ; Validate an Ins Co IEN
"RTN","IBCNEUT4",123,0)
 ; Input parameter: INSIEN - Ins co IEN, passed by value
"RTN","IBCNEUT4",124,0)
 ; Output parameters: PAYIEN, PAYID, SYMIEN, passed by reference
"RTN","IBCNEUT4",125,0)
 N APPDATA,APPIEN,INSNAME
"RTN","IBCNEUT4",126,0)
 ; Retrieve the Ins Co name
"RTN","IBCNEUT4",127,0)
 S INSNAME=$P($G(^DIC(36,INSIEN,0)),U,1)
"RTN","IBCNEUT4",128,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Insurance company IEN "_INSIEN_" doesn't have a name on file.") G VALIDX
"RTN","IBCNEUT4",129,0)
 ; Screen out MEDICAID or MEDICARE ins co names
"RTN","IBCNEUT4",130,0)
 I $$EXCLUDE(INSNAME) S SYMIEN=$$ERROR^IBCNEUT8("B11","Insurance company "_INSNAME_" contains MEDICAID or MEDICARE in the name.  Electronic inquiries cannot be made to this insurance company.") G VALIDX
"RTN","IBCNEUT4",131,0)
 ; Retrieve the Payer IEN associated with this ins co
"RTN","IBCNEUT4",132,0)
 S PAYIEN=$P($G(^DIC(36,INSIEN,3)),U,10)
"RTN","IBCNEUT4",133,0)
 I PAYIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") G VALIDX
"RTN","IBCNEUT4",134,0)
 D VALPYR(INSNAME) ; Payer val'n
"RTN","IBCNEUT4",135,0)
VALIDX ;
"RTN","IBCNEUT4",136,0)
 Q
"RTN","IBCNEUT4",137,0)
 ;
"RTN","IBCNEUT4",138,0)
PAYER(PAYIEN) ;
"RTN","IBCNEUT4",139,0)
 ; Entry pt for Most Pop Payer (called by POP^IBCNEDE4)
"RTN","IBCNEUT4",140,0)
 N SYMIEN,PAYID
"RTN","IBCNEUT4",141,0)
 N APPDATA,APPIEN ; Set within tag VALPYR these variables are never
"RTN","IBCNEUT4",142,0)
 ;                  killed. Using tag VALID's method of NEWing variables
"RTN","IBCNEUT4",143,0)
 ;                  first will allow them to be killed appropriately.
"RTN","IBCNEUT4",144,0)
 N ARRAY ; This is an array that is set by ERROR^IBCNEUT8 but never
"RTN","IBCNEUT4",145,0)
 ;         killed.  When there is a most popular payer that is not
"RTN","IBCNEUT4",146,0)
 ;         eligible for inquiries, ARRAY would continue to grow.
"RTN","IBCNEUT4",147,0)
 S (SYMIEN,PAYID)=""
"RTN","IBCNEUT4",148,0)
 D VALPYR("")
"RTN","IBCNEUT4",149,0)
 Q SYMIEN_U_PAYID
"RTN","IBCNEUT4",150,0)
 ;
"RTN","IBCNEUT4",151,0)
VALPYR(INSNM) ;
"RTN","IBCNEUT4",152,0)
 ; Payer Val'n - note: PAYIEN (payer IEN) must be set
"RTN","IBCNEUT4",153,0)
 ; If INSNM="" val'n is for Most Pop Payer
"RTN","IBCNEUT4",154,0)
 ;
"RTN","IBCNEUT4",155,0)
 S INSNM=$G(INSNM) ; Init variable if not passed
"RTN","IBCNEUT4",156,0)
 ; Retrieve the National ID(Payer ID) for this Payer IEN
"RTN","IBCNEUT4",157,0)
 S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT4",158,0)
 I PAYID="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Payer IEN "_PAYIEN_" does not have a Payer.") Q
"RTN","IBCNEUT4",159,0)
 ; Retrieve the IEN of the IIV Application
"RTN","IBCNEUT4",160,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PAYIEN)
"RTN","IBCNEUT4",161,0)
 I APPIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B9","The eIIV Payer Application has not been created for this site.") Q
"RTN","IBCNEUT4",162,0)
 ; Verify the existence of the application for this Payer
"RTN","IBCNEUT4",163,0)
 I '$D(^IBE(365.12,PAYIEN,1,APPIEN)) S SYMIEN=$$ERROR^IBCNEUT8("B7","Insurance company "_INSNM_" is linked to Payer "_PAYID_" which is not set up to accept electronic insurance eligibility requests.") Q
"RTN","IBCNEUT4",164,0)
 ; Retrieve the eIIV-specific application data for this Payer
"RTN","IBCNEUT4",165,0)
 S APPDATA=$G(^IBE(365.12,PAYIEN,1,APPIEN,0))
"RTN","IBCNEUT4",166,0)
 ; Check if the Payer doesn't have either an active national or an
"RTN","IBCNEUT4",167,0)
 ; active local connection and return one or, if applicable, BOTH errors
"RTN","IBCNEUT4",168,0)
 I '$P(APPDATA,U,3) S SYMIEN=$$ERROR^IBCNEUT8("B6","Insurance company "_INSNM_" is linked to Payer "_PAYID_" which is not locally active for IIV.")
"RTN","IBCNEUT4",169,0)
 I '$P(APPDATA,U,2) S SYMIEN=$$ERROR^IBCNEUT8("B5","Insurance company "_INSNM_" is linked to Payer "_PAYID_" which is not nationally active for IIV.")
"RTN","IBCNEUT4",170,0)
 ; Check if the Payer has been deactivated, if so report it
"RTN","IBCNEUT4",171,0)
 I $P(APPDATA,U,11) S SYMIEN=$$ERROR^IBCNEUT8("B14","Insurance company "_INSNM_" is linked to Payer "_PAYID_" which has been deactivated as of "_$$FMTE^XLFDT($P(APPDATA,U,12),"5Z")_".")
"RTN","IBCNEUT4",172,0)
 Q
"RTN","IBCNEUT4",173,0)
 ;
"RTN","IBCNEUT4",174,0)
MULTNAME(TEXT,LIST) ; Function to return an error message with a list of multiple names
"RTN","IBCNEUT4",175,0)
 ; Input parameters:
"RTN","IBCNEUT4",176,0)
 ;  TEXT - Error text to display
"RTN","IBCNEUT4",177,0)
 ;  LIST - List of items, can be either a list of ins co
"RTN","IBCNEUT4",178,0)
 ;         names or National ID names
"RTN","IBCNEUT4",179,0)
 ; Output parameter: Function value - Formatted list of items in 1 string
"RTN","IBCNEUT4",180,0)
 N COLIST,I,NAME,TOOLONG
"RTN","IBCNEUT4",181,0)
 S NAME="",COLIST=TEXT,TOOLONG=0
"RTN","IBCNEUT4",182,0)
 F I=1:1 S NAME=$O(LIST(NAME)) Q:NAME=""  D  Q:TOOLONG
"RTN","IBCNEUT4",183,0)
 . ; Add this name to the list of found names
"RTN","IBCNEUT4",184,0)
 . I I=1 S COLIST=COLIST_": "_NAME
"RTN","IBCNEUT4",185,0)
 . E  S COLIST=COLIST_", "_NAME
"RTN","IBCNEUT4",186,0)
 . ; check if the list of items may cause a MAXSTRING error
"RTN","IBCNEUT4",187,0)
 . I $L(COLIST)<450 Q
"RTN","IBCNEUT4",188,0)
 . S COLIST=COLIST_" (Too many items to display)",TOOLONG=1
"RTN","IBCNEUT4",189,0)
 ;
"RTN","IBCNEUT4",190,0)
 Q COLIST_"."
"RTN","IBCNEUT4",191,0)
 ;
"RTN","IBCNEUT5")
0^33^B60224642
"RTN","IBCNEUT5",1,0)
IBCNEUT5 ;DAOU/ALA - IIV MISC. UTILITIES ;20-JUN-2002
"RTN","IBCNEUT5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,284,271**;21-MAR-94
"RTN","IBCNEUT5",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT5",4,0)
 ;
"RTN","IBCNEUT5",5,0)
 ;**Program Description**
"RTN","IBCNEUT5",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNEUT5",7,0)
 ;
"RTN","IBCNEUT5",8,0)
 Q
"RTN","IBCNEUT5",9,0)
 ;
"RTN","IBCNEUT5",10,0)
MSG(MGRP,XMSUB,XMTEXT,FROMFLAG,XMY) ;  Send a MailMan Message
"RTN","IBCNEUT5",11,0)
 ;
"RTN","IBCNEUT5",12,0)
 ;  Input Parameters
"RTN","IBCNEUT5",13,0)
 ;   MGRP = Mailgroup Name (optional)
"RTN","IBCNEUT5",14,0)
 ;   XMSUB = Subject Line (required)
"RTN","IBCNEUT5",15,0)
 ;   XMTEXT = Message Text Array Name in open format:  "MSG(" (required)
"RTN","IBCNEUT5",16,0)
 ;   FROMFLAG = Flag indicating from whom the message is sent (optional)
"RTN","IBCNEUT5",17,0)
 ;         false/undefined:  from the specific, non-human IIV user
"RTN","IBCNEUT5",18,0)
 ;                    true:  from the actual user (DUZ)
"RTN","IBCNEUT5",19,0)
 ;   XMY = recipients array; pass by reference (optional)
"RTN","IBCNEUT5",20,0)
 ;         The possible recipients are the sender, the Mail Group in the
"RTN","IBCNEUT5",21,0)
 ;         first parameter, and anybody else already defined in the XMY 
"RTN","IBCNEUT5",22,0)
 ;         array when this parameter is used.
"RTN","IBCNEUT5",23,0)
 ;
"RTN","IBCNEUT5",24,0)
 ; New MailMan variables and also some FileMan variables.  The FileMan
"RTN","IBCNEUT5",25,0)
 ; variables are used and not cleaned up when sending to external
"RTN","IBCNEUT5",26,0)
 ; internet addresses.
"RTN","IBCNEUT5",27,0)
 NEW DIFROM,XMDUZ,XMDUN,XMZ,XMMG,XMSTRIP,XMROU,XMYBLOB
"RTN","IBCNEUT5",28,0)
 NEW D0,D1,D2,DG,DIC,DICR,DISYS,DIW
"RTN","IBCNEUT5",29,0)
 NEW TMPSUB,TMPTEXT,TMPY,XX
"RTN","IBCNEUT5",30,0)
 ;
"RTN","IBCNEUT5",31,0)
 I $G(FROMFLAG),$G(DUZ) S XMDUZ=DUZ
"RTN","IBCNEUT5",32,0)
 E  S XMDUZ="IIV INTERFACE (IB)"
"RTN","IBCNEUT5",33,0)
 ;I $G(DUZ) S XMY(DUZ)=""      ; original location of line - moved below
"RTN","IBCNEUT5",34,0)
 I $G(MGRP)'="" S XMY("G."_MGRP)=""
"RTN","IBCNEUT5",35,0)
 ; If no recipients are defined, send to postmaster
"RTN","IBCNEUT5",36,0)
 I '$D(XMY) S XMY(.5)=""
"RTN","IBCNEUT5",37,0)
 I $G(DUZ) S XMY(DUZ)=""
"RTN","IBCNEUT5",38,0)
 ; Store off subject, array reference and array of recipients
"RTN","IBCNEUT5",39,0)
 S TMPSUB=XMSUB,TMPTEXT=XMTEXT
"RTN","IBCNEUT5",40,0)
 M TMPY=XMY
"RTN","IBCNEUT5",41,0)
 D ^XMD
"RTN","IBCNEUT5",42,0)
 ;
"RTN","IBCNEUT5",43,0)
 ; Error logic
"RTN","IBCNEUT5",44,0)
 ; If there's an error message and the message was not originally sent
"RTN","IBCNEUT5",45,0)
 ; to the postmaster, then send a message to the postmaster with this
"RTN","IBCNEUT5",46,0)
 ; error message.
"RTN","IBCNEUT5",47,0)
 ;
"RTN","IBCNEUT5",48,0)
 I $D(XMMG),'$D(TMPY(.5)) D
"RTN","IBCNEUT5",49,0)
 . S XMY(.5)=""
"RTN","IBCNEUT5",50,0)
 . S XMTEXT=TMPTEXT,XMSUB="MailMan Error"
"RTN","IBCNEUT5",51,0)
 . ; Add XMMG error message as the first line of the message
"RTN","IBCNEUT5",52,0)
 . S XX=999999
"RTN","IBCNEUT5",53,0)
 . F  S XX=$O(@(XMTEXT_"XX)"),-1) Q:'XX  S @(XMTEXT_"XX+3)")=@(XMTEXT_"XX)")
"RTN","IBCNEUT5",54,0)
 . S @(XMTEXT_"1)")="   MailMan Error:  "_XMMG
"RTN","IBCNEUT5",55,0)
 . S @(XMTEXT_"2)")="Original Subject:  "_TMPSUB
"RTN","IBCNEUT5",56,0)
 . S @(XMTEXT_"3)")="------Original Message------"
"RTN","IBCNEUT5",57,0)
 . D ^XMD
"RTN","IBCNEUT5",58,0)
 . Q
"RTN","IBCNEUT5",59,0)
 Q
"RTN","IBCNEUT5",60,0)
 ;
"RTN","IBCNEUT5",61,0)
 ;
"RTN","IBCNEUT5",62,0)
BFEXIST(DFN,INSNAME) ; Function returns 1 if an Entered Ins Buffer File 
"RTN","IBCNEUT5",63,0)
 ; entry exists with the same DFN and INSNAME, otherwise it returns a 0
"RTN","IBCNEUT5",64,0)
 ;
"RTN","IBCNEUT5",65,0)
 ; DFN - Patient DFN
"RTN","IBCNEUT5",66,0)
 ; INSNAME - Insurance Company Name File 36 - Field .01
"RTN","IBCNEUT5",67,0)
 ;
"RTN","IBCNEUT5",68,0)
 NEW EXIST,IEN
"RTN","IBCNEUT5",69,0)
 S EXIST=0
"RTN","IBCNEUT5",70,0)
 S INSNAME=$$TRIM^XLFSTR(INSNAME)  ; trimmed
"RTN","IBCNEUT5",71,0)
 I ('DFN)!(INSNAME="") G BFEXIT
"RTN","IBCNEUT5",72,0)
 ;
"RTN","IBCNEUT5",73,0)
 S IEN=0
"RTN","IBCNEUT5",74,0)
 F  S IEN=$O(^IBA(355.33,"C",DFN,IEN)) Q:'IEN!EXIST  D
"RTN","IBCNEUT5",75,0)
 .  ; Quit if status is NOT 'Entered'
"RTN","IBCNEUT5",76,0)
 .  I $P($G(^IBA(355.33,IEN,0)),U,4)'="E" Q
"RTN","IBCNEUT5",77,0)
 .  ; Quit if Ins Buffer Ins Co Name (trimmed) is NOT EQUAL to 
"RTN","IBCNEUT5",78,0)
 .  ;  the Ins Co Name parameter (trimmed)
"RTN","IBCNEUT5",79,0)
 .  I $$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U))'=INSNAME Q
"RTN","IBCNEUT5",80,0)
 .  ; Match found
"RTN","IBCNEUT5",81,0)
 .  S EXIST=1
"RTN","IBCNEUT5",82,0)
 .  Q
"RTN","IBCNEUT5",83,0)
BFEXIT ;
"RTN","IBCNEUT5",84,0)
 Q EXIST
"RTN","IBCNEUT5",85,0)
 ;
"RTN","IBCNEUT5",86,0)
 ;
"RTN","IBCNEUT5",87,0)
MGRP() ; Get the Mail Group for the IIV Interface - IB Site Parameters (51.04)
"RTN","IBCNEUT5",88,0)
 Q $$GET1^DIQ(350.9,"1,",51.04,"E")
"RTN","IBCNEUT5",89,0)
 ;
"RTN","IBCNEUT5",90,0)
 ;
"RTN","IBCNEUT5",91,0)
PYRAPP(APP,PAYERIEN) ; Get the Payer Application multiple IEN
"RTN","IBCNEUT5",92,0)
 ; based on the payer application name and payer ien.
"RTN","IBCNEUT5",93,0)
 ;
"RTN","IBCNEUT5",94,0)
 NEW MIEN,APPIEN,DISYS
"RTN","IBCNEUT5",95,0)
 S MIEN=""
"RTN","IBCNEUT5",96,0)
 S APPIEN=$$FIND1^DIC(365.13,,"X",APP,"B")
"RTN","IBCNEUT5",97,0)
 I 'APPIEN G PYRAPPX
"RTN","IBCNEUT5",98,0)
 I '$G(PAYERIEN) G PYRAPPX
"RTN","IBCNEUT5",99,0)
 S MIEN=$O(^IBE(365.12,PAYERIEN,1,"B",APPIEN,""))
"RTN","IBCNEUT5",100,0)
PYRAPPX ;
"RTN","IBCNEUT5",101,0)
 Q MIEN
"RTN","IBCNEUT5",102,0)
 ;
"RTN","IBCNEUT5",103,0)
 ;
"RTN","IBCNEUT5",104,0)
ACTAPP(IEN) ; Active payer applications
"RTN","IBCNEUT5",105,0)
 ; This function will return 1 if any of the payer applications for 
"RTN","IBCNEUT5",106,0)
 ; this payer (being passed in by the payer IEN) are NOT deactivated.
"RTN","IBCNEUT5",107,0)
 ; This should not be confused with the other payer application fields
"RTN","IBCNEUT5",108,0)
 ; such as national active or local active.  The deactivated field is
"RTN","IBCNEUT5",109,0)
 ; the .11 field in the payer application multiple.
"RTN","IBCNEUT5",110,0)
 ;
"RTN","IBCNEUT5",111,0)
 ; This function is invoked by the FileMan data dictionary as a screen
"RTN","IBCNEUT5",112,0)
 ; for the Payer field (#3.1) in the Insurance company file (#36).
"RTN","IBCNEUT5",113,0)
 ;
"RTN","IBCNEUT5",114,0)
 NEW APPIEN,ACTAPP,APPDATA
"RTN","IBCNEUT5",115,0)
 S APPIEN=0,ACTAPP="",IEN=+$G(IEN)
"RTN","IBCNEUT5",116,0)
 F  S APPIEN=$O(^IBE(365.12,IEN,1,APPIEN)) Q:'APPIEN  D  Q:ACTAPP
"RTN","IBCNEUT5",117,0)
 . S APPDATA=$G(^IBE(365.12,IEN,1,APPIEN,0))
"RTN","IBCNEUT5",118,0)
 . I $P(APPDATA,U,11) Q
"RTN","IBCNEUT5",119,0)
 . I $P(APPDATA,U,12) Q
"RTN","IBCNEUT5",120,0)
 . S ACTAPP=1
"RTN","IBCNEUT5",121,0)
 . Q
"RTN","IBCNEUT5",122,0)
 Q ACTAPP
"RTN","IBCNEUT5",123,0)
 ;
"RTN","IBCNEUT5",124,0)
ADDTQ(DFN,PAYER,SRVDT,FDAYS,ANYPAYER) ; Function  - Returns flag (0/1)
"RTN","IBCNEUT5",125,0)
 ; 1 - TQ File entry can be added as the service date for the patient 
"RTN","IBCNEUT5",126,0)
 ;     and payer >= MAX TQ service date + Freshness Days
"RTN","IBCNEUT5",127,0)
 ;     If ANYPAYER is set, check for recent entries for this patient and
"RTN","IBCNEUT5",128,0)
 ;     any payer
"RTN","IBCNEUT5",129,0)
 ; 0 - otherwise
"RTN","IBCNEUT5",130,0)
 ;
"RTN","IBCNEUT5",131,0)
 ; Input:
"RTN","IBCNEUT5",132,0)
 ;  DFN   - Patient DFN (File #2)
"RTN","IBCNEUT5",133,0)
 ;  PAYER - Payer IEN (File #365.12)
"RTN","IBCNEUT5",134,0)
 ;  SRVDT - Service dt for potential TQ entry
"RTN","IBCNEUT5",135,0)
 ;  FDAYS - Freshness Days param (by extract type)
"RTN","IBCNEUT5",136,0)
 ;  ANYPAYER - NUMERIC>0 if checking for any payer
"RTN","IBCNEUT5",137,0)
 ;
"RTN","IBCNEUT5",138,0)
 N ADDTQ,MAXDT
"RTN","IBCNEUT5",139,0)
 ; 
"RTN","IBCNEUT5",140,0)
 S ADDTQ=1
"RTN","IBCNEUT5",141,0)
 I ($G(DFN)="")!($G(SRVDT)="")!($G(FDAYS)="") S ADDTQ=0 G ADDTQX
"RTN","IBCNEUT5",142,0)
 I '$G(ANYPAYER),$G(PAYER)="" S ADDTQ=0 G ADDTQX
"RTN","IBCNEUT5",143,0)
 ; MAX TQ Service Date
"RTN","IBCNEUT5",144,0)
 S MAXDT=$$TQMAXSV(DFN,$G(PAYER),$G(ANYPAYER))
"RTN","IBCNEUT5",145,0)
 I MAXDT="" G ADDTQX
"RTN","IBCNEUT5",146,0)
 ; If Service Date < Max Service Date + Freshness Days, do not add
"RTN","IBCNEUT5",147,0)
 I SRVDT<$$FMADD^XLFDT(MAXDT,FDAYS) S ADDTQ=0
"RTN","IBCNEUT5",148,0)
 ;
"RTN","IBCNEUT5",149,0)
ADDTQX ; ADDTQ exit pt
"RTN","IBCNEUT5",150,0)
 Q ADDTQ
"RTN","IBCNEUT5",151,0)
 ;
"RTN","IBCNEUT5",152,0)
TQUPDSV(DFN,PAYER,SRVDT) ; Update service dates & freshness dates for TQ
"RTN","IBCNEUT5",153,0)
 ; entries awaiting transmission
"RTN","IBCNEUT5",154,0)
 ;
"RTN","IBCNEUT5",155,0)
 N SVDT,STS,ERACT,CSRVDT,CSPAN,SPAN,DA,HL7IEN,RIEN
"RTN","IBCNEUT5",156,0)
 ;
"RTN","IBCNEUT5",157,0)
 I ($G(DFN)="")!($G(PAYER)="")!($G(SRVDT)="") G TQUPDSVX
"RTN","IBCNEUT5",158,0)
 ;
"RTN","IBCNEUT5",159,0)
 ; Loop thru all inquiries to be transmitted to update the service date
"RTN","IBCNEUT5",160,0)
 ; Statuses:  Ready to Transmit(1), Hold(4) and Retry(6)
"RTN","IBCNEUT5",161,0)
 S SVDT=""
"RTN","IBCNEUT5",162,0)
 F  S SVDT=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT)) Q:'SVDT  D
"RTN","IBCNEUT5",163,0)
 . S DA=0
"RTN","IBCNEUT5",164,0)
 . F  S DA=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT,DA)) Q:'DA  D
"RTN","IBCNEUT5",165,0)
 .. ; TQ Status
"RTN","IBCNEUT5",166,0)
 .. S STS=$P($G(^IBCN(365.1,DA,0)),U,4)
"RTN","IBCNEUT5",167,0)
 .. ; Check to see if record is still scheduled to be transmitted.
"RTN","IBCNEUT5",168,0)
 .. ; If so, update the service date if the new service date and current
"RTN","IBCNEUT5",169,0)
 .. ; service date are both in the past or future and the new service
"RTN","IBCNEUT5",170,0)
 .. ; date is closer to Today.  Also, if the current service date is in
"RTN","IBCNEUT5",171,0)
 .. ; the future and the new service date is in the past, update with the
"RTN","IBCNEUT5",172,0)
 .. ; new service date.
"RTN","IBCNEUT5",173,0)
 .. ; If not Ready to Transmit(1), Hold(4) and Retry(6), quit
"RTN","IBCNEUT5",174,0)
 .. I STS'=1,STS'=4,STS'=6 Q
"RTN","IBCNEUT5",175,0)
 .. ; If Hold and last Response returned Error Action - Please resubmit
"RTN","IBCNEUT5",176,0)
 .. ; Original Transaction (P) - do not update
"RTN","IBCNEUT5",177,0)
 .. I STS=4 S ERACT="" D  I ERACT="P" Q
"RTN","IBCNEUT5",178,0)
 .. . ; Last msg sent
"RTN","IBCNEUT5",179,0)
 .. . S HL7IEN=$O(^IBCN(365.1,DA,2," "),-1) Q:'HL7IEN
"RTN","IBCNEUT5",180,0)
 .. . ; Assoc IIV Response IEN
"RTN","IBCNEUT5",181,0)
 .. . S RIEN=$P($G(^IBCN(365.1,DA,2,HL7IEN,0)),U,3) Q:'RIEN
"RTN","IBCNEUT5",182,0)
 .. . ; Error Action IEN (365.018)
"RTN","IBCNEUT5",183,0)
 .. . S ERACT=$P($G(^IBCN(365,RIEN,1)),U,15) Q:'ERACT
"RTN","IBCNEUT5",184,0)
 .. . S ERACT=$P($G(^IBE(365.018,ERACT,0)),U,1)
"RTN","IBCNEUT5",185,0)
 .. ;
"RTN","IBCNEUT5",186,0)
 .. ; Current service date for TQ entry
"RTN","IBCNEUT5",187,0)
 .. S CSRVDT=$P($G(^IBCN(365.1,DA,0)),U,12)
"RTN","IBCNEUT5",188,0)
 .. ; If current service date is today (DT), do not update
"RTN","IBCNEUT5",189,0)
 .. I CSRVDT=DT Q
"RTN","IBCNEUT5",190,0)
 .. ; If new service date is in the future and current service date is in
"RTN","IBCNEUT5",191,0)
 .. ; the past, do not update
"RTN","IBCNEUT5",192,0)
 .. I SRVDT>DT,CSRVDT<DT Q
"RTN","IBCNEUT5",193,0)
 .. ; If new service date is today, update
"RTN","IBCNEUT5",194,0)
 .. I SRVDT=DT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",195,0)
 .. ; If both current and new service dates are in the past or future,
"RTN","IBCNEUT5",196,0)
 .. ; only update, when new service date is closer to today (DT).
"RTN","IBCNEUT5",197,0)
 .. I ((CSRVDT<DT)&(SRVDT<DT))!((CSRVDT>DT)&(SRVDT>DT)) D  Q
"RTN","IBCNEUT5",198,0)
 .. . S CSPAN=$$FMDIFF^XLFDT(CSRVDT,DT,1),SPAN=$$FMDIFF^XLFDT(SRVDT,DT,1)
"RTN","IBCNEUT5",199,0)
 .. . I CSPAN<0 S CSPAN=-CSPAN
"RTN","IBCNEUT5",200,0)
 .. . I SPAN<0 S SPAN=-SPAN
"RTN","IBCNEUT5",201,0)
 .. . I SPAN<CSPAN D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1))
"RTN","IBCNEUT5",202,0)
 .. ; If new service date is in the past and current service date is in
"RTN","IBCNEUT5",203,0)
 .. ; the future, update
"RTN","IBCNEUT5",204,0)
 .. I SRVDT<CSRVDT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",205,0)
 .. Q
"RTN","IBCNEUT5",206,0)
TQUPDSVX ; TQUPDSV exit pt
"RTN","IBCNEUT5",207,0)
 Q
"RTN","IBCNEUT5",208,0)
 ;
"RTN","IBCNEUT5",209,0)
TQMAXSV(DFN,PAYER,ANYPAYER) ; Returns MAX(TQ Service Date) for Patient & Payer
"RTN","IBCNEUT5",210,0)
 ; Input: 
"RTN","IBCNEUT5",211,0)
 ;  DFN     - Patient DFN (2)
"RTN","IBCNEUT5",212,0)
 ;  PAYER   - Payer IEN (365.12) (If no PAYER passed in, check them all)
"RTN","IBCNEUT5",213,0)
 ;  ANYPAYER - NUMERIC>0 if checking for any payer
"RTN","IBCNEUT5",214,0)
 ; Output:
"RTN","IBCNEUT5",215,0)
 ;  TQMAXSV - MAX (most recent) service date from TQ entry for Patient &
"RTN","IBCNEUT5",216,0)
 ;            Payer
"RTN","IBCNEUT5",217,0)
 ;
"RTN","IBCNEUT5",218,0)
 N TQMAXSV
"RTN","IBCNEUT5",219,0)
 S TQMAXSV=""
"RTN","IBCNEUT5",220,0)
 I $G(DFN)="" G TQMAXSVX
"RTN","IBCNEUT5",221,0)
 I '$G(ANYPAYER) S TQMAXSV=$O(^IBCN(365.1,"AD",DFN,PAYER,""),-1) G TQMAXSVX
"RTN","IBCNEUT5",222,0)
 ;
"RTN","IBCNEUT5",223,0)
 N PIEN,LASTBYP
"RTN","IBCNEUT5",224,0)
 S PIEN="" F  S PIEN=$O(^IBCN(365.1,"AD",DFN,PIEN)) Q:PIEN=""  D
"RTN","IBCNEUT5",225,0)
 .S LASTBYP=$O(^IBCN(365.1,"AD",DFN,PIEN,""),-1)
"RTN","IBCNEUT5",226,0)
 .Q:'LASTBYP   ; Just in case
"RTN","IBCNEUT5",227,0)
 .I LASTBYP>TQMAXSV S TQMAXSV=LASTBYP
"RTN","IBCNEUT5",228,0)
 ;
"RTN","IBCNEUT5",229,0)
TQMAXSVX ; TQMAXSV exit pt
"RTN","IBCNEUT5",230,0)
 Q TQMAXSV
"RTN","IBCNEUT5",231,0)
 ;
"RTN","IBCNEUT5",232,0)
 ;
"RTN","IBCNEUT5",233,0)
SNDSSN(PIEN,APP) ; Determine Transmit SSN flag based on Payer and Payer 
"RTN","IBCNEUT5",234,0)
 ; Application values
"RTN","IBCNEUT5",235,0)
 ; Input:
"RTN","IBCNEUT5",236,0)
 ;  PIEN - Payer IEN (365.12)
"RTN","IBCNEUT5",237,0)
 ;  APP  - Payer application description (like "IIV")
"RTN","IBCNEUT5",238,0)
 N IBFLG
"RTN","IBCNEUT5",239,0)
 ;
"RTN","IBCNEUT5",240,0)
 S IBFLG=0
"RTN","IBCNEUT5",241,0)
 ;
"RTN","IBCNEUT5",242,0)
 I $G(PIEN)=""!($G(APP)="") G SNDSSNX
"RTN","IBCNEUT5",243,0)
 S IBFLG=+$P($G(^IBE(365.12,PIEN,1,+$$PYRAPP(APP,PIEN),0)),U,10)
"RTN","IBCNEUT5",244,0)
 ;
"RTN","IBCNEUT5",245,0)
SNDSSNX Q IBFLG
"RTN","IBCNEUT5",246,0)
 ;
"RTN","IBCNEUT5",247,0)
SAVFRSH(TQIEN,DTDIFF) ; Update TQ freshness date based on service date diff
"RTN","IBCNEUT5",248,0)
 ;
"RTN","IBCNEUT5",249,0)
 N DIE,DA,FDT,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT5",250,0)
 I $G(TQIEN)="" Q
"RTN","IBCNEUT5",251,0)
 S FDT=$P($G(^IBCN(365.1,TQIEN,0)),U,17)
"RTN","IBCNEUT5",252,0)
 ; Note - will only update if FDT > 0.
"RTN","IBCNEUT5",253,0)
 S FDT=$$FMADD^XLFDT(FDT,+DTDIFF)
"RTN","IBCNEUT5",254,0)
 S DIE="^IBCN(365.1,",DA=TQIEN,DR=".17////"_FDT
"RTN","IBCNEUT5",255,0)
 D ^DIE
"RTN","IBCNEUT5",256,0)
 Q
"RTN","IBCNEUT5",257,0)
 ;
"RTN","IBCNEUT6")
0^13^B28657707
"RTN","IBCNEUT6",1,0)
IBCNEUT6 ;DAOU/ESG - IIV MISC. UTILITIES ;14-AUG-2002
"RTN","IBCNEUT6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271**;21-MAR-94
"RTN","IBCNEUT6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT6",4,0)
 ;
"RTN","IBCNEUT6",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT6",6,0)
 Q
"RTN","IBCNEUT6",7,0)
 ;
"RTN","IBCNEUT6",8,0)
AMCHECK ; This procedure will examine the insurance company names in the 
"RTN","IBCNEUT6",9,0)
 ; Auto Match file (#365.11) to make sure there is still at least
"RTN","IBCNEUT6",10,0)
 ; one active insurance company with that name.  If there isn't,
"RTN","IBCNEUT6",11,0)
 ; then the Auto Match entries for that insurance company name
"RTN","IBCNEUT6",12,0)
 ; will be deleted.
"RTN","IBCNEUT6",13,0)
 ;
"RTN","IBCNEUT6",14,0)
 NEW NAME,INSIEN,FOUNDACT,DA,DIK,DIC,X,Y,%
"RTN","IBCNEUT6",15,0)
 S NAME=""
"RTN","IBCNEUT6",16,0)
 F  S NAME=$O(^IBCN(365.11,"C",NAME)) Q:NAME=""  D
"RTN","IBCNEUT6",17,0)
 . ;
"RTN","IBCNEUT6",18,0)
 . ; For this Auto Match ins co name, see if there is an active ins co
"RTN","IBCNEUT6",19,0)
 . S INSIEN=0,FOUNDACT=0
"RTN","IBCNEUT6",20,0)
 . F  S INSIEN=$O(^DIC(36,"B",NAME,INSIEN)) Q:'INSIEN  I $$ACTIVE^IBCNEUT4(INSIEN) S FOUNDACT=1 Q
"RTN","IBCNEUT6",21,0)
 . ;
"RTN","IBCNEUT6",22,0)
 . ; If an active ins co was found, then we're OK so quit
"RTN","IBCNEUT6",23,0)
 . I FOUNDACT Q
"RTN","IBCNEUT6",24,0)
 . ;
"RTN","IBCNEUT6",25,0)
 . ; Otherwise, we need to delete all Auto Match entries for this name
"RTN","IBCNEUT6",26,0)
 . S DA=0,DIK="^IBCN(365.11,"
"RTN","IBCNEUT6",27,0)
 . F  S DA=$O(^IBCN(365.11,"C",NAME,DA)) Q:'DA  D ^DIK
"RTN","IBCNEUT6",28,0)
 . Q
"RTN","IBCNEUT6",29,0)
AMCHKX ;
"RTN","IBCNEUT6",30,0)
 Q
"RTN","IBCNEUT6",31,0)
 ;
"RTN","IBCNEUT6",32,0)
 ;
"RTN","IBCNEUT6",33,0)
AMADD(INSNAME,IBCNEXT1) ; Conditionally add an Auto Match entry based on user input
"RTN","IBCNEUT6",34,0)
 ; Input Parameters:
"RTN","IBCNEUT6",35,0)
 ;    INSNAME is a valid, active insurance company name
"RTN","IBCNEUT6",36,0)
 ;   IBCNEXT1 is the existing entry in the ins co name field in the
"RTN","IBCNEUT6",37,0)
 ;            buffer.  This may be used as the Auto Match value for
"RTN","IBCNEUT6",38,0)
 ;            a new auto match entry.
"RTN","IBCNEUT6",39,0)
 ;
"RTN","IBCNEUT6",40,0)
 NEW AMDATA,AMIEN,AMERROR
"RTN","IBCNEUT6",41,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEUT6",42,0)
 NEW D,D0,D1,DA,DB,DC,DDH,DE,DG,DH,DI,DIC,DIE,DIEL,DIFLD,DIG,DIH
"RTN","IBCNEUT6",43,0)
 NEW DIK,DILN,DIPA,DISYS,DIV,DK,DL,DM,DN,DOV,DP,DQ,DR,DU,DV,DZ
"RTN","IBCNEUT6",44,0)
 ;
"RTN","IBCNEUT6",45,0)
 ; First, check security key to see if user is allowed to do this
"RTN","IBCNEUT6",46,0)
 I '$$KCHK^XUSRB("IBCNE IIV AUTO MATCH") G AMADDX
"RTN","IBCNEUT6",47,0)
 ;
"RTN","IBCNEUT6",48,0)
 S IBCNEXT1=$$UP^XLFSTR(IBCNEXT1)               ; all uppercase
"RTN","IBCNEUT6",49,0)
 S IBCNEXT1=$$TRIM^XLFSTR(IBCNEXT1)             ; lead/trail spaces
"RTN","IBCNEUT6",50,0)
 I IBCNEXT1="" G AMADDX                         ; must exist
"RTN","IBCNEUT6",51,0)
 I $L(IBCNEXT1)>30!($L(IBCNEXT1)<3) G AMADDX    ; too long or too short
"RTN","IBCNEUT6",52,0)
 I IBCNEXT1=INSNAME G AMADDX                    ; cannot equal the name
"RTN","IBCNEUT6",53,0)
 I $D(^IBCN(365.11,"B",IBCNEXT1)) G AMADDX      ; already in Auto Match
"RTN","IBCNEUT6",54,0)
 I $D(^DIC(36,"B",IBCNEXT1)) G AMADDX           ; already an ins co name
"RTN","IBCNEUT6",55,0)
 I $D(^DIC(36,"C",IBCNEXT1)) G AMADDX           ; already a synonym
"RTN","IBCNEUT6",56,0)
 I IBCNEXT1["*" G AMADDX                        ; no wildcards allowed
"RTN","IBCNEUT6",57,0)
 ;
"RTN","IBCNEUT6",58,0)
 S DIR(0)="YO"
"RTN","IBCNEUT6",59,0)
 S DIR("A",1)=" "
"RTN","IBCNEUT6",60,0)
 S DIR("A",2)="Do you want to add an Auto Match entry that associates"
"RTN","IBCNEUT6",61,0)
 S DIR("A")=IBCNEXT1_" with "_INSNAME
"RTN","IBCNEUT6",62,0)
 S DIR("B")="No"
"RTN","IBCNEUT6",63,0)
 S DIR("?",1)="      The Auto Match Value is "_IBCNEXT1_"."
"RTN","IBCNEUT6",64,0)
 S DIR("?",2)="The Insurance Company Name is "_INSNAME_"."
"RTN","IBCNEUT6",65,0)
 S DIR("?",3)=" "
"RTN","IBCNEUT6",66,0)
 S DIR("?",4)="Please enter NO if you do not want to associate these two values together"
"RTN","IBCNEUT6",67,0)
 S DIR("?",5)="in the Auto Match file."
"RTN","IBCNEUT6",68,0)
 S DIR("?",6)=" "
"RTN","IBCNEUT6",69,0)
 S DIR("?",7)="Please enter YES if you do want to create an Auto Match entry for these"
"RTN","IBCNEUT6",70,0)
 S DIR("?",8)="two values.  If you enter YES, then you will have the chance to modify"
"RTN","IBCNEUT6",71,0)
 S DIR("?")="the Auto Match Value."
"RTN","IBCNEUT6",72,0)
 D ^DIR K DIR
"RTN","IBCNEUT6",73,0)
 D EN^DDIOL(,,"!!")
"RTN","IBCNEUT6",74,0)
 ;
"RTN","IBCNEUT6",75,0)
 ; If user didn't say Yes, then we exit
"RTN","IBCNEUT6",76,0)
 I 'Y G AMADDX
"RTN","IBCNEUT6",77,0)
 ; To allow for edits to the .01 field and not the .02 field,
"RTN","IBCNEUT6",78,0)
 ; Add this new entry first and then edit only the .01 field.
"RTN","IBCNEUT6",79,0)
 S AMDATA(365.11,"+1,",.01)=IBCNEXT1
"RTN","IBCNEUT6",80,0)
 S AMDATA(365.11,"+1,",.02)=INSNAME
"RTN","IBCNEUT6",81,0)
 S AMDATA(365.11,"+1,",.03)=$$NOW^XLFDT
"RTN","IBCNEUT6",82,0)
 S AMDATA(365.11,"+1,",.04)=DUZ
"RTN","IBCNEUT6",83,0)
 S AMDATA(365.11,"+1,",.05)=$$NOW^XLFDT
"RTN","IBCNEUT6",84,0)
 S AMDATA(365.11,"+1,",.06)=DUZ
"RTN","IBCNEUT6",85,0)
 S AMDATA(365.11,"+1,",.07)=IBCNEXT1
"RTN","IBCNEUT6",86,0)
 S AMDATA(365.11,"+1,",.08)=INSNAME
"RTN","IBCNEUT6",87,0)
 D UPDATE^DIE("","AMDATA","AMIEN","AMERROR")
"RTN","IBCNEUT6",88,0)
 ;
"RTN","IBCNEUT6",89,0)
 I $D(AMERROR) G AMADDX       ; FileMan error so get out
"RTN","IBCNEUT6",90,0)
 S AMIEN=+$G(AMIEN(1))        ; internal entry number created
"RTN","IBCNEUT6",91,0)
 I 'AMIEN G AMADDX            ; if IEN not there get out
"RTN","IBCNEUT6",92,0)
 ;
"RTN","IBCNEUT6",93,0)
 ; Here we have to edit the entry to allow for the opportunity to 
"RTN","IBCNEUT6",94,0)
 ; change something
"RTN","IBCNEUT6",95,0)
 S DIE=365.11,DA=AMIEN,DR=".01;.05////"_$$NOW^XLFDT_";.06////"_DUZ
"RTN","IBCNEUT6",96,0)
 D ^DIE
"RTN","IBCNEUT6",97,0)
 ;
"RTN","IBCNEUT6",98,0)
 ; Display the confirmation message to the user
"RTN","IBCNEUT6",99,0)
 S AMDATA=$G(^IBCN(365.11,AMIEN,0))
"RTN","IBCNEUT6",100,0)
 I AMDATA'="" D EN^DDIOL($P(AMDATA,U,1)_" is now associated with "_$P(AMDATA,U,2)_".",,"!!?3")
"RTN","IBCNEUT6",101,0)
 D EN^DDIOL(,,"!!")
"RTN","IBCNEUT6",102,0)
AMADDX ;
"RTN","IBCNEUT6",103,0)
 Q
"RTN","IBCNEUT6",104,0)
 ;
"RTN","IBCNEUT6",105,0)
PYRFLTR() ;
"RTN","IBCNEUT6",106,0)
 ; Function to assist with filtering items in custom payer
"RTN","IBCNEUT6",107,0)
 ; lookups for most popular list.  This logic is used in the
"RTN","IBCNEUT6",108,0)
 ; DIC("S") definition for the lookup
"RTN","IBCNEUT6",109,0)
 ;
"RTN","IBCNEUT6",110,0)
 NEW IBDATA,IBPIEN,IBPNM,IBAIEN,IBADATA,OK
"RTN","IBCNEUT6",111,0)
 ;
"RTN","IBCNEUT6",112,0)
 S OK=1
"RTN","IBCNEUT6",113,0)
 ;
"RTN","IBCNEUT6",114,0)
 S IBDATA=^(0)   ; Naked reference from DIC call
"RTN","IBCNEUT6",115,0)
 S IBPIEN=$G(Y) I IBPIEN="" S OK=0 G XPFLTR
"RTN","IBCNEUT6",116,0)
 ;
"RTN","IBCNEUT6",117,0)
 ; Set Payer Name and IEN
"RTN","IBCNEUT6",118,0)
 S IBPNM=$P(IBDATA,U,1) I IBPNM="" S OK=0 G XPFLTR
"RTN","IBCNEUT6",119,0)
 ;
"RTN","IBCNEUT6",120,0)
 ; Set Payer Application IEN (365.13)
"RTN","IBCNEUT6",121,0)
 ;  Quit if IIV not defined for payer
"RTN","IBCNEUT6",122,0)
 S IBAIEN=$$PYRAPP^IBCNEUT5("IIV",IBPIEN) I IBAIEN="" S OK=0 G XPFLTR
"RTN","IBCNEUT6",123,0)
 ;
"RTN","IBCNEUT6",124,0)
 ; Get IIV application specific data
"RTN","IBCNEUT6",125,0)
 S IBADATA=$G(^IBE(365.12,IBPIEN,1,IBAIEN,0)) I IBADATA="" S OK=0 G XPFLTR
"RTN","IBCNEUT6",126,0)
 ;
"RTN","IBCNEUT6",127,0)
 ; Filter if Deactivated
"RTN","IBCNEUT6",128,0)
 I +$P(IBADATA,U,11) S OK=0 G XPFLTR
"RTN","IBCNEUT6",129,0)
 ;
"RTN","IBCNEUT6",130,0)
 ; Filter if ID Inq Req ID and SSN is not ID
"RTN","IBCNEUT6",131,0)
 I +$P(IBADATA,U,8),'$P(IBADATA,U,9) S OK=0 G XPFLTR
"RTN","IBCNEUT6",132,0)
 ;
"RTN","IBCNEUT6",133,0)
 ; Filter if already in the list
"RTN","IBCNEUT6",134,0)
 I $D(^TMP($J,"IBJPI3-IENS",IBPIEN)) S OK=0 G XPFLTR
"RTN","IBCNEUT6",135,0)
 ;
"RTN","IBCNEUT6",136,0)
XPFLTR Q OK
"RTN","IBCNEUT6",137,0)
 ;
"RTN","IBCNEUT6",138,0)
DSPLINE() ;
"RTN","IBCNEUT6",139,0)
 ; Format display text for custom Most Pop. payer lookup
"RTN","IBCNEUT6",140,0)
 ;
"RTN","IBCNEUT6",141,0)
 N ITEMDATA,DISPSTR,IBAIEN,IBADATA,PYRIEN,PADLEN
"RTN","IBCNEUT6",142,0)
 ;
"RTN","IBCNEUT6",143,0)
 ; Initialize the data for the item to be displayed
"RTN","IBCNEUT6",144,0)
 ; Naked reference is referencing the DIC data
"RTN","IBCNEUT6",145,0)
 S ITEMDATA=^(0)
"RTN","IBCNEUT6",146,0)
 ;
"RTN","IBCNEUT6",147,0)
 ; Initialize Display string
"RTN","IBCNEUT6",148,0)
 S DISPSTR=""
"RTN","IBCNEUT6",149,0)
 ;
"RTN","IBCNEUT6",150,0)
 ; Payer IEN is passed from DIC as Y
"RTN","IBCNEUT6",151,0)
 S PYRIEN=+$G(Y) I 'PYRIEN G EXDSP
"RTN","IBCNEUT6",152,0)
 ;
"RTN","IBCNEUT6",153,0)
 ; Set Payer Application IEN (365.13)
"RTN","IBCNEUT6",154,0)
 S IBAIEN=$$PYRAPP^IBCNEUT5("IIV",PYRIEN) I IBAIEN="" G EXDSP
"RTN","IBCNEUT6",155,0)
 ;
"RTN","IBCNEUT6",156,0)
 ; Get IIV Application specific data
"RTN","IBCNEUT6",157,0)
 S IBADATA=$G(^IBE(365.12,PYRIEN,1,IBAIEN,0)) I IBADATA="" G EXDSP
"RTN","IBCNEUT6",158,0)
 ;
"RTN","IBCNEUT6",159,0)
 ; Pad start of display data, adjusting for payer name length
"RTN","IBCNEUT6",160,0)
 S PADLEN=$L($E($P($G(ITEMDATA),U),1,30))
"RTN","IBCNEUT6",161,0)
 S DISPSTR=DISPSTR_$$FO^IBCNEUT1("",31-PADLEN,"L")
"RTN","IBCNEUT6",162,0)
 ;
"RTN","IBCNEUT6",163,0)
 ; Add National and Local active flags
"RTN","IBCNEUT6",164,0)
 S DISPSTR=DISPSTR_"  National: "_$$FO^IBCNEUT1($S('$P(IBADATA,U,2):"Inactive",1:"Active"),8)
"RTN","IBCNEUT6",165,0)
 S DISPSTR=DISPSTR_"  Local: "_$$FO^IBCNEUT1($S('$P(IBADATA,U,3):"Inactive",1:"Active"),8)
"RTN","IBCNEUT6",166,0)
EXDSP ;
"RTN","IBCNEUT6",167,0)
 Q DISPSTR
"RTN","IBCNEUT6",168,0)
 ;
"RTN","IBJPI")
0^11^B66054979
"RTN","IBJPI",1,0)
IBJPI ;DAOU/BHS - IBJP IIV SITE PARAMETERS SCREEN ;14-JUN-2002
"RTN","IBJPI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBJPI",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPI",4,0)
 ;
"RTN","IBJPI",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBJPI",6,0)
 ;
"RTN","IBJPI",7,0)
EN ; main entry pt for IBJP IIV SITE PARAMS
"RTN","IBJPI",8,0)
 N POP,X,CTRLCOL,VALMHDR,VALMCNT,%DT
"RTN","IBJPI",9,0)
 D EN^VALM("IBJP IIV SITE PARAMETERS")
"RTN","IBJPI",10,0)
 Q
"RTN","IBJPI",11,0)
 ;
"RTN","IBJPI",12,0)
HDR ; header 
"RTN","IBJPI",13,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPI",14,0)
 Q
"RTN","IBJPI",15,0)
 ;
"RTN","IBJPI",16,0)
INIT ; init vars & list array
"RTN","IBJPI",17,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",18,0)
 ; Kills data and video control arrays with active list
"RTN","IBJPI",19,0)
 D CLEAN^VALM10
"RTN","IBJPI",20,0)
 D BLD
"RTN","IBJPI",21,0)
 Q
"RTN","IBJPI",22,0)
 ;
"RTN","IBJPI",23,0)
HELP ; help
"RTN","IBJPI",24,0)
 D FULL^VALM1
"RTN","IBJPI",25,0)
 W @IOF
"RTN","IBJPI",26,0)
 W !,"This screen displays all of the eIIV Site Parameters used to manage the"
"RTN","IBJPI",27,0)
 W !,"eIIV application used for Insurance Identification and Verification."
"RTN","IBJPI",28,0)
 W !!,"The first section, General Parameters, concerns overall parameters"
"RTN","IBJPI",29,0)
 W !,"for monitoring the interface and controlling IIV communication"
"RTN","IBJPI",30,0)
 W !,"between VistA and the EC located in Austin."
"RTN","IBJPI",31,0)
 W !!,"The second section, Batch Extracts, concerns extract specific parameters"
"RTN","IBJPI",32,0)
 W !,"including active status, selection criteria and maximum records extracted"
"RTN","IBJPI",33,0)
 W !,"per day."
"RTN","IBJPI",34,0)
 W !!,"The third section, Patients without Insurance, concerns whether or not"
"RTN","IBJPI",35,0)
 W !,"identification inquiries should be made for patients without insurance on"
"RTN","IBJPI",36,0)
 W !,"inactive policies or the Most Popular Payers list below to see if the"
"RTN","IBJPI",37,0)
 W !,"patient is covered by one of those companies or payers."
"RTN","IBJPI",38,0)
 D PAUSE^VALM1
"RTN","IBJPI",39,0)
 W !!,"The final section, Most Popular Payers, is a list maintained by users"
"RTN","IBJPI",40,0)
 W !,"of the most popular payers for that site.  This list is site-specific and"
"RTN","IBJPI",41,0)
 W !,"is based on the payers selected by the user as those most likely to have"
"RTN","IBJPI",42,0)
 W !,"coverage for a patient at the site.  The columns display whether or not the"
"RTN","IBJPI",43,0)
 W !,"payer is locally active or nationally active and the national payer id."
"RTN","IBJPI",44,0)
 W !,"The locally active flag can be updated by the site as long as the eIIV"
"RTN","IBJPI",45,0)
 W !,"application has not been deactivated.  The nationally active flag"
"RTN","IBJPI",46,0)
 W !,"is only updated by the Eligibility Communicator.  Both flags must be set"
"RTN","IBJPI",47,0)
 W !,"to YES for an insurance inquiry to be transmitted to the Eligibility"
"RTN","IBJPI",48,0)
 W !,"Communicator."
"RTN","IBJPI",49,0)
 D PAUSE^VALM1
"RTN","IBJPI",50,0)
 W @IOF
"RTN","IBJPI",51,0)
 S VALMBCK="R"
"RTN","IBJPI",52,0)
 Q
"RTN","IBJPI",53,0)
 ;
"RTN","IBJPI",54,0)
EXIT ; exit
"RTN","IBJPI",55,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",56,0)
 D CLEAN^VALM10
"RTN","IBJPI",57,0)
 Q
"RTN","IBJPI",58,0)
 ;
"RTN","IBJPI",59,0)
BLD ; build screen array
"RTN","IBJPI",60,0)
 N IBLN,IBCOL,IBWID,IBIIV,IBIIVB,IBIEN,CT,IBEX1,IBEX2,IBEX,IEN
"RTN","IBJPI",61,0)
 N IBST,IBDATA,DISYS,X,STATUS,AIEN,ADATA
"RTN","IBJPI",62,0)
 ;
"RTN","IBJPI",63,0)
 S (IBLN,VALMCNT)=0,IBCOL=3,IBIIV=$G(^IBE(350.9,1,51))
"RTN","IBJPI",64,0)
 ; -- Gen Params
"RTN","IBJPI",65,0)
 ; Skip line
"RTN","IBJPI",66,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=48
"RTN","IBJPI",67,0)
 S IBLN=$$SETN("General Parameters",IBLN,IBCOL,1,)
"RTN","IBJPI",68,0)
 S IBLN=$$SET("Days between electronic reverification checks:  ",$P(IBIIV,U),IBLN,IBWID)
"RTN","IBJPI",69,0)
 S IBLN=$$SET("Send daily statistical report via MailMan:  ",$S($P(IBIIV,U,2):"YES",$P(IBIIV,U,2)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",70,0)
 I $P(IBIIV,U,2) S IBLN=$$SET("Time of day for daily statistical report:  ",$P(IBIIV,U,3),IBLN,IBWID)
"RTN","IBJPI",71,0)
 S IBLN=$$SET("Mail Group for eIIV messages:  ",$$MGRP^IBCNEUT5,IBLN,IBWID)
"RTN","IBJPI",72,0)
 S IBLN=$$SET("HL7 Response Processing Method:  ",$S($P(IBIIV,U,13)="B":"BATCH",$P(IBIIV,U,13)="I":"IMMEDIATE",1:""),IBLN,IBWID)
"RTN","IBJPI",73,0)
 I $P(IBIIV,U,13)="B" D
"RTN","IBJPI",74,0)
 . S IBLN=$$SET("HL7 Batch Start Time:  ",$P(IBIIV,U,14),IBLN,IBWID)
"RTN","IBJPI",75,0)
 . S IBLN=$$SET("HL7 Batch Stop Time:  ",$P(IBIIV,U,19),IBLN,IBWID)
"RTN","IBJPI",76,0)
 S IBLN=$$SET("Daily Maximum HL7 Messages:  ",$P(IBIIV,U,15),IBLN,IBWID)
"RTN","IBJPI",77,0)
 S IBLN=$$SET("Contact Person:  ",$S($P(IBIIV,U,16)'="":$$GET1^DIQ(200,$P(IBIIV,U,16)_",",.01,"E"),1:""),IBLN,IBWID)
"RTN","IBJPI",78,0)
 S IBWID=62
"RTN","IBJPI",79,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",80,0)
 S IBLN=$$SET("Receive MailMan message when unable to electronically","",IBLN,IBWID-12)
"RTN","IBJPI",81,0)
 S IBLN=$$SET("confirm insurance due to communication problem:  ",$S($P(IBIIV,U,20):"YES",$P(IBIIV,U,20)=0:"NO",1:""),IBLN,IBWID-6)
"RTN","IBJPI",82,0)
 ; Skip lines to force Batch Extracts to next page
"RTN","IBJPI",83,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",84,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",85,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",86,0)
 ; Skip lines for Immediate
"RTN","IBJPI",87,0)
 I $P(IBIIV,U,13)'="B" D
"RTN","IBJPI",88,0)
 . S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",89,0)
 . S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",90,0)
 ;
"RTN","IBJPI",91,0)
 ; -- Batch Extracts
"RTN","IBJPI",92,0)
 S IBWID=43
"RTN","IBJPI",93,0)
 S IBLN=$$SETN("Batch Extracts",IBLN,IBCOL,1,)
"RTN","IBJPI",94,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",95,0)
 S IBLN=$$SET("Extract               Selection  Maximum # to","",IBLN,IBWID)
"RTN","IBJPI",96,0)
 S IBLN=$$SETN(" Name          On/Off  Criteria   Extract/Day",IBLN,IBCOL+1,,1)
"RTN","IBJPI",97,0)
 ; Loop thru extracts
"RTN","IBJPI",98,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  D
"RTN","IBJPI",99,0)
 . S IBIIVB=$G(^IBE(350.9,1,51.17,IEN,0))
"RTN","IBJPI",100,0)
 . S IBEX=+$P(IBIIVB,U)  ; Type
"RTN","IBJPI",101,0)
 . S IBST=$$FO^IBCNEUT1($S($P(IBIIVB,U)'="":$$GET1^DIQ(350.9002,$P(IBIIVB,U)_",1,",.01,"E"),1:""),14)
"RTN","IBJPI",102,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,2):"ON",1:"OFF"),8)
"RTN","IBJPI",103,0)
 . S IBEX1=$S(+$P(IBIIVB,U,3)'=0:+$P(IBIIVB,U,3),1:$P(IBIIVB,U,3))
"RTN","IBJPI",104,0)
 . S IBEX2=$S(+$P(IBIIVB,U,4)'=0:+$P(IBIIVB,U,4),1:$P(IBIIVB,U,4))
"RTN","IBJPI",105,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1:"N/A",IBEX=2:IBEX1,IBEX=3!(IBEX=4):IBEX1_"/"_IBEX2,1:"ERROR"),11)
"RTN","IBJPI",106,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,5):+$P(IBIIVB,U,5),1:$P(IBIIVB,U,5)),14)
"RTN","IBJPI",107,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",108,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",109,0)
 ;
"RTN","IBJPI",110,0)
 ; -- Pts w/o Ins
"RTN","IBJPI",111,0)
 ; Skip line
"RTN","IBJPI",112,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=41
"RTN","IBJPI",113,0)
 S IBLN=$$SETN("Patients Without Insurance",IBLN,IBCOL,1,)
"RTN","IBJPI",114,0)
 S IBLN=$$SET("Look at a patient's inactive insurance?  ",$S($P(IBIIV,U,8):"YES",$P(IBIIV,U,8)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",115,0)
 S IBLN=$$SET("Attempt inquiry by most popular payers?  ",$S($P(IBIIV,U,9):"YES",$P(IBIIV,U,9)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",116,0)
 S IBLN=$$SET("How many payers to try?  ",$P(IBIIV,U,10),IBLN,IBWID)
"RTN","IBJPI",117,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",118,0)
 ;
"RTN","IBJPI",119,0)
 ; -- Most Popular Payers
"RTN","IBJPI",120,0)
 ; Skip line
"RTN","IBJPI",121,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=12
"RTN","IBJPI",122,0)
 S IBLN=$$SETN("Most Popular Payers",IBLN,IBCOL,1,)
"RTN","IBJPI",123,0)
 ;
"RTN","IBJPI",124,0)
 S IBLN=$$SET("  Saved By:  ",$$GET1^DIQ(350.9,1,51.24),IBLN,IBWID)
"RTN","IBJPI",125,0)
 ;S IBLN=$$SET("  Saved By:  ",$P(^VA(200,$P(IBIIV,U,24),0),U,1),IBLN,IBWID)
"RTN","IBJPI",126,0)
 S IBLN=$$SET("Last Saved:  ",$$FMTE^XLFDT($P(IBIIV,U,21),"5Z"),IBLN,IBWID)
"RTN","IBJPI",127,0)
 S IBWID=48
"RTN","IBJPI",128,0)
 S IBST="    "_$$FO^IBCNEUT1(" ",36)_"  "_$$FO^IBCNEUT1(" ",11)_"  "_$$FO^IBCNEUT1("Nationally",10)_"  "_$$FO^IBCNEUT1("Locally",7)
"RTN","IBJPI",129,0)
 S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",130,0)
 S IBST="  #  "_$$FO^IBCNEUT1("Payer Name",36)_"  "_$$FO^IBCNEUT1("National ID",11)_"  "_$$FO^IBCNEUT1(" Active?",10)_"  "_$$FO^IBCNEUT1(" Active?",8)
"RTN","IBJPI",131,0)
 S IBLN=$$SETN(IBST,IBLN,IBCOL+1,,1)
"RTN","IBJPI",132,0)
 ; Loop thru the current List of Payers
"RTN","IBJPI",133,0)
 S (IEN,CT)=0 F  S IEN=$O(^IBE(350.9,1,51.18,IEN)) Q:'IEN  D
"RTN","IBJPI",134,0)
 . S IBIEN=$P($G(^IBE(350.9,1,51.18,IEN,0)),U) Q:'IBIEN  ; Bad IEN
"RTN","IBJPI",135,0)
 . S CT=CT+1,IBST=$$FO^IBCNEUT1(CT,2,"R")_". "
"RTN","IBJPI",136,0)
 . ; Payer Name
"RTN","IBJPI",137,0)
 . S IBST=IBST_$$FO^IBCNEUT1($P($G(^IBE(365.12,IBIEN,0)),U),36)
"RTN","IBJPI",138,0)
 . ; National ID
"RTN","IBJPI",139,0)
 . S IBST=IBST_"  "_$$FO^IBCNEUT1($P($G(^IBE(365.12,IBIEN,0)),U,2),11)
"RTN","IBJPI",140,0)
 . ; Look up the payer application data
"RTN","IBJPI",141,0)
 . S AIEN=$$PYRAPP^IBCNEUT5("IIV",IBIEN)
"RTN","IBJPI",142,0)
 . ; WARNING - IIV application does not exist
"RTN","IBJPI",143,0)
 . I AIEN="" D  Q
"RTN","IBJPI",144,0)
 . . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",145,0)
 . . S IBST="    ** Please remove from this list: Payer not configured for IIV **"
"RTN","IBJPI",146,0)
 . . S IBLN=$$SET(IBST,"",IBLN,"")
"RTN","IBJPI",147,0)
 . S ADATA=$G(^IBE(365.12,+IBIEN,1,+AIEN,0))
"RTN","IBJPI",148,0)
 . S IBST=IBST_"  "_$$FO^IBCNEUT1($S('$P(ADATA,U,2):"  NO",1:"  YES"),9)
"RTN","IBJPI",149,0)
 . S IBST=IBST_"  "_$$FO^IBCNEUT1($S('$P(ADATA,U,3):"   NO",1:"   YES"),7)
"RTN","IBJPI",150,0)
 . S IBLN=$$SET(IBST,"",IBLN,"")
"RTN","IBJPI",151,0)
 . ; WARNING - IIV application deactivated
"RTN","IBJPI",152,0)
 . I +$P(ADATA,U,11) D  Q
"RTN","IBJPI",153,0)
 . . S IBST="    ** Please remove from this list: Payer is deactivated for IIV **"
"RTN","IBJPI",154,0)
 . . S IBLN=$$SET(IBST,"",IBLN,"")
"RTN","IBJPI",155,0)
 . ; WARNING - Id Inq Req ID = YES & Use SSN as ID = NO
"RTN","IBJPI",156,0)
 . I +$P(ADATA,U,8),'$P(ADATA,U,9) D  Q
"RTN","IBJPI",157,0)
 . . S IBST="    ** Please remove from this list: Inquiries w/o subscriber ID rejected **"
"RTN","IBJPI",158,0)
 . . S IBLN=$$SET(IBST,"",IBLN,"")
"RTN","IBJPI",159,0)
 ; No Data Found if CT=0
"RTN","IBJPI",160,0)
 I CT=0 S IBLN=$$SET($$FO^IBCNEUT1("*** NO DATA FOUND!!!! ***",60),"",IBLN,IBWID)
"RTN","IBJPI",161,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=71
"RTN","IBJPI",162,0)
 S IBLN=$$SET("A payer will be available for electronic identification only if it is","",IBLN,IBWID)
"RTN","IBJPI",163,0)
 S IBLN=$$SET($$FO^IBCNEUT1("  both nationally and locally active.",IBWID),"",IBLN,IBWID)
"RTN","IBJPI",164,0)
 ;S IBLN=$$SET($$FO^IBCNEUT1("active.",IBWID),"",IBLN,IBWID)
"RTN","IBJPI",165,0)
 ;
"RTN","IBJPI",166,0)
 S VALMCNT=IBLN
"RTN","IBJPI",167,0)
 ;
"RTN","IBJPI",168,0)
 Q
"RTN","IBJPI",169,0)
 ;
"RTN","IBJPI",170,0)
SET(TTL,DATA,LN,WID) ;
"RTN","IBJPI",171,0)
 ; TTL = caption for field
"RTN","IBJPI",172,0)
 ; DATA = field value
"RTN","IBJPI",173,0)
 ; LN = current line #
"RTN","IBJPI",174,0)
 ; WID = right justify width
"RTN","IBJPI",175,0)
 N IBY
"RTN","IBJPI",176,0)
 ; update line ct
"RTN","IBJPI",177,0)
 S LN=LN+1
"RTN","IBJPI",178,0)
 ; offset line by 3 spaces
"RTN","IBJPI",179,0)
 S IBY="   "_$J(TTL,WID)_DATA D SET1(IBY,LN,0,$L(IBY))
"RTN","IBJPI",180,0)
 Q LN
"RTN","IBJPI",181,0)
 ;
"RTN","IBJPI",182,0)
SETN(TTL,LN,COL,RV,UN) ;
"RTN","IBJPI",183,0)
 ; TTL = caption for field
"RTN","IBJPI",184,0)
 ; LN = current line #
"RTN","IBJPI",185,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",186,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",187,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",188,0)
 N IBY
"RTN","IBJPI",189,0)
 ; update line ct
"RTN","IBJPI",190,0)
 S LN=LN+1
"RTN","IBJPI",191,0)
 ; offset line by 2 spaces
"RTN","IBJPI",192,0)
 S IBY="  "_TTL D SET1(IBY,LN,COL,$L(TTL),$G(RV),$G(UN))
"RTN","IBJPI",193,0)
 Q LN
"RTN","IBJPI",194,0)
 ;
"RTN","IBJPI",195,0)
SET1(STR,LN,COL,WD,RV,UN) ; Set up ^TMP array with screen data
"RTN","IBJPI",196,0)
 ; STR = line text
"RTN","IBJPI",197,0)
 ; LN = current line #
"RTN","IBJPI",198,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",199,0)
 ; WD = width of video attribute
"RTN","IBJPI",200,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",201,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",202,0)
 D SET^VALM10(LN,STR)
"RTN","IBJPI",203,0)
 I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJPI",204,0)
 I $G(UN)'="" D CNTRL^VALM10(LN,COL,WD-1,IOUON,IOUOFF)
"RTN","IBJPI",205,0)
 Q
"RTN","IBJPI",206,0)
 ;
"RTN","IBJPI2")
0^12^B18638540
"RTN","IBJPI2",1,0)
IBJPI2 ;DAOU/BHS - IIV SITE PARAMETERS SCREEN ACTIONS ;26-JUN-2002
"RTN","IBJPI2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271**;21-MAR-94
"RTN","IBJPI2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPI2",4,0)
 ;
"RTN","IBJPI2",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBJPI2",6,0)
 ;
"RTN","IBJPI2",7,0)
 ; Only call from tag
"RTN","IBJPI2",8,0)
 Q
"RTN","IBJPI2",9,0)
 ;
"RTN","IBJPI2",10,0)
MP ; Most Popular Payer processing
"RTN","IBJPI2",11,0)
 ; Set error trap to ensure that lock is released
"RTN","IBJPI2",12,0)
 N $ES,$ET
"RTN","IBJPI2",13,0)
 S $ET="D ER^IBJPI2"
"RTN","IBJPI2",14,0)
 ; Check lock
"RTN","IBJPI2",15,0)
 L +^IBCNE("MP"):1 I '$T W !!,"The Most Popular Payers List is being edited by another user, please retry later." D PAUSE^VALM1 G MPX
"RTN","IBJPI2",16,0)
 ; Call ListMan screen
"RTN","IBJPI2",17,0)
 D EN^IBJPI3
"RTN","IBJPI2",18,0)
 L -^IBCNE("MP")  ; Unlock
"RTN","IBJPI2",19,0)
 ;
"RTN","IBJPI2",20,0)
MPX ; MP exit pt
"RTN","IBJPI2",21,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",22,0)
 Q
"RTN","IBJPI2",23,0)
 ;
"RTN","IBJPI2",24,0)
BE ; Batch Extract processing
"RTN","IBJPI2",25,0)
 ; Init vars
"RTN","IBJPI2",26,0)
 N DIR,X,Y,DIRUT,TYPE,IEN,DR,DA,DIE,DIC
"RTN","IBJPI2",27,0)
 ;
"RTN","IBJPI2",28,0)
 D FULL^VALM1
"RTN","IBJPI2",29,0)
 W @IOF,!,"Batch Extract Parameters",!
"RTN","IBJPI2",30,0)
BE1 S DIR(0)="SO^1:Buffer;2:Appt;3:Nonverified;4:No insurance"
"RTN","IBJPI2",31,0)
 S DIR("A")="Batch extract parameters to edit"
"RTN","IBJPI2",32,0)
 S DIR("?")="^D BEHLP^IBJPI2"
"RTN","IBJPI2",33,0)
 D ^DIR K DIR I $D(DIRUT) G BEX
"RTN","IBJPI2",34,0)
 S TYPE=Y
"RTN","IBJPI2",35,0)
 ;
"RTN","IBJPI2",36,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  I $P($G(^IBE(350.9,1,51.17,IEN,0)),U,1)=TYPE Q
"RTN","IBJPI2",37,0)
 ;
"RTN","IBJPI2",38,0)
 I IEN=""!(IEN=0) W !,"Extract Not Defined - ERROR!" G BEX
"RTN","IBJPI2",39,0)
 ;
"RTN","IBJPI2",40,0)
 ; Display only Active and Max Ct for Buffer Extract
"RTN","IBJPI2",41,0)
 I TYPE=1 S DR=".02;.05"
"RTN","IBJPI2",42,0)
 ; Display only Active, Sel Criteria #1 and Max Ct for Appt
"RTN","IBJPI2",43,0)
 I TYPE=2 S DR=".02;.03;.05"
"RTN","IBJPI2",44,0)
 ; Display Active, Sel Crit #1, Sel Crit #2 and Max Ct for Non-verified
"RTN","IBJPI2",45,0)
 I TYPE=3 S DR=".02;.03;.04;.05"
"RTN","IBJPI2",46,0)
 ; Display Active, Sel Crit #1, Sel Crit #2 and Max Ct for No active
"RTN","IBJPI2",47,0)
 I TYPE=4 S DR=".02;.03;.04;.05"
"RTN","IBJPI2",48,0)
 S DIE="^IBE(350.9,1,51.17,",DA=IEN,DA(1)=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",49,0)
 G BE1
"RTN","IBJPI2",50,0)
 ;
"RTN","IBJPI2",51,0)
BEX D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",52,0)
 Q
"RTN","IBJPI2",53,0)
 ;
"RTN","IBJPI2",54,0)
BEHLP ; Help text display for Batch Extract selection prompt
"RTN","IBJPI2",55,0)
 N DIR
"RTN","IBJPI2",56,0)
 W @IOF
"RTN","IBJPI2",57,0)
 W !,"  Please select an extract to view/modify settings:"
"RTN","IBJPI2",58,0)
 W !!,"   1 - INS. BUFFER:  Examines entries in the Insurance Buffer to find"
"RTN","IBJPI2",59,0)
 W !,"                     patient/insurance combinations that qualify for an"
"RTN","IBJPI2",60,0)
 W !,"                     electronic insurance eligibility inquiry"
"RTN","IBJPI2",61,0)
 W !!,"   2 - APPOINTMENT:  Reviews upcoming appointments to identify patients that"
"RTN","IBJPI2",62,0)
 W !,"                     have active insurance that has not been recently verified,"
"RTN","IBJPI2",63,0)
 W !,"                     or patients that have no active insurance for which an"
"RTN","IBJPI2",64,0)
 W !,"                     ""identification"" inquiry should be made to search the"
"RTN","IBJPI2",65,0)
 W !,"                     National Healthcare Cache for previously unknown policies"
"RTN","IBJPI2",66,0)
 W !!,"   3 - NON-VERIFIED: Uses past visits to identify patients that have"
"RTN","IBJPI2",67,0)
 W !,"                     been seen recently and have active insurance coverage, but"
"RTN","IBJPI2",68,0)
 W !,"                     have not had the insurance information verified recently."
"RTN","IBJPI2",69,0)
 W !!,"   4 - NO INSURANCE: Also uses past visits, but identifies patients with no"
"RTN","IBJPI2",70,0)
 W !,"                     active insurance on file and attempts to search for"
"RTN","IBJPI2",71,0)
 W !,"                     previously unknown policies by sending an ""identification"""
"RTN","IBJPI2",72,0)
 W !,"                     inquiry to the National Healthcare Cache database and/or"
"RTN","IBJPI2",73,0)
 W !,"                     queries the most popular insurance companies"
"RTN","IBJPI2",74,0)
 D PAUSE^VALM1
"RTN","IBJPI2",75,0)
BEHLPEX Q
"RTN","IBJPI2",76,0)
 ;
"RTN","IBJPI2",77,0)
IIVEDIT(IBJDR) ; -- IBJP IIV EDIT ACTIONS (GP,PW):  Edit IIV Site Parameters
"RTN","IBJPI2",78,0)
 ; IBJDR - 0 (General Parameters section)
"RTN","IBJPI2",79,0)
 ;         1 (Patients Without Insurance section)
"RTN","IBJPI2",80,0)
 N DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",81,0)
 ;
"RTN","IBJPI2",82,0)
 D FULL^VALM1
"RTN","IBJPI2",83,0)
 W @IOF,!,$S(IBJDR=0:"General",IBJDR=1:"Patients Without Insurance",1:"Unknown")_" Parameters",!
"RTN","IBJPI2",84,0)
 ; Build string of fields to edit or input template based on IBJDR
"RTN","IBJPI2",85,0)
 I IBJDR'="" S DR=$P($T(@IBJDR),";;",2,999)
"RTN","IBJPI2",86,0)
 I DR'="" S DIE="^IBE(350.9,",DA=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",87,0)
 ;
"RTN","IBJPI2",88,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",89,0)
 Q
"RTN","IBJPI2",90,0)
 ;
"RTN","IBJPI2",91,0)
0 ;;[IBCNE GENERAL PARAMETER EDIT]
"RTN","IBJPI2",92,0)
1 ;;51.08;51.09;51.1
"RTN","IBJPI2",93,0)
 ;
"RTN","IBJPI2",94,0)
 ;
"RTN","IBJPI2",95,0)
ER ; Unlock most popular payer and return to log error
"RTN","IBJPI2",96,0)
 L -^IBCNE("MP")
"RTN","IBJPI2",97,0)
 D ^%ZTER
"RTN","IBJPI2",98,0)
 D UNWIND^%ZTER
"RTN","IBJPI2",99,0)
 Q
"RTN","IBJPI2",100,0)
 ;
"RTN","IBJPI3")
0^14^B36319045
"RTN","IBJPI3",1,0)
IBJPI3 ;DAOU/BHS - IBJP IIV MOST POPULAR PAYER LIST SCREEN ;25-NOV-2003
"RTN","IBJPI3",2,0)
 ;;2.0;INTEGRATED BILLING;**271**;21-MAR-94
"RTN","IBJPI3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPI3",4,0)
 ;
"RTN","IBJPI3",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBJPI3",6,0)
 ;
"RTN","IBJPI3",7,0)
EN ; -- main entry pt for IBJP IIV MOST POPULAR PAYERS
"RTN","IBJPI3",8,0)
 N POP,X,CTRLCOL,VALMHDR,VALMCNT,%DT
"RTN","IBJPI3",9,0)
 D EN^VALM("IBJP IIV MOST POPULAR PAYERS")
"RTN","IBJPI3",10,0)
 Q
"RTN","IBJPI3",11,0)
 ;
"RTN","IBJPI3",12,0)
HDR ; -- header code
"RTN","IBJPI3",13,0)
 S VALMHDR(1)=" "_$S($D(^TMP($J,"IBJPI3-MODS")):"Unsaved Changes Exist",1:"Last Saved:  "_$$FMTE^XLFDT($P($G(^IBE(350.9,1,51)),U,21),"5Z"))
"RTN","IBJPI3",14,0)
 S VALMHDR(2)="     "_$$FO^IBCNEUT1(" ",49)_"  "_$$FO^IBCNEUT1(" ",11)_"  Nat.  Loc."
"RTN","IBJPI3",15,0)
 S VALMHDR(3)="  #  "_$$FO^IBCNEUT1("Payer Name ",49)_"  "_$$FO^IBCNEUT1("National ID",11)_"  Act?  Act?"
"RTN","IBJPI3",16,0)
 Q
"RTN","IBJPI3",17,0)
 ;
"RTN","IBJPI3",18,0)
INIT ; -- init vars and list array
"RTN","IBJPI3",19,0)
 ; Init temp globals
"RTN","IBJPI3",20,0)
 K ^TMP($J,"IBJPI3")
"RTN","IBJPI3",21,0)
 K ^TMP($J,"IBJPI3-IENS")
"RTN","IBJPI3",22,0)
 K ^TMP($J,"IBJPI3-LIST")
"RTN","IBJPI3",23,0)
 K ^TMP($J,"IBJPI3-MODS")
"RTN","IBJPI3",24,0)
 D CLEAN^VALM10  ; Kills data and video control arrays w/active list
"RTN","IBJPI3",25,0)
 D BLD           ; Build list from site params
"RTN","IBJPI3",26,0)
 D DISP          ; Build display array
"RTN","IBJPI3",27,0)
 Q
"RTN","IBJPI3",28,0)
 ;
"RTN","IBJPI3",29,0)
HELP ; HELP screen for Most Pop screen
"RTN","IBJPI3",30,0)
 D FULL^VALM1   ; Full screen mode
"RTN","IBJPI3",31,0)
 W @IOF
"RTN","IBJPI3",32,0)
 D EN^DDIOL("Most Popular Payer List Edit Actions")
"RTN","IBJPI3",33,0)
 D EN^DDIOL(" ")
"RTN","IBJPI3",34,0)
 D EN^DDIOL("Add Entry - Inserts a new payer into the list at any position as")
"RTN","IBJPI3",35,0)
 D EN^DDIOL("  long as the list has fewer than ten entries.  The entry will be inserted and")
"RTN","IBJPI3",36,0)
 D EN^DDIOL("  existing entries from the new position through the end of the list will be")
"RTN","IBJPI3",37,0)
 D EN^DDIOL("  shifted down one position.")
"RTN","IBJPI3",38,0)
 D EN^DDIOL(" ")
"RTN","IBJPI3",39,0)
 D EN^DDIOL("Delete Entry - Deletes a payer from the list at any position as")
"RTN","IBJPI3",40,0)
 D EN^DDIOL("  long as the list has at least one entry.  The entries following the deleted")
"RTN","IBJPI3",41,0)
 D EN^DDIOL("  entry will be shifted up one position.")
"RTN","IBJPI3",42,0)
 D EN^DDIOL(" ")
"RTN","IBJPI3",43,0)
 D EN^DDIOL("Modify Entry - Modifies a payer from the list at any position as")
"RTN","IBJPI3",44,0)
 D EN^DDIOL("  long as the list has at least one entry.  The new payer must be")
"RTN","IBJPI3",45,0)
 D EN^DDIOL("  valid in order to replace the existing entry.")
"RTN","IBJPI3",46,0)
 D EN^DDIOL(" ")
"RTN","IBJPI3",47,0)
 D EN^DDIOL("Print Current List - Allows the user to specify a device and print the current")
"RTN","IBJPI3",48,0)
 D EN^DDIOL("  items in the list.")
"RTN","IBJPI3",49,0)
 D PAUSE^VALM1
"RTN","IBJPI3",50,0)
 D EN^DDIOL("Reorder Entry - Changes a payer from the list at any position to")
"RTN","IBJPI3",51,0)
 D EN^DDIOL("  another position so long as the list has at least two entries.  Moving the")
"RTN","IBJPI3",52,0)
 D EN^DDIOL("  entry to a lower position shifts entries following the original position up")
"RTN","IBJPI3",53,0)
 D EN^DDIOL("  one position except for those lower than the new position.  Moving the entry")
"RTN","IBJPI3",54,0)
 D EN^DDIOL("  to a higher position shifts entries following the new position down one")
"RTN","IBJPI3",55,0)
 D EN^DDIOL("  position except for those lower than the original position.")
"RTN","IBJPI3",56,0)
 D EN^DDIOL(" ")
"RTN","IBJPI3",57,0)
 D EN^DDIOL("Restore Saved List - If editing actions were performed, the user will be")
"RTN","IBJPI3",58,0)
 D EN^DDIOL("  prompted to verify that they wish to discard all changes.")
"RTN","IBJPI3",59,0)
 D EN^DDIOL(" ")
"RTN","IBJPI3",60,0)
 D EN^DDIOL("Save Current List - Saves the current list to the Site Parameters file.")
"RTN","IBJPI3",61,0)
 D EN^DDIOL(" ")
"RTN","IBJPI3",62,0)
 D EN^DDIOL("Exit Action - If editing actions were performed, the user will be prompted")
"RTN","IBJPI3",63,0)
 D EN^DDIOL("  to save the current list or exit without filing changes.")
"RTN","IBJPI3",64,0)
 D PAUSE^VALM1  ; Press return to continue
"RTN","IBJPI3",65,0)
 W @IOF
"RTN","IBJPI3",66,0)
 S VALMBCK="R"  ; Refresh screen
"RTN","IBJPI3",67,0)
 Q
"RTN","IBJPI3",68,0)
 ;
"RTN","IBJPI3",69,0)
EXIT ; -- exit code
"RTN","IBJPI3",70,0)
 S VALMBCK="R"
"RTN","IBJPI3",71,0)
 ; If the list has been acted upon, prompt for save
"RTN","IBJPI3",72,0)
 I $D(^TMP($J,"IBJPI3-MODS")) D
"RTN","IBJPI3",73,0)
 . D EN^DDIOL("Unsaved changes exist!")
"RTN","IBJPI3",74,0)
 . D SAVE^IBJPI4
"RTN","IBJPI3",75,0)
 ; Kill temp globals
"RTN","IBJPI3",76,0)
 K ^TMP($J,"IBJPI3")
"RTN","IBJPI3",77,0)
 K ^TMP($J,"IBJPI3-LIST")
"RTN","IBJPI3",78,0)
 K ^TMP($J,"IBJPI3-IENS")
"RTN","IBJPI3",79,0)
 K ^TMP($J,"IBJPI3-MODS")
"RTN","IBJPI3",80,0)
 D CLEAN^VALM10  ; Kills data and video control arrays w/active list
"RTN","IBJPI3",81,0)
 Q
"RTN","IBJPI3",82,0)
 ;
"RTN","IBJPI3",83,0)
BLD ; -- build list array
"RTN","IBJPI3",84,0)
 N IBIEN,IBCT,IEN
"RTN","IBJPI3",85,0)
 ; Init temp globals
"RTN","IBJPI3",86,0)
 K ^TMP($J,"IBJPI3-LIST")
"RTN","IBJPI3",87,0)
 K ^TMP($J,"IBJPI3-IENS")
"RTN","IBJPI3",88,0)
 K ^TMP($J,"IBJPI3-MODS")
"RTN","IBJPI3",89,0)
 ; Loop thru current List of Payers
"RTN","IBJPI3",90,0)
 S (IEN,IBCT)=0
"RTN","IBJPI3",91,0)
 F  S IEN=$O(^IBE(350.9,1,51.18,IEN)) Q:'IEN  D
"RTN","IBJPI3",92,0)
 . S IBIEN=$P($G(^IBE(350.9,1,51.18,IEN,0)),U) Q:'IBIEN  ; Bad IEN
"RTN","IBJPI3",93,0)
 . S IBCT=IBCT+1
"RTN","IBJPI3",94,0)
 . S ^TMP($J,"IBJPI3-LIST",IBCT)=IBIEN  ; List by pos 
"RTN","IBJPI3",95,0)
 . S ^TMP($J,"IBJPI3-IENS",IBIEN)=""    ; IEN index
"RTN","IBJPI3",96,0)
 Q
"RTN","IBJPI3",97,0)
 ;
"RTN","IBJPI3",98,0)
DISP ; Build display array of text
"RTN","IBJPI3",99,0)
 N IBI,IBIEN,IBST,IBLN,IBAIEN,IBADATA
"RTN","IBJPI3",100,0)
 ; Init display global
"RTN","IBJPI3",101,0)
 K ^TMP($J,"IBJPI3")
"RTN","IBJPI3",102,0)
 ; Loop thru current list of Payers
"RTN","IBJPI3",103,0)
 S IBLN=0
"RTN","IBJPI3",104,0)
 F IBI=1:1:10 S IBIEN=$G(^TMP($J,"IBJPI3-LIST",IBI)) Q:'IBIEN  D
"RTN","IBJPI3",105,0)
 . S IBST=$$FO^IBCNEUT1(IBI,3,"R")_". "
"RTN","IBJPI3",106,0)
 . ; Name
"RTN","IBJPI3",107,0)
 . S IBST=IBST_$$FO^IBCNEUT1($P($G(^IBE(365.12,IBIEN,0)),U),49)
"RTN","IBJPI3",108,0)
 . ; National ID
"RTN","IBJPI3",109,0)
 . S IBST=IBST_"  "_$$FO^IBCNEUT1($P($G(^IBE(365.12,IBIEN,0)),U,2),11)
"RTN","IBJPI3",110,0)
 . S (IBAIEN,IBADATA)=""
"RTN","IBJPI3",111,0)
 . ; Payer App IEN
"RTN","IBJPI3",112,0)
 . S IBAIEN=$$PYRAPP^IBCNEUT5("IIV",IBIEN)
"RTN","IBJPI3",113,0)
 . ; WARNING - IIV application does not exist
"RTN","IBJPI3",114,0)
 . I IBAIEN="" D  Q
"RTN","IBJPI3",115,0)
 . . S IBLN=$$SET(IBLN,IBST)
"RTN","IBJPI3",116,0)
 . . S IBST="       ** Please remove from this list: Payer not configured for IIV **"
"RTN","IBJPI3",117,0)
 . . S IBLN=$$SET(IBLN,IBST)
"RTN","IBJPI3",118,0)
 . S IBADATA=$G(^IBE(365.12,+IBIEN,1,+IBAIEN,0))
"RTN","IBJPI3",119,0)
 . ; Nat Act Flg
"RTN","IBJPI3",120,0)
 . S IBST=IBST_"  "_$$FO^IBCNEUT1($S('$P(IBADATA,U,2):"NO",1:"YES"),4)
"RTN","IBJPI3",121,0)
 . ; Loc Act Flg
"RTN","IBJPI3",122,0)
 . S IBST=IBST_"  "_$$FO^IBCNEUT1($S('$P(IBADATA,U,3):"NO",1:"YES"),4)
"RTN","IBJPI3",123,0)
 . S IBLN=$$SET(IBLN,IBST)
"RTN","IBJPI3",124,0)
 . ; WARNING - IIV application deactivated
"RTN","IBJPI3",125,0)
 . I +$P(IBADATA,U,11) D  Q
"RTN","IBJPI3",126,0)
 . . S IBST="       ** Please remove from this list: Payer is deactivated for IIV **"
"RTN","IBJPI3",127,0)
 . . S IBLN=$$SET(IBLN,IBST)
"RTN","IBJPI3",128,0)
 . ; WARNING - Id Inq Req ID = YES & Use SSN as ID = NO
"RTN","IBJPI3",129,0)
 . I +$P(IBADATA,U,8),'$P(IBADATA,U,9) D
"RTN","IBJPI3",130,0)
 . . S IBST="       ** Please remove from this list: Inquiries w/o subscriber ID rejected **"
"RTN","IBJPI3",131,0)
 . . S IBLN=$$SET(IBLN,IBST)
"RTN","IBJPI3",132,0)
 ; No Data Found if $O(^TMP($J,"IBJPI3-LIST",0))=""
"RTN","IBJPI3",133,0)
 I $O(^TMP($J,"IBJPI3-LIST",0))="" S IBLN=$$SET(IBLN,"     *** NO DATA FOUND!!! ***")
"RTN","IBJPI3",134,0)
 ; Update line ct
"RTN","IBJPI3",135,0)
 S VALMCNT=IBLN
"RTN","IBJPI3",136,0)
 Q
"RTN","IBJPI3",137,0)
 ;
"RTN","IBJPI3",138,0)
SET(LN,STR) ; Build list array
"RTN","IBJPI3",139,0)
 S LN=$G(LN)+1
"RTN","IBJPI3",140,0)
 D SET^VALM10(LN,STR)
"RTN","IBJPI3",141,0)
 Q LN
"RTN","IBJPI3",142,0)
 ;
"RTN","IBJPI4")
0^15^B54576421
"RTN","IBJPI4",1,0)
IBJPI4 ;DAOU/BHS - IBJP IIV MOST POPULAR PAYER LIST SCREEN ;25-NOV-2003
"RTN","IBJPI4",2,0)
 ;;2.0;INTEGRATED BILLING;**271**;21-MAR-94
"RTN","IBJPI4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPI4",4,0)
 ;
"RTN","IBJPI4",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBJPI4",6,0)
 ;
"RTN","IBJPI4",7,0)
 Q  ; Must be called at a tag
"RTN","IBJPI4",8,0)
 ;
"RTN","IBJPI4",9,0)
ADD ; Add entry
"RTN","IBJPI4",10,0)
 N IBCT,IBPOS,DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y,IBNAME,IBIEN,IBI
"RTN","IBJPI4",11,0)
 ; Refresh screen
"RTN","IBJPI4",12,0)
 S VALMBCK="R"
"RTN","IBJPI4",13,0)
 ; Find highest pos in list (1-10)
"RTN","IBJPI4",14,0)
 S IBCT=+$O(^TMP($J,"IBJPI3-LIST",11),-1)
"RTN","IBJPI4",15,0)
 ; Quit if count = 10
"RTN","IBJPI4",16,0)
 I IBCT=10 D  Q
"RTN","IBJPI4",17,0)
 . D EN^DDIOL("Cannot add entry as all ten positions are populated!")
"RTN","IBJPI4",18,0)
 . D EN^DDIOL("Please modify an entry or delete an entry, if necessary!")
"RTN","IBJPI4",19,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",20,0)
 ; Select pos for new entry
"RTN","IBJPI4",21,0)
 S IBPOS=$S(IBCT=0:1,1:$$SEL(IBCT+1,"",IBCT+1)) Q:'(IBPOS>0)
"RTN","IBJPI4",22,0)
 ; Full screen
"RTN","IBJPI4",23,0)
 D FULL^VALM1
"RTN","IBJPI4",24,0)
 ; Select Payer
"RTN","IBJPI4",25,0)
 S IBIEN=$$PYRLKUP(IBPOS,1) Q:'(IBIEN>0)
"RTN","IBJPI4",26,0)
 ; Quit, if dup
"RTN","IBJPI4",27,0)
 I $D(^TMP($J,"IBJPI3-IENS",IBIEN)) D  Q
"RTN","IBJPI4",28,0)
 . D EN^DDIOL("Payer already in list, please try again!")
"RTN","IBJPI4",29,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",30,0)
 ; Add entry and shift others following down by one
"RTN","IBJPI4",31,0)
 F IBI=IBCT:-1:IBPOS S ^TMP($J,"IBJPI3-LIST",IBI+1)=^TMP($J,"IBJPI3-LIST",IBI)
"RTN","IBJPI4",32,0)
 S ^TMP($J,"IBJPI3-LIST",IBPOS)=IBIEN
"RTN","IBJPI4",33,0)
 S ^TMP($J,"IBJPI3-IENS",IBIEN)=""
"RTN","IBJPI4",34,0)
 S ^TMP($J,"IBJPI3-MODS")=""
"RTN","IBJPI4",35,0)
 ; Kill header to force refresh
"RTN","IBJPI4",36,0)
 K VALMHDR
"RTN","IBJPI4",37,0)
 ; Rebuild display
"RTN","IBJPI4",38,0)
 D DISP^IBJPI3
"RTN","IBJPI4",39,0)
 Q
"RTN","IBJPI4",40,0)
 ;
"RTN","IBJPI4",41,0)
DELETE ; Delete entry
"RTN","IBJPI4",42,0)
 N IBCT,IBPOS,DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y,IBNAME,IBIEN,IBI
"RTN","IBJPI4",43,0)
 ; Refresh screen
"RTN","IBJPI4",44,0)
 S VALMBCK="R"
"RTN","IBJPI4",45,0)
 ; Find highest pos in list (1-10)
"RTN","IBJPI4",46,0)
 S IBCT=+$O(^TMP($J,"IBJPI3-LIST",11),-1)
"RTN","IBJPI4",47,0)
 ; Quit, if list is empty
"RTN","IBJPI4",48,0)
 I IBCT=0 D  Q
"RTN","IBJPI4",49,0)
 . D EN^DDIOL("Cannot delete entry as list is empty!")
"RTN","IBJPI4",50,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",51,0)
 ; Select pos to delete
"RTN","IBJPI4",52,0)
 S IBPOS=$S(IBCT=1:1,1:$$SEL(IBCT)) Q:'(IBPOS>0)
"RTN","IBJPI4",53,0)
 ; Display Payer Name
"RTN","IBJPI4",54,0)
 W "  ",$E($P($G(^IBE(365.12,+$G(^TMP($J,"IBJPI3-LIST",IBPOS)),0)),U,1),1,40)
"RTN","IBJPI4",55,0)
 ; Confirm deletion
"RTN","IBJPI4",56,0)
 S DIR(0)="Y"
"RTN","IBJPI4",57,0)
 S DIR("A")="Please confirm deletion of this entry"
"RTN","IBJPI4",58,0)
 S DIR("B")="NO"
"RTN","IBJPI4",59,0)
 D ^DIR
"RTN","IBJPI4",60,0)
 I $D(DIRUT)!'Y Q
"RTN","IBJPI4",61,0)
 ; Save IEN to delete
"RTN","IBJPI4",62,0)
 S IBIEN=$G(^TMP($J,"IBJPI3-LIST",IBPOS))
"RTN","IBJPI4",63,0)
 ; Shift entries in list following deleted entry up by one
"RTN","IBJPI4",64,0)
 F IBI=IBPOS:1:IBCT-1 S ^TMP($J,"IBJPI3-LIST",IBI)=^TMP($J,"IBJPI3-LIST",IBI+1)
"RTN","IBJPI4",65,0)
 K ^TMP($J,"IBJPI3-IENS",IBIEN)
"RTN","IBJPI4",66,0)
 K ^TMP($J,"IBJPI3-LIST",IBCT)
"RTN","IBJPI4",67,0)
 S ^TMP($J,"IBJPI3-MODS")=""
"RTN","IBJPI4",68,0)
 ; Kill header to force refresh
"RTN","IBJPI4",69,0)
 K VALMHDR
"RTN","IBJPI4",70,0)
 ; Build display
"RTN","IBJPI4",71,0)
 D DISP^IBJPI3
"RTN","IBJPI4",72,0)
 Q
"RTN","IBJPI4",73,0)
 ;
"RTN","IBJPI4",74,0)
MODIFY ; Modify entry
"RTN","IBJPI4",75,0)
 N IBCT,IBPOS,DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y,IBNAME,IBNIEN,IBOIEN,IBI
"RTN","IBJPI4",76,0)
 ; Refresh screen
"RTN","IBJPI4",77,0)
 S VALMBCK="R"
"RTN","IBJPI4",78,0)
 ; Find highest pos in list (1-10)
"RTN","IBJPI4",79,0)
 S IBCT=+$O(^TMP($J,"IBJPI3-LIST",11),-1)
"RTN","IBJPI4",80,0)
 ; Quit, if list is empty
"RTN","IBJPI4",81,0)
 I IBCT=0 D  Q
"RTN","IBJPI4",82,0)
 . D EN^DDIOL("Cannot modify entry as list is empty!")
"RTN","IBJPI4",83,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",84,0)
 ; Select pos to modify
"RTN","IBJPI4",85,0)
 S IBPOS=$S(IBCT=1:1,1:$$SEL(IBCT)) Q:'(IBPOS>0)
"RTN","IBJPI4",86,0)
 ; Display Payer Name
"RTN","IBJPI4",87,0)
 W "  ",$E($P($G(^IBE(365.12,+$G(^TMP($J,"IBJPI3-LIST",IBPOS)),0)),U,1),1,40)
"RTN","IBJPI4",88,0)
 ; Full screen
"RTN","IBJPI4",89,0)
 D FULL^VALM1
"RTN","IBJPI4",90,0)
 ; Select payer
"RTN","IBJPI4",91,0)
 S IBNIEN=$$PYRLKUP(IBPOS,0) Q:'(IBNIEN>0)
"RTN","IBJPI4",92,0)
 ; Orig IEN
"RTN","IBJPI4",93,0)
 S IBOIEN=$G(^TMP($J,"IBJPI3-LIST",IBPOS))
"RTN","IBJPI4",94,0)
 I IBOIEN=IBNIEN D  Q
"RTN","IBJPI4",95,0)
 . D EN^DDIOL("No change, please try again!")
"RTN","IBJPI4",96,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",97,0)
 ; Quit, if dup
"RTN","IBJPI4",98,0)
 I $D(^TMP($J,"IBJPI3-IENS",IBNIEN)),$G(^TMP($J,"IBJPI3-LIST",IBPOS))'=IBNIEN D  Q
"RTN","IBJPI4",99,0)
 . D EN^DDIOL("Payer already in list, please try again!")
"RTN","IBJPI4",100,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",101,0)
 ; Update list and IEN index
"RTN","IBJPI4",102,0)
 S ^TMP($J,"IBJPI3-LIST",IBPOS)=IBNIEN
"RTN","IBJPI4",103,0)
 S ^TMP($J,"IBJPI3-IENS",IBNIEN)=""
"RTN","IBJPI4",104,0)
 ; Kill orig IEN entry
"RTN","IBJPI4",105,0)
 K ^TMP($J,"IBJPI3-IENS",IBOIEN)
"RTN","IBJPI4",106,0)
 S ^TMP($J,"IBJPI3-MODS")=""
"RTN","IBJPI4",107,0)
 ; Kill header to force refresh
"RTN","IBJPI4",108,0)
 K VALMHDR
"RTN","IBJPI4",109,0)
 ; Rebuild display
"RTN","IBJPI4",110,0)
 D DISP^IBJPI3
"RTN","IBJPI4",111,0)
 Q
"RTN","IBJPI4",112,0)
 ;
"RTN","IBJPI4",113,0)
REORDER ; Reorder entry
"RTN","IBJPI4",114,0)
 N IBCT,IBPOS,DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y,IBNAME,IBNPOS,IBOPOS,IBI
"RTN","IBJPI4",115,0)
 N IBOIEN
"RTN","IBJPI4",116,0)
 ; Refresh screen
"RTN","IBJPI4",117,0)
 S VALMBCK="R"
"RTN","IBJPI4",118,0)
 ; Find highest pos in list (1-10)
"RTN","IBJPI4",119,0)
 S IBCT=+$O(^TMP($J,"IBJPI3-LIST",11),-1)
"RTN","IBJPI4",120,0)
 ; Quit, if list is empty
"RTN","IBJPI4",121,0)
 I IBCT<2 D  Q
"RTN","IBJPI4",122,0)
 . D EN^DDIOL("Cannot reorder entries as list is too small!")
"RTN","IBJPI4",123,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",124,0)
 ; Select pos to reorder
"RTN","IBJPI4",125,0)
 S IBOPOS=$$SEL(IBCT) Q:'(IBOPOS>0)
"RTN","IBJPI4",126,0)
 ; Display Payer Name
"RTN","IBJPI4",127,0)
 W "  ",$E($P($G(^IBE(365.12,+$G(^TMP($J,"IBJPI3-LIST",IBOPOS)),0)),U,1),1,40)
"RTN","IBJPI4",128,0)
 ; Select new pos
"RTN","IBJPI4",129,0)
 S IBNPOS=$$SEL(IBCT,1) Q:'(IBNPOS>0)
"RTN","IBJPI4",130,0)
 ; Quit, if no change
"RTN","IBJPI4",131,0)
 I IBOPOS=IBNPOS D  Q
"RTN","IBJPI4",132,0)
 . D EN^DDIOL("New Position = Original Position, please try again!")
"RTN","IBJPI4",133,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",134,0)
 ; Reorder to lower pos
"RTN","IBJPI4",135,0)
 I IBOPOS<IBNPOS D
"RTN","IBJPI4",136,0)
 . ; Orig IEN
"RTN","IBJPI4",137,0)
 . S IBOIEN=$G(^TMP($J,"IBJPI3-LIST",IBOPOS))
"RTN","IBJPI4",138,0)
 . ; Shift entries following orig entry up by one
"RTN","IBJPI4",139,0)
 . F IBI=IBOPOS:1:IBNPOS-1 S ^TMP($J,"IBJPI3-LIST",IBI)=^TMP($J,"IBJPI3-LIST",IBI+1)
"RTN","IBJPI4",140,0)
 . ; Set orig IEN in new pos
"RTN","IBJPI4",141,0)
 . S ^TMP($J,"IBJPI3-LIST",IBNPOS)=IBOIEN
"RTN","IBJPI4",142,0)
 ; Reorder to higher pos
"RTN","IBJPI4",143,0)
 I IBNPOS<IBOPOS D
"RTN","IBJPI4",144,0)
 . ; Save orig IEN
"RTN","IBJPI4",145,0)
 . S IBOIEN=$G(^TMP($J,"IBJPI3-LIST",IBOPOS))
"RTN","IBJPI4",146,0)
 . ; Shift entries before original entry down by one
"RTN","IBJPI4",147,0)
 . F IBI=IBOPOS:-1:IBNPOS+1 S ^TMP($J,"IBJPI3-LIST",IBI)=^TMP($J,"IBJPI3-LIST",IBI-1)
"RTN","IBJPI4",148,0)
 . ; Set orig IEN in new pos
"RTN","IBJPI4",149,0)
 . S ^TMP($J,"IBJPI3-LIST",IBNPOS)=IBOIEN
"RTN","IBJPI4",150,0)
 S ^TMP($J,"IBJPI3-MODS")=""
"RTN","IBJPI4",151,0)
 ; Kill header to force refresh
"RTN","IBJPI4",152,0)
 K VALMHDR
"RTN","IBJPI4",153,0)
 ; Rebuild display
"RTN","IBJPI4",154,0)
 D DISP^IBJPI3
"RTN","IBJPI4",155,0)
 Q
"RTN","IBJPI4",156,0)
 ;
"RTN","IBJPI4",157,0)
RESTORE ; Restore list from site params
"RTN","IBJPI4",158,0)
 N DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y
"RTN","IBJPI4",159,0)
 ; Refresh screen
"RTN","IBJPI4",160,0)
 S VALMBCK="R"
"RTN","IBJPI4",161,0)
 I '$D(^TMP($J,"IBJPI3-MODS")) D  Q
"RTN","IBJPI4",162,0)
 . D EN^DDIOL("No actions have been performed, restore unnecessary.")
"RTN","IBJPI4",163,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",164,0)
 ; Confirm restore
"RTN","IBJPI4",165,0)
 S DIR(0)="Y"
"RTN","IBJPI4",166,0)
 S DIR("A")="Please confirm restore of the last saved list"
"RTN","IBJPI4",167,0)
 S DIR("B")="NO"
"RTN","IBJPI4",168,0)
 D ^DIR
"RTN","IBJPI4",169,0)
 I $D(DIRUT)!'Y Q
"RTN","IBJPI4",170,0)
 ; Kill header to force refresh
"RTN","IBJPI4",171,0)
 K VALMHDR
"RTN","IBJPI4",172,0)
 ; Build list with site params
"RTN","IBJPI4",173,0)
 D BLD^IBJPI3
"RTN","IBJPI4",174,0)
 K ^TMP($J,"IBJPI3-MODS")
"RTN","IBJPI4",175,0)
 ; Rebuild display
"RTN","IBJPI4",176,0)
 D DISP^IBJPI3
"RTN","IBJPI4",177,0)
 Q
"RTN","IBJPI4",178,0)
 ;
"RTN","IBJPI4",179,0)
SAVE ; Save list to Site Params file
"RTN","IBJPI4",180,0)
 N DIR,DIRUT,DTOUT,DUOUT,DIROUT,X,Y
"RTN","IBJPI4",181,0)
 ; Refresh screen
"RTN","IBJPI4",182,0)
 S VALMBCK="R"
"RTN","IBJPI4",183,0)
 ; Temp until file is updated
"RTN","IBJPI4",184,0)
 ;Q
"RTN","IBJPI4",185,0)
 I '$D(^TMP($J,"IBJPI3-MODS")) D  Q
"RTN","IBJPI4",186,0)
 . D EN^DDIOL("No actions have been performed, save unnecessary.")
"RTN","IBJPI4",187,0)
 . D PAUSE^VALM1
"RTN","IBJPI4",188,0)
 ; Confirm save to site params
"RTN","IBJPI4",189,0)
 S DIR(0)="Y"
"RTN","IBJPI4",190,0)
 S DIR("A")="Please confirm save of the current list"
"RTN","IBJPI4",191,0)
 S DIR("B")="NO"
"RTN","IBJPI4",192,0)
 D ^DIR
"RTN","IBJPI4",193,0)
 I $D(DIRUT)!'Y Q
"RTN","IBJPI4",194,0)
 ; File changes
"RTN","IBJPI4",195,0)
 D FILE
"RTN","IBJPI4",196,0)
 ; Kill header to force refresh
"RTN","IBJPI4",197,0)
 K VALMHDR
"RTN","IBJPI4",198,0)
 ; Build list with site params
"RTN","IBJPI4",199,0)
 D BLD^IBJPI3
"RTN","IBJPI4",200,0)
 K ^TMP($J,"IBJPI3-MODS")
"RTN","IBJPI4",201,0)
 ; Rebuild display
"RTN","IBJPI4",202,0)
 D DISP^IBJPI3
"RTN","IBJPI4",203,0)
 Q
"RTN","IBJPI4",204,0)
 ;
"RTN","IBJPI4",205,0)
FILE ; Delete orig list and file new one
"RTN","IBJPI4",206,0)
 ; Temp until file is updated
"RTN","IBJPI4",207,0)
 ;Q
"RTN","IBJPI4",208,0)
 N DIK,DA,IBCT,FDA
"RTN","IBJPI4",209,0)
 ; Kill existing list entries
"RTN","IBJPI4",210,0)
 S DIK="^IBE(350.9,1,51.18,",DA(1)=1
"RTN","IBJPI4",211,0)
 F DA=1:1:10 I $D(^IBE(350.9,1,51.18,DA)) D ^DIK
"RTN","IBJPI4",212,0)
 ; Loop thru list entries and update 350.9 mult fld for most pop
"RTN","IBJPI4",213,0)
 F IBCT=1:1:10 I $D(^TMP($J,"IBJPI3-LIST",IBCT)) S FDA(350.9003,"+1,1,",.01)=$P($G(^TMP($J,"IBJPI3-LIST",IBCT)),U,1) D UPDATE^DIE("","FDA")
"RTN","IBJPI4",214,0)
 ; Init FDA array
"RTN","IBJPI4",215,0)
 K FDA
"RTN","IBJPI4",216,0)
 ; Update List start and end dts and compile dt
"RTN","IBJPI4",217,0)
 S FDA(350.9,"1,",51.11)=""
"RTN","IBJPI4",218,0)
 S FDA(350.9,"1,",51.12)=""
"RTN","IBJPI4",219,0)
 S FDA(350.9,"1,",51.21)=$$NOW^XLFDT
"RTN","IBJPI4",220,0)
 ; Save data to File (350.9)
"RTN","IBJPI4",221,0)
 D FILE^DIE("","FDA")
"RTN","IBJPI4",222,0)
 ;
"RTN","IBJPI4",223,0)
 Q
"RTN","IBJPI4",224,0)
 ;
"RTN","IBJPI4",225,0)
SEL(MAX,NWFLG,DFLT) ; Select Position
"RTN","IBJPI4",226,0)
 ; Input:  MAX - upper bound > 0, NWFLG - opt param for 'New' prompt
"RTN","IBJPI4",227,0)
 ; Output: -1 (time out or '^') OR n (1<=n<=MAX) OR 0
"RTN","IBJPI4",228,0)
 N DIR,DIRUT,DTOUT,DUOUT,IBX,X,Y
"RTN","IBJPI4",229,0)
 ; Init output
"RTN","IBJPI4",230,0)
 S IBX=0
"RTN","IBJPI4",231,0)
 ; Validate MAX
"RTN","IBJPI4",232,0)
 I '(MAX>0) Q IBX
"RTN","IBJPI4",233,0)
 ; Init flag
"RTN","IBJPI4",234,0)
 S NWFLG=$G(NWFLG,0)
"RTN","IBJPI4",235,0)
 S DFLT=$G(DFLT)
"RTN","IBJPI4",236,0)
 ; Select (New) Position
"RTN","IBJPI4",237,0)
 S DIR(0)="NOA^1:"_MAX_":0^K:X'>0!(X>"_MAX_") X"
"RTN","IBJPI4",238,0)
 S DIR("A")="Select "_$S(NWFLG:"New ",1:"")_"Position (1-"_MAX_"): "
"RTN","IBJPI4",239,0)
 I DFLT>0 S DIR("B")=DFLT
"RTN","IBJPI4",240,0)
 S DIR("?")="Please enter a valid position between 1 and "_MAX
"RTN","IBJPI4",241,0)
 D ^DIR
"RTN","IBJPI4",242,0)
 S IBX=$S($D(DIRUT):-1,+Y:+Y,1:0)
"RTN","IBJPI4",243,0)
 Q IBX
"RTN","IBJPI4",244,0)
 ; 
"RTN","IBJPI4",245,0)
PYRLKUP(IBPOS,ADDFLG) ; Lookup Payer IEN
"RTN","IBJPI4",246,0)
 N DIC,DTOUT,DUOUT,X,Y,PYRIEN
"RTN","IBJPI4",247,0)
 ;
"RTN","IBJPI4",248,0)
 S DIC=365.12
"RTN","IBJPI4",249,0)
 S DIC(0)="ABEV"
"RTN","IBJPI4",250,0)
 S DIC("A")="Enter Payer #"_IBPOS_": "
"RTN","IBJPI4",251,0)
 S DIC("?")=" Please enter a partial payer name to select a payer."
"RTN","IBJPI4",252,0)
 S DIC("S")="I $$PYRFLTR^IBCNEUT6"
"RTN","IBJPI4",253,0)
 S DIC("W")="W $$DSPLINE^IBCNEUT6"
"RTN","IBJPI4",254,0)
 S PYRIEN=$G(^TMP($J,"IBJPI3-LIST",IBPOS))
"RTN","IBJPI4",255,0)
 ;
"RTN","IBJPI4",256,0)
 ; Set default if not adding
"RTN","IBJPI4",257,0)
 I PYRIEN,'$G(ADDFLG) S DIC("B")=PYRIEN
"RTN","IBJPI4",258,0)
 D ^DIC
"RTN","IBJPI4",259,0)
 Q +Y
"RTN","IBJPI4",260,0)
 ;
"RTN","IBJPI4",261,0)
EXIT ; Exit action
"RTN","IBJPI4",262,0)
 S VALMBCK="R"
"RTN","IBJPI4",263,0)
 ; If the list has been acted upon, prompt for save
"RTN","IBJPI4",264,0)
 I $D(^TMP($J,"IBJPI3-MODS")) D
"RTN","IBJPI4",265,0)
 . D EN^DDIOL("Unsaved changes exist!")
"RTN","IBJPI4",266,0)
 . D SAVE
"RTN","IBJPI4",267,0)
 ; Call Fast Exit at this point
"RTN","IBJPI4",268,0)
 D FASTEXIT^IBJU1
"RTN","IBJPI4",269,0)
 Q
"RTN","IBJPI4",270,0)
 ;
"RTN","IBJPI4",271,0)
 ;
"RTN","IBJPM")
0^40^B11425259
"RTN","IBJPM",1,0)
IBJPM ;ALB/MAF,ARH - IBSP MCCR PARAMETERS SCREEN ;14-DEC-1995
"RTN","IBJPM",2,0)
 ;;2.0;INTEGRATED BILLING;**39,137,184,271**;21-MAR-94
"RTN","IBJPM",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPM",4,0)
 ;
"RTN","IBJPM",5,0)
EN ; -- main entry point for JOINT INQUIRY PARAMETERS option
"RTN","IBJPM",6,0)
 D EN^VALM("IBJP MCCR PARAMETERS")
"RTN","IBJPM",7,0)
 Q
"RTN","IBJPM",8,0)
 ;
"RTN","IBJPM",9,0)
HDR ; -- header code
"RTN","IBJPM",10,0)
 S VALMHDR(1)="Display/Edit MCCR Site Parameters."
"RTN","IBJPM",11,0)
 S VALMHDR(2)="Only authorized persons may edit this data."
"RTN","IBJPM",12,0)
 Q
"RTN","IBJPM",13,0)
 ;
"RTN","IBJPM",14,0)
INIT ; -- init variables and list array
"RTN","IBJPM",15,0)
 K ^TMP("IBJPM",$J)
"RTN","IBJPM",16,0)
 D BLD
"RTN","IBJPM",17,0)
 Q
"RTN","IBJPM",18,0)
 ;
"RTN","IBJPM",19,0)
HELP ; -- help code
"RTN","IBJPM",20,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPM",21,0)
 Q
"RTN","IBJPM",22,0)
 ;
"RTN","IBJPM",23,0)
EXIT ; -- exit code
"RTN","IBJPM",24,0)
 K ^TMP("IBJPM",$J),IBFASTXT,VALMBCK
"RTN","IBJPM",25,0)
 D CLEAR^VALM1
"RTN","IBJPM",26,0)
 Q
"RTN","IBJPM",27,0)
 ;
"RTN","IBJPM",28,0)
BLD ; -- build screen array, no variables required for input
"RTN","IBJPM",29,0)
 N IBNC,IBTC,IBTW,IBSW,IBLN,IBGRPB,IBGRPE,IBLR
"RTN","IBJPM",30,0)
 S IBNC(1)=1,IBTW(1)=0,IBTC(1)=5,IBSW(1)=30,IBNC(2)=43,IBTW(2)=0,IBTC(2)=47,IBSW(2)=30
"RTN","IBJPM",31,0)
 ;
"RTN","IBJPM",32,0)
 S (VALMCNT,IBLN)=1,IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",33,0)
 ;
"RTN","IBJPM",34,0)
 ; - IB Site Parameters
"RTN","IBJPM",35,0)
 S IBLN=$$SETN("IB Site Parameters",IBLN,IBLR,1)
"RTN","IBJPM",36,0)
 S IBLN=$$SET("","Facility Definition",IBLN,IBLR)
"RTN","IBJPM",37,0)
 S IBLN=$$SET("","Mail Groups",IBLN,IBLR)
"RTN","IBJPM",38,0)
 S IBLN=$$SET("","Patient Billing",IBLN,IBLR)
"RTN","IBJPM",39,0)
 S IBLN=$$SET("","Third Party Billing",IBLN,IBLR)
"RTN","IBJPM",40,0)
 S IBLN=$$SET("","Provider Id",IBLN,IBLR)
"RTN","IBJPM",41,0)
 S IBLN=$$SET("","EDI Transmission",IBLN,IBLR)
"RTN","IBJPM",42,0)
 ;
"RTN","IBJPM",43,0)
 S IBLR=2,IBGRPE=IBLN,IBLN=IBGRPB
"RTN","IBJPM",44,0)
 ;
"RTN","IBJPM",45,0)
 ; - Claim Tracking Parameters
"RTN","IBJPM",46,0)
 S IBLN=$$SETN("Claims Tracking Parameters",IBLN,IBLR,1)
"RTN","IBJPM",47,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",48,0)
 S IBLN=$$SET("","Tracking Parameters",IBLN,IBLR)
"RTN","IBJPM",49,0)
 S IBLN=$$SET("","Random Sampling",IBLN,IBLR)
"RTN","IBJPM",50,0)
 ;
"RTN","IBJPM",51,0)
 S IBLN=$S(IBLN>IBGRPE:IBLN,1:IBGRPE),IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",52,0)
 ;
"RTN","IBJPM",53,0)
 ; - Automated Billing Parameters
"RTN","IBJPM",54,0)
 S IBLN=$$SETN("Third Party Auto Billing Parameters",IBLN,IBLR,1)
"RTN","IBJPM",55,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",56,0)
 S IBLN=$$SET("","Inpatient Admission",IBLN,IBLR)
"RTN","IBJPM",57,0)
 S IBLN=$$SET("","Outpatient Visit",IBLN,IBLR)
"RTN","IBJPM",58,0)
 S IBLN=$$SET("","Prescription Refill",IBLN,IBLR)
"RTN","IBJPM",59,0)
 ;
"RTN","IBJPM",60,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",61,0)
 S IBLR=2,IBLN=IBGRPB
"RTN","IBJPM",62,0)
 ;
"RTN","IBJPM",63,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",64,0)
 ; - IIV Parameters
"RTN","IBJPM",65,0)
 S IBLN=$$SETN("Insurance Id and Verification",IBLN,IBLR,1)
"RTN","IBJPM",66,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",67,0)
 S IBLN=$$SET("","Batch Extracts Parameters",IBLN,IBLR)
"RTN","IBJPM",68,0)
 S IBLN=$$SET("","Patients Without Insurance",IBLN,IBLR)
"RTN","IBJPM",69,0)
 S IBLN=$$SET("","Most Popular Payers",IBLN,IBLR)
"RTN","IBJPM",70,0)
 ;
"RTN","IBJPM",71,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)-1
"RTN","IBJPM",72,0)
 Q
"RTN","IBJPM",73,0)
 ;
"RTN","IBJPM",74,0)
SET(TTL,DATA,LN,LR) ;
"RTN","IBJPM",75,0)
 N IBY
"RTN","IBJPM",76,0)
 S IBY=$J(TTL,IBTW(LR))_DATA D SET1(IBY,LN,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJPM",77,0)
 S LN=LN+1
"RTN","IBJPM",78,0)
 Q LN
"RTN","IBJPM",79,0)
 ;
"RTN","IBJPM",80,0)
SETN(TTL,LN,LR,RV) ;
"RTN","IBJPM",81,0)
 N IBY
"RTN","IBJPM",82,0)
 S IBY=" "_TTL_" " D SET1(IBY,LN,IBNC(LR),$L(IBY),$G(RV))
"RTN","IBJPM",83,0)
 S LN=LN+1
"RTN","IBJPM",84,0)
 Q LN
"RTN","IBJPM",85,0)
 ;
"RTN","IBJPM",86,0)
SET1(STR,LN,COL,WD,RV) ; set up TMP array with screen data
"RTN","IBJPM",87,0)
 N IBX S IBX=$G(^TMP("IBJPM",$J,LN,0))
"RTN","IBJPM",88,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJPM",89,0)
 D SET^VALM10(LN,IBX) I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IOINHI,IOINORM)
"RTN","IBJPM",90,0)
 Q
"RTN","IBY271PR")
0^^B1144127
"RTN","IBY271PR",1,0)
IBY271PR ;DAOU/ALA - Pre-Installation Program ;30-APR-2004
"RTN","IBY271PR",2,0)
 ;;2.0;INTEGRATED BILLING;**271**;21-MAR-94
"RTN","IBY271PR",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBY271PR",4,0)
 ;
"RTN","IBY271PR",5,0)
 ;**Program Description**
"RTN","IBY271PR",6,0)
 ; This is the KIDs pre-installation program
"RTN","IBY271PR",7,0)
 ;
"RTN","IBY271PR",8,0)
EN ; Entry Point
"RTN","IBY271PR",9,0)
 D STAT,MP,MPDT
"RTN","IBY271PR",10,0)
EX ;
"RTN","IBY271PR",11,0)
 Q
"RTN","IBY271PR",12,0)
 ;
"RTN","IBY271PR",13,0)
STAT ; Delete IIV Status File - KIDS will reload it
"RTN","IBY271PR",14,0)
 ;
"RTN","IBY271PR",15,0)
 N DA,DIK
"RTN","IBY271PR",16,0)
 S DA=0,DIK="^IBE(365.15,"
"RTN","IBY271PR",17,0)
 F  S DA=$O(^IBE(365.15,DA)) Q:'DA  D ^DIK
"RTN","IBY271PR",18,0)
 Q
"RTN","IBY271PR",19,0)
 ;
"RTN","IBY271PR",20,0)
MP ; Delete Most Popular Insurance entries.
"RTN","IBY271PR",21,0)
 ; Will be replaced by manually entered Most Popular payers.
"RTN","IBY271PR",22,0)
 N DA,DIK
"RTN","IBY271PR",23,0)
 S DIK="^IBE(350.9,1,51.18,",DA(1)=1,DA=0
"RTN","IBY271PR",24,0)
 F  S DA=$O(^IBE(350.9,1,51.18,DA)) Q:'DA  D ^DIK
"RTN","IBY271PR",25,0)
 ;
"RTN","IBY271PR",26,0)
 ; Delete MOST POPULAR LAST SAVE DATE (#350.9,51.21) since Most
"RTN","IBY271PR",27,0)
 ; Popular Insurance entries were just deleted.
"RTN","IBY271PR",28,0)
 ;
"RTN","IBY271PR",29,0)
 NEW DIE,DR,D,D0,DIC,DQ,X,DI,%
"RTN","IBY271PR",30,0)
 S DA=1,DIE="^IBE(350.9,",DR="51.21///@"
"RTN","IBY271PR",31,0)
 D ^DIE
"RTN","IBY271PR",32,0)
 Q
"RTN","IBY271PR",33,0)
MPDT ; Delete Most Popular Compile dates - obsolete as of this patch
"RTN","IBY271PR",34,0)
 ; POPULAR INSUR CO. FROM DATE (#350.9,51.11)
"RTN","IBY271PR",35,0)
 ; POPULAR INSUR CO. THRU DATE (#350.9,51.12) 
"RTN","IBY271PR",36,0)
 ;
"RTN","IBY271PR",37,0)
 NEW DIE,DA,DR,D,D0,DIC,DQ,X,DI,%
"RTN","IBY271PR",38,0)
 S DA=1,DIE="^IBE(350.9,"
"RTN","IBY271PR",39,0)
 S DR="51.11///@;51.12///@"
"RTN","IBY271PR",40,0)
 D ^DIE
"RTN","IBY271PR",41,0)
 Q
"RTN","IBY271PS")
0^^B18609241
"RTN","IBY271PS",1,0)
IBY271PS ;DAOU/ALA - Post Installation Program ;30-APR-2004
"RTN","IBY271PS",2,0)
 ;;2.0;INTEGRATED BILLING;**271**;21-MAR-94
"RTN","IBY271PS",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBY271PS",4,0)
 ;
"RTN","IBY271PS",5,0)
 ;**Program Description**
"RTN","IBY271PS",6,0)
 ;  This is the KIDs second post-installation program
"RTN","IBY271PS",7,0)
 ;
"RTN","IBY271PS",8,0)
EN ;  Entry point
"RTN","IBY271PS",9,0)
 D RETRY
"RTN","IBY271PS",10,0)
 D SITEP
"RTN","IBY271PS",11,0)
 D MP
"RTN","IBY271PS",12,0)
EX Q
"RTN","IBY271PS",13,0)
 ;
"RTN","IBY271PS",14,0)
RETRY ; For all entries in the IIV Transmission Queue that have received a
"RTN","IBY271PS",15,0)
 ; response thru IIV, set remaining retries (or original if response
"RTN","IBY271PS",16,0)
 ; not received for it) to Communication Failure
"RTN","IBY271PS",17,0)
 ; we SHOULD loop thru and confirm that at least one has response rcvd
"RTN","IBY271PS",18,0)
 ; if it has not, send MailMan message to Mail Group in Site Parameters
"RTN","IBY271PS",19,0)
 ; instructing them to log a NOIS identifying that IIV Transmission Queue
"RTN","IBY271PS",20,0)
 ; entry x is inconsistent with its associated responses.  As a result
"RTN","IBY271PS",21,0)
 ; the status of this entry could not be adjusted.
"RTN","IBY271PS",22,0)
 ; A mail message should only be sent on the first occurrance of the
"RTN","IBY271PS",23,0)
 ; problem.
"RTN","IBY271PS",24,0)
 N TIEN,ONCE
"RTN","IBY271PS",25,0)
 S TIEN="",ONCE=0
"RTN","IBY271PS",26,0)
 F  S TIEN=$O(^IBCN(365.1,"AC",3,TIEN)) Q:'TIEN  D
"RTN","IBY271PS",27,0)
 . I '$$CHK(TIEN) Q:ONCE  D MMAN(TIEN)  S ONCE=1 Q
"RTN","IBY271PS",28,0)
 . D RSTA^IBCNEUT7(TIEN)
"RTN","IBY271PS",29,0)
 Q
"RTN","IBY271PS",30,0)
 ;
"RTN","IBY271PS",31,0)
CHK(TQ) ; Confirm that at least one response has a status of 3 (response rcvd)
"RTN","IBY271PS",32,0)
 ;
"RTN","IBY271PS",33,0)
 N IEN,RIEN,FLG
"RTN","IBY271PS",34,0)
 S IEN=0,FLG=0 D
"RTN","IBY271PS",35,0)
 . F  S IEN=$O(^IBCN(365.1,TQ,2,IEN)) Q:'IEN  S RIEN=$P($G(^(IEN,0)),U,3) I RIEN,$P($G(^IBCN(365,RIEN,0)),"^",6)=3 S FLG=1 Q
"RTN","IBY271PS",36,0)
 Q FLG
"RTN","IBY271PS",37,0)
 ;
"RTN","IBY271PS",38,0)
MMAN(TQ) ; Send MailMan message identifying that there is a problem
"RTN","IBY271PS",39,0)
 ; and recommending that a NOIS be created
"RTN","IBY271PS",40,0)
 N SUBJECT,MSG
"RTN","IBY271PS",41,0)
 S SUBJECT="IIV Responses for an IIV Transmission Queue entry are inconsistent."
"RTN","IBY271PS",42,0)
 S MSG(1)="IIV Transmission Queue entry "_TIEN_" has a status of Response Received."
"RTN","IBY271PS",43,0)
 S MSG(2)="None of the associated responses have this status."
"RTN","IBY271PS",44,0)
 S MSG(3)="Please create a NOIS specifying that this Transmission Queue entry"
"RTN","IBY271PS",45,0)
 S MSG(4)="is inconsistent with its associated responses and, as a result,"
"RTN","IBY271PS",46,0)
 S MSG(5)="its status could not be adjusted."
"RTN","IBY271PS",47,0)
 D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),SUBJECT,"MSG(",1)
"RTN","IBY271PS",48,0)
 Q
"RTN","IBY271PS",49,0)
SITEP ; Adjust site parameters to hard coded values
"RTN","IBY271PS",50,0)
 N IEN,EIEN,EXT
"RTN","IBY271PS",51,0)
 S IEN=$O(^IBE(350.9,0)) ; assume that there is an entry in this file
"RTN","IBY271PS",52,0)
 I $D(^IBE(350.9,IEN,51)) S $P(^(51),U,5)=3,$P(^(51),U,6)=1,$P(^(51),U,7)=0,$P(^(51),U,23)=1 ; comm. timeout, # retries; timeout MailMan; 2ary insurance
"RTN","IBY271PS",53,0)
 ; Get IENs for appt and non-ver extracts and set supp buff on
"RTN","IBY271PS",54,0)
 F EXT=2,3 S EIEN=$O(^IBE(350.9,IEN,51.17,"B",EXT,"")) I EIEN D
"RTN","IBY271PS",55,0)
 . I $D(^IBE(350.9,IEN,51.17,EIEN,0)) S $P(^(0),U,6)=1 ; Suppress buffer
"RTN","IBY271PS",56,0)
 Q
"RTN","IBY271PS",57,0)
 ;
"RTN","IBY271PS",58,0)
MP ; Most Popular
"RTN","IBY271PS",59,0)
 ; Send MailMan message to notify sites that Most Popular Ins fnality
"RTN","IBY271PS",60,0)
 ; has changed with this patch and that the old values have been deleted
"RTN","IBY271PS",61,0)
 N SUBJECT,MSG
"RTN","IBY271PS",62,0)
 S SUBJECT="Most Popular Insurance Site Parameter"
"RTN","IBY271PS",63,0)
 S MSG(1)="As part of patch IB*2.0*271, the Most Popular Insurance"
"RTN","IBY271PS",64,0)
 S MSG(2)="functionality, accessed by the MP action of the IIV Site Parameters,"
"RTN","IBY271PS",65,0)
 S MSG(3)="has been modified.",MSG(4)=""
"RTN","IBY271PS",66,0)
 S MSG(5)="Prior to this patch, the Most Popular Insurance Companies were"
"RTN","IBY271PS",67,0)
 S MSG(6)="automatically identified based on the number of authorized bills"
"RTN","IBY271PS",68,0)
 S MSG(7)="created.  IB*2.0*271 has changed two aspects of the functionality."
"RTN","IBY271PS",69,0)
 S MSG(8)="The list will now contain payers rather than insurance companies."
"RTN","IBY271PS",70,0)
 S MSG(9)="In addition, these payers will be manually entered by each site."
"RTN","IBY271PS",71,0)
 S MSG(10)="As a result of these changes, the prior values of this list have"
"RTN","IBY271PS",72,0)
 S MSG(11)="been deleted.  If your site has elected to use this functionality,"
"RTN","IBY271PS",73,0)
 S MSG(12)="please update the table with the payers that are most commonly"
"RTN","IBY271PS",74,0)
 S MSG(13)="used in your facility and who are nationally active for IIV."
"RTN","IBY271PS",75,0)
 S MSG(14)=""
"RTN","IBY271PS",76,0)
 S MSG(15)="Please select option, ""MCCR SITE PARAMETER DISPLAY/EDIT"". "
"RTN","IBY271PS",77,0)
 S MSG(16)="Select IV for Insurance Id and Verification."
"RTN","IBY271PS",78,0)
 S MSG(17)="Select MP for Most Popular Payers within the IIV parameters to "
"RTN","IBY271PS",79,0)
 S MSG(18)="populate the list."
"RTN","IBY271PS",80,0)
 D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),SUBJECT,"MSG(",1)
"RTN","IBY271PS",81,0)
 Q
"RTN","IBY271PS",82,0)
 ;
"SEC","^DIC",365.15,365.15,0,"AUDIT")

"SEC","^DIC",365.15,365.15,0,"DD")
@
"SEC","^DIC",365.15,365.15,0,"DEL")
@
"SEC","^DIC",365.15,365.15,0,"LAYGO")
@
"SEC","^DIC",365.15,365.15,0,"RD")

"SEC","^DIC",365.15,365.15,0,"WR")

"UP",350.9,350.9003,-1)
350.9^51.18
"UP",350.9,350.9003,0)
350.9003
"UP",365,365.02,-1)
365^2
"UP",365,365.02,0)
365.02
"VER")
8.0^22.0
"^DD",350.9,350.9,51.09,0)
INQUIRE POPULAR PAYERS^S^1:YES;0:NO;^51;9^Q
"^DD",350.9,350.9,51.09,3)
Enter 'Yes' if the most popular payers are to be queried if no active insurance is found for a patient.
"^DD",350.9,350.9,51.09,21,0)
^^5^5^3031215^
"^DD",350.9,350.9,51.09,21,1,0)
This field guides both the No Insurance data extract and the
"^DD",350.9,350.9,51.09,21,2,0)
Appointment data extract to attempt to request information for
"^DD",350.9,350.9,51.09,21,3,0)
a patient, who has no previous insurance and/or no active
"^DD",350.9,350.9,51.09,21,4,0)
insurance in VISTA, based upon the list of Most Popular 
"^DD",350.9,350.9,51.09,21,5,0)
Payers.
"^DD",350.9,350.9,51.09,"DT")
3031215
"^DD",350.9,350.9,51.1,0)
NO. POPULAR PAYERS^NJ2,0^^51;10^K:+X'=X!(X>10)!(X<1)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,51.1,3)
Enter the number of popular payers to query. Enter a number between 1 and 10.
"^DD",350.9,350.9,51.1,21,0)
^^2^2^3031215^
"^DD",350.9,350.9,51.1,21,1,0)
This field is the number of the most popular payers that should
"^DD",350.9,350.9,51.1,21,2,0)
be queried if the Inquire Popular Payers parameter is set to 'Yes'.
"^DD",350.9,350.9,51.1,"DT")
3031215
"^DD",350.9,350.9,51.11,0)
POPULAR INSUR CO. FROM DATE^D^^51;11^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",350.9,350.9,51.11,3)
Enter the date from which popular insurance companies will be selected.
"^DD",350.9,350.9,51.11,21,0)
^^3^3^3031215^
"^DD",350.9,350.9,51.11,21,1,0)
This field is the date that the calculation of the Most Popular
"^DD",350.9,350.9,51.11,21,2,0)
Insurance Companies starts with when searching through
"^DD",350.9,350.9,51.11,21,3,0)
the Bill/Claims File (#399).  *** OBSOLETE - 12/15/2003 ***
"^DD",350.9,350.9,51.11,"DT")
3020605
"^DD",350.9,350.9,51.12,0)
POPULAR INSUR CO. THRU DATE^D^^51;12^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",350.9,350.9,51.12,3)
Enter the date through which popular insurance companies will be selected
"^DD",350.9,350.9,51.12,21,0)
^^3^3^3031215^
"^DD",350.9,350.9,51.12,21,1,0)
This field is the date that the calculation of the Most Popular
"^DD",350.9,350.9,51.12,21,2,0)
Insurance Companies ends with when searching through
"^DD",350.9,350.9,51.12,21,3,0)
the Bill/Claims File (#399). *** OBSOLETE - 12/15/2003 ***
"^DD",350.9,350.9,51.12,"DT")
3020605
"^DD",350.9,350.9,51.18,0)
POPULAR PAYERS^350.9003P^^51.18;0
"^DD",350.9,350.9,51.18,"DT")
3031215
"^DD",350.9,350.9,51.2,0)
FAILURE MAILMAN MSG^S^1:YES;0:NO;^51;20^Q
"^DD",350.9,350.9,51.2,3)
Enter 'Yes' if a MailMan message should be generated when IIV is unable to electronically confirm the patient's insurance information due to a communications problem.
"^DD",350.9,350.9,51.2,21,0)
^.001^3^3^3040503^^^^
"^DD",350.9,350.9,51.2,21,1,0)
This field allows the site to send a MailMan message for each 
"^DD",350.9,350.9,51.2,21,2,0)
communication failure.  A communication failure is defined as
"^DD",350.9,350.9,51.2,21,3,0)
having exhausted all retries.
"^DD",350.9,350.9,51.2,"DT")
3020820
"^DD",350.9,350.9,51.21,0)
MOST POPULAR LAST SAVE DATE^D^^51;21^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",350.9,350.9,51.21,1,0)
^.1
"^DD",350.9,350.9,51.21,1,1,0)
^^TRIGGER^350.9^51.24
"^DD",350.9,350.9,51.21,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBE(350.9,D0,51)):^(51),1:"") S X=$P(Y(1),U,24),X=X S DIU=X K Y S X=DIV S X=DUZ S DIH=$G(^IBE(350.9,DIV(0),51)),DIV=X S $P(^(51),U,24)=DIV,DIH=350.9,DIG=51.24 D ^DICR
"^DD",350.9,350.9,51.21,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBE(350.9,D0,51)):^(51),1:"") S X=$P(Y(1),U,24),X=X S DIU=X K Y S X=DIV S X=DUZ S DIH=$G(^IBE(350.9,DIV(0),51)),DIV=X S $P(^(51),U,24)=DIV,DIH=350.9,DIG=51.24 D ^DICR
"^DD",350.9,350.9,51.21,1,1,"CREATE VALUE")
S X=DUZ
"^DD",350.9,350.9,51.21,1,1,"DELETE VALUE")
S X=DUZ
"^DD",350.9,350.9,51.21,1,1,"FIELD")
#51.24
"^DD",350.9,350.9,51.21,3)
The date/time when the Most Popular Payer list was last saved.
"^DD",350.9,350.9,51.21,21,0)
^.001^2^2^3040520^^^
"^DD",350.9,350.9,51.21,21,1,0)
This is the date/time on which the Most Popular Payer list was
"^DD",350.9,350.9,51.21,21,2,0)
last saved.  This field is not available for edit by users.
"^DD",350.9,350.9,51.21,"DT")
3040520
"^DD",350.9,350.9,51.24,0)
MOST POPULAR LAST SAVED BY^RP200'^VA(200,^51;24^Q
"^DD",350.9,350.9,51.24,3)
This is the user who saved the current 'Most Popular Payer' list.
"^DD",350.9,350.9,51.24,5,1,0)
350.9^51.21^1
"^DD",350.9,350.9,51.24,21,0)
^^3^3^3040520^
"^DD",350.9,350.9,51.24,21,1,0)
This is the user who last editted and saved the Most Popular Payer list.  
"^DD",350.9,350.9,51.24,21,2,0)
If the field MOST POPULAR LAST SAVE DATE is deleted, this field will be
"^DD",350.9,350.9,51.24,21,3,0)
the user who deleted the date.
"^DD",350.9,350.9,51.24,"DT")
3040623
"^DD",350.9,350.9003,0)
POPULAR PAYERS SUB-FIELD^^.01^1
"^DD",350.9,350.9003,0,"NM","POPULAR PAYERS")

"^DD",350.9,350.9003,.01,0)
POPULAR PAYER^MP365.12'^IBE(365.12,^0;1^Q
"^DD",350.9,350.9003,.01,1,0)
^.1
"^DD",350.9,350.9003,.01,1,1,0)
350.9003^B
"^DD",350.9,350.9003,.01,1,1,1)
S ^IBE(350.9,DA(1),51.18,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.9003,.01,1,1,2)
K ^IBE(350.9,DA(1),51.18,"B",$E(X,1,30),DA)
"^DD",350.9,350.9003,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",350.9,350.9003,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",350.9,350.9003,.01,3)
Select a Payer
"^DD",350.9,350.9003,.01,21,0)
^.001^2^2^3040507^^
"^DD",350.9,350.9003,.01,21,1,0)
This field identifies the most popular payers based upon user
"^DD",350.9,350.9003,.01,21,2,0)
selection.
"^DD",350.9,350.9003,.01,"DT")
3031215
"^DD",365,365.02,.08,0)
MONETARY AMOUNT^NJ12,2^^0;8^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999999)!(X<0) X
"^DD",365,365.02,.08,3)
Type a Dollar Amount between 0 and 999999999, 2 Decimal Digits
"^DD",365,365.02,.08,21,0)
^.001^3^3^3040422^^^^
"^DD",365,365.02,.08,21,1,0)
This field is populated if eligibility or benefit must be
"^DD",365,365.02,.08,21,2,0)
qualified by a monetary amount. It corresponds to X.12 271 EB07
"^DD",365,365.02,.08,21,3,0)
data element.
"^DD",365,365.02,.08,"DT")
3040422
"^DD",365.15,365.15,0)
FIELD^^2^5
"^DD",365.15,365.15,0,"DDA")
N
"^DD",365.15,365.15,0,"DT")
3040607
"^DD",365.15,365.15,0,"IX","B",365.15,.01)

"^DD",365.15,365.15,0,"NM","IIV STATUS TABLE")

"^DD",365.15,365.15,0,"PT",355.33,.12)

"^DD",365.15,365.15,0,"VRPK")
IB
"^DD",365.15,365.15,.01,0)
CODE^RFO^^0;1^K:$L(X)>5!($L(X)<2) X
"^DD",365.15,365.15,.01,1,0)
^.1
"^DD",365.15,365.15,.01,1,1,0)
365.15^B
"^DD",365.15,365.15,.01,1,1,1)
S ^IBE(365.15,"B",$E(X,1,30),DA)=""
"^DD",365.15,365.15,.01,1,1,2)
K ^IBE(365.15,"B",$E(X,1,30),DA)
"^DD",365.15,365.15,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.15,365.15,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.15,365.15,.01,2)
S Y(0)=Y S Y=$S($E(Y,1)="D":"Response Received, Inactive Policy",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Active Policy",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",$E(Y,1)="U":"Response Received, Ambiguous Answer",1:"")
"^DD",365.15,365.15,.01,2.1)
S Y=$S($E(Y,1)="D":"Response Received, Inactive Policy",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Active Policy",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",$E(Y,1)="U":"Response Received, Ambiguous Answer",1:"")
"^DD",365.15,365.15,.01,3)
Answer must be 2-5 characters in length
"^DD",365.15,365.15,.01,21,0)
^.001^5^5^3040430^^^^
"^DD",365.15,365.15,.01,21,1,0)
This is the internal representation of a given IIV status which may
"^DD",365.15,365.15,.01,21,2,0)
be found in the Insurance Buffer application.  This code takes
"^DD",365.15,365.15,.01,21,3,0)
into account that although several IIV statuses may use the same symbol 
"^DD",365.15,365.15,.01,21,4,0)
in the IIV status column in the Insurance Buffer list, each IIV status 
"^DD",365.15,365.15,.01,21,5,0)
may have a different meaning.
"^DD",365.15,365.15,.01,"DT")
3040430
"^DD",365.15,365.15,.02,0)
ASCII VALUE FOR IIV STATUS^NJ3,0^^0;2^K:+X'=X!(X>126)!(X<32)!(X?.E1"."1N.N) X
"^DD",365.15,365.15,.02,3)
Type a Number between 32 and 126, 0 Decimal Digits
"^DD",365.15,365.15,.02,21,0)
^.001^5^5^3040430^^^
"^DD",365.15,365.15,.02,21,1,0)
This field is the ASCII number representation for the character
"^DD",365.15,365.15,.02,21,2,0)
which should be displayed in the IIV status column in the insurance 
"^DD",365.15,365.15,.02,21,3,0)
buffer list for this entry.  The ASCII value is being stored instead of 
"^DD",365.15,365.15,.02,21,4,0)
the character itself because of the issues involved with storing the "?" 
"^DD",365.15,365.15,.02,21,5,0)
character as a valid symbol.
"^DD",365.15,365.15,.02,"DT")
3040227
"^DD",365.15,365.15,.03,0)
EXPAND ENTRY ACTION^S^1:EE Update is Allowed;0:EE Update is Not Allowed;^0;3^Q
"^DD",365.15,365.15,.03,3)
Can the Expand Entry action overwrite this IIV status?
"^DD",365.15,365.15,.03,21,0)
^^6^6^3050208^
"^DD",365.15,365.15,.03,21,1,0)
This field will determine whether or not the IIV status associated with
"^DD",365.15,365.15,.03,21,2,0)
a buffer entry may get overwritten by the Expand Entry action in
"^DD",365.15,365.15,.03,21,3,0)
the Insurance Buffer application.  Some IIV statuses should stay as they
"^DD",365.15,365.15,.03,21,4,0)
are and not get updated by Expand Entry and other symbols should
"^DD",365.15,365.15,.03,21,5,0)
get updated, so the user knows the current status of the buffer entry
"^DD",365.15,365.15,.03,21,6,0)
with regard to the IIV process.
"^DD",365.15,365.15,.03,"DT")
3030409
"^DD",365.15,365.15,1,0)
DESCRIPTION^365.152^^1;0
"^DD",365.15,365.15,1,21,0)
^.001^3^3^3040812^^^^
"^DD",365.15,365.15,1,21,1,0)
This is the explanation of what the IIV status means.  This
"^DD",365.15,365.15,1,21,2,0)
description will appear in the Expand Entry action of the 
"^DD",365.15,365.15,1,21,3,0)
Insurance Buffer application.
"^DD",365.15,365.15,2,0)
CORRECTIVE ACTION^365.17^^2;0
"^DD",365.15,365.15,2,21,0)
^^3^3^3040812^
"^DD",365.15,365.15,2,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.15,2,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance 
"^DD",365.15,365.15,2,21,3,0)
Buffer.
"^DD",365.15,365.15,2,"DT")
3040607
"^DD",365.15,365.152,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",365.15,365.152,0,"DT")
3020603
"^DD",365.15,365.152,0,"NM","DESCRIPTION")

"^DD",365.15,365.152,0,"UP")
365.15
"^DD",365.15,365.152,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",365.15,365.152,.01,3)
Enter the explanation for this IIV status.
"^DD",365.15,365.152,.01,21,0)
^.001^3^3^3040812^^
"^DD",365.15,365.152,.01,21,1,0)
This is the explanation of what the IIV status means.  This description
"^DD",365.15,365.152,.01,21,2,0)
will appear in the Expand Entry action of the Insurance Buffer
"^DD",365.15,365.152,.01,21,3,0)
application.
"^DD",365.15,365.152,.01,"DT")
3040812
"^DD",365.15,365.17,0)
CORRECTIVE ACTION SUB-FIELD^^.01^1
"^DD",365.15,365.17,0,"DT")
3040607
"^DD",365.15,365.17,0,"NM","CORRECTIVE ACTION")

"^DD",365.15,365.17,0,"UP")
365.15
"^DD",365.15,365.17,.01,0)
CORRECTIVE ACTION^W^^0;1
"^DD",365.15,365.17,.01,3)
Enter the steps to follow to correct this issue in order to electronically confirm this insurance policy using IIV.
"^DD",365.15,365.17,.01,21,0)
^^3^3^3040812^
"^DD",365.15,365.17,.01,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.17,.01,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance
"^DD",365.15,365.17,.01,21,3,0)
Buffer.
"^DD",365.15,365.17,.01,"DT")
3040812
"^DIC",365.15,365.15,0)
IIV STATUS TABLE^365.15
"^DIC",365.15,365.15,0,"GL")
^IBE(365.15,
"^DIC",365.15,365.15,"%",0)
^1.005^^0
"^DIC",365.15,365.15,"%D",0)
^^7^7^3030414^
"^DIC",365.15,365.15,"%D",1,0)
This file contains the various IIV statuses for entries in the Insurance 
"^DIC",365.15,365.15,"%D",2,0)
Buffer.  Also included are the symbols that should appear in the IIV 
"^DIC",365.15,365.15,"%D",3,0)
status column in the Insurance Buffer list, and a more detailed
"^DIC",365.15,365.15,"%D",4,0)
description of the status that is used in the Expand Entry option in the 
"^DIC",365.15,365.15,"%D",5,0)
Insurance Buffer.
"^DIC",365.15,365.15,"%D",6,0)
 
"^DIC",365.15,365.15,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.15,"B","IIV STATUS TABLE",365.15)

**END**
**END**
