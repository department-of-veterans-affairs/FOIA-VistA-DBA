Released XU*8*439 SEQ #381
Extracted from mail message
**KIDS**:XU*8.0*439^

**INSTALL NAME**
XU*8.0*439
"BLD",978,0)
XU*8.0*439^KERNEL^0^3070524^y
"BLD",978,1,0)
^^2^2^3070131^
"BLD",978,1,1,0)
Patch XU*8*439  MODIFICATION OF BSE TO USE HTTP/1.0
"BLD",978,1,2,0)

"BLD",978,4,0)
^9.64PA^^
"BLD",978,6.3)
12
"BLD",978,"KRN",0)
^9.67PA^779.2^20
"BLD",978,"KRN",.4,0)
.4
"BLD",978,"KRN",.401,0)
.401
"BLD",978,"KRN",.402,0)
.402
"BLD",978,"KRN",.403,0)
.403
"BLD",978,"KRN",.5,0)
.5
"BLD",978,"KRN",.84,0)
.84
"BLD",978,"KRN",3.6,0)
3.6
"BLD",978,"KRN",3.8,0)
3.8
"BLD",978,"KRN",9.2,0)
9.2
"BLD",978,"KRN",9.8,0)
9.8
"BLD",978,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",978,"KRN",9.8,"NM",1,0)
XUSBSE2^^0^B10222984
"BLD",978,"KRN",9.8,"NM",2,0)
XUSBSE1^^0^B25570327
"BLD",978,"KRN",9.8,"NM","B","XUSBSE1",2)

"BLD",978,"KRN",9.8,"NM","B","XUSBSE2",1)

"BLD",978,"KRN",19,0)
19
"BLD",978,"KRN",19.1,0)
19.1
"BLD",978,"KRN",101,0)
101
"BLD",978,"KRN",409.61,0)
409.61
"BLD",978,"KRN",771,0)
771
"BLD",978,"KRN",779.2,0)
779.2
"BLD",978,"KRN",870,0)
870
"BLD",978,"KRN",8989.51,0)
8989.51
"BLD",978,"KRN",8989.52,0)
8989.52
"BLD",978,"KRN",8994,0)
8994
"BLD",978,"KRN","B",.4,.4)

"BLD",978,"KRN","B",.401,.401)

"BLD",978,"KRN","B",.402,.402)

"BLD",978,"KRN","B",.403,.403)

"BLD",978,"KRN","B",.5,.5)

"BLD",978,"KRN","B",.84,.84)

"BLD",978,"KRN","B",3.6,3.6)

"BLD",978,"KRN","B",3.8,3.8)

"BLD",978,"KRN","B",9.2,9.2)

"BLD",978,"KRN","B",9.8,9.8)

"BLD",978,"KRN","B",19,19)

"BLD",978,"KRN","B",19.1,19.1)

"BLD",978,"KRN","B",101,101)

"BLD",978,"KRN","B",409.61,409.61)

"BLD",978,"KRN","B",771,771)

"BLD",978,"KRN","B",779.2,779.2)

"BLD",978,"KRN","B",870,870)

"BLD",978,"KRN","B",8989.51,8989.51)

"BLD",978,"KRN","B",8989.52,8989.52)

"BLD",978,"KRN","B",8994,8994)

"BLD",978,"QUES",0)
^9.62^^
"BLD",978,"REQB",0)
^9.611^1^1
"BLD",978,"REQB",1,0)
XU*8.0*404^2
"BLD",978,"REQB","B","XU*8.0*404",1)

"MBREQ")
0
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^^0
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3051215^2970507^.5
"PKG",3,22,1,"PAH",1,0)
439^3070524
"PKG",3,22,1,"PAH",1,1,0)
^^2^2^3070524
"PKG",3,22,1,"PAH",1,1,1,0)
Patch XU*8*439  MODIFICATION OF BSE TO USE HTTP/1.0
"PKG",3,22,1,"PAH",1,1,2,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","XUSBSE1")
0^2^B25570327^B24454678
"RTN","XUSBSE1",1,0)
XUSBSE1 ;JLI/OAK-OIFO - MODIFICATIONS FOR BSE ;3/19/07  16:27
"RTN","XUSBSE1",2,0)
 ;;8.0;KERNEL;**404,439**;Jul 10, 1995;Build 12
"RTN","XUSBSE1",3,0)
 ; SETVISIT - returns a BSE token
"RTN","XUSBSE1",4,0)
SETVISIT(RES) ; .RPC
"RTN","XUSBSE1",5,0)
 N TOKEN
"RTN","XUSBSE1",6,0)
 S TOKEN=$$HANDLE^XUSRB4("XUSBSE",1)
"RTN","XUSBSE1",7,0)
 S ^XTMP(TOKEN,1)=$$GET^XUESSO1(DUZ)
"RTN","XUSBSE1",8,0)
 S RES=TOKEN
"RTN","XUSBSE1",9,0)
 Q
"RTN","XUSBSE1",10,0)
 ;
"RTN","XUSBSE1",11,0)
 ; GETVISIT - returns demographics for user indicated by TOKEN
"RTN","XUSBSE1",12,0)
 ;   output - RES - passed by reference, contains global location on return
"RTN","XUSBSE1",13,0)
 ;   input  - TOKEN - token value returned by remote site
"RTN","XUSBSE1",14,0)
GETVISIT(RES,TOKEN) ; .RPC
"RTN","XUSBSE1",15,0)
 S RES=$G(^XTMP(TOKEN,1))
"RTN","XUSBSE1",16,0)
 K ^XTMP(TOKEN)
"RTN","XUSBSE1",17,0)
 Q
"RTN","XUSBSE1",18,0)
 ;
"RTN","XUSBSE1",19,0)
RPUT(RET,VALUE) ;Put Token and data on new system
"RTN","XUSBSE1",20,0)
 S RET=1 ;Needs more work.
"RTN","XUSBSE1",21,0)
 Q
"RTN","XUSBSE1",22,0)
 ;
"RTN","XUSBSE1",23,0)
OLDCAPRI(XWBUSRNM) ;The OLD CAPRI code, Remove next patch
"RTN","XUSBSE1",24,0)
 ; Return 1 if a valid user, else 0.
"RTN","XUSBSE1",25,0)
 N XVAL,XUCNTXT
"RTN","XUSBSE1",26,0)
 S XVAL=$$PUT^XUESSO1($P(XWBUSRNM,U,3,99)) ; Sign in as Visitor
"RTN","XUSBSE1",27,0)
 I XVAL D
"RTN","XUSBSE1",28,0)
 . S XUCNTXT=$$FIND1^DIC(19,"","X","DVBA CAPRI GUI")
"RTN","XUSBSE1",29,0)
 . D SETCNTXT(XUCNTXT)
"RTN","XUSBSE1",30,0)
 Q $S(XVAL>0:1,1:0)
"RTN","XUSBSE1",31,0)
 ;
"RTN","XUSBSE1",32,0)
 ; CHKUSER - determines if a BSE sign-on is valid
"RTN","XUSBSE1",33,0)
 ;   INPUTSTR - input - String of characters from client
"RTN","XUSBSE1",34,0)
 ;   return value - 1 if a valid user, else 0
"RTN","XUSBSE1",35,0)
 ; called from XUSRB
"RTN","XUSBSE1",36,0)
CHKUSER(INPUTSTR) ;
"RTN","XUSBSE1",37,0)
 N XUCODE,XUENTRY,XUSTR,XUTOKEN
"RTN","XUSBSE1",38,0)
 I +INPUTSTR=-31,INPUTSTR["DVBA_",$$OLDCAPRI(INPUTSTR) Q 1
"RTN","XUSBSE1",39,0)
 I +INPUTSTR'=-35 Q 0
"RTN","XUSBSE1",40,0)
 S INPUTSTR=$P(INPUTSTR,U,2,99)
"RTN","XUSBSE1",41,0)
 K ^TMP("XUSBSE1",$J)
"RTN","XUSBSE1",42,0)
 S XUCODE=$$DECRYP^XUSRB1(INPUTSTR) ;TMP
"RTN","XUSBSE1",43,0)
 S XUCODE=$$EN^XUSHSH($P(XUCODE,U))
"RTN","XUSBSE1",44,0)
 S XUENTRY=$$FIND1^DIC(8994.5,"","X",XUCODE,"ACODE") D:XUENTRY>0
"RTN","XUSBSE1",45,0)
 . S XUTOKEN=$P($$DECRYP^XUSRB1(INPUTSTR),U,2)
"RTN","XUSBSE1",46,0)
 . S XUSTR=$P($$DECRYP^XUSRB1(INPUTSTR),U,3,4)
"RTN","XUSBSE1",47,0)
 . S XUENTRY=$$BSEUSER(XUENTRY,XUTOKEN,XUSTR)
"RTN","XUSBSE1",48,0)
 . Q
"RTN","XUSBSE1",49,0)
 Q $S(XUENTRY'>0:0,1:XUENTRY)
"RTN","XUSBSE1",50,0)
 ;
"RTN","XUSBSE1",51,0)
 ; BSEUSER - returns internal entry number for authenicated user or 0
"RTN","XUSBSE1",52,0)
 ;   ENTRY - input - internal entry number in REMOTE APPLICATION file
"RTN","XUSBSE1",53,0)
 ;   TOKEN - input - token from authenticaing site
"RTN","XUSBSE1",54,0)
 ;   STR   - input - remainder of input string (2 pieces)
"RTN","XUSBSE1",55,0)
BSEUSER(ENTRY,TOKEN,STR) ;
"RTN","XUSBSE1",56,0)
 N XUIEN,XUCONTXT,XUDEMOG,XCNT,XVAL
"RTN","XUSBSE1",57,0)
 S XUIEN=0,XUDEMOG=""
"RTN","XUSBSE1",58,0)
 S XCNT=0 F  S XCNT=$O(^XWB(8994.5,ENTRY,1,XCNT)) Q:XCNT'>0  S XVAL=^(XCNT,0) D  Q:XUDEMOG'=""
"RTN","XUSBSE1",59,0)
 . ; INSERT CODE TO HANDLE CONNECTION TYPE AND CONNECTIONS
"RTN","XUSBSE1",60,0)
 . I $P(XVAL,U)="M" S XUDEMOG=$$M2M($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) D CLOSE^XWBM2MC() Q
"RTN","XUSBSE1",61,0)
 . I $P(XVAL,U)="R" S XUDEMOG=$$XWB($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) Q
"RTN","XUSBSE1",62,0)
 . I $P(XVAL,U)="H" S XUDEMOG=$$POST^XUSBSE2($P(XVAL,U,3),$P(XVAL,U,2),$P(XVAL,U,4),"xVAL="_TOKEN) Q
"RTN","XUSBSE1",63,0)
 . Q
"RTN","XUSBSE1",64,0)
 I XUDEMOG="" D
"RTN","XUSBSE1",65,0)
 . N SERVER,PORT
"RTN","XUSBSE1",66,0)
 . S XUDEMOG=""
"RTN","XUSBSE1",67,0)
 . S SERVER=$P(STR,U),PORT=$P(STR,U,2)
"RTN","XUSBSE1",68,0)
 . I SERVER'="",PORT>0 S XUDEMOG=$$GETDEMOG(SERVER,PORT,TOKEN)
"RTN","XUSBSE1",69,0)
 . Q
"RTN","XUSBSE1",70,0)
 I XUDEMOG'="" D
"RTN","XUSBSE1",71,0)
 . S XUCONTXT=$P($G(^XWB(8994.5,ENTRY,0)),U,2)
"RTN","XUSBSE1",72,0)
 . S XUIEN=$$SETUP(XUDEMOG,XUCONTXT)
"RTN","XUSBSE1",73,0)
 Q $S(XUIEN'>0:0,1:XUIEN)
"RTN","XUSBSE1",74,0)
 ;
"RTN","XUSBSE1",75,0)
XWB(SERVER,PORT,TOKEN) ;Special Broker service
"RTN","XUSBSE1",76,0)
 N DEMOSTR,IO,XWBTDEV,XWBRBUF
"RTN","XUSBSE1",77,0)
 ;TEST CODE
"RTN","XUSBSE1",78,0)
 Q $$CALLBSE^XWBTCPM2(SERVER,PORT,TOKEN)
"RTN","XUSBSE1",79,0)
 ;
"RTN","XUSBSE1",80,0)
M2M(SERVER,PORT,TOKEN) ;
"RTN","XUSBSE1",81,0)
 N DEMOGSTR,XWBCRLFL,RETRNVAL,XUSBSARR
"RTN","XUSBSE1",82,0)
 S DEMOGSTR=""
"RTN","XUSBSE1",83,0)
 N XWBSTAT,XWBPARMS,XWBTDEV,XWBNULL
"RTN","XUSBSE1",84,0)
 S XWBPARMS("ADDRESS")=SERVER,XWBPARMS("PORT")=PORT
"RTN","XUSBSE1",85,0)
 S XWBPARMS("RETRIES")=3 ;Retries 3 times to open
"RTN","XUSBSE1",86,0)
 ;
"RTN","XUSBSE1",87,0)
 I '$$OPEN^XWBRL(.XWBPARMS) Q "NO OPEN"
"RTN","XUSBSE1",88,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",89,0)
 D CLEARP^XWBM2MEZ
"RTN","XUSBSE1",90,0)
 D SETPARAM^XWBM2MEZ(1,"STRING",TOKEN)
"RTN","XUSBSE1",91,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",92,0)
 S XWBPARMS("RESULTS")=$NA(^TMP("XUSBSE1",$J))
"RTN","XUSBSE1",93,0)
 S XWBCRLFL=0
"RTN","XUSBSE1",94,0)
 D REQUEST^XWBRPCC(.XWBPARMS)
"RTN","XUSBSE1",95,0)
 I XWBCRLFL S RETRNVAL="XWBCRLFL IS TRUE" G M2MEXIT ; S @M2MLOC="XWBCRLFL IS TRUE" Q  ; Q 0
"RTN","XUSBSE1",96,0)
 ;
"RTN","XUSBSE1",97,0)
 I '$$EXECUTE^XWBVLC(.XWBPARMS) S RETRNVAL="FAILURE ON EXECUTE" G M2MEXIT ; S @M2MLOC="failure on execute" Q  ;Run RPC and place raw XML results in ^TMP("XWBM2MVLC"
"RTN","XUSBSE1",98,0)
 D PARSE^XWBRPC(.XWBPARMS,"XUSBSARR") ;Parse out raw XML and place results in ^TMP("XWBM2MRPC"
"RTN","XUSBSE1",99,0)
 S RETRNVAL=$G(XUSBSARR(1))
"RTN","XUSBSE1",100,0)
M2MEXIT ;
"RTN","XUSBSE1",101,0)
 D CLOSE^XWBM2MEZ
"RTN","XUSBSE1",102,0)
 Q RETRNVAL
"RTN","XUSBSE1",103,0)
 ;
"RTN","XUSBSE1",104,0)
 ; GETDEMOG - return value = string of demographic characteristics
"RTN","XUSBSE1",105,0)
 ;   input SERVER - server address
"RTN","XUSBSE1",106,0)
 ;   input PORT   - port number for connection
"RTN","XUSBSE1",107,0)
 ;   input TOKEN  - token to identify user to authenticating server
"RTN","XUSBSE1",108,0)
GETDEMOG(SERVER,PORT,TOKEN) ;
"RTN","XUSBSE1",109,0)
 N DEMOGSTR
"RTN","XUSBSE1",110,0)
 S DEMOGSTR=""
"RTN","XUSBSE1",111,0)
 Q DEMOGSTR
"RTN","XUSBSE1",112,0)
 ;
"RTN","XUSBSE1",113,0)
 ; SETUP - setup user as visitor, add context option
"RTN","XUSBSE1",114,0)
 ; return value = internal entry number for user, or 0
"RTN","XUSBSE1",115,0)
 ;   input XUDEMOG  - string of demographic characteristics
"RTN","XUSBSE1",116,0)
 ;   input XUCONTXT - context option to be given to user
"RTN","XUSBSE1",117,0)
SETUP(XUDEMOG,XUCONTXT) ;
"RTN","XUSBSE1",118,0)
 I '$$PUT^XUESSO1(XUDEMOG) Q 0
"RTN","XUSBSE1",119,0)
 I $G(DUZ)'>0 Q 0
"RTN","XUSBSE1",120,0)
 D SETCNTXT(XUCONTXT)
"RTN","XUSBSE1",121,0)
 Q DUZ
"RTN","XUSBSE1",122,0)
 ;
"RTN","XUSBSE1",123,0)
SETCNTXT(XOPT) ;
"RTN","XUSBSE1",124,0)
 N OPT,XUCONTXT
"RTN","XUSBSE1",125,0)
 S XUCONTXT="`"_XOPT
"RTN","XUSBSE1",126,0)
 I $$FIND1^DIC(19,"","X",XUCONTXT)'>0 Q  ; context option not in option file
"RTN","XUSBSE1",127,0)
 ;Have to use $D because of screen in 200.03 keeps FIND1^DIC from working.
"RTN","XUSBSE1",128,0)
 I '$D(^VA(200,DUZ,203,"B",XOPT)) D
"RTN","XUSBSE1",129,0)
 . ; Have to give the user a delegated option
"RTN","XUSBSE1",130,0)
 . N XARR S XARR(200.19,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",131,0)
 . D UPDATE^DIE("E","XARR")
"RTN","XUSBSE1",132,0)
 . ; And now she can give himself the context option
"RTN","XUSBSE1",133,0)
 . K XARR S XARR(200.03,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",134,0)
 . D UPDATE^DIE("E","XARR") ; Give context option as a secondary menu item
"RTN","XUSBSE1",135,0)
 . S ^XUTL("XQ",$J,"DUZ(BSE)")=XUCONTXT
"RTN","XUSBSE1",136,0)
 . ; But now we have to remove the delegated option
"RTN","XUSBSE1",137,0)
 . S OPT=$$FIND1^DIC(200.19,","_DUZ_",","X",XUCONTXT)
"RTN","XUSBSE1",138,0)
 . I OPT>0 D
"RTN","XUSBSE1",139,0)
 . . K XARR S XARR(200.19,(OPT_","_DUZ_","),.01)="@"
"RTN","XUSBSE1",140,0)
 . . D FILE^DIE("E","XARR")
"RTN","XUSBSE1",141,0)
 . . Q
"RTN","XUSBSE1",142,0)
 . Q
"RTN","XUSBSE1",143,0)
 Q
"RTN","XUSBSE1",144,0)
 ;
"RTN","XUSBSE2")
0^1^B10222984^B9339084
"RTN","XUSBSE2",1,0)
XUSBSE2 ;FO-OAK/JLI-CONNECT WITH HTTP SERVER AND GET REPLY ;5/24/07  13:47
"RTN","XUSBSE2",2,0)
 ;;8.0;KERNEL;**404,439**;Jul 10, 1995;Build 12
"RTN","XUSBSE2",3,0)
 Q
"RTN","XUSBSE2",4,0)
 ;
"RTN","XUSBSE2",5,0)
POST(SERVER,PORT,PAGE,DATA) ;
"RTN","XUSBSE2",6,0)
 Q $$ENTRY(SERVER,$G(PORT),$G(PAGE),"POST",$G(DATA))
"RTN","XUSBSE2",7,0)
 ;
"RTN","XUSBSE2",8,0)
GET(SERVER,PORT,PAGE) ;
"RTN","XUSBSE2",9,0)
 Q $$ENTRY(SERVER,$G(PORT),$G(PAGE),"GET")
"RTN","XUSBSE2",10,0)
 ;
"RTN","XUSBSE2",11,0)
ENTRY(SERVER,PORT,PAGE,HTTPTYPE,DATA) ;
"RTN","XUSBSE2",12,0)
 N DONE,XVALUE,XWBICNT,XWBRBUF,XWBSBUF,XWBTDEV,XWBDEBUG,XWBOS,XWBT,XWBTIME,POP
"RTN","XUSBSE2",13,0)
 N $ESTACK,$ETRAP S $ETRAP="D TRAP^XUSBSE2"
"RTN","XUSBSE2",14,0)
 S PAGE=$G(PAGE,"/") I PAGE="" S PAGE="/"
"RTN","XUSBSE2",15,0)
 S HTTPTYPE=$G(HTTPTYPE,"GET")
"RTN","XUSBSE2",16,0)
 S DATA=$G(DATA),PORT=$G(PORT,80)
"RTN","XUSBSE2",17,0)
 D SAVDEV^%ZISUTL("XUSBSE") ;S IO(0)=$P
"RTN","XUSBSE2",18,0)
 D INIT^XWBTCPM
"RTN","XUSBSE2",19,0)
 D OPEN^XWBTCPM2(SERVER,PORT)
"RTN","XUSBSE2",20,0)
 I POP Q "DIDN'T OPEN CONNECTION"
"RTN","XUSBSE2",21,0)
 S XWBSBUF=""
"RTN","XUSBSE2",22,0)
 U XWBTDEV
"RTN","XUSBSE2",23,0)
 D WRITE^XWBRW(HTTPTYPE_" "_PAGE_" HTTP/1.0"_$C(13,10))
"RTN","XUSBSE2",24,0)
 I HTTPTYPE="POST" D
"RTN","XUSBSE2",25,0)
 . D WRITE^XWBRW("Referer: http://"_$$KSP^XUPARAM("WHERE")_$C(13,10))
"RTN","XUSBSE2",26,0)
 . D WRITE^XWBRW("Content-Type: application/x-www-form-urlencoded"_$C(13,10))
"RTN","XUSBSE2",27,0)
 . D WRITE^XWBRW("Cache-Control: no-cache"_$C(13,10))
"RTN","XUSBSE2",28,0)
 . D WRITE^XWBRW("Content-Length: "_$L(DATA)_$C(13,10,13,10))
"RTN","XUSBSE2",29,0)
 . D WRITE^XWBRW(DATA)
"RTN","XUSBSE2",30,0)
 D WRITE^XWBRW($C(13,10))
"RTN","XUSBSE2",31,0)
 D WBF^XWBRW
"RTN","XUSBSE2",32,0)
 S XWBRBUF="",DONE=0,XWBICNT=0
"RTN","XUSBSE2",33,0)
 S XVALUE=$$DREAD($C(13,10)) I XVALUE'[200 S XVALUE=$P(XVALUE," ",2,3)
"RTN","XUSBSE2",34,0)
 I '$T S XVALUE=$$DREAD($C(13,10,13,10)),XVALUE=$$DREAD($C(13,10))
"RTN","XUSBSE2",35,0)
 D CLOSE ;I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",36,0)
 Q $P(XVALUE,$C(13,10))
"RTN","XUSBSE2",37,0)
 ;
"RTN","XUSBSE2",38,0)
CLOSE ;
"RTN","XUSBSE2",39,0)
 D CLOSE^%ZISTCP,GETDEV^%ZISUTL("XUSBSE") I $L(IO) U IO
"RTN","XUSBSE2",40,0)
 Q
"RTN","XUSBSE2",41,0)
 ;
"RTN","XUSBSE2",42,0)
DREAD(D,TO) ;Delimiter Read
"RTN","XUSBSE2",43,0)
 N R,S,DONE,C,L
"RTN","XUSBSE2",44,0)
 N $ES,$ET S $ET="S DONE=1,$EC="""" Q"
"RTN","XUSBSE2",45,0)
 S R="",DONE=0,D=$G(D,$C(13)),C=0
"RTN","XUSBSE2",46,0)
 S TO=$S($G(TO)>0:TO,$G(XWBTIME(1))>0:XWBTIME(1),1:60)/2+1
"RTN","XUSBSE2",47,0)
 U XWBTDEV
"RTN","XUSBSE2",48,0)
 F  D  Q:DONE
"RTN","XUSBSE2",49,0)
 . S L=$F(XWBRBUF,D),L=$S(L>0:L,1:$L(XWBRBUF)+1),R=R_$E(XWBRBUF,1,L-1),XWBRBUF=$E(XWBRBUF,L,32000)
"RTN","XUSBSE2",50,0)
 . I (R[D)!(C>TO) S DONE=1 Q
"RTN","XUSBSE2",51,0)
 . R XWBRBUF:2 S:'$T C=C+1 S:$L(XWBRBUF) C=0
"RTN","XUSBSE2",52,0)
 . I $G(XWBDEBUG)>2,$L(XWBRBUF) D LOG^XWBDLOG($E("rd ("_$L(XWBRBUF)_"): "_XWBRBUF,1,255))
"RTN","XUSBSE2",53,0)
 . Q
"RTN","XUSBSE2",54,0)
 Q R
"RTN","XUSBSE2",55,0)
 ;
"RTN","XUSBSE2",56,0)
TRAP ;
"RTN","XUSBSE2",57,0)
 I '(($EC["READ")!($EC["WRITE")) D ^%ZTER
"RTN","XUSBSE2",58,0)
 D CLOSE,LOG^XWBDLOG("Error: "_$$EC^%ZOSV):$G(XWBDEBUG),UNWIND^%ZTER
"RTN","XUSBSE2",59,0)
 Q
"RTN","XUSBSE2",60,0)
 ;
"RTN","XUSBSE2",61,0)
 ;Test code below here
"RTN","XUSBSE2",62,0)
 ; MODIFY THE PROGRAM TO CHANGE THE 10.161.12.182 TO
"RTN","XUSBSE2",63,0)
 ; IP ADDRESSES FOR THE WORKSTATION WITH THE BSE SAMPLE
"RTN","XUSBSE2",64,0)
 ; SERVER
"RTN","XUSBSE2",65,0)
EN(ADDRESS) ; test with input address or 10.161.12.182 if none entered
"RTN","XUSBSE2",66,0)
 N VALUE,PAGE,SERVER,PORT
"RTN","XUSBSE2",67,0)
 S ADDRESS=$G(ADDRESS,"10.237.131.26")
"RTN","XUSBSE2",68,0)
 S PAGE="/",SERVER=ADDRESS,PORT=80
"RTN","XUSBSE2",69,0)
 I SERVER["/" D
"RTN","XUSBSE2",70,0)
 . I SERVER["//" S SERVER=$P(SERVER,"//",2)
"RTN","XUSBSE2",71,0)
 . I SERVER["/" S PAGE="/"_$P(SERVER,"/",2,99),SERVER=$P(SERVER,"/")
"RTN","XUSBSE2",72,0)
 . I SERVER[":" S PORT=$P(SERVER,":",2),SERVER=$P(SERVER,":")
"RTN","XUSBSE2",73,0)
 . Q
"RTN","XUSBSE2",74,0)
 S VALUE=$$ENTRY(SERVER,PORT,PAGE) ; $G(ADDRESS,"10.237.131.26"))
"RTN","XUSBSE2",75,0)
 D HOME^%ZIS ;I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",76,0)
 W !,VALUE
"RTN","XUSBSE2",77,0)
 Q
"RTN","XUSBSE2",78,0)
 ;
"RTN","XUSBSE2",79,0)
EN1 ;
"RTN","XUSBSE2",80,0)
 D EN("10.237.131.26/page1.htm")
"RTN","XUSBSE2",81,0)
 Q
"RTN","XUSBSE2",82,0)
 ;
"RTN","XUSBSE2",83,0)
EN2 ;
"RTN","XUSBSE2",84,0)
 D EN("10.237.131.26/level2/page2.htm")
"RTN","XUSBSE2",85,0)
 Q
"RTN","XUSBSE2",86,0)
 ;
"RTN","XUSBSE2",87,0)
 ;
"RTN","XUSBSE2",88,0)
TESTPOST ;
"RTN","XUSBSE2",89,0)
 W !,$$POST("10.237.131.26","/","xVAL=XWBHDL851-487411_0")
"RTN","XUSBSE2",90,0)
 I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",91,0)
 Q
"RTN","XUSBSE2",92,0)
 ;
"RTN","XUSBSE2",93,0)
 ;Sample of what IIS returns
"RTN","XUSBSE2",94,0)
 ;HTTP/1.1 200 OK
"RTN","XUSBSE2",95,0)
 ;Server: Microsoft-IIS/5.1
"RTN","XUSBSE2",96,0)
 ;Date: Mon, 12 Feb 2007 22:57:55 GMT
"RTN","XUSBSE2",97,0)
 ;X-Powered-By: ASP.NET
"RTN","XUSBSE2",98,0)
 ;X-AspNet-Version: 1.1.4322
"RTN","XUSBSE2",99,0)
 ;Set-Cookie: ASP.NET_SessionId=vsiqfgygjwsaru55bj4aik45; path=/
"RTN","XUSBSE2",100,0)
 ;Cache-Control: private
"RTN","XUSBSE2",101,0)
 ;Content-Type: text/html; charset=utf-8
"RTN","XUSBSE2",102,0)
 ;
"RTN","XUSBSE2",103,0)
 ;999999999^MONSON,STEVE^CLEVELAND VAMC^541^136672^^
"RTN","XUSBSE2",104,0)
 ;
"VER")
8.0^22.0
"BLD",978,6)
^381
**END**
**END**
