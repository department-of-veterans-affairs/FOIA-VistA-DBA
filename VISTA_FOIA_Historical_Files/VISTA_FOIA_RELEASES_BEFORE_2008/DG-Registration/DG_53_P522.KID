KIDS Distribution saved on Oct 21, 2003@17:58:15
RELEASE VERSION
**KIDS**:DG*5.3*522^IVM*2.0*79^

**INSTALL NAME**
DG*5.3*522
"BLD",4281,0)
DG*5.3*522^REGISTRATION^0^3031021^y
"BLD",4281,4,0)
^9.64PA^2^1
"BLD",4281,4,2,0)
2
"BLD",4281,4,2,2,0)
^9.641^2^1
"BLD",4281,4,2,2,2,0)
PATIENT  (File-top level)
"BLD",4281,4,2,2,2,1,0)
^9.6411^.118^2
"BLD",4281,4,2,2,2,1,.118,0)
ADDRESS CHANGE DT/TM
"BLD",4281,4,2,2,2,1,.122,0)
ADDRESS CHANGE USER
"BLD",4281,4,2,222)
y^n^p^^^^n^^n
"BLD",4281,4,2,224)

"BLD",4281,4,"APDD",2,2)

"BLD",4281,4,"APDD",2,2,.118)

"BLD",4281,4,"APDD",2,2,.122)

"BLD",4281,4,"B",2,2)

"BLD",4281,"ABNS",0)
^9.66A^^
"BLD",4281,"ABPKG")
n^n
"BLD",4281,"INIT")

"BLD",4281,"KRN",0)
^9.67PA^8989.52^19
"BLD",4281,"KRN",.4,0)
.4
"BLD",4281,"KRN",.401,0)
.401
"BLD",4281,"KRN",.402,0)
.402
"BLD",4281,"KRN",.403,0)
.403
"BLD",4281,"KRN",.5,0)
.5
"BLD",4281,"KRN",.84,0)
.84
"BLD",4281,"KRN",3.6,0)
3.6
"BLD",4281,"KRN",3.8,0)
3.8
"BLD",4281,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",4281,"KRN",3.8,"NM",1,0)
DG DAILY ADDRESS CHANGE^^0
"BLD",4281,"KRN",3.8,"NM","B","DG DAILY ADDRESS CHANGE",1)

"BLD",4281,"KRN",9.2,0)
9.2
"BLD",4281,"KRN",9.8,0)
9.8
"BLD",4281,"KRN",9.8,"NM",0)
^9.68A^7^7
"BLD",4281,"KRN",9.8,"NM",1,0)
DGREGDD1^^0^B21290803
"BLD",4281,"KRN",9.8,"NM",2,0)
DGRPE^^0^B40131124
"BLD",4281,"KRN",9.8,"NM",3,0)
DGREGARP^^0^B41312386
"BLD",4281,"KRN",9.8,"NM",4,0)
DG53522P^^0^B851991
"BLD",4281,"KRN",9.8,"NM",5,0)
DGREGAZL^^0^B30954402
"BLD",4281,"KRN",9.8,"NM",6,0)
DGRPCE1^^0^B5006000
"BLD",4281,"KRN",9.8,"NM",7,0)
DGREGAED^^0^B14874621
"BLD",4281,"KRN",9.8,"NM","B","DG53522P",4)

"BLD",4281,"KRN",9.8,"NM","B","DGREGAED",7)

"BLD",4281,"KRN",9.8,"NM","B","DGREGARP",3)

"BLD",4281,"KRN",9.8,"NM","B","DGREGAZL",5)

"BLD",4281,"KRN",9.8,"NM","B","DGREGDD1",1)

"BLD",4281,"KRN",9.8,"NM","B","DGRPCE1",6)

"BLD",4281,"KRN",9.8,"NM","B","DGRPE",2)

"BLD",4281,"KRN",19,0)
19
"BLD",4281,"KRN",19,"NM",0)
^9.68A^3^2
"BLD",4281,"KRN",19,"NM",1,0)
DG ALL ADDRESS CHANGE REPORT^^0
"BLD",4281,"KRN",19,"NM",3,0)
DG REGISTRATION MENU^^2
"BLD",4281,"KRN",19,"NM","B","DG ALL ADDRESS CHANGE REPORT",1)

"BLD",4281,"KRN",19,"NM","B","DG REGISTRATION MENU",3)

"BLD",4281,"KRN",19.1,0)
19.1
"BLD",4281,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",4281,"KRN",101,0)
101
"BLD",4281,"KRN",101,"NM",0)
^9.68A^^
"BLD",4281,"KRN",409.61,0)
409.61
"BLD",4281,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",4281,"KRN",771,0)
771
"BLD",4281,"KRN",870,0)
870
"BLD",4281,"KRN",8989.51,0)
8989.51
"BLD",4281,"KRN",8989.52,0)
8989.52
"BLD",4281,"KRN",8994,0)
8994
"BLD",4281,"KRN","B",.4,.4)

"BLD",4281,"KRN","B",.401,.401)

"BLD",4281,"KRN","B",.402,.402)

"BLD",4281,"KRN","B",.403,.403)

"BLD",4281,"KRN","B",.5,.5)

"BLD",4281,"KRN","B",.84,.84)

"BLD",4281,"KRN","B",3.6,3.6)

"BLD",4281,"KRN","B",3.8,3.8)

"BLD",4281,"KRN","B",9.2,9.2)

"BLD",4281,"KRN","B",9.8,9.8)

"BLD",4281,"KRN","B",19,19)

"BLD",4281,"KRN","B",19.1,19.1)

"BLD",4281,"KRN","B",101,101)

"BLD",4281,"KRN","B",409.61,409.61)

"BLD",4281,"KRN","B",771,771)

"BLD",4281,"KRN","B",870,870)

"BLD",4281,"KRN","B",8989.51,8989.51)

"BLD",4281,"KRN","B",8989.52,8989.52)

"BLD",4281,"KRN","B",8994,8994)

"BLD",4281,"PRE")
DG53522P
"BLD",4281,"QUES",0)
^9.62^^
"BLD",4281,"REQB",0)
^9.611^7^7
"BLD",4281,"REQB",1,0)
DG*5.3*244^2
"BLD",4281,"REQB",2,0)
DG*5.3*454^2
"BLD",4281,"REQB",3,0)
XU*8.0*292^2
"BLD",4281,"REQB",4,0)
DG*5.3*231^2
"BLD",4281,"REQB",5,0)
DG*5.3*505^2
"BLD",4281,"REQB",6,0)
DG*5.3*547^2
"BLD",4281,"REQB",7,0)
PSS*1.0*75^2
"BLD",4281,"REQB","B","DG*5.3*231",4)

"BLD",4281,"REQB","B","DG*5.3*244",1)

"BLD",4281,"REQB","B","DG*5.3*454",2)

"BLD",4281,"REQB","B","DG*5.3*505",5)

"BLD",4281,"REQB","B","DG*5.3*547",6)

"BLD",4281,"REQB","B","PSS*1.0*75",7)

"BLD",4281,"REQB","B","XU*8.0*292",3)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^n^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
5.3^DG
"FIA",2,2)
1
"FIA",2,2,.118)

"FIA",2,2,.122)

"IX",2,2,"ADELBAI",0)
2^ADELBAI^Delete Bad Address Indicator when address changes^MU^^F^^I^2^^^^^A
"IX",2,2,"ADELBAI",.1,0)
^^3^3^3030306^
"IX",2,2,"ADELBAI",.1,1,0)
This action cross-reference will delete the Bad Address Indicator for the
"IX",2,2,"ADELBAI",.1,2,0)
patient's primary address whenever the address changes (either manually
"IX",2,2,"ADELBAI",.1,3,0)
or by an incoming Z05 transmission).
"IX",2,2,"ADELBAI",1)
D:$$BADADR^DGUTL3(DA) DELBAI^DGUTL3(DA)
"IX",2,2,"ADELBAI",1.4)
I X1'=X2
"IX",2,2,"ADELBAI",2)
Q
"IX",2,2,"ADELBAI",2.4)

"IX",2,2,"ADELBAI",11.1,0)
^.114IA^1^1
"IX",2,2,"ADELBAI",11.1,1,0)
1^F^2^.118^^^F
"IX",2,2,"ADELBAI",11.1,1,3)

"KRN",3.8,323,-1)
0^1
"KRN",3.8,323,0)
DG DAILY ADDRESS CHANGE^PU^^^^^
"KRN",3.8,323,2,0)
^3.801^1^1^3031021^^^^
"KRN",3.8,323,2,1,0)
The mail group will receive DG ALL ADDRESS CHANGE REPORT
"KRN",3.8,323,3)

"KRN",3.8,323,6,0)
^3.812^^0
"KRN",3.8,323,8,0)
^3.814P
"KRN",19,185,-1)
2^3
"KRN",19,185,0)
DG REGISTRATION MENU^Registration Menu^^M^.5^^^^^^^5^y
"KRN",19,185,10,0)
^19.01IP^33^26
"KRN",19,185,10,31,0)
11134
"KRN",19,185,10,31,"^")
DG ALL ADDRESS CHANGE REPORT
"KRN",19,185,"U")
REGISTRATION MENU
"KRN",19,11134,-1)
0^1
"KRN",19,11134,0)
DG ALL ADDRESS CHANGE REPORT^Report - All Address Changes^^R^^^^^^^^REGISTRATION^^
"KRN",19,11134,1,0)
^19.06^1^1^3030626^^^
"KRN",19,11134,1,1,0)
This report lists changes to any of the patient primary address fields for the previous 24 hours.
"KRN",19,11134,20)

"KRN",19,11134,25)
EN^DGREGARP("ALL")
"KRN",19,11134,99)
59344,38919
"KRN",19,11134,200.9)
y
"KRN",19,11134,"U")
REPORT - ALL ADDRESS CHANGES
"MBREQ")
0
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
522^3031021
"PRE")
DG53522P
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","DG53522P")
0^4^B851991
"RTN","DG53522P",1,0)
DG53522P ;ALB/DW - DG*5.3*522 POST-INSTALL; 6/2/2003
"RTN","DG53522P",2,0)
 ;;5.3;Registration;**522**;Aug 13, 1993
"RTN","DG53522P",3,0)
ENV ;Environment check
"RTN","DG53522P",4,0)
 S XPDABORT=""
"RTN","DG53522P",5,0)
 D PRGCHK(.XPDABORT)
"RTN","DG53522P",6,0)
 I XPDABORT="" K XPDABORT
"RTN","DG53522P",7,0)
 Q
"RTN","DG53522P",8,0)
 ;
"RTN","DG53522P",9,0)
PRGCHK(XPDABORT) ;Checks programmer variables
"RTN","DG53522P",10,0)
 I '$G(DUZ)!($G(DUZ(0))'="@") D
"RTN","DG53522P",11,0)
 . W !,$C(7),"     To insure that data dictionary changes contained in this patch"
"RTN","DG53522P",12,0)
 . W !,"     are installed correctly, DUZ(0) must be equal the ""@"" symbol!",!
"RTN","DG53522P",13,0)
 . S XPDABORT=2
"RTN","DG53522P",14,0)
 Q
"RTN","DGREGAED")
0^7^B14874621
"RTN","DGREGAED",1,0)
DGREGAED ;ALB/DW - Address Edit API; 6/2/2003
"RTN","DGREGAED",2,0)
 ;;5.3;Registration;**522**;Aug 13, 1993
"RTN","DGREGAED",3,0)
EN(DFN,FLG) ;Entry point
"RTN","DGREGAED",4,0)
 ;Input: 
"RTN","DGREGAED",5,0)
 ;  DFN (required) - Interal Entry # of Patient File (#2)
"RTN","DGREGAED",6,0)
 ;  FLG (optional) - Flags of 1 or 0; if null, 0 is assumed. Details:
"RTN","DGREGAED",7,0)
 ;    FLG(1) - if 1, let user edit phone numbers (field #.131 and #.132)
"RTN","DGREGAED",8,0)
 ;    FLG(2) - if 1, dispaly before & after address for user confirmation
"RTN","DGREGAED",9,0)
 K EASZIPLK
"RTN","DGREGAED",10,0)
 N DGINPUT
"RTN","DGREGAED",11,0)
 N I,X,Y
"RTN","DGREGAED",12,0)
 I $G(DFN)="" Q
"RTN","DGREGAED",13,0)
 I ($G(DFN)'?.N) Q
"RTN","DGREGAED",14,0)
 S FLG(1)=$G(FLG(1)),FLG(2)=$G(FLG(2))
"RTN","DGREGAED",15,0)
 D INPUT(.DGINPUT,DFN)
"RTN","DGREGAED",16,0)
 I $G(DGINPUT)=-1 Q
"RTN","DGREGAED",17,0)
 I $G(FLG(2))=1 D COMPARE(.DGINPUT,DFN)
"RTN","DGREGAED",18,0)
 I '$$CONFIRM() W !,"Change aborted." D EOP Q
"RTN","DGREGAED",19,0)
 D SAVE(.DGINPUT,DFN)
"RTN","DGREGAED",20,0)
 Q
"RTN","DGREGAED",21,0)
INPUT(DGINPUT,DFN) ;Let user input address changes
"RTN","DGREGAED",22,0)
 ;Output: DGINPUT(field#)=external^internal(if any)
"RTN","DGREGAED",23,0)
 N DIR,X,Y,DA,DGR,DTOUT,DUOUT,DIROUT,DGN,POP
"RTN","DGREGAED",24,0)
 S POP=0
"RTN","DGREGAED",25,0)
 F DGN=.111,.112,.113,.1112,.131,.132,.121 Q:POP  D
"RTN","DGREGAED",26,0)
 . I ($G(DGINPUT(.111))="")&((DGN=.112)!(DGN=.113)) Q
"RTN","DGREGAED",27,0)
 . I ($G(DGINPUT(.112))="")&(DGN=.113) Q
"RTN","DGREGAED",28,0)
 . I ($G(FLG(1))'=1)&((DGN=.131)!(DGN=.132)) Q
"RTN","DGREGAED",29,0)
 . I DGN=.1112 D  Q
"RTN","DGREGAED",30,0)
 .. D EN^DGREGAZL(.DGR,DFN)
"RTN","DGREGAED",31,0)
 .. I $G(DGR)=-1 S POP=1 Q
"RTN","DGREGAED",32,0)
 .. N DGM F DGM=.1112,.114,.115,.117 S DGINPUT(DGM)=$G(DGR(DGM))
"RTN","DGREGAED",33,0)
AGN . S DIR(0)=2_","_DGN
"RTN","DGREGAED",34,0)
 . S DA=DFN
"RTN","DGREGAED",35,0)
 . D ^DIR
"RTN","DGREGAED",36,0)
 . I $D(DTOUT) S POP=1 Q
"RTN","DGREGAED",37,0)
 . I $D(DUOUT)!$D(DIROUT) D UPCT G AGN
"RTN","DGREGAED",38,0)
 . I DGN'=.121 S DGINPUT(DGN)=$G(Y)
"RTN","DGREGAED",39,0)
 . I DGN=.121 D
"RTN","DGREGAED",40,0)
 .. I $P($G(Y),U)=$$GET1^DIQ(2,DFN_",",DGN,"I") D
"RTN","DGREGAED",41,0)
 ... S DGINPUT(DGN)=$$GET1^DIQ(2,DFN_",",DGN)_U_$P($G(Y),U)
"RTN","DGREGAED",42,0)
 .. I $P($G(Y),U)'=$$GET1^DIQ(2,DFN_",",DGN,"I") D
"RTN","DGREGAED",43,0)
 ... S DGINPUT(DGN)=$P($G(Y(0)),U)_U_$G(Y)
"RTN","DGREGAED",44,0)
 I $G(POP)=1 S DGINPUT=-1
"RTN","DGREGAED",45,0)
 Q
"RTN","DGREGAED",46,0)
COMPARE(DGINPUT,DFN) ;Display before & after address fileds.
"RTN","DGREGAED",47,0)
 N DGCURR,DGN,DGCMP,DGM,DGCNTY,DGCIEN,DGST
"RTN","DGREGAED",48,0)
 D GETS^DIQ(2,DFN_",",".111;.112;.113;.114;.115;.117;.1112;.131;.132;.121","EI","DGCURR")
"RTN","DGREGAED",49,0)
 F DGN=.111,.112,.113,.114,.115,.117,.1112,.131,.132,.121 D
"RTN","DGREGAED",50,0)
 . S DGCMP("OLD",DGN)=$G(DGCURR(2,DFN_",",DGN,"E"))
"RTN","DGREGAED",51,0)
 S DGCIEN=$G(DGCURR(2,DFN_",",.117,"I"))
"RTN","DGREGAED",52,0)
 S DGST=$G(DGCURR(2,DFN_",",.115,"I"))
"RTN","DGREGAED",53,0)
 S DGCNTY=$$CNTY^DGREGAZL(DGST,DGCIEN)
"RTN","DGREGAED",54,0)
 I DGCNTY=-1 S DGCNTY=""
"RTN","DGREGAED",55,0)
 S DGCMP("OLD",.117)=$P(DGCNTY,U)_" "_$P(DGCNTY,U,3)
"RTN","DGREGAED",56,0)
 M DGCMP("NEW")=DGINPUT
"RTN","DGREGAED",57,0)
 S DGCNTY=$P($G(DGCMP("NEW",.117)),U)_" "_$P($G(DGCMP("NEW",.117)),U,3)
"RTN","DGREGAED",58,0)
 S DGCMP("NEW",.117)=DGCNTY
"RTN","DGREGAED",59,0)
 I ($L(DGCMP("NEW",.1112))>5)&($P(DGCMP("NEW",.1112),"-",2)="") S DGCMP("NEW",.1112)=$E(DGCMP("NEW",.1112),1,5)_"-"_$E(DGCMP("NEW",.1112),6,9)
"RTN","DGREGAED",60,0)
 F DGM="OLD","NEW" D
"RTN","DGREGAED",61,0)
 . W !,?2,"[",DGM," ADDRESS]"
"RTN","DGREGAED",62,0)
 . W ?16,$P($G(DGCMP(DGM,.111)),U)
"RTN","DGREGAED",63,0)
 . I $P($G(DGCMP(DGM,.112)),U)'="" W !,?16,$P($G(DGCMP(DGM,.112)),U)
"RTN","DGREGAED",64,0)
 . I $P($G(DGCMP(DGM,.113)),U)'="" W !,?16,$P($G(DGCMP(DGM,.113)),U)
"RTN","DGREGAED",65,0)
 . W !,?16,$P($G(DGCMP(DGM,.114)),U)
"RTN","DGREGAED",66,0)
 . W:($P($G(DGCMP(DGM,.114)),U)'="")!($P($G(DGCMP(DGM,.115)),U)'="") ","
"RTN","DGREGAED",67,0)
 . W $P($G(DGCMP(DGM,.115)),U)
"RTN","DGREGAED",68,0)
 . W " ",$G(DGCMP(DGM,.1112))
"RTN","DGREGAED",69,0)
 . I $P($G(DGCMP(DGM,.117)),U)'="" W !,?6,"  County: ",$P($G(DGCMP(DGM,.117)),U)
"RTN","DGREGAED",70,0)
 . I $G(FLG(1))=1 D
"RTN","DGREGAED",71,0)
 .. W !,?6,"   Phone: ",?16,$P($G(DGCMP(DGM,.131)),U)
"RTN","DGREGAED",72,0)
 .. W !,?6,"  Office: ",?16,$P($G(DGCMP(DGM,.132)),U)
"RTN","DGREGAED",73,0)
 . W !,?6,"Bad Addr: ",?16,$P($G(DGCMP(DGM,.121)),U)
"RTN","DGREGAED",74,0)
 . W !
"RTN","DGREGAED",75,0)
 Q
"RTN","DGREGAED",76,0)
CONFIRM() ;Confirm if user wants to save the change
"RTN","DGREGAED",77,0)
 N DIR,X,Y,DTOUT,DUOUT,DIROUT
"RTN","DGREGAED",78,0)
 S DIR(0)="Y"
"RTN","DGREGAED",79,0)
 S DIR("A")="Are you sure that you want to save the above changes"
"RTN","DGREGAED",80,0)
 S DIR("?")="Please answer Y for YES or N for NO."
"RTN","DGREGAED",81,0)
 D ^DIR
"RTN","DGREGAED",82,0)
 I $D(DTOUT)!($G(Y)=0) Q 0
"RTN","DGREGAED",83,0)
 I $D(DUOUT)!$D(DIROUT) Q 0
"RTN","DGREGAED",84,0)
 Q 1
"RTN","DGREGAED",85,0)
SAVE(DGINPUT,DFN) ;Save changes
"RTN","DGREGAED",86,0)
 N DGN,MSG,FDA
"RTN","DGREGAED",87,0)
 F DGN=.111,.112,.113,.131,.132,.1112,.114,.115,.117,.121 D
"RTN","DGREGAED",88,0)
 . I ($G(FLG(1))'=1)&((DGN=.131)!(DGN=.132)) Q
"RTN","DGREGAED",89,0)
 . N DGCODE,DGNAME
"RTN","DGREGAED",90,0)
 . S DGCODE=$P($G(DGINPUT(DGN)),U,2)
"RTN","DGREGAED",91,0)
 . S DGNAME=$P($G(DGINPUT(DGN)),U)
"RTN","DGREGAED",92,0)
 . S FDA(2,DFN_",",DGN)=$S(DGCODE:DGCODE,1:DGNAME)
"RTN","DGREGAED",93,0)
 . D FILE^DIE($S(DGCODE:"",1:"E"),"FDA","MSG")
"RTN","DGREGAED",94,0)
 I '$D(MSG) W !,"Change saved." D EOP
"RTN","DGREGAED",95,0)
 Q
"RTN","DGREGAED",96,0)
EOP ;End of page prompt
"RTN","DGREGAED",97,0)
 N DIR,DTOUT,DUOUT,DIROUT,X,Y
"RTN","DGREGAED",98,0)
 S DIR(0)="E"
"RTN","DGREGAED",99,0)
 S DIR("A")="Press ENTER to continue"
"RTN","DGREGAED",100,0)
 D ^DIR
"RTN","DGREGAED",101,0)
 Q
"RTN","DGREGAED",102,0)
UPCT ;Indicate "^" or "^^" are unacceptable inputs.
"RTN","DGREGAED",103,0)
 ;W $C(7)," ??"
"RTN","DGREGAED",104,0)
 W !,"EXIT NOT ALLOWED ??"
"RTN","DGREGAED",105,0)
 Q
"RTN","DGREGARP")
0^3^B41312386
"RTN","DGREGARP",1,0)
DGREGARP ;ALB/DW-Address audit reports; 6/2/2003
"RTN","DGREGARP",2,0)
 ;;5.3;Registration;**522**;Aug 13, 1993
"RTN","DGREGARP",3,0)
EN(TYPE) ;Entry point
"RTN","DGREGARP",4,0)
 N DGRNG,XMY,XMSUB,XMDUZ,XMQUIET
"RTN","DGREGARP",5,0)
 K ^TMP($J,"DG ADDRESS BEFORE"),^TMP($J,"DG ADDRESS CURR")
"RTN","DGREGARP",6,0)
 K ^TMP($J,"DG ADDRESS SUB")
"RTN","DGREGARP",7,0)
 ;If mail group has no member or remote-member
"RTN","DGREGARP",8,0)
 I '$$MEMBER() D  Q
"RTN","DGREGARP",9,0)
 . I '$D(ZTQUEUED) W !!,"DG DAILY ADDRESS CHANGE does not have a member. Report not sent."
"RTN","DGREGARP",10,0)
 ;Entry from TaskMan
"RTN","DGREGARP",11,0)
 I $D(ZTQUEUED) D  Q
"RTN","DGREGARP",12,0)
 . D PRINT
"RTN","DGREGARP",13,0)
 ;User runs the option
"RTN","DGREGARP",14,0)
 I '$D(ZTQUEUED) D
"RTN","DGREGARP",15,0)
 . W !!,"The report will be sent to mail group DG DAILY ADDRESS CHANGE."
"RTN","DGREGARP",16,0)
 . D QUE
"RTN","DGREGARP",17,0)
 Q
"RTN","DGREGARP",18,0)
MEMBER() ;Return 0 if mail group has no local or remote member
"RTN","DGREGARP",19,0)
 N RESULT,DGIEN,DGRMT
"RTN","DGREGARP",20,0)
 S RESULT=1
"RTN","DGREGARP",21,0)
 S DGIEN=$$FIND1^DIC(3.8,"","X","DG DAILY ADDRESS CHANGE")
"RTN","DGREGARP",22,0)
 D LIST^DIC(3.812,","_DGIEN_",",.01,"P","","","","","","","DGRMT")
"RTN","DGREGARP",23,0)
 I ($P($G(DGRMT("DILIST",0)),U)'>0),('$$GOTLOCAL^XMXAPIG("DG DAILY ADDRESS CHANGE")) S RESULT=0
"RTN","DGREGARP",24,0)
 Q RESULT
"RTN","DGREGARP",25,0)
QUE ;Que the task if user invokes option
"RTN","DGREGARP",26,0)
 N ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTSK,ZUSR,POP,X,ERR,IOP
"RTN","DGREGARP",27,0)
 W !
"RTN","DGREGARP",28,0)
 S ZTIO=""
"RTN","DGREGARP",29,0)
 S ZTSAVE("TYPE")=""
"RTN","DGREGARP",30,0)
 S ZTRTN="PRINT^DGREGARP"
"RTN","DGREGARP",31,0)
 S ZTDESC="DG ALL ADDRESS CHANGE REPORT"
"RTN","DGREGARP",32,0)
 D ^%ZTLOAD
"RTN","DGREGARP",33,0)
 D ^%ZISC,HOME^%ZIS
"RTN","DGREGARP",34,0)
 W !,$S($D(ZTSK):"REQUEST QUEUED AS TASK#"_ZTSK,1:"REQUEST CANCELLED!")
"RTN","DGREGARP",35,0)
 Q
"RTN","DGREGARP",36,0)
PRESORT ;Sort for the report
"RTN","DGREGARP",37,0)
 N DGRNG
"RTN","DGREGARP",38,0)
 D CHKPAR
"RTN","DGREGARP",39,0)
 D RANGE(.DGRNG)
"RTN","DGREGARP",40,0)
 I DGRNG=-1 Q
"RTN","DGREGARP",41,0)
 D SORT(.DGRNG,TYPE)
"RTN","DGREGARP",42,0)
 Q
"RTN","DGREGARP",43,0)
PRINT ;Print the report
"RTN","DGREGARP",44,0)
 N D0,BY,DHD,DIC,DIS,FLDS,FR,L,TO
"RTN","DGREGARP",45,0)
 D EMAIL(TYPE)
"RTN","DGREGARP",46,0)
 S DIOBEG="D PRESORT^DGREGARP"
"RTN","DGREGARP",47,0)
 S DIC="^DPT("
"RTN","DGREGARP",48,0)
 S BY=".01;@,.09@"
"RTN","DGREGARP",49,0)
 S (FR,TO)=""
"RTN","DGREGARP",50,0)
 I TYPE="ALL" S DIS(0)="I $D(^TMP($J,""DG ADDRESS BEFORE"",D0))"
"RTN","DGREGARP",51,0)
 I TYPE="SUB" S DIS(0)="I $D(^TMP($J,""DG ADDRESS SUB"",D0))"
"RTN","DGREGARP",52,0)
 S L=0
"RTN","DGREGARP",53,0)
 S L(0)=3
"RTN","DGREGARP",54,0)
 S FLDS=""" PATIENT: "",.01;C11,"" SSN: "";C48,D SSN^DGREGARP;C54"
"RTN","DGREGARP",55,0)
 S FLDS(2)="""  USER: "";C3,.122;C11,""DATE: "";C48,.118;C54"
"RTN","DGREGARP",56,0)
 S FLDS(3)="""SOURCE: "";C3,.119;C11,"" "",.12"
"RTN","DGREGARP",57,0)
 S FLDS(4)="D OLD^DGREGARP"
"RTN","DGREGARP",58,0)
 S FLDS(5)="D NEW^DGREGARP"
"RTN","DGREGARP",59,0)
 S FLDS(6)="D PRSCPT^DGREGARP"
"RTN","DGREGARP",60,0)
 I TYPE="ALL" S DHD="W ?0 D HDA^DGREGARP"
"RTN","DGREGARP",61,0)
 I TYPE="SUB" S DHD="W ?0 D HDS^DGREGARP"
"RTN","DGREGARP",62,0)
 D EN1^DIP
"RTN","DGREGARP",63,0)
 D EXIT
"RTN","DGREGARP",64,0)
 Q
"RTN","DGREGARP",65,0)
 ;
"RTN","DGREGARP",66,0)
SSN ;Get the last 4 digits of patient SSN
"RTN","DGREGARP",67,0)
 N DGSSN,DGDFN,DGR,DGER
"RTN","DGREGARP",68,0)
 S DGDFN=D0
"RTN","DGREGARP",69,0)
 S DGSSN=$$GET1^DIQ(2,DGDFN_",",.09,"","DGR","DGER")
"RTN","DGREGARP",70,0)
 S DGSSN=$E(DGSSN,6,10)
"RTN","DGREGARP",71,0)
 W DGSSN
"RTN","DGREGARP",72,0)
 Q
"RTN","DGREGARP",73,0)
OLD ;Get address as of 24 hours ago, assuming audits are on for all
"RTN","DGREGARP",74,0)
 N DGOADD1,DGOADD2,DGOADD3,DGOCITY,DGOST,DGOZIP,DGOCNTY
"RTN","DGREGARP",75,0)
 S DGOADD1=$G(^TMP($J,"DG ADDRESS BEFORE",D0,.111))
"RTN","DGREGARP",76,0)
 S DGOADD2=$G(^TMP($J,"DG ADDRESS BEFORE",D0,.112))
"RTN","DGREGARP",77,0)
 S DGOADD3=$G(^TMP($J,"DG ADDRESS BEFORE",D0,.113))
"RTN","DGREGARP",78,0)
 S DGOCITY=$G(^TMP($J,"DG ADDRESS BEFORE",D0,.114))
"RTN","DGREGARP",79,0)
 S DGOST=$G(^TMP($J,"DG ADDRESS BEFORE",D0,.115))
"RTN","DGREGARP",80,0)
 S DGOZIP=$G(^TMP($J,"DG ADDRESS BEFORE",D0,.1112))
"RTN","DGREGARP",81,0)
 S DGOCNTY=$G(^TMP($J,"DG ADDRESS BEFORE",D0,.117))
"RTN","DGREGARP",82,0)
 W !,?2,"BEFORE: ",DGOADD1
"RTN","DGREGARP",83,0)
 I $G(DGOADD2)'="" W !,?10,DGOADD2
"RTN","DGREGARP",84,0)
 I $G(DGOADD3)'="" W !,?10,DGOADD3
"RTN","DGREGARP",85,0)
 I (DGOCITY'="")!(DGOST'="") W !,?10,DGOCITY,",",DGOST
"RTN","DGREGARP",86,0)
 W " ",DGOZIP
"RTN","DGREGARP",87,0)
 I (DGOCNTY'="") W !,?10,"COUNTY CODE: ",DGOCNTY
"RTN","DGREGARP",88,0)
 Q
"RTN","DGREGARP",89,0)
NEW ;Get current address
"RTN","DGREGARP",90,0)
 N DGNADD1,DGNADD2,DGNADD3,DGNCITY,DGNST,DGNZIP,DGNCNTY
"RTN","DGREGARP",91,0)
 S DGNADD1=$G(^TMP($J,"DG ADDRESS CURR",D0,.111))
"RTN","DGREGARP",92,0)
 S DGNADD2=$G(^TMP($J,"DG ADDRESS CURR",D0,.112))
"RTN","DGREGARP",93,0)
 S DGNADD3=$G(^TMP($J,"DG ADDRESS CURR",D0,.113))
"RTN","DGREGARP",94,0)
 S DGNCITY=$G(^TMP($J,"DG ADDRESS CURR",D0,.114))
"RTN","DGREGARP",95,0)
 S DGNST=$G(^TMP($J,"DG ADDRESS CURR",D0,.115))
"RTN","DGREGARP",96,0)
 S DGNZIP=$G(^TMP($J,"DG ADDRESS CURR",D0,.1112))
"RTN","DGREGARP",97,0)
 S DGNCNTY=$G(^TMP($J,"DG ADDRESS CURR",D0,.117))
"RTN","DGREGARP",98,0)
 W !,?2," AFTER: ",?10,DGNADD1
"RTN","DGREGARP",99,0)
 I $G(DGNADD2)'="" W !,?10,DGNADD2
"RTN","DGREGARP",100,0)
 I $G(DGNADD3)'="" W !,?10,DGNADD3
"RTN","DGREGARP",101,0)
 I (DGNCITY'="")!(DGNST'="") W !,?10,DGNCITY,",",DGNST
"RTN","DGREGARP",102,0)
 W " ",DGNZIP
"RTN","DGREGARP",103,0)
 I (DGNCNTY'="") W !,?10,"COUNTY CODE: ",DGNCNTY
"RTN","DGREGARP",104,0)
 Q
"RTN","DGREGARP",105,0)
PRSCPT ;Display if the patient has active prescription
"RTN","DGREGARP",106,0)
 N DGPRSCRP
"RTN","DGREGARP",107,0)
 S DGPRSCRP=$$EN^PSSRXACT(D0)
"RTN","DGREGARP",108,0)
 I $G(DGPRSCRP)=1 W "Patient has active pharmacy prescription(s)",!! Q
"RTN","DGREGARP",109,0)
 ;Force a line feed between patients
"RTN","DGREGARP",110,0)
 W !
"RTN","DGREGARP",111,0)
 Q
"RTN","DGREGARP",112,0)
EXIT S:$D(ZTQUEUED) ZTREQ="@"
"RTN","DGREGARP",113,0)
 K ^TMP($J,"DG ADDRESS BEFORE"),^TMP($J,"DG ADDRESS CURR")
"RTN","DGREGARP",114,0)
 K ^TMP($J,"DG ADDRESS SUB")
"RTN","DGREGARP",115,0)
 Q
"RTN","DGREGARP",116,0)
CHKPAR ;Check if audit is on for the fields
"RTN","DGREGARP",117,0)
 N DGR,DGN,DGFLD
"RTN","DGREGARP",118,0)
 F DGN=.111,.112,.113,.114,.115,.116,.117,.1112 D
"RTN","DGREGARP",119,0)
 . K DGR
"RTN","DGREGARP",120,0)
 . D FIELD^DID(2,DGN,"","LABEL;AUDIT","DGR")
"RTN","DGREGARP",121,0)
 . I $D(DGR("DIERR")) Q
"RTN","DGREGARP",122,0)
 . I ($G(DGR("AUDIT"))'["YES")&($G(DGR("AUDIT"))'["EDITED OR DELETED") D
"RTN","DGREGARP",123,0)
 .. U IO W !,"Audit is off for the ",$G(DGR("LABEL"))," field"
"RTN","DGREGARP",124,0)
 Q
"RTN","DGREGARP",125,0)
RANGE(RESULT) ;Get the range of the reports
"RTN","DGREGARP",126,0)
 K RESULT
"RTN","DGREGARP",127,0)
 N DGBEGIN,DGEND,DGNOW,DGAGO
"RTN","DGREGARP",128,0)
 N X,X1,X2
"RTN","DGREGARP",129,0)
 D NOW^%DTC
"RTN","DGREGARP",130,0)
 S DGNOW=%
"RTN","DGREGARP",131,0)
 S X1=%,X2="-1" D C^%DTC
"RTN","DGREGARP",132,0)
 S DGAGO=X
"RTN","DGREGARP",133,0)
 S DGNOW=$O(^DIA(2,"C",DGNOW),-1)
"RTN","DGREGARP",134,0)
 S DGAGO=$O(^DIA(2,"C",DGAGO))
"RTN","DGREGARP",135,0)
 I ($G(DGNOW)="")!($G(DGAGO)="") S RESULT=-1 Q
"RTN","DGREGARP",136,0)
 S (DGBEGIN,DGEND)=""
"RTN","DGREGARP",137,0)
 S DGBEGIN=$O(^DIA(2,"C",DGNOW,DGBEGIN),-1)
"RTN","DGREGARP",138,0)
 S DGEND=$O(^DIA(2,"C",DGAGO,DGEND))
"RTN","DGREGARP",139,0)
 I $G(DGBEGIN)=""!$G(DGEND)="" S RESULT=-1 Q
"RTN","DGREGARP",140,0)
 S DGBEGIN=DGBEGIN+1
"RTN","DGREGARP",141,0)
 S RESULT=DGBEGIN_U_DGEND
"RTN","DGREGARP",142,0)
 Q
"RTN","DGREGARP",143,0)
SORT(RANGE,TYPE) ;Build the temp global to display
"RTN","DGREGARP",144,0)
 N DGBEGIN,DGEND,DGIEN,DGDFN,DGFLD
"RTN","DGREGARP",145,0)
 S DGIEN=$P($G(RANGE),U)
"RTN","DGREGARP",146,0)
 S DGEND=$P($G(RANGE),U,2)
"RTN","DGREGARP",147,0)
 F  S DGIEN=$O(^DIA(2,DGIEN),-1) Q:DGIEN<DGEND  D:$$SCRN(TYPE,DGIEN)
"RTN","DGREGARP",148,0)
 . D BUILD(DGIEN)
"RTN","DGREGARP",149,0)
 Q
"RTN","DGREGARP",150,0)
SCRN(TYPE,DGIEN) ;Screen for all reports
"RTN","DGREGARP",151,0)
 N DGFLD
"RTN","DGREGARP",152,0)
 S DGFLD=$P($G(^DIA(2,DGIEN,0)),U,3)
"RTN","DGREGARP",153,0)
 I (DGFLD=.114)!(DGFLD=.116)!(DGFLD=.117)!(DGFLD=.1112)!(DGFLD=.115) Q 1
"RTN","DGREGARP",154,0)
 I (DGFLD=.111)!(DGFLD=.112)!(DGFLD=.113) Q 1
"RTN","DGREGARP",155,0)
 Q 0
"RTN","DGREGARP",156,0)
BUILD(DGIEN) ;Build temp global
"RTN","DGREGARP",157,0)
 N DGDFN,DGFLD
"RTN","DGREGARP",158,0)
 S DGDFN=$P($G(^DIA(2,DGIEN,0)),U)
"RTN","DGREGARP",159,0)
 S DGFLD=$P($G(^DIA(2,DGIEN,0)),U,3)
"RTN","DGREGARP",160,0)
 I '$D(^TMP($J,"DG ADDRESS BEFORE",DGDFN)) D
"RTN","DGREGARP",161,0)
 . D CURR(DGDFN)
"RTN","DGREGARP",162,0)
 . M ^TMP($J,"DG ADDRESS BEFORE",DGDFN)=^TMP($J,"DG ADDRESS CURR",DGDFN)
"RTN","DGREGARP",163,0)
 S ^TMP($J,"DG ADDRESS BEFORE",DGDFN,DGFLD)=$P($G(^DIA(2,DGIEN,2)),U)
"RTN","DGREGARP",164,0)
 I (DGFLD=.114)!(DGFLD=.116)!(DGFLD=.117)!(DGFLD=.1112)!(DGFLD=.115) D
"RTN","DGREGARP",165,0)
 . S ^TMP($J,"DG ADDRESS SUB",DGDFN)=""
"RTN","DGREGARP",166,0)
 Q
"RTN","DGREGARP",167,0)
CURR(DGDFN) ;Get patient current address
"RTN","DGREGARP",168,0)
 N DGCURR,DGN
"RTN","DGREGARP",169,0)
 D GETS^DIQ(2,DGDFN_",",".111;.112;.113;.114;.115;.116;.117;.119;.12;.1112","E","DGCURR")
"RTN","DGREGARP",170,0)
 F DGN=.111,.112,.113,.114,.115,.116,.117,.119,.12,.1112 D
"RTN","DGREGARP",171,0)
 . S ^TMP($J,"DG ADDRESS CURR",DGDFN,DGN)=$G(DGCURR(2,DGDFN_",",DGN,"E"))
"RTN","DGREGARP",172,0)
 Q
"RTN","DGREGARP",173,0)
HDG ;Report header shared by both repots
"RTN","DGREGARP",174,0)
 N RDT
"RTN","DGREGARP",175,0)
 D NOW^%DTC S Y=% X ^DD("DD")
"RTN","DGREGARP",176,0)
 S RDT=$P(Y,"@",1)_"@"_$P($P(Y,"@",2),":",1,2)
"RTN","DGREGARP",177,0)
 W !,?((IOM-22-$L(RDT))\2),"Date/Time Report Run: ",RDT
"RTN","DGREGARP",178,0)
 W !!
"RTN","DGREGARP",179,0)
 Q
"RTN","DGREGARP",180,0)
HDA ;Report header for All Report
"RTN","DGREGARP",181,0)
 W !!,?((IOM-25)\2),"ALL ADDRESS CHANGE REPORT"
"RTN","DGREGARP",182,0)
 D HDG
"RTN","DGREGARP",183,0)
 Q
"RTN","DGREGARP",184,0)
HDS ;Report header for Substantial Report
"RTN","DGREGARP",185,0)
 W !!,?((IOM-33)\2),"SUBSTANTIAL ADDRESS CHANGE REPORT"
"RTN","DGREGARP",186,0)
 D HDG
"RTN","DGREGARP",187,0)
 Q
"RTN","DGREGARP",188,0)
EMAIL(TYPE) ;Email the report to mailgroup.
"RTN","DGREGARP",189,0)
 N RDT,DGTYP
"RTN","DGREGARP",190,0)
 S IOP="P-MESSAGE-HFS"
"RTN","DGREGARP",191,0)
 S XMQUIET=1
"RTN","DGREGARP",192,0)
 S DGTYP=$S(TYPE="SUB":"SUBSTANTIAL",1:TYPE)
"RTN","DGREGARP",193,0)
 D NOW^%DTC S Y=% X ^DD("DD")
"RTN","DGREGARP",194,0)
 S RDT=$P(Y,"@",1)_"@"_$P($P(Y,"@",2),":",1,2)
"RTN","DGREGARP",195,0)
 S XMSUB="DG "_$G(DGTYP)_" ADDRESS CHANGE ("_RDT_")"
"RTN","DGREGARP",196,0)
 S XMY("G.DG DAILY ADDRESS CHANGE")=""
"RTN","DGREGARP",197,0)
 Q
"RTN","DGREGAZL")
0^5^B30954402
"RTN","DGREGAZL",1,0)
DGREGAZL ;ALB/DW - ZIP LINKING UTILITY ; 6/25/2003
"RTN","DGREGAZL",2,0)
 ;;5.3;Registration;**522**;Aug 13, 1993
"RTN","DGREGAZL",3,0)
 ;
"RTN","DGREGAZL",4,0)
EN(RESULT,DFN) ;Let user edit zip+4, city, state, county based on zip-linking
"RTN","DGREGAZL",5,0)
 ; Output: RESULT(field#) = User Input External ^ Internal
"RTN","DGREGAZL",6,0)
 K RESULT
"RTN","DGREGAZL",7,0)
 N DGIND
"RTN","DGREGAZL",8,0)
 I $G(DFN)="" S RESULT=-1 Q
"RTN","DGREGAZL",9,0)
 N DGR,DGDFLT,DGALW,DGZIP,DGN
"RTN","DGREGAZL",10,0)
 S DGN=""
"RTN","DGREGAZL",11,0)
 I $$FOREIGN() D  Q
"RTN","DGREGAZL",12,0)
 . D FRGNEDT(.DGR,DFN)
"RTN","DGREGAZL",13,0)
 . I $G(DGR)=-1 S RESULT=-1 Q
"RTN","DGREGAZL",14,0)
 . F DGN=.1112,.114,.115,.117 S RESULT(DGN)=$G(DGR(DGN))
"RTN","DGREGAZL",15,0)
 S DGZIP=$$ZIP(DFN)
"RTN","DGREGAZL",16,0)
 I DGZIP=-1 S RESULT=-1 Q
"RTN","DGREGAZL",17,0)
 S RESULT(.1112)=DGZIP
"RTN","DGREGAZL",18,0)
 S DGIND=$$CITY(.DGR,DGZIP,DFN)
"RTN","DGREGAZL",19,0)
 I $G(DGR)=-1 S RESULT=-1 Q
"RTN","DGREGAZL",20,0)
 S RESULT(.114)=$G(DGR)
"RTN","DGREGAZL",21,0)
 S DGALW=$$ALWEDT^DGREGDD1($G(DUZ),DGZIP)
"RTN","DGREGAZL",22,0)
 I DGALW=1 D
"RTN","DGREGAZL",23,0)
 . K DGR D STCNTY(.DGR,DGZIP,DFN,DGIND)
"RTN","DGREGAZL",24,0)
 . I $G(DGR)=-1 S RESULT=-1 Q
"RTN","DGREGAZL",25,0)
 . S RESULT(.115)=$G(DGR(.115))
"RTN","DGREGAZL",26,0)
 . S RESULT(.117)=$G(DGR(.117))
"RTN","DGREGAZL",27,0)
 I DGALW=0 D
"RTN","DGREGAZL",28,0)
 . I DGZIP'="" D LINK(.DGDFLT,DGZIP,1)
"RTN","DGREGAZL",29,0)
 . S RESULT(.115)=$G(DGDFLT(.115))
"RTN","DGREGAZL",30,0)
 . S RESULT(.117)=$G(DGDFLT(.117))
"RTN","DGREGAZL",31,0)
 Q
"RTN","DGREGAZL",32,0)
ZIP(DFN) ;Let user input zip+4
"RTN","DGREGAZL",33,0)
ZAGN N DIR,DTOUT,DUOUT,DIROUT,DGDATA
"RTN","DGREGAZL",34,0)
 S DIR(0)="2,.1112"
"RTN","DGREGAZL",35,0)
 S DA=DFN
"RTN","DGREGAZL",36,0)
 D ^DIR
"RTN","DGREGAZL",37,0)
 I $D(DTOUT) Q -1
"RTN","DGREGAZL",38,0)
 I $D(DUOUT)!$D(DIROUT) D UPCT^DGREGAED G ZAGN
"RTN","DGREGAZL",39,0)
 S DGZIP=$G(Y)
"RTN","DGREGAZL",40,0)
 ;allow bogus zip:
"RTN","DGREGAZL",41,0)
 I $D(^XUSEC("EAS GMT COUNTY EDIT",+DUZ)) Q DGZIP
"RTN","DGREGAZL",42,0)
 I DGZIP="" Q DGZIP
"RTN","DGREGAZL",43,0)
 D POSTALB^XIPUTIL(DGZIP,.DGDATA)
"RTN","DGREGAZL",44,0)
 I $D(DGDATA("ERROR")) D  G ZAGN
"RTN","DGREGAZL",45,0)
 . W $C(7)," ??"
"RTN","DGREGAZL",46,0)
 Q DGZIP
"RTN","DGREGAZL",47,0)
CITY(RESULT,ZIP,DFN) ;Base on zip, let user input city(#.114)
"RTN","DGREGAZL",48,0)
 ; Input:
"RTN","DGREGAZL",49,0)
 ;   ZIP - user input zip for the patient primary address
"RTN","DGREGAZL",50,0)
 ;   DFN - Interal entry number of Patient File (#2)
"RTN","DGREGAZL",51,0)
 ; Output:RESULT=-1 (input error or times or ^ out) 
"RTN","DGREGAZL",52,0)
 ;        or    =user input city
"RTN","DGREGAZL",53,0)
 ;        Array index # of selected city.
"RTN","DGREGAZL",54,0)
 K RESULT
"RTN","DGREGAZL",55,0)
 N DGDATA,DIR,DA,Y,DTOUT,DUOUT,DIROUT,DGIND
"RTN","DGREGAZL",56,0)
 N DGCITY,DGST,DGCNTY,DGABRV,DGN,DGECH,DGSOC
"RTN","DGREGAZL",57,0)
 S DGIND=""
"RTN","DGREGAZL",58,0)
 D POSTALB^XIPUTIL(ZIP,.DGDATA)
"RTN","DGREGAZL",59,0)
 D FIELD^DID(2,.114,"N","LABEL","DGCITY")
"RTN","DGREGAZL",60,0)
 S DGN=""
"RTN","DGREGAZL",61,0)
 I '$D(DGDATA("ERROR")) D
"RTN","DGREGAZL",62,0)
 . F  S DGN=$O(DGDATA(DGN)) Q:DGN=""  D
"RTN","DGREGAZL",63,0)
 .. S DGABRV=$G(DGDATA(DGN,"CITY ABBREVIATION"))
"RTN","DGREGAZL",64,0)
 .. I $G(DGDATA(DGN,"CITY"))["*" S:DGABRV'="" DGABRV=DGABRV_"*"
"RTN","DGREGAZL",65,0)
 .. S DGECH=DGN_":"_$S($G(DGABRV)'="":DGABRV,1:$G(DGDATA(DGN,"CITY")))
"RTN","DGREGAZL",66,0)
 .. S DGSOC=$S($G(DGSOC)="":DGECH,1:DGSOC_";"_DGECH)
"RTN","DGREGAZL",67,0)
 . I $D(^XUSEC("EAS GMT COUNTY EDIT",+DUZ)) D
"RTN","DGREGAZL",68,0)
 .. S DGSOC=$G(DGSOC)_";"_99_":"_"FREE TEXT"
"RTN","DGREGAZL",69,0)
 . S DIR(0)="SO^"_$G(DGSOC)
"RTN","DGREGAZL",70,0)
 . ;if zip '= zip on file, default = ""; else default=city on file
"RTN","DGREGAZL",71,0)
 . ;I ($G(DFN)'="")&($E(ZIP,1,5)=$$GET1^DIQ(2,DFN_",",.116)) D
"RTN","DGREGAZL",72,0)
 . S DIR("B")=$$GET1^DIQ(2,DFN_",",.114)
"RTN","DGREGAZL",73,0)
 . S DIR("A")=$G(DGCITY("LABEL"))
"RTN","DGREGAZL",74,0)
CAGN1 . D ^DIR
"RTN","DGREGAZL",75,0)
 . I $D(DTOUT) S RESULT=-1 Q
"RTN","DGREGAZL",76,0)
 . I $D(DUOUT)!$D(DIROUT) D UPCT^DGREGAED G CAGN1
"RTN","DGREGAZL",77,0)
 . S RESULT=$P($G(Y(0)),"*")
"RTN","DGREGAZL",78,0)
 . S DGIND=$G(Y)
"RTN","DGREGAZL",79,0)
 I ($G(Y)=99)!($D(DGDATA("ERROR"))) D
"RTN","DGREGAZL",80,0)
CAGN2 . I '$D(^XUSEC("EAS GMT COUNTY EDIT",+DUZ)) Q
"RTN","DGREGAZL",81,0)
 . N DIR,X,Y
"RTN","DGREGAZL",82,0)
 . S DIR(0)="2,.114"
"RTN","DGREGAZL",83,0)
 . S DA=DFN
"RTN","DGREGAZL",84,0)
 . D ^DIR
"RTN","DGREGAZL",85,0)
 . I $D(DTOUT) S RESULT=-1 Q
"RTN","DGREGAZL",86,0)
 . I $D(DUOUT)!$D(DIROUT) D UPCT^DGREGAED G CAGN2
"RTN","DGREGAZL",87,0)
 . S RESULT=$G(Y)
"RTN","DGREGAZL",88,0)
 Q DGIND
"RTN","DGREGAZL",89,0)
 ;
"RTN","DGREGAZL",90,0)
LINK(RESULT,ZIP,DGN) ;From zip, get the linked state,county
"RTN","DGREGAZL",91,0)
 K RESULT
"RTN","DGREGAZL",92,0)
 N DGDATA,CNTYIEN
"RTN","DGREGAZL",93,0)
 S CNTYIEN=""
"RTN","DGREGAZL",94,0)
 S DGN=$G(DGN)
"RTN","DGREGAZL",95,0)
 I (DGN="")&($$MLT^DGREGDD1(ZIP)) S DGN=1
"RTN","DGREGAZL",96,0)
 I (DGN=99)&($$MLT^DGREGDD1(ZIP)) S DGN=1
"RTN","DGREGAZL",97,0)
 I (DGN="")!(DGN=99) Q
"RTN","DGREGAZL",98,0)
 D POSTALB^XIPUTIL(ZIP,.DGDATA)
"RTN","DGREGAZL",99,0)
 S:$G(DGDATA(DGN,"STATE POINTER"))'="" CNTYIEN=$$FIND1^DIC(5.01,","_$G(DGDATA(DGN,"STATE POINTER"))_",","MOXQ",$E($G(DGDATA(DGN,"FIPS CODE")),3,5),"C")
"RTN","DGREGAZL",100,0)
 D:'CNTYIEN  ;could be duplicate county codes in subfile #5.01
"RTN","DGREGAZL",101,0)
 .Q:'$D(^DIC(5,+$G(DGDATA(DGN,"STATE POINTER")),1))
"RTN","DGREGAZL",102,0)
 .Q:$E($G(DGDATA(DGN,"FIPS CODE")),3,5)=""
"RTN","DGREGAZL",103,0)
 .S CNTYIEN=$O(^DIC(5,$G(DGDATA(DGN,"STATE POINTER")),1,"C",$E($G(DGDATA(DGN,"FIPS CODE")),3,5),""))
"RTN","DGREGAZL",104,0)
 S RESULT(.115)=$G(DGDATA(DGN,"STATE"))_U_$G(DGDATA(DGN,"STATE POINTER"))
"RTN","DGREGAZL",105,0)
 S RESULT(.117)=$G(DGDATA(DGN,"COUNTY"))_U_$G(CNTYIEN)_U_$E($G(DGDATA(DGN,"FIPS CODE")),3,5)
"RTN","DGREGAZL",106,0)
 Q
"RTN","DGREGAZL",107,0)
 ;
"RTN","DGREGAZL",108,0)
STCNTY(RESULT,ZIP,DFN,DGNUM) ;Based on zip,input state (#.115) and county (#.117)
"RTN","DGREGAZL",109,0)
 K RESULT
"RTN","DGREGAZL",110,0)
 S DGNUM=$G(DGNUM)
"RTN","DGREGAZL",111,0)
 N DGN,DGDFLT,DGST,POP,DIR,X,Y,DTOUT,DUOUT,DIROUT
"RTN","DGREGAZL",112,0)
 S POP=0
"RTN","DGREGAZL",113,0)
 D LINK(.DGDFLT,ZIP,DGNUM)
"RTN","DGREGAZL",114,0)
 F DGN=.115,.117 Q:POP  D
"RTN","DGREGAZL",115,0)
SCAGN . I DGN=.115 S DIR(0)=2_","_DGN
"RTN","DGREGAZL",116,0)
 . I ($G(DGST)="")&(DGN=.117) Q
"RTN","DGREGAZL",117,0)
 . I DGN=.117 S DIR(0)="POA^DIC(5,DGST,1,:AEMQ"
"RTN","DGREGAZL",118,0)
 . S DIR("B")=$P($G(DGDFLT(DGN)),U)
"RTN","DGREGAZL",119,0)
 . D ^DIR
"RTN","DGREGAZL",120,0)
 . I $D(DTOUT) S POP=1 Q
"RTN","DGREGAZL",121,0)
 . I $D(DUOUT)!$D(DIROUT) D UPCT^DGREGAED G SCAGN
"RTN","DGREGAZL",122,0)
 . S RESULT(DGN)=$P($G(Y),U,2)_U_$P($G(Y),U)
"RTN","DGREGAZL",123,0)
 . I DGN=.115 S DGST=$P($G(Y),U)
"RTN","DGREGAZL",124,0)
 . I DGN=.117 S RESULT(.117)=$$CNTY(DGST,$P($G(RESULT(.117)),U,2))
"RTN","DGREGAZL",125,0)
 I POP=1 S RESULT=-1
"RTN","DGREGAZL",126,0)
 Q
"RTN","DGREGAZL",127,0)
CNTY(DGST,DGCIEN) ;Return county name and code
"RTN","DGREGAZL",128,0)
 ;Input:state number and county IEN
"RTN","DGREGAZL",129,0)
 ;Output: CountyName^CountyIEN^CountyCode
"RTN","DGREGAZL",130,0)
 I ($G(DGST)="")!($G(DGCIEN)="") S RESULT=-1 Q RESULT
"RTN","DGREGAZL",131,0)
 N DGR,RESULT
"RTN","DGREGAZL",132,0)
 S DGR=$G(^DIC(5,DGST,1,DGCIEN,0))
"RTN","DGREGAZL",133,0)
 S RESULT=$P($G(DGR),U)_U_DGCIEN_U_$P($G(DGR),U,3)
"RTN","DGREGAZL",134,0)
 Q RESULT
"RTN","DGREGAZL",135,0)
FOREIGN() ;Manila (Philippines) doesn't need zip linking.
"RTN","DGREGAZL",136,0)
 ;Output: 1 - area need no zip linking
"RTN","DGREGAZL",137,0)
 ;        0 - zip-linking area
"RTN","DGREGAZL",138,0)
 I $$STA^XUAF4(+$$KSP^XUPARAM("INST"))=358 Q 1
"RTN","DGREGAZL",139,0)
 ;;;I $$STA^XUAF4(+$$KSP^XUPARAM("INST"))=500 Q 1 ;;HERE TEST
"RTN","DGREGAZL",140,0)
 Q 0
"RTN","DGREGAZL",141,0)
FRGNEDT(DGINPUT,DFN) ;Edit zip+4, city, state, county for no zip-linking area
"RTN","DGREGAZL",142,0)
 K DGINPUT
"RTN","DGREGAZL",143,0)
 N DGN,DIR,DTOUT,DUOUT,DIROUT,X,Y,POP,DGST
"RTN","DGREGAZL",144,0)
 S POP=0
"RTN","DGREGAZL",145,0)
 F DGN=.1112,.114,.115,.117 Q:POP  D
"RTN","DGREGAZL",146,0)
FAGN . I ($G(DGST)="")&(DGN=.117) Q
"RTN","DGREGAZL",147,0)
 . S DIR(0)=2_","_DGN
"RTN","DGREGAZL",148,0)
 . I DGN=.117 D
"RTN","DGREGAZL",149,0)
 .. S DIR(0)="POA^DIC(5,DGST,1,:AEMQ"
"RTN","DGREGAZL",150,0)
 .. S DIR("B")=$$GET1^DIQ(2,DFN_",",.117)
"RTN","DGREGAZL",151,0)
 . I DGN'=.117 S DA=DFN
"RTN","DGREGAZL",152,0)
 . D ^DIR
"RTN","DGREGAZL",153,0)
 . I $D(DTOUT) S POP=1 Q
"RTN","DGREGAZL",154,0)
 . I $D(DUOUT)!$D(DIROUT) D UPCT^DGREGAED G FAGN
"RTN","DGREGAZL",155,0)
 . I (DGN=.114)!(DGN=.1112) S DGINPUT(DGN)=$G(Y)
"RTN","DGREGAZL",156,0)
 . I (DGN=.115) D
"RTN","DGREGAZL",157,0)
 .. S DGST=$P($G(Y),U)
"RTN","DGREGAZL",158,0)
 .. I DGST=$$GET1^DIQ(2,DFN_",",.115,"I") D
"RTN","DGREGAZL",159,0)
 ... S DGINPUT(.115)=$$GET1^DIQ(2,DFN_",",.115)_U_DGST
"RTN","DGREGAZL",160,0)
 .. I DGST'=$$GET1^DIQ(2,DFN_",",.115,"I") D
"RTN","DGREGAZL",161,0)
 ... S DGINPUT(.115)=$P($G(Y(0)),U)_U_DGST
"RTN","DGREGAZL",162,0)
 . I DGN=.117 S DGINPUT(DGN)=$P($G(Y),U,2)_U_$P($G(Y),U)
"RTN","DGREGAZL",163,0)
 I POP=1 S RESULT=-1
"RTN","DGREGAZL",164,0)
 Q
"RTN","DGREGDD1")
0^1^B21290803
"RTN","DGREGDD1",1,0)
DGREGDD1 ;ALB/REW/BRM - REGISTRATION PATIENT FILE MUMPS X-REF ; 10/22/02 2:17pm
"RTN","DGREGDD1",2,0)
 ;;5.3;Registration;**454,522**;Aug 13, 1993
"RTN","DGREGDD1",3,0)
 ;
"RTN","DGREGDD1",4,0)
 ; VARIABLES FOR TAGS SZIP,KFIELD:
"RTN","DGREGDD1",5,0)
 ;  INPUT:
"RTN","DGREGDD1",6,0)
 ;       DFN      IEN OF PATIENT FILE  - 1ST PARAMETER (REQUIRED)
"RTN","DGREGDD1",7,0)
 ;       DGFLD:   NEW FIELD# (SET/KILLED BY X-REF)
"RTN","DGREGDD1",8,0)
 ;       DGNODE:  NODE OF NEW FIELD
"RTN","DGREGDD1",9,0)
 ;       DGPIECE: PC # OF NEW FIELD
"RTN","DGREGDD1",10,0)
 ;       X:       STORED VALUE OF NEW FIELD
"RTN","DGREGDD1",11,0)
 ;   USED:
"RTN","DGREGDD1",12,0)
 ;       DGIX:    X-REF#
"RTN","DGREGDD1",13,0)
 ;       DGRGFL1: FLAG TO PREVENT INFINITE LOOP
"RTN","DGREGDD1",14,0)
 ;       DGRGX:   STORED VALUE OF X
"RTN","DGREGDD1",15,0)
 ;
"RTN","DGREGDD1",16,0)
SET(DFN,DGFLD,DGNODE,DGPIECE,X) ; SET NEW FIELD & DO SET X-REFS
"RTN","DGREGDD1",17,0)
 Q:$G(DGRGFL1)!'$G(DGFLD)!'$G(DGPIECE)!($G(X)']"")!($G(DGNODE)']"")
"RTN","DGREGDD1",18,0)
 N DGIX,DGRGFL1,DGRGX
"RTN","DGREGDD1",19,0)
 S DGRGX=X,DGRGFL1=1
"RTN","DGREGDD1",20,0)
 S $P(^DPT(DFN,DGNODE),U,DGPIECE)=DGRGX
"RTN","DGREGDD1",21,0)
 F DGIX=0:0 S DGIX=$O(^DD(2,DGFLD,1,DGIX)) Q:'DGIX  S X=DGRGX X ^(DGIX,1)
"RTN","DGREGDD1",22,0)
 Q
"RTN","DGREGDD1",23,0)
 ;
"RTN","DGREGDD1",24,0)
KILL(DFN,DGFLD,DGNODE,DGPIECE,X) ; KILL OLD FIELD & DO KILL X-REFS
"RTN","DGREGDD1",25,0)
 Q:$G(DGRGFL1)!'$G(DGFLD)!'$G(DGPIECE)!($G(X)']"")!($G(DGNODE)']"")
"RTN","DGREGDD1",26,0)
 N DGIX,DGRGFL1,DGRGX
"RTN","DGREGDD1",27,0)
 S DGRGX=X,DGRGFL1=1
"RTN","DGREGDD1",28,0)
 S $P(^DPT(DFN,DGNODE),U,DGPIECE)=""
"RTN","DGREGDD1",29,0)
 F DGIX=0:0 S DGIX=$O(^DD(2,DGFLD,1,DGIX)) Q:'DGIX  S X=DGRGX X ^(DGIX,2)
"RTN","DGREGDD1",30,0)
 Q
"RTN","DGREGDD1",31,0)
SETMULT(DFN,DFN1,MULTNUM,MULTNODE,DGFLD,DGNODE,DGPIECE,X) ; SET
"RTN","DGREGDD1",32,0)
 ; SETSNEW FIELD & DOES SET X-REFS
"RTN","DGREGDD1",33,0)
 Q:$G(DGRGFL1)!'$G(DGFLD)!'$G(DGPIECE)!($G(X)']"")!($G(DGNODE)']"")!('$G(MULTNUM))!(MULTNODE']"")!('$G(DFN))!($G(DFN1)']"")
"RTN","DGREGDD1",34,0)
 N DGIX,DGRGFL1,DGRGX
"RTN","DGREGDD1",35,0)
 S DGRGX=X,DGRGFL1=1
"RTN","DGREGDD1",36,0)
 S $P(^DPT(DFN,MULTNODE,DFN1,DGNODE),U,DGPIECE)=DGRGX
"RTN","DGREGDD1",37,0)
 F DGIX=0:0 S DGIX=$O(^DD(MULTNUM,DGFLD,1,DGIX)) Q:'DGIX  S X=DGRGX X ^(DGIX,1)
"RTN","DGREGDD1",38,0)
 Q
"RTN","DGREGDD1",39,0)
KILLMULT(DFN,DFN1,MULTNUM,MULTNODE,DGFLD,DGNODE,DGPIECE,X) ; KILL
"RTN","DGREGDD1",40,0)
 ;KILLS OLD FIELD & DOES KILL X-REF
"RTN","DGREGDD1",41,0)
 Q:$G(DGRGFL1)!'$G(DGFLD)!'$G(DGPIECE)!($G(X)']"")!($G(DGNODE)']"")!('$G(MULTNUM))!(MULTNODE']"")!('$G(DFN))!($G(DFN1)']"")
"RTN","DGREGDD1",42,0)
 N DGIX,DGRGFL1,DGRGX
"RTN","DGREGDD1",43,0)
 S DGRGX=X,DGRGFL1=1
"RTN","DGREGDD1",44,0)
 S DGRGX=$P($G(^DPT(DFN,MULTNODE,DFN1,DGNODE)),U,DGPIECE)
"RTN","DGREGDD1",45,0)
 S $P(^DPT(DFN,MULTNODE,DFN1,DGNODE),U,DGPIECE)=""
"RTN","DGREGDD1",46,0)
 F DGIX=0:0 S DGIX=$O(^DD(MULTNUM,DGFLD,1,DGIX)) Q:'DGIX  S X=DGRGX X ^(DGIX,2)
"RTN","DGREGDD1",47,0)
 Q
"RTN","DGREGDD1",48,0)
 ;
"RTN","DGREGDD1",49,0)
ZIP(DA,ZIP,CITY) ; update city, state and county based on zip code change
"RTN","DGREGDD1",50,0)
 ;
"RTN","DGREGDD1",51,0)
 ;   This tag will be used to link the patient's zip code
"RTN","DGREGDD1",52,0)
 ;   with the associated city, state, and county code as
"RTN","DGREGDD1",53,0)
 ;   established by the US Postal Service.  The 'AZIPLINK' and
"RTN","DGREGDD1",54,0)
 ;   'AZIPLNK' new style x-refs on the Patient (#2) file call
"RTN","DGREGDD1",55,0)
 ;   this tag if the Zip+4 (.1112) or Zip Code (.116) fields change.
"RTN","DGREGDD1",56,0)
 ;
"RTN","DGREGDD1",57,0)
 ; Input:
"RTN","DGREGDD1",58,0)
 ;   DA    - Patient File (#2) Patient record DFN
"RTN","DGREGDD1",59,0)
 ;   ZIP - ZIP+4 (.1112) or ZIP CODE (.116) field of the Patient
"RTN","DGREGDD1",60,0)
 ;         File (#2) entry that is being edited
"RTN","DGREGDD1",61,0)
 ;
"RTN","DGREGDD1",62,0)
 ; Output:
"RTN","DGREGDD1",63,0)
 ;   1 - The values in the following fields were updated with the
"RTN","DGREGDD1",64,0)
 ;       USPS data associated with the new zipcode:
"RTN","DGREGDD1",65,0)
 ;          CITY field (.114) of the Patient File (#2)
"RTN","DGREGDD1",66,0)
 ;          STATE field (.115) of the Patient File (#2)
"RTN","DGREGDD1",67,0)
 ;          COUNTY field (.117) of the Patient File (#2)
"RTN","DGREGDD1",68,0)
 ;   0 - the above fields were NOT updated
"RTN","DGREGDD1",69,0)
 ;
"RTN","DGREGDD1",70,0)
 I 'DA!$G(ZIP)="" K EASZIPLK Q 0
"RTN","DGREGDD1",71,0)
 I '$D(EASZIPLK) Q 0
"RTN","DGREGDD1",72,0)
 N EASDATA,FDA,MSG,DGN,CNTYIEN
"RTN","DGREGDD1",73,0)
 S EASDO2=1
"RTN","DGREGDD1",74,0)
 I '$$MLT(ZIP) K EASZIPLK Q 0
"RTN","DGREGDD1",75,0)
 I $$FOREIGN^DGREGAZL() K EASZIPLK Q 0
"RTN","DGREGDD1",76,0)
 D POSTAL^XIPUTIL(ZIP,.EASDATA)
"RTN","DGREGDD1",77,0)
 ; accomodate 15 character limit on the city in the patient file
"RTN","DGREGDD1",78,0)
 ; set FDA array to be filed in the Patient (#2) file
"RTN","DGREGDD1",79,0)
 S CNTYIEN=""
"RTN","DGREGDD1",80,0)
 S:$G(EASDATA("STATE POINTER"))'="" CNTYIEN=$$FIND1^DIC(5.01,","_$G(EASDATA("STATE POINTER"))_",","MOXQ",$E($G(EASDATA("FIPS CODE")),3,5),"C")
"RTN","DGREGDD1",81,0)
 D:'CNTYIEN  ;could be duplicate county codes in subfile #5.01
"RTN","DGREGDD1",82,0)
 .Q:'$D(^DIC(5,+$G(EASDATA("STATE POINTER")),1))
"RTN","DGREGDD1",83,0)
 .Q:$E($G(EASDATA("FIPS CODE")),3,5)=""
"RTN","DGREGDD1",84,0)
 .S CNTYIEN=$O(^DIC(5,$G(EASDATA("STATE POINTER")),1,"C",$E($G(EASDATA("FIPS CODE")),3,5),""))
"RTN","DGREGDD1",85,0)
 S FDA(2,DA_",",.115)=$S(CNTYIEN:$G(EASDATA("STATE POINTER")),1:$G(EASDATA("STATE")))
"RTN","DGREGDD1",86,0)
 S FDA(2,DA_",",.117)=$S(CNTYIEN:CNTYIEN,1:$G(EASDATA("COUNTY")))
"RTN","DGREGDD1",87,0)
 ; file data
"RTN","DGREGDD1",88,0)
 D FILE^DIE($S(CNTYIEN:"",1:"E"),"FDA","MSG")
"RTN","DGREGDD1",89,0)
 K EASZIPLK
"RTN","DGREGDD1",90,0)
 Q '$D(MSG)
"RTN","DGREGDD1",91,0)
KEY(DUZ,DFN) ; determine if a security key is necessary for editing
"RTN","DGREGDD1",92,0)
 ; a patient's state and county fields.  If it is necessary,
"RTN","DGREGDD1",93,0)
 ; determine if this user holds it.
"RTN","DGREGDD1",94,0)
 ;
"RTN","DGREGDD1",95,0)
 ; INPUT:
"RTN","DGREGDD1",96,0)
 ;   DUZ - ien for the #200 file of the user
"RTN","DGREGDD1",97,0)
 ;   DFN - ien of the #2 file for the patient
"RTN","DGREGDD1",98,0)
 ;
"RTN","DGREGDD1",99,0)
 K EASDO2  ;kill zip code linking flag (AZIPLINK and AZIPLNK x-refs)
"RTN","DGREGDD1",100,0)
 Q:'$D(DUZ)!('$D(DFN)) 0
"RTN","DGREGDD1",101,0)
 N ZIP,DGR
"RTN","DGREGDD1",102,0)
 S ZIP=$E($$GET1^DIQ(2,DFN_",",.1112),1,5)
"RTN","DGREGDD1",103,0)
 S DGR=$$ALWEDT(DUZ,ZIP)
"RTN","DGREGDD1",104,0)
 Q DGR
"RTN","DGREGDD1",105,0)
ALWEDT(DUZ,ZIP) ; determine if a security key is necessary for editing
"RTN","DGREGDD1",106,0)
 ; Input: zip code
"RTN","DGREGDD1",107,0)
 ; Output: 1: allow edit state and county
"RTN","DGREGDD1",108,0)
 ;         0: don't allow edit state and county
"RTN","DGREGDD1",109,0)
 N EASDATA
"RTN","DGREGDD1",110,0)
 I $G(ZIP)="" Q 0
"RTN","DGREGDD1",111,0)
 I '$D(DUZ) Q 0
"RTN","DGREGDD1",112,0)
 I '$$MLT(ZIP) Q 1 ; > 1 state or county for the zip - allow edit
"RTN","DGREGDD1",113,0)
 I $$FOREIGN^DGREGAZL() Q 1 ; Foreign location - allow edit
"RTN","DGREGDD1",114,0)
 D POSTAL^XIPUTIL(ZIP,.EASDATA)
"RTN","DGREGDD1",115,0)
 Q:$D(EASDATA("ERROR")) 1  ;zip code does not exist - allow editing
"RTN","DGREGDD1",116,0)
 Q:'$D(EASDATA("FIPS CODE")) 1  ;cnty code does not exist - allow edit
"RTN","DGREGDD1",117,0)
 Q:'$D(EASDATA("STATE")) 1  ;state does not exist - allow editing
"RTN","DGREGDD1",118,0)
 Q:$D(^XUSEC("EAS GMT COUNTY EDIT",+DUZ)) 1  ;user holds security key
"RTN","DGREGDD1",119,0)
 W !,"STATE: ",$G(EASDATA("STATE"))
"RTN","DGREGDD1",120,0)
 W !,"COUNTY: ",$G(EASDATA("COUNTY"))
"RTN","DGREGDD1",121,0)
 Q 0
"RTN","DGREGDD1",122,0)
 ;
"RTN","DGREGDD1",123,0)
MLT(ZIP) ;Determine if a zip correspond to multiple state and\or county
"RTN","DGREGDD1",124,0)
 ;Output: 0: >1 state and\or county for this zip
"RTN","DGREGDD1",125,0)
 ;        1: 1 state and 1 county for this zip
"RTN","DGREGDD1",126,0)
 N DGN,DGFIPS,DGDATA,POP,DGCNTY,DGST
"RTN","DGREGDD1",127,0)
 S (DGN,DGST,DGCNTY,DGFIPS)=""
"RTN","DGREGDD1",128,0)
 S POP=0
"RTN","DGREGDD1",129,0)
 D POSTALB^XIPUTIL(ZIP,.DGDATA)
"RTN","DGREGDD1",130,0)
 I $D(DGDATA("ERROR")) Q 0
"RTN","DGREGDD1",131,0)
 S DGN=$O(DGDATA(DGN))
"RTN","DGREGDD1",132,0)
 S DGFIPS=$G(DGDATA(DGN,"FIPS CODE"))
"RTN","DGREGDD1",133,0)
 F  S DGN=$O(DGDATA(DGN)) Q:(DGN="")!POP  D
"RTN","DGREGDD1",134,0)
 . I $G(DGDATA(DGN,"FIPS CODE"))'=DGFIPS S POP=1 Q
"RTN","DGREGDD1",135,0)
 I POP=1 Q 0
"RTN","DGREGDD1",136,0)
 Q 1
"RTN","DGRPCE1")
0^6^B5006000
"RTN","DGRPCE1",1,0)
DGRPCE1 ;ALB/MIR/BRM - CONSISTENCY CHECKER EDIT ;10/17/02 1:47pm
"RTN","DGRPCE1",2,0)
 ;;5.3;Registration;**108,226,470,454,489,505,522**;Aug 13, 1993
"RTN","DGRPCE1",3,0)
 N I F I=1:1:8,16,53,57,58,61,62,63,64,65,66 D SASK
"RTN","DGRPCE1",4,0)
 ;F I=49,50,52 D SASK ;BELOW REPLACED WITH ^IBCNSP2 CALL
"RTN","DGRPCE1",5,0)
 ;OLDS DR(2,2.312)="S DGRPADI="""";.01;1;2;15;8;7;3;6;S DGRPADI=X;I DGRPADI'=""v"" S Y=""@2312"";17///^S X=""`""_DFN;16///^S X=""01"";S Y=""@23121"";@2312;17;16//^S X=$S(DGRPADI=""s"":""02"",1:"""");@23121;9:14;"
"RTN","DGRPCE1",6,0)
 D SAVE Q
"RTN","DGRPCE1",7,0)
SASK I DGER[(","_I_","),DGASK'[(","_I_",") S DGD=DGD_$P($T(@I),";;",2,999),DGASK=DGASK_I_","
"RTN","DGRPCE1",8,0)
 Q
"RTN","DGRPCE1",9,0)
SAVE I $L(@DGDR)+$L(DGD)<241 S @DGDR=@DGDR_DGD,DGD="" Q
"RTN","DGRPCE1",10,0)
 S DGDRC=DGDRC+1,DGDR="DR(1,2,"_DGDRC_")",@DGDR=DGD,DGD="" Q
"RTN","DGRPCE1",11,0)
 ;
"RTN","DGRPCE1",12,0)
 ;
"RTN","DGRPCE1",13,0)
ELIG ;eligibility code...if M11+, use compiled template, otherwise DR string
"RTN","DGRPCE1",14,0)
 I ^%ZOSF("OS")'["M/11+" S DGD=$P($T(14),";;",2,999) D SAVE Q
"RTN","DGRPCE1",15,0)
 N DA,DIE,DR S DIE="^DPT(",DA=DFN,DR="[DG CONSISTENCY CHECKER]" D ^DIE
"RTN","DGRPCE1",16,0)
 Q
"RTN","DGRPCE1",17,0)
 ;
"RTN","DGRPCE1",18,0)
 ;
"RTN","DGRPCE1",19,0)
1 ;;.01;
"RTN","DGRPCE1",20,0)
2 ;;1;
"RTN","DGRPCE1",21,0)
3 ;;.02;
"RTN","DGRPCE1",22,0)
4 ;;.03;
"RTN","DGRPCE1",23,0)
5 ;;.05;
"RTN","DGRPCE1",24,0)
6 ;;.08;
"RTN","DGRPCE1",25,0)
7 ;;.09;
"RTN","DGRPCE1",26,0)
8 ;;N FLG S FLG(2)=1 S:$G(DGER)[",61," FLG(1)=1 D EN^DGREGAED(DFN,.FLG);
"RTN","DGRPCE1",27,0)
14 ;;.361;S DGECODE=$S($D(^DIC(8,+X,0)):$P(^(0),"^",1),1:"");S:$S(DGECODE["ALLIED":0,DGECODE["FEDERAL":0,1:1) Y=.323;.309;.323;D ^DGYZODS;S:'DGODS Y="";11500.02;11500.03;
"RTN","DGRPCE1",28,0)
16 ;;.351;
"RTN","DGRPCE1",29,0)
53 ;;.07;.31115;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@53";.3111;S:X']"" Y="@53";.3113;S:X']"" Y=.3116;.3114;S:X']"" Y=.3116;.3115:.3117;.2205;.3119;@53;
"RTN","DGRPCE1",30,0)
57 ;;.381;.382///NOW;
"RTN","DGRPCE1",31,0)
58 ;;.322013;S:X'="Y" Y="@589";.322014;.322015;.32201;S:X'="Y" Y="@581";.322011;.322012;@581;.322016;S:X'="Y" Y="@589";.322017;.322018;@589;
"RTN","DGRPCE1",32,0)
61 ;;S:$G(DGER)[",8," Y="@619";.131;.132;@619;
"RTN","DGRPCE1",33,0)
62 ;;.331;
"RTN","DGRPCE1",34,0)
63 ;;.1411;S DIE("NO^")="OUTOK";S:X']"" Y=.1414;.1412;S:X']"" Y=.1414;.1413;.1414;.1415;.1416;Q;.14111;K DIE("NO^");
"RTN","DGRPCE1",35,0)
64 ;;.092;.093;
"RTN","DGRPCE1",36,0)
65 ;;.2403;
"RTN","DGRPCE1",37,0)
66 ;;.09;
"RTN","DGRPE")
0^2^B40131124
"RTN","DGRPE",1,0)
DGRPE ;ALB/MRL - REGISTRATIONS EDITS ; 8/11/03 1:27pm
"RTN","DGRPE",2,0)
 ;;5.3;Registration;**32,114,139,169,175,247,190,343,397,342,454,415,489,506,244,547,522**;Aug 13, 1993
"RTN","DGRPE",3,0)
 ;
"RTN","DGRPE",4,0)
 ;DGDR contains a string of edits; edit=screen*10+item #
"RTN","DGRPE",5,0)
 ;
"RTN","DGRPE",6,0)
 ;line tag screen*10+item*1000 = continuation line
"RTN","DGRPE",7,0)
 ;
"RTN","DGRPE",8,0)
 I DGRPS=8 D ^DGRPEIS,Q Q  ; family demographic edit...not conventional!!  :)
"RTN","DGRPE",9,0)
 I DGRPS=9 D EDIT9^DGRPEIS2,Q Q  ; income screening data ($$$)
"RTN","DGRPE",10,0)
 I DGRPS=5,DGDR["501," D
"RTN","DGRPE",11,0)
 .I $G(DGPRFLG) D PREG^IBCNBME(DFN) Q
"RTN","DGRPE",12,0)
 .D REG^IBCNBME(DFN)
"RTN","DGRPE",13,0)
 .Q
"RTN","DGRPE",14,0)
 ;-- Tricare screen #15
"RTN","DGRPE",15,0)
 I DGRPS=15 D EDIT^DGRP15,Q Q
"RTN","DGRPE",16,0)
 ;
"RTN","DGRPE",17,0)
 N DGPH,DGPHFLG
"RTN","DGRPE",18,0)
 K DR S (DA,Y)=DFN,DIE="^DPT(",DR="",DGDRS="DR",DGCT=0 G ^DGRPE1:DGRPS>6
"RTN","DGRPE",19,0)
 F I=1:1 S J=$P(DGDR,",",I) Q:J=""  F J1=J,J*1000,J*1000+1,J*1000+2 Q:'$T(@J1)  S DGDRD=$P($T(@J1),";;",2) D S
"RTN","DGRPE",20,0)
 D ^DIE
"RTN","DGRPE",21,0)
 I $G(DGPHFLG)>0 D EDITPH1^DGRPLE()
"RTN","DGRPE",22,0)
Q K DA,DIE,DR,DGCT,DGDR,DGDRD,DGDRS,DGRPADI,I,J,J1
"RTN","DGRPE",23,0)
 Q
"RTN","DGRPE",24,0)
S I $L(@DGDRS)+$L(DGDRD)<241 S @DGDRS=@DGDRS_DGDRD Q
"RTN","DGRPE",25,0)
 S DGCT=DGCT+1,DGDRS="DR(1,2,"_DGCT_")",@DGDRS=DGDRD Q
"RTN","DGRPE",26,0)
 Q
"RTN","DGRPE",27,0)
101 ;;K DG20NAME;.01;.01///^S X=$$NCEDIT^DPTNAME(DFN,,.DG20NAME);K DG20NAME;.09;.03;
"RTN","DGRPE",28,0)
102 ;;1;
"RTN","DGRPE",29,0)
103 ;;.091;
"RTN","DGRPE",30,0)
104 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);
"RTN","DGRPE",31,0)
105 ;;.12105//NO;S:X="N" Y="@15" S:X="Y" DIE("NO^")="";.1217;I X']"" W !?4,$C(7),"But I need a Start Date for this Temporary Address." S Y=.12105;.1218;.1211;I X']"" W !?4,$C(7),"But I need at least one line of a Temporary address." S Y=.12105;
"RTN","DGRPE",32,0)
111 ;;.14105//NO;S:X="N" Y="@15" S:X="Y" DIE("NO^")="";.1417;I X']"" W !?4,$C(7),"But I need a Start Date." S Y=.14105;.1418;D DR111^DGRPE;.141;I '$P($$CAACT^DGRPCADD(DFN),U,2) W !?4,"But I need at least one active category." S Y=.14105;
"RTN","DGRPE",33,0)
111000 ;;K DR(2,2.141);.1411;I X']"" W !?4,$C(7),"I need at least one line of Address." S Y=.14105;.1412;S:X']"" Y=.1414;.1413;.1414;.1415;.1416;Q;.14111;@15;K DIE("NO^");
"RTN","DGRPE",34,0)
109 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);.02;D DR109^DGRPE;6;2;K DR(2,2.02),DR(2,2.06);.05;.08;K DIE("NO^");
"RTN","DGRPE",35,0)
105000 ;;.1212;S:X']"" Y=.1214;.1213:.1215;.12112;Q;.12111;.1219;@15;K DIE("NO^");
"RTN","DGRPE",36,0)
201 ;;.02;.05;.08;.092;.093;.2401:.2403;57.4//NOT APPLICABLE;
"RTN","DGRPE",37,0)
202 ;;1010.15//NO;S:X'="Y" Y="@22";S DIE("NO^")="";1010.152;I X']"" W !?4,*7,"But I need to know where you were treated most recently." S Y=1010.15;1010.151;1010.154;S:X']"" Y="@22";1010.153;@22;K DIE("NO^");
"RTN","DGRPE",38,0)
203 ;;D DR203^DGRPE;6ETHNICITY;2RACE;K DR(2,2.02),DR(2,2.06);
"RTN","DGRPE",39,0)
301 ;;.211;S:X']"" Y="@31";.212;.2125//NO;I X="Y" S DGADD=".21" D AD^DGRPE S Y=.21011;.213;S:X']"" Y=.216;.214;S:X']"" Y=.216;.215:.217;.2207;.219;.21011;@31;
"RTN","DGRPE",40,0)
302 ;;.2191;S:X']"" Y="@32";.2192;.21925//NO;I X="Y" S DGADD=".211" D AD^DGRPE S Y=.211011;
"RTN","DGRPE",41,0)
302000 ;;.2193;S:X']"" Y=.2196;.2194;S:X']"" Y=.2196;.2195:.2197;.2203;.2199;.211011;@32;
"RTN","DGRPE",42,0)
303 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@33";.3305//NO;I X="Y" S Y="@34",DGX1=1;@33;S:$D(^DPT(DFN,.22)) $P(^(.22),U,1)=$P(^(.22),U,7);.331;S:X']"" DGX1=2,Y="@34";.332;@34;
"RTN","DGRPE",43,0)
303000 ;;S:$G(DGX1) Y="@341";.333;S:X']"" Y=.336;.334;S:X']"" Y=.336;.335:.337;.2201;.339;.33011;S DGX1=2;@341;
"RTN","DGRPE",44,0)
303001 ;;S:$G(DGX1)=2 Y="@35";S DGX2=$G(^DPT(DA,.21));.331///^S X=$P(DGX2,U);.332///^S X=$P(DGX2,U,2);.333///^S X=$P(DGX2,U,3);.334///^S X=$P(DGX2,U,4);@35;
"RTN","DGRPE",45,0)
303002 ;;S:$G(DGX1)=2 Y="@351";.335///^S X=$P(DGX2,U,5);.336///^S X=$P(DGX2,U,6);.337///^S X=$P(DGX2,U,7);.338///^S X=$P(DGX2,U,8);.339///^S X=$P(DGX2,U,9);.33011///^S X=$P(DGX2,U,11);@351;K DGX1,DGX2;
"RTN","DGRPE",46,0)
304 ;;.3311;S:X']"" Y="@36";.3312;.3313;S:X']"" Y=.3316;.3314;S:X']"" Y=.3316;.3315:.3317;.2204;.3319;.331011;@36;        
"RTN","DGRPE",47,0)
305 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@37";.3405//NO;I X="Y" S DGX1=1,Y="@371";@37;S:$D(^DPT(DFN,.22)) $P(^(.22),U,2)=$P(^(.22),U,7);.341;S:X']"" DGX1=2,Y="@371";.342;@371;
"RTN","DGRPE",48,0)
305000 ;;S:$G(DGX1) Y="@38";.343;S:X']"" Y=.346;.344;S:X']"" Y=.346;.345:.347;.2202;.349;.34011;S DGX1=2;@38;
"RTN","DGRPE",49,0)
305001 ;;S:$G(DGX1)=2 Y="@381";S DGX2=$G(^DPT(DA,.21));.341///^S X=$P(DGX2,U);.342///^S X=$P(DGX2,U,2);.343///^S X=$P(DGX2,U,3);.344///^S X=$P(DGX2,U,4);@381
"RTN","DGRPE",50,0)
305002 ;;S:$G(DGX1)=2 Y="@39";.345///^S X=$P(DGX2,U,5);.346///^S X=$P(DGX2,U,6);.347///^S X=$P(DGX2,U,7);.348///^S X=$P(DGX2,U,8);.349///^S X=$P(DGX2,U,9);.34011///^S X=$P(DGX2,U,11);@39;K DGX1,DGX2;
"RTN","DGRPE",51,0)
401 ;;.07;.31115;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@41";.3111;S:X']"" Y="@41";.3113;S:X']"" Y=.3116;.3114;S:X']"" Y=.3116;.3115:.3117;.2205;.3119;@41;
"RTN","DGRPE",52,0)
402 ;;.2514;.2515;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@42";.251;S:X']"" Y="@42";.252;S:X']"" Y=.255;.253;S:X']"" Y=.255;.254:.256;.2206;.258;@42;
"RTN","DGRPE",53,0)
501 ;;
"RTN","DGRPE",54,0)
502 ;;.381;.382///NOW;
"RTN","DGRPE",55,0)
503 ;;.383;
"RTN","DGRPE",56,0)
601 ;;.325;S:X']"" Y="@61";.328;.326;.327;.324;.3285//NO;S:X'="Y" Y="@61";.3291;S:X']"" Y="@61";.3294;.3292;.3293;.329;.32945//NO;S:X'="Y" Y="@61";.3296;S:X']"" Y="@61";.3299;.3297;.3298;.3295;@61;
"RTN","DGRPE",57,0)
602 ;;.525//NO;S:X'="Y" Y="@62";.526:.528;@62;
"RTN","DGRPE",58,0)
603 ;;.5291//NO;S:X'="Y" Y="@63";.5292:.5294;@63;
"RTN","DGRPE",59,0)
604 ;;.32101//NO;S:X'="Y" Y="@64";.32104;.32105;@64;
"RTN","DGRPE",60,0)
605 ;;.32102//NO;S:X'="Y" Y="@65";.32107;.32109;.3211;.3213;@65;
"RTN","DGRPE",61,0)
606 ;;.32103//NO;S:X'="Y" Y="@66";.3212;.32111;@66;
"RTN","DGRPE",62,0)
607 ;;.3221//NO;S:X'="Y" Y="@67";.3222;Q;.3223;@67;
"RTN","DGRPE",63,0)
608 ;;.3224//NO;S:X'="Y" Y="@68";.3225;Q;.3226;@68;
"RTN","DGRPE",64,0)
609 ;;.3227//NO;S:X'="Y" Y="@69";.3228;Q;.3229;@69;
"RTN","DGRPE",65,0)
610 ;;.32201//NO;S:X'="Y" Y="@610";.322011;Q;.322012;@610;
"RTN","DGRPE",66,0)
611 ;;.322016//NO;S:X'="Y" Y="@611";.322017;Q;.322018;@611;
"RTN","DGRPE",67,0)
612 ;;.322013//NO;S:X'="Y" Y="@612";.322014;Q;.322015;@612;
"RTN","DGRPE",68,0)
613 ;;.362;
"RTN","DGRPE",69,0)
614 ;;.368//NO;.369//NO;I $S('$D(^DPT(DA,.36)):1,$P(^(.36),U,8)="Y"!($P(^(.36),U,9)="Y"):0,1:1) S Y="@614";.37;@614;
"RTN","DGRPE",70,0)
615 ;;.322019//NO;S:X'="Y" Y="@615";.32202;Q;.322021;@615;
"RTN","DGRPE",71,0)
616 ;;S DGPHFLG=0;.531;S:X'="Y" DGX=X,Y="@616";.532///^S X="PENDING";S Y="@6161";@616;S:DGX'="N" Y="@6162";.533///^S X="VAMC";@6161;S DGPHFLG=1;.535///^S X=$$DIV^DGRPLE();@6162;
"RTN","DGRPE",72,0)
617 ;;D REG^DGNTQ(DFN);
"RTN","DGRPE",73,0)
AD N DGZ4,DGPC
"RTN","DGRPE",74,0)
 S X=$S($D(^DPT(DA,.11)):^(.11),1:""),DGZ4=$P(X,U,12),DGPHONE=$S($D(^(.13)):$P(^(.13),U,1),1:""),Y=$S($D(^(DGADD)):^(DGADD),1:""),^(DGADD)=$P(Y,U,1)_U_$P(Y,U,2)_U_$P(X,U,1,6)_U_DGPHONE_U_$P(Y,U,10)
"RTN","DGRPE",75,0)
 I DGZ4 S DGPC=$S((DGADD=.33):1,(DGADD=.34):2,(DGADD=.211):3,(DGADD=.331):4,(DGADD=.311):5,(DGADD=.25):6,(DGADD=.21):7,1:0) S:DGPC $P(^DPT(DFN,.22),U,DGPC)=DGZ4
"RTN","DGRPE",76,0)
 K DGADD,DGPHONE Q
"RTN","DGRPE",77,0)
DR109 ;Drop through (use same logic as DR203)
"RTN","DGRPE",78,0)
DR203 S DR(2,2.02)=".01RACE;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.02,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2031"";.02;@2031;"
"RTN","DGRPE",79,0)
 S DR(2,2.06)=".01ETHNICITY;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.06,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2032"";.02;@2032;"
"RTN","DGRPE",80,0)
 Q
"RTN","DGRPE",81,0)
DR111 ;Set DR string for Confidential Address categories
"RTN","DGRPE",82,0)
 S DR(2,2.141)=".01;1//YES;"
"RTN","DGRPE",83,0)
 Q
"VER")
8.0^22
"^DD",2,2,.118,0)
ADDRESS CHANGE DT/TM^D^^.11;13^S %DT="ESTX" D ^%DT S X=Y K:X<1 X
"^DD",2,2,.118,1,0)
^.1
"^DD",2,2,.118,1,1,0)
^^TRIGGER^2^.119
"^DD",2,2,.118,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X=DIV S X="VAMC" S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,14)=DIV,DIH=2,DIG=.119 D ^DICR
"^DD",2,2,.118,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X=DIV S X="VAMC" S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,14)=DIV,DIH=2,DIG=.119 D ^DICR
"^DD",2,2,.118,1,1,"%D",0)
^.101^5^5^3030605^^^
"^DD",2,2,.118,1,1,"%D",1,0)
This cross-reference will update the Address Source field when 
"^DD",2,2,.118,1,1,"%D",2,0)
address data changes for a patient.  The source will be set to 'VAMC', 
"^DD",2,2,.118,1,1,"%D",3,0)
and should be overwritten for instances where the Address source is 
"^DD",2,2,.118,1,1,"%D",4,0)
something different.  The incoming Z05 process has been updated to 
"^DD",2,2,.118,1,1,"%D",5,0)
overwrite this field as appropriate.
"^DD",2,2,.118,1,1,"CREATE VALUE")
S X="VAMC"
"^DD",2,2,.118,1,1,"DELETE VALUE")
S X="VAMC"
"^DD",2,2,.118,1,1,"FIELD")
ADDRESS CHANGE SOURCE
"^DD",2,2,.118,1,2,0)
^^TRIGGER^2^.122
"^DD",2,2,.118,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,17),X=X S DIU=X K Y S X=DIV S X=$G(DUZ) S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,17)=DIV,DIH=2,DIG=.122 D ^DICR
"^DD",2,2,.118,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.11)):^(.11),1:"") S X=$P(Y(1),U,17),X=X S DIU=X K Y S X=DIV S X=$G(DUZ) S DIH=$G(^DPT(DIV(0),.11)),DIV=X S $P(^(.11),U,17)=DIV,DIH=2,DIG=.122 D ^DICR
"^DD",2,2,.118,1,2,"%D",0)
^^2^2^3030605^
"^DD",2,2,.118,1,2,"%D",1,0)
This cross-reference will record the user who has just changed the 
"^DD",2,2,.118,1,2,"%D",2,0)
patient's primary address.
"^DD",2,2,.118,1,2,"CREATE VALUE")
S X=$G(DUZ)
"^DD",2,2,.118,1,2,"DELETE VALUE")
S X=$G(DUZ)
"^DD",2,2,.118,1,2,"DT")
3030605
"^DD",2,2,.118,1,2,"FIELD")
ADDRESS CHANGE USER
"^DD",2,2,.118,3)
(No range limit on date)
"^DD",2,2,.118,5,1,0)
2^.111^4
"^DD",2,2,.118,5,2,0)
2^.1112^3
"^DD",2,2,.118,5,3,0)
2^.112^4
"^DD",2,2,.118,5,4,0)
2^.113^3
"^DD",2,2,.118,5,5,0)
2^.114^3
"^DD",2,2,.118,5,6,0)
2^.115^4
"^DD",2,2,.118,5,7,0)
2^.116^3
"^DD",2,2,.118,9)
^
"^DD",2,2,.118,21,0)
^^1^1^3020702^
"^DD",2,2,.118,21,1,0)
This field will hold the date and time of the last Address Update.
"^DD",2,2,.118,"DT")
3030605
"^DD",2,2,.122,0)
ADDRESS CHANGE USER^P200'^VA(200,^.11;17^Q
"^DD",2,2,.122,5,1,0)
2^.118^2
"^DD",2,2,.122,9)
^
"^DD",2,2,.122,21,0)
^^1^1^3030604^
"^DD",2,2,.122,21,1,0)
The name of the user who has changed this patient's primary address.
"^DD",2,2,.122,"DT")
3030604
**INSTALL NAME**
IVM*2.0*79
"BLD",4312,0)
IVM*2.0*79^INCOME VERIFICATION MATCH^0^3031021^y
"BLD",4312,4,0)
^9.64PA^301.5^1
"BLD",4312,4,301.5,0)
301.5
"BLD",4312,4,301.5,2,0)
^9.641^301.511^1
"BLD",4312,4,301.5,2,301.511,0)
DEMOGRAPHIC UPLOAD DATA  (sub-file)
"BLD",4312,4,301.5,2,301.511,1,0)
^9.6411^.02^2
"BLD",4312,4,301.5,2,301.511,1,.02,0)
IVM CENTER DATA
"BLD",4312,4,301.5,2,301.511,1,.03,0)
DATE/TIME RECIEVED
"BLD",4312,4,301.5,222)
y^y^p^^^^n^^n
"BLD",4312,4,301.5,224)

"BLD",4312,4,"APDD",301.5,301.511)

"BLD",4312,4,"APDD",301.5,301.511,.02)

"BLD",4312,4,"APDD",301.5,301.511,.03)

"BLD",4312,4,"B",301.5,301.5)

"BLD",4312,"INI")
PRE^IVM279P
"BLD",4312,"INIT")
POST^IVM279P
"BLD",4312,"KRN",0)
^9.67PA^8989.52^19
"BLD",4312,"KRN",.4,0)
.4
"BLD",4312,"KRN",.401,0)
.401
"BLD",4312,"KRN",.402,0)
.402
"BLD",4312,"KRN",.403,0)
.403
"BLD",4312,"KRN",.5,0)
.5
"BLD",4312,"KRN",.84,0)
.84
"BLD",4312,"KRN",3.6,0)
3.6
"BLD",4312,"KRN",3.8,0)
3.8
"BLD",4312,"KRN",9.2,0)
9.2
"BLD",4312,"KRN",9.8,0)
9.8
"BLD",4312,"KRN",9.8,"NM",0)
^9.68A^9^9
"BLD",4312,"KRN",9.8,"NM",1,0)
IVMLDEM6^^0^B54973865
"BLD",4312,"KRN",9.8,"NM",2,0)
IVMLDEM7^^0^B15075195
"BLD",4312,"KRN",9.8,"NM",3,0)
IVMPREC6^^0^B30735237
"BLD",4312,"KRN",9.8,"NM",4,0)
IVMPREC8^^0^B28056096
"BLD",4312,"KRN",9.8,"NM",5,0)
IVMPTRN^^0^B34376885
"BLD",4312,"KRN",9.8,"NM",6,0)
IVMPTRN8^^0^B49588337
"BLD",4312,"KRN",9.8,"NM",7,0)
IVMLDEM9^^0^B27438854
"BLD",4312,"KRN",9.8,"NM",8,0)
IVMPTRN9^^0^B26280160
"BLD",4312,"KRN",9.8,"NM",9,0)
IVMLDEMC^^0^B10198683
"BLD",4312,"KRN",9.8,"NM","B","IVMLDEM6",1)

"BLD",4312,"KRN",9.8,"NM","B","IVMLDEM7",2)

"BLD",4312,"KRN",9.8,"NM","B","IVMLDEM9",7)

"BLD",4312,"KRN",9.8,"NM","B","IVMLDEMC",9)

"BLD",4312,"KRN",9.8,"NM","B","IVMPREC6",3)

"BLD",4312,"KRN",9.8,"NM","B","IVMPREC8",4)

"BLD",4312,"KRN",9.8,"NM","B","IVMPTRN",5)

"BLD",4312,"KRN",9.8,"NM","B","IVMPTRN8",6)

"BLD",4312,"KRN",9.8,"NM","B","IVMPTRN9",8)

"BLD",4312,"KRN",19,0)
19
"BLD",4312,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",4312,"KRN",19,"NM",1,0)
IVM ADDR UPDT PENDING REVIEW^^0
"BLD",4312,"KRN",19,"NM",2,0)
IVM UPLOAD MENU^^2
"BLD",4312,"KRN",19,"NM","B","IVM ADDR UPDT PENDING REVIEW",1)

"BLD",4312,"KRN",19,"NM","B","IVM UPLOAD MENU",2)

"BLD",4312,"KRN",19.1,0)
19.1
"BLD",4312,"KRN",101,0)
101
"BLD",4312,"KRN",409.61,0)
409.61
"BLD",4312,"KRN",771,0)
771
"BLD",4312,"KRN",870,0)
870
"BLD",4312,"KRN",8989.51,0)
8989.51
"BLD",4312,"KRN",8989.52,0)
8989.52
"BLD",4312,"KRN",8994,0)
8994
"BLD",4312,"KRN","B",.4,.4)

"BLD",4312,"KRN","B",.401,.401)

"BLD",4312,"KRN","B",.402,.402)

"BLD",4312,"KRN","B",.403,.403)

"BLD",4312,"KRN","B",.5,.5)

"BLD",4312,"KRN","B",.84,.84)

"BLD",4312,"KRN","B",3.6,3.6)

"BLD",4312,"KRN","B",3.8,3.8)

"BLD",4312,"KRN","B",9.2,9.2)

"BLD",4312,"KRN","B",9.8,9.8)

"BLD",4312,"KRN","B",19,19)

"BLD",4312,"KRN","B",19.1,19.1)

"BLD",4312,"KRN","B",101,101)

"BLD",4312,"KRN","B",409.61,409.61)

"BLD",4312,"KRN","B",771,771)

"BLD",4312,"KRN","B",870,870)

"BLD",4312,"KRN","B",8989.51,8989.51)

"BLD",4312,"KRN","B",8989.52,8989.52)

"BLD",4312,"KRN","B",8994,8994)

"BLD",4312,"QUES",0)
^9.62^^
"BLD",4312,"REQB",0)
^9.611^3^3
"BLD",4312,"REQB",1,0)
IVM*2.0*73^2
"BLD",4312,"REQB",2,0)
IVM*2.0*74^2
"BLD",4312,"REQB",3,0)
IVM*2.0*75^2
"BLD",4312,"REQB","B","IVM*2.0*73",1)

"BLD",4312,"REQB","B","IVM*2.0*74",2)

"BLD",4312,"REQB","B","IVM*2.0*75",3)

"FIA",301.5)
IVM PATIENT
"FIA",301.5,0)
^IVM(301.5,
"FIA",301.5,0,0)
301.5IP
"FIA",301.5,0,1)
y^y^p^^^^n^^n
"FIA",301.5,0,10)

"FIA",301.5,0,11)

"FIA",301.5,0,"RLRO")

"FIA",301.5,0,"VR")
2.0^IVM
"FIA",301.5,301.5)
1
"FIA",301.5,301.511)
1
"FIA",301.5,301.511,.02)

"FIA",301.5,301.511,.03)

"INI")
PRE^IVM279P
"INIT")
POST^IVM279P
"KRN",19,4618,-1)
2^2
"KRN",19,4618,0)
IVM UPLOAD MENU^IVM Upload Menu^^M^.5^IVM UPLOAD^^^^^^220^y
"KRN",19,4618,10,0)
^19.01IP^4^4
"KRN",19,4618,10,4,0)
11130
"KRN",19,4618,10,4,"^")
IVM ADDR UPDT PENDING REVIEW
"KRN",19,4618,"U")
IVM UPLOAD MENU
"KRN",19,11130,-1)
0^1
"KRN",19,11130,0)
IVM ADDR UPDT PENDING REVIEW^IVM Address Updates Pending Review^^R^^^^^^^^INCOME VERIFICATION MATCH^y
"KRN",19,11130,1,0)
^19.06^8^8^3030908^^^^
"KRN",19,11130,1,1,0)
It is recommended that this menu option should be tasked to run daily.
"KRN",19,11130,1,2,0)

"KRN",19,11130,1,3,0)
This report will display information related to patient address
"KRN",19,11130,1,4,0)
data received from HEC for patient with active pharmacy prescriptions.
"KRN",19,11130,1,5,0)

"KRN",19,11130,1,6,0)
The report also lists the date on which the address information will be 
"KRN",19,11130,1,7,0)
automatically uploaded if it has not yet been reviewed manually.
"KRN",19,11130,1,8,0)

"KRN",19,11130,25)
EN2^IVMLDEM9
"KRN",19,11130,200.9)
y
"KRN",19,11130,"U")
IVM ADDRESS UPDATES PENDING RE
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",220,-1)
1^1
"PKG",220,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",220,20,0)
^9.402P^^
"PKG",220,22,0)
^9.49I^1^1
"PKG",220,22,1,0)
2.0^2941021
"PKG",220,22,1,"PAH",1,0)
79^3031021
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
10
"RTN","IVM279P")
0^^B12345066
"RTN","IVM279P",1,0)
IVM279P ;ALB/BRM - IVM*2*79 PRE-INSTALL ; 7/30/03 10:17am
"RTN","IVM279P",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**79**; 21-OCT-94
"RTN","IVM279P",3,0)
 ;
"RTN","IVM279P",4,0)
 Q
"RTN","IVM279P",5,0)
PRE ; pre-install entry point
"RTN","IVM279P",6,0)
 ; add 3 new entries to the 301.92 file
"RTN","IVM279P",7,0)
 N FDA,DATA,ERR
"RTN","IVM279P",8,0)
 S DATA=""
"RTN","IVM279P",9,0)
 D BMES^XPDUTL("  >> Adding entries to IVM DEMOGRAPHIC UPLOAD FIELDS (#301.92) file")
"RTN","IVM279P",10,0)
 D ADDRDT(.DATA),UPDATE(.DATA)
"RTN","IVM279P",11,0)
 D ADDRSRC(.DATA),UPDATE(.DATA)
"RTN","IVM279P",12,0)
 D ADDRSIT(.DATA),UPDATE(.DATA)
"RTN","IVM279P",13,0)
 D MES^XPDUTL("")
"RTN","IVM279P",14,0)
 Q
"RTN","IVM279P",15,0)
 ;
"RTN","IVM279P",16,0)
ADDRDT(DATA) ; setup fda array for Address Change Dt/Tm entry
"RTN","IVM279P",17,0)
 S DATA(.01)="ADDRESS CHANGE DT/TM"
"RTN","IVM279P",18,0)
 S DATA(.02)="RF171",DATA(.05)=.118,DATA(.04)=2
"RTN","IVM279P",19,0)
 S (DATA(.03),DATA(.06),DATA(.07),DATA(.08))=1
"RTN","IVM279P",20,0)
 S (DATA(10),DATA(20))="S DR=.118 D LOOK^IVMPREC9"
"RTN","IVM279P",21,0)
 Q
"RTN","IVM279P",22,0)
 ;
"RTN","IVM279P",23,0)
ADDRSRC(DATA) ; setup fda array for Address Change Source entry
"RTN","IVM279P",24,0)
 S DATA(.01)="ADDRESS CHANGE SOURCE"
"RTN","IVM279P",25,0)
 S DATA(.02)="RF162",DATA(.05)=.119,DATA(.04)=2
"RTN","IVM279P",26,0)
 S (DATA(.03),DATA(.06),DATA(.07),DATA(.08))=1
"RTN","IVM279P",27,0)
 S (DATA(10),DATA(20))="S DR=.119 D LOOK^IVMPREC9"
"RTN","IVM279P",28,0)
 Q
"RTN","IVM279P",29,0)
 ;
"RTN","IVM279P",30,0)
ADDRSIT(DATA) ; setup fda array for Address Change Dt/Tm entry
"RTN","IVM279P",31,0)
 S DATA(.01)="ADDRESS CHANGE SITE"
"RTN","IVM279P",32,0)
 S DATA(.02)="RF161",DATA(.05)=.12,DATA(.04)=2
"RTN","IVM279P",33,0)
 S (DATA(.03),DATA(.06),DATA(.07),DATA(.08))=1
"RTN","IVM279P",34,0)
 S (DATA(10),DATA(20))="S DR=.12 D LOOK^IVMPREC9"
"RTN","IVM279P",35,0)
 Q
"RTN","IVM279P",36,0)
 ;
"RTN","IVM279P",37,0)
UPDATE(DATA) ;
"RTN","IVM279P",38,0)
 I $$FIND1^DIC(301.92,"","X",$G(DATA(.01))) D BMES^XPDUTL("      *** "_$G(DATA(.01))_" entry already exists!") Q
"RTN","IVM279P",39,0)
 S FLDNUM="" F  S FLDNUM=$O(DATA(FLDNUM)) Q:'FLDNUM  S FDA(301.92,"+1,",FLDNUM)=$G(DATA(FLDNUM))
"RTN","IVM279P",40,0)
 D UPDATE^DIE("","FDA","","ERR")
"RTN","IVM279P",41,0)
 I $D(ERR) D BMES^XPDUTL("   >>> ERROR! "_$G(DATA(.01))_" not added to file #301.92!"),MES^XPDUTL(ERR("DIERR",1)_": "_ERR("DIERR",1,"TEXT",1)) Q
"RTN","IVM279P",42,0)
 D BMES^XPDUTL("      "_$G(DATA(.01))_" successfully added.")
"RTN","IVM279P",43,0)
 K DATA
"RTN","IVM279P",44,0)
 Q
"RTN","IVM279P",45,0)
 ;
"RTN","IVM279P",46,0)
POST ; post-install process to task one-time clean-up
"RTN","IVM279P",47,0)
 ;
"RTN","IVM279P",48,0)
 N IVMTSK,IVMDT
"RTN","IVM279P",49,0)
 D BMES^XPDUTL("  >> Tasking IVM Clean-up job to run in 30 days")
"RTN","IVM279P",50,0)
 D BMES^XPDUTL("  WARNING: This clean-up will delete DEMOGRAPHIC UPLOAD DATA")
"RTN","IVM279P",51,0)
 D MES^XPDUTL("           from the IVM PATIENT (#301.5) file when it runs.")
"RTN","IVM279P",52,0)
 D BMES^XPDUTL("  Please notify the appropriate personnel to take action on any")
"RTN","IVM279P",53,0)
 D MES^XPDUTL("  outstanding demographics uploaded data from HEC, if your site")
"RTN","IVM279P",54,0)
 D MES^XPDUTL("  processes IVM DEMOGRAPHICS UPLOADs on a regular basis.")
"RTN","IVM279P",55,0)
 D DT^DILF("X","T+30",.IVMDT) S:IVMDT IVMDT=IVMDT_.180000
"RTN","IVM279P",56,0)
 S IVMTSK=$$QUETSK($G(IVMDT))
"RTN","IVM279P",57,0)
 I 'IVMTSK D BMES^XPDUTL("  ***ERROR: IVM DEMOGRAPHICS CLEAN-UP could not be tasked."),BMES^XPDUTL("    >>> Please contact NVS for assistance <<<") Q
"RTN","IVM279P",58,0)
 D BMES^XPDUTL("  Task #"_IVMTSK_" has been queued to run on "_$$FMTE^XLFDT(IVMDT)_".")
"RTN","IVM279P",59,0)
 D MES^XPDUTL("  This task can be rescheduled for an earlier date if desired.")
"RTN","IVM279P",60,0)
 Q
"RTN","IVM279P",61,0)
QUETSK(ZTDTH) ;
"RTN","IVM279P",62,0)
 N ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTSK,ZUSR,POP,X,ERR
"RTN","IVM279P",63,0)
 Q:'$G(ZTDTH) 0
"RTN","IVM279P",64,0)
 S ZTRTN="EN^IVMLDEMC()",ZTDESC="IVM DEMOGRAPHICS CLEAN-UP",ZTIO=""
"RTN","IVM279P",65,0)
 D ^%ZTLOAD
"RTN","IVM279P",66,0)
 Q +$G(ZTSK)
"RTN","IVMLDEM6")
0^1^B54973865
"RTN","IVMLDEM6",1,0)
IVMLDEM6 ;ALB/KCL/BRM - IVM DEMOGRAPHIC UPLOAD FILE ADDRESS ; 9/10/03 12:05pm
"RTN","IVMLDEM6",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**10,58,73,79**; 21-OCT-94
"RTN","IVMLDEM6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMLDEM6",4,0)
 ;
"RTN","IVMLDEM6",5,0)
 ;
"RTN","IVMLDEM6",6,0)
ADDR(DFN,IVMDA2,IVMDA1,IVMDA,IVMPPICK) ; - function to check if uploadable field
"RTN","IVMLDEM6",7,0)
 ;                          is an address field and return a flag
"RTN","IVMLDEM6",8,0)
 ;
"RTN","IVMLDEM6",9,0)
 ;  Input:      DFN  -  as patient IEN
"RTN","IVMLDEM6",10,0)
 ;           IVMDA2  -  pointer to case record in (#301.5) file
"RTN","IVMLDEM6",11,0)
 ;           IVMDA1  -  pointer to PID msg in (#301.501) sub-file
"RTN","IVMLDEM6",12,0)
 ;            IVMDA  -  pointer to record in (#301.511) sub-file
"RTN","IVMLDEM6",13,0)
 ;         IVMPPICK  -  residence phone number and/or another address
"RTN","IVMLDEM6",14,0)
 ;                        field selected
"RTN","IVMLDEM6",15,0)
 ;                      0 - phone or an address field not selected 
"RTN","IVMLDEM6",16,0)
 ;                      1 - address field(s) selected
"RTN","IVMLDEM6",17,0)
 ;                      2 - phone selected
"RTN","IVMLDEM6",18,0)
 ;                      3 - both address field(s) and phone selected
"RTN","IVMLDEM6",19,0)
 ;
"RTN","IVMLDEM6",20,0)
 ; Output: IVMFLAG   -  1 if address field
"RTN","IVMLDEM6",21,0)
 ;                      0 if not an address field
"RTN","IVMLDEM6",22,0)
 ;
"RTN","IVMLDEM6",23,0)
 ;
"RTN","IVMLDEM6",24,0)
 N IVMFLAG,IVMI,IVMJ,IVMNODE,IVMPTR,Y
"RTN","IVMLDEM6",25,0)
 ;
"RTN","IVMLDEM6",26,0)
 ; - initialize flags
"RTN","IVMLDEM6",27,0)
 S IVMFLAG=0
"RTN","IVMLDEM6",28,0)
 ;
"RTN","IVMLDEM6",29,0)
 ; - check for required parameters
"RTN","IVMLDEM6",30,0)
 I '$G(DFN)!('$G(IVMDA))!('$G(IVMDA1))!'($G(IVMDA2)) G ADDRQ
"RTN","IVMLDEM6",31,0)
 ;
"RTN","IVMLDEM6",32,0)
 ; - get pointer to (#301.92) file from (#301.511) sub-file
"RTN","IVMLDEM6",33,0)
 S IVMPTR=+$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMDA,0)) G ADDRQ:'IVMPTR
"RTN","IVMLDEM6",34,0)
 ;
"RTN","IVMLDEM6",35,0)
ASK I '$D(^IVM(301.92,"AD",+IVMPTR)) G ADDRQ
"RTN","IVMLDEM6",36,0)
 I IVMPPICK=2 G ASK1
"RTN","IVMLDEM6",37,0)
 W ! S DIR("A")="Do you wish to proceed with this action"
"RTN","IVMLDEM6",38,0)
 S DIR("A",1)="You have selected to update an address field."
"RTN","IVMLDEM6",39,0)
 S DIR("A",2)="You will be required to upload the entire address."
"RTN","IVMLDEM6",40,0)
 S DIR("?")="Enter 'YES' to continue or 'NO' to abort."
"RTN","IVMLDEM6",41,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMLDEM6",42,0)
 D ^DIR K DIR
"RTN","IVMLDEM6",43,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM6",44,0)
 W ! S DIR("A")="Are you sure that you want to update the complete address"
"RTN","IVMLDEM6",45,0)
 S:$$PHARM(+$G(DFN)) DIR("A",1)="*** WARNING: This patient has ACTIVE PRESCRIPTIONS on file."
"RTN","IVMLDEM6",46,0)
 S DIR("A",2)=""
"RTN","IVMLDEM6",47,0)
 I $$ADRDTCK^IVMLDEM9(+$G(DFN),IVMDA2,IVMDA1) S DIR("A",2)="*** WARNING: The address that you are attempting to file is OLDER than",DIR("A",3)="             the address on file.",DIR("A",4)=""
"RTN","IVMLDEM6",48,0)
 S DIR("?",1)="Enter 'YES' to update the complete address that was received from"
"RTN","IVMLDEM6",49,0)
 S DIR("?")="HEC.  Enter 'NO' to quit."
"RTN","IVMLDEM6",50,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMLDEM6",51,0)
 D ^DIR K DIR
"RTN","IVMLDEM6",52,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM6",53,0)
 W !,"Filing address fields... "
"RTN","IVMLDEM6",54,0)
 ;
"RTN","IVMLDEM6",55,0)
 ; determine correct address change date/time to use
"RTN","IVMLDEM6",56,0)
 D ADDRDT(DFN,IVMDA2,IVMDA1)
"RTN","IVMLDEM6",57,0)
 ;
"RTN","IVMLDEM6",58,0)
LOOP ; - loop thru fields in ^IVM(301.92,"AD" x-ref
"RTN","IVMLDEM6",59,0)
 S IVMI=0 F  S IVMI=$O(^IVM(301.92,"AD",IVMI)) Q:IVMI']""  D
"RTN","IVMLDEM6",60,0)
 .S IVMJ=0 F  S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,IVMJ)) Q:IVMJ']""  D
"RTN","IVMLDEM6",61,0)
 ..;
"RTN","IVMLDEM6",62,0)
 ..; - check for data node in (#301.511) sub-file
"RTN","IVMLDEM6",63,0)
 ..S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0)) Q:IVMNODE']""
"RTN","IVMLDEM6",64,0)
 ..Q:'(+IVMNODE)!($P(IVMNODE,"^",2)']"")
"RTN","IVMLDEM6",65,0)
 ..;
"RTN","IVMLDEM6",66,0)
 ..; - check if residence phone number and not selected to upload
"RTN","IVMLDEM6",67,0)
 ..Q:(IVMPPICK=1&(+IVMNODE=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0))))
"RTN","IVMLDEM6",68,0)
 ..; - check if not residence phone number and only phone selected to upload
"RTN","IVMLDEM6",69,0)
 ..Q:(IVMPPICK=2&(+IVMNODE'=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0))))
"RTN","IVMLDEM6",70,0)
 ..;
"RTN","IVMLDEM6",71,0)
 ..; - perform any necessary address field manipulation and
"RTN","IVMLDEM6",72,0)
 ..;   load addr field rec'd from IVM into DHCP (#2) file
"RTN","IVMLDEM6",73,0)
 ..D UPLOAD(+DFN,$P($G(^IVM(301.92,+IVMNODE,0)),"^",5),$P(IVMNODE,"^",2)) S IVMFLAG=1
"RTN","IVMLDEM6",74,0)
 ..;
"RTN","IVMLDEM6",75,0)
 ..; - remove entry from (#301.511) sub-file
"RTN","IVMLDEM6",76,0)
 ..D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMLDEM6",77,0)
 ;
"RTN","IVMLDEM6",78,0)
 I IVMFLAG W "completed.",!
"RTN","IVMLDEM6",79,0)
 ;
"RTN","IVMLDEM6",80,0)
 ; - if addr is uploaded and phone # is not - ask user delete phone
"RTN","IVMLDEM6",81,0)
 I IVMFLAG,$P($G(^DPT(+DFN,.13)),"^")]"",(2>IVMPPICK) D PHONE
"RTN","IVMLDEM6",82,0)
 S VALMBCK="R"
"RTN","IVMLDEM6",83,0)
 ;
"RTN","IVMLDEM6",84,0)
 ;
"RTN","IVMLDEM6",85,0)
ADDRQ ; - return  -->  1 if uploadable field is an address field
"RTN","IVMLDEM6",86,0)
 ;           -->  0 if uploadable field is not an address field
"RTN","IVMLDEM6",87,0)
 ;
"RTN","IVMLDEM6",88,0)
 I IVMFLAG D RESET^IVMLDEMU
"RTN","IVMLDEM6",89,0)
 Q IVMFLAG
"RTN","IVMLDEM6",90,0)
 ;
"RTN","IVMLDEM6",91,0)
 ;
"RTN","IVMLDEM6",92,0)
UPLOAD(DFN,IVMFIELD,IVMVALUE) ; - file address fields received from IVM
"RTN","IVMLDEM6",93,0)
 ;
"RTN","IVMLDEM6",94,0)
 ;  Input:       DFN  -  as patient IEN
"RTN","IVMLDEM6",95,0)
 ;          IVMFIELD  -  as the field number to be updated
"RTN","IVMLDEM6",96,0)
 ;          IVMVALUE  -  as the value of the field
"RTN","IVMLDEM6",97,0)
 ;
"RTN","IVMLDEM6",98,0)
 ; Output: None
"RTN","IVMLDEM6",99,0)
 ;
"RTN","IVMLDEM6",100,0)
 ;
"RTN","IVMLDEM6",101,0)
 ; - update specified address field in the Patient (#2) file
"RTN","IVMLDEM6",102,0)
 S DIE="^DPT(",DA=DFN,DR=IVMFIELD_"////^S X=IVMVALUE"
"RTN","IVMLDEM6",103,0)
 D ^DIE K DA,DIE,DR
"RTN","IVMLDEM6",104,0)
 ;
"RTN","IVMLDEM6",105,0)
 ; - delete inaccurate Addr Change Site data if Source is not VAMC
"RTN","IVMLDEM6",106,0)
 ;   (trigger x-ref does not fire with 4 slash stuff)
"RTN","IVMLDEM6",107,0)
 I IVMFIELD=.119,IVMVALUE'="VAMC" S FDA(2,+DFN_",",.12)="@" D UPDATE^DIE("E","FDA")
"RTN","IVMLDEM6",108,0)
 ;
"RTN","IVMLDEM6",109,0)
 Q
"RTN","IVMLDEM6",110,0)
 ;
"RTN","IVMLDEM6",111,0)
 ;
"RTN","IVMLDEM6",112,0)
PHONE ; - ask user to delete phone # [Residence] from Patient (#2) file
"RTN","IVMLDEM6",113,0)
 D FULL^VALM1
"RTN","IVMLDEM6",114,0)
 W ! S DIR("A")="Is it okay to delete the patient's Phone Number [Residence]"
"RTN","IVMLDEM6",115,0)
 W ! S DIR("A",1)="The patient's address has been updated and the phone number"
"RTN","IVMLDEM6",116,0)
 S DIR("A",2)="remains on file."
"RTN","IVMLDEM6",117,0)
 S DIR("A",3)=" "
"RTN","IVMLDEM6",118,0)
 S DIR("A",4)="Patient Name: "_$P($$PT^IVMUFNC4(+DFN),"^")_" ("_$P($$PT^IVMUFNC4(+DFN),"^",3)_")"
"RTN","IVMLDEM6",119,0)
 S DIR("A",5)="Phone Number [Residence]: "_$P($G(^DPT(+DFN,.13)),"^")
"RTN","IVMLDEM6",120,0)
 S DIR("A",6)=" "
"RTN","IVMLDEM6",121,0)
 S DIR("?",1)="Enter 'YES' to delete the patient's Phone Number [Residence] that is"
"RTN","IVMLDEM6",122,0)
 S DIR("?",2)="currently on file.  Enter 'NO' to quit without deleting the patient's"
"RTN","IVMLDEM6",123,0)
 S DIR("?")="Phone Number [Residence]."
"RTN","IVMLDEM6",124,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMLDEM6",125,0)
 D ^DIR K DIR
"RTN","IVMLDEM6",126,0)
 S:Y $P(^DPT(DFN,.13),"^")="" W !!,"Patient's Phone Number [Residence] has ",$S(Y:"",1:"not "),"been deleted."
"RTN","IVMLDEM6",127,0)
 Q
"RTN","IVMLDEM6",128,0)
 ;
"RTN","IVMLDEM6",129,0)
ASK1 ; - phone selected to be uploaded - address fields not selected
"RTN","IVMLDEM6",130,0)
 W ! S DIR("A")="Okay to update the PHONE NUMBER [RESIDENCE] field"
"RTN","IVMLDEM6",131,0)
 S DIR("?",1)="Enter 'YES' to update the patient's Phone Number [Residence] that was"
"RTN","IVMLDEM6",132,0)
 S DIR("?",2)="received from HEC.  Enter 'NO' to quit."
"RTN","IVMLDEM6",133,0)
 S DIR(0)="Y",DIR("B")="YES"
"RTN","IVMLDEM6",134,0)
 D ^DIR K DIR
"RTN","IVMLDEM6",135,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM6",136,0)
 W !,"Updating PHONE NUMBER [RESIDENCE] field... "
"RTN","IVMLDEM6",137,0)
 G LOOP
"RTN","IVMLDEM6",138,0)
 ;
"RTN","IVMLDEM6",139,0)
AUTOADDR(DFN,IVMPPICK,NOUPDT) ;
"RTN","IVMLDEM6",140,0)
 ; this functionality is copied from above and modified to allow
"RTN","IVMLDEM6",141,0)
 ; an automated upload of patient address information as stipulated
"RTN","IVMLDEM6",142,0)
 ; in the business requirements for Address Indexing to support GMT
"RTN","IVMLDEM6",143,0)
 ;
"RTN","IVMLDEM6",144,0)
 ;  Input:      DFN  -  as patient IEN
"RTN","IVMLDEM6",145,0)
 ;         IVMPPICK  -  residence phone number and/or another address
"RTN","IVMLDEM6",146,0)
 ;                        field selected
"RTN","IVMLDEM6",147,0)
 ;                      1 - address field(s) selected
"RTN","IVMLDEM6",148,0)
 ;                      3 - both address field(s) and phone selected
"RTN","IVMLDEM6",149,0)
 ;           NOUPDT  -  (optional) this flag is set when the incoming
"RTN","IVMLDEM6",150,0)
 ;                      address data is older than the existing
"RTN","IVMLDEM6",151,0)
 ;                      address in the Patient (#2) file
"RTN","IVMLDEM6",152,0)
 ;
"RTN","IVMLDEM6",153,0)
 ; Output: IVMFLAG   -  1 if address fields updated
"RTN","IVMLDEM6",154,0)
 ;                      0 if address fields not updated
"RTN","IVMLDEM6",155,0)
 ;
"RTN","IVMLDEM6",156,0)
 ;
"RTN","IVMLDEM6",157,0)
 ;
"RTN","IVMLDEM6",158,0)
 N IVMFLAG,IVMI,IVMJ,IVMNODE,IVMPTR,Y
"RTN","IVMLDEM6",159,0)
 ;
"RTN","IVMLDEM6",160,0)
 ; - initialize flags
"RTN","IVMLDEM6",161,0)
 S IVMFLAG=0
"RTN","IVMLDEM6",162,0)
 S:'$G(NOUPDT) NOUPDT=0
"RTN","IVMLDEM6",163,0)
 ;
"RTN","IVMLDEM6",164,0)
 ; - check for required parameters
"RTN","IVMLDEM6",165,0)
 Q:'$G(DFN) IVMFLAG
"RTN","IVMLDEM6",166,0)
 ;
"RTN","IVMLDEM6",167,0)
 S IVMDA2=$G(IVM3015)
"RTN","IVMLDEM6",168,0)
 Q:'$G(IVMDA2) IVMFLAG
"RTN","IVMLDEM6",169,0)
 S IVMDA1=$O(^HL(771.3,"B","PID",""))
"RTN","IVMLDEM6",170,0)
 S IVMDA1=$O(^IVM(301.5,IVMDA2,"IN","B",IVMDA1,""),-1)
"RTN","IVMLDEM6",171,0)
 Q:'IVMDA1 IVMFLAG
"RTN","IVMLDEM6",172,0)
 ;
"RTN","IVMLDEM6",173,0)
 S IVMI=0 F  S IVMI=$O(^IVM(301.92,"AD",IVMI)) Q:IVMI']""  D
"RTN","IVMLDEM6",174,0)
 .S IVMJ=0 F  S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,IVMJ)) Q:IVMJ']""  D
"RTN","IVMLDEM6",175,0)
 ..;
"RTN","IVMLDEM6",176,0)
 ..; - check for data node in (#301.511) sub-file
"RTN","IVMLDEM6",177,0)
 ..S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0))
"RTN","IVMLDEM6",178,0)
 ..I ('+IVMNODE)!($P(IVMNODE,"^",2)']"") Q
"RTN","IVMLDEM6",179,0)
 ..;
"RTN","IVMLDEM6",180,0)
 ..; - check if residence phone number -> do not auto-upload
"RTN","IVMLDEM6",181,0)
 ..I (IVMPPICK=1&(+IVMNODE=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0)))) D DEMBULL^IVMPREC6 Q
"RTN","IVMLDEM6",182,0)
 ..;
"RTN","IVMLDEM6",183,0)
 ..; don't auto-update if there is an active Prescription record and
"RTN","IVMLDEM6",184,0)
 ..; the Bad Address Indicator is null
"RTN","IVMLDEM6",185,0)
 ..I ('NOUPDT),$$PHARM(+DFN),'$$BADADR^DGUTL3(+DFN) D DEMBULL^IVMPREC6 Q
"RTN","IVMLDEM6",186,0)
 ..;
"RTN","IVMLDEM6",187,0)
 ..; - load addr field rec'd from IVM into DHCP (#2) file
"RTN","IVMLDEM6",188,0)
 ..I 'NOUPDT D UPLOAD(+DFN,$P($G(^IVM(301.92,+IVMNODE,0)),"^",5),$P(IVMNODE,"^",2)) S IVMFLAG=1
"RTN","IVMLDEM6",189,0)
 ..;
"RTN","IVMLDEM6",190,0)
 ..; - remove entry from (#301.511) sub-file
"RTN","IVMLDEM6",191,0)
 ..D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMLDEM6",192,0)
 ..; - if no display or uploadable fields left, then delete the PID
"RTN","IVMLDEM6",193,0)
 ..;   segment
"RTN","IVMLDEM6",194,0)
 ..I '$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,0),'$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,1) D
"RTN","IVMLDEM6",195,0)
 ...D DELETE^IVMLDEM5(IVMDA2,IVMDA1," ") ; Dummy up name parameter
"RTN","IVMLDEM6",196,0)
 Q IVMFLAG
"RTN","IVMLDEM6",197,0)
 ;
"RTN","IVMLDEM6",198,0)
ADDRDT(DFN,IVMDA2,IVMDA1) ;
"RTN","IVMLDEM6",199,0)
 ; - validate Address Change Dt/Tm before filing
"RTN","IVMLDEM6",200,0)
 ;   if incoming address is accepted and the change date is older
"RTN","IVMLDEM6",201,0)
 ;   than what's on file, then use today's date for Addr Chg Dt/Tm
"RTN","IVMLDEM6",202,0)
 ;
"RTN","IVMLDEM6",203,0)
 Q:'$$ADRDTCK^IVMLDEM9(DFN,IVMDA2,IVMDA1)
"RTN","IVMLDEM6",204,0)
 N FDA,IEN92,IVMDA,IENS,ERR
"RTN","IVMLDEM6",205,0)
 S IEN92=$O(^IVM(301.92,"C","RF171","")) Q:'IEN92
"RTN","IVMLDEM6",206,0)
 Q:'$D(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IEN92))
"RTN","IVMLDEM6",207,0)
 S IVMDA=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IEN92,"")) Q:'IVMDA
"RTN","IVMLDEM6",208,0)
 S IENS=IVMDA_","_IVMDA1_","_IVMDA2_","
"RTN","IVMLDEM6",209,0)
 S FDA(301.511,IENS,.02)=$$NOW^XLFDT
"RTN","IVMLDEM6",210,0)
 D FILE^DIE("","FDA","ERR")
"RTN","IVMLDEM6",211,0)
 Q
"RTN","IVMLDEM6",212,0)
 ;
"RTN","IVMLDEM6",213,0)
PHARM(DFN) ;does this patient have active pharmacy prescriptions?
"RTN","IVMLDEM6",214,0)
 ;
"RTN","IVMLDEM6",215,0)
 ;External reference to $$EN^PSSRXACT supported by IA #4237
"RTN","IVMLDEM6",216,0)
 ;
"RTN","IVMLDEM6",217,0)
 Q $S('$G(DFN):0,1:$$EN^PSSRXACT(DFN))
"RTN","IVMLDEM7")
0^2^B15075195
"RTN","IVMLDEM7",1,0)
IVMLDEM7 ;ALB/KCL - IVM DEMOGRAPHIC UPLOAD - DELETE ADDRESS ; 5/28/03 3:55pm
"RTN","IVMLDEM7",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**10,79**; 21-OCT-94
"RTN","IVMLDEM7",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMLDEM7",4,0)
 ;
"RTN","IVMLDEM7",5,0)
 ;
"RTN","IVMLDEM7",6,0)
ADDR(DFN,IVMDA2,IVMDA1,IVMDA,IVMPPICK) ; - function to check if the delete field
"RTN","IVMLDEM7",7,0)
 ;                          is an address field and return a flag.
"RTN","IVMLDEM7",8,0)
 ;
"RTN","IVMLDEM7",9,0)
 ;
"RTN","IVMLDEM7",10,0)
 ;  Input:      DFN  -  as patient IEN
"RTN","IVMLDEM7",11,0)
 ;           IVMDA2  -  pointer to case record in (#301.5) file
"RTN","IVMLDEM7",12,0)
 ;           IVMDA1  -  pointer to PID msg in (#301.501) sub-file
"RTN","IVMLDEM7",13,0)
 ;            IVMDA  -  pointer to record in (#301.511) sub-file
"RTN","IVMLDEM7",14,0)
 ;         IVMPPICK  -  residence phone number and/or another address
"RTN","IVMLDEM7",15,0)
 ;                        field selected
"RTN","IVMLDEM7",16,0)
 ;                      0 - phone or an address field not selected 
"RTN","IVMLDEM7",17,0)
 ;                      1 - address field(s) selected
"RTN","IVMLDEM7",18,0)
 ;                      2 - phone selected
"RTN","IVMLDEM7",19,0)
 ;                      3 - both address field(s) and phone selected
"RTN","IVMLDEM7",20,0)
 ;
"RTN","IVMLDEM7",21,0)
 ; Output: IVMFLAG   -  1 if field is an address field
"RTN","IVMLDEM7",22,0)
 ;                      0 if field is not an address field
"RTN","IVMLDEM7",23,0)
 ;
"RTN","IVMLDEM7",24,0)
 ;
"RTN","IVMLDEM7",25,0)
 N IVMFLAG,IVMI,IVMJ,IVMNODE,IVMPTR,Y
"RTN","IVMLDEM7",26,0)
 ;
"RTN","IVMLDEM7",27,0)
 ; - initialize flag
"RTN","IVMLDEM7",28,0)
 S IVMFLAG=0
"RTN","IVMLDEM7",29,0)
 ;
"RTN","IVMLDEM7",30,0)
 ; - check for required parameters
"RTN","IVMLDEM7",31,0)
 I '$G(DFN)!('$G(IVMDA))!('$G(IVMDA1))!'($G(IVMDA2)) G ADDRQ
"RTN","IVMLDEM7",32,0)
 ;
"RTN","IVMLDEM7",33,0)
 ; - get pointer to (#301.92) file from (#301.511) sub-file
"RTN","IVMLDEM7",34,0)
 S IVMPTR=+$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMDA,0)) G ADDRQ:'IVMPTR
"RTN","IVMLDEM7",35,0)
 ;
"RTN","IVMLDEM7",36,0)
 ;
"RTN","IVMLDEM7",37,0)
ASK I '$D(^IVM(301.92,"AD",+IVMPTR)) G ADDRQ
"RTN","IVMLDEM7",38,0)
 I IVMPPICK=2 G ASK1
"RTN","IVMLDEM7",39,0)
 W ! S DIR("A")="Do you wish to proceed with this action"
"RTN","IVMLDEM7",40,0)
 S DIR("A",1)="You have selected to delete an address field."
"RTN","IVMLDEM7",41,0)
 S DIR("A",2)="You will be required to delete the entire address."
"RTN","IVMLDEM7",42,0)
 S DIR("?")="Enter 'YES' to continue or 'NO' to abort."
"RTN","IVMLDEM7",43,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMLDEM7",44,0)
 D ^DIR K DIR
"RTN","IVMLDEM7",45,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM7",46,0)
 W ! S DIR("A")="Are you sure that you want to delete the complete address"
"RTN","IVMLDEM7",47,0)
 S DIR("A",1)="If you delete this address, then the previously filed address"
"RTN","IVMLDEM7",48,0)
 S DIR("A",2)="will be transmitted to HEC and all sites visited by this patient."
"RTN","IVMLDEM7",49,0)
 S DIR("?",1)="Enter 'YES' to delete the complete address that was received from"
"RTN","IVMLDEM7",50,0)
 S DIR("?")="HEC.  Enter 'NO' to quit."
"RTN","IVMLDEM7",51,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IVMLDEM7",52,0)
 D ^DIR K DIR
"RTN","IVMLDEM7",53,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM7",54,0)
 ;
"RTN","IVMLDEM7",55,0)
 ; file new Address Change Date/Time
"RTN","IVMLDEM7",56,0)
 N FDA,ERRMSG
"RTN","IVMLDEM7",57,0)
 S FDA(2,DFN_",",.118)=$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","IVMLDEM7",58,0)
 D FILE^DIE("E","FDA","ERRMSG")
"RTN","IVMLDEM7",59,0)
 ;
"RTN","IVMLDEM7",60,0)
 W !,"Deleting address fields... "
"RTN","IVMLDEM7",61,0)
 ;
"RTN","IVMLDEM7",62,0)
LOOP ; - loop thru fields in ^IVM(301.92,"AD" x-ref
"RTN","IVMLDEM7",63,0)
 S IVMI=0 F  S IVMI=$O(^IVM(301.92,"AD",IVMI)) Q:IVMI']""  D
"RTN","IVMLDEM7",64,0)
 .S IVMJ=0 F  S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,IVMJ)) Q:IVMJ']""  D
"RTN","IVMLDEM7",65,0)
 ..;
"RTN","IVMLDEM7",66,0)
 ..; - check for data node in (#301.511) sub-file
"RTN","IVMLDEM7",67,0)
 ..S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0)) Q:IVMNODE']""
"RTN","IVMLDEM7",68,0)
 ..Q:'(+IVMNODE)!($P(IVMNODE,"^",2)']"")
"RTN","IVMLDEM7",69,0)
 ..;
"RTN","IVMLDEM7",70,0)
 ..; - check if residence phone number and not selected to delete
"RTN","IVMLDEM7",71,0)
 ..Q:(IVMPPICK=1&(+IVMNODE=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0))))
"RTN","IVMLDEM7",72,0)
 ..; - check if not residence phone number and only phone selected to delete
"RTN","IVMLDEM7",73,0)
 ..Q:(IVMPPICK=2&(+IVMNODE'=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0))))
"RTN","IVMLDEM7",74,0)
 ..;
"RTN","IVMLDEM7",75,0)
 ..; - remove entry from (#301.511) sub-file
"RTN","IVMLDEM7",76,0)
 ..D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMLDEM7",77,0)
 ..S IVMFLAG=1
"RTN","IVMLDEM7",78,0)
 ;
"RTN","IVMLDEM7",79,0)
 I IVMFLAG S VALMBCK="R" W "completed.",!
"RTN","IVMLDEM7",80,0)
 ;
"RTN","IVMLDEM7",81,0)
ADDRQ ; - return  -->  1 if delete field is an address field
"RTN","IVMLDEM7",82,0)
 ;           -->  0 if delete field is not an address field
"RTN","IVMLDEM7",83,0)
 ;
"RTN","IVMLDEM7",84,0)
 I IVMFLAG D RESET^IVMLDEMU
"RTN","IVMLDEM7",85,0)
 Q IVMFLAG
"RTN","IVMLDEM7",86,0)
 ;
"RTN","IVMLDEM7",87,0)
ASK1 ; - phone selected to be deleted - address fields not selected
"RTN","IVMLDEM7",88,0)
 W ! S DIR("A")="Okay to delete the PHONE NUMBER [RESIDENCE] field"
"RTN","IVMLDEM7",89,0)
 S DIR("?",1)="Enter 'YES' to delete the patient's Phone Number [Residence] that was"
"RTN","IVMLDEM7",90,0)
 S DIR("?",2)="received from HEC.  Enter 'NO' to quit."
"RTN","IVMLDEM7",91,0)
 S DIR(0)="Y",DIR("B")="YES"
"RTN","IVMLDEM7",92,0)
 D ^DIR K DIR
"RTN","IVMLDEM7",93,0)
 S IVMFLAG=1 G ADDRQ:'Y
"RTN","IVMLDEM7",94,0)
 W !,"Deleting PHONE NUMBER [RESIDENCE] field from the list... "
"RTN","IVMLDEM7",95,0)
 G LOOP
"RTN","IVMLDEM9")
0^7^B27438854
"RTN","IVMLDEM9",1,0)
IVMLDEM9 ;ALB/BRM - IVM ADDRESS UPDATES PENDING REVIEW RPT ; 7/17/03 8:08am
"RTN","IVMLDEM9",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**79**; 21-OCT-94
"RTN","IVMLDEM9",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMLDEM9",4,0)
 ;
"RTN","IVMLDEM9",5,0)
 Q
"RTN","IVMLDEM9",6,0)
 ;
"RTN","IVMLDEM9",7,0)
EN2 ;entry point for IVM ADDR UPDT PENDING REVIEW menu option
"RTN","IVMLDEM9",8,0)
 K ^TMP("IVMLDEM9",$J)
"RTN","IVMLDEM9",9,0)
 I +$G(ZTSK) D PRINT,EXIT Q  ;started by Taskman job
"RTN","IVMLDEM9",10,0)
 D SELDEV,EXIT
"RTN","IVMLDEM9",11,0)
 Q
"RTN","IVMLDEM9",12,0)
 ;
"RTN","IVMLDEM9",13,0)
LOOP(DTPARAM,FILDAT) ;main loop
"RTN","IVMLDEM9",14,0)
 N DFN,IVMDT,IVMDA,IVMDA1,IVMDA2,RF171,TODAY,AUTODT,DTDIFF,NAME,UPLDT
"RTN","IVMLDEM9",15,0)
 N X1,X2,Y,SSN,DFN
"RTN","IVMLDEM9",16,0)
 D DT^DILF("X","T"_$G(DTPARAM),.AUTODT)
"RTN","IVMLDEM9",17,0)
 S TODAY=$$DT^XLFDT S:'$G(FILDAT) FILDAT=0
"RTN","IVMLDEM9",18,0)
 Q:'$G(AUTODT)  ;this should never occur, but just in case
"RTN","IVMLDEM9",19,0)
 S RF171=$O(^IVM(301.92,"C","RF171","")),IVMDA2=""
"RTN","IVMLDEM9",20,0)
 Q:'RF171
"RTN","IVMLDEM9",21,0)
 F  S IVMDA2=$O(^IVM(301.5,IVMDA2)) Q:IVMDA2=""  D
"RTN","IVMLDEM9",22,0)
 .S DFN=$P($G(^IVM(301.5,IVMDA2,0)),"^"),IVMDA1=""
"RTN","IVMLDEM9",23,0)
 .Q:('DFN)!('$D(^DPT(+DFN)))!('$D(^IVM(301.5,IVMDA2,"IN")))
"RTN","IVMLDEM9",24,0)
 .F  S IVMDA1=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1)) Q:IVMDA1=""  D
"RTN","IVMLDEM9",25,0)
 ..Q:'$D(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",RF171))
"RTN","IVMLDEM9",26,0)
 ..S IVMDA=""
"RTN","IVMLDEM9",27,0)
 ..F  S IVMDA=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",RF171,IVMDA)) Q:'IVMDA  D
"RTN","IVMLDEM9",28,0)
 ...S IVMDT=$P($G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMDA,0)),"^",3)
"RTN","IVMLDEM9",29,0)
 ...Q:('IVMDT)!(IVMDT>AUTODT)
"RTN","IVMLDEM9",30,0)
 ...; report addresses that will be auto-uploaded in DTDIFF days
"RTN","IVMLDEM9",31,0)
 ...S X1=TODAY,X2=IVMDT D ^%DTC S DTDIFF=+$G(X)
"RTN","IVMLDEM9",32,0)
 ...S NAME=$P($G(^DPT(DFN,0)),"^"),SSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","IVMLDEM9",33,0)
 ...S X1=IVMDT,X2=14 D C^%DTC S UPLDT=$G(X)
"RTN","IVMLDEM9",34,0)
 ...S ^TMP("IVMLDEM9",$J,DTDIFF,SSN,IVMDA)=$G(NAME)_"^"_$P(IVMDT,".")_"^"_$P(UPLDT,".")_"^"_DFN_"^"_IVMDA2_"^"_IVMDA1
"RTN","IVMLDEM9",35,0)
 Q
"RTN","IVMLDEM9",36,0)
 ;
"RTN","IVMLDEM9",37,0)
AUTOLOAD(DFN,IVMDA2,IVMDA1) ;auto-upload records that not been reviewed
"RTN","IVMLDEM9",38,0)
 ; this tag is called from ^IVMLDEMC
"RTN","IVMLDEM9",39,0)
 ;
"RTN","IVMLDEM9",40,0)
 Q:('$G(DFN))!('$G(IVMDA2))!('$G(IVMDA1))
"RTN","IVMLDEM9",41,0)
 N IVMI,IVMJ,IVMFIELD,IVMVALUE,IVMNODE,IVMFLAG,DUZ
"RTN","IVMLDEM9",42,0)
 S DUZ="IVM AUTO ADDR JOB"
"RTN","IVMLDEM9",43,0)
 ;
"RTN","IVMLDEM9",44,0)
 ; determine appropriate address change dt/tm to be used
"RTN","IVMLDEM9",45,0)
 D ADDRDT^IVMLDEM6(DFN,IVMDA2,IVMDA1)
"RTN","IVMLDEM9",46,0)
 ;
"RTN","IVMLDEM9",47,0)
 ; loop through the record to be uploaded
"RTN","IVMLDEM9",48,0)
 S IVMI=0 F  S IVMI=$O(^IVM(301.92,"AD",IVMI)) Q:IVMI']""  D
"RTN","IVMLDEM9",49,0)
 .S IVMJ=0 F  S IVMJ=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IVMI,IVMJ)) Q:IVMJ']""  D
"RTN","IVMLDEM9",50,0)
 ..;
"RTN","IVMLDEM9",51,0)
 ..; check for data node in (#301.511) sub-file
"RTN","IVMLDEM9",52,0)
 ..S IVMNODE=$G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMJ,0))
"RTN","IVMLDEM9",53,0)
 ..Q:('+IVMNODE)!($P(IVMNODE,"^",2)']"")
"RTN","IVMLDEM9",54,0)
 ..;
"RTN","IVMLDEM9",55,0)
 ..; check for residence phone number -> do not auto-upload
"RTN","IVMLDEM9",56,0)
 ..Q:(+IVMNODE=$O(^IVM(301.92,"B","PHONE NUMBER [RESIDENCE]",0)))
"RTN","IVMLDEM9",57,0)
 ..;
"RTN","IVMLDEM9",58,0)
 ..; set upload parameters
"RTN","IVMLDEM9",59,0)
 ..S IVMFIELD=$P($G(^IVM(301.92,+IVMNODE,0)),"^",5)
"RTN","IVMLDEM9",60,0)
 ..S IVMVALUE=$P(IVMNODE,"^",2)
"RTN","IVMLDEM9",61,0)
 ..;
"RTN","IVMLDEM9",62,0)
 ..; load addr field into the Patient (#2) file
"RTN","IVMLDEM9",63,0)
 ..D UPLOAD^IVMLDEM6(DFN,IVMFIELD,IVMVALUE) S IVMFLAG=1
"RTN","IVMLDEM9",64,0)
 ..;
"RTN","IVMLDEM9",65,0)
 ..; remove entry from (#301.511) sub-file
"RTN","IVMLDEM9",66,0)
 ..D DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMJ)
"RTN","IVMLDEM9",67,0)
 ..;
"RTN","IVMLDEM9",68,0)
 ..; if no display or uploadable fields, delete PID segment
"RTN","IVMLDEM9",69,0)
 ..I ('$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,0))&('$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,1)) D DELETE^IVMLDEM5(IVMDA2,IVMDA1," ")
"RTN","IVMLDEM9",70,0)
 Q
"RTN","IVMLDEM9",71,0)
SELDEV ; select device to print report
"RTN","IVMLDEM9",72,0)
 N ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTSK,ZUSR,POP,X,ERR
"RTN","IVMLDEM9",73,0)
 K IOP,%ZIS
"RTN","IVMLDEM9",74,0)
 S %ZIS="Q" D ^%ZIS G:POP EXIT
"RTN","IVMLDEM9",75,0)
 I $D(IO("Q")) D  Q
"RTN","IVMLDEM9",76,0)
 .S ZTRTN="PRINT^IVMLDEM9",ZTDESC="IVM AUTO ADDRESS UPLOAD RPT"
"RTN","IVMLDEM9",77,0)
 .D ^%ZTLOAD
"RTN","IVMLDEM9",78,0)
 .D ^%ZISC,HOME^%ZIS
"RTN","IVMLDEM9",79,0)
 .W !,$S($D(ZTSK):"REQUEST QUEUED AS TASK#"_ZTSK,1:"REQUEST CANCELLED!")
"RTN","IVMLDEM9",80,0)
PRINT ;report output
"RTN","IVMLDEM9",81,0)
 N DAYS,SSN,DATA,EX,PAGE,IVMDA,DATA
"RTN","IVMLDEM9",82,0)
 D LOOP("",0) U IO D HDR
"RTN","IVMLDEM9",83,0)
 S DAYS=""
"RTN","IVMLDEM9",84,0)
 I '$D(^TMP("IVMLDEM9",$J)) W !!?29,"No data has been found" Q
"RTN","IVMLDEM9",85,0)
 F  S DAYS=$O(^TMP("IVMLDEM9",$J,DAYS),-1) Q:DAYS=""!($G(EX))  D
"RTN","IVMLDEM9",86,0)
 .S SSN=""
"RTN","IVMLDEM9",87,0)
 .F  S SSN=$O(^TMP("IVMLDEM9",$J,DAYS,SSN)) Q:SSN=""!($G(EX))  D
"RTN","IVMLDEM9",88,0)
 ..S IVMDA=""
"RTN","IVMLDEM9",89,0)
 ..F  S IVMDA=$O(^TMP("IVMLDEM9",$J,DAYS,SSN,IVMDA)) Q:(IVMDA="")!($G(EX))  D
"RTN","IVMLDEM9",90,0)
 ...S DATA=$G(^TMP("IVMLDEM9",$J,DAYS,SSN,IVMDA))
"RTN","IVMLDEM9",91,0)
 ...D:$Y>(IOSL-4) HDR Q:$G(EX)
"RTN","IVMLDEM9",92,0)
 ...W !?7,$$FMTE^XLFDT($P(DATA,"^",3)),?25,$$FMTE^XLFDT($P(DATA,"^",2)),?39,SSN,?52,$P(DATA,"^")
"RTN","IVMLDEM9",93,0)
 W !!?30,"<<END OF REPORT>>",!
"RTN","IVMLDEM9",94,0)
 I $E(IOST)="C" W ! K DIR S DIR(0)="E" D ^DIR K DIR
"RTN","IVMLDEM9",95,0)
 Q
"RTN","IVMLDEM9",96,0)
HDR ;print header
"RTN","IVMLDEM9",97,0)
 N IVMDT,Y,DLINE
"RTN","IVMLDEM9",98,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S (ZTSTOP,EX)=1 Q
"RTN","IVMLDEM9",99,0)
 I $G(PAGE)>0,$E(IOST)="C" K DIR S DIR(0)="E" D ^DIR K DIR S:+Y=0 EX=1
"RTN","IVMLDEM9",100,0)
 Q:$G(EX)
"RTN","IVMLDEM9",101,0)
 W @IOF
"RTN","IVMLDEM9",102,0)
 S Y=DT X ^DD("DD") S IVMDT=Y
"RTN","IVMLDEM9",103,0)
 S DLINE="",PAGE=$G(PAGE)+1,$P(DLINE,"=",78)=""
"RTN","IVMLDEM9",104,0)
 W !?1,"IVM ADDRESS UPDATES PENDING REVIEW",?48,IVMDT,?70,"Page: ",PAGE
"RTN","IVMLDEM9",105,0)
 W !?1,DLINE
"RTN","IVMLDEM9",106,0)
 W !!?5,"Auto-Upload Date",?24,"Date Received",?42,"SSN",?52,"Patient Name"
"RTN","IVMLDEM9",107,0)
 W !?5,"----------------",?24,"-------------",?39,"---------",?52,"------------"
"RTN","IVMLDEM9",108,0)
 Q
"RTN","IVMLDEM9",109,0)
EXIT D ^%ZISC,HOME^%ZIS Q
"RTN","IVMLDEM9",110,0)
 ;
"RTN","IVMLDEM9",111,0)
ADRDTCK(DFN,IVMDA2,IVMDA1) ;is the incoming address older than #2 address?
"RTN","IVMLDEM9",112,0)
 Q:'$G(DFN)!('$G(IVMDA2))!('$G(IVMDA1)) "0^MISSING INPUT PARAMETER"
"RTN","IVMLDEM9",113,0)
 N OADDRDT,NADDRDT,ERR,IVMDA,IEN92,IENS
"RTN","IVMLDEM9",114,0)
 S OADDRDT=$$GET1^DIQ(2,DFN_",",.118,"I","","ERR") Q:$D(ERR) "0^OLD ADDR ERROR"
"RTN","IVMLDEM9",115,0)
 S IEN92=$O(^IVM(301.92,"C","RF171","")) Q:'IEN92 "0^BAD #301.92 ENTRY FOR RF171"
"RTN","IVMLDEM9",116,0)
 I '$D(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IEN92)) Q "0^ADDR DT NOT PRESENT"
"RTN","IVMLDEM9",117,0)
 S IVMDA=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",IEN92,"")) Q:'IVMDA "0^MISSING ADDR DT IN 301.5"
"RTN","IVMLDEM9",118,0)
 S IENS=IVMDA_","_IVMDA1_","_IVMDA2_","
"RTN","IVMLDEM9",119,0)
 S NADDRDT=$$GET1^DIQ(301.511,IENS,.02,"I","","ERR") Q:$D(ERR) "0^NEW ADDR ERROR"
"RTN","IVMLDEM9",120,0)
 Q:(OADDRDT="")&(NADDRDT="") 0
"RTN","IVMLDEM9",121,0)
 Q:(NADDRDT="")!(OADDRDT'<NADDRDT) 1
"RTN","IVMLDEM9",122,0)
 Q "0^INCOMING ADDRESS IS NEWER THAN PATIENT FILE ADDR"
"RTN","IVMLDEMC")
0^9^B10198683
"RTN","IVMLDEMC",1,0)
IVMLDEMC ;ALB/BRM - IVM UPLOAD DEMO CLEAN-UP ; 9/16/03 11:14am
"RTN","IVMLDEMC",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**79**; 21-OCT-94
"RTN","IVMLDEMC",3,0)
 ;
"RTN","IVMLDEMC",4,0)
 Q
"RTN","IVMLDEMC",5,0)
EN(ADDRDT) ; entry point
"RTN","IVMLDEMC",6,0)
 N IVMDA,IVMDA1,IVMDA2,SEG
"RTN","IVMLDEMC",7,0)
 N X1,X2,Y,SSN,DFN
"RTN","IVMLDEMC",8,0)
 D FNDSEG(.SEG)
"RTN","IVMLDEMC",9,0)
 S IVMDA2=0
"RTN","IVMLDEMC",10,0)
 F  S IVMDA2=$O(^IVM(301.5,IVMDA2)) Q:IVMDA2=""  D
"RTN","IVMLDEMC",11,0)
 .S DFN=$P($G(^IVM(301.5,IVMDA2,0)),"^"),IVMDA1=0
"RTN","IVMLDEMC",12,0)
 .Q:('DFN)!('$D(^DPT(+DFN)))!('$D(^IVM(301.5,IVMDA2,"IN")))
"RTN","IVMLDEMC",13,0)
 .F  S IVMDA1=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1)) Q:'IVMDA1  D
"RTN","IVMLDEMC",14,0)
 ..D LOOP(DFN,IVMDA2,IVMDA1,.SEG,.ADDRDT)
"RTN","IVMLDEMC",15,0)
 ..; if no display or uploadable fields, delete PID segment
"RTN","IVMLDEMC",16,0)
 ..I ('$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,0))&('$$DEMO^IVMLDEM5(IVMDA2,IVMDA1,1)) D DELETE^IVMLDEM5(IVMDA2,IVMDA1," ")
"RTN","IVMLDEMC",17,0)
 Q
"RTN","IVMLDEMC",18,0)
LOOP(DFN,IVMDA2,IVMDA1,SEG,ADDRDT) ;
"RTN","IVMLDEMC",19,0)
 N SEGNUM,X,X1,X2,%Y
"RTN","IVMLDEMC",20,0)
 Q:'$D(SEG)
"RTN","IVMLDEMC",21,0)
 S (SEGNUM,SEGNAM)=""
"RTN","IVMLDEMC",22,0)
 F  S SEGNAM=$O(SEG(SEGNAM)) Q:SEGNAM']""  D
"RTN","IVMLDEMC",23,0)
 .S SEGNUM=$P($G(SEG(SEGNAM)),"^"),IVMTYPE=+$P($G(SEG(SEGNAM)),"^",2)
"RTN","IVMLDEMC",24,0)
 .S IVMDA=""
"RTN","IVMLDEMC",25,0)
 .F  S IVMDA=$O(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM","B",SEGNUM,IVMDA)) Q:'IVMDA  D
"RTN","IVMLDEMC",26,0)
 ..S IVMDAT=$P($G(^IVM(301.5,IVMDA2,"IN",IVMDA1,"DEM",IVMDA,0)),"^",3)
"RTN","IVMLDEMC",27,0)
 ..; ignore recent uploads if this is the one-time clean-up
"RTN","IVMLDEMC",28,0)
 ..I (IVMDAT&'$G(ADDRDT(IVMTYPE)))!($G(ADDRDT(IVMTYPE))&'IVMDAT) Q
"RTN","IVMLDEMC",29,0)
 ..; quit if # of days has not passed yet (doesn't apply to EN tag)
"RTN","IVMLDEMC",30,0)
 ..I $G(ADDRDT(IVMTYPE)),IVMDAT S X1=$$DT^XLFDT,X2=IVMDAT D ^%DTC Q:X<ADDRDT(IVMTYPE)
"RTN","IVMLDEMC",31,0)
 ..;process fields that are selectively deleted
"RTN","IVMLDEMC",32,0)
 ..Q:'$$RULES(DFN,SEGNAM)
"RTN","IVMLDEMC",33,0)
 ..I IVMTYPE,$G(ADDRDT(IVMTYPE)) D AUTOLOAD^IVMLDEM9(DFN,IVMDA2,IVMDA1)
"RTN","IVMLDEMC",34,0)
 ..; remove entry from (#301.511) sub-file
"RTN","IVMLDEMC",35,0)
 ..D DELETE^IVMLDEM5(IVMDA2,IVMDA1," "),DELENT^IVMLDEMU(IVMDA2,IVMDA1,IVMDA)
"RTN","IVMLDEMC",36,0)
 Q
"RTN","IVMLDEMC",37,0)
RULES(DFN,SEGNAM) ;can this data element be deleted?
"RTN","IVMLDEMC",38,0)
 Q:SEGNAM'="ZPD09" 1
"RTN","IVMLDEMC",39,0)
 Q:'$G(DFN) 0
"RTN","IVMLDEMC",40,0)
 N VADM
"RTN","IVMLDEMC",41,0)
 D DEM^VADPT
"RTN","IVMLDEMC",42,0)
 Q:$G(VADM(6))]"" 1  ;delete dod if present in Patient file (#2)
"RTN","IVMLDEMC",43,0)
 Q 0
"RTN","IVMLDEMC",44,0)
 ;
"RTN","IVMLDEMC",45,0)
FNDSEG(SEG) ;
"RTN","IVMLDEMC",46,0)
 N SEGLOC,LINE,QUIT,TAG,SEGDAT,PIECE
"RTN","IVMLDEMC",47,0)
 S LINE=1,SEGDAT="",QUIT=0
"RTN","IVMLDEMC",48,0)
 F  S LINE=LINE+1 Q:$G(QUIT)  D
"RTN","IVMLDEMC",49,0)
 .S TAG="DATA+"_LINE,SEGDAT=$P($T(@(TAG)),";;",2)
"RTN","IVMLDEMC",50,0)
 .I SEGDAT']"" S QUIT=1 Q
"RTN","IVMLDEMC",51,0)
 .F PIECE=1:1:10 Q:$P(SEGDAT,"~",PIECE)=""  D
"RTN","IVMLDEMC",52,0)
 ..S SEGLOC=$P(SEGDAT,"~",PIECE) Q:'$D(^IVM(301.92,"C",SEGLOC))
"RTN","IVMLDEMC",53,0)
 ..S SEG(SEGLOC)=$O(^IVM(301.92,"C",SEGLOC,""))
"RTN","IVMLDEMC",54,0)
 ..Q:'$G(SEG(SEGLOC))
"RTN","IVMLDEMC",55,0)
 ..S $P(SEG(SEGLOC),"^",2)=$P($G(^IVM(301.92,SEG(SEGLOC),0)),"^",8)
"RTN","IVMLDEMC",56,0)
 Q
"RTN","IVMLDEMC",57,0)
 ;
"RTN","IVMLDEMC",58,0)
DATA ;;  do not modify below values!  They are used to set-up the array
"RTN","IVMLDEMC",59,0)
 ;;  that determines the fields to delete and/or process
"RTN","IVMLDEMC",60,0)
 ;;PID111~PID112~PID113~PID114~PID115~PID12~PID13~RF171~ZPD09~ZPD13
"RTN","IVMLDEMC",61,0)
 ;;ZGD03~ZGD04~ZGD05~ZGD061~ZGD062~ZGD063~ZGD064~ZGD065~ZGD07~ZGD08
"RTN","IVMLDEMC",62,0)
 ;;ZPD08~ZPD12~ZPD13~ZEL02~ZEL06
"RTN","IVMLDEMC",63,0)
 ;;
"RTN","IVMLDEMC",64,0)
 ;; end of data (do not remove or modify above "blank" line)
"RTN","IVMPREC6")
0^3^B30735237
"RTN","IVMPREC6",1,0)
IVMPREC6 ;ALB/KCL/BRM - PROCESS INCOMING (Z05 EVENT TYPE) HL7 MESSAGES ; 5/29/03 4:09pm
"RTN","IVMPREC6",2,0)
 ;;2.0; INCOME VERIFICATION MATCH ;**3,4,12,17,34,58,79**; 21-OCT-94
"RTN","IVMPREC6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPREC6",4,0)
 ;
"RTN","IVMPREC6",5,0)
 ; This routine will process batch ORU demographic (event type Z05) HL7
"RTN","IVMPREC6",6,0)
 ; messages received from the IVM center.  Format of HL7 batch message:
"RTN","IVMPREC6",7,0)
 ;
"RTN","IVMPREC6",8,0)
 ;       BHS
"RTN","IVMPREC6",9,0)
 ;       {MSH
"RTN","IVMPREC6",10,0)
 ;        PID
"RTN","IVMPREC6",11,0)
 ;        ZPD
"RTN","IVMPREC6",12,0)
 ;        ZGD
"RTN","IVMPREC6",13,0)
 ;        RF1 (optional)
"RTN","IVMPREC6",14,0)
 ;       }
"RTN","IVMPREC6",15,0)
 ;       BTS
"RTN","IVMPREC6",16,0)
 ;
"RTN","IVMPREC6",17,0)
 ;
"RTN","IVMPREC6",18,0)
EN ; - entry point to process HL7 patient demographic message 
"RTN","IVMPREC6",19,0)
 ;
"RTN","IVMPREC6",20,0)
 N DGENUPLD,VAFCA08,DGRUGA08
"RTN","IVMPREC6",21,0)
 ;
"RTN","IVMPREC6",22,0)
 ; prevent a return Z07 when uploading a Z05 (Patient file triggers)
"RTN","IVMPREC6",23,0)
 S DGENUPLD="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS"
"RTN","IVMPREC6",24,0)
 ;
"RTN","IVMPREC6",25,0)
 ; prevent MPI A08 message when uploading Z05 (Patient file triggers)
"RTN","IVMPREC6",26,0)
 S VAFCA08=1  ;MPI/CIRN A08 suppression flag
"RTN","IVMPREC6",27,0)
 ;
"RTN","IVMPREC6",28,0)
 S IVMFLG=0
"RTN","IVMPREC6",29,0)
 ; - get incoming HL7 message from HL7 Transmission (#772) file
"RTN","IVMPREC6",30,0)
 F IVMDA=0:0 S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D
"RTN","IVMPREC6",31,0)
 .K HLERR
"RTN","IVMPREC6",32,0)
 .;
"RTN","IVMPREC6",33,0)
 .; - message control id from MSH segment
"RTN","IVMPREC6",34,0)
 .S MSGID=$P(IVMSEG,HLFS,10),HLMID=MSGID
"RTN","IVMPREC6",35,0)
 .;
"RTN","IVMPREC6",36,0)
 .; - perform demographics message consistency check
"RTN","IVMPREC6",37,0)
 .D EN^IVMPRECA Q:$D(HLERR)
"RTN","IVMPREC6",38,0)
 .;
"RTN","IVMPREC6",39,0)
 .; - get next msg segment
"RTN","IVMPREC6",40,0)
 .D NEXT I $E(IVMSEG,1,3)'="PID" D  Q
"RTN","IVMPREC6",41,0)
 ..S HLERR="Missing PID segment" D ACK^IVMPREC
"RTN","IVMPREC6",42,0)
 .;
"RTN","IVMPREC6",43,0)
 .; - patient IEN (DFN) from PID segment
"RTN","IVMPREC6",44,0)
 .S DFN=$P($P(IVMSEG,HLFS,4),$E(HLECH),1)
"RTN","IVMPREC6",45,0)
 .;
"RTN","IVMPREC6",46,0)
 .I ('DFN!(DFN'=+DFN)!('$D(^DPT(+DFN,0)))) D  Q
"RTN","IVMPREC6",47,0)
 ..S HLERR="Invalid DFN" D ACK^IVMPREC
"RTN","IVMPREC6",48,0)
 .I $P(IVMSEG,HLFS,20)'=$P(^DPT(DFN,0),"^",9) D  Q
"RTN","IVMPREC6",49,0)
 ..S HLERR="Couldn't match HEC SSN with DHCP SSN" D ACK^IVMPREC
"RTN","IVMPREC6",50,0)
 .;
"RTN","IVMPREC6",51,0)
 .; - check for entry in IVM PATIENT file, otherwise create stub entry
"RTN","IVMPREC6",52,0)
 .S IVM3015=$O(^IVM(301.5,"B",DFN,0))
"RTN","IVMPREC6",53,0)
 .I 'IVM3015 S IVM3015=$$LOG^IVMPLOG(DFN,DT)
"RTN","IVMPREC6",54,0)
 .I 'IVM3015 D  Q
"RTN","IVMPREC6",55,0)
 ..S HLERR="Failed to create entry in IVM PATIENT file"
"RTN","IVMPREC6",56,0)
 ..D ACK^IVMPREC
"RTN","IVMPREC6",57,0)
 .;
"RTN","IVMPREC6",58,0)
 .; - compare PID segment fields with DHCP fields
"RTN","IVMPREC6",59,0)
 .D COMPARE(IVMSEG) Q:$D(HLERR)
"RTN","IVMPREC6",60,0)
 .;
"RTN","IVMPREC6",61,0)
 .; - get next msg segment
"RTN","IVMPREC6",62,0)
 .D NEXT I $E(IVMSEG,1,3)'="ZPD" D  Q
"RTN","IVMPREC6",63,0)
 ..S HLERR="Missing ZPD segment" D ACK^IVMPREC
"RTN","IVMPREC6",64,0)
 .;
"RTN","IVMPREC6",65,0)
 .; - compare ZPD segment fields with DHCP fields
"RTN","IVMPREC6",66,0)
 .D COMPARE(IVMSEG)
"RTN","IVMPREC6",67,0)
 .;
"RTN","IVMPREC6",68,0)
 .; - get next msg segment
"RTN","IVMPREC6",69,0)
 .D NEXT I $E(IVMSEG,1,3)="ZEL" D  Q
"RTN","IVMPREC6",70,0)
 ..S HLERR="ZEL segment should not be sent in Z05 message" D ACK^IVMPREC
"RTN","IVMPREC6",71,0)
 .;
"RTN","IVMPREC6",72,0)
 .; - get next msg segment
"RTN","IVMPREC6",73,0)
 .I $E(IVMSEG,1,3)'="ZGD" D  Q
"RTN","IVMPREC6",74,0)
 ..S HLERR="Missing ZGD segment" D ACK^IVMPREC
"RTN","IVMPREC6",75,0)
 .;
"RTN","IVMPREC6",76,0)
 .; - compare ZGD segment fields with DHCP fields
"RTN","IVMPREC6",77,0)
 .D COMPARE(IVMSEG)
"RTN","IVMPREC6",78,0)
 .;S IVMFLG=0
"RTN","IVMPREC6",79,0)
 .;
"RTN","IVMPREC6",80,0)
 .; - check for RF1 segment and get segment if it exists
"RTN","IVMPREC6",81,0)
 .;     This process will automatically update patient address data
"RTN","IVMPREC6",82,0)
 .;     in the Patient (#2) file if the incoming address is more
"RTN","IVMPREC6",83,0)
 .;     recent than the existing one.
"RTN","IVMPREC6",84,0)
 .I $$RF1CHK(IVMRTN,IVMDA) D NEXT,COMPARE(IVMSEG) S IVMFLG=0
"RTN","IVMPREC6",85,0)
 ;
"RTN","IVMPREC6",86,0)
 ; - send mail message if necessary
"RTN","IVMPREC6",87,0)
 I IVMCNTR D MAIL^IVMUFNC()
"RTN","IVMPREC6",88,0)
 ;
"RTN","IVMPREC6",89,0)
ENQ ; - cleanup variables
"RTN","IVMPREC6",90,0)
 K DA,DFN,IVMADDR,IVMADFLG,IVMDA,IVMDHCP,IVMFLAG,IVMFLD,IVMPIECE,IVMSEG,IVMSTART,IVMXREF,DGENUPLD
"RTN","IVMPREC6",91,0)
 Q
"RTN","IVMPREC6",92,0)
 ;
"RTN","IVMPREC6",93,0)
 ;
"RTN","IVMPREC6",94,0)
NEXT ; - get the next HL7 segment in the message from HL7 Transmission (#772) file
"RTN","IVMPREC6",95,0)
 ;
"RTN","IVMPREC6",96,0)
 S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)),IVMSEG=$G(^(+IVMDA,0))
"RTN","IVMPREC6",97,0)
 Q
"RTN","IVMPREC6",98,0)
 ;
"RTN","IVMPREC6",99,0)
 ;
"RTN","IVMPREC6",100,0)
COMPARE(IVMSEG) ; - compare incoming HL7 segment/fields with DHCP fields
"RTN","IVMPREC6",101,0)
 ;
"RTN","IVMPREC6",102,0)
 ;  Input:  IVMSEG  --  as the text of the incoming HL7 message
"RTN","IVMPREC6",103,0)
 ;
"RTN","IVMPREC6",104,0)
 ; Output:  None
"RTN","IVMPREC6",105,0)
 ;
"RTN","IVMPREC6",106,0)
 ; - get 3 letter HL7 segment name
"RTN","IVMPREC6",107,0)
 S IVMXREF=$P(IVMSEG,HLFS,1),IVMSTART=IVMXREF
"RTN","IVMPREC6",108,0)
 ;
"RTN","IVMPREC6",109,0)
 ; - strip off HL7 segment name
"RTN","IVMPREC6",110,0)
 S IVMSEG=$P(IVMSEG,HLFS,2,99)
"RTN","IVMPREC6",111,0)
 ;
"RTN","IVMPREC6",112,0)
 ; - roll through "C" x-ref in IVM Demographic Upload Fields (#301.92) file
"RTN","IVMPREC6",113,0)
 F  S IVMXREF=$O(^IVM(301.92,"C",IVMXREF)) Q:IVMXREF']""  D
"RTN","IVMPREC6",114,0)
 .S IVMDEMDA=$O(^IVM(301.92,"C",IVMXREF,"")) Q:IVMDEMDA']""
"RTN","IVMPREC6",115,0)
 .I $$INACTIVE(IVMDEMDA) Q
"RTN","IVMPREC6",116,0)
 .;
"RTN","IVMPREC6",117,0)
 .; - compare incoming HL7 segment fields with DHCP fields
"RTN","IVMPREC6",118,0)
 .I IVMXREF["PID",(IVMSTART["PID") D PID^IVMPREC8
"RTN","IVMPREC6",119,0)
 .I IVMXREF["ZPD",(IVMSTART["ZPD") D ZPD^IVMPREC8
"RTN","IVMPREC6",120,0)
 .I IVMXREF["ZGD",(IVMSTART["ZGD") D ZGD^IVMPREC8
"RTN","IVMPREC6",121,0)
 .I IVMXREF["RF1",(IVMSTART["RF1") D RF1^IVMPREC8
"RTN","IVMPREC6",122,0)
 Q
"RTN","IVMPREC6",123,0)
 ;
"RTN","IVMPREC6",124,0)
 ;
"RTN","IVMPREC6",125,0)
DEMBULL ; -  build mail message for transmission to IVM mail group notifying
"RTN","IVMPREC6",126,0)
 ;    them that patients with updated demographic data has been received
"RTN","IVMPREC6",127,0)
 ;    from the IVM Center and may now be uploaded into DHCP.
"RTN","IVMPREC6",128,0)
 ;
"RTN","IVMPREC6",129,0)
 S IVMPTID=$$PT^IVMUFNC4(DFN)
"RTN","IVMPREC6",130,0)
 S XMSUB="IVM - DEMOGRAPHIC UPLOAD for "_$P($P(IVMPTID,"^"),",")_" ("_$P(IVMPTID,"^",3)_")"
"RTN","IVMPREC6",131,0)
 S IVMTEXT(1)="Updated demographic information has been received from the"
"RTN","IVMPREC6",132,0)
 S IVMTEXT(2)="Health Eligibilty Center.  Please select the 'Demographic Upload'"
"RTN","IVMPREC6",133,0)
 S IVMTEXT(3)="option from the IVM Upload Menu in order to take action on this"
"RTN","IVMPREC6",134,0)
 S IVMTEXT(4)="demographic information.  If you have any questions concerning the"
"RTN","IVMPREC6",135,0)
 S IVMTEXT(5)="information received, please contact the Health Eligibility Center."
"RTN","IVMPREC6",136,0)
 S IVMTEXT(7)=""
"RTN","IVMPREC6",137,0)
 S IVMTEXT(8)="The Health Eligibilty Center has identified the following"
"RTN","IVMPREC6",138,0)
 S IVMTEXT(9)="patients as having updated demographic information:"
"RTN","IVMPREC6",139,0)
 S IVMTEXT(10)=""
"RTN","IVMPREC6",140,0)
 S IVMCNTR=IVMCNTR+1
"RTN","IVMPREC6",141,0)
 S IVMTEXT(IVMCNTR+10)=$J(IVMCNTR_")",5)_"  "_$P(IVMPTID,"^")_" ("_$P(IVMPTID,"^",3)_")"
"RTN","IVMPREC6",142,0)
 Q
"RTN","IVMPREC6",143,0)
 ;
"RTN","IVMPREC6",144,0)
INACTIVE(IVMDEMDA) ;Check if field is inactive in Demographic Upload
"RTN","IVMPREC6",145,0)
 ; Input  -- IVMDEMDA IVM Demographic Upload Fields IEN
"RTN","IVMPREC6",146,0)
 ; Output -- 1=Yes and 0=No
"RTN","IVMPREC6",147,0)
 Q +$P($G(^IVM(301.92,IVMDEMDA,0)),U,9)
"RTN","IVMPREC6",148,0)
 ;
"RTN","IVMPREC6",149,0)
RF1CHK(IVMRTN,IVMDA) ;does an RF1 segment exist in this message?
"RTN","IVMPREC6",150,0)
 N RF1
"RTN","IVMPREC6",151,0)
 S RF1=$O(^TMP($J,IVMRTN,IVMDA))
"RTN","IVMPREC6",152,0)
 I $E($G(^(+RF1,0)),1,3)'="RF1" Q 0
"RTN","IVMPREC6",153,0)
 Q 1
"RTN","IVMPREC8")
0^4^B28056096
"RTN","IVMPREC8",1,0)
IVMPREC8 ;ALB/KCL/BRM - PROCESS INCOMING (Z05 EVENT TYPE) HL7 MESSAGES (CON'T) ; 5/29/03 4:08pm
"RTN","IVMPREC8",2,0)
 ;;2.0; INCOME VERIFICATION MATCH ;**5,6,12,58,73,79**; 21-OCT-94
"RTN","IVMPREC8",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPREC8",4,0)
 ;
"RTN","IVMPREC8",5,0)
 ; This routine is called from IVMPREC6.
"RTN","IVMPREC8",6,0)
 ; This routine will process batch ORU demographic (event type Z05) HL7
"RTN","IVMPREC8",7,0)
 ; messages received from the IVM center.
"RTN","IVMPREC8",8,0)
 ;
"RTN","IVMPREC8",9,0)
 ;
"RTN","IVMPREC8",10,0)
 ;
"RTN","IVMPREC8",11,0)
PID ; - compare PID segment fields with DHCP fields
"RTN","IVMPREC8",12,0)
 N COMPPH1,COMPPH2
"RTN","IVMPREC8",13,0)
 ;
"RTN","IVMPREC8",14,0)
 ; - strip off segment name
"RTN","IVMPREC8",15,0)
 S IVMPIECE=$E(IVMXREF,4,7)
"RTN","IVMPREC8",16,0)
 ;
"RTN","IVMPREC8",17,0)
 I $P(IVMSEG,HLFS,$E(IVMPIECE,1,2))]"" D
"RTN","IVMPREC8",18,0)
 .;
"RTN","IVMPREC8",19,0)
 .; - if PID field is the address field - parse address
"RTN","IVMPREC8",20,0)
 .S IVMADFLG=0
"RTN","IVMPREC8",21,0)
 .I IVMXREF["PID11" D  Q:IVMFLD=""
"RTN","IVMPREC8",22,0)
 ..; - get PID address field containing 5 pieces seperated by HLECH (~)
"RTN","IVMPREC8",23,0)
 ..S IVMADDR=$P(IVMSEG,HLFS,$E(IVMPIECE,1,2))
"RTN","IVMPREC8",24,0)
 ..; - get piece of address field, and set IVMFLD
"RTN","IVMPREC8",25,0)
 ..S IVMPIECE=$E(IVMPIECE,3,4),IVMFLD=$P(IVMADDR,$E(HLECH),IVMPIECE)
"RTN","IVMPREC8",26,0)
 ..Q:IVMFLD=""
"RTN","IVMPREC8",27,0)
 ..; - convert state abbrev. to pointer
"RTN","IVMPREC8",28,0)
 ..I IVMPIECE=4 S (IVMSTPTR,IVMFLD)=+$O(^DIC(5,"C",IVMFLD,0))
"RTN","IVMPREC8",29,0)
 ..I IVMPIECE=5 S X=IVMFLD D ZIPIN^VAFADDR S IVMFLD=X
"RTN","IVMPREC8",30,0)
 ..S IVMADFLG=1
"RTN","IVMPREC8",31,0)
 .;
"RTN","IVMPREC8",32,0)
 .I IVMXREF["PID12" S IVMADFLG=1,IVMFLD=+$O(^DIC(5,IVMSTPTR,1,"C",$P(IVMSEG,HLFS,12),0))
"RTN","IVMPREC8",33,0)
 .; line remove so that the phone number is compared 
"RTN","IVMPREC8",34,0)
 .; before saving to 301.5.
"RTN","IVMPREC8",35,0)
 .;I IVMXREF["PID13" S IVMFLD=$P(IVMSEG,HLFS,13) D STORE^IVMPREC9 S IVMADFLG=1 Q
"RTN","IVMPREC8",36,0)
 .;
"RTN","IVMPREC8",37,0)
 .; - file address fields and quit
"RTN","IVMPREC8",38,0)
 .I IVMADFLG D STORE^IVMPREC9 Q
"RTN","IVMPREC8",39,0)
 .;
"RTN","IVMPREC8",40,0)
 .; - otherwise, set IVMFLD to field rec'd from IVM
"RTN","IVMPREC8",41,0)
 .;   for comparison with DHCP field
"RTN","IVMPREC8",42,0)
 .S IVMFLD=$P(IVMSEG,HLFS,IVMPIECE)
"RTN","IVMPREC8",43,0)
 .;
"RTN","IVMPREC8",44,0)
 .; - if HL7 date convert to FM date and set IVMFLD
"RTN","IVMPREC8",45,0)
 .I IVMXREF["PID07" S IVMFLD=$$FMDATE^HLFNC(IVMFLD)
"RTN","IVMPREC8",46,0)
 .;
"RTN","IVMPREC8",47,0)
 .; - call VADPT routine to return DHCP demographics
"RTN","IVMPREC8",48,0)
 .D DEM^VADPT,ADD^VADPT
"RTN","IVMPREC8",49,0)
 .;
"RTN","IVMPREC8",50,0)
 .; - execute code on the 1 node and get DHCP field for comparison
"RTN","IVMPREC8",51,0)
 .S IVMDHCP="" X:$D(^IVM(301.92,+IVMDEMDA,1)) ^(1) S IVMDHCP=Y
"RTN","IVMPREC8",52,0)
 .;
"RTN","IVMPREC8",53,0)
 .; - special logic for phone number processing
"RTN","IVMPREC8",54,0)
 .; - if different, then store the actual value received, then quit
"RTN","IVMPREC8",55,0)
 .I IVMXREF["PID13",IVMFLD]"" D  Q
"RTN","IVMPREC8",56,0)
 ..S COMPPH1=$$CONVPH(IVMFLD)
"RTN","IVMPREC8",57,0)
 ..S COMPPH2=$$CONVPH(IVMDHCP)
"RTN","IVMPREC8",58,0)
 ..I COMPPH1'=COMPPH2 D STORE^IVMPREC9
"RTN","IVMPREC8",59,0)
 .;
"RTN","IVMPREC8",60,0)
 .; - if field from IVM does not equal DHCP field - store for uploading
"RTN","IVMPREC8",61,0)
 .I IVMFLD]"",(IVMFLD'=IVMDHCP) D STORE^IVMPREC9
"RTN","IVMPREC8",62,0)
 Q
"RTN","IVMPREC8",63,0)
 ;
"RTN","IVMPREC8",64,0)
 ;
"RTN","IVMPREC8",65,0)
ZPD ; - compare ZPD segment fields with DHCP fields
"RTN","IVMPREC8",66,0)
 S IVMPIECE=$E(IVMXREF,4,5)
"RTN","IVMPREC8",67,0)
 I $P(IVMSEG,HLFS,IVMPIECE)]"" D
"RTN","IVMPREC8",68,0)
 .;
"RTN","IVMPREC8",69,0)
 .; - set var to HL7 field
"RTN","IVMPREC8",70,0)
 .S IVMFLD=$P(IVMSEG,HLFS,IVMPIECE)
"RTN","IVMPREC8",71,0)
 .;
"RTN","IVMPREC8",72,0)
 .; - if HL7 date convert to FM date
"RTN","IVMPREC8",73,0)
 .I IVMXREF["ZPD09"!(IVMXREF["ZPD13") S IVMFLD=$$FMDATE^HLFNC(IVMFLD)
"RTN","IVMPREC8",74,0)
 .;
"RTN","IVMPREC8",75,0)
 .; - execute code on the 1 node and get DHCP field
"RTN","IVMPREC8",76,0)
 .S IVMDHCP="" X:$D(^IVM(301.92,+IVMDEMDA,1)) ^(1) S IVMDHCP=Y
"RTN","IVMPREC8",77,0)
 .;
"RTN","IVMPREC8",78,0)
 .; - if field from IVM does not equal DHCP field - store for uploading 
"RTN","IVMPREC8",79,0)
 .I IVMFLD]"",(IVMFLD'=IVMDHCP) D STORE^IVMPREC9
"RTN","IVMPREC8",80,0)
 Q
"RTN","IVMPREC8",81,0)
 ;
"RTN","IVMPREC8",82,0)
 ;
"RTN","IVMPREC8",83,0)
ZGD ; - compare ZGD segment fields with DHCP fields
"RTN","IVMPREC8",84,0)
 S IVMADFLG=0
"RTN","IVMPREC8",85,0)
 S IVMPIECE=$E(IVMXREF,4,7)
"RTN","IVMPREC8",86,0)
 I $P(IVMSEG,HLFS,$E(IVMPIECE,1,2))]"" D
"RTN","IVMPREC8",87,0)
 .;
"RTN","IVMPREC8",88,0)
 .; - set var IVMFLD to incoming HL7 field
"RTN","IVMPREC8",89,0)
 .I 'IVMADFLG S IVMFLD=$P(IVMSEG,HLFS,IVMPIECE)
"RTN","IVMPREC8",90,0)
 .;
"RTN","IVMPREC8",91,0)
 .; - ZGD06 as the ZGD address field containing 5 pieces seperated by HLECH (~)
"RTN","IVMPREC8",92,0)
 .I IVMXREF["ZGD06" D
"RTN","IVMPREC8",93,0)
 ..S IVMADDR=$P(IVMSEG,HLFS,$E(IVMPIECE,1,2)),IVMPIECE=$E(IVMPIECE,3)
"RTN","IVMPREC8",94,0)
 ..S IVMFLD=$P(IVMADDR,$E(HLECH),IVMPIECE),IVMADFLG=1
"RTN","IVMPREC8",95,0)
 ..I IVMFLD]"",IVMPIECE=4 S IVMFLD=$O(^DIC(5,"C",IVMFLD,0))
"RTN","IVMPREC8",96,0)
 ..I IVMFLD]"",IVMPIECE=5 S X=IVMFLD D ZIPIN^VAFADDR S IVMFLD=$G(X)
"RTN","IVMPREC8",97,0)
 .;
"RTN","IVMPREC8",98,0)
 .; - if HL7 date convert to FM date
"RTN","IVMPREC8",99,0)
 .I IVMXREF["ZGD08" S IVMFLD=$$FMDATE^HLFNC(IVMFLD)
"RTN","IVMPREC8",100,0)
 .;
"RTN","IVMPREC8",101,0)
 .; - execute code on the 1 node and get DHCP field
"RTN","IVMPREC8",102,0)
 .S IVMDHCP="" X:$D(^IVM(301.92,+IVMDEMDA,1)) ^(1) S IVMDHCP=Y
"RTN","IVMPREC8",103,0)
 .;
"RTN","IVMPREC8",104,0)
 .; if field from IVM does not equal DHCP field - store for uploading
"RTN","IVMPREC8",105,0)
 .I IVMFLD]"",(IVMFLD'=IVMDHCP) D STORE^IVMPREC9
"RTN","IVMPREC8",106,0)
 Q
"RTN","IVMPREC8",107,0)
RF1 ; - compare RF1 segment fields with DHCP fields
"RTN","IVMPREC8",108,0)
 S IVMPIECE=$E(IVMXREF,4),IVMADFLG=1
"RTN","IVMPREC8",109,0)
 I $P(IVMSEG,HLFS,IVMPIECE)]"" D
"RTN","IVMPREC8",110,0)
 .;if RF1 field is SEQ6, then parse subcomponents
"RTN","IVMPREC8",111,0)
 .I IVMXREF["RF16" D  Q
"RTN","IVMPREC8",112,0)
 ..;- get data containing 4 pieces seperated by HLECH (~)
"RTN","IVMPREC8",113,0)
 ..S IVMRFDAT=$P(IVMSEG,HLFS,6)
"RTN","IVMPREC8",114,0)
 ..S IVMPIECE=$E(IVMXREF,5),IVMFLD=$P(IVMRFDAT,"~",IVMPIECE)
"RTN","IVMPREC8",115,0)
 ..I IVMPIECE=2 S IVMFLD=$$ADDRCNV(IVMFLD)
"RTN","IVMPREC8",116,0)
 ..Q:IVMFLD=""
"RTN","IVMPREC8",117,0)
 ..D STORE^IVMPREC9
"RTN","IVMPREC8",118,0)
 .I IVMXREF["RF17" D  Q
"RTN","IVMPREC8",119,0)
 ..;get address change date/tm field
"RTN","IVMPREC8",120,0)
 ..S IVMFLD=$$FMDATE^HLFNC($P(IVMSEG,HLFS,7))
"RTN","IVMPREC8",121,0)
 ..Q:IVMFLD=""
"RTN","IVMPREC8",122,0)
 ..D STORE^IVMPREC9
"RTN","IVMPREC8",123,0)
 ..; check for auto-upload
"RTN","IVMPREC8",124,0)
 ..S NOUPDT=0,IVMDHCP=$P($G(^DPT(DFN,.11)),HLFS,13)
"RTN","IVMPREC8",125,0)
 ..I IVMFLD]"",(IVMFLD'>IVMDHCP) S NOUPDT=1
"RTN","IVMPREC8",126,0)
 ..I $$AUTOADDR^IVMLDEM6(DFN,1,NOUPDT)
"RTN","IVMPREC8",127,0)
 Q
"RTN","IVMPREC8",128,0)
 ;
"RTN","IVMPREC8",129,0)
ADDRCNV(ADDRSRC) ;convert Address Source from HL7 to DHCP format
"RTN","IVMPREC8",130,0)
 ;
"RTN","IVMPREC8",131,0)
 Q:$G(ADDRSRC)']"" ""
"RTN","IVMPREC8",132,0)
 Q:ADDRSRC="USVAHEC" "HEC"
"RTN","IVMPREC8",133,0)
 Q:ADDRSRC="USVAMC" "VAMC"
"RTN","IVMPREC8",134,0)
 Q:ADDRSRC="USVAHBSC" "HBSC"
"RTN","IVMPREC8",135,0)
 Q:ADDRSRC="USNCOA" "NCOA"
"RTN","IVMPREC8",136,0)
 Q:ADDRSRC="USVABVA" "BVA"
"RTN","IVMPREC8",137,0)
 Q:ADDRSRC="USVAINS" "VAINS"
"RTN","IVMPREC8",138,0)
 Q:ADDRSRC="USPS" "USPS"
"RTN","IVMPREC8",139,0)
 Q ""
"RTN","IVMPREC8",140,0)
CONVPH(PH) ;remove special chars/spaces from Phone number
"RTN","IVMPREC8",141,0)
 Q $TR(PH," )(/#\-","")
"RTN","IVMPTRN")
0^5^B34376885
"RTN","IVMPTRN",1,0)
IVMPTRN ;ALB/MLI,SEK,RTK,BRM - IVM BACKGROUND JOB/TRANSMISSIONS TO IVM CENTER; 16-JUN-00 ; 7/24/03 2:10pm
"RTN","IVMPTRN",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**1,9,11,12,17,28,34,74,79**;21-OCT-94
"RTN","IVMPTRN",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPTRN",4,0)
 ;
"RTN","IVMPTRN",5,0)
 ; This routine is run nightly to send HL7 messages to the IVM Center for
"RTN","IVMPTRN",6,0)
 ; processing.
"RTN","IVMPTRN",7,0)
 ;
"RTN","IVMPTRN",8,0)
BGJ ; - IVM Nightly Background Job
"RTN","IVMPTRN",9,0)
 ;
"RTN","IVMPTRN",10,0)
 ;for tests being held for the future, make them primary if now effective
"RTN","IVMPTRN",11,0)
 D FUTUREMT,FUTURERX
"RTN","IVMPTRN",12,0)
 ;
"RTN","IVMPTRN",13,0)
 ; - retransmit enrollment/eligibility queries with no reply
"RTN","IVMPTRN",14,0)
 D BATCH^DGENQRY1
"RTN","IVMPTRN",15,0)
 ;
"RTN","IVMPTRN",16,0)
 ; - retransmit income test (financial) queries with no reply
"RTN","IVMPTRN",17,0)
 D MONITOR^IVMCQ2
"RTN","IVMPTRN",18,0)
 ;
"RTN","IVMPTRN",19,0)
 ; - current year and previous year
"RTN","IVMPTRN",20,0)
 S IVMCURYR=$$LYR^DGMTSCU1(DT),IVMPREYR=$$LYR^DGMTSCU1(IVMCURYR)
"RTN","IVMPTRN",21,0)
 ;
"RTN","IVMPTRN",22,0)
 ;
"RTN","IVMPTRN",23,0)
 ; - Master Query Processing
"RTN","IVMPTRN",24,0)
 ;
"RTN","IVMPTRN",25,0)
 ; - respond to Master Query for previous year, if necessary
"RTN","IVMPTRN",26,0)
 S IVMREC=$$QRY(IVMPREYR) I IVMREC D RESP(IVMPREYR,+IVMREC),END
"RTN","IVMPTRN",27,0)
 ;
"RTN","IVMPTRN",28,0)
 ; - respond to Master Query for current year, if necessary
"RTN","IVMPTRN",29,0)
 S IVMREC=$$QRY(IVMCURYR) I IVMREC D RESP(IVMCURYR,+IVMREC),END
"RTN","IVMPTRN",30,0)
 ;
"RTN","IVMPTRN",31,0)
 ; - send regular 'nightly' transmissions
"RTN","IVMPTRN",32,0)
 D REG,END
"RTN","IVMPTRN",33,0)
 ;
"RTN","IVMPTRN",34,0)
 ; - perform retransmission processing
"RTN","IVMPTRN",35,0)
 D ENTRY^IVMPTRN4,END
"RTN","IVMPTRN",36,0)
 ;
"RTN","IVMPTRN",37,0)
 ; - process billing activity
"RTN","IVMPTRN",38,0)
 D EN^IVMPTRN5
"RTN","IVMPTRN",39,0)
 ;
"RTN","IVMPTRN",40,0)
 ; - auto-upload address changes from #301.5 if >14 days old
"RTN","IVMPTRN",41,0)
 ; - auto-delete non address changes from #301.5 if >30 days old
"RTN","IVMPTRN",42,0)
 N ADDRDT S ADDRDT(0)=30,ADDRDT(1)=14 D EN^IVMLDEMC(.ADDRDT)
"RTN","IVMPTRN",43,0)
 ;
"RTN","IVMPTRN",44,0)
END ; - cleanup
"RTN","IVMPTRN",45,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IVMPTRN",46,0)
 K DA,DFN,DIE,DIK,DR,IVMCT,IVMDA,IVMDT,IVMGTOT,IVMINCYR,IVMINS,IVMMTDT
"RTN","IVMPTRN",47,0)
 K IVMNODE,IVMPAT,IVMPID,IVMQDT,IVMREC,IVMSTAT,X,%,VAFPID,IVMPREYR,IVMIY
"RTN","IVMPTRN",48,0)
 D CLEAN^IVMUFNC
"RTN","IVMPTRN",49,0)
 Q
"RTN","IVMPTRN",50,0)
 ;
"RTN","IVMPTRN",51,0)
REG ; Creates FULL query transmission for patient's
"RTN","IVMPTRN",52,0)
 ;         that exist in file (#301.5) "ATR" x-ref
"RTN","IVMPTRN",53,0)
 ;
"RTN","IVMPTRN",54,0)
 ;
"RTN","IVMPTRN",55,0)
 ; - initialize variables for HL7/IVM
"RTN","IVMPTRN",56,0)
 S HLMTN="ORU"
"RTN","IVMPTRN",57,0)
 S HLEID="VAMC "_$P($$SITE^VASITE,"^",3)_" "_HLMTN_"-Z07 SERVER"
"RTN","IVMPTRN",58,0)
 S HLEID=$O(^ORD(101,"B",HLEID,0))
"RTN","IVMPTRN",59,0)
 D INIT^IVMUFNC(HLEID,.HL)
"RTN","IVMPTRN",60,0)
 ;
"RTN","IVMPTRN",61,0)
 ; - roll thru ATR x-ref for patients that require transmission
"RTN","IVMPTRN",62,0)
 K IVMQUERY("LTD"),IVMQUERY("OVIS") ;Variables needed to open/close last visit date and outpt visit QUERIES
"RTN","IVMPTRN",63,0)
 S IVMIY=0
"RTN","IVMPTRN",64,0)
 F  S IVMIY=$O(^IVM(301.5,"ATR",0,IVMIY)) Q:'IVMIY  D
"RTN","IVMPTRN",65,0)
 .S IVMDA=0
"RTN","IVMPTRN",66,0)
 .F  S IVMDA=$O(^IVM(301.5,"ATR",0,IVMIY,IVMDA)) Q:'IVMDA  D
"RTN","IVMPTRN",67,0)
 ..;
"RTN","IVMPTRN",68,0)
 ..N EVENTS
"RTN","IVMPTRN",69,0)
 ..; - get node, income year, dfn
"RTN","IVMPTRN",70,0)
 ..S IVMNODE=$G(^IVM(301.5,+IVMDA,0)),IVMDT=+$P(IVMNODE,"^",2),DFN=+IVMNODE
"RTN","IVMPTRN",71,0)
 ..I 'DFN!'IVMDT Q
"RTN","IVMPTRN",72,0)
 ..;
"RTN","IVMPTRN",73,0)
 ..Q:($$STATUS^IVMPLOG(IVMDA,.EVENTS)=1)
"RTN","IVMPTRN",74,0)
 ..;
"RTN","IVMPTRN",75,0)
 ..S IVMMTDT=$P($$LST^DGMTU(DFN,($E(IVMDT,1,3)+1)_"1231.9999"),"^",2)
"RTN","IVMPTRN",76,0)
 ..;
"RTN","IVMPTRN",77,0)
 ..; - prepare FULL transmission
"RTN","IVMPTRN",78,0)
 ..D FULL^IVMPTRN7(DFN,IVMMTDT,.EVENTS,.IVMCT,.IVMGTOT,,,,.IVMQUERY)
"RTN","IVMPTRN",79,0)
 ;
"RTN","IVMPTRN",80,0)
 F Z="LTD","OVIS" I $G(IVMQUERY(Z)) D CLOSE^SDQ(IVMQUERY(Z)) K IVMQUERY(Z)
"RTN","IVMPTRN",81,0)
 ; - transmit remaining records
"RTN","IVMPTRN",82,0)
 D
"RTN","IVMPTRN",83,0)
 .N IVMEVENT
"RTN","IVMPTRN",84,0)
 .; event code for Full Data Transmission
"RTN","IVMPTRN",85,0)
 .S IVMEVENT="Z07"
"RTN","IVMPTRN",86,0)
 .D FILE^IVMPTRN3
"RTN","IVMPTRN",87,0)
 Q
"RTN","IVMPTRN",88,0)
 ;
"RTN","IVMPTRN",89,0)
RESP(IVMINCYR,IVMREC) ; Response to the Master Query.
"RTN","IVMPTRN",90,0)
 ;
"RTN","IVMPTRN",91,0)
 ; Input: IVMINCYR -  The income year for which the query was sent
"RTN","IVMPTRN",92,0)
 ;        IVMREC   -  Internal entry number of query to be updated
"RTN","IVMPTRN",93,0)
 ;
"RTN","IVMPTRN",94,0)
 N DFN,IVMDA,IVMMTDT,DA,DR,DIE,EVENTS
"RTN","IVMPTRN",95,0)
 ;
"RTN","IVMPTRN",96,0)
 ; - initialize variables for HL7/IVM
"RTN","IVMPTRN",97,0)
 S HLMTN="ORF"
"RTN","IVMPTRN",98,0)
 S HLEID="VAMC "_$P($$SITE^VASITE,"^",3)_" "_HLMTN_"-Z07 SERVER"
"RTN","IVMPTRN",99,0)
 S HLEID=$O(^ORD(101,"B",HLEID,0))
"RTN","IVMPTRN",100,0)
 D INIT^IVMUFNC(HLEID,.HL)
"RTN","IVMPTRN",101,0)
 ;
"RTN","IVMPTRN",102,0)
 ; - roll thru AYR x-ref
"RTN","IVMPTRN",103,0)
 F DFN=0:0 S DFN=$O(^IVM(301.5,"AYR",IVMINCYR,DFN)) Q:'DFN  D
"RTN","IVMPTRN",104,0)
 .F IVMDA=0:0 S IVMDA=$O(^IVM(301.5,"AYR",IVMINCYR,DFN,IVMDA)) Q:'IVMDA  D
"RTN","IVMPTRN",105,0)
 ..;
"RTN","IVMPTRN",106,0)
 ..; - check for STOP FLAG in file #301.5.
"RTN","IVMPTRN",107,0)
 ..I '$$CLOSED^IVMPLOG(IVMDA) D
"RTN","IVMPTRN",108,0)
 ...;
"RTN","IVMPTRN",109,0)
 ...; if means test was deleted, -10000 could be entered as income year
"RTN","IVMPTRN",110,0)
 ...; in ^IVM(301.5.  close case if deleted.
"RTN","IVMPTRN",111,0)
 ...S IVMMTDT=$P($$LST^DGMTU(DFN,($E(IVMINCYR,1,3)+1)_"1231.9999"),"^",2)
"RTN","IVMPTRN",112,0)
 ...I IVMMTDT="" D CLOSE^IVMPTRN1(IVMINCYR,DFN,1,3) Q
"RTN","IVMPTRN",113,0)
 ...;
"RTN","IVMPTRN",114,0)
 ...;get EVENTS() array
"RTN","IVMPTRN",115,0)
 ...I $$STATUS^IVMPLOG(+IVMDA,.EVENTS)
"RTN","IVMPTRN",116,0)
 ...;
"RTN","IVMPTRN",117,0)
 ...; - prepare FULL transmission
"RTN","IVMPTRN",118,0)
 ...; note: 6th parameter is IVMFLL (=1 to include MSA segment)
"RTN","IVMPTRN",119,0)
 ...D FULL^IVMPTRN7(DFN,IVMMTDT,.EVENTS,.IVMCT,.IVMGTOT,1,,$G(IVMREC),.IVMQUERY)
"RTN","IVMPTRN",120,0)
 ;
"RTN","IVMPTRN",121,0)
 ; - transmit remaining records
"RTN","IVMPTRN",122,0)
 D
"RTN","IVMPTRN",123,0)
 .N IVMEVENT
"RTN","IVMPTRN",124,0)
 .; event code for Full Data Transmission
"RTN","IVMPTRN",125,0)
 .S IVMEVENT="Z07"
"RTN","IVMPTRN",126,0)
 .D FILE1^IVMPTRN3  ; added for v1.6 because of MSA segment (note: the original call was to FILE^IVMPTRN3)
"RTN","IVMPTRN",127,0)
 ;
"RTN","IVMPTRN",128,0)
 ;
"RTN","IVMPTRN",129,0)
 ; - update multiple in file #301.9. Stuff (.03) field with date/time
"RTN","IVMPTRN",130,0)
 ;   of FULL query transmission.
"RTN","IVMPTRN",131,0)
 S DIE="^IVM(301.9,1,10,",DA=+IVMREC,DA(1)=1,DR=".03////"_$$NOW^XLFDT D ^DIE
"RTN","IVMPTRN",132,0)
 Q
"RTN","IVMPTRN",133,0)
 ;
"RTN","IVMPTRN",134,0)
QRY(YEAR) ; See if Master Query has been satisfied for YEAR.
"RTN","IVMPTRN",135,0)
 ;  Input: YEAR - The income year being checked
"RTN","IVMPTRN",136,0)
 ;
"RTN","IVMPTRN",137,0)
 ; Output: 1^2, where   1 =  0, if query does not need a response
"RTN","IVMPTRN",138,0)
 ;                          >0, if query needs a response (value
"RTN","IVMPTRN",139,0)
 ;                              equal to ien of sub-file entry
"RTN","IVMPTRN",140,0)
 ;                              in #301.9
"RTN","IVMPTRN",141,0)
 ;                      2 =  0, if the request has not been received
"RTN","IVMPTRN",142,0)
 ;                           1, if the request has been received
"RTN","IVMPTRN",143,0)
 N IVM,X,Y,Z
"RTN","IVMPTRN",144,0)
 I '$G(YEAR) S X="0^0" G QRYQ
"RTN","IVMPTRN",145,0)
 S Y=$O(^IVM(301.9,1,10,"AB",YEAR,"")) I 'Y S X="0^0" G QRYQ
"RTN","IVMPTRN",146,0)
 S IVM=$O(^IVM(301.9,1,10,"AB",YEAR,Y,0)) I 'IVM S X="0^0" G QRYQ
"RTN","IVMPTRN",147,0)
 S Z=$P($G(^IVM(301.9,1,10,+IVM,0)),"^",3)
"RTN","IVMPTRN",148,0)
 S X=$S(Z:0,1:IVM)_"^1"
"RTN","IVMPTRN",149,0)
QRYQ Q X
"RTN","IVMPTRN",150,0)
 ;
"RTN","IVMPTRN",151,0)
FUTUREMT ;
"RTN","IVMPTRN",152,0)
 ;Find future tests, and if now effective then make them primary.  Will
"RTN","IVMPTRN",153,0)
 ;call the MT event driver unless NOT required, in which case the status
"RTN","IVMPTRN",154,0)
 ;will have the status will be changed to NO LONGER REQUIRED
"RTN","IVMPTRN",155,0)
 ;and may auto-create a Rx copay test
"RTN","IVMPTRN",156,0)
 ;
"RTN","IVMPTRN",157,0)
 N FDATE,IVMPAT,MTIEN,NODE,DFN,DATA
"RTN","IVMPTRN",158,0)
 ;
"RTN","IVMPTRN",159,0)
 S FDATE=0
"RTN","IVMPTRN",160,0)
 F  S FDATE=$O(^IVM(301.5,"AC",FDATE)) Q:('FDATE)  Q:(FDATE>DT)  D
"RTN","IVMPTRN",161,0)
 .S IVMPAT=0
"RTN","IVMPTRN",162,0)
 .F  S IVMPAT=$O(^IVM(301.5,"AC",FDATE,IVMPAT)) Q:'IVMPAT  D
"RTN","IVMPTRN",163,0)
 ..S MTIEN=$O(^IVM(301.5,"AC",FDATE,IVMPAT,0))
"RTN","IVMPTRN",164,0)
 ..Q:'MTIEN
"RTN","IVMPTRN",165,0)
 ..K DATA S DATA(.06)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMPTRN",166,0)
 ..S DFN=+$G(^IVM(301.5,IVMPAT,0))
"RTN","IVMPTRN",167,0)
 ..I DFN S NODE=$$LST^DGMTU(DFN,DT_.9999,1) I $E($P(NODE,"^",2),1,3)=$E(DT,1,3),$P(NODE,"^",4)'="","R"'=$P(NODE,"^",4) Q
"RTN","IVMPTRN",168,0)
 ..D MTPRIME^DGMTU4(MTIEN)
"RTN","IVMPTRN",169,0)
 Q
"RTN","IVMPTRN",170,0)
 ;
"RTN","IVMPTRN",171,0)
FUTURERX ;
"RTN","IVMPTRN",172,0)
 ;Find future COPAY tests, and if now effective then make it primary.
"RTN","IVMPTRN",173,0)
 ;Will change the status to NO LONGER APPLICABLE if the vet is not
"RTN","IVMPTRN",174,0)
 ;subject to pharmacy copayments
"RTN","IVMPTRN",175,0)
 ;
"RTN","IVMPTRN",176,0)
 N FDATE,IVMPAT,MTIEN,NODE,DFN,DATA
"RTN","IVMPTRN",177,0)
 ;
"RTN","IVMPTRN",178,0)
 S FDATE=0
"RTN","IVMPTRN",179,0)
 F  S FDATE=$O(^IVM(301.5,"AD",FDATE)) Q:('FDATE)  Q:(FDATE>DT)  D
"RTN","IVMPTRN",180,0)
 .S IVMPAT=0
"RTN","IVMPTRN",181,0)
 .F  S IVMPAT=$O(^IVM(301.5,"AD",FDATE,IVMPAT)) Q:'IVMPAT  D
"RTN","IVMPTRN",182,0)
 ..S MTIEN=$O(^IVM(301.5,"AD",FDATE,IVMPAT,0))
"RTN","IVMPTRN",183,0)
 ..Q:'MTIEN
"RTN","IVMPTRN",184,0)
 ..K DATA S DATA(.07)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMPTRN",185,0)
 ..S DFN=+$G(^IVM(301.5,IVMPAT,0))
"RTN","IVMPTRN",186,0)
 ..I DFN S NODE=$$LST^DGMTU(DFN,DT_.9999,2) I $E($P(NODE,"^",2),1,3)=$E(DT,1,3),$P(NODE,"^",4)'="" Q
"RTN","IVMPTRN",187,0)
 ..D RXPRIME^DGMTU4(MTIEN)
"RTN","IVMPTRN",188,0)
 Q
"RTN","IVMPTRN8")
0^6^B49588337
"RTN","IVMPTRN8",1,0)
IVMPTRN8 ;ALB/RKS/PDJ/BRM/TDM - HL7 FULL DATA TRANSMISSION (Z07) BUILDER ; 7/24/03 1:54pm
"RTN","IVMPTRN8",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,24,36,37,47,48,42,34,77,76,75,79**; 21-OCT-94
"RTN","IVMPTRN8",3,0)
 ;
"RTN","IVMPTRN8",4,0)
 ;
"RTN","IVMPTRN8",5,0)
BUILD(DFN,IVMMTDT,IVMCT,IVMQUERY) ; --
"RTN","IVMPTRN8",6,0)
 ;  Description: This entry point will be used to create an HL7 
"RTN","IVMPTRN8",7,0)
 ;  "Full Data Transmission" message for a patient.
"RTN","IVMPTRN8",8,0)
 ;
"RTN","IVMPTRN8",9,0)
 ;  Input:
"RTN","IVMPTRN8",10,0)
 ;        DFN - Patient IEN
"RTN","IVMPTRN8",11,0)
 ;    IVMMTDT - date of the patient's Means Test or Copay Test
"RTN","IVMPTRN8",12,0)
 ;      IVMCT - count of hl7 segments transmitted, pass by reference
"RTN","IVMPTRN8",13,0)
 ;   IVMQUERY - array passed in by reference where
"RTN","IVMPTRN8",14,0)
 ;    IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",15,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",16,0)
 ;                last treatment date
"RTN","IVMPTRN8",17,0)
 ;    IVMQUERY("OVIS") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",18,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",19,0)
 ;                finding outpatient visits
"RTN","IVMPTRN8",20,0)
 ;
"RTN","IVMPTRN8",21,0)
 ;  HL7 variables as defined by call to INIT^IVMUFNC:
"RTN","IVMPTRN8",22,0)
 ;      HLEVN - HL7 message event counter 
"RTN","IVMPTRN8",23,0)
 ;      HLSDT - a flag that indicates that the data to be sent is
"RTN","IVMPTRN8",24,0)
 ;              stored in the ^TMP("HLS") global array.
"RTN","IVMPTRN8",25,0)
 ;
"RTN","IVMPTRN8",26,0)
 ;  The following variables returned by the INIT^HLTRANS entry point:
"RTN","IVMPTRN8",27,0)
 ;    HLNDAP - Non-DHCP Application Pointer from file 770
"RTN","IVMPTRN8",28,0)
 ;   HLNDAP0 - Zero node from file 770 corresponding to HLNDAP
"RTN","IVMPTRN8",29,0)
 ;     HLDAP - DHCP Application Pointer from file 771
"RTN","IVMPTRN8",30,0)
 ;     HLDAN - The DHCP Application Name (.01 field, file 771) for HLDAP
"RTN","IVMPTRN8",31,0)
 ;     HLPID - HL7 processing ID from file 770
"RTN","IVMPTRN8",32,0)
 ;     HLVER - HL7 version number from file 770
"RTN","IVMPTRN8",33,0)
 ;      HLFS - HL7 Field Separator from the 'FS' node of file 771
"RTN","IVMPTRN8",34,0)
 ;     HLECH - HL7 Encoding Characters from the 'EC' node of file 771
"RTN","IVMPTRN8",35,0)
 ;       HLQ - Double quotes ("") for use in building HL7 segments
"RTN","IVMPTRN8",36,0)
 ;     HLERR - if an error is encountered, an error message is returned
"RTN","IVMPTRN8",37,0)
 ;             in the HLERR variable.
"RTN","IVMPTRN8",38,0)
 ;      HLDA - the internal entry number for the entry created in
"RTN","IVMPTRN8",39,0)
 ;             file #772.
"RTN","IVMPTRN8",40,0)
 ;      HLDT - transmission date/time (associated with the entry in file
"RTN","IVMPTRN8",41,0)
 ;             #772 identified by HLDA) in internal VA FileMan format.
"RTN","IVMPTRN8",42,0)
 ;     HLDT1 - the same transmission date/time as the HLDT variable, 
"RTN","IVMPTRN8",43,0)
 ;             only in HL7 format.
"RTN","IVMPTRN8",44,0)
 ;
"RTN","IVMPTRN8",45,0)
 ; Output:
"RTN","IVMPTRN8",46,0)
 ;  ^TMP("HLS",$J,IVMCT) - global array containing all segments of the HL7 message that the VistA application wishes to send.  The HLSDT variable is defined above and the IVMCT variable is a sequential number incremented by 1.
"RTN","IVMPTRN8",47,0)
 ;
"RTN","IVMPTRN8",48,0)
 ;
"RTN","IVMPTRN8",49,0)
 N DGINC,DGIR,DGREL,I,IVMNTE,IVMPID,IVMSUB,IVMZRD,VAFPID,VAFZEL,FBZFE,IVMZCD,DELETE,NODE,IVMPIEN,TEST,IVMPNODE,TESTTYPE,SEQS,TESTCODE,HARDSHIP,ACTVIEN,IVMZMH,IVMSEQ
"RTN","IVMPTRN8",50,0)
 N EDBMTZ06
"RTN","IVMPTRN8",51,0)
 ;
"RTN","IVMPTRN8",52,0)
 ; create (PID) Patient Identification segment
"RTN","IVMPTRN8",53,0)
 S IVMSEQ="3,5,7,8,11,12,13,14,19"
"RTN","IVMPTRN8",54,0)
 ; do not transmit seq 11 and 12 if the Bad Address Indicator is set
"RTN","IVMPTRN8",55,0)
 ; or other address filters do not pass
"RTN","IVMPTRN8",56,0)
 S:$$FILTER^IVMPTRN9(DFN) IVMSEQ="3,5,7,8,13,14,19"
"RTN","IVMPTRN8",57,0)
 S IVMPID=$$EN^VAFHLPID(DFN,"1,"_IVMSEQ)        ;add SEQ 1 for PID
"RTN","IVMPTRN8",58,0)
 ;
"RTN","IVMPTRN8",59,0)
 ; **** Add ICN to 2nd piece PID segment for MPI@HEC.
"RTN","IVMPTRN8",60,0)
 S IVMCMOR="1,2"
"RTN","IVMPTRN8",61,0)
 ; check to see if site is a legacy site.  If not add ICN to PID segment.
"RTN","IVMPTRN8",62,0)
 I '$D(^PPP(1020.128,"AC",$P($$SITE^VASITE,"^",3))) D
"RTN","IVMPTRN8",63,0)
 .I +$$GETICN^MPIF001(DFN)>0,($$IFLOCAL^MPIF001(DFN)=0) S IVMPID=$$EN^VAFCPID(DFN,"1,2,"_IVMSEQ),IVMCMOR="1,2,3"  ;add SEQ 1 and 2 for PID
"RTN","IVMPTRN8",64,0)
 ;
"RTN","IVMPTRN8",65,0)
 I $D(VAFPID(1)) S IVMPID(1)=VAFPID(1)
"RTN","IVMPTRN8",66,0)
 ; send SSN indicating pseudo
"RTN","IVMPTRN8",67,0)
 ; I $P(IVMPID_$G(IVMPID(1)),HLFS,20)["P" D PSEUDO^IVMPTRN1  ; strip 'P' from pseudo SSNs
"RTN","IVMPTRN8",68,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID
"RTN","IVMPTRN8",69,0)
 I $D(IVMPID(1)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID(1)
"RTN","IVMPTRN8",70,0)
 ;
"RTN","IVMPTRN8",71,0)
 ; **** create (PD1) Patient CMOR segment for MPI@HEC.
"RTN","IVMPTRN8",72,0)
 S:'$D(HL("FS")) HL("FS")=HLFS
"RTN","IVMPTRN8",73,0)
 S:'$D(HL("ECH")) HL("ECH")=HLECH
"RTN","IVMPTRN8",74,0)
 S:'$D(HL("Q")) HL("Q")=HLQ
"RTN","IVMPTRN8",75,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLPD1(DFN,IVMCMOR)
"RTN","IVMPTRN8",76,0)
 ;
"RTN","IVMPTRN8",77,0)
 ; create (ZPD) Patient Dependent Info. segment
"RTN","IVMPTRN8",78,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZPD(DFN,"1,8,9,11,12,13,17,19"),IVMINS=$P(^(IVMCT),HLFS,12)
"RTN","IVMPTRN8",79,0)
 ;
"RTN","IVMPTRN8",80,0)
 ; create (ZTA) Temporary Address segment
"RTN","IVMPTRN8",81,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZTA(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",82,0)
 ;
"RTN","IVMPTRN8",83,0)
 ; create (ZIE) Ineligible segment
"RTN","IVMPTRN8",84,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIE(DFN,"1,2,3",1)
"RTN","IVMPTRN8",85,0)
 ;
"RTN","IVMPTRN8",86,0)
 ; create (ZEL) Eligibility segment(s) 
"RTN","IVMPTRN8",87,0)
 ; **** Add 5th piece to ZEL to correct consistency check
"RTN","IVMPTRN8",88,0)
 D EN1^VAFHLZEL(DFN,"1,2,5,6,7,10,11,13,14,15,16,17,18,19,20,21,23,24,25,34,35",2,.VAFZEL)
"RTN","IVMPTRN8",89,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(1))  ; Primary Eligibility
"RTN","IVMPTRN8",90,0)
 ; - other entitled eligibilities
"RTN","IVMPTRN8",91,0)
 F IVMSUB=1:0 S IVMSUB=+$O(VAFZEL(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",92,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(+IVMSUB))
"RTN","IVMPTRN8",93,0)
 ;
"RTN","IVMPTRN8",94,0)
 ; create (ZEN) Enrollment segment
"RTN","IVMPTRN8",95,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEN(DFN)
"RTN","IVMPTRN8",96,0)
 ;
"RTN","IVMPTRN8",97,0)
 ; create (ZCD) Catastrophic Disability segment(s)
"RTN","IVMPTRN8",98,0)
 D BUILD^VAFHLZCD(.IVMZCD,DFN,,HLQ,HLFS)
"RTN","IVMPTRN8",99,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZCD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",100,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZCD(+IVMSUB))
"RTN","IVMPTRN8",101,0)
 ;
"RTN","IVMPTRN8",102,0)
 ; Optionally create (ZMH) Military History segment for Purple Heart
"RTN","IVMPTRN8",103,0)
 D ENTER^VAFHLZMH(DFN,"IVMZMH","13")
"RTN","IVMPTRN8",104,0)
 I $P(IVMZMH(1,0),HLFS,3)="PH","YN"[$E($P(IVMZMH(1,0),HLFS,4)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMZMH(1,0)
"RTN","IVMPTRN8",105,0)
 ;
"RTN","IVMPTRN8",106,0)
 ; create (ZRD) Rated Disabilities segment(s)
"RTN","IVMPTRN8",107,0)
 D EN^VAFHLZRD(DFN,"1,2,3,4",HLQ,HLFS,"IVMZRD")
"RTN","IVMPTRN8",108,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZRD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",109,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZRD(+IVMSUB,0))
"RTN","IVMPTRN8",110,0)
 ;
"RTN","IVMPTRN8",111,0)
 ; create (ZCT) Emergency Contact segment
"RTN","IVMPTRN8",112,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZCT(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",113,0)
 ;
"RTN","IVMPTRN8",114,0)
 ; create (ZEM) Employment Info. segment for (1) Patient & (2) Spouse
"RTN","IVMPTRN8",115,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3")
"RTN","IVMPTRN8",116,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3",2,2)
"RTN","IVMPTRN8",117,0)
 ;
"RTN","IVMPTRN8",118,0)
 ; create (ZGD) Guardian segment for (1) VA & (2) Civil 
"RTN","IVMPTRN8",119,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",1)
"RTN","IVMPTRN8",120,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",2)
"RTN","IVMPTRN8",121,0)
 ;
"RTN","IVMPTRN8",122,0)
 ;get the primary test for the income year
"RTN","IVMPTRN8",123,0)
 S TESTTYPE=$$GETTYPE^IVMPTRN9(DFN,IVMMTDT,.TESTCODE,.HARDSHIP,.ACTVIEN)
"RTN","IVMPTRN8",124,0)
 ;
"RTN","IVMPTRN8",125,0)
 ; The following function call returns:
"RTN","IVMPTRN8",126,0)
 ;   - Patient Relation IEN array in DGREL
"RTN","IVMPTRN8",127,0)
 ;   - Individual Annual Income IEN array in DGINC
"RTN","IVMPTRN8",128,0)
 ;   - Income Relation IEN array in DGINR
"RTN","IVMPTRN8",129,0)
 D ALL^DGMTU21(DFN,"VSC",IVMMTDT,"IPR",ACTVIEN)
"RTN","IVMPTRN8",130,0)
 ;
"RTN","IVMPTRN8",131,0)
 S EDBMTZ06=0 I $$VERZ06^EASPTRN1(DFN) S EDBMTZ06=1
"RTN","IVMPTRN8",132,0)
 ; create (ZIC) Income segment for veteran
"RTN","IVMPTRN8",133,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("V")),"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
"RTN","IVMPTRN8",134,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",135,0)
 I $P(^TMP("HLS",$J,IVMCT),"^",3)=HLQ S $P(^TMP("HLS",$J,IVMCT),"^",3)=$$HLDATE^HLFNC($E(IVMMTDT,1,3)-1_"0000")
"RTN","IVMPTRN8",136,0)
 ;
"RTN","IVMPTRN8",137,0)
 ; create (ZIR) Income Relation segment for veteran
"RTN","IVMPTRN8",138,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("V")),"1,2,3,4,5,10")
"RTN","IVMPTRN8",139,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^1"
"RTN","IVMPTRN8",140,0)
 ;
"RTN","IVMPTRN8",141,0)
 ; create (ZDP) Patient Dependent Info. segment for spouse
"RTN","IVMPTRN8",142,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("S")),"1,2,3,4,5,6,7,8,9")
"RTN","IVMPTRN8",143,0)
 I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",144,0)
 .; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",145,0)
 .S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",146,0)
 ;
"RTN","IVMPTRN8",147,0)
 ; create (ZIC) Income segment for spouse
"RTN","IVMPTRN8",148,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("S")),"1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20")
"RTN","IVMPTRN8",149,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",150,0)
 ;
"RTN","IVMPTRN8",151,0)
 ; create (ZIR) Income Relation segment for spouse
"RTN","IVMPTRN8",152,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("S")),"1,2,3")
"RTN","IVMPTRN8",153,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",154,0)
 ;
"RTN","IVMPTRN8",155,0)
 ;
"RTN","IVMPTRN8",156,0)
 ; create ZDP, ZIC, and ZIR segments for all Means Test dependents
"RTN","IVMPTRN8",157,0)
 F IVMSUB=0:0 S IVMSUB=$O(DGREL("C",IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",158,0)
 .;
"RTN","IVMPTRN8",159,0)
 .; - create (ZDP) Dependent Info. segment for dependent child
"RTN","IVMPTRN8",160,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("C",IVMSUB)),"1,2,3,4,5,6,7,9")
"RTN","IVMPTRN8",161,0)
 .I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",162,0)
 ..; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",163,0)
 ..S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",164,0)
 .;
"RTN","IVMPTRN8",165,0)
 .; - create (ZIC) Income segment for dependent child
"RTN","IVMPTRN8",166,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("C",IVMSUB)),"1,2,3,4,5,6,7,8,9,10,11,12,15")
"RTN","IVMPTRN8",167,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",168,0)
 .;
"RTN","IVMPTRN8",169,0)
 .; - create (ZIR) Income Relation segment for dependent child
"RTN","IVMPTRN8",170,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("C",IVMSUB)),"1,2,3,6,7,8,9")
"RTN","IVMPTRN8",171,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",172,0)
 .; 
"RTN","IVMPTRN8",173,0)
 ;
"RTN","IVMPTRN8",174,0)
 ; create (ZIO) Inpatient/Outpatient segment for veteran
"RTN","IVMPTRN8",175,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="ZIO^1^"_$$EN^IVMUFNC1(DFN,IVMMTDT,.IVMQUERY)_"^"_$$LTD^IVMUFNC(DFN,.IVMQUERY)
"RTN","IVMPTRN8",176,0)
 ;
"RTN","IVMPTRN8",177,0)
 ; create (NTE) Notes and Comments segment
"RTN","IVMPTRN8",178,0)
 D NTE^IVMUFNC4(DFN,.IVMNTE,IVMMTDT)
"RTN","IVMPTRN8",179,0)
 I '$D(IVMNTE) D
"RTN","IVMPTRN8",180,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="NTE^1"
"RTN","IVMPTRN8",181,0)
 I $D(IVMNTE) D
"RTN","IVMPTRN8",182,0)
 .; - get notes and comments
"RTN","IVMPTRN8",183,0)
 .F IVMSUB=0:0 S IVMSUB=$O(IVMNTE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",184,0)
 ..S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMNTE(IVMSUB)
"RTN","IVMPTRN8",185,0)
 ;
"RTN","IVMPTRN8",186,0)
 ; create (IN1) Insurance segment(s) for all active insurance
"RTN","IVMPTRN8",187,0)
 K ^TMP("VAFIN1",$J)
"RTN","IVMPTRN8",188,0)
 D EN^VAFHLIN1(DFN,"1,4,5,7,8,9,12,13,15,16,17,28,36")
"RTN","IVMPTRN8",189,0)
 F IVMSUB=0:0 S IVMSUB=$O(^TMP("VAFIN1",$J,IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",190,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=^TMP("VAFIN1",$J,+IVMSUB,0)
"RTN","IVMPTRN8",191,0)
 ;
"RTN","IVMPTRN8",192,0)
 D GOTO^IVMPTRN9
"RTN","IVMPTRN8",193,0)
 Q
"RTN","IVMPTRN9")
0^8^B26280160
"RTN","IVMPTRN9",1,0)
IVMPTRN9 ;ALB/KCL/CN/BRM/TDM - HL7 FULL DATA TRANSMISSION (Z07) BUILDER (CONTINUED) ; 7/11/03 9:40am
"RTN","IVMPTRN9",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,46,50,53,34,49,58,79**; 21-OCT-94
"RTN","IVMPTRN9",3,0)
 ;
"RTN","IVMPTRN9",4,0)
 ;
"RTN","IVMPTRN9",5,0)
GOTO ; place to break up the routine
"RTN","IVMPTRN9",6,0)
 ;
"RTN","IVMPTRN9",7,0)
 ;find if the deletion flags were set in the IVM Patient file, and if so, should the deletion indicators be sent?
"RTN","IVMPTRN9",8,0)
 F I="RX","MT","HARDSHIP","DATE OF TEST","LTC" S DELETE(I)=""
"RTN","IVMPTRN9",9,0)
 S IVMPIEN=$$FIND^IVMPLOG(DFN,($E(IVMMTDT,1,3)-1))
"RTN","IVMPTRN9",10,0)
 I IVMPIEN D
"RTN","IVMPTRN9",11,0)
 .S IVMPNODE=$G(^IVM(301.5,IVMPIEN,0))
"RTN","IVMPTRN9",12,0)
 .I $P(IVMPNODE,"^",8)!$P(IVMPNODE,"^",9)!$P(IVMPNODE,"^",10)!$P(IVMPNODE,"^",11) S DELETE("SET")=1
"RTN","IVMPTRN9",13,0)
 .;was the MT deletion flag set, and if so verify that there is no completed MT
"RTN","IVMPTRN9",14,0)
 .I $P(IVMPNODE,"^",8),(TESTTYPE'=1)!(TESTCODE="")!("ACGP"'[TESTCODE) S DELETE("DATE OF TEST")=$P(IVMPNODE,"^",8),DELETE("MT")=1
"RTN","IVMPTRN9",15,0)
 .;
"RTN","IVMPTRN9",16,0)
 .;was the hardship deletion flag set, and if so verify that there is no completed hardship
"RTN","IVMPTRN9",17,0)
 .I $P(IVMPNODE,"^",10),'HARDSHIP D
"RTN","IVMPTRN9",18,0)
 ..S:('DELETE("DATE OF TEST")) DELETE("DATE OF TEST")=$P(IVMPNODE,"^",10)
"RTN","IVMPTRN9",19,0)
 ..S DELETE("HARDSHIP")=1
"RTN","IVMPTRN9",20,0)
 ;
"RTN","IVMPTRN9",21,0)
 ; create (ZMT) Means Test segment 
"RTN","IVMPTRN9",22,0)
 ;
"RTN","IVMPTRN9",23,0)
 S SEQS=$S(TESTTYPE=1:"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,28,29",1:"1,17")
"RTN","IVMPTRN9",24,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^IVMCZMT(DFN,SEQS,IVMMTDT,1,1,.DELETE,1)
"RTN","IVMPTRN9",25,0)
 ;
"RTN","IVMPTRN9",26,0)
 ; create (ZMT) Rx-Copay Test segment
"RTN","IVMPTRN9",27,0)
 I IVMPIEN D
"RTN","IVMPTRN9",28,0)
 .;was the RX deletion flag set, and if so verify that there is no completed test
"RTN","IVMPTRN9",29,0)
 .I $P(IVMPNODE,"^",9),(TESTTYPE'=2)!(TESTCODE="")!("EM"'[TESTCODE) S DELETE("DATE OF TEST")=$P(IVMPNODE,"^",9),DELETE("RX")=1
"RTN","IVMPTRN9",30,0)
 ;
"RTN","IVMPTRN9",31,0)
 S SEQS=$S(TESTTYPE=2:"1,2,3,4,9,10,12,15,16,17,18,22,25,26",1:"1,17")
"RTN","IVMPTRN9",32,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^IVMCZMT(DFN,SEQS,IVMMTDT,2,2,.DELETE,1)
"RTN","IVMPTRN9",33,0)
 ;
"RTN","IVMPTRN9",34,0)
 ; create (ZMT) Long Term Care Copay Exemption Test segment
"RTN","IVMPTRN9",35,0)
 I IVMPIEN D
"RTN","IVMPTRN9",36,0)
 .; set deletion indicators if LTC test deletion should be transmitted
"RTN","IVMPTRN9",37,0)
 .I $P(IVMPNODE,"^",11) S DELETE("LTC")=1 S:('DELETE("DATE OF TEST")) DELETE("DATE OF TEST")=$P(IVMPNODE,"^",11)
"RTN","IVMPTRN9",38,0)
 ;
"RTN","IVMPTRN9",39,0)
 S SEQS="1,2,3,4,5,7,9,10,12,16,17,18,22,25"
"RTN","IVMPTRN9",40,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^IVMCZMT(DFN,SEQS,IVMMTDT,4,4,.DELETE,1)
"RTN","IVMPTRN9",41,0)
 ;
"RTN","IVMPTRN9",42,0)
 ;if the deletion flags were set in the IVM Patient file, unset them
"RTN","IVMPTRN9",43,0)
 I $G(DELETE("SET")) D
"RTN","IVMPTRN9",44,0)
 .N DATA
"RTN","IVMPTRN9",45,0)
 .S DATA(.08)="",DATA(.09)="",DATA(.1)="",DATA(.11)=""
"RTN","IVMPTRN9",46,0)
 .I $$UPD^DGENDBS(301.5,IVMPIEN,.DATA)
"RTN","IVMPTRN9",47,0)
 ;
"RTN","IVMPTRN9",48,0)
 ; create (ZBT) Beneficiary Travel segment based on last BT Claim
"RTN","IVMPTRN9",49,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZBT($$BTCLM^IVMUFNC4(DFN),"1,2,3,4,7")
"RTN","IVMPTRN9",50,0)
 ;
"RTN","IVMPTRN9",51,0)
 ; create (ZFE) Fee Basis segment(s)
"RTN","IVMPTRN9",52,0)
 D EN^FBHLZFE(DFN,"1,2,3,4,5")
"RTN","IVMPTRN9",53,0)
 F IVMSUB=0:0 S IVMSUB=+$O(FBZFE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN9",54,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(FBZFE(+IVMSUB))
"RTN","IVMPTRN9",55,0)
 ;
"RTN","IVMPTRN9",56,0)
 ; create (ZSP) Service Period segment
"RTN","IVMPTRN9",57,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZSP(DFN,1,1)
"RTN","IVMPTRN9",58,0)
 ;
"RTN","IVMPTRN9",59,0)
 ; create (OBX) segment for NTR
"RTN","IVMPTRN9",60,0)
 ; CALL PIMS API TO GET NTRARRY OF NTR DATA
"RTN","IVMPTRN9",61,0)
 S GETCUR=$$ENRGET^DGNTAPI1(DFN)
"RTN","IVMPTRN9",62,0)
 I GETCUR D NTROBX^IVMPTRNA(.DGNTARR)
"RTN","IVMPTRN9",63,0)
 I $D(NTROBX) D
"RTN","IVMPTRN9",64,0)
 . S IVMCT=IVMCT+1
"RTN","IVMPTRN9",65,0)
 . S ^TMP("HLS",$J,IVMCT)=$$EN^VAFHLOBX(.NTROBX,,"2,3,5,11,12,14,15,16,17")
"RTN","IVMPTRN9",66,0)
 . I $G(NTROBX(16))'="" S $P(^TMP("HLS",$J,IVMCT),"^",17)=$G(NTROBX(16))
"RTN","IVMPTRN9",67,0)
 . K NTROBX
"RTN","IVMPTRN9",68,0)
 ;
"RTN","IVMPTRN9",69,0)
 ; create (RF1) segment
"RTN","IVMPTRN9",70,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$RF1^IVMPTRNA(DFN)
"RTN","IVMPTRN9",71,0)
 ;
"RTN","IVMPTRN9",72,0)
 Q
"RTN","IVMPTRN9",73,0)
 ;
"RTN","IVMPTRN9",74,0)
GETTYPE(DFN,IVMMTDT,CODE,HARDSHIP,ACTVIEN) ;
"RTN","IVMPTRN9",75,0)
 ;Determines the type of test to include in the Z10.  HEC wants only the
"RTN","IVMPTRN9",76,0)
 ;test that they would consider primary,i.e., preference given to a comptleted means test, even if not currently in effect.
"RTN","IVMPTRN9",77,0)
 ;
"RTN","IVMPTRN9",78,0)
 ;Input:
"RTN","IVMPTRN9",79,0)
 ;  DFN
"RTN","IVMPTRN9",80,0)
 ;  IVMMTDT -date to be the search for the test
"RTN","IVMPTRN9",81,0)
 ;Output:
"RTN","IVMPTRN9",82,0)
 ;  Function value - type of test to send in Z10
"RTN","IVMPTRN9",83,0)
 ;  CODE - status code of test (pass by reference)
"RTN","IVMPTRN9",84,0)
 ;  HARDSHIP - hardship indicator (pass by reference)
"RTN","IVMPTRN9",85,0)
 ;  ACTVIEN - ien of test that should have the associated Income Relations (pass by reference)
"RTN","IVMPTRN9",86,0)
 ;
"RTN","IVMPTRN9",87,0)
 N TESTTYPE,MTNODE,RXNODE,NODE0,NODE2
"RTN","IVMPTRN9",88,0)
 S TESTTYPE=1
"RTN","IVMPTRN9",89,0)
 S (HARDSHIP,CODE,ACTVIEN)=""
"RTN","IVMPTRN9",90,0)
 Q:'$G(IVMMTDT) TESTTYPE
"RTN","IVMPTRN9",91,0)
 Q:'$G(DFN) TESTTYPE
"RTN","IVMPTRN9",92,0)
 ;
"RTN","IVMPTRN9",93,0)
 S MTNODE=$$LST^DGMTU(DFN,IVMMTDT,1) I $E($P(MTNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S MTNODE=""
"RTN","IVMPTRN9",94,0)
 S RXNODE=$$LST^DGMTU(DFN,IVMMTDT,2) I $E($P(RXNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S RXNODE=""
"RTN","IVMPTRN9",95,0)
 ;
"RTN","IVMPTRN9",96,0)
 I MTNODE="" S MTNODE=$$FUT^DGMTU(DFN,"",1) I $E($P(MTNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S MTNODE=""
"RTN","IVMPTRN9",97,0)
 I RXNODE="" S RXNODE=$$FUT^DGMTU(DFN,"",2) I $E($P(RXNODE,"^",2),1,3)'=$E(IVMMTDT,1,3) S RXNODE=""
"RTN","IVMPTRN9",98,0)
 D
"RTN","IVMPTRN9",99,0)
 .;determine which test has the associated income relations
"RTN","IVMPTRN9",100,0)
 .;
"RTN","IVMPTRN9",101,0)
 .I +MTNODE S CODE=$P(MTNODE,"^",4) I CODE'="",("ACGPR"[CODE) S ACTVIEN=+MTNODE Q
"RTN","IVMPTRN9",102,0)
 .I +RXNODE S CODE=$P(RXNODE,"^",4) I CODE'="",("EMI"[CODE) S ACTVIEN=+RXNODE Q
"RTN","IVMPTRN9",103,0)
 .I +MTNODE S ACTVIEN=+MTNODE Q
"RTN","IVMPTRN9",104,0)
 .I +RXNODE S ACTVIEN=+RXNODE Q
"RTN","IVMPTRN9",105,0)
 I ACTVIEN,+MTNODE,+RXNODE D TRANSFER^DGMTU4(DFN,$S((ACTVIEN=+MTNODE):+RXNODE,1:+MTNODE),ACTVIEN)
"RTN","IVMPTRN9",106,0)
 ;
"RTN","IVMPTRN9",107,0)
 ;now find the primary test
"RTN","IVMPTRN9",108,0)
 I '(+MTNODE) G CHKCOPAY
"RTN","IVMPTRN9",109,0)
 S CODE=$P(MTNODE,"^",4)
"RTN","IVMPTRN9",110,0)
 S HARDSHIP=$P($G(^DGMT(408.31,+MTNODE,0)),"^",20)
"RTN","IVMPTRN9",111,0)
 I (CODE="")!("ACGP"'[CODE) S NODE2=$G(^DGMT(408.31,+MTNODE,2)),CODE=$$GETCODE^DGMTH($P(NODE2,"^",3)) I (CODE="")!("ACGP"'[CODE) G CHKCOPAY
"RTN","IVMPTRN9",112,0)
 ;
"RTN","IVMPTRN9",113,0)
 G QGETTYPE
"RTN","IVMPTRN9",114,0)
 ;
"RTN","IVMPTRN9",115,0)
CHKCOPAY ;
"RTN","IVMPTRN9",116,0)
 I '(+RXNODE) G QGETTYPE
"RTN","IVMPTRN9",117,0)
 S CODE=$P(RXNODE,"^",4)
"RTN","IVMPTRN9",118,0)
 I (CODE="")!("EM"'[CODE) S NODE2=$G(^DGMT(408.31,+RXNODE,2)),CODE=$$GETCODE^DGMTH($P(NODE2,"^",3)) I (CODE="")!("EM"'[CODE) G QGETTYPE
"RTN","IVMPTRN9",119,0)
 S TESTTYPE=2
"RTN","IVMPTRN9",120,0)
 ;
"RTN","IVMPTRN9",121,0)
QGETTYPE ;
"RTN","IVMPTRN9",122,0)
 Q TESTTYPE
"RTN","IVMPTRN9",123,0)
 ;
"RTN","IVMPTRN9",124,0)
FILTER(DFN) ; address transmission filter
"RTN","IVMPTRN9",125,0)
 ; Check Bad Address Indicator for a known bad address and
"RTN","IVMPTRN9",126,0)
 ; Scrutinize the Street Address line 1 field for known bad address
"RTN","IVMPTRN9",127,0)
 ; strings based on functionality currently in place in HEC Legacy.
"RTN","IVMPTRN9",128,0)
 ;
"RTN","IVMPTRN9",129,0)
 ;  Input: DFN - ien of the Patient (#2) file
"RTN","IVMPTRN9",130,0)
 ; Output:   0 - filter passed (ok to transmit address)
"RTN","IVMPTRN9",131,0)
 ;           1 - filter failed (do not transmit address)
"RTN","IVMPTRN9",132,0)
 ;
"RTN","IVMPTRN9",133,0)
 N VAPA
"RTN","IVMPTRN9",134,0)
 Q:'$G(DFN) 1  ;DFN missing
"RTN","IVMPTRN9",135,0)
 Q:$$BADADR^DGUTL3(DFN) 1  ;check Bad Address Indicator
"RTN","IVMPTRN9",136,0)
 D ADD^VADPT  ;get patient address
"RTN","IVMPTRN9",137,0)
 ; Street Address Line 1 or Zip Code is <null>
"RTN","IVMPTRN9",138,0)
 Q:($G(VAPA(1))="")!($P($G(VAPA(11)),"^")="") 1
"RTN","IVMPTRN9",139,0)
 ; St Addr Line 1 contains 'UNKNOWN', 'HOMELESS', or 'ADDRESS'
"RTN","IVMPTRN9",140,0)
 Q:(VAPA(1)["UNKNOWN")!(VAPA(1)["HOMELESS")!(VAPA(1)["ADDRESS") 1
"RTN","IVMPTRN9",141,0)
 ; The first two characters of the address is equal to '**'
"RTN","IVMPTRN9",142,0)
 Q:$E(VAPA(1),1,2)="**" 1
"RTN","IVMPTRN9",143,0)
 ; passed all address filters - ok to send
"RTN","IVMPTRN9",144,0)
 Q 0
"UP",301.5,301.511,-2)
301.5^IN
"UP",301.5,301.511,-1)
301.501^DEM
"UP",301.5,301.511,0)
301.511
"VER")
8.0^22
"^DD",301.5,301.511,.02,0)
IVM CENTER DATA^F^^0;2^K:$L(X)>35!($L(X)<1) X
"^DD",301.5,301.511,.02,1,0)
^.1
"^DD",301.5,301.511,.02,1,1,0)
^^TRIGGER^301.511^.03
"^DD",301.5,301.511,.02,1,1,1)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(1)=$S($D(^IVM(301.5,D0,"IN",D1,"DEM",D2,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$$NOW^XLFDT X ^DD(301.511,.02,1,1,1.4)
"^DD",301.5,301.511,.02,1,1,1.4)
S DIH=$G(^IVM(301.5,DIV(0),"IN",DIV(1),"DEM",DIV(2),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=301.511,DIG=.03 D ^DICR
"^DD",301.5,301.511,.02,1,1,2)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(1)=$S($D(^IVM(301.5,D0,"IN",D1,"DEM",D2,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(301.511,.02,1,1,2.4)
"^DD",301.5,301.511,.02,1,1,2.4)
S DIH=$G(^IVM(301.5,DIV(0),"IN",DIV(1),"DEM",DIV(2),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=301.511,DIG=.03 D ^DICR
"^DD",301.5,301.511,.02,1,1,"CREATE VALUE")
S X=$$NOW^XLFDT
"^DD",301.5,301.511,.02,1,1,"DELETE VALUE")
@
"^DD",301.5,301.511,.02,1,1,"FIELD")
DATE/TIME RECIEVED
"^DD",301.5,301.511,.02,3)
Please enter data received from the IVM Center.
"^DD",301.5,301.511,.02,21,0)
^^2^2^2940412^^^
"^DD",301.5,301.511,.02,21,1,0)
 
"^DD",301.5,301.511,.02,21,2,0)
This field contains data received from the IVM Center.
"^DD",301.5,301.511,.02,"DT")
3030606
"^DD",301.5,301.511,.03,0)
DATE/TIME RECEIVED^D^^0;3^S %DT="ESTX" D ^%DT S X=Y K:X<1 X
"^DD",301.5,301.511,.03,.1)
DATE/TIME DEMOGRAPHIC DATA RECEIVED
"^DD",301.5,301.511,.03,3)
(No range limit on date)
"^DD",301.5,301.511,.03,5,1,0)
301.511^.02^1
"^DD",301.5,301.511,.03,9)
^
"^DD",301.5,301.511,.03,21,0)
^^1^1^3030908^^
"^DD",301.5,301.511,.03,21,1,0)
This field contains the Date and Time that the Demographic field was received.
"^DD",301.5,301.511,.03,"DT")
3030908
**END**
**END**
