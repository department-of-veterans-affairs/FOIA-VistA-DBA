KIDS Distribution saved on Apr 09, 2003@12:52:32
IVM*2*77 AND EAS*1*30 - 04/09/2003
**KIDS**:IVM*2.0*77^EAS*1.0*30^

**INSTALL NAME**
IVM*2.0*77
"BLD",4233,0)
IVM*2.0*77^INCOME VERIFICATION MATCH^0^3030409^y
"BLD",4233,1,0)
^^2^2^3030312^
"BLD",4233,1,1,0)
ADDITIONAL ENHANCEMENTS REQUIRED TO HANDLE SENDING AND RECEIVING OF OTHER
"BLD",4233,1,2,0)
HL7 MESSAGES BASED UPON RECEIPT OF A Z06 MESSAGE.
"BLD",4233,4,0)
^9.64PA^^
"BLD",4233,"ABPKG")
n
"BLD",4233,"INIT")
IVM2077P
"BLD",4233,"KRN",0)
^9.67PA^8989.52^19
"BLD",4233,"KRN",.4,0)
.4
"BLD",4233,"KRN",.401,0)
.401
"BLD",4233,"KRN",.402,0)
.402
"BLD",4233,"KRN",.403,0)
.403
"BLD",4233,"KRN",.5,0)
.5
"BLD",4233,"KRN",.84,0)
.84
"BLD",4233,"KRN",3.6,0)
3.6
"BLD",4233,"KRN",3.8,0)
3.8
"BLD",4233,"KRN",9.2,0)
9.2
"BLD",4233,"KRN",9.8,0)
9.8
"BLD",4233,"KRN",9.8,"NM",0)
^9.68A^7^5
"BLD",4233,"KRN",9.8,"NM",1,0)
IVM2077P^^0^B13068903
"BLD",4233,"KRN",9.8,"NM",2,0)
IVMCM^^0^B76697543
"BLD",4233,"KRN",9.8,"NM",3,0)
IVMPREC7^^0^B55571685
"BLD",4233,"KRN",9.8,"NM",5,0)
IVMCMZ^^0^B485867
"BLD",4233,"KRN",9.8,"NM",7,0)
IVMPTRN8^^0^B47386768
"BLD",4233,"KRN",9.8,"NM","B","IVM2077P",1)

"BLD",4233,"KRN",9.8,"NM","B","IVMCM",2)

"BLD",4233,"KRN",9.8,"NM","B","IVMCMZ",5)

"BLD",4233,"KRN",9.8,"NM","B","IVMPREC7",3)

"BLD",4233,"KRN",9.8,"NM","B","IVMPTRN8",7)

"BLD",4233,"KRN",19,0)
19
"BLD",4233,"KRN",19,"NM",0)
^9.68A^^
"BLD",4233,"KRN",19.1,0)
19.1
"BLD",4233,"KRN",101,0)
101
"BLD",4233,"KRN",409.61,0)
409.61
"BLD",4233,"KRN",771,0)
771
"BLD",4233,"KRN",870,0)
870
"BLD",4233,"KRN",8989.51,0)
8989.51
"BLD",4233,"KRN",8989.52,0)
8989.52
"BLD",4233,"KRN",8994,0)
8994
"BLD",4233,"KRN","B",.4,.4)

"BLD",4233,"KRN","B",.401,.401)

"BLD",4233,"KRN","B",.402,.402)

"BLD",4233,"KRN","B",.403,.403)

"BLD",4233,"KRN","B",.5,.5)

"BLD",4233,"KRN","B",.84,.84)

"BLD",4233,"KRN","B",3.6,3.6)

"BLD",4233,"KRN","B",3.8,3.8)

"BLD",4233,"KRN","B",9.2,9.2)

"BLD",4233,"KRN","B",9.8,9.8)

"BLD",4233,"KRN","B",19,19)

"BLD",4233,"KRN","B",19.1,19.1)

"BLD",4233,"KRN","B",101,101)

"BLD",4233,"KRN","B",409.61,409.61)

"BLD",4233,"KRN","B",771,771)

"BLD",4233,"KRN","B",870,870)

"BLD",4233,"KRN","B",8989.51,8989.51)

"BLD",4233,"KRN","B",8989.52,8989.52)

"BLD",4233,"KRN","B",8994,8994)

"BLD",4233,"QUES",0)
^9.62^^
"BLD",4233,"REQB",0)
^9.611^2^2
"BLD",4233,"REQB",1,0)
IVM*2.0*69^1
"BLD",4233,"REQB",2,0)
EAS*1.0*23^1
"BLD",4233,"REQB","B","EAS*1.0*23",2)

"BLD",4233,"REQB","B","IVM*2.0*69",1)

"INIT")
IVM2077P
"MBREQ")
0
"PKG",220,-1)
1^1
"PKG",220,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",220,20,0)
^9.402P^^
"PKG",220,22,0)
^9.49I^1^1
"PKG",220,22,1,0)
2.0^2941021
"PKG",220,22,1,"PAH",1,0)
77^3030409
"PKG",220,22,1,"PAH",1,1,0)
^^2^2^3030409
"PKG",220,22,1,"PAH",1,1,1,0)
ADDITIONAL ENHANCEMENTS REQUIRED TO HANDLE SENDING AND RECEIVING OF OTHER
"PKG",220,22,1,"PAH",1,1,2,0)
HL7 MESSAGES BASED UPON RECEIPT OF A Z06 MESSAGE.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","IVM2077P")
0^1^B13068903
"RTN","IVM2077P",1,0)
IVM2077P ;ALB/EJG - Patch Post-Install functions IVM*2*77;03/11/2003; 9/20/01 4:16pm
"RTN","IVM2077P",2,0)
 ;;2.0;INCOME VERIFICATION;**77**;21-OCT-94
"RTN","IVM2077P",3,0)
 ;
"RTN","IVM2077P",4,0)
EN ;ENTRY POINT
"RTN","IVM2077P",5,0)
 ;
"RTN","IVM2077P",6,0)
 N ADDR,PORT,STATION,TCPDATA,AN,RLLN,SLLN,STOP,VER,DA,FILE,RET,ERROR
"RTN","IVM2077P",7,0)
 ;
"RTN","IVM2077P",8,0)
 ; Get site's Station #
"RTN","IVM2077P",9,0)
 S STATION=$P($$SITE^VASITE,"^",3)
"RTN","IVM2077P",10,0)
 ;
"RTN","IVM2077P",11,0)
 S STOP=0
"RTN","IVM2077P",12,0)
 Q:$$SETLL16(STATION,.RLLN,.SLLN)
"RTN","IVM2077P",13,0)
 D PROTOCOL(STATION,RLLN,SLLN,.AN)
"RTN","IVM2077P",14,0)
 Q
"RTN","IVM2077P",15,0)
 ;
"RTN","IVM2077P",16,0)
SETLL16(STATION,RLLN,SLLN) ;
"RTN","IVM2077P",17,0)
 ;INPUT   STATION = Station #
"RTN","IVM2077P",18,0)
 ;        RLLN    = Receiving Logical Link Name
"RTN","IVM2077P",19,0)
 ;        SLLN    = Sending Logical Link Name
"RTN","IVM2077P",20,0)
 ;
"RTN","IVM2077P",21,0)
 ;OUTPUT   0 : Success, 1 : Error
"RTN","IVM2077P",22,0)
 ;
"RTN","IVM2077P",23,0)
 ;PURPOSE  Create the Receiving and Sending Logical Link.
"RTN","IVM2077P",24,0)
 ;
"RTN","IVM2077P",25,0)
 N ADDR,PORT,RECVLL,SENDLL,RET,VISN,M,IENS
"RTN","IVM2077P",26,0)
 ;
"RTN","IVM2077P",27,0)
 S PORT=33001            ;e*Gate Port#
"RTN","IVM2077P",28,0)
 ;
"RTN","IVM2077P",29,0)
 ; Sending Logical Link
"RTN","IVM2077P",30,0)
 S SLLN="LLEDBOUT"
"RTN","IVM2077P",31,0)
 ;S ADDR="10.224.132.101"  ;e*Gate development
"RTN","IVM2077P",32,0)
 S ADDR="10.224.132.103"  ;e*Gate production
"RTN","IVM2077P",33,0)
 S RET=$$LL16(SLLN,ADDR,PORT)
"RTN","IVM2077P",34,0)
 I +RET<0 D ERROR(RET,"Edb Send Link:"_SLLN) Q 1
"RTN","IVM2077P",35,0)
 ;
"RTN","IVM2077P",36,0)
RLL ; Receiving Logical Link
"RTN","IVM2077P",37,0)
 S RLLN="LLEDBIN"
"RTN","IVM2077P",38,0)
 S ADDR=""
"RTN","IVM2077P",39,0)
 S PORT=5000    ;all stations production
"RTN","IVM2077P",40,0)
 S RET=$$LL16(RLLN,ADDR,PORT)
"RTN","IVM2077P",41,0)
 I +RET<0 D ERROR(RET,"Edb Receive Link:"_RLLN) Q 1
"RTN","IVM2077P",42,0)
LL16EXIT Q STOP
"RTN","IVM2077P",43,0)
 ;
"RTN","IVM2077P",44,0)
 ;
"RTN","IVM2077P",45,0)
PROTOCOL(STATION,RLLN,SLLN,AN) ;
"RTN","IVM2077P",46,0)
 ;INPUT    STATION = Station #
"RTN","IVM2077P",47,0)
 ;         RLLN    = Receiving Logical Link Name
"RTN","IVM2077P",48,0)
 ;         SLLN    = Sending Logical Link Name
"RTN","IVM2077P",49,0)
 ;         AN      = Array containing the Application Names
"RTN","IVM2077P",50,0)
 ;
"RTN","IVM2077P",51,0)
 ;OUTPUT   None
"RTN","IVM2077P",52,0)
 ;
"RTN","IVM2077P",53,0)
 ;PURPOSE  Update the protocols (Subscriber and Event Driver) for the
"RTN","IVM2077P",54,0)
 ;         Edb/e*Gate TCP/IP interfaces
"RTN","IVM2077P",55,0)
 ;
"RTN","IVM2077P",56,0)
 N RESULT,SIEN,DUZ,V,N,N1,LNCNT,LINE,PROTRET,NAM
"RTN","IVM2077P",57,0)
 S DISABTXT=""
"RTN","IVM2077P",58,0)
 F NAM="EAS EDB ORU-Z06 SERVER","EAS EDB ORU-Z09 SERVER" D
"RTN","IVM2077P",59,0)
 . S RESULT=$$EDP(NAM,DISABTXT)
"RTN","IVM2077P",60,0)
 . I +RESULT<0 D ERROR(RESULT,"Event Driver:"_NAM)
"RTN","IVM2077P",61,0)
 Q
"RTN","IVM2077P",62,0)
 ;
"RTN","IVM2077P",63,0)
ERROR(ERRMSG,SUBJ) ;
"RTN","IVM2077P",64,0)
 ;INPUT    ERRMSG = Error Message text
"RTN","IVM2077P",65,0)
 ;         SUBJ   = Subject of the Message
"RTN","IVM2077P",66,0)
 ;
"RTN","IVM2077P",67,0)
 ;OUTPUT   none
"RTN","IVM2077P",68,0)
 ;
"RTN","IVM2077P",69,0)
 ;PURPOSE  Display an error message to the user.  Set the
"RTN","IVM2077P",70,0)
 ;         variable STOP=1 which will stop the routine
"RTN","IVM2077P",71,0)
 ;         from continuing to run after an error is found.
"RTN","IVM2077P",72,0)
 ;
"RTN","IVM2077P",73,0)
 N TXT
"RTN","IVM2077P",74,0)
 S STOP=1
"RTN","IVM2077P",75,0)
 S TXT=$P(ERRMSG,"^",2)
"RTN","IVM2077P",76,0)
 W !,"===================================================="
"RTN","IVM2077P",77,0)
 W !,"=                   ERROR                          ="
"RTN","IVM2077P",78,0)
 W !,"===================================================="
"RTN","IVM2077P",79,0)
 W !,"When creating "_SUBJ
"RTN","IVM2077P",80,0)
 W !,"===================================================="
"RTN","IVM2077P",81,0)
 W !,"**ERROR MSG: ",TXT
"RTN","IVM2077P",82,0)
 Q
"RTN","IVM2077P",83,0)
 ;
"RTN","IVM2077P",84,0)
 ;Update Functions
"RTN","IVM2077P",85,0)
 ;
"RTN","IVM2077P",86,0)
LL16(LLNAME,TCPADDR,TCPPORT) ;
"RTN","IVM2077P",87,0)
 ;INPUT   LLNAME  = Logical Link Name (ex. "LLEDBOUT")
"RTN","IVM2077P",88,0)
 ;        TCPADDR = TCP/IP Address
"RTN","IVM2077P",89,0)
 ;        TCPPORT = TCP/IP Port #
"RTN","IVM2077P",90,0)
 ;
"RTN","IVM2077P",91,0)
 ;OUTPUT  IEN of entry (#870)  Success
"RTN","IVM2077P",92,0)
 ;        -1^Error Message     Error
"RTN","IVM2077P",93,0)
 ;
"RTN","IVM2077P",94,0)
 ;PURPOSE Update a Logical Link for TCP/IP transmissions.
"RTN","IVM2077P",95,0)
 ;
"RTN","IVM2077P",96,0)
 N FILE,DATA,RETURN,DEFINED,ERROR,DA,DGENDA
"RTN","IVM2077P",97,0)
 S FILE=870
"RTN","IVM2077P",98,0)
 ; If already exists then skip
"RTN","IVM2077P",99,0)
 ;  
"RTN","IVM2077P",100,0)
 S IEN870=$O(^HLCS(870,"B",LLNAME,0))      ;IEN TO UPDATE
"RTN","IVM2077P",101,0)
 I 'IEN870 D  Q RETURN                     ;IEN NOT FOUND - RETURN ERROR
"RTN","IVM2077P",102,0)
 . S ERROR="IEN OF RECORD TO BE UPDATED NOT SPECIFIED"
"RTN","IVM2077P",103,0)
 . S RETURN=-1_"^"_ERROR
"RTN","IVM2077P",104,0)
 ;
"RTN","IVM2077P",105,0)
 ; set v1.6 field values
"RTN","IVM2077P",106,0)
 S DATA(400.01)=TCPADDR                    ;TCP/IP ADDRESS
"RTN","IVM2077P",107,0)
 S DATA(400.02)=TCPPORT                    ;TCP/IP PORT
"RTN","IVM2077P",108,0)
 ;
"RTN","IVM2077P",109,0)
 S RETURN=$$UPD^DGENDBS(FILE,IEN870,.DATA,.ERROR)
"RTN","IVM2077P",110,0)
 S:ERROR'=""!(+RETURN=0) RETURN=-1_"^"_ERROR
"RTN","IVM2077P",111,0)
 ;
"RTN","IVM2077P",112,0)
 Q RETURN
"RTN","IVM2077P",113,0)
 ;
"RTN","IVM2077P",114,0)
EDP(PNAME,DTXT) ;
"RTN","IVM2077P",115,0)
 ;INPUT   PNAME   = Protocol Name
"RTN","IVM2077P",116,0)
 ;        DTXT    = Disable Text
"RTN","IVM2077P",117,0)
 ;
"RTN","IVM2077P",118,0)
 ;OUTPUT  IEN entry (#101) of Event Driver Protocol   Success
"RTN","IVM2077P",119,0)
 ;        -1^Error Message                            Error
"RTN","IVM2077P",120,0)
 ;
"RTN","IVM2077P",121,0)
 ;PURPOSE Activate the Event Driver Protocol
"RTN","IVM2077P",122,0)
 ;
"RTN","IVM2077P",123,0)
 N DATA,FILE,DGENDA,RETURN,ERROR,DA
"RTN","IVM2077P",124,0)
 S FILE=101
"RTN","IVM2077P",125,0)
 ; If already exists then skip
"RTN","IVM2077P",126,0)
 ;  
"RTN","IVM2077P",127,0)
 S IEN101=$O(^ORD(101,"B",PNAME,0))
"RTN","IVM2077P",128,0)
 I 'IEN101 D  Q RETURN                     ;IEN NOT FOUND - RETURN ERROR
"RTN","IVM2077P",129,0)
 . S ERROR="IEN OF RECORD TO BE UPDATED NOT SPECIFIED"
"RTN","IVM2077P",130,0)
 . S RETURN=-1_"^"_ERROR
"RTN","IVM2077P",131,0)
 ;
"RTN","IVM2077P",132,0)
 S DATA(2)=DTXT                               ;DISABLE TEXT
"RTN","IVM2077P",133,0)
 S RETURN=$$UPD^DGENDBS(FILE,IEN101,.DATA,.ERROR)
"RTN","IVM2077P",134,0)
 I ERROR'=""!(+RETURN=0) S RETURN=-1_"^"_ERROR G EDPEXIT
"RTN","IVM2077P",135,0)
 ;
"RTN","IVM2077P",136,0)
EDPEXIT Q RETURN
"RTN","IVM2077P",137,0)
 ;
"RTN","IVMCM")
0^2^B76697543
"RTN","IVMCM",1,0)
IVMCM ;ALB/SEK,KCL,RTK,AEG,BRM,AEG - PROCESS INCOME TEST (Z10) TRANSMISSIONS ; 10/2/02 1:43pm
"RTN","IVMCM",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**12,17,28,41,44,53,34,49,59,55,63,77**;21-OCT-94
"RTN","IVMCM",3,0)
 ;
"RTN","IVMCM",4,0)
 ;
"RTN","IVMCM",5,0)
ORF ; Handler for ORF type HL7 messages received from HEC
"RTN","IVMCM",6,0)
 ;
"RTN","IVMCM",7,0)
 ; Make sure POSTMASTER DUZ instead of DUZ of Person who
"RTN","IVMCM",8,0)
 ; started Incoming Logical Link.
"RTN","IVMCM",9,0)
 S DUZ=.5
"RTN","IVMCM",10,0)
 N CNT,IVMRTN,SEGCNT
"RTN","IVMCM",11,0)
 S IVMRTN="IVMCMX"  ;USE "IVMCMX" BECAUSE "IVMCM" ALREADY USED
"RTN","IVMCM",12,0)
 K ^TMP($J,IVMRTN),DIC
"RTN","IVMCM",13,0)
 S (DGMSGF,DGMTMSG)=1  ; HL7 rtn. Don't need DG interative messages.
"RTN","IVMCM",14,0)
 S HLECH=HL("ECH"),HLQ=HL("Q"),HLMID=HL("MID")
"RTN","IVMCM",15,0)
 K %,%H,%I D NOW^%DTC S HLDT=%
"RTN","IVMCM",16,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IVMCM",17,0)
 . S CNT=0
"RTN","IVMCM",18,0)
 . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE
"RTN","IVMCM",19,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IVMCM",20,0)
 . . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE(CNT)
"RTN","IVMCM",21,0)
 S HLDA=HLMTIEN
"RTN","IVMCM",22,0)
 ;
"RTN","IVMCM",23,0)
 N SEG,EVENT,MSGID
"RTN","IVMCM",24,0)
 S:'$D(HLEVN) HLEVN=0
"RTN","IVMCM",25,0)
 D NXTSEG^DGENUPL(HLDA,0,.SEG)
"RTN","IVMCM",26,0)
 Q:(SEG("TYPE")'="MSH")  ;would not have reached here if this happened!
"RTN","IVMCM",27,0)
 S EVENT=$P(SEG(9),$E(HLECH),2)
"RTN","IVMCM",28,0)
 ;
"RTN","IVMCM",29,0)
 ; INITIALIZE HL7 VARIABLES
"RTN","IVMCM",30,0)
 S HLEID="VAMC "_$P($$SITE^VASITE,"^",3)_" ORF-"_EVENT_" SERVER"
"RTN","IVMCM",31,0)
 S HLEID=$O(^ORD(101,"B",HLEID,0))
"RTN","IVMCM",32,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","IVMCM",33,0)
 S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","IVMCM",34,0)
 ;
"RTN","IVMCM",35,0)
 ; Handle means test signature ORF (Z06) event
"RTN","IVMCM",36,0)
 I EVENT="Z06" D ORF^IVMPREC7
"RTN","IVMCM",37,0)
 ;
"RTN","IVMCM",38,0)
 ; Handle income test ORF (Z10) event
"RTN","IVMCM",39,0)
 I EVENT="Z10" D Z10
"RTN","IVMCM",40,0)
 ;
"RTN","IVMCM",41,0)
 ; Handle enrollment/elig. ORF (Z11) event
"RTN","IVMCM",42,0)
 I EVENT="Z11" D
"RTN","IVMCM",43,0)
 .S MSGID=SEG(10)
"RTN","IVMCM",44,0)
 .D ORFZ11^DGENUPL(HLDA,MSGID)
"RTN","IVMCM",45,0)
 ;
"RTN","IVMCM",46,0)
 K ^TMP($J,IVMRTN)
"RTN","IVMCM",47,0)
 Q
"RTN","IVMCM",48,0)
 ;
"RTN","IVMCM",49,0)
 ;
"RTN","IVMCM",50,0)
Z10 ; Entry point for receipt of ORF~Z10 transmission
"RTN","IVMCM",51,0)
 ; The Income Test (Z10) transmission has the following format:
"RTN","IVMCM",52,0)
 ;
"RTN","IVMCM",53,0)
 ;       BHS           ORF msgs do not include batch header or trailer.
"RTN","IVMCM",54,0)
 ;       {MSH
"RTN","IVMCM",55,0)
 ;        PID          They will include the sequence:  MSA 
"RTN","IVMCM",56,0)
 ;        ZIC                                           QRD
"RTN","IVMCM",57,0)
 ;        ZIR                                           QRF
"RTN","IVMCM",58,0)
 ;        {ZDP         These segments will follow the MSH segment.
"RTN","IVMCM",59,0)
 ;         ZIC
"RTN","IVMCM",60,0)
 ;         ZIR
"RTN","IVMCM",61,0)
 ;        }
"RTN","IVMCM",62,0)
 ;        {ZMT
"RTN","IVMCM",63,0)
 ;        }
"RTN","IVMCM",64,0)
 ;        ZBT
"RTN","IVMCM",65,0)
 ;       }
"RTN","IVMCM",66,0)
 ;       BTS
"RTN","IVMCM",67,0)
 ;
"RTN","IVMCM",68,0)
 S IVMORF=1 ; set ORF msg flag
"RTN","IVMCM",69,0)
 S (HLEVN,IVMCT,IVMERROR,IVMCNTR)=0 ; init vars
"RTN","IVMCM",70,0)
 ;
"RTN","IVMCM",71,0)
ORU ; Entry point for receipt of ORU~Z10 trans (called by IVMPREC2)
"RTN","IVMCM",72,0)
 S IVMTYPE=5 ; set default to error condition
"RTN","IVMCM",73,0)
 ;
"RTN","IVMCM",74,0)
 ; - loop through the msg in (#772 file), and process (PROC) msgs
"RTN","IVMCM",75,0)
 S IVMDA=0 F  S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D PROC Q:'IVMDA
"RTN","IVMCM",76,0)
 ;
"RTN","IVMCM",77,0)
 ; - if ORF msg flag, update the Query Tran Log and send ACK
"RTN","IVMCM",78,0)
 I $G(IVMORF) D
"RTN","IVMCM",79,0)
 .I $G(DFN),$D(IVMMCI) D
"RTN","IVMCM",80,0)
 ..N IVMCR
"RTN","IVMCM",81,0)
 ..S IVMCR=$P("1^2^3^7^5^6^4","^",IVMTYPE)  ;map reason to test type
"RTN","IVMCM",82,0)
 ..D FIND^IVMCQ2(DFN,IVMMCI,HLDT,$S($D(HLERR):5,1:IVMCR),1)
"RTN","IVMCM",83,0)
 .;D ACK^IVMPREC:'$D(HLERR)
"RTN","IVMCM",84,0)
 .;N HLRESLTA,HLP
"RTN","IVMCM",85,0)
 .;D GENACK^HLMA1(HLEID,HLMTIEN,HLEIDS,"LM",1,.HLRESLTA,"",.HLP)
"RTN","IVMCM",86,0)
 ;
"RTN","IVMCM",87,0)
 ; - if tests are uploaded, generate notification msg
"RTN","IVMCM",88,0)
 I $D(^TMP($J,"IVMBULL")) D ^IVMCMB
"RTN","IVMCM",89,0)
 ;
"RTN","IVMCM",90,0)
ENQ ;
"RTN","IVMCM",91,0)
 K IVMDA,IVMORF,IVMSEG,IVMFLGC,IVMTYPE,IVMMTIEN,IVMMTDT,IVMDGBT,IVMMCI
"RTN","IVMCM",92,0)
 K ^TMP($J,"IVMCM"),^("IVMBULL"),DGMSGF,DGADDF,IVMCPAY,IVMBULL,DFN
"RTN","IVMCM",93,0)
 K DGMTMSG
"RTN","IVMCM",94,0)
 Q
"RTN","IVMCM",95,0)
 ;
"RTN","IVMCM",96,0)
PROC ; Process each HL7 message from (#772) file
"RTN","IVMCM",97,0)
 ;
"RTN","IVMCM",98,0)
 N IVMFUTR,TMSTAMP,SOURCE,NODE,HSDATE,IVMZ10,DGMTP,DGMTACT,DGMTI,DGMTA
"RTN","IVMCM",99,0)
 S DGMTACT="ADD"
"RTN","IVMCM",100,0)
 D PRIOR^DGMTEVT
"RTN","IVMCM",101,0)
 S IVMZ10="UPLOAD IN PROGRESS"
"RTN","IVMCM",102,0)
 S IVMFUTR=0 ;this flag will indicate whether or not a test with a future date is being uploaded
"RTN","IVMCM",103,0)
 S IVMMTIEN=0
"RTN","IVMCM",104,0)
 ;
"RTN","IVMCM",105,0)
 S MSGID=$P(IVMSEG,HLFS,10) ; msg control id for ACK's
"RTN","IVMCM",106,0)
 ; - check if DCD messaging is enabled
"RTN","IVMCM",107,0)
 I '$$DCDON^IVMUPAR1() D PROB^IVMCMC("Facility has DCD messaging disabled") Q
"RTN","IVMCM",108,0)
 ;
"RTN","IVMCM",109,0)
 ; - check HL7 msg structure for errors
"RTN","IVMCM",110,0)
 K HLERR,^TMP($J,"IVMCM")
"RTN","IVMCM",111,0)
 D ^IVMCMC I $D(HLERR) K:HLERR="" HLERR Q
"RTN","IVMCM",112,0)
 ;
"RTN","IVMCM",113,0)
 ; Determine type of test/transmission
"RTN","IVMCM",114,0)
 S IVMTYPE=0
"RTN","IVMCM",115,0)
 ;
"RTN","IVMCM",116,0)
 ; - was a means test sent?
"RTN","IVMCM",117,0)
 I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2) S IVMTYPE=1 ; MT trans
"RTN","IVMCM",118,0)
 ;
"RTN","IVMCM",119,0)
 ; - if MT and CT transmitted, error - pt can't have both unless
"RTN","IVMCM",120,0)
 ;   one is a deletion, but HEC not currently handling that situation
"RTN","IVMCM",121,0)
 I IVMTYPE,$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) D PROB^IVMCMC("Patient  can not have both a Means Test and Copay Test") Q
"RTN","IVMCM",122,0)
 I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) S IVMTYPE=2 ; CT trans
"RTN","IVMCM",123,0)
 ;
"RTN","IVMCM",124,0)
 ; - if no MT or CT or LTC then Income Screening
"RTN","IVMCM",125,0)
 I 'IVMTYPE,'$P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) S IVMTYPE=3 ; IS trans
"RTN","IVMCM",126,0)
 ;
"RTN","IVMCM",127,0)
 ;send an eligibility query if no eligibility code
"RTN","IVMCM",128,0)
 I '$$ELIG^IVMCUF1(DFN),'$$PENDING^DGENQRY(DFN) I $$SEND^DGENQRY1(DFN)
"RTN","IVMCM",129,0)
 ;
"RTN","IVMCM",130,0)
 ; obtain locks used to sychronize upload with local income test options
"RTN","IVMCM",131,0)
 D GETLOCKS^IVMCUPL(DFN)
"RTN","IVMCM",132,0)
 ;
"RTN","IVMCM",133,0)
 ;
"RTN","IVMCM",134,0)
MT ; If transmission is a Means Test
"RTN","IVMCM",135,0)
 N NODE0,RET,CODE,DATA
"RTN","IVMCM",136,0)
 S HLQ=$G(HL("Q"))
"RTN","IVMCM",137,0)
 S:HLQ="" HLQ=""""""
"RTN","IVMCM",138,0)
 I IVMTYPE=1 D  I $D(HLERR) G PROCQ
"RTN","IVMCM",139,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2))
"RTN","IVMCM",140,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,25))
"RTN","IVMCM",141,0)
 .S HSDATE=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,24))
"RTN","IVMCM",142,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,22)
"RTN","IVMCM",143,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,1)
"RTN","IVMCM",144,0)
 .I $$Z06MT^EASPTRN1(+IVMLAST) Q
"RTN","IVMCM",145,0)
 .I '$$ELIG^IVMUFNC5(DFN) S ERRMSG="Means Test upload not appropriate for current patient"
"RTN","IVMCM",146,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D
"RTN","IVMCM",147,0)
 ..N CATCZMT S CATCZMT=$G(^TMP($J,"IVMCM","ZMT1"))
"RTN","IVMCM",148,0)
 ..S CATC=$$CATC^IVMUFNC5(CATCZMT)
"RTN","IVMCM",149,0)
 ..I '+$G(CATC) S ERRMSG="Only Means Tests in current/previous income years are valid (not effective)"
"RTN","IVMCM",150,0)
 .I $G(ERRMSG)'="" D PROB^IVMCMC(ERRMSG) K ERRMSG,CATC Q
"RTN","IVMCM",151,0)
 .;
"RTN","IVMCM",152,0)
 .; - perform edit checks and file MT
"RTN","IVMCM",153,0)
 .D CHKDT
"RTN","IVMCM",154,0)
 .;deletion indicator sent?
"RTN","IVMCM",155,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,3)=HLQ D  Q
"RTN","IVMCM",156,0)
 ..D
"RTN","IVMCM",157,0)
 ...;if there is a future test for that income year, delete that
"RTN","IVMCM",158,0)
 ...N IEN,DATA,IVMPAT
"RTN","IVMCM",159,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1,.IVMPAT)
"RTN","IVMCM",160,0)
 ...I IEN S DATA(.06)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMCM",161,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","IVMCM",162,0)
 ....S IVMMTIEN=IEN
"RTN","IVMCM",163,0)
 ....S IVMFUTR=1
"RTN","IVMCM",164,0)
 ...E  D
"RTN","IVMCM",165,0)
 ....S IVMFUTR=0
"RTN","IVMCM",166,0)
 ..Q:('IVMMTIEN)
"RTN","IVMCM",167,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",168,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","IVMCM",169,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","IVMCM",170,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","IVMCM",171,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","IVMCM",172,0)
 .;
"RTN","IVMCM",173,0)
 .;check timestamp - if matches current primary test and hardship matches, then this is a duplicate and does not need to be uploaded
"RTN","IVMCM",174,0)
 .I TMSTAMP D
"RTN","IVMCM",175,0)
 ..S NODE=""
"RTN","IVMCM",176,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1)
"RTN","IVMCM",177,0)
 ..Q:'IVMMTIEN
"RTN","IVMCM",178,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","IVMCM",179,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",180,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5),(HSDATE=$P(NODE,"^")) Q
"RTN","IVMCM",181,0)
 .;
"RTN","IVMCM",182,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,2)
"RTN","IVMCM",183,0)
 .D EN^IVMCM1
"RTN","IVMCM",184,0)
 ;
"RTN","IVMCM",185,0)
 ;
"RTN","IVMCM",186,0)
CT ; If transmission is a Copay Test
"RTN","IVMCM",187,0)
 N NODE0,RET,CODE,DATA
"RTN","IVMCM",188,0)
 I IVMTYPE=2 D  I $D(HLERR) G PROCQ
"RTN","IVMCM",189,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2))
"RTN","IVMCM",190,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,25))
"RTN","IVMCM",191,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,22)
"RTN","IVMCM",192,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,2)
"RTN","IVMCM",193,0)
 .S IVMCPAY=$$RXST^IBARXEU(DFN)
"RTN","IVMCM",194,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D PROB^IVMCMC("Only Copay Tests in the current/previous income years are valid. (Not effective)") Q
"RTN","IVMCM",195,0)
 .; - perform edit checks and file CT
"RTN","IVMCM",196,0)
 .D CHKDT
"RTN","IVMCM",197,0)
 .;deletion indicator sent?
"RTN","IVMCM",198,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,3)=HLQ D  Q
"RTN","IVMCM",199,0)
 ..D
"RTN","IVMCM",200,0)
 ...;if there is a future test for that income year, delete that
"RTN","IVMCM",201,0)
 ...N IEN,DATA,IVMPAT
"RTN","IVMCM",202,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2,.IVMPAT)
"RTN","IVMCM",203,0)
 ...I IEN S DATA(.07)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","IVMCM",204,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","IVMCM",205,0)
 ....S IVMMTIEN=IEN
"RTN","IVMCM",206,0)
 ....S IVMFUTR=1
"RTN","IVMCM",207,0)
 ...E  D
"RTN","IVMCM",208,0)
 ....S IVMFUTR=0
"RTN","IVMCM",209,0)
 ..Q:('IVMMTIEN)
"RTN","IVMCM",210,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",211,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","IVMCM",212,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","IVMCM",213,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","IVMCM",214,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","IVMCM",215,0)
 .;
"RTN","IVMCM",216,0)
 .;check timestamp - if matches current primary test, then this is a duplicate and does not need to be uploaded
"RTN","IVMCM",217,0)
 .I TMSTAMP D
"RTN","IVMCM",218,0)
 ..S NODE=""
"RTN","IVMCM",219,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2)
"RTN","IVMCM",220,0)
 ..Q:'IVMMTIEN
"RTN","IVMCM",221,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","IVMCM",222,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","IVMCM",223,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5) Q
"RTN","IVMCM",224,0)
 .;
"RTN","IVMCM",225,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,1)
"RTN","IVMCM",226,0)
 .D EN^IVMCM1
"RTN","IVMCM",227,0)
 ;
"RTN","IVMCM",228,0)
IS ; - If transmission is income screening info only then do not process
"RTN","IVMCM",229,0)
 ; - outside of the scope of MTS
"RTN","IVMCM",230,0)
 ;I IVMTYPE=3 S IVMMTDT=0 D EN^IVMCM1 I $D(HLERR) G PROCQ
"RTN","IVMCM",231,0)
 I IVMTYPE=3 S IVMMTDT=0
"RTN","IVMCM",232,0)
 ;
"RTN","IVMCM",233,0)
LTC ; If transmission contains a Long Term Care Test (TYPE 4 TEST)
"RTN","IVMCM",234,0)
 I $P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) D LTC^IVMCM1
"RTN","IVMCM",235,0)
 ;
"RTN","IVMCM",236,0)
PROCQ ;
"RTN","IVMCM",237,0)
 ; release locks used to sychronize upload with local income test options
"RTN","IVMCM",238,0)
 D RELLOCKS^IVMCUPL(DFN)
"RTN","IVMCM",239,0)
 Q
"RTN","IVMCM",240,0)
 ;
"RTN","IVMCM",241,0)
CHKDT ; check date of income test being uploaded
"RTN","IVMCM",242,0)
 ; Is it a future date?  If so, set IVMFUTR=1
"RTN","IVMCM",243,0)
 ;
"RTN","IVMCM",244,0)
 ; IVMMTIEN is the IEN of current primary test for the year
"RTN","IVMCM",245,0)
 ;
"RTN","IVMCM",246,0)
 I $E($P(IVMLAST,"^",2),1,3)=$E(IVMMTDT,1,3) S IVMMTIEN=+IVMLAST
"RTN","IVMCM",247,0)
 I IVMMTDT>DT S IVMFUTR=1
"RTN","IVMCM",248,0)
 Q
"RTN","IVMCM",249,0)
FUTURE(DFN,YEAR,TYPE,IVMPAT) ;
"RTN","IVMCM",250,0)
 ;Returns the ien of the future test, if there is one
"RTN","IVMCM",251,0)
 ;Inputs:  DFN
"RTN","IVMCM",252,0)
 ;         YEAR  - income year
"RTN","IVMCM",253,0)
 ;         TYPE - type of test
"RTN","IVMCM",254,0)
 ;Output:
"RTN","IVMCM",255,0)
 ;  function value - ien of future means test, if there is one, "" otherwise
"RTN","IVMCM",256,0)
 ;  IVMPAT - Pointer to the IVM Patient file for the income year if there is an entry (pass by reference)
"RTN","IVMCM",257,0)
 ;
"RTN","IVMCM",258,0)
 N RET
"RTN","IVMCM",259,0)
 S RET=""
"RTN","IVMCM",260,0)
 S IVMPAT=$$FIND^IVMPLOG(DFN,YEAR)
"RTN","IVMCM",261,0)
 I IVMPAT S RET=$P($G(^IVM(301.5,IVMPAT,0)),"^",$S(TYPE=1:6,1:7))
"RTN","IVMCM",262,0)
 Q RET
"RTN","IVMCMZ")
0^5^B485867
"RTN","IVMCMZ",1,0)
IVMCMZ ;ALB/EJG- PROCESS INCOME TEST (Z10) TRANSMISSIONS - EXTRINSICS ; 03/17/02 1:43pm
"RTN","IVMCMZ",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**77**;21-OCT-94
"RTN","IVMCMZ",3,0)
 ;
"RTN","IVMCMZ",4,0)
DOM(DFN) ; Is patient in a DOM?
"RTN","IVMCMZ",5,0)
 ;  Input:    DFN - pointer to pt in file (#2)
"RTN","IVMCMZ",6,0)
 ; Output: IVMDOM - Is the patient in a DOM?  0 => NO | 1 => YES
"RTN","IVMCMZ",7,0)
 ;
"RTN","IVMCMZ",8,0)
 N IVMDOM,VAINDT,VADMVT
"RTN","IVMCMZ",9,0)
 D ADM^VADPT2
"RTN","IVMCMZ",10,0)
 I VADMVT,$P($G(^DG(43,1,0)),"^",21),$D(^DIC(42,+$P($G(^DGPM(VADMVT,0)),"^",6),0)),$P(^(0),"^",3)="D" S IVMDOM=1
"RTN","IVMCMZ",11,0)
 Q +$G(IVMDOM)
"RTN","IVMCMZ",12,0)
 ;
"RTN","IVMPREC7")
0^3^B55571685
"RTN","IVMPREC7",1,0)
IVMPREC7 ;ALB/SEK,RTK - ROUTINE TO PROCESS INCOMING (Z06 EVENT TYPE) HL7 MESSAGES ; 31 May 94
"RTN","IVMPREC7",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**1,17,44,34,77**;21-OCT-94
"RTN","IVMPREC7",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPREC7",4,0)
 ;
"RTN","IVMPREC7",5,0)
 ; This routine will process (validate) batch ORU Means Test(event type
"RTN","IVMPREC7",6,0)
 ; Z06) HL7 messages received from the IVM center.  Format of batch:
"RTN","IVMPREC7",7,0)
 ;       BHS
"RTN","IVMPREC7",8,0)
 ;       {MSH
"RTN","IVMPREC7",9,0)
 ;        PID
"RTN","IVMPREC7",10,0)
 ;        ZIC
"RTN","IVMPREC7",11,0)
 ;        ZIR
"RTN","IVMPREC7",12,0)
 ;        {ZDP
"RTN","IVMPREC7",13,0)
 ;         ZIC
"RTN","IVMPREC7",14,0)
 ;         ZIR
"RTN","IVMPREC7",15,0)
 ;        }
"RTN","IVMPREC7",16,0)
 ;        ZMT
"RTN","IVMPREC7",17,0)
 ;       }
"RTN","IVMPREC7",18,0)
 ;       BTS
"RTN","IVMPREC7",19,0)
 ;
"RTN","IVMPREC7",20,0)
EN ; entry point to validate Means Test messages 
"RTN","IVMPREC7",21,0)
 ;
"RTN","IVMPREC7",22,0)
 F IVMDA=1:0 S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D  Q:'IVMDA
"RTN","IVMPREC7",23,0)
 .K HLERR
"RTN","IVMPREC7",24,0)
EN1 .S HLMID=$P(IVMSEG,HLFS,10) ; message control id from MSH
"RTN","IVMPREC7",25,0)
 .S IVMFLGC=0
"RTN","IVMPREC7",26,0)
 .D GET I IVMSEG1'="PID" D  Q
"RTN","IVMPREC7",27,0)
 ..S HLERR="Missing PID segment" D ACK^IVMPREC
"RTN","IVMPREC7",28,0)
 .S DFN=$P($P(IVMSEG,HLFS,4),$E(HLECH))
"RTN","IVMPREC7",29,0)
 .I ('DFN!(DFN'=+DFN)!('$D(^DPT(+DFN,0)))) D  Q
"RTN","IVMPREC7",30,0)
 ..S HLERR="Invalid DFN" D ACK^IVMPREC
"RTN","IVMPREC7",31,0)
 .I $P(IVMSEG,HLFS,20)'=$P(^DPT(DFN,0),"^",9) S HLERR="Couldn't match IVM SSN with DHCP SSN" D ACK^IVMPREC Q
"RTN","IVMPREC7",32,0)
 .S IVMDAP=IVMDA ; save IVMDA for veteran PID segment
"RTN","IVMPREC7",33,0)
 .;
"RTN","IVMPREC7",34,0)
 .; check for veteran's ZIC and ZIR segments
"RTN","IVMPREC7",35,0)
 .D GET I IVMSEG1'="ZIC" D  Q
"RTN","IVMPREC7",36,0)
 ..S HLERR="Missing veteran's ZIC segment" D ACK^IVMPREC
"RTN","IVMPREC7",37,0)
 .S IVMDGLY=$P(IVMSEG,"^",3) ; income year
"RTN","IVMPREC7",38,0)
 .D GET I IVMSEG1'="ZIR" D  Q
"RTN","IVMPREC7",39,0)
 ..S HLERR="Missing veteran's ZIR segment" D ACK^IVMPREC
"RTN","IVMPREC7",40,0)
 .;
"RTN","IVMPREC7",41,0)
 .; check for spouse's ZDP, ZIC, ZIR segments
"RTN","IVMPREC7",42,0)
 .D GET I IVMSEG1'="ZDP" D  Q
"RTN","IVMPREC7",43,0)
 ..S HLERR="Missing spouse's ZDP segment" D ACK^IVMPREC
"RTN","IVMPREC7",44,0)
 .S IVMDAS=IVMDA ; save IVMDA for spouse ZDP segment
"RTN","IVMPREC7",45,0)
 .D GET I IVMSEG1'="ZIC" D  Q
"RTN","IVMPREC7",46,0)
 ..S HLERR="Missing spouse's ZIC segment" D ACK^IVMPREC
"RTN","IVMPREC7",47,0)
 .D GET I IVMSEG1'="ZIR" D  Q
"RTN","IVMPREC7",48,0)
 ..S HLERR="Missing spouse's ZIR segment" D ACK^IVMPREC
"RTN","IVMPREC7",49,0)
 .;
"RTN","IVMPREC7",50,0)
 .; check for dependent children's ZDP, ZIC, ZIR segments and ZMT segment
"RTN","IVMPREC7",51,0)
 .K IVMERR
"RTN","IVMPREC7",52,0)
 .S IVMFLG7=0
"RTN","IVMPREC7",53,0)
 .F  D  Q:$D(IVMERR)!(IVMSEG1="ZMT")
"RTN","IVMPREC7",54,0)
 ..D GET I IVMSEG1'="ZDP"&(IVMSEG1'="ZMT") D  Q
"RTN","IVMPREC7",55,0)
 ...S HLERR="Missing child's ZDP segment or ZMT segment",IVMERR="" D ACK^IVMPREC
"RTN","IVMPREC7",56,0)
 ..I IVMSEG1="ZMT" D  Q
"RTN","IVMPREC7",57,0)
 ...S:$P(IVMSEG,"^",4)=HLQ IVMFLG7=1 ; delete MT if status is HLQ
"RTN","IVMPREC7",58,0)
 ...S IVMDAZ=IVMDA ; ZMT segment ivmda
"RTN","IVMPREC7",59,0)
 ..I $P(IVMSEG,"^",2)']""!($P(IVMSEG,"^",3)']"")!($P(IVMSEG,"^",4)']"") D  Q
"RTN","IVMPREC7",60,0)
 ... S HLERR="Missing child data from ZDP segment",IVMERR="" D ACK^IVMPREC
"RTN","IVMPREC7",61,0)
 ..D GET I IVMSEG1'="ZIC" D  Q
"RTN","IVMPREC7",62,0)
 ...S HLERR="Missing child's ZIC segment",IVMERR="" D ACK^IVMPREC
"RTN","IVMPREC7",63,0)
 ..D GET I IVMSEG1'="ZIR" D  Q
"RTN","IVMPREC7",64,0)
 ...S HLERR="Missing child's ZIR segment",IVMERR="" D ACK^IVMPREC
"RTN","IVMPREC7",65,0)
 ..S IVMFLGC=IVMFLGC+1 ; # of children
"RTN","IVMPREC7",66,0)
 .;
"RTN","IVMPREC7",67,0)
 .Q:$D(IVMERR)&(IVMSEG1'="MSH")
"RTN","IVMPREC7",68,0)
 .G EN1:IVMSEG1="MSH"
"RTN","IVMPREC7",69,0)
 .;
"RTN","IVMPREC7",70,0)
 .; get primary means test
"RTN","IVMPREC7",71,0)
 .; ivmmtdt - means test date
"RTN","IVMPREC7",72,0)
 .; dgly - income year
"RTN","IVMPREC7",73,0)
 .; if Means Test not in DHCP don't upload IVM Means Test
"RTN","IVMPREC7",74,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P(IVMSEG,HLFS,3)) ; means test date from ZMT segment
"RTN","IVMPREC7",75,0)
 .S DGLY=$$LYR^DGMTSCU1(IVMMTDT)
"RTN","IVMPREC7",76,0)
 .S IVMMTIEN=+$$LST^DGMTU(DFN,IVMMTDT) ; primary means test IEN
"RTN","IVMPREC7",77,0)
 .;
"RTN","IVMPREC7",78,0)
 .I IVMFLG7 D ^IVMUM7 Q  ; delete means test
"RTN","IVMPREC7",79,0)
 .;
"RTN","IVMPREC7",80,0)
 .S (IVMMT31,DGMTP)=$G(^DGMT(408.31,IVMMTIEN,0)) ; dgmtp is event driver variable
"RTN","IVMPREC7",81,0)
 .I $P(IVMMT31,"^")'=IVMMTDT D  Q
"RTN","IVMPREC7",82,0)
 ..S Y=IVMMTDT X ^DD("DD")
"RTN","IVMPREC7",83,0)
 ..S IVMTEXT(6)="Means Test of "_Y_" not in DHCP."
"RTN","IVMPREC7",84,0)
 ..D ERRBULL,MAIL^IVMUFNC()
"RTN","IVMPREC7",85,0)
 ..S HLERR="Means test not in DHCP" D ACK^IVMPREC
"RTN","IVMPREC7",86,0)
 ..Q
"RTN","IVMPREC7",87,0)
 .I $P(IVMMT31,"^",23)=2 S Y=IVMMTDT X ^DD("DD") S HLERR="2nd means test sent for "_Y D ACK^IVMPREC Q
"RTN","IVMPREC7",88,0)
 .;
"RTN","IVMPREC7",89,0)
 .; do not upload IVM means test if primary means test status is
"RTN","IVMPREC7",90,0)
 .; 3-no longer required
"RTN","IVMPREC7",91,0)
 .; or if hardship case
"RTN","IVMPREC7",92,0)
 .S IVMSTAT=$P(IVMMT31,"^",3)
"RTN","IVMPREC7",93,0)
 .I IVMSTAT=3 S HLERR="NOT UPLOADED no longer required" D ACK^IVMPREC Q
"RTN","IVMPREC7",94,0)
 .I $P(IVMMT31,"^",20)=1 S HLERR="NOT UPLOADED hardship case" D ACK^IVMPREC Q
"RTN","IVMPREC7",95,0)
 .D ^IVMUM1 ; upload means test
"RTN","IVMPREC7",96,0)
 .I $D(HLERR) D ACK^IVMPREC
"RTN","IVMPREC7",97,0)
 .;
"RTN","IVMPREC7",98,0)
 .; cleanup
"RTN","IVMPREC7",99,0)
 .K DGLY,DGMTP,IVMDAP,IVMDAS,IVMDAZ,IVMDGLY,IVMFLG7,IVMFLGC,IVMMT31,IVMMTDT,IVMMTIEN,IVMSEG,IVMSEG1,IVMSTAT,IVMTEXT,XMSUB
"RTN","IVMPREC7",100,0)
 .Q
"RTN","IVMPREC7",101,0)
 Q
"RTN","IVMPREC7",102,0)
 ;
"RTN","IVMPREC7",103,0)
GET ; get HL7 segment from ^HL
"RTN","IVMPREC7",104,0)
 S IVMDA=$O(^TMP($J,IVMRTN,+IVMDA)),IVMSEG=$G(^(+IVMDA,0))
"RTN","IVMPREC7",105,0)
 S IVMSEG1=$E(IVMSEG,1,3)
"RTN","IVMPREC7",106,0)
 Q
"RTN","IVMPREC7",107,0)
 ;
"RTN","IVMPREC7",108,0)
ERRBULL ; build mail message for transmission to IVM mail group notifying site
"RTN","IVMPREC7",109,0)
 ; of upload error.
"RTN","IVMPREC7",110,0)
 S IVMPAT=$$PT^IVMUFNC4(DFN)
"RTN","IVMPREC7",111,0)
 S XMSUB="IVM - MEANS TEST UPLOAD"
"RTN","IVMPREC7",112,0)
 S IVMTEXT(1)="The following error occured when an Income Verification Match"
"RTN","IVMPREC7",113,0)
 S IVMTEXT(2)="verified Means Test was being uploaded for the following patient:"
"RTN","IVMPREC7",114,0)
 S IVMTEXT(3)=" "
"RTN","IVMPREC7",115,0)
 S IVMTEXT(4)="    NAME:     "_$P(IVMPAT,"^")
"RTN","IVMPREC7",116,0)
 S IVMTEXT(5)="    ID:       "_$P(IVMPAT,"^",2)
"RTN","IVMPREC7",117,0)
 S IVMTEXT(6)="    ERROR:    "_IVMTEXT(6)
"RTN","IVMPREC7",118,0)
 Q
"RTN","IVMPREC7",119,0)
ORF ;entry point for Means Test Signature Z06 msgs.
"RTN","IVMPREC7",120,0)
 I $G(HLFS)="" S HLFS="^"
"RTN","IVMPREC7",121,0)
 I $G(HLECH)="" S HLECH="~"
"RTN","IVMPREC7",122,0)
 F IVMDA=0:0 S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D  Q:'IVMDA
"RTN","IVMPREC7",123,0)
 .K HLERR
"RTN","IVMPREC7",124,0)
 .S HLMID=$P(IVMSEG,HLFS,10) ; message control id from MSH
"RTN","IVMPREC7",125,0)
 .S IVMFLGC=0
"RTN","IVMPREC7",126,0)
 .D GET I IVMSEG1'="PID" D  Q
"RTN","IVMPREC7",127,0)
 ..S HLERR="Missing PID segment" D ACK^IVMPREC
"RTN","IVMPREC7",128,0)
 .S DFN=$P($P(IVMSEG,HLFS,4),$E(HLECH))
"RTN","IVMPREC7",129,0)
 .I ('DFN!(DFN'=+DFN)!('$D(^DPT(+DFN,0)))) D  Q
"RTN","IVMPREC7",130,0)
 ..S HLERR="Invalid DFN" D ACK^IVMPREC
"RTN","IVMPREC7",131,0)
 .I $P(IVMSEG,HLFS,20)'=$P(^DPT(DFN,0),"^",9) S HLERR="Couldn't match IVMSSN with DHCP SSN" D ACK^IVMPREC Q
"RTN","IVMPREC7",132,0)
 .S IVMDAP=IVMDA ; save IVMDA for veteran PID segment
"RTN","IVMPREC7",133,0)
 .D GET I IVMSEG1'="ZMT" D  Q
"RTN","IVMPREC7",134,0)
 ..S HLERR="Missing ZMT segment" D ACK^IVMPREC
"RTN","IVMPREC7",135,0)
 .; IVMMTDT - means test date
"RTN","IVMPREC7",136,0)
 .; DGLY - income year
"RTN","IVMPREC7",137,0)
 .; if Means Test not in DHCP don't upload IVM Means Test
"RTN","IVMPREC7",138,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P(IVMSEG,HLFS,3)) ; means test date from ZMT  segment
"RTN","IVMPREC7",139,0)
 .S DGLY=$$LYR^DGMTSCU1(IVMMTDT)
"RTN","IVMPREC7",140,0)
 .; get means test to be updated
"RTN","IVMPREC7",141,0)
 .N UPMTS
"RTN","IVMPREC7",142,0)
 .S MTDATE=-IVMMTDT,IVMMTIEN="",MTFND=0
"RTN","IVMPREC7",143,0)
 .F  S IVMMTIEN=$O(^DGMT(408.31,"AID",1,DFN,MTDATE,IVMMTIEN),-1) Q:MTFND!(IVMMTIEN="")  D
"RTN","IVMPREC7",144,0)
 ..I $$Z06MT^EASPTRN1(IVMMTIEN) Q    ;EDB Z06 - Don't use this one
"RTN","IVMPREC7",145,0)
 ..; match site completing in case multiple tests for same date
"RTN","IVMPREC7",146,0)
 ..I $P(IVMSEG,HLFS,23)=$P(^DGMT(408.31,IVMMTIEN,2),HLFS,5) S UPMTS=IVMMTIEN,MTFND=1 Q
"RTN","IVMPREC7",147,0)
 .S (IVMMT31,DGMTP)=$G(^DGMT(408.31,UPMTS,0)) ; DGMTP is event driver  variable
"RTN","IVMPREC7",148,0)
 .I $P(IVMMT31,"^")'=IVMMTDT D  Q
"RTN","IVMPREC7",149,0)
 ..S Y=IVMMTDT X ^DD("DD")
"RTN","IVMPREC7",150,0)
 ..S IVMTEXT(6)="Means Test of "_Y_" not in DHCP."
"RTN","IVMPREC7",151,0)
 ..D ERRBULL,MAIL^IVMUFNC()
"RTN","IVMPREC7",152,0)
 ..S HLERR="Means test not in DHCP" D ACK^IVMPREC
"RTN","IVMPREC7",153,0)
 ..Q
"RTN","IVMPREC7",154,0)
 .I $P(IVMMT31,"^",23)=2 S Y=IVMMTDT X ^DD("DD") S HLERR="2nd means test  sent for "_Y D ACK^IVMPREC Q
"RTN","IVMPREC7",155,0)
 .; do not upload IVM means test if primary means test status is
"RTN","IVMPREC7",156,0)
 .; 3-no longer required
"RTN","IVMPREC7",157,0)
 .; or if hardship case
"RTN","IVMPREC7",158,0)
 .S IVMSTAT=$P(IVMMT31,"^",3)
"RTN","IVMPREC7",159,0)
 .I IVMSTAT=3 S HLERR="NOT UPLOADED no longer required" D ACK^IVMPREC Q
"RTN","IVMPREC7",160,0)
 .I $P(IVMMT31,"^",20)=1 S HLERR="NOT UPLOADED hardship case" D ACK^IVMPREC Q
"RTN","IVMPREC7",161,0)
 .;get MT signature and date/time edited info, update means test
"RTN","IVMPREC7",162,0)
 .N DATA
"RTN","IVMPREC7",163,0)
 .S DATA(.29)=$P(IVMSEG,HLFS,28),DATA(2.02)=$$FMDATE^HLFNC($P(IVMSEG,HLFS,26)) I $D(DATA(.29)) D
"RTN","IVMPREC7",164,0)
 ..I $$UPD^DGENDBS(408.31,UPMTS,.DATA)
"RTN","IVMPREC7",165,0)
 .I '$D(HLERR) D ACK^IVMPREC
"RTN","IVMPREC7",166,0)
 .;
"RTN","IVMPREC7",167,0)
 .; cleanup
"RTN","IVMPREC7",168,0)
 .K DGLY,DGMTP,IVMDAP,IVMDAS,IVMDAZ,IVMDGLY,IVMFLG7,IVMFLGC,IVMMT31,IVMMTDT,IVMMTIEN,IVMSEG,IVMSEG1,IVMSTAT,IVMTEXT,XMSUB,FMDATE,MTDATE
"RTN","IVMPREC7",169,0)
 .Q
"RTN","IVMPREC7",170,0)
 Q
"RTN","IVMPTRN8")
0^7^B47386768
"RTN","IVMPTRN8",1,0)
IVMPTRN8 ;ALB/RKS/PDJ - HL7 FULL DATA TRANSMISSION (Z07) BUILDER ; 6/05/02 12:12pm
"RTN","IVMPTRN8",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,24,36,37,47,48,42,34,77**; 21-OCT-94
"RTN","IVMPTRN8",3,0)
 ;
"RTN","IVMPTRN8",4,0)
 ;
"RTN","IVMPTRN8",5,0)
BUILD(DFN,IVMMTDT,IVMCT,IVMQUERY) ; --
"RTN","IVMPTRN8",6,0)
 ;  Description: This entry point will be used to create an HL7 
"RTN","IVMPTRN8",7,0)
 ;  "Full Data Transmission" message for a patient.
"RTN","IVMPTRN8",8,0)
 ;
"RTN","IVMPTRN8",9,0)
 ;  Input:
"RTN","IVMPTRN8",10,0)
 ;        DFN - Patient IEN
"RTN","IVMPTRN8",11,0)
 ;    IVMMTDT - date of the patient's Means Test or Copay Test
"RTN","IVMPTRN8",12,0)
 ;      IVMCT - count of hl7 segments transmitted, pass by reference
"RTN","IVMPTRN8",13,0)
 ;   IVMQUERY - array passed in by reference where
"RTN","IVMPTRN8",14,0)
 ;    IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",15,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",16,0)
 ;                last treatment date
"RTN","IVMPTRN8",17,0)
 ;    IVMQUERY("OVIS") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",18,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",19,0)
 ;                finding outpatient visits
"RTN","IVMPTRN8",20,0)
 ;
"RTN","IVMPTRN8",21,0)
 ;  HL7 variables as defined by call to INIT^IVMUFNC:
"RTN","IVMPTRN8",22,0)
 ;      HLEVN - HL7 message event counter 
"RTN","IVMPTRN8",23,0)
 ;      HLSDT - a flag that indicates that the data to be sent is
"RTN","IVMPTRN8",24,0)
 ;              stored in the ^TMP("HLS") global array.
"RTN","IVMPTRN8",25,0)
 ;
"RTN","IVMPTRN8",26,0)
 ;  The following variables returned by the INIT^HLTRANS entry point:
"RTN","IVMPTRN8",27,0)
 ;    HLNDAP - Non-DHCP Application Pointer from file 770
"RTN","IVMPTRN8",28,0)
 ;   HLNDAP0 - Zero node from file 770 corresponding to HLNDAP
"RTN","IVMPTRN8",29,0)
 ;     HLDAP - DHCP Application Pointer from file 771
"RTN","IVMPTRN8",30,0)
 ;     HLDAN - The DHCP Application Name (.01 field, file 771) for HLDAP
"RTN","IVMPTRN8",31,0)
 ;     HLPID - HL7 processing ID from file 770
"RTN","IVMPTRN8",32,0)
 ;     HLVER - HL7 version number from file 770
"RTN","IVMPTRN8",33,0)
 ;      HLFS - HL7 Field Separator from the 'FS' node of file 771
"RTN","IVMPTRN8",34,0)
 ;     HLECH - HL7 Encoding Characters from the 'EC' node of file 771
"RTN","IVMPTRN8",35,0)
 ;       HLQ - Double quotes ("") for use in building HL7 segments
"RTN","IVMPTRN8",36,0)
 ;     HLERR - if an error is encountered, an error message is returned
"RTN","IVMPTRN8",37,0)
 ;             in the HLERR variable.
"RTN","IVMPTRN8",38,0)
 ;      HLDA - the internal entry number for the entry created in
"RTN","IVMPTRN8",39,0)
 ;             file #772.
"RTN","IVMPTRN8",40,0)
 ;      HLDT - transmission date/time (associated with the entry in file
"RTN","IVMPTRN8",41,0)
 ;             #772 identified by HLDA) in internal VA FileMan format.
"RTN","IVMPTRN8",42,0)
 ;     HLDT1 - the same transmission date/time as the HLDT variable, 
"RTN","IVMPTRN8",43,0)
 ;             only in HL7 format.
"RTN","IVMPTRN8",44,0)
 ;
"RTN","IVMPTRN8",45,0)
 ; Output:
"RTN","IVMPTRN8",46,0)
 ;  ^TMP("HLS",$J,IVMCT) - global array containing all segments of the HL7 message that the VistA application wishes to send.  The HLSDT variable is defined above and the IVMCT variable is a sequential number incremented by 1.
"RTN","IVMPTRN8",47,0)
 ;
"RTN","IVMPTRN8",48,0)
 ;
"RTN","IVMPTRN8",49,0)
 N DGINC,DGIR,DGREL,I,IVMNTE,IVMPID,IVMSUB,IVMZRD,VAFPID,VAFZEL,FBZFE,IVMZCD,DELETE,NODE,IVMPIEN,TEST,IVMPNODE,TESTTYPE,SEQS,TESTCODE,HARDSHIP,ACTVIEN,IVMZMH
"RTN","IVMPTRN8",50,0)
 N EDBMTZ06
"RTN","IVMPTRN8",51,0)
 ;
"RTN","IVMPTRN8",52,0)
 ; create (PID) Patient Identification segment
"RTN","IVMPTRN8",53,0)
 S IVMPID=$$EN^VAFHLPID(DFN,"1,3,5,7,8,11,12,13,14,19")
"RTN","IVMPTRN8",54,0)
 ;
"RTN","IVMPTRN8",55,0)
 ; **** Add ICN to 2nd piece PID segment for MPI@HEC.
"RTN","IVMPTRN8",56,0)
 S IVMCMOR="1,2"
"RTN","IVMPTRN8",57,0)
 ; check to see if site is a legacy site.  If not add ICN to PID segment.
"RTN","IVMPTRN8",58,0)
 I '$D(^PPP(1020.128,"AC",$P($$SITE^VASITE,"^",3))) D
"RTN","IVMPTRN8",59,0)
 .I +$$GETICN^MPIF001(DFN)>0,($$IFLOCAL^MPIF001(DFN)=0) S IVMPID=$$EN^VAFCPID(DFN,"1,2,3,5,7,8,11,12,13,14,19"),IVMCMOR="1,2,3"
"RTN","IVMPTRN8",60,0)
 ;
"RTN","IVMPTRN8",61,0)
 I $D(VAFPID(1)) S IVMPID(1)=VAFPID(1)
"RTN","IVMPTRN8",62,0)
 ; send SSN indicating pseudo
"RTN","IVMPTRN8",63,0)
 ; I $P(IVMPID_$G(IVMPID(1)),HLFS,20)["P" D PSEUDO^IVMPTRN1  ; strip 'P' from pseudo SSNs
"RTN","IVMPTRN8",64,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID
"RTN","IVMPTRN8",65,0)
 I $D(IVMPID(1)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID(1)
"RTN","IVMPTRN8",66,0)
 ;
"RTN","IVMPTRN8",67,0)
 ; **** create (PD1) Patient CMOR segment for MPI@HEC.
"RTN","IVMPTRN8",68,0)
 S:'$D(HL("FS")) HL("FS")=HLFS
"RTN","IVMPTRN8",69,0)
 S:'$D(HL("ECH")) HL("ECH")=HLECH
"RTN","IVMPTRN8",70,0)
 S:'$D(HL("Q")) HL("Q")=HLQ
"RTN","IVMPTRN8",71,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLPD1(DFN,IVMCMOR)
"RTN","IVMPTRN8",72,0)
 ;
"RTN","IVMPTRN8",73,0)
 ; create (ZPD) Patient Dependent Info. segment
"RTN","IVMPTRN8",74,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZPD(DFN,"1,8,9,11,12,13,17,19"),IVMINS=$P(^(IVMCT),HLFS,12)
"RTN","IVMPTRN8",75,0)
 ;
"RTN","IVMPTRN8",76,0)
 ; create (ZTA) Temporary Address segment
"RTN","IVMPTRN8",77,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZTA(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",78,0)
 ;
"RTN","IVMPTRN8",79,0)
 ; create (ZIE) Ineligible segment
"RTN","IVMPTRN8",80,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIE(DFN,"1,2,3",1)
"RTN","IVMPTRN8",81,0)
 ;
"RTN","IVMPTRN8",82,0)
 ; create (ZEL) Eligibility segment(s) 
"RTN","IVMPTRN8",83,0)
 ; **** Add 5th piece to ZEL to correct consistency check
"RTN","IVMPTRN8",84,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEL(DFN,"1,2,5,6,7,10,11,13,14,15,16,17,18,19,20,21,23,24,25",2)  ; Primary Eligibility
"RTN","IVMPTRN8",85,0)
 ; - other entitled eligibilities
"RTN","IVMPTRN8",86,0)
 F IVMSUB=0:0 S IVMSUB=+$O(VAFZEL(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",87,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(+IVMSUB))
"RTN","IVMPTRN8",88,0)
 ;
"RTN","IVMPTRN8",89,0)
 ; create (ZEN) Enrollment segment
"RTN","IVMPTRN8",90,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEN(DFN)
"RTN","IVMPTRN8",91,0)
 ;
"RTN","IVMPTRN8",92,0)
 ; create (ZCD) Catastrophic Disability segment(s)
"RTN","IVMPTRN8",93,0)
 D BUILD^VAFHLZCD(.IVMZCD,DFN,,HLQ,HLFS)
"RTN","IVMPTRN8",94,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZCD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",95,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZCD(+IVMSUB))
"RTN","IVMPTRN8",96,0)
 ;
"RTN","IVMPTRN8",97,0)
 ; Optionally create (ZMH) Military History segment for Purple Heart
"RTN","IVMPTRN8",98,0)
 D ENTER^VAFHLZMH(DFN,"IVMZMH","13")
"RTN","IVMPTRN8",99,0)
 I $P(IVMZMH(1,0),HLFS,3)="PH","YN"[$E($P(IVMZMH(1,0),HLFS,4)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMZMH(1,0)
"RTN","IVMPTRN8",100,0)
 ;
"RTN","IVMPTRN8",101,0)
 ; create (ZRD) Rated Disabilities segment(s)
"RTN","IVMPTRN8",102,0)
 D EN^VAFHLZRD(DFN,"1,2,3,4",HLQ,HLFS,"IVMZRD")
"RTN","IVMPTRN8",103,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZRD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",104,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZRD(+IVMSUB,0))
"RTN","IVMPTRN8",105,0)
 ;
"RTN","IVMPTRN8",106,0)
 ; create (ZCT) Emergency Contact segment
"RTN","IVMPTRN8",107,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZCT(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",108,0)
 ;
"RTN","IVMPTRN8",109,0)
 ; create (ZEM) Employment Info. segment for (1) Patient & (2) Spouse
"RTN","IVMPTRN8",110,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3")
"RTN","IVMPTRN8",111,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3",2,2)
"RTN","IVMPTRN8",112,0)
 ;
"RTN","IVMPTRN8",113,0)
 ; create (ZGD) Guardian segment for (1) VA & (2) Civil 
"RTN","IVMPTRN8",114,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",1)
"RTN","IVMPTRN8",115,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",2)
"RTN","IVMPTRN8",116,0)
 ;
"RTN","IVMPTRN8",117,0)
 ;get the primary test for the income year
"RTN","IVMPTRN8",118,0)
 S TESTTYPE=$$GETTYPE^IVMPTRN9(DFN,IVMMTDT,.TESTCODE,.HARDSHIP,.ACTVIEN)
"RTN","IVMPTRN8",119,0)
 ;
"RTN","IVMPTRN8",120,0)
 ; The following function call returns:
"RTN","IVMPTRN8",121,0)
 ;   - Patient Relation IEN array in DGREL
"RTN","IVMPTRN8",122,0)
 ;   - Individual Annual Income IEN array in DGINC
"RTN","IVMPTRN8",123,0)
 ;   - Income Relation IEN array in DGINR
"RTN","IVMPTRN8",124,0)
 D ALL^DGMTU21(DFN,"VSC",IVMMTDT,"IPR",ACTVIEN)
"RTN","IVMPTRN8",125,0)
 ;
"RTN","IVMPTRN8",126,0)
 S EDBMTZ06=0 I $$VERZ06^EASPTRN1(DFN) S EDBMTZ06=1
"RTN","IVMPTRN8",127,0)
 ; create (ZIC) Income segment for veteran
"RTN","IVMPTRN8",128,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("V")),"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
"RTN","IVMPTRN8",129,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",130,0)
 I $P(^TMP("HLS",$J,IVMCT),"^",3)=HLQ S $P(^TMP("HLS",$J,IVMCT),"^",3)=$$HLDATE^HLFNC($E(IVMMTDT,1,3)-1_"0000")
"RTN","IVMPTRN8",131,0)
 ;
"RTN","IVMPTRN8",132,0)
 ; create (ZIR) Income Relation segment for veteran
"RTN","IVMPTRN8",133,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("V")),"1,2,3,4,5,10")
"RTN","IVMPTRN8",134,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^1"
"RTN","IVMPTRN8",135,0)
 ;
"RTN","IVMPTRN8",136,0)
 ; create (ZDP) Patient Dependent Info. segment for spouse
"RTN","IVMPTRN8",137,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("S")),"1,2,3,4,5,6,7,8,9")
"RTN","IVMPTRN8",138,0)
 I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",139,0)
 .; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",140,0)
 .S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",141,0)
 ;
"RTN","IVMPTRN8",142,0)
 ; create (ZIC) Income segment for spouse
"RTN","IVMPTRN8",143,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("S")),"1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20")
"RTN","IVMPTRN8",144,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",145,0)
 ;
"RTN","IVMPTRN8",146,0)
 ; create (ZIR) Income Relation segment for spouse
"RTN","IVMPTRN8",147,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("S")),"1,2,3")
"RTN","IVMPTRN8",148,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",149,0)
 ;
"RTN","IVMPTRN8",150,0)
 ;
"RTN","IVMPTRN8",151,0)
 ; create ZDP, ZIC, and ZIR segments for all Means Test dependents
"RTN","IVMPTRN8",152,0)
 F IVMSUB=0:0 S IVMSUB=$O(DGREL("C",IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",153,0)
 .;
"RTN","IVMPTRN8",154,0)
 .; - create (ZDP) Dependent Info. segment for dependent child
"RTN","IVMPTRN8",155,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("C",IVMSUB)),"1,2,3,4,5,6,7,9")
"RTN","IVMPTRN8",156,0)
 .I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",157,0)
 ..; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",158,0)
 ..S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",159,0)
 .;
"RTN","IVMPTRN8",160,0)
 .; - create (ZIC) Income segment for dependent child
"RTN","IVMPTRN8",161,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("C",IVMSUB)),"1,2,3,4,5,6,7,8,9,10,11,12,15")
"RTN","IVMPTRN8",162,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",163,0)
 .;
"RTN","IVMPTRN8",164,0)
 .; - create (ZIR) Income Relation segment for dependent child
"RTN","IVMPTRN8",165,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("C",IVMSUB)),"1,2,3,6,7,8,9")
"RTN","IVMPTRN8",166,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",167,0)
 .; 
"RTN","IVMPTRN8",168,0)
 ;
"RTN","IVMPTRN8",169,0)
 ; create (ZIO) Inpatient/Outpatient segment for veteran
"RTN","IVMPTRN8",170,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="ZIO^1^"_$$EN^IVMUFNC1(DFN,IVMMTDT,.IVMQUERY)_"^"_$$LTD^IVMUFNC(DFN,.IVMQUERY)
"RTN","IVMPTRN8",171,0)
 ;
"RTN","IVMPTRN8",172,0)
 ; create (NTE) Notes and Comments segment
"RTN","IVMPTRN8",173,0)
 D NTE^IVMUFNC4(DFN,.IVMNTE,IVMMTDT)
"RTN","IVMPTRN8",174,0)
 I '$D(IVMNTE) D
"RTN","IVMPTRN8",175,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="NTE^1"
"RTN","IVMPTRN8",176,0)
 I $D(IVMNTE) D
"RTN","IVMPTRN8",177,0)
 .; - get notes and comments
"RTN","IVMPTRN8",178,0)
 .F IVMSUB=0:0 S IVMSUB=$O(IVMNTE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",179,0)
 ..S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMNTE(IVMSUB)
"RTN","IVMPTRN8",180,0)
 ;
"RTN","IVMPTRN8",181,0)
 ; create (IN1) Insurance segment(s) for all active insurance
"RTN","IVMPTRN8",182,0)
 K ^TMP("VAFIN1",$J)
"RTN","IVMPTRN8",183,0)
 D EN^VAFHLIN1(DFN,"1,4,5,7,8,9,12,13,15,16,17,28,36")
"RTN","IVMPTRN8",184,0)
 F IVMSUB=0:0 S IVMSUB=$O(^TMP("VAFIN1",$J,IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",185,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=^TMP("VAFIN1",$J,+IVMSUB,0)
"RTN","IVMPTRN8",186,0)
 ;
"RTN","IVMPTRN8",187,0)
 D GOTO^IVMPTRN9
"RTN","IVMPTRN8",188,0)
 Q
"VER")
8.0^22
**INSTALL NAME**
EAS*1.0*30
"BLD",4232,0)
EAS*1.0*30^ENROLLMENT APPLICATION SYSTEM^0^3030409^y
"BLD",4232,1,0)
^^2^2^3030312^^
"BLD",4232,1,1,0)
ADDITIONAL ENHANCEMENTS REQUIRED TO HANDLE SENDING AND RECEIVING OF OTHER
"BLD",4232,1,2,0)
HL7 MESSAGES BASED UPON RECEIPT OF A Z06 MESSAGE.
"BLD",4232,4,0)
^9.64PA^^
"BLD",4232,"ABPKG")
n
"BLD",4232,"KRN",0)
^9.67PA^8989.52^19
"BLD",4232,"KRN",.4,0)
.4
"BLD",4232,"KRN",.401,0)
.401
"BLD",4232,"KRN",.402,0)
.402
"BLD",4232,"KRN",.403,0)
.403
"BLD",4232,"KRN",.5,0)
.5
"BLD",4232,"KRN",.84,0)
.84
"BLD",4232,"KRN",3.6,0)
3.6
"BLD",4232,"KRN",3.8,0)
3.8
"BLD",4232,"KRN",9.2,0)
9.2
"BLD",4232,"KRN",9.8,0)
9.8
"BLD",4232,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",4232,"KRN",9.8,"NM",1,0)
EASPTRN1^^0^B10446326
"BLD",4232,"KRN",9.8,"NM",2,0)
EASPREC7^^0^B59026045
"BLD",4232,"KRN",9.8,"NM",3,0)
EASUM1^^0^B24237839
"BLD",4232,"KRN",9.8,"NM","B","EASPREC7",2)

"BLD",4232,"KRN",9.8,"NM","B","EASPTRN1",1)

"BLD",4232,"KRN",9.8,"NM","B","EASUM1",3)

"BLD",4232,"KRN",19,0)
19
"BLD",4232,"KRN",19,"NM",0)
^9.68A^^
"BLD",4232,"KRN",19.1,0)
19.1
"BLD",4232,"KRN",101,0)
101
"BLD",4232,"KRN",409.61,0)
409.61
"BLD",4232,"KRN",771,0)
771
"BLD",4232,"KRN",870,0)
870
"BLD",4232,"KRN",8989.51,0)
8989.51
"BLD",4232,"KRN",8989.52,0)
8989.52
"BLD",4232,"KRN",8994,0)
8994
"BLD",4232,"KRN","B",.4,.4)

"BLD",4232,"KRN","B",.401,.401)

"BLD",4232,"KRN","B",.402,.402)

"BLD",4232,"KRN","B",.403,.403)

"BLD",4232,"KRN","B",.5,.5)

"BLD",4232,"KRN","B",.84,.84)

"BLD",4232,"KRN","B",3.6,3.6)

"BLD",4232,"KRN","B",3.8,3.8)

"BLD",4232,"KRN","B",9.2,9.2)

"BLD",4232,"KRN","B",9.8,9.8)

"BLD",4232,"KRN","B",19,19)

"BLD",4232,"KRN","B",19.1,19.1)

"BLD",4232,"KRN","B",101,101)

"BLD",4232,"KRN","B",409.61,409.61)

"BLD",4232,"KRN","B",771,771)

"BLD",4232,"KRN","B",870,870)

"BLD",4232,"KRN","B",8989.51,8989.51)

"BLD",4232,"KRN","B",8989.52,8989.52)

"BLD",4232,"KRN","B",8994,8994)

"BLD",4232,"QUES",0)
^9.62^^
"BLD",4232,"REQB",0)
^9.611^2^2
"BLD",4232,"REQB",1,0)
EAS*1.0*23^1
"BLD",4232,"REQB",2,0)
IVM*2.0*69^1
"BLD",4232,"REQB","B","EAS*1.0*23",1)

"BLD",4232,"REQB","B","IVM*2.0*69",2)

"MBREQ")
0
"PKG",552,-1)
1^1
"PKG",552,0)
ENROLLMENT APPLICATION SYSTEM^EAS^ENROLLMENT
"PKG",552,20,0)
^9.402P^1^1
"PKG",552,20,1,0)
2^^EASXDR
"PKG",552,20,1,1)
 
"PKG",552,20,"B",2,1)

"PKG",552,22,0)
^9.49I^1^1
"PKG",552,22,1,0)
1.0^3010315^3010410^66481
"PKG",552,22,1,"PAH",1,0)
30^3030409
"PKG",552,22,1,"PAH",1,1,0)
^^2^2^3030409
"PKG",552,22,1,"PAH",1,1,1,0)
ADDITIONAL ENHANCEMENTS REQUIRED TO HANDLE SENDING AND RECEIVING OF OTHER
"PKG",552,22,1,"PAH",1,1,2,0)
HL7 MESSAGES BASED UPON RECEIPT OF A Z06 MESSAGE.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","EASPREC7")
0^2^B59026045
"RTN","EASPREC7",1,0)
EASPREC7 ;ALB/SEK,RTK - ROUTINE TO PROCESS INCOMING (Z06 EVENT TYPE) HL7 MESSAGES ; 31 May 94
"RTN","EASPREC7",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**23,30**;21-OCT-94
"RTN","EASPREC7",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","EASPREC7",4,0)
 ;
"RTN","EASPREC7",5,0)
 ; This routine will process (validate) batch ORU Means Test(event type
"RTN","EASPREC7",6,0)
 ; Z06) HL7 messages received from the IVM center.  Format of batch:
"RTN","EASPREC7",7,0)
 ;       BHS
"RTN","EASPREC7",8,0)
 ;       {MSH
"RTN","EASPREC7",9,0)
 ;        PID
"RTN","EASPREC7",10,0)
 ;        ZIC
"RTN","EASPREC7",11,0)
 ;        ZIR
"RTN","EASPREC7",12,0)
 ;        {ZDP
"RTN","EASPREC7",13,0)
 ;         ZIC
"RTN","EASPREC7",14,0)
 ;         ZIR
"RTN","EASPREC7",15,0)
 ;        }
"RTN","EASPREC7",16,0)
 ;        ZMT
"RTN","EASPREC7",17,0)
 ;        ZIV
"RTN","EASPREC7",18,0)
 ;       }
"RTN","EASPREC7",19,0)
 ;       BTS
"RTN","EASPREC7",20,0)
 ;
"RTN","EASPREC7",21,0)
EN ; entry point to validate Means Test messages 
"RTN","EASPREC7",22,0)
 ;
"RTN","EASPREC7",23,0)
 N DEPFLG,EDB,CANCFLG,CASEFLG,SEGSTR,SEGMENTS,MISSING,ERRFLG,Z06COM
"RTN","EASPREC7",24,0)
 N IVM2,IVM3,IVM7,IVM8,IVM10,IVM12,IVM17,IVM18,IVM20,IVM25,IVM26,IVMIY
"RTN","EASPREC7",25,0)
 N IVMDA,IVMPAT,IVMMTSTS,MTFND,UPMTS,MTDATE,TYPE,EASMTDT,EASZ06,EXPIRED
"RTN","EASPREC7",26,0)
 S SEGSTR="00000000000"      ;One byte for each segment in message
"RTN","EASPREC7",27,0)
 S SEGMENTS="BHS,MSH,PID,ZIC,ZIR,ZDP,ZIC,ZIR,ZMT,ZIV,BTS"
"RTN","EASPREC7",28,0)
 S EDB="EDB-EAS"
"RTN","EASPREC7",29,0)
 S Z06COM="Z06 MT via Edb"
"RTN","EASPREC7",30,0)
 S (CASEFLG,DEPFLG,ERRFLG,HLERR,IVMDA,IVMFLGC,MTFND,UPMTS)=0
"RTN","EASPREC7",31,0)
EN1 F  S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  D  I $D(HLERR) D ACK^IVMPREC S ERRFLG=1 Q 
"RTN","EASPREC7",32,0)
 .K HLERR
"RTN","EASPREC7",33,0)
 .D GET
"RTN","EASPREC7",34,0)
 .D @IVMSEG1
"RTN","EASPREC7",35,0)
 Q:ERRFLG                               ;Error detected do not continue
"RTN","EASPREC7",36,0)
 S MISSING=$F(SEGSTR,0)                 ;Ensure all required segments
"RTN","EASPREC7",37,0)
 I MISSING D  I $D(HLERR) D ACK^IVMPREC,CLEANUP Q
"RTN","EASPREC7",38,0)
 . S TYPE=$S(MISSING=3!(MISSING=4):"Veteran's",MISSING>4&(MISSING<8):"Spouse's",1:"")
"RTN","EASPREC7",39,0)
 . S HLERR="Missing "_TYPE_" "_$P(SEGMENTS,",",(MISSING-1))_" Segment"
"RTN","EASPREC7",40,0)
 D PROCESS
"RTN","EASPREC7",41,0)
 I $D(HLERR) D ACK^IVMPREC
"RTN","EASPREC7",42,0)
 ;
"RTN","EASPREC7",43,0)
 ; cleanup
"RTN","EASPREC7",44,0)
CLEANUP K DGLY,DGMTP,IVMDAP,IVMDAS,IVMDAZ,IVMDGLY,CANCFLG,IVMFLGC,IVMMT31
"RTN","EASPREC7",45,0)
 K IVMMTDT,IVMMTIEN,IVMSEG,IVMSEG1,IVMSTAT,IVMTEXT,XMSUB,HLERR,CLOSFLG
"RTN","EASPREC7",46,0)
 K IVMZ10,IVMDAV,ZIVSEG,ZMTSEG
"RTN","EASPREC7",47,0)
 Q
"RTN","EASPREC7",48,0)
 ;
"RTN","EASPREC7",49,0)
 ;Dependent upon type of Z06 sent perform the following;
"RTN","EASPREC7",50,0)
 ;IVM Case Status:
"RTN","EASPREC7",51,0)
 ;  Value of 1 = Create/Update Z06 MT, Close Case and Mark REASON CODE 
"RTN","EASPREC7",52,0)
 ;               as 'Converted'
"RTN","EASPREC7",53,0)
 ;  Value of 0 = Cancel Z06 MT and Mark REASON CODE as 'Not Convert'
"RTN","EASPREC7",54,0)
 ;
"RTN","EASPREC7",55,0)
 ; If Z06 MT and IVM Case Status is 1 and Z06 MT does not exist Then 
"RTN","EASPREC7",56,0)
 ;   Create new Z06 MT (new Z06 MT becomes primary and existing MT
"RTN","EASPREC7",57,0)
 ;   becomes non-primary)
"RTN","EASPREC7",58,0)
 ;   Assign REASON CODE of 'Converted' in #301.5
"RTN","EASPREC7",59,0)
 ; If Z06 MT already exists Then 
"RTN","EASPREC7",60,0)
 ;   If IVM Case Status is 0 Then 
"RTN","EASPREC7",61,0)
 ;     Delete Z06 MT for income year and return old MT to primary
"RTN","EASPREC7",62,0)
 ;     Change REASON CODE from 'Converted' to 'Not Converted' in #301.5
"RTN","EASPREC7",63,0)
 ;   If IVM Case Status is 1 Then
"RTN","EASPREC7",64,0)
 ;     Update MT Z06 and Close/Convert Case
"RTN","EASPREC7",65,0)
 ; Else  (Z06 MT, IVM Case Status=0 and Z06 MT does not exist)
"RTN","EASPREC7",66,0)
 ;   Send back 'AE' to Edb indicating MT Z06 not available for 
"RTN","EASPREC7",67,0)
 ;   cancellation
"RTN","EASPREC7",68,0)
 ;
"RTN","EASPREC7",69,0)
PROCESS N DIC,%,%H,%I,IVMDATE
"RTN","EASPREC7",70,0)
 D NOW^%DTC
"RTN","EASPREC7",71,0)
 S IVMDATE=%
"RTN","EASPREC7",72,0)
 S (EASZ06,EXPIRED)=0
"RTN","EASPREC7",73,0)
 I $G(IVMMTIEN)="" D
"RTN","EASPREC7",74,0)
 . S CURMT=$$LST^DGMTU(DFN)        ;Retrieve current means test on file
"RTN","EASPREC7",75,0)
 . S IVMMTIEN=$P(CURMT,"^",1)      ; for the appropriate income year
"RTN","EASPREC7",76,0)
 . S IVMMTDT=$P(CURMT,"^",2)
"RTN","EASPREC7",77,0)
 . S IVMMTSTS=$P(CURMT,"^",3)
"RTN","EASPREC7",78,0)
 I $G(IVMMTIEN)="" D  Q                         ;No Means Test in #408.31
"RTN","EASPREC7",79,0)
 . S EASZ06=1,IVMMTDT=EASMTDT
"RTN","EASPREC7",80,0)
 . D ^EASUM1                                    ;Create New Z06 MT
"RTN","EASPREC7",81,0)
 . I $G(IVMMTDT)="" S IVMMTDT=EASMTDT
"RTN","EASPREC7",82,0)
 . I $$EXPIRED^EASPTRN1(DFN,$G(IVMMTDT)) S EXPIRED=1,IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASPREC7",83,0)
 . D CLOSE^EASPTRN1(IVMIY,DFN,1,6)              ;Close Case/Converted
"RTN","EASPREC7",84,0)
 S (IVMMT31,DGMTP)=$G(^DGMT(408.31,IVMMTIEN,0)) ;dgmtp is event driver variable
"RTN","EASPREC7",85,0)
 I 'MTFND,CASEFLG D  Q
"RTN","EASPREC7",86,0)
 . S DA=IVMMTIEN,DIE="^DGMT(408.31,",DR="2////0;"   ;Change old MT to
"RTN","EASPREC7",87,0)
 . D ^DIE K DA,DIE,DR                           ; non-primary
"RTN","EASPREC7",88,0)
 . D ^EASUM1                                    ;Create New Z06 MT
"RTN","EASPREC7",89,0)
 . I $G(IVMMTDT)="" S IVMMTDT=EASMTDT
"RTN","EASPREC7",90,0)
 . I $$EXPIRED^EASPTRN1(DFN,$G(IVMMTDT)) S EXPIRED=1,IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASPREC7",91,0)
 . D CLOSE^EASPTRN1(IVMIY,DFN,1,6)              ;Close Case/Converted
"RTN","EASPREC7",92,0)
 I 'MTFND,'CASEFLG S HLERR="Existing Z06 MT not found" Q
"RTN","EASPREC7",93,0)
 I MTFND D
"RTN","EASPREC7",94,0)
 . I 'CASEFLG D  Q                              ;Delete means test
"RTN","EASPREC7",95,0)
 . .;Check to see if MT Z06 exists prior to trying to delete
"RTN","EASPREC7",96,0)
 . .; If NOT defined then send an AE back to Edb
"RTN","EASPREC7",97,0)
 . . I 'UPMTS D  Q                           ;Existing Z06 MT not found
"RTN","EASPREC7",98,0)
 . . . S HLERR="Existing Z06 MT not found"
"RTN","EASPREC7",99,0)
 . . I UPMTS D  Q
"RTN","EASPREC7",100,0)
 . . . N CURMT,IVMMTI,IVMDFN
"RTN","EASPREC7",101,0)
 . . . S IVMDFN=DFN                             ;Save off DFN
"RTN","EASPREC7",102,0)
 . . . I $$EXPIRED^EASPTRN1(DFN,$G(IVMMTDT)) S EXPIRED=1,IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASPREC7",103,0)
 . . . D ^IVMUM7                                ;Delete Z06 MT
"RTN","EASPREC7",104,0)
 . . . S DFN=IVMDFN
"RTN","EASPREC7",105,0)
 . . . I $G(IVMMTDT)="" S IVMMTDT=EASMTDT
"RTN","EASPREC7",106,0)
 . . . D CLOSE^EASPTRN1(IVMIY,DFN,1,7)          ;Close Case/Not Converted
"RTN","EASPREC7",107,0)
 . I CASEFLG D                                  ;Update existing Z06 MT
"RTN","EASPREC7",108,0)
 . . I '$D(ZMTSEG) S HLERR="ZMT Segment is Missing" Q
"RTN","EASPREC7",109,0)
 . . D PARSEZMT(ZMTSEG)                         ;Retrieve ZMT Values
"RTN","EASPREC7",110,0)
 . . S DA=IVMMTIEN,DIE="^DGMT(408.31,"
"RTN","EASPREC7",111,0)
 . . S DR=".03////^S X=IVM3;.12////^S X=IVM8;.07////^S X=IVM10;.09////^S X=IVM25;.11////^S X=IVM7;.18////^S X=IVM12;.23////^S X=IVM18;.25////^S X=IVM20;2.02////^S X=IVMDATE;2.03////^S X=IVM26"
"RTN","EASPREC7",112,0)
 . . D ^DIE K DA,DIE,DR                         ;Update Current Z06 MT
"RTN","EASPREC7",113,0)
 . . I $G(IVMMTDT)="" S IVMMTDT=EASMTDT
"RTN","EASPREC7",114,0)
 . . I $$EXPIRED^EASPTRN1(DFN,$G(IVMMTDT)) S EXPIRED=1,IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASPREC7",115,0)
 . . D CLOSE^EASPTRN1(IVMIY,DFN,1,6)            ;Close Case/Converted
"RTN","EASPREC7",116,0)
 Q
"RTN","EASPREC7",117,0)
 ;
"RTN","EASPREC7",118,0)
MSH S (HLMID,MSGID)=$P(IVMSEG,HLFS,10)         ;Message control id from MSH
"RTN","EASPREC7",119,0)
 Q
"RTN","EASPREC7",120,0)
PID S DFN=$P($P(IVMSEG,HLFS,4),$E(HLECH))
"RTN","EASPREC7",121,0)
 I ('DFN!(DFN'=+DFN)!('$D(^DPT(+DFN,0)))) D  Q
"RTN","EASPREC7",122,0)
 . S HLERR="Invalid DFN"
"RTN","EASPREC7",123,0)
 I $P(IVMSEG,HLFS,20)'=$P(^DPT(DFN,0),"^",9) D  Q
"RTN","EASPREC7",124,0)
 . S HLERR="Couldn't match IVM SSN with DHCP SSN"
"RTN","EASPREC7",125,0)
 S IVMDAP=IVMDA                  ;Save IVMDA for veteran PID segment
"RTN","EASPREC7",126,0)
 Q
"RTN","EASPREC7",127,0)
ZIC I 'DEPFLG S IVMDGLY=$P(IVMSEG,"^",3)           ;Income year
"RTN","EASPREC7",128,0)
 Q
"RTN","EASPREC7",129,0)
ZIR Q
"RTN","EASPREC7",130,0)
ZDP S DEPFLG=1
"RTN","EASPREC7",131,0)
 Q
"RTN","EASPREC7",132,0)
 ;Get primary means test
"RTN","EASPREC7",133,0)
 ; IVMMTDT - means test date
"RTN","EASPREC7",134,0)
 ; DGLY - income year
"RTN","EASPREC7",135,0)
 ; If Means Test not in DHCP, don't upload IVM Means Test 
"RTN","EASPREC7",136,0)
 ;
"RTN","EASPREC7",137,0)
ZMT N IVMIEN
"RTN","EASPREC7",138,0)
 S IVMDAZ=IVMDA,ZMTSEG=IVMSEG                      ;ZMT segment ivmda
"RTN","EASPREC7",139,0)
 ;Means test date from ZMT segment
"RTN","EASPREC7",140,0)
 S (EASMTDT,IVMMTDT)=$$FMDATE^HLFNC($P(IVMSEG,HLFS,3))
"RTN","EASPREC7",141,0)
 S DGLY=$$LYR^DGMTSCU1(IVMMTDT)           ;Get means test to be updated
"RTN","EASPREC7",142,0)
 S MTDATE=-IVMMTDT
"RTN","EASPREC7",143,0)
 S IVMIEN=""
"RTN","EASPREC7",144,0)
 S MTFND=0
"RTN","EASPREC7",145,0)
 F  S IVMIEN=$O(^DGMT(408.31,"AID",1,DFN,MTDATE,IVMIEN)) Q:MTFND!(IVMIEN="")  S IVMMTIEN=IVMIEN D
"RTN","EASPREC7",146,0)
 . ; match to MT Z06 from Edb
"RTN","EASPREC7",147,0)
 . I $P($G(^DGMT(408.31,IVMIEN,0)),"^",3)=6!($P($G(^DGMT(408.31,IVMIEN,0)),"^",3)=16) D    ;Previous Converted?
"RTN","EASPREC7",148,0)
 . . S UPMTS=IVMIEN
"RTN","EASPREC7",149,0)
 . . S MTFND=1
"RTN","EASPREC7",150,0)
 Q
"RTN","EASPREC7",151,0)
ZIV S IVMDAV=IVMDA,ZIVSEG=IVMSEG
"RTN","EASPREC7",152,0)
 S IVMIY=$P(IVMSEG,HLFS,3)
"RTN","EASPREC7",153,0)
 S IVMIY=$$FMDATE^HLFNC(IVMIY)
"RTN","EASPREC7",154,0)
 I $E(IVMIY,4,7)'="0000"!($E(IVMIY,1,3)<292) D  Q
"RTN","EASPREC7",155,0)
 . S HLERR="Invalid Income Year"
"RTN","EASPREC7",156,0)
 I "01"'[$P(IVMSEG,HLFS,9) D  Q
"RTN","EASPREC7",157,0)
 . S HLERR="Case Status not 0 or 1"
"RTN","EASPREC7",158,0)
 I $P(IVMSEG,HLFS,9)=1 S CASEFLG=1         ;Close/Convert Case Flag
"RTN","EASPREC7",159,0)
 I $P(IVMSEG,HLFS,9)=0 S CASEFLG=0         ;Delete/Not Converted MT Flag
"RTN","EASPREC7",160,0)
BHS Q
"RTN","EASPREC7",161,0)
BTS Q
"RTN","EASPREC7",162,0)
 ;
"RTN","EASPREC7",163,0)
GET ; get HL7 segment from ^TMP
"RTN","EASPREC7",164,0)
 ;S IVMDA=$O(^TMP($J,IVMRTN,+IVMDA))
"RTN","EASPREC7",165,0)
 S IVMSEG=$G(^TMP($J,IVMRTN,+IVMDA,0))
"RTN","EASPREC7",166,0)
 S IVMSEG1=$E(IVMSEG,1,3)
"RTN","EASPREC7",167,0)
 S $E(SEGSTR,IVMDA)=1
"RTN","EASPREC7",168,0)
 Q
"RTN","EASPREC7",169,0)
 ;
"RTN","EASPREC7",170,0)
 ;Parse ZMT Segment for MT Data
"RTN","EASPREC7",171,0)
 ;
"RTN","EASPREC7",172,0)
PARSEZMT(ZSEG) S IVM2=$$FMDATE^HLFNC($P(ZMTSEG,"^",3))  ;Means Test Date
"RTN","EASPREC7",173,0)
 S IVM3=$O(^DG(408.32,"C",$P(ZMTSEG,"^",4),""))   ;Means Test Status 
"RTN","EASPREC7",174,0)
 S IVM7=$S($P(ZMTSEG,"^",8)="Y":1,1:0)            ;Agrees To Deductible
"RTN","EASPREC7",175,0)
 S IVM8=$P(ZMTSEG,"^",9)                          ;Threshold A
"RTN","EASPREC7",176,0)
 S IVM10=$$FMDATE^HLFNC($P(ZMTSEG,"^",11))        ;Date/Time Completed
"RTN","EASPREC7",177,0)
 S IVM12=$P(ZMTSEG,"^",13)                        ;Number of Dependents
"RTN","EASPREC7",178,0)
 S IVM17=$P(ZMTSEG,"^",18)                        ;Type of Test
"RTN","EASPREC7",179,0)
 S IVM18=$P(ZMTSEG,"^",19)                        ;Source of Test
"RTN","EASPREC7",180,0)
 S IVM20=$$FMDATE^HLFNC($P(ZMTSEG,"^",21))        ;IVM Verified MT
"RTN","EASPREC7",181,0)
 S IVM25=$$FMDATE^HLFNC($P(ZMTSEG,"^",26))        ;D/T Last Changed
"RTN","EASPREC7",182,0)
 S IVM26=$O(^DG(408.32,"C",$P(ZMTSEG,"^",27),"")) ;Test Determined Status
"RTN","EASPREC7",183,0)
 Q
"RTN","EASPREC7",184,0)
 ;
"RTN","EASPREC7",185,0)
ERRBULL ; build mail message for transmission to IVM mail group notifying site
"RTN","EASPREC7",186,0)
 ; of upload error.
"RTN","EASPREC7",187,0)
 S IVMPAT=$$PT^IVMUFNC4(DFN)
"RTN","EASPREC7",188,0)
 S XMSUB="IVM - MEANS TEST UPLOAD"
"RTN","EASPREC7",189,0)
 S IVMTEXT(1)="The following error occured when an Income Verification Match"
"RTN","EASPREC7",190,0)
 S IVMTEXT(2)="verified Means Test was being uploaded for the following patient:"
"RTN","EASPREC7",191,0)
 S IVMTEXT(3)=" "
"RTN","EASPREC7",192,0)
 S IVMTEXT(4)="    NAME:     "_$P(IVMPAT,"^")
"RTN","EASPREC7",193,0)
 S IVMTEXT(5)="    ID:       "_$P(IVMPAT,"^",2)
"RTN","EASPREC7",194,0)
 S IVMTEXT(6)="    ERROR:    "_IVMTEXT(6)
"RTN","EASPREC7",195,0)
 Q
"RTN","EASPTRN1")
0^1^B10446326
"RTN","EASPTRN1",1,0)
EASPTRN1 ;ALB/EJG - GENERATE EAS SUBPROCESSES ; 04-MAY-93
"RTN","EASPTRN1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**30**; 21-OCT-94
"RTN","EASPTRN1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","EASPTRN1",4,0)
 ;
"RTN","EASPTRN1",5,0)
 ; Cloned from IVMPTRN1
"RTN","EASPTRN1",6,0)
 ;
"RTN","EASPTRN1",7,0)
DELMT ; send delete mt transaction if pt no longer meets IVM criteria
"RTN","EASPTRN1",8,0)
 ;
"RTN","EASPTRN1",9,0)
 ; Input - DFN
"RTN","EASPTRN1",10,0)
 ;         IVMMTDT - date of means test
"RTN","EASPTRN1",11,0)
 ;
"RTN","EASPTRN1",12,0)
 N I,IVMIY,X
"RTN","EASPTRN1",13,0)
 S IVMIY=$$LYR^DGMTSCU1(IVMMTDT)
"RTN","EASPTRN1",14,0)
 F I=1:1:5,8:1:14 S $P(X,HLFS,I)=HLQ
"RTN","EASPTRN1",15,0)
 S ^TMP("HLS",$J,HLSDT,IVMCT)="ZMT"_HLFS_X
"RTN","EASPTRN1",16,0)
 D CLOSE(IVMIY,DFN,2,3) ; set flag to stop future transmissions
"RTN","EASPTRN1",17,0)
 Q
"RTN","EASPTRN1",18,0)
 ;
"RTN","EASPTRN1",19,0)
 ;
"RTN","EASPTRN1",20,0)
CLOSE(IVMIY,DFN,IVMCS,IVMCR) ; Close IVM case record for a patient
"RTN","EASPTRN1",21,0)
 ; Input:    DFN  --  Pointer to the patient in file #2
"RTN","EASPTRN1",22,0)
 ;         IVMIY  --  Income year of the closed case
"RTN","EASPTRN1",23,0)
 ;         IVMCS  --  Closure source [1=IVM | 2=DHCP]
"RTN","EASPTRN1",24,0)
 ;         IVMCR  --  Pointer to the closure reason in file #301.93
"RTN","EASPTRN1",25,0)
 ;
"RTN","EASPTRN1",26,0)
 N DA,DIE,DR,X,Y,EVENTS,STATUS,EAEVENT
"RTN","EASPTRN1",27,0)
 I '$G(IVMIY)!'$G(DFN)!'$G(IVMCS)!'$G(IVMCR) G CLOSEQ
"RTN","EASPTRN1",28,0)
 S IVMDELMT=1 ; flag indicates deletion
"RTN","EASPTRN1",29,0)
 S DA=$O(^IVM(301.5,"APT",+DFN,+IVMIY,0))
"RTN","EASPTRN1",30,0)
 I $G(^IVM(301.5,+DA,0))']"" G CLOSEQ
"RTN","EASPTRN1",31,0)
 ;
"RTN","EASPTRN1",32,0)
 ;don't want closing a case to stop transmission of an enrollment event
"RTN","EASPTRN1",33,0)
 S STATUS=1
"RTN","EASPTRN1",34,0)
 I ($$STATUS^IVMPLOG(+DA,.EVENTS)=0),EVENTS("ENROLL")=1 S STATUS=0
"RTN","EASPTRN1",35,0)
 ;
"RTN","EASPTRN1",36,0)
 ;If previous years event make sure enrollment event does not get 
"RTN","EASPTRN1",37,0)
 ;  updated
"RTN","EASPTRN1",38,0)
 ;
"RTN","EASPTRN1",39,0)
 S EAEVENT=1
"RTN","EASPTRN1",40,0)
 I $G(EXPIRED)=1 S EAEVENT=2,STATUS=1
"RTN","EASPTRN1",41,0)
 I $G(EXPIRED)=0 S EAEVENT=1,STATUS=0
"RTN","EASPTRN1",42,0)
 D NOW^%DTC S DR=".03////"_STATUS_";.04////1;1.01////"_IVMCR_";1.02////"_IVMCS_";1.03////"_%_";30.01////2;30.02////2;30.03////"_$G(EAEVENT)
"RTN","EASPTRN1",43,0)
 S DIE="^IVM(301.5," D ^DIE
"RTN","EASPTRN1",44,0)
CLOSEQ Q
"RTN","EASPTRN1",45,0)
 ;
"RTN","EASPTRN1",46,0)
 ;
"RTN","EASPTRN1",47,0)
PSEUDO ; strip P from pseudo SSNs before transmitting to IVM
"RTN","EASPTRN1",48,0)
 ;
"RTN","EASPTRN1",49,0)
 N X
"RTN","EASPTRN1",50,0)
 S X=IVMPID_$G(IVMPID(1))
"RTN","EASPTRN1",51,0)
 S $P(X,HLFS,20)=$E($P(X,HLFS,20),1,9) ; remove P
"RTN","EASPTRN1",52,0)
 K IVMPID S IVMPID=$E(X,1,245)
"RTN","EASPTRN1",53,0)
 I $L(X)>245 S IVMPID(1)=$E(X,246,999)
"RTN","EASPTRN1",54,0)
 Q
"RTN","EASPTRN1",55,0)
 ;
"RTN","EASPTRN1",56,0)
 ;Check if EDB Z06 in Annual Means Test file #408.31
"RTN","EASPTRN1",57,0)
 ; 'Z06 MT via Edb' will be stored in Comments if EDB Z06 Means Test
"RTN","EASPTRN1",58,0)
 ;
"RTN","EASPTRN1",59,0)
Z06MT(IVMMTIEN,Z06COM) N FLAG,LINE,COMMENT
"RTN","EASPTRN1",60,0)
 I '$G(IVMMTIEN) Q 0
"RTN","EASPTRN1",61,0)
 I $G(ZO6COM)="" S Z06COM="Z06 MT via Edb"
"RTN","EASPTRN1",62,0)
 S (FLAG,LINE)=0
"RTN","EASPTRN1",63,0)
 F  S LINE=$O(^DGMT(408.31,IVMMTIEN,"C",LINE)) Q:'LINE!(FLAG)  D
"RTN","EASPTRN1",64,0)
 . S COMMENT=$G(^DGMT(408.31,IVMMTIEN,"C",LINE,0))
"RTN","EASPTRN1",65,0)
 . I COMMENT=Z06COM S FLAG=1 Q
"RTN","EASPTRN1",66,0)
 Q FLAG
"RTN","EASPTRN1",67,0)
 ;
"RTN","EASPTRN1",68,0)
 ;Retrieve Means Test information from incoming HL7 message.  
"RTN","EASPTRN1",69,0)
 ;
"RTN","EASPTRN1",70,0)
CHECKMT(DFN) N SOURCE,IVMLAST,IVMMTDT,IVMMTIEN
"RTN","EASPTRN1",71,0)
 I IVMTYPE'=1 Q    ;Only want MT = 1
"RTN","EASPTRN1",72,0)
 S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,22)
"RTN","EASPTRN1",73,0)
 S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2))
"RTN","EASPTRN1",74,0)
 S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,1)
"RTN","EASPTRN1",75,0)
 S IVMMTIEN=+IVMLAST
"RTN","EASPTRN1",76,0)
 Q $$Z06MT(IVMMTIEN)
"RTN","EASPTRN1",77,0)
 ;
"RTN","EASPTRN1",78,0)
 ;Based upon DFN and MT Date find primary MT
"RTN","EASPTRN1",79,0)
 ;
"RTN","EASPTRN1",80,0)
VERZ06(DFN) N CMT,CMTDATE,MTIEN,PRIM
"RTN","EASPTRN1",81,0)
 S CMT=$$LST^DGMTU(DFN)
"RTN","EASPTRN1",82,0)
 S MTIEN=+CMT,CMTDATE=$P(CMT,"^",2)
"RTN","EASPTRN1",83,0)
 I 'MTIEN Q 0                             ;No Means Test found
"RTN","EASPTRN1",84,0)
 S PRIM=$G(^DGMT(408.31,MTIEN,"PRIM"))
"RTN","EASPTRN1",85,0)
 I PRIM,$$Z06MT(MTIEN) Q 1
"RTN","EASPTRN1",86,0)
 Q 0
"RTN","EASPTRN1",87,0)
 ;
"RTN","EASPTRN1",88,0)
 ;Check for expired MT
"RTN","EASPTRN1",89,0)
 ;
"RTN","EASPTRN1",90,0)
EXPIRED(DFN,DGMTDT) N CMT,PMT
"RTN","EASPTRN1",91,0)
 S PMT=$$LST^DGMTU(DFN,DGMTDT)       ;Retrieve MT associated w/MT Test
"RTN","EASPTRN1",92,0)
 I PMT="" Q 0
"RTN","EASPTRN1",93,0)
 S CMT=$$LST^DGMTU(DFN)              ;Retrieve Current MT
"RTN","EASPTRN1",94,0)
 I $P(PMT,"^",2)<$P(CMT,"^",2) Q 1   ;Previous Year - Expired MT
"RTN","EASPTRN1",95,0)
 Q 0
"RTN","EASUM1")
0^3^B24237839
"RTN","EASUM1",1,0)
EASUM1 ;ALB/SEK - MEANS TEST UPLOAD DRIVER ; 3/6/01 5:13pm
"RTN","EASUM1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**23,30**;21-OCT-94
"RTN","EASUM1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","EASUM1",4,0)
 ;
"RTN","EASUM1",5,0)
EN ; this routine will call routines to upload means tests sent by the IVM
"RTN","EASUM1",6,0)
 ; Center in HL7 segments.  the required sequence of these segments were
"RTN","EASUM1",7,0)
 ; validated in the calling routine IVMPREC7.  this routine will call
"RTN","EASUM1",8,0)
 ; IVMUCHK to ensure that the data is consistent with DHCP means test
"RTN","EASUM1",9,0)
 ; file and software requirements.
"RTN","EASUM1",10,0)
 ;
"RTN","EASUM1",11,0)
 ; entries will be added/modified in the following means test and
"RTN","EASUM1",12,0)
 ; patient files:
"RTN","EASUM1",13,0)
 ;
"RTN","EASUM1",14,0)
 ;       PATIENT RELATION (#408.12)
"RTN","EASUM1",15,0)
 ;       INCOME PERSON (#408.13)
"RTN","EASUM1",16,0)
 ;       INDIVIDUAL ANNUAL INCOME (#408.21)
"RTN","EASUM1",17,0)
 ;       INCOME RELATION (#408.22)
"RTN","EASUM1",18,0)
 ;       ANNUAL MEANS TEST (#408.31)
"RTN","EASUM1",19,0)
 ;       MEANS TEST CHANGES (#408.41)
"RTN","EASUM1",20,0)
 ;       PATIENT (#2)
"RTN","EASUM1",21,0)
 ;
"RTN","EASUM1",22,0)
 ; current year is date of means test.
"RTN","EASUM1",23,0)
 ; income year is calendar year before date of means test.
"RTN","EASUM1",24,0)
 ; meant test status is based on income year data.
"RTN","EASUM1",25,0)
 ;
"RTN","EASUM1",26,0)
 ; IVMDAP is pointer to the PID HL7 segment in file #772
"RTN","EASUM1",27,0)
 ; IVMDAZ is pointer to the ZMT segment
"RTN","EASUM1",28,0)
 ;
"RTN","EASUM1",29,0)
 S:'$D(DUZ) DUZ=.5 ; if no DUZ set to postmaster
"RTN","EASUM1",30,0)
 ;
"RTN","EASUM1",31,0)
 ; get copay exemption status (IVMCEB) and means test status (IVMMTB)
"RTN","EASUM1",32,0)
 ; before upload
"RTN","EASUM1",33,0)
 S IVMCEB=$P($$RXST^IBARXEU(DFN),"^",2)
"RTN","EASUM1",34,0)
 S IVMMTB=$P($$LST^DGMTU(DFN),"^",3)
"RTN","EASUM1",35,0)
 ;
"RTN","EASUM1",36,0)
 ; subscript of array IVMAR is ien of 408.12 transmitted by IVM Center
"RTN","EASUM1",37,0)
 ; or created by upload.
"RTN","EASUM1",38,0)
 ;K IVMAR
"RTN","EASUM1",39,0)
 ;S IVMX=$$EN^IVMUCHK() I IVMX]"" S HLERR=IVMX K IVMX Q  ; error found in MT data
"RTN","EASUM1",40,0)
 ;
"RTN","EASUM1",41,0)
ADD ; add new annual means test file (408.31) stub
"RTN","EASUM1",42,0)
 ; input   DGMTDT (.01) dt of test
"RTN","EASUM1",43,0)
 ;         DFN (.02) Patient IEN
"RTN","EASUM1",44,0)
 ;         DGMTYPT (.19) type of test (1-means test)
"RTN","EASUM1",45,0)
 ; output  DGMTI annual means test IEN
"RTN","EASUM1",46,0)
 S DGMTDT=IVMMTDT,DGMTYPT=1
"RTN","EASUM1",47,0)
 D ADD^DGMTA
"RTN","EASUM1",48,0)
 I $G(IVMMTIEN)="" S IVMMTIEN=+Y    ;Set IEN if only MT on file is Z06 MT
"RTN","EASUM1",49,0)
 ;
"RTN","EASUM1",50,0)
 ;Create new Z06 IVM Means Test
"RTN","EASUM1",51,0)
 ; Make STUB MT primary, add comment that it was created by Edb
"RTN","EASUM1",52,0)
 S DGCOM="Z06 MT via Edb"
"RTN","EASUM1",53,0)
 D PARSEZMT^EASPREC7(ZMTSEG)              ;Parse ZMT Segment for MT Data
"RTN","EASUM1",54,0)
 I $$EXPIRED^EASPTRN1(DFN,$G(IVM2)) S DGENUPLD="ENROLLMENT/ELIGIBILITY UPLOAD IN PROGRESS"    ;If MT expired then do not update Enrollment record
"RTN","EASUM1",55,0)
 S DA=DGMTI,DIE="^DGMT(408.31,"
"RTN","EASUM1",56,0)
 S DR=".03////^S X=IVM3;.12////^S X=IVM8;.07////^S X=IVM10;.09////^S X=IVM25;.11////^S X=IVM7;.18////^S X=IVM12;.23////^S X=IVM18;.25////^S X=IVM20;2////1;2.02////^S X=IVMDATE;2.03////^S X=IVM26;50///^S X=DGCOM"
"RTN","EASUM1",57,0)
 D ^DIE K DA,DIE,DR
"RTN","EASUM1",58,0)
 ;
"RTN","EASUM1",59,0)
 ;Variables needed for Bulletins
"RTN","EASUM1",60,0)
 ;
"RTN","EASUM1",61,0)
 I '$D(DGCAT) S DGCAT="C"
"RTN","EASUM1",62,0)
 I '$D(IVM5) S IVM5=""
"RTN","EASUM1",63,0)
 ;
"RTN","EASUM1",64,0)
 D GETREL^DGMTU11(DFN,"V",DGLY,IVMMTIEN)
"RTN","EASUM1",65,0)
 I EASZ06 S (IVMMT31,DGMTP)=$G(^DGMT(408.31,IVMMTIEN,0)) ;dgmtp is event driver variable
"RTN","EASUM1",66,0)
 D COMPLETE
"RTN","EASUM1",67,0)
 Q
"RTN","EASUM1",68,0)
 ;
"RTN","EASUM1",69,0)
 ; add dependent(s) to income person file (408.13)
"RTN","EASUM1",70,0)
 ;
"RTN","EASUM1",71,0)
 ; add spouse if not in 408.13
"RTN","EASUM1",72,0)
 S IVMSPCHV="S" ; spouse/child/vet indicator
"RTN","EASUM1",73,0)
 S IVMDA1=IVMDAP+3 D GET ; spouse ZDP segment
"RTN","EASUM1",74,0)
 D INPIEN^IVMUM2
"RTN","EASUM1",75,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",76,0)
 ;
"RTN","EASUM1",77,0)
 I IVMFLG5 G ADDCHILD ; entry not added - goto add children
"RTN","EASUM1",78,0)
 ;
"RTN","EASUM1",79,0)
 ; add entry to patient relation file (408.12)
"RTN","EASUM1",80,0)
 D EN^IVMUM3
"RTN","EASUM1",81,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",82,0)
 ;
"RTN","EASUM1",83,0)
ADDS21 ; add spouse entry to individual annual income file (408.21)
"RTN","EASUM1",84,0)
 S IVMDA1=IVMDAP+4 D GET ; spouse ZIC segment
"RTN","EASUM1",85,0)
 D EN^IVMUM4
"RTN","EASUM1",86,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",87,0)
 ;
"RTN","EASUM1",88,0)
 ; add spouse entry to income relation file (408.22)
"RTN","EASUM1",89,0)
 S IVMDA1=IVMDAP+5 D GET ; spouse ZIR segment
"RTN","EASUM1",90,0)
 D EN^IVMUM5
"RTN","EASUM1",91,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",92,0)
 ;
"RTN","EASUM1",93,0)
ADDCHILD ; add children if not in 408.13
"RTN","EASUM1",94,0)
 S IVMSPCHV="C" ; spouse/child/vet indicator
"RTN","EASUM1",95,0)
 I 'IVMFLGC G ADDV21 ; no dependent children 
"RTN","EASUM1",96,0)
 S IVMCTR2=5
"RTN","EASUM1",97,0)
 F IVMCTR3=1:1:IVMFLGC D  Q:$D(IVMFERR)
"RTN","EASUM1",98,0)
 .S IVMCTR2=IVMCTR2+1
"RTN","EASUM1",99,0)
 .S IVMDA1=IVMDAP+IVMCTR2 D GET ; child ZDP segment
"RTN","EASUM1",100,0)
 .D INPIEN^IVMUM2
"RTN","EASUM1",101,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",102,0)
 .;
"RTN","EASUM1",103,0)
 .; add child entry to patient relation file (408.12)
"RTN","EASUM1",104,0)
 .D EN^IVMUM3
"RTN","EASUM1",105,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",106,0)
 .;
"RTN","EASUM1",107,0)
ADDC21 .; add child entry to individual annual income file (408.21)
"RTN","EASUM1",108,0)
 .S IVMCTR2=IVMCTR2+1
"RTN","EASUM1",109,0)
 .S IVMDA1=IVMDAP+IVMCTR2 D GET ; child ZIC segment
"RTN","EASUM1",110,0)
 .D EN^IVMUM4
"RTN","EASUM1",111,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",112,0)
 .;
"RTN","EASUM1",113,0)
 .; add entry to income relation file (408.22)
"RTN","EASUM1",114,0)
 .S IVMCTR2=IVMCTR2+1
"RTN","EASUM1",115,0)
 .S IVMDA1=IVMDAP+IVMCTR2 D GET ; child ZIR segment
"RTN","EASUM1",116,0)
 .D EN^IVMUM5
"RTN","EASUM1",117,0)
 .Q:$D(IVMFERR)
"RTN","EASUM1",118,0)
 .Q
"RTN","EASUM1",119,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",120,0)
 ;
"RTN","EASUM1",121,0)
ADDV21 ; add vet entry to individual annual income file (408.21)
"RTN","EASUM1",122,0)
 ; get vet patient relation ien
"RTN","EASUM1",123,0)
 S DGPRI=+$G(DGREL("V"))
"RTN","EASUM1",124,0)
 S IVMDA1=IVMDAP+1 D GET ; vet ZIC segment
"RTN","EASUM1",125,0)
 S IVMSPCHV="V" ; spouse/child/vet indicator
"RTN","EASUM1",126,0)
 D EN^IVMUM4
"RTN","EASUM1",127,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",128,0)
 S DGVINI=DGINI ; vet individual annual income ien
"RTN","EASUM1",129,0)
 ;
"RTN","EASUM1",130,0)
 ; add vet entry to income relation file (408.22)
"RTN","EASUM1",131,0)
 S IVMDA1=IVMDAP+2 D GET ; vet ZIR segment
"RTN","EASUM1",132,0)
 D EN^IVMUM5
"RTN","EASUM1",133,0)
 Q:$D(IVMFERR)
"RTN","EASUM1",134,0)
 S DGVIRI=DGIRI ; vet income relation ien
"RTN","EASUM1",135,0)
 ;
"RTN","EASUM1",136,0)
COMPLETE ; complete means test
"RTN","EASUM1",137,0)
 ;
"RTN","EASUM1",138,0)
 ;D EN^IVMUM6
"RTN","EASUM1",139,0)
 ;Call Means Test Event Driver to complete processing
"RTN","EASUM1",140,0)
 ;
"RTN","EASUM1",141,0)
 S DGMTACT="UPL"
"RTN","EASUM1",142,0)
 D AFTER^DGMTEVT
"RTN","EASUM1",143,0)
 S DGMTINF=1                                    ;Non-Interactive Flag
"RTN","EASUM1",144,0)
 D EN^DGMTEVT
"RTN","EASUM1",145,0)
 D MTBULL^IVMUM6,MAIL^IVMUFNC()                 ;Build Mail Message
"RTN","EASUM1",146,0)
 ;
"RTN","EASUM1",147,0)
 ; cleanup
"RTN","EASUM1",148,0)
 K DGINI,DGIRI,DGLY,DGMTDT,DGMTYPT,DGPRI,DGREL,DGVINI,DGVIRI,DGENUPLD
"RTN","EASUM1",149,0)
 K IVMAR,IVMCEB,IVMCTR2,IVMCTR3,IVMDA1,IVMDAP,IVMFERR
"RTN","EASUM1",150,0)
 K IVMFLG2,IVMFLG5,IVMFLGC,IVMMTB,IVMPRN
"RTN","EASUM1",151,0)
 K IVMRELN,IVMRELO,IVMSEG,IVMSPCHV,IVMX
"RTN","EASUM1",152,0)
 Q
"RTN","EASUM1",153,0)
 ; 
"RTN","EASUM1",154,0)
GET ; get HL7 segment from ^HL
"RTN","EASUM1",155,0)
 S IVMSEG=$P($G(^TMP($J,IVMRTN,IVMDA1,0)),"^",2,999)
"RTN","EASUM1",156,0)
 Q
"VER")
8.0^22
**END**
**END**
