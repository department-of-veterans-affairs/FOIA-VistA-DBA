Released IB*2*366 SEQ #339
Extracted from mail message
**KIDS**:IB*2.0*366^

**INSTALL NAME**
IB*2.0*366
"BLD",7106,0)
IB*2.0*366^INTEGRATED BILLING^0^3070404^y
"BLD",7106,4,0)
^9.64PA^^
"BLD",7106,6)
1^
"BLD",7106,6.3)
3
"BLD",7106,"KRN",0)
^9.67PA^8989.52^19
"BLD",7106,"KRN",.4,0)
.4
"BLD",7106,"KRN",.401,0)
.401
"BLD",7106,"KRN",.402,0)
.402
"BLD",7106,"KRN",.403,0)
.403
"BLD",7106,"KRN",.5,0)
.5
"BLD",7106,"KRN",.84,0)
.84
"BLD",7106,"KRN",3.6,0)
3.6
"BLD",7106,"KRN",3.8,0)
3.8
"BLD",7106,"KRN",9.2,0)
9.2
"BLD",7106,"KRN",9.8,0)
9.8
"BLD",7106,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",7106,"KRN",9.8,"NM",1,0)
IBSDU^^0^B25885281
"BLD",7106,"KRN",9.8,"NM",2,0)
IBCEMMR^^0^B48738467
"BLD",7106,"KRN",9.8,"NM",3,0)
IBACKIN^^1^
"BLD",7106,"KRN",9.8,"NM","B","IBACKIN",3)

"BLD",7106,"KRN",9.8,"NM","B","IBCEMMR",2)

"BLD",7106,"KRN",9.8,"NM","B","IBSDU",1)

"BLD",7106,"KRN",19,0)
19
"BLD",7106,"KRN",19.1,0)
19.1
"BLD",7106,"KRN",101,0)
101
"BLD",7106,"KRN",409.61,0)
409.61
"BLD",7106,"KRN",771,0)
771
"BLD",7106,"KRN",870,0)
870
"BLD",7106,"KRN",8989.51,0)
8989.51
"BLD",7106,"KRN",8989.52,0)
8989.52
"BLD",7106,"KRN",8994,0)
8994
"BLD",7106,"KRN","B",.4,.4)

"BLD",7106,"KRN","B",.401,.401)

"BLD",7106,"KRN","B",.402,.402)

"BLD",7106,"KRN","B",.403,.403)

"BLD",7106,"KRN","B",.5,.5)

"BLD",7106,"KRN","B",.84,.84)

"BLD",7106,"KRN","B",3.6,3.6)

"BLD",7106,"KRN","B",3.8,3.8)

"BLD",7106,"KRN","B",9.2,9.2)

"BLD",7106,"KRN","B",9.8,9.8)

"BLD",7106,"KRN","B",19,19)

"BLD",7106,"KRN","B",19.1,19.1)

"BLD",7106,"KRN","B",101,101)

"BLD",7106,"KRN","B",409.61,409.61)

"BLD",7106,"KRN","B",771,771)

"BLD",7106,"KRN","B",870,870)

"BLD",7106,"KRN","B",8989.51,8989.51)

"BLD",7106,"KRN","B",8989.52,8989.52)

"BLD",7106,"KRN","B",8994,8994)

"BLD",7106,"QUES",0)
^9.62^^
"BLD",7106,"REQB",0)
^9.611^4^3
"BLD",7106,"REQB",2,0)
IB*2.0*155^2
"BLD",7106,"REQB",3,0)
IB*2.0*249^2
"BLD",7106,"REQB",4,0)
SD*5.3*508^2
"BLD",7106,"REQB","B","IB*2.0*155",2)

"BLD",7106,"REQB","B","IB*2.0*249",3)

"BLD",7106,"REQB","B","SD*5.3*508",4)

"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
366^3070404^2438
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","IBACKIN")
1^3^^B16970077
"RTN","IBCEMMR")
0^2^B48738467^B43402718
"RTN","IBCEMMR",1,0)
IBCEMMR ;ALB/ESG - IB MRA Report of Patients w/o Medicare WNR ;20-NOV-2003
"RTN","IBCEMMR",2,0)
 ;;2.0;INTEGRATED BILLING;**155,366**;21-MAR-94;Build 3
"RTN","IBCEMMR",3,0)
 ;
"RTN","IBCEMMR",4,0)
 ; Find patients with Medicare supplemental insurance or Medigap
"RTN","IBCEMMR",5,0)
 ; insurance (etc.) but who do not have MEDICARE (WNR) on file as
"RTN","IBCEMMR",6,0)
 ; one of their insurances.
"RTN","IBCEMMR",7,0)
 ;
"RTN","IBCEMMR",8,0)
 Q
"RTN","IBCEMMR",9,0)
 ;
"RTN","IBCEMMR",10,0)
EN ; Entry Point
"RTN","IBCEMMR",11,0)
 NEW IBMSORT
"RTN","IBCEMMR",12,0)
 D SORT I 'IBMSORT G EX
"RTN","IBCEMMR",13,0)
 D DEVICE
"RTN","IBCEMMR",14,0)
EX ; Exit Point
"RTN","IBCEMMR",15,0)
 Q
"RTN","IBCEMMR",16,0)
 ;
"RTN","IBCEMMR",17,0)
SORT ; Ask user how to sort the report
"RTN","IBCEMMR",18,0)
 NEW CH,DIR,X,Y,DIRUT,DIROUT
"RTN","IBCEMMR",19,0)
 W @IOF,!?20,"Patients Without MEDICARE (WNR) Insurance"
"RTN","IBCEMMR",20,0)
 W !!?2,"This option finds patients who do not have active MEDICARE (WNR) insurance,"
"RTN","IBCEMMR",21,0)
 W !?2,"but who do have active insurance with a Plan Type of Medigap, Carve-Out, or"
"RTN","IBCEMMR",22,0)
 W !?2,"Medicare Secondary.  In these cases, MEDICARE (WNR) should be primary."
"RTN","IBCEMMR",23,0)
 W !!?2,"The insurances for all living patients will be analyzed, but"
"RTN","IBCEMMR",24,0)
 W !?2,"you can determine how this information will be sorted."
"RTN","IBCEMMR",25,0)
 S IBMSORT=""
"RTN","IBCEMMR",26,0)
 W !
"RTN","IBCEMMR",27,0)
 S CH="1:Patient Name;2:SSN - Last 4 Digits;3:Insurance Company;"
"RTN","IBCEMMR",28,0)
 S CH=CH_"4:Type of Plan;5:Appointment Date"
"RTN","IBCEMMR",29,0)
 S DIR(0)="SO^"_CH
"RTN","IBCEMMR",30,0)
 S DIR("A")="Please enter the Sort Criteria"
"RTN","IBCEMMR",31,0)
 S DIR("B")="Patient Name"
"RTN","IBCEMMR",32,0)
 D ^DIR K DIR
"RTN","IBCEMMR",33,0)
 I 'Y G SORTX
"RTN","IBCEMMR",34,0)
 S IBMSORT=Y
"RTN","IBCEMMR",35,0)
SORTX ;
"RTN","IBCEMMR",36,0)
 Q
"RTN","IBCEMMR",37,0)
 ;
"RTN","IBCEMMR",38,0)
COMPILE ; Entry point for both background and foreground task execution
"RTN","IBCEMMR",39,0)
 ;
"RTN","IBCEMMR",40,0)
 NEW RTN,DFN,CNT,MS,DPT,PTNM,SSN,APPT,APDTE,A
"RTN","IBCEMMR",41,0)
 NEW INS,GRP,PLN,INSNM,PLNTYP,SORT,X,IBNEXT
"RTN","IBCEMMR",42,0)
 S RTN="IBCEMMR"
"RTN","IBCEMMR",43,0)
 K ^TMP($J,RTN),^("IBCEPT"),^("IBSDNEXT"),^("IBDPT"),^("IBLAST")
"RTN","IBCEMMR",44,0)
 S DFN=" ",CNT=0
"RTN","IBCEMMR",45,0)
 F  S DFN=$O(^DPT(DFN),-1) Q:'DFN!($G(ZTSTOP))  D
"RTN","IBCEMMR",46,0)
 . S CNT=CNT+1
"RTN","IBCEMMR",47,0)
 . I '$D(ZTQUEUED),CNT#500=0 U IO(0) W "." U IO
"RTN","IBCEMMR",48,0)
 . I $D(ZTQUEUED),CNT#500=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCEMMR",49,0)
 . I $P($G(^DPT(DFN,.35)),U,1) Q           ; date of death
"RTN","IBCEMMR",50,0)
 . I '$$PTINS(DFN,.MS) Q                   ; eligible for report
"RTN","IBCEMMR",51,0)
 . S ^TMP($J,"IBNEXT",DFN)=""
"RTN","IBCEMMR",52,0)
 . S ^TMP($J,"IBLAST",DFN)=""
"RTN","IBCEMMR",53,0)
 . S ^TMP($J,"IBDPT",DFN)=""
"RTN","IBCEMMR",54,0)
 ;
"RTN","IBCEMMR",55,0)
 S X=$$NEXT^IBSDU("^TMP($J,""IBNEXT"",")
"RTN","IBCEMMR",56,0)
 S X=$$LAST^IBSDU("^TMP($J,""IBLAST"",")
"RTN","IBCEMMR",57,0)
 ;
"RTN","IBCEMMR",58,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"IBDPT",DFN)) Q:'DFN!($G(ZTSTOP))  D
"RTN","IBCEMMR",59,0)
 . I '$D(ZTQUEUED),CNT#500=0 U IO(0) W "." U IO
"RTN","IBCEMMR",60,0)
 . I $D(ZTQUEUED),CNT#500=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCEMMR",61,0)
 . I '$$PTINS(DFN,.MS)  ; get MS data
"RTN","IBCEMMR",62,0)
 . S DPT=$G(^DPT(DFN,0))
"RTN","IBCEMMR",63,0)
 . S PTNM=$P(DPT,U,1)
"RTN","IBCEMMR",64,0)
 . I PTNM="" S PTNM="~UNKNOWN"
"RTN","IBCEMMR",65,0)
 . S SSN=$E($P(DPT,U,9),6,99)_" "
"RTN","IBCEMMR",66,0)
 . I SSN="" S SSN="~UNK"
"RTN","IBCEMMR",67,0)
 . S (APPT,IBNEXT)=$G(^TMP($J,"IBNEXT",DFN),"UNKNOWN")
"RTN","IBCEMMR",68,0)
 . I 'APPT S APPT=$G(^TMP($J,"IBLAST",DFN),"UNKNOWN")
"RTN","IBCEMMR",69,0)
 . S APDTE=$S(APPT:$$FMTE^XLFDT($P(APPT,"."),"2Z"),$L(IBNEXT):IBNEXT,$L(APPT):APPT,1:"N/A")
"RTN","IBCEMMR",70,0)
 . S APPT=+APPT
"RTN","IBCEMMR",71,0)
 . S A=0 F  S A=$O(MS(A)) Q:'A  D
"RTN","IBCEMMR",72,0)
 .. S INS=+$P(MS(A),U,1),GRP=+$P(MS(A),U,2)
"RTN","IBCEMMR",73,0)
 .. S PLN=+$P(MS(A),U,3)
"RTN","IBCEMMR",74,0)
 .. S INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCEMMR",75,0)
 .. I INSNM="" S INSNM="~UNKNOWN"
"RTN","IBCEMMR",76,0)
 .. S PLNTYP=$P($G(^IBE(355.1,PLN,0)),U,1)
"RTN","IBCEMMR",77,0)
 .. I PLNTYP="" S PLNTYP="~UNKNOWN"
"RTN","IBCEMMR",78,0)
 .. S SORT=$S(IBMSORT=1:PTNM,IBMSORT=2:SSN,IBMSORT=3:INSNM,IBMSORT=4:PLNTYP,IBMSORT=5:-APPT,1:PTNM)
"RTN","IBCEMMR",79,0)
 .. S ^TMP($J,RTN,SORT,PTNM,DFN,A)=SSN_U_INSNM_U_PLNTYP_U_APDTE
"RTN","IBCEMMR",80,0)
 .. Q
"RTN","IBCEMMR",81,0)
 . Q
"RTN","IBCEMMR",82,0)
 ;
"RTN","IBCEMMR",83,0)
 I '$G(ZTSTOP) D PRINT             ; print the report
"RTN","IBCEMMR",84,0)
 D ^%ZISC                          ; close the device
"RTN","IBCEMMR",85,0)
 K ^TMP($J,RTN),^("IBCEPT"),^("IBSDNEXT"),^("IBDPT"),^("IBLAST") ;cleanup
"RTN","IBCEMMR",86,0)
 I $D(ZTQUEUED) S ZTREQ="@"        ; purge the task record
"RTN","IBCEMMR",87,0)
COMPX ;
"RTN","IBCEMMR",88,0)
 Q
"RTN","IBCEMMR",89,0)
 ;
"RTN","IBCEMMR",90,0)
PRINT ; print the report to the device specified
"RTN","IBCEMMR",91,0)
 N MAXCNT,CRT,PAGECNT,STOP,SORT,PTNM,DFN,A,DATA,DIR,X,Y,DIRUT,DIROUT,IBX
"RTN","IBCEMMR",92,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCEMMR",93,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCEMMR",94,0)
 S PAGECNT=0,STOP=0
"RTN","IBCEMMR",95,0)
 ;
"RTN","IBCEMMR",96,0)
 ; Check for no data
"RTN","IBCEMMR",97,0)
 I '$D(^TMP($J,RTN)) D HEADER W !!?5,"No Data Found"
"RTN","IBCEMMR",98,0)
 ;
"RTN","IBCEMMR",99,0)
 S SORT=""
"RTN","IBCEMMR",100,0)
 F  S SORT=$O(^TMP($J,RTN,SORT)) Q:SORT=""  D  Q:STOP
"RTN","IBCEMMR",101,0)
 . S PTNM=""
"RTN","IBCEMMR",102,0)
 . F  S PTNM=$O(^TMP($J,RTN,SORT,PTNM)) Q:PTNM=""  D  Q:STOP
"RTN","IBCEMMR",103,0)
 .. S DFN=0
"RTN","IBCEMMR",104,0)
 .. F  S DFN=$O(^TMP($J,RTN,SORT,PTNM,DFN)) Q:'DFN  D  Q:STOP
"RTN","IBCEMMR",105,0)
 ... S A=0
"RTN","IBCEMMR",106,0)
 ... F  S A=$O(^TMP($J,RTN,SORT,PTNM,DFN,A)) Q:'A  D  Q:STOP
"RTN","IBCEMMR",107,0)
 .... S DATA=$G(^TMP($J,RTN,SORT,PTNM,DFN,A))
"RTN","IBCEMMR",108,0)
 .... I $Y+1>MAXCNT!'PAGECNT D HEADER Q:STOP
"RTN","IBCEMMR",109,0)
 .... W !,$E(PTNM,1,20),?23,$P(DATA,U,1),?30,$E($P(DATA,U,2),1,20)
"RTN","IBCEMMR",110,0)
 .... W ?53,$E($P(DATA,U,3),1,13),?69,$P(DATA,U,4)
"RTN","IBCEMMR",111,0)
 .... Q
"RTN","IBCEMMR",112,0)
 ... Q
"RTN","IBCEMMR",113,0)
 .. Q
"RTN","IBCEMMR",114,0)
 . Q
"RTN","IBCEMMR",115,0)
 ;
"RTN","IBCEMMR",116,0)
 I STOP G PRINTX
"RTN","IBCEMMR",117,0)
 W !!?30,"*** End of Report ***"
"RTN","IBCEMMR",118,0)
 I CRT,'$D(ZTQUEUED) S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEMMR",119,0)
PRINTX ;
"RTN","IBCEMMR",120,0)
 Q
"RTN","IBCEMMR",121,0)
 ;
"RTN","IBCEMMR",122,0)
HEADER ; page break and report header information
"RTN","IBCEMMR",123,0)
 NEW LIN,HDR,TAB
"RTN","IBCEMMR",124,0)
 S STOP=0
"RTN","IBCEMMR",125,0)
 ; ask screen user if they want to continue
"RTN","IBCEMMR",126,0)
 I CRT,PAGECNT>0,'$D(ZTQUEUED) D  I STOP G HEADERX
"RTN","IBCEMMR",127,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCEMMR",128,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEMMR",129,0)
 . I 'Y S STOP=1 Q
"RTN","IBCEMMR",130,0)
 . Q
"RTN","IBCEMMR",131,0)
 ;
"RTN","IBCEMMR",132,0)
 S PAGECNT=PAGECNT+1
"RTN","IBCEMMR",133,0)
 W @IOF,!,"Patients Without MEDICARE (WNR) Insurance"
"RTN","IBCEMMR",134,0)
 S HDR="Page: "_PAGECNT
"RTN","IBCEMMR",135,0)
 S TAB=80-$L(HDR)-1
"RTN","IBCEMMR",136,0)
 W ?TAB,HDR
"RTN","IBCEMMR",137,0)
 W !,"Sorted by ",$S(IBMSORT=1:"Patient Name",IBMSORT=2:"SSN - Last 4 Digits",IBMSORT=3:"Insurance Company",IBMSORT=4:"Type of Plan",IBMSORT=5:"Appointment Date",1:"Patient Name")
"RTN","IBCEMMR",138,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,"1Z")
"RTN","IBCEMMR",139,0)
 S TAB=80-$L(HDR)-1
"RTN","IBCEMMR",140,0)
 W ?TAB,HDR
"RTN","IBCEMMR",141,0)
 W !,"Patient Name",?24,"SSN",?30,"Insurance Company"
"RTN","IBCEMMR",142,0)
 W ?53,"Type of Plan",?69,"ApptDate"
"RTN","IBCEMMR",143,0)
 W !,$$RJ^XLFSTR("",80,"=")
"RTN","IBCEMMR",144,0)
 ;
"RTN","IBCEMMR",145,0)
 ; check for stop request
"RTN","IBCEMMR",146,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() D  G HEADERX
"RTN","IBCEMMR",147,0)
 . S (ZTSTOP,STOP)=1
"RTN","IBCEMMR",148,0)
 . W !!!?5,"*** Report Halted by TaskManager Request ***"
"RTN","IBCEMMR",149,0)
 . Q
"RTN","IBCEMMR",150,0)
 ;
"RTN","IBCEMMR",151,0)
HEADERX ;
"RTN","IBCEMMR",152,0)
 Q
"RTN","IBCEMMR",153,0)
 ;
"RTN","IBCEMMR",154,0)
PTINS(DFN,MCRSUP) ; Function to determine if a patient should be 
"RTN","IBCEMMR",155,0)
 ; included in this report or not.
"RTN","IBCEMMR",156,0)
 ; Input:  DFN - patient ien
"RTN","IBCEMMR",157,0)
 ; Output:  Function value is either 0 (don't include) or 1 (include)
"RTN","IBCEMMR",158,0)
 ;    MCRSUP array pass by reference
"RTN","IBCEMMR",159,0)
 ;    MCRSUP(seq) = [1] insurance co ien pointer to file 36
"RTN","IBCEMMR",160,0)
 ;                  [2] group pointer to file 355.3
"RTN","IBCEMMR",161,0)
 ;                  [3] type of plan pointer to file 355.1
"RTN","IBCEMMR",162,0)
 ;
"RTN","IBCEMMR",163,0)
 NEW INCLUDE,INS,A,MCRWNR,MCRZ,IBINS,IBGRP,GP,TP,PLABBR
"RTN","IBCEMMR",164,0)
 S INCLUDE=0 KILL MCRSUP
"RTN","IBCEMMR",165,0)
 I '$G(DFN) G PTINSX
"RTN","IBCEMMR",166,0)
 I '$D(^DPT(DFN)) G PTINSX
"RTN","IBCEMMR",167,0)
 D ALLWNR^IBCNS1(DFN,"INS",DT)
"RTN","IBCEMMR",168,0)
 S A=0,(MCRWNR,MCRZ)=0
"RTN","IBCEMMR",169,0)
 F  S A=$O(INS(A)) Q:'A  D  Q:MCRWNR
"RTN","IBCEMMR",170,0)
 . S IBINS=$P($G(INS(A,0)),U,1)
"RTN","IBCEMMR",171,0)
 . S IBGRP=$P($G(INS(A,0)),U,18)
"RTN","IBCEMMR",172,0)
 . I $$MCRWNR^IBEFUNC(IBINS) S MCRWNR=1 Q      ; Medicare WNR on file
"RTN","IBCEMMR",173,0)
 . S GP=$G(INS(A,355.3))                       ; group/plan info
"RTN","IBCEMMR",174,0)
 . S TP=$P(GP,U,9),PLABBR=""                   ; type of plan pointer
"RTN","IBCEMMR",175,0)
 . I TP S PLABBR=$P($G(^IBE(355.1,TP,0)),U,2)  ; plan abbreviation
"RTN","IBCEMMR",176,0)
 . I '$F(".MG.MS.COUT.","."_PLABBR_".") Q      ; check plan
"RTN","IBCEMMR",177,0)
 . S MCRZ=1                                    ; Medicare other on file
"RTN","IBCEMMR",178,0)
 . S MCRSUP(A)=IBINS_U_IBGRP_U_TP
"RTN","IBCEMMR",179,0)
 . Q
"RTN","IBCEMMR",180,0)
 ;
"RTN","IBCEMMR",181,0)
 ; If Medicare Other was found, but no Medicare WNR, then include it
"RTN","IBCEMMR",182,0)
 I MCRZ,'MCRWNR S INCLUDE=1
"RTN","IBCEMMR",183,0)
 ;
"RTN","IBCEMMR",184,0)
PTINSX ;
"RTN","IBCEMMR",185,0)
 I 'INCLUDE K MCRSUP
"RTN","IBCEMMR",186,0)
 Q INCLUDE
"RTN","IBCEMMR",187,0)
 ;
"RTN","IBCEMMR",188,0)
 ;
"RTN","IBCEMMR",189,0)
DEVICE ; This procedure displays a warning message and prompts for the 
"RTN","IBCEMMR",190,0)
 ; device on which to print the report.
"RTN","IBCEMMR",191,0)
 ;
"RTN","IBCEMMR",192,0)
 NEW ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCEMMR",193,0)
 W *7,!!!?14,"*** WARNING ***"
"RTN","IBCEMMR",194,0)
 W !?2,"This report takes a long time to compile!"
"RTN","IBCEMMR",195,0)
 W !!?2,"The active insurance coverage for all living patients is analyzed."
"RTN","IBCEMMR",196,0)
 W !!?2,"It is recommended that you queue this report to the background and"
"RTN","IBCEMMR",197,0)
 W !?2,"run it after hours or on the weekend."
"RTN","IBCEMMR",198,0)
 W !!?2,"This report is 80 characters wide."
"RTN","IBCEMMR",199,0)
 W !
"RTN","IBCEMMR",200,0)
 ;
"RTN","IBCEMMR",201,0)
 S ZTRTN="COMPILE^IBCEMMR"
"RTN","IBCEMMR",202,0)
 S ZTDESC="Patients without MEDICARE (WNR) Insurance"
"RTN","IBCEMMR",203,0)
 S ZTSAVE("IBMSORT")=""
"RTN","IBCEMMR",204,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE)
"RTN","IBCEMMR",205,0)
DEVICEX ;
"RTN","IBCEMMR",206,0)
 Q
"RTN","IBCEMMR",207,0)
 ;
"RTN","IBSDU")
0^1^B25885281^B7620774
"RTN","IBSDU",1,0)
IBSDU ;ALB/TMP - ACRP API UTILITIES ;16-SEP-97
"RTN","IBSDU",2,0)
 ;;2.0;INTEGRATED BILLING;**91,249,366**;21-MAR-94;Build 3
"RTN","IBSDU",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBSDU",4,0)
 ;
"RTN","IBSDU",5,0)
SCAN(IBINDX,IBVAL,IBFILTER,IBCBK,IBCLOSE,IBQUERY,IBDIR,IBZXERR) ; Scan encountrs
"RTN","IBSDU",6,0)
 ;  *** NOTE *** When using this call, the variable passed as IBQUERY
"RTN","IBSDU",7,0)
 ;               must be  newed or killed in the calling program
"RTN","IBSDU",8,0)
 ; IBINDX = index name property of the query object 
"RTN","IBSDU",9,0)
 ; IBVAL = array of data elements for start/end of search
"RTN","IBSDU",10,0)
 ;         IBVAL("DFN") = patient DFN
"RTN","IBSDU",11,0)
 ;         IBVAL("BDT") = begin date
"RTN","IBSDU",12,0)
 ;         IBVAL("EDT") = end date
"RTN","IBSDU",13,0)
 ;         IBVAL("VIS") = encounter file ien
"RTN","IBSDU",14,0)
 ; IBFILTER = the executable code to use to screen entries
"RTN","IBSDU",15,0)
 ; IBCBK = the executable scan callback code to create the result set
"RTN","IBSDU",16,0)
 ; IBCLOSE = Flag that says whether or not to close the QUERY object
"RTN","IBSDU",17,0)
 ;         1 = Perform close     0 or null = Do not close object
"RTN","IBSDU",18,0)
 ; IBQUERY = the # of the current query, if not a new query.  If passed
"RTN","IBSDU",19,0)
 ;          by reference and query closed, this variable will be nulled
"RTN","IBSDU",20,0)
 ; IBDIR = the direction of the scan (optional)
"RTN","IBSDU",21,0)
 ;         null, undefined or FORWARD : Scan forwards
"RTN","IBSDU",22,0)
 ;         BACKWARD : Scan backwards
"RTN","IBSDU",23,0)
 ; IBZXERR = the name of the error array to be returned (or none if null)
"RTN","IBSDU",24,0)
 ;
"RTN","IBSDU",25,0)
 N QUERY
"RTN","IBSDU",26,0)
 S QUERY=$G(IBQUERY)
"RTN","IBSDU",27,0)
 I $G(IBZXERR)="" K ^TMP("DIERR",$J)
"RTN","IBSDU",28,0)
 I $G(IBZXERR)'="" K @IBZXERR
"RTN","IBSDU",29,0)
 I '$G(QUERY) D
"RTN","IBSDU",30,0)
 .D OPEN^SDQ(.IBQUERY,$G(IBZXERR)) Q:'$G(IBQUERY)
"RTN","IBSDU",31,0)
 .D INDEX^SDQ(.IBQUERY,IBINDX,"SET",$G(IBZXERR))
"RTN","IBSDU",32,0)
 .I $G(IBFILTER)'="" D FILTER^SDQ(.IBQUERY,IBFILTER,"SET",$G(IBZXERR))
"RTN","IBSDU",33,0)
 .D SCANCB^SDQ(.IBQUERY,IBCBK,"SET",$G(IBZXERR))
"RTN","IBSDU",34,0)
 I $G(QUERY) D ACTIVE^SDQ(.IBQUERY,"FALSE","SET",$G(IBZXERR))
"RTN","IBSDU",35,0)
 D SETINDX(.IBQUERY,IBINDX)
"RTN","IBSDU",36,0)
 D ACTIVE^SDQ(.IBQUERY,"TRUE","SET",$G(IBZXERR))
"RTN","IBSDU",37,0)
 S:$G(IBDIR)="" IBDIR="FORWARD"
"RTN","IBSDU",38,0)
 D SCAN^SDQ(.IBQUERY,IBDIR,$G(IBZXERR))
"RTN","IBSDU",39,0)
 I $G(IBCLOSE) D CLOSE(.IBQUERY)
"RTN","IBSDU",40,0)
 I $G(IBZXERR)="" K ^TMP("DIERR",$J)
"RTN","IBSDU",41,0)
 Q
"RTN","IBSDU",42,0)
 ;
"RTN","IBSDU",43,0)
CLOSE(IBQUERY) ; Close the query
"RTN","IBSDU",44,0)
 N IBERROR
"RTN","IBSDU",45,0)
 G:'$G(IBQUERY) CLOSEQ
"RTN","IBSDU",46,0)
 D CLOSE^SDQ(.IBQUERY)
"RTN","IBSDU",47,0)
CLOSEQ Q
"RTN","IBSDU",48,0)
 ;
"RTN","IBSDU",49,0)
SETINDX(IBQUERY,IBINDX) ;
"RTN","IBSDU",50,0)
 I IBINDX="PATIENT/DATE" D PAT,DATE
"RTN","IBSDU",51,0)
 I IBINDX="DATE/TIME" D DATE
"RTN","IBSDU",52,0)
 I IBINDX="PATIENT" D PAT
"RTN","IBSDU",53,0)
 I IBINDX="VISIT" D VIS
"RTN","IBSDU",54,0)
 Q
"RTN","IBSDU",55,0)
 ;
"RTN","IBSDU",56,0)
PAT ; Verify patient
"RTN","IBSDU",57,0)
 D PAT^SDQ(.IBQUERY,$G(IBVAL("DFN")),"SET",$G(IBZXERR))
"RTN","IBSDU",58,0)
 Q
"RTN","IBSDU",59,0)
 ;
"RTN","IBSDU",60,0)
DATE ; Verify date range
"RTN","IBSDU",61,0)
 D DATE^SDQ(.IBQUERY,$G(IBVAL("BDT")),$G(IBVAL("EDT")),"SET",$G(IBZXERR))
"RTN","IBSDU",62,0)
 Q
"RTN","IBSDU",63,0)
 ;
"RTN","IBSDU",64,0)
VIS ; Verify visit
"RTN","IBSDU",65,0)
 D VISIT^SDQ(.IBQUERY,$G(IBVAL("VIS")),"SET",$G(IBZXERR))
"RTN","IBSDU",66,0)
 Q
"RTN","IBSDU",67,0)
 ;
"RTN","IBSDU",68,0)
EPTR(IBOE) ; Function returns extended pointer for encounter (IBOE) 0-node
"RTN","IBSDU",69,0)
 Q $$ER^SDOE(IBOE)
"RTN","IBSDU",70,0)
 ;
"RTN","IBSDU",71,0)
SCE(IBOE,PC,NODE,IBZXERR) ; Returns the specific piece or entire node of the enctr
"RTN","IBSDU",72,0)
 ; NODE = the node to return ... if undefined, the 0-node is assumed
"RTN","IBSDU",73,0)
 ; If PC is null or undefined, the whole node is returned, otherwise
"RTN","IBSDU",74,0)
 ;   just the PC-piece is returned
"RTN","IBSDU",75,0)
 ; IBZXERR = the name of the array where errors should be passed back in
"RTN","IBSDU",76,0)
 ;       (pass in quotes I.E.: "IBERR").  If no name passed, errors are
"RTN","IBSDU",77,0)
 ;       not returned
"RTN","IBSDU",78,0)
 N IBX
"RTN","IBSDU",79,0)
 S:$G(NODE)="" NODE=0
"RTN","IBSDU",80,0)
 I '$G(PC),NODE=0 S IBX=$$GETOE^SDOE(IBOE,$G(IBZXERR)) G SCEQ
"RTN","IBSDU",81,0)
 D GETGEN^SDOE(IBOE,"IBX",$G(IBZXERR))
"RTN","IBSDU",82,0)
 S IBX=$S($G(PC):$P($G(IBX(NODE)),U,+PC),1:$G(IBX(NODE)))
"RTN","IBSDU",83,0)
 ;
"RTN","IBSDU",84,0)
SCEQ I $G(IBZXERR)="" K ^TMP("DIERR",$J)
"RTN","IBSDU",85,0)
 Q IBX
"RTN","IBSDU",86,0)
 ;
"RTN","IBSDU",87,0)
DISND(IBOE,IBOE0,PC,NODE) ; Returns the specific piece or all pieces of "DIS"
"RTN","IBSDU",88,0)
 ; (disposition) of the PATIENT file entry for the encounter IBOE
"RTN","IBSDU",89,0)
 ; NODE = the node to return ... if undefined, the 0-node is assumed
"RTN","IBSDU",90,0)
 ; If PC is null or undefined, the whole node is returned, otherwise
"RTN","IBSDU",91,0)
 ;   just the PC-piece is returned
"RTN","IBSDU",92,0)
 ; IBOE0 = 0-node of encounter file (optional)
"RTN","IBSDU",93,0)
 N DATA,IBOE0
"RTN","IBSDU",94,0)
 S:$G(NODE)="" NODE=0
"RTN","IBSDU",95,0)
 I $G(IBOE0)="" S IBOE0=$$SCE(IBOE)
"RTN","IBSDU",96,0)
 S DATA=$G(^DPT(+$P(IBOE0,U,2),"DIS",+$$EPTR^IBSDU(IBOE),NODE))
"RTN","IBSDU",97,0)
 S:$G(PC) DATA=$P(DATA,U,+PC)
"RTN","IBSDU",98,0)
 Q DATA
"RTN","IBSDU",99,0)
 ;
"RTN","IBSDU",100,0)
LAST(IBDFN) ; Returns the patient's Last Appointment
"RTN","IBSDU",101,0)
 ; ARRAYS IN DFN MUST BE LOCAL or ^TMP or ^UTILITY
"RTN","IBSDU",102,0)
 ; pass in single DFN or an open array reference (local or global)
"RTN","IBSDU",103,0)
 ; for array of patients, array will = last appt
"RTN","IBSDU",104,0)
 ; if '$d(array(dfn)) returned then unknown for that patient
"RTN","IBSDU",105,0)
 ; Unknown - cannot be determined, N/A - patient has none
"RTN","IBSDU",106,0)
 ; 
"RTN","IBSDU",107,0)
 ;
"RTN","IBSDU",108,0)
 N IBARRAY,DFN,DATA,X K ^TMP($J,"SDAMA301")
"RTN","IBSDU",109,0)
 I 'IBDFN,$E(IBDFN)="^",$E(IBDFN,1,5)'="^TMP(",$E(IBDFN,1,9)'="^UTILITY(" S DATA="INVALID DFN" G LASTQ
"RTN","IBSDU",110,0)
 I IBDFN,$$GETICN^MPIF001(IBDFN)<1!($$IFLOCAL^MPIF001(IBDFN)) S DATA="Unknown" G LASTQ
"RTN","IBSDU",111,0)
 I 'IBDFN S DFN=0 F  S DFN=$O(@(IBDFN_DFN_")")) Q:'DFN  I $$GETICN^MPIF001(DFN)<1!($$IFLOCAL^MPIF001(DFN)) K @(IBDFN_DFN_")")
"RTN","IBSDU",112,0)
 I 'IBDFN,$D(@($E(IBDFN,1,$L(IBDFN)-1)_$S(IBDFN[",":")",1:"")))<9 S DATA=0 G LASTQ
"RTN","IBSDU",113,0)
 S IBARRAY(1)=";"_DT
"RTN","IBSDU",114,0)
 S IBARRAY(3)="R;I;NT"
"RTN","IBSDU",115,0)
 S IBARRAY(4)=IBDFN
"RTN","IBSDU",116,0)
 S IBARRAY("FLDS")=1
"RTN","IBSDU",117,0)
 I IBDFN S IBARRAY("MAX")=-1
"RTN","IBSDU",118,0)
 S IBARRAY("PURGED")=1
"RTN","IBSDU",119,0)
 S IBARRAY("SORT")="P"
"RTN","IBSDU",120,0)
 S DATA=$$SDAPI^SDAMA301(.IBARRAY)
"RTN","IBSDU",121,0)
 I IBDFN S DATA=$S(DATA=0:"N/A",DATA=-1:-1,1:$O(^TMP($J,"SDAMA301",IBDFN,0)))
"RTN","IBSDU",122,0)
 I 'IBDFN S (DATA,DFN)=0 F  S DFN=$O(@(IBDFN_DFN_")")) Q:'DFN  S X=$O(^TMP($J,"SDAMA301",DFN,9999999),-1),@(IBDFN_DFN_")")=$S(X:X,1:"N/A"),DATA=DATA+1
"RTN","IBSDU",123,0)
 ;
"RTN","IBSDU",124,0)
LASTQ K ^TMP($J,"SDAMA301")
"RTN","IBSDU",125,0)
 Q DATA
"RTN","IBSDU",126,0)
 ;
"RTN","IBSDU",127,0)
NEXT(IBDFN) ; Returns the patient's Next Appointment
"RTN","IBSDU",128,0)
 ; ARRAYS IN DFN MUST BE LOCAL or ^TMP or ^UTILITY
"RTN","IBSDU",129,0)
 ; pass in single DFN or an open array reference (local or global)
"RTN","IBSDU",130,0)
 ; for array of patients, array will = next appt
"RTN","IBSDU",131,0)
 ; if '$d(array(dfn)) returned then unknown for that patient
"RTN","IBSDU",132,0)
 ; Unknown - cannot be determined, N/A - patient has none
"RTN","IBSDU",133,0)
 ; Pass DATA by reference for list or $$ return for single
"RTN","IBSDU",134,0)
 ; 
"RTN","IBSDU",135,0)
 ;
"RTN","IBSDU",136,0)
 N IBARRAY,DFN,DATA,X K ^TMP($J,"SDAMA301")
"RTN","IBSDU",137,0)
 I 'IBDFN,$E(IBDFN)="^",$E(IBDFN,1,5)'="^TMP(",$E(IBDFN,1,9)'="^UTILITY(" S DATA="INVALID DFN" G NEXTQ
"RTN","IBSDU",138,0)
 I IBDFN,$$GETICN^MPIF001(IBDFN)<1!($$IFLOCAL^MPIF001(IBDFN)) S DATA="Unknown" G NEXTQ
"RTN","IBSDU",139,0)
 I 'IBDFN S DFN=0 F  S DFN=$O(@(IBDFN_DFN_")")) Q:'DFN  I $$GETICN^MPIF001(DFN)<1!($$IFLOCAL^MPIF001(DFN)) K @(IBDFN_DFN_")")
"RTN","IBSDU",140,0)
 I 'IBDFN,$D(@($E(IBDFN,1,$L(IBDFN)-1)_$S(IBDFN[",":")",1:"")))<9 S DATA=0 G NEXTQ
"RTN","IBSDU",141,0)
 S IBARRAY(1)=DT
"RTN","IBSDU",142,0)
 S IBARRAY(3)="R;I;NT"
"RTN","IBSDU",143,0)
 S IBARRAY(4)=IBDFN
"RTN","IBSDU",144,0)
 S IBARRAY("FLDS")=1
"RTN","IBSDU",145,0)
 I IBDFN S IBARRAY("MAX")=1
"RTN","IBSDU",146,0)
 S IBARRAY("SORT")="P"
"RTN","IBSDU",147,0)
 S DATA=$$SDAPI^SDAMA301(.IBARRAY)
"RTN","IBSDU",148,0)
 I IBDFN S DATA=$S(DATA=0:"N/A",DATA=-1:-1,1:$O(^TMP($J,"SDAMA301",IBDFN,0)))
"RTN","IBSDU",149,0)
 I 'IBDFN S (DATA,DFN)=0 F  S DFN=$O(@(IBDFN_DFN_")")) Q:'DFN  S X=$O(^TMP($J,"SDAMA301",DFN,0)),@(IBDFN_DFN_")")=$S(X:X,1:"N/A"),DATA=DATA+1
"RTN","IBSDU",150,0)
 ;
"RTN","IBSDU",151,0)
NEXTQ K ^TMP($J,"SDAMA301")
"RTN","IBSDU",152,0)
 Q DATA
"RTN","IBSDU",153,0)
 ;
"VER")
8.0^22.0
"BLD",7106,6)
^339
**END**
**END**
