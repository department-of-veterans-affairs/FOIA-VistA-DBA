Released IB*2*345 SEQ #332
Extracted from mail message
**KIDS**:IB*2.0*345^

**INSTALL NAME**
IB*2.0*345
"BLD",6388,0)
IB*2.0*345^INTEGRATED BILLING^0^3070305^y
"BLD",6388,1,0)
^^28^28^3070305^
"BLD",6388,1,1,0)
1.      Additional Source of Information Codes in Insurance Buffer and 
"BLD",6388,1,2,0)
Patient Insurance File.
"BLD",6388,1,3,0)
 
"BLD",6388,1,4,0)
2.      Modifications to existing Pre-Registration Report to remove 
"BLD",6388,1,5,0)
hard-coding and allow SOI Code selection.
"BLD",6388,1,6,0)
 
"BLD",6388,1,7,0)
3.      Include missing patient name in buffer file when processing 
"BLD",6388,1,8,0)
message responses.
"BLD",6388,1,9,0)
 
"BLD",6388,1,10,0)
4.      Reduce the number of blank inquires being sent via Remote Query.
"BLD",6388,1,11,0)
 
"BLD",6388,1,12,0)
5.      Auto-Populate the Patient Insurance file with the patient's DOB & 
"BLD",6388,1,13,0)
SSN information at processing time.
"BLD",6388,1,14,0)
 
"BLD",6388,1,15,0)
6.      Replace Payer ID with Payer Name to improve readability of the 
"BLD",6388,1,16,0)
Buffer entry error information.
"BLD",6388,1,17,0)
 
"BLD",6388,1,18,0)
7.      Correct the totals for companies without National IDs in the eIV 
"BLD",6388,1,19,0)
Statistical Report.
"BLD",6388,1,20,0)
 
"BLD",6388,1,21,0)
8.      Bypass new buffer entry creation upon message response by 
"BLD",6388,1,22,0)
verifying if the buffer entry has been previously accepted.
"BLD",6388,1,23,0)
 
"BLD",6388,1,24,0)
9.       The CBO extract was modified to transmit SOI codes with a value
"BLD",6388,1,25,0)
greater than '4' without resetting them to a value of '1' (Interview).
"BLD",6388,1,26,0)
 
"BLD",6388,1,27,0)
10.      Modify Response Report to Display Benefit Status as well as all
"BLD",6388,1,28,0)
notes associated with benefit.
"BLD",6388,4,0)
^9.64PA^2^3
"BLD",6388,4,2,0)
2
"BLD",6388,4,2,2,0)
^9.641^2.312^1
"BLD",6388,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",6388,4,2,2,2.312,1,0)
^9.6411^1.09^1
"BLD",6388,4,2,2,2.312,1,1.09,0)
SOURCE OF INFORMATION
"BLD",6388,4,2,222)
y^n^p^^^^n^^n
"BLD",6388,4,2,224)

"BLD",6388,4,355.12,0)
355.12
"BLD",6388,4,355.12,222)
y^y^f^^^^y
"BLD",6388,4,355.33,0)
355.33
"BLD",6388,4,355.33,2,0)
^9.641^355.33^1
"BLD",6388,4,355.33,2,355.33,0)
INSURANCE BUFFER  (File-top level)
"BLD",6388,4,355.33,2,355.33,1,0)
^9.6411^.03^1
"BLD",6388,4,355.33,2,355.33,1,.03,0)
SOURCE OF INFORMATION
"BLD",6388,4,355.33,222)
y^n^p^^^^n^^n
"BLD",6388,4,355.33,224)

"BLD",6388,4,"APDD",2,2.312)

"BLD",6388,4,"APDD",2,2.312,1.09)

"BLD",6388,4,"APDD",355.33,355.33)

"BLD",6388,4,"APDD",355.33,355.33,.03)

"BLD",6388,4,"B",2,2)

"BLD",6388,4,"B",355.12,355.12)

"BLD",6388,4,"B",355.33,355.33)

"BLD",6388,6.3)
28
"BLD",6388,"INI")
IBY345PR
"BLD",6388,"INID")
^y^y
"BLD",6388,"INIT")
IBY345PS
"BLD",6388,"KRN",0)
^9.67PA^8989.52^19
"BLD",6388,"KRN",.4,0)
.4
"BLD",6388,"KRN",.401,0)
.401
"BLD",6388,"KRN",.402,0)
.402
"BLD",6388,"KRN",.402,"NM",0)
^9.68A^^0
"BLD",6388,"KRN",.403,0)
.403
"BLD",6388,"KRN",.5,0)
.5
"BLD",6388,"KRN",.84,0)
.84
"BLD",6388,"KRN",3.6,0)
3.6
"BLD",6388,"KRN",3.8,0)
3.8
"BLD",6388,"KRN",3.8,"NM",0)
^9.68A^^0
"BLD",6388,"KRN",9.2,0)
9.2
"BLD",6388,"KRN",9.8,0)
9.8
"BLD",6388,"KRN",9.8,"NM",0)
^9.68A^15^14
"BLD",6388,"KRN",9.8,"NM",1,0)
IBCNEUT4^^0^B50608524
"BLD",6388,"KRN",9.8,"NM",2,0)
IBCNEDE2^^0^B63218575
"BLD",6388,"KRN",9.8,"NM",4,0)
IBCNEDE6^^0^B30305878
"BLD",6388,"KRN",9.8,"NM",5,0)
IBCNBAR^^0^B18909068
"BLD",6388,"KRN",9.8,"NM",6,0)
IBCNBES^^0^B5872961
"BLD",6388,"KRN",9.8,"NM",7,0)
IBCNBMI^^0^B52789552
"BLD",6388,"KRN",9.8,"NM",8,0)
IBCNEHL1^^0^B32996551
"BLD",6388,"KRN",9.8,"NM",9,0)
IBCNERP8^^0^B55076349
"BLD",6388,"KRN",9.8,"NM",10,0)
IBCNEHL2^^0^B48625538
"BLD",6388,"KRN",9.8,"NM",11,0)
IBRFN2^^0^B11408951
"BLD",6388,"KRN",9.8,"NM",12,0)
IBCOPR^^0^B34320642
"BLD",6388,"KRN",9.8,"NM",13,0)
IBCOPR1^^0^B32793618
"BLD",6388,"KRN",9.8,"NM",14,0)
IBCNBLL^^0^B58797432
"BLD",6388,"KRN",9.8,"NM",15,0)
IBCNERPA^^0^B29790461
"BLD",6388,"KRN",9.8,"NM","B","IBCNBAR",5)

"BLD",6388,"KRN",9.8,"NM","B","IBCNBES",6)

"BLD",6388,"KRN",9.8,"NM","B","IBCNBLL",14)

"BLD",6388,"KRN",9.8,"NM","B","IBCNBMI",7)

"BLD",6388,"KRN",9.8,"NM","B","IBCNEDE2",2)

"BLD",6388,"KRN",9.8,"NM","B","IBCNEDE6",4)

"BLD",6388,"KRN",9.8,"NM","B","IBCNEHL1",8)

"BLD",6388,"KRN",9.8,"NM","B","IBCNEHL2",10)

"BLD",6388,"KRN",9.8,"NM","B","IBCNERP8",9)

"BLD",6388,"KRN",9.8,"NM","B","IBCNERPA",15)

"BLD",6388,"KRN",9.8,"NM","B","IBCNEUT4",1)

"BLD",6388,"KRN",9.8,"NM","B","IBCOPR",12)

"BLD",6388,"KRN",9.8,"NM","B","IBCOPR1",13)

"BLD",6388,"KRN",9.8,"NM","B","IBRFN2",11)

"BLD",6388,"KRN",19,0)
19
"BLD",6388,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",6388,"KRN",19,"NM",1,0)
IB OUTPUT PRE-REG SOURCE REPT^^0
"BLD",6388,"KRN",19,"NM","B","IB OUTPUT PRE-REG SOURCE REPT",1)

"BLD",6388,"KRN",19.1,0)
19.1
"BLD",6388,"KRN",19.1,"NM",0)
^9.68A^^0
"BLD",6388,"KRN",101,0)
101
"BLD",6388,"KRN",101,"NM",0)
^9.68A^^0
"BLD",6388,"KRN",409.61,0)
409.61
"BLD",6388,"KRN",409.61,"NM",0)
^9.68A^^0
"BLD",6388,"KRN",771,0)
771
"BLD",6388,"KRN",870,0)
870
"BLD",6388,"KRN",8989.51,0)
8989.51
"BLD",6388,"KRN",8989.52,0)
8989.52
"BLD",6388,"KRN",8994,0)
8994
"BLD",6388,"KRN","B",.4,.4)

"BLD",6388,"KRN","B",.401,.401)

"BLD",6388,"KRN","B",.402,.402)

"BLD",6388,"KRN","B",.403,.403)

"BLD",6388,"KRN","B",.5,.5)

"BLD",6388,"KRN","B",.84,.84)

"BLD",6388,"KRN","B",3.6,3.6)

"BLD",6388,"KRN","B",3.8,3.8)

"BLD",6388,"KRN","B",9.2,9.2)

"BLD",6388,"KRN","B",9.8,9.8)

"BLD",6388,"KRN","B",19,19)

"BLD",6388,"KRN","B",19.1,19.1)

"BLD",6388,"KRN","B",101,101)

"BLD",6388,"KRN","B",409.61,409.61)

"BLD",6388,"KRN","B",771,771)

"BLD",6388,"KRN","B",870,870)

"BLD",6388,"KRN","B",8989.51,8989.51)

"BLD",6388,"KRN","B",8989.52,8989.52)

"BLD",6388,"KRN","B",8994,8994)

"BLD",6388,"QUES",0)
^9.62^^
"BLD",6388,"REQB",0)
^9.611^5^5
"BLD",6388,"REQB",1,0)
IB*2.0*300^1
"BLD",6388,"REQB",2,0)
IB*2.0*299^1
"BLD",6388,"REQB",3,0)
IB*2.0*249^1
"BLD",6388,"REQB",4,0)
IB*2.0*240^1
"BLD",6388,"REQB",5,0)
IB*2.0*149^1
"BLD",6388,"REQB","B","IB*2.0*149",5)

"BLD",6388,"REQB","B","IB*2.0*240",4)

"BLD",6388,"REQB","B","IB*2.0*249",3)

"BLD",6388,"REQB","B","IB*2.0*299",2)

"BLD",6388,"REQB","B","IB*2.0*300",1)

"DATA",355.12,1,0)
1^INTERVIEW^INTVW
"DATA",355.12,2,0)
2^DATA MATCH^DMTCH
"DATA",355.12,3,0)
3^IVM^IVM
"DATA",355.12,4,0)
4^PRE-REGISTRATION^PreRg
"DATA",355.12,5,0)
5^eIV^eIV
"DATA",355.12,6,0)
6^HMS^HMS
"DATA",355.12,7,0)
7^MEDICARE^MCR
"DATA",355.12,8,0)
8^ICB CARD READER^ICB
"DATA",355.12,9,0)
9^CONTRACT SERVICES^CS
"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^n^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,1.09)

"FIA",355.12)
SOURCE OF INFORMATION
"FIA",355.12,0)
^IBE(355.12,
"FIA",355.12,0,0)
355.12I
"FIA",355.12,0,1)
y^y^f^^^^y
"FIA",355.12,0,10)

"FIA",355.12,0,11)

"FIA",355.12,0,"RLRO")

"FIA",355.12,0,"VR")
2.0^IB
"FIA",355.12,355.12)
0
"FIA",355.33)
INSURANCE BUFFER
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33DA
"FIA",355.33,0,1)
y^n^p^^^^n^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,.03)

"INI")
IBY345PR
"INIT")
IBY345PS
"KRN",19,2934597,-1)
0^1
"KRN",19,2934597,0)
IB OUTPUT PRE-REG SOURCE REPT^Source Of Information Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,2934597,1,0)
^^6^6^3061108^
"KRN",19,2934597,1,1,0)
This report will show patients which had insurance entered within a
"KRN",19,2934597,1,2,0)
selected date range with a source of information equal to the user 
"KRN",19,2934597,1,3,0)
selected criteria. The report will show a list of patients, total
"KRN",19,2934597,1,4,0)
bills created during date range, and total payments received during date
"KRN",19,2934597,1,5,0)
range. This option was formerly known as the Pre-Registration Source 
"KRN",19,2934597,1,6,0)
Report.
"KRN",19,2934597,25)
IBCOPR
"KRN",19,2934597,"U")
SOURCE OF INFORMATION REPORT
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",179,-1)
1^1
"PKG",179,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",179,20,0)
^9.402P^1^1
"PKG",179,20,1,0)
2^^IBAXDR
"PKG",179,20,1,1)

"PKG",179,20,"B",2,1)

"PKG",179,22,0)
^9.49I^1^1
"PKG",179,22,1,0)
2.0^2940321^2940528
"PKG",179,22,1,"PAH",1,0)
345^3070305
"PKG",179,22,1,"PAH",1,1,0)
^^28^28^3070305
"PKG",179,22,1,"PAH",1,1,1,0)
1.      Additional Source of Information Codes in Insurance Buffer and 
"PKG",179,22,1,"PAH",1,1,2,0)
Patient Insurance File.
"PKG",179,22,1,"PAH",1,1,3,0)
 
"PKG",179,22,1,"PAH",1,1,4,0)
2.      Modifications to existing Pre-Registration Report to remove 
"PKG",179,22,1,"PAH",1,1,5,0)
hard-coding and allow SOI Code selection.
"PKG",179,22,1,"PAH",1,1,6,0)
 
"PKG",179,22,1,"PAH",1,1,7,0)
3.      Include missing patient name in buffer file when processing 
"PKG",179,22,1,"PAH",1,1,8,0)
message responses.
"PKG",179,22,1,"PAH",1,1,9,0)
 
"PKG",179,22,1,"PAH",1,1,10,0)
4.      Reduce the number of blank inquires being sent via Remote Query.
"PKG",179,22,1,"PAH",1,1,11,0)
 
"PKG",179,22,1,"PAH",1,1,12,0)
5.      Auto-Populate the Patient Insurance file with the patient's DOB & 
"PKG",179,22,1,"PAH",1,1,13,0)
SSN information at processing time.
"PKG",179,22,1,"PAH",1,1,14,0)
 
"PKG",179,22,1,"PAH",1,1,15,0)
6.      Replace Payer ID with Payer Name to improve readability of the 
"PKG",179,22,1,"PAH",1,1,16,0)
Buffer entry error information.
"PKG",179,22,1,"PAH",1,1,17,0)
 
"PKG",179,22,1,"PAH",1,1,18,0)
7.      Correct the totals for companies without National IDs in the eIV 
"PKG",179,22,1,"PAH",1,1,19,0)
Statistical Report.
"PKG",179,22,1,"PAH",1,1,20,0)
 
"PKG",179,22,1,"PAH",1,1,21,0)
8.      Bypass new buffer entry creation upon message response by 
"PKG",179,22,1,"PAH",1,1,22,0)
verifying if the buffer entry has been previously accepted.
"PKG",179,22,1,"PAH",1,1,23,0)
 
"PKG",179,22,1,"PAH",1,1,24,0)
9.       The CBO extract was modified to transmit SOI codes with a value
"PKG",179,22,1,"PAH",1,1,25,0)
greater than '4' without resetting them to a value of '1' (Interview).
"PKG",179,22,1,"PAH",1,1,26,0)
 
"PKG",179,22,1,"PAH",1,1,27,0)
10.      Modify Response Report to Display Benefit Status as well as all
"PKG",179,22,1,"PAH",1,1,28,0)
notes associated with benefit.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","IBCNBAR")
0^5^B18909068^B18172525
"RTN","IBCNBAR",1,0)
IBCNBAR ;ALB/ARH-Ins Buffer: process Accept and Reject ;1 Jun 97
"RTN","IBCNBAR",2,0)
 ;;2.0;INTEGRATED BILLING;**82,240,345**;21-MAR-94;Build 28
"RTN","IBCNBAR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBAR",4,0)
 ;
"RTN","IBCNBAR",5,0)
 ;
"RTN","IBCNBAR",6,0)
ACCEPT(IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL) ; move buffer data into Insurance files then cleanup
"RTN","IBCNBAR",7,0)
 ;    1) data moved into insurance files, new records created if needed or edit existing ones
"RTN","IBCNBAR",8,0)
 ;    2) complete some general functions that are executed whenever insurance is entered/edited
"RTN","IBCNBAR",9,0)
 ;    3) allow user to view buffer entry and new/updated insurance records
"RTN","IBCNBAR",10,0)
 ;    4) buffer ins/group/policy data deleted
"RTN","IBCNBAR",11,0)
 ;    5) buffer entry status updated
"RTN","IBCNBAR",12,0)
 ;
"RTN","IBCNBAR",13,0)
 ;
"RTN","IBCNBAR",14,0)
PROCESS ; process all changes selected by user, add/edit insurance files based on buffer data
"RTN","IBCNBAR",15,0)
 ;
"RTN","IBCNBAR",16,0)
 N IVMINSUP,IBNEW,IBCDFN S IBCDFN=IBPOLDA S:+IBNEWPOL IBNEW=1 D BEFORE^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",17,0)
 ;
"RTN","IBCNBAR",18,0)
 N DIR,X,Y,IBX,IBINSH,IBGRPH,IBPOLH S (IBINSH,IBGRPH,IBPOLH)="Updated" W " ...",!
"RTN","IBCNBAR",19,0)
 ;
"RTN","IBCNBAR",20,0)
 I +IBNEWINS S IBINSDA=+$$NEWINS^IBCNBMN(IBBUFDA) G:'IBINSDA ACCPTQ  S IBINSH="Created"
"RTN","IBCNBAR",21,0)
 I +IBNEWGRP S IBGRPDA=+$$NEWGRP^IBCNBMN(IBBUFDA,+IBINSDA) G:'IBGRPDA ACCPTQ  S IBGRPH="Created"
"RTN","IBCNBAR",22,0)
 I +IBNEWPOL S IBPOLDA=+$$NEWPOL^IBCNBMN(IBBUFDA,+IBINSDA,+IBGRPDA) G:'IBPOLDA ACCPTQ  S IBPOLH="Created"
"RTN","IBCNBAR",23,0)
 ;
"RTN","IBCNBAR",24,0)
 I +IBINSDA,+IBMVINS D INS^IBCNBMI(IBBUFDA,IBINSDA,+IBMVINS) W !,"Insurance Company "_IBINSH_"..."
"RTN","IBCNBAR",25,0)
 I +IBINSDA,+IBMVGRP,+IBGRPDA D GRP^IBCNBMI(IBBUFDA,IBGRPDA,+IBMVGRP) W !,"Group/Plan "_IBGRPH_"..."
"RTN","IBCNBAR",26,0)
 I +IBINSDA,+IBMVPOL,+IBGRPDA,+IBPOLDA D POLICY^IBCNBMI(IBBUFDA,IBPOLDA,+IBMVPOL) W !,"Patient Policy "_IBPOLH_"..."
"RTN","IBCNBAR",27,0)
 ;
"RTN","IBCNBAR",28,0)
CLEANUP ; general updates and checks done whenever insurance is added/edited and clean up buffer file
"RTN","IBCNBAR",29,0)
 N IBSOURCE S IBSOURCE=$P($G(^IBA(355.33,IBBUFDA,0)),U,3)
"RTN","IBCNBAR",30,0)
 ;
"RTN","IBCNBAR",31,0)
 I +IBPOLDA D PAT^IBCNBMI(DFN,IBPOLDA) ;                             update DOB&SSN of Pat Ins from Pat file
"RTN","IBCNBAR",32,0)
 D POL^IBCNSU41(DFN) ;                                               update Tricare sponsor data
"RTN","IBCNBAR",33,0)
 D COVERED^IBCNSM31(DFN) ;                                           update 'Covered by Insurance' field (2,.3192
"RTN","IBCNBAR",34,0)
 I +IBSOURCE=3 D IVM(1,IBBUFDA) ;                                    update/notify IVM
"RTN","IBCNBAR",35,0)
 I +IBINSDA,+IBPOLDA S IBX=$$DUPCO^IBCNSOK1(DFN,IBINSDA,IBPOLDA,1) ; warning if duplicate policy added for patient
"RTN","IBCNBAR",36,0)
 I +IBGRPDA S IBX=$$DUPPOL^IBCNSOK1(IBGRPDA,1) ;                     warning if duplicate plan was added
"RTN","IBCNBAR",37,0)
 I +IBNEWPOL I +$$PTHLD^IBOHCR(DFN,1,1) W !!,"Patient's bills On Hold date updated due to new insurance."
"RTN","IBCNBAR",38,0)
 I $$HOLD^IBCNBLL(DFN) W !!,"There are bills On Hold for this patient."
"RTN","IBCNBAR",39,0)
 ;
"RTN","IBCNBAR",40,0)
 W !! S DIR(0)="FO",DIR("A")="Press 'V' to view the changes or Return to continue" D ^DIR
"RTN","IBCNBAR",41,0)
 I Y="V"!(Y="v") W !! D INS^IBCNBCD(IBBUFDA,IBINSDA),WAIT^IBCNBUH,GRP^IBCNBCD(IBBUFDA,IBGRPDA),WAIT^IBCNBUH,POLICY^IBCNBCD(IBBUFDA,IBPOLDA),WAIT^IBCNBUH
"RTN","IBCNBAR",42,0)
 ;
"RTN","IBCNBAR",43,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNBAR",44,0)
 D STATUS^IBCNBEE(IBBUFDA,"A",IBNEWINS,IBNEWGRP,IBNEWPOL) ;          update buffer entry's status to accepted
"RTN","IBCNBAR",45,0)
 D DELDATA^IBCNBED(IBBUFDA) ;                                        delete buffer's insurance/patient data
"RTN","IBCNBAR",46,0)
 ;
"RTN","IBCNBAR",47,0)
 S IBCDFN=IBPOLDA S:+IBSOURCE=3 IVMINSUP=1 D AFTER^IBCNSEVT,^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",48,0)
 ;
"RTN","IBCNBAR",49,0)
ACCPTQ Q
"RTN","IBCNBAR",50,0)
 ;
"RTN","IBCNBAR",51,0)
 ;
"RTN","IBCNBAR",52,0)
REJECT(IBBUFDA) ; process a buffer entry reject
"RTN","IBCNBAR",53,0)
 ;    1) update/notify IVM
"RTN","IBCNBAR",54,0)
 ;    2) buffer ins/group/policy data deleted
"RTN","IBCNBAR",55,0)
 ;    3) buffer entry status updated
"RTN","IBCNBAR",56,0)
 ;    4) if patient has no other active insurance then release any patient bills On Hold
"RTN","IBCNBAR",57,0)
 ;
"RTN","IBCNBAR",58,0)
 N DFN S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",59,0)
 ;
"RTN","IBCNBAR",60,0)
 I +$P($G(^IBA(355.33,+IBBUFDA,0)),U,3)=3 D IVM(0,IBBUFDA)
"RTN","IBCNBAR",61,0)
 ;
"RTN","IBCNBAR",62,0)
 D STATUS^IBCNBEE(+IBBUFDA,"R",0,0,0),DELDATA^IBCNBED(+IBBUFDA) W " ... done."
"RTN","IBCNBAR",63,0)
 ;
"RTN","IBCNBAR",64,0)
 I +DFN,'$$INSURED^IBCNS1(DFN),'$$BUFFER^IBCNBU1(DFN) D
"RTN","IBCNBAR",65,0)
 . I +$$PTHLD^IBOHCR(DFN,2,1) W !!,"Patient has no other active Insurance.",!,"All patient bills On Hold waiting for Insurance have been released." D WAIT^IBCNBUH
"RTN","IBCNBAR",66,0)
 ;
"RTN","IBCNBAR",67,0)
 Q
"RTN","IBCNBAR",68,0)
 ;
"RTN","IBCNBAR",69,0)
 ;
"RTN","IBCNBAR",70,0)
IVM(AR,IBBUFDA) ; IVM must be notified whenever a buffer entry that originated in IVM is accepted or rejected
"RTN","IBCNBAR",71,0)
 ; this lets them clean up their files since they also have a buffer type file of insurance uploaded from the IVM center
"RTN","IBCNBAR",72,0)
 ; if rejected they then ask the user for a reason it was rejected
"RTN","IBCNBAR",73,0)
 ; input:  AR = 1 if accepted, 0 if rejected
"RTN","IBCNBAR",74,0)
 ;
"RTN","IBCNBAR",75,0)
 N DFN,IBX,IBY I $P($G(^IBA(355.33,+IBBUFDA,0)),U,3)'=3 Q
"RTN","IBCNBAR",76,0)
 ;
"RTN","IBCNBAR",77,0)
 S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",78,0)
 S IBX=$P($G(^IBA(355.33,+IBBUFDA,20)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,21)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,40)),U,3)
"RTN","IBCNBAR",79,0)
 ;
"RTN","IBCNBAR",80,0)
 S IBY=$$UPDATE^IVMLINS4(DFN,AR,IBX)
"RTN","IBCNBAR",81,0)
 Q
"RTN","IBCNBES")
0^6^B5872961^B5591654
"RTN","IBCNBES",1,0)
IBCNBES ;ALB/ARH-Ins Buffer: stuff new entries/data into buffer ;1 Jun 97
"RTN","IBCNBES",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,345**;21-MAR-94;Build 28
"RTN","IBCNBES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBES",4,0)
 ;
"RTN","IBCNBES",5,0)
 ;
"RTN","IBCNBES",6,0)
ADDSTF(IBSOURCE,DFN,IBDATA) ;  add new entry to Insurance Buffer file (355.33) and stuff the data passed in, no user interaction
"RTN","IBCNBES",7,0)
 ;  IBSOURCE = source of information             (required)
"RTN","IBCNBES",8,0)
 ;             1 = interview           2 = data match
"RTN","IBCNBES",9,0)
 ;             3 = ivm                 4 = pre-registration
"RTN","IBCNBES",10,0)
 ;             5 = eIV
"RTN","IBCNBES",11,0)
 ;  DFN      = patient's ifn in file 2           (required)
"RTN","IBCNBES",12,0)
 ;  IBDATA   = data to file in Buffer in an array subscripted by field number of the data field in 355.33
"RTN","IBCNBES",13,0)
 ;             ex:  IBDATA(20.01)="Insurance Company Name", etc,
"RTN","IBCNBES",14,0)
 ;  returns ien of new entry or 0 followed by error if entry not added
"RTN","IBCNBES",15,0)
 ;
"RTN","IBCNBES",16,0)
 ;  example of call: $$ADDBUF^IBCNBES(2,DFN,.IBDATA)   where IBDATA(field #) = value
"RTN","IBCNBES",17,0)
 ;
"RTN","IBCNBES",18,0)
 N X,Y,IBBUFDA,IBERROR
"RTN","IBCNBES",19,0)
 ;
"RTN","IBCNBES",20,0)
 ;  verify source of information and data exists to store
"RTN","IBCNBES",21,0)
 I $G(IBSOURCE)="" S IBERROR="SOURCE OF INFORMATION INCORRECT" G EXIT
"RTN","IBCNBES",22,0)
 I $G(^DPT(+$G(DFN),0))="" S IBERROR="NO PATIENT DEFINED" G EXIT
"RTN","IBCNBES",23,0)
 I $D(IBDATA)<10 S IBERROR="NO DATA TO STORE" G EXIT
"RTN","IBCNBES",24,0)
 ;
"RTN","IBCNBES",25,0)
 ;  add new entry to Buffer file (355.33)
"RTN","IBCNBES",26,0)
 S IBBUFDA=+$$ADD^IBCNBEE(IBSOURCE) I 'IBBUFDA S IBERROR="COULD NOT CREATE A NEW BUFFER ENTRY" G EXIT
"RTN","IBCNBES",27,0)
 ;
"RTN","IBCNBES",28,0)
 S IBDATA(60.01)=+DFN
"RTN","IBCNBES",29,0)
 ;
"RTN","IBCNBES",30,0)
 ; Set up DUZ (interface user) so 60.01 field check can find 'valid reason' for sensitive
"RTN","IBCNBES",31,0)
 ; patients and not set 60.01 to '0' with an error in tag FLDCHK
"RTN","IBCNBES",32,0)
 I '$G(DUZ) D DUZ^XUP(.5)
"RTN","IBCNBES",33,0)
 ;
"RTN","IBCNBES",34,0)
 D EDITSTF(+IBBUFDA,.IBDATA)
"RTN","IBCNBES",35,0)
 ;
"RTN","IBCNBES",36,0)
 ; delete leftover ESGHP data if ESGHP? is not Yes
"RTN","IBCNBES",37,0)
 I +$G(IBBUFDA),$D(^IBA(355.33,$G(IBBUFDA),61)),'$G(^IBA(355.33,$G(IBBUFDA),61)) D DELEMP^IBCNBEE($G(IBBUFDA))
"RTN","IBCNBES",38,0)
 ;
"RTN","IBCNBES",39,0)
EXIT Q +$G(IBBUFDA)_"^"_$G(IBERROR)
"RTN","IBCNBES",40,0)
 ;
"RTN","IBCNBES",41,0)
EDITSTF(IBBUFDA,IBDATA) ;  loop though data array and stuff each buffer field, no user interaction
"RTN","IBCNBES",42,0)
 ;
"RTN","IBCNBES",43,0)
 N IBFIELD,IBVALUE,IBARR,IBERR Q:'$G(^IBA(355.33,$G(IBBUFDA),0))
"RTN","IBCNBES",44,0)
 ;
"RTN","IBCNBES",45,0)
 S IBFIELD=0 F  S IBFIELD=$O(IBDATA(IBFIELD)) Q:'IBFIELD  D
"RTN","IBCNBES",46,0)
 . S IBVALUE=$$FLDCHK(355.33,IBFIELD,IBDATA(IBFIELD)) Q:'IBVALUE
"RTN","IBCNBES",47,0)
 . S IBARR(355.33,IBBUFDA_",",IBFIELD)=$P(IBVALUE,U,2)
"RTN","IBCNBES",48,0)
 I $D(IBARR)>9 D FILE^DIE("E","IBARR","IBERR")
"RTN","IBCNBES",49,0)
 Q
"RTN","IBCNBES",50,0)
 ;
"RTN","IBCNBES",51,0)
FLDCHK(FILE,FIELD,VALUE) ; minor checks on data: truncate if length too long, if pointer add ' so can be processed as external format
"RTN","IBCNBES",52,0)
 N IBATTR,IBERR,IBX S IBX="1^"_VALUE
"RTN","IBCNBES",53,0)
 I VALUE="" S IBX="0^No data value." G FLDCHKQ
"RTN","IBCNBES",54,0)
 D FIELD^DID(FILE,FIELD,"N","FIELD LENGTH;SPECIFIER","IBATTR","IBERR")
"RTN","IBCNBES",55,0)
 I $D(IBERR) S IBX="0^"_$G(IBERR("DIERR",1,"TEXT",1)) G FLDCHKQ
"RTN","IBCNBES",56,0)
 I $G(IBATTR("SPECIFIER"))["P" S IBX="1^`"_VALUE G FLDCHKQ
"RTN","IBCNBES",57,0)
 I $D(IBATTR("FIELD LENGTH")) S IBX="1^"_$E(VALUE,1,+IBATTR("FIELD LENGTH"))
"RTN","IBCNBES",58,0)
FLDCHKQ Q IBX
"RTN","IBCNBLL")
0^14^B58797432^B59623585
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345**;21-MAR-94;Build 28
"RTN","IBCNBLL",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",6,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",7,0)
 Q
"RTN","IBCNBLL",8,0)
 ;
"RTN","IBCNBLL",9,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",10,0)
 S VALMHDR(1)="Buffer File entries not yet processed."
"RTN","IBCNBLL",11,0)
 S VALMHDR(1)=VALMHDR(1)_"   (sorted by "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",12,0)
 I $P(IBCNSORT,U,3)="" S VALMHDR(1)=VALMHDR(1)_")"
"RTN","IBCNBLL",13,0)
 E  S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first)"
"RTN","IBCNBLL",14,0)
 Q
"RTN","IBCNBLL",15,0)
 ;
"RTN","IBCNBLL",16,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",17,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS")
"RTN","IBCNBLL",18,0)
 I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",19,0)
 D BLD
"RTN","IBCNBLL",20,0)
 Q
"RTN","IBCNBLL",21,0)
 ;
"RTN","IBCNBLL",22,0)
HELP ;  list manager help
"RTN","IBCNBLL",23,0)
 D FULL^VALM1
"RTN","IBCNBLL",24,0)
 W @IOF
"RTN","IBCNBLL",25,0)
 W !,"This screen lists all Insurance plans and policies in the Insurance Buffer",!,"that have not yet been processed (accepted or rejected).",!
"RTN","IBCNBLL",26,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:",!,"   i - Patient has other currently effective Insurance",!,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",27,0)
 W !,"   E - Patient has Expired",!,"   Y - Means Test Copay Patient",!,"   H - Patient has Bills On Hold",!,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",28,0)
 ;
"RTN","IBCNBLL",29,0)
 ; ESG - 6/7/02 - SDD 5.1.9
"RTN","IBCNBLL",30,0)
 ; Help screen description of new symbols
"RTN","IBCNBLL",31,0)
 ;
"RTN","IBCNBLL",32,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",33,0)
 W !!,"IIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",34,0)
 W !,"  The following IIV Status indicators may appear to the left of the"
"RTN","IBCNBLL",35,0)
 W !,"  patient name:"
"RTN","IBCNBLL",36,0)
 W !,"   + - The IIV payer indicated that this is an active policy via"
"RTN","IBCNBLL",37,0)
 W !,"           electronic inquiry/response."
"RTN","IBCNBLL",38,0)
 W !,"   ? - IIV inquiry was sent; awaiting reply from Payer."
"RTN","IBCNBLL",39,0)
 W !,"   # - IIV received an electronic response from the Payer, but was not able to"
"RTN","IBCNBLL",40,0)
 W !,"           determine whether or not the Payer is indicating active coverage.  "
"RTN","IBCNBLL",41,0)
 W !,"           Carefully review the associated IIV Response Report, specifically "
"RTN","IBCNBLL",42,0)
 W !,"           focusing on the Eligibility/Benefits section, if present."
"RTN","IBCNBLL",43,0)
 W !,"           Manual confirmation is required."
"RTN","IBCNBLL",44,0)
 W !,"   ! - IIV was unable to send an electronic inquiry for this insurance "
"RTN","IBCNBLL",45,0)
 W !,"           information. User correction may be required to allow IIV to send "
"RTN","IBCNBLL",46,0)
 W !,"           this inquiry."
"RTN","IBCNBLL",47,0)
 W !,"           Please use the Expand Entry option to see more information."
"RTN","IBCNBLL",48,0)
 W !,"   - - The IIV payer indicated that this is NOT an active policy via "
"RTN","IBCNBLL",49,0)
 W !,"           electronic inquiry/response."
"RTN","IBCNBLL",50,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",51,0)
 W !!,"When an entry is Processed it is either:"
"RTN","IBCNBLL",52,0)
 W !,?3,"Accepted - the Buffer entry's data is stored in the main Insurance files.",!,?12,"- the modified Insurance entry is flagged as Verified.",!,?3,"Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",53,0)
 W !!,"Once an entry is processed (either accepted or rejected) most of the data in ",!,"the Buffer File entry is deleted leaving only a stub entry for tracking ",!,"and reporting purposes."
"RTN","IBCNBLL",54,0)
 W !!,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",55,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLL",56,0)
 Q
"RTN","IBCNBLL",57,0)
 ;
"RTN","IBCNBLL",58,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",59,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",60,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",61,0)
 Q
"RTN","IBCNBLL",62,0)
 ;
"RTN","IBCNBLL",63,0)
BLD ;  build screen display
"RTN","IBCNBLL",64,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",65,0)
 ;
"RTN","IBCNBLL",66,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",67,0)
 ;
"RTN","IBCNBLL",68,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",69,0)
 . S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",70,0)
 ..  S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",71,0)
 ...  ;
"RTN","IBCNBLL",72,0)
 ...  S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",73,0)
 ...  S IBLINE=$$BLDLN(IBBUFDA,IBCNT)
"RTN","IBCNBLL",74,0)
 ...  D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",75,0)
 ;
"RTN","IBCNBLL",76,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",77,0)
 Q
"RTN","IBCNBLL",78,0)
 ;
"RTN","IBCNBLL",79,0)
BLDLN(IBBUFDA,IBCNT) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",80,0)
 N DFN,IB0,IB20,IB60,IBLINE,IBY,VAIN,VADM,VA,VAERR,X,Y,IBMTS S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",81,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",82,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",83,0)
 ;
"RTN","IBCNBLL",84,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",85,0)
 ;
"RTN","IBCNBLL",86,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",87,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",88,0)
 ;
"RTN","IBCNBLL",89,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",90,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,16)
"RTN","IBCNBLL",91,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,23,4)
"RTN","IBCNBLL",92,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,29,17)
"RTN","IBCNBLL",93,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,48,10)
"RTN","IBCNBLL",94,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,60,5)
"RTN","IBCNBLL",95,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",96,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",97,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",98,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",99,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",100,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",101,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",102,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",103,0)
 Q IBLINE
"RTN","IBCNBLL",104,0)
 ;
"RTN","IBCNBLL",105,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",106,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",107,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",108,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",109,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",110,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",111,0)
 Q
"RTN","IBCNBLL",112,0)
 ;
"RTN","IBCNBLL",113,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",114,0)
 ;  1^PATIENT NAME, 2^INS NAME, 3^SOURCE OF INFO, 4^DATE ENTERED, 5^INPATIENT (Y/N), 6^MEANS TEST (Y/N), 7^ON HOLD, 8^VERIFIED, 9^IIV STATUS
"RTN","IBCNBLL",115,0)
 N IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,DFN,VAIN,VA,VAERR,IBX,IBCNT,X,Y S IBCNT=0
"RTN","IBCNBLL",116,0)
 ;
"RTN","IBCNBLL",117,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",118,0)
 ;
"RTN","IBCNBLL",119,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",120,0)
 .  S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",121,0)
 ..   S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",122,0)
 ..   ;
"RTN","IBCNBLL",123,0)
 ..   S IBCNDFN=+$G(^IBA(355.33,IBBUFDA,60)),IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",124,0)
 ..   ;
"RTN","IBCNBLL",125,0)
 ..   I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",126,0)
 ..   I +IBCNSORT=2 S IBCSORT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBLL",127,0)
 ..   I +IBCNSORT=3 S IBCSORT1=$P($G(^IBA(355.33,IBBUFDA,0)),U,3)
"RTN","IBCNBLL",128,0)
 ..   I +IBCNSORT=4 S IBCSORT1=$P(+$G(^IBA(355.33,IBBUFDA,0)),".",1)
"RTN","IBCNBLL",129,0)
 ..   I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",130,0)
 ..   I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",131,0)
 ..   I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",132,0)
 ..   I +IBCNSORT=8 S IBCSORT1=$S(+$P($G(^IBA(355.33,IBBUFDA,0)),U,10):1,1:2)
"RTN","IBCNBLL",133,0)
 ..   ; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",134,0)
 ..   ; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",135,0)
 ..   I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,$$SYMBOL(IBBUFDA)))_"."_$P(+$G(^IBA(355.33,IBBUFDA,0)),".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",136,0)
 ..   ;
"RTN","IBCNBLL",137,0)
 ..   S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",138,0)
 ..   ;
"RTN","IBCNBLL",139,0)
 ..   S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)="" K VAIN,IBCSORT1
"RTN","IBCNBLL",140,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",141,0)
 Q
"RTN","IBCNBLL",142,0)
 ;
"RTN","IBCNBLL",143,0)
DATE(X) ;
"RTN","IBCNBLL",144,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",145,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",146,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",147,0)
 ;
"RTN","IBCNBLL",148,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",149,0)
 NEW IB0,SYM
"RTN","IBCNBLL",150,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",151,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",152,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",153,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",154,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",155,0)
 Q SYM
"RTN","IBCNBLL",156,0)
 ;
"RTN","IBCNBLL",157,0)
 ;
"RTN","IBCNBLL",158,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",159,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",160,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",161,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",162,0)
 ;
"RTN","IBCNBLL",163,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",164,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",165,0)
 ;
"RTN","IBCNBLL",166,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",167,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",168,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",169,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",170,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",171,0)
 ;
"RTN","IBCNBLL",172,0)
 ; if the action is EDITED then the line for the buffer entry is recomplied and the updated line is set into 
"RTN","IBCNBLL",173,0)
 ; the display array
"RTN","IBCNBLL",174,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",175,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2))
"RTN","IBCNBLL",176,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",177,0)
 Q
"RTN","IBCNBMI")
0^7^B52789552^B48902486
"RTN","IBCNBMI",1,0)
IBCNBMI ;ALB/ARH-Ins Buffer: move buffer data to insurance files ; 09 Mar 2005  11:42 AM
"RTN","IBCNBMI",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,246,251,299,345**;21-MAR-94;Build 28
"RTN","IBCNBMI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBMI",4,0)
 ;
"RTN","IBCNBMI",5,0)
INS(IBBUFDA,IBINSDA,TYPE) ;  move buffer insurance company data (file 355.33) to existing Insurance Company (file 36)
"RTN","IBCNBMI",6,0)
 ;
"RTN","IBCNBMI",7,0)
 S IBBUFDA=IBBUFDA_",",IBINSDA=$G(IBINSDA)_","
"RTN","IBCNBMI",8,0)
 D SET("INS",IBBUFDA,IBINSDA,TYPE)
"RTN","IBCNBMI",9,0)
 Q
"RTN","IBCNBMI",10,0)
 ;
"RTN","IBCNBMI",11,0)
GRP(IBBUFDA,IBGRPDA,TYPE) ;  move buffer insurance group/plan data (file 355.33) to existing Group/Plan (file 355.33)
"RTN","IBCNBMI",12,0)
 ;
"RTN","IBCNBMI",13,0)
 S IBBUFDA=IBBUFDA_",",IBGRPDA=$G(IBGRPDA)_","
"RTN","IBCNBMI",14,0)
 D SET("GRP",IBBUFDA,IBGRPDA,TYPE)
"RTN","IBCNBMI",15,0)
 D STUFF("GRP",IBGRPDA)
"RTN","IBCNBMI",16,0)
 Q
"RTN","IBCNBMI",17,0)
 ;
"RTN","IBCNBMI",18,0)
POLICY(IBBUFDA,IBPOLDA,TYPE) ;  move buffer insurance policy data (file 355.33) to existing Patient Policy (file 2.312)
"RTN","IBCNBMI",19,0)
 ;
"RTN","IBCNBMI",20,0)
 N DFN S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) Q:'DFN
"RTN","IBCNBMI",21,0)
 ;
"RTN","IBCNBMI",22,0)
 S IBBUFDA=IBBUFDA_",",IBPOLDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBMI",23,0)
 D SET("POL",IBBUFDA,IBPOLDA,TYPE)
"RTN","IBCNBMI",24,0)
 D STUFF("POL",IBPOLDA)
"RTN","IBCNBMI",25,0)
 D POLOTH(IBBUFDA,IBPOLDA)
"RTN","IBCNBMI",26,0)
 Q
"RTN","IBCNBMI",27,0)
 ;
"RTN","IBCNBMI",28,0)
SET(SET,IBBUFDA,IBEXTDA,TYPE) ; move buffer data to insurance files
"RTN","IBCNBMI",29,0)
 ; Input:  IBBUFDA - ifn of Buffer File entry to move (#355.33)
"RTN","IBCNBMI",30,0)
 ;         IBEXTDA - ifn of insurance entry to update (#36,355.3,2)
"RTN","IBCNBMI",31,0)
 ;         TYPE    - 1 = Merge     (only buffer data moved to blank fields in ins file, no replace)
"RTN","IBCNBMI",32,0)
 ;                   2 = Overwrite (all buffer data moved to ins file, replace existing data)
"RTN","IBCNBMI",33,0)
 ;                   3 = Replace (all buffer data including null move to ins file)
"RTN","IBCNBMI",34,0)
 ;                   4 = Individually Accept (Skip Blanks) (user accepts
"RTN","IBCNBMI",35,0)
 ;  individual diffs b/w buffer data and existing file data (excl blanks)
"RTN","IBCNBMI",36,0)
 ;  to overwrite flds (or addr grp) in existing file)
"RTN","IBCNBMI",37,0)
 ;
"RTN","IBCNBMI",38,0)
 ;
"RTN","IBCNBMI",39,0)
 N IBX,IBFLDS,EXTFILE,DRBUF,DREXT,BUFARR,EXTARR,IBBUFFLD,IBEXTFLD,IBBUFVAL,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",40,0)
 ;
"RTN","IBCNBMI",41,0)
 D FIELDS(SET_"FLD")
"RTN","IBCNBMI",42,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1),DRBUF=$P(IBX,U,2),DREXT=$P(IBX,U,3)
"RTN","IBCNBMI",43,0)
 ;
"RTN","IBCNBMI",44,0)
 D GETS^DIQ(355.33,IBBUFDA,DRBUF,"E","BUFARR")
"RTN","IBCNBMI",45,0)
 D GETS^DIQ(EXTFILE,IBEXTDA,DREXT,"E","EXTARR")
"RTN","IBCNBMI",46,0)
 ;
"RTN","IBCNBMI",47,0)
 I +$G(TYPE) S IBBUFFLD=0 F  S IBBUFFLD=$O(BUFARR(355.33,IBBUFDA,IBBUFFLD)) Q:'IBBUFFLD  D
"RTN","IBCNBMI",48,0)
 . S IBEXTFLD=$G(IBFLDS(IBBUFFLD)) Q:'IBEXTFLD
"RTN","IBCNBMI",49,0)
 . S IBBUFVAL=BUFARR(355.33,IBBUFDA,IBBUFFLD,"E")
"RTN","IBCNBMI",50,0)
 . S IBEXTVAL=$G(EXTARR(EXTFILE,IBEXTDA,IBEXTFLD,"E"))
"RTN","IBCNBMI",51,0)
 . ;
"RTN","IBCNBMI",52,0)
 . I IBBUFVAL=IBEXTVAL Q
"RTN","IBCNBMI",53,0)
 . I TYPE=1,IBEXTVAL'="" Q
"RTN","IBCNBMI",54,0)
 . I TYPE=2,IBBUFVAL="" Q
"RTN","IBCNBMI",55,0)
 . I TYPE=4,'$D(^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)) Q
"RTN","IBCNBMI",56,0)
 . ;
"RTN","IBCNBMI",57,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBBUFVAL
"RTN","IBCNBMI",58,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",59,0)
 ;
"RTN","IBCNBMI",60,0)
 I $D(IBCHNGN)>9 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",61,0)
 I $D(IBCHNG)>9 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",62,0)
 Q
"RTN","IBCNBMI",63,0)
 ;
"RTN","IBCNBMI",64,0)
STUFF(SET,IBEXTDA) ; update fields in insurance files that should be automatically set when an entry is edited
"RTN","IBCNBMI",65,0)
 ; Input:  IBEXTDA - ifn of insurance entry to update (#36,356,2)
"RTN","IBCNBMI",66,0)
 ;
"RTN","IBCNBMI",67,0)
 N IBX,IBFLDS,EXTFILE,IBEXTFLD,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",68,0)
 ;
"RTN","IBCNBMI",69,0)
 D FIELDS(SET_"A")
"RTN","IBCNBMI",70,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1)
"RTN","IBCNBMI",71,0)
 ;
"RTN","IBCNBMI",72,0)
 S IBEXTFLD=0 F  S IBEXTFLD=$O(IBFLDS(IBEXTFLD)) Q:'IBEXTFLD  D
"RTN","IBCNBMI",73,0)
 . S IBEXTVAL=IBFLDS(IBEXTFLD) I IBEXTVAL="DUZ" S IBEXTVAL="`"_DUZ
"RTN","IBCNBMI",74,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBEXTVAL
"RTN","IBCNBMI",75,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",76,0)
 ;
"RTN","IBCNBMI",77,0)
 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",78,0)
 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",79,0)
 Q
"RTN","IBCNBMI",80,0)
 ;
"RTN","IBCNBMI",81,0)
FIELDS(SET) ; return array of corresponding fields: IBFLDS(Buffer #)=Ins #
"RTN","IBCNBMI",82,0)
 N IBI,IBLN,IBB,IBE,IBG K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBMI",83,0)
 F IBI=1:1 S IBLN=$P($T(@(SET)+IBI),";;",2) Q:IBLN=""  I $E(IBLN,1)'=" " D
"RTN","IBCNBMI",84,0)
 . S IBB=$P(IBLN,U,1),IBE=$P(IBLN,U,2),IBG=$P(IBLN,U,4)
"RTN","IBCNBMI",85,0)
 . I IBB'="",IBE'="" D
"RTN","IBCNBMI",86,0)
 .. S IBFLDS(IBB)=IBE
"RTN","IBCNBMI",87,0)
 .. I SET["FLD" S IBLBLS(IBB)=$P(IBLN,U,3) I +IBG S IBADDS(IBB)=IBE
"RTN","IBCNBMI",88,0)
 Q
"RTN","IBCNBMI",89,0)
 ;
"RTN","IBCNBMI",90,0)
INSDR ;
"RTN","IBCNBMI",91,0)
 ;;36^20.02:20.04;21.01:21.06^.131;.132;.133;.111:.116
"RTN","IBCNBMI",92,0)
INSFLD ; corresponding fields:  Buffer File (355.33) and Insurance Company file (36)
"RTN","IBCNBMI",93,0)
 ;;20.02^.131^Phone Number^           ; MM Phone Number
"RTN","IBCNBMI",94,0)
 ;;20.03^.132^Billing Phone^          ; Billing Phone Number
"RTN","IBCNBMI",95,0)
 ;;20.04^.133^Pre-Cert Phone^         ; Pre-Certification Phone Number
"RTN","IBCNBMI",96,0)
 ;;21.01^.111^Street [Line 1]^1       ; MM Street Address [Line 1]
"RTN","IBCNBMI",97,0)
 ;;21.02^.112^Street [Line 2]^1       ; MM Street Address [Line 2]
"RTN","IBCNBMI",98,0)
 ;;21.03^.113^Street [Line 3]^1       ; MM Street Address [Line 3]
"RTN","IBCNBMI",99,0)
 ;;21.04^.114^City^1                  ; MM City
"RTN","IBCNBMI",100,0)
 ;;21.05^.115^State^1                 ; MM State
"RTN","IBCNBMI",101,0)
 ;;21.06^.116^Zip^1                   ; MM Zip Code
"RTN","IBCNBMI",102,0)
 ;
"RTN","IBCNBMI",103,0)
GRPDR ;
"RTN","IBCNBMI",104,0)
 ;;355.3^40.02:40.03;40.1;40.11;40.04:40.09;^.03:.04;6.02;6.03;.05:.09;.12
"RTN","IBCNBMI",105,0)
GRPFLD ;corresponding fields:  Buffer File (355.33) and Insurance Group Plan file (355.3)
"RTN","IBCNBMI",106,0)
 ;;40.02^.03^Group Name^              ; Group Name
"RTN","IBCNBMI",107,0)
 ;;40.03^.04^Group Number^            ; Group Number
"RTN","IBCNBMI",108,0)
 ;;40.1^6.02^BIN^                     ; BIN ;;Daou/EEN
"RTN","IBCNBMI",109,0)
 ;;40.11^6.03^PCN^                    ; PCN ;;Daou/EEN
"RTN","IBCNBMI",110,0)
 ;;40.04^.05^Require UR^              ; Utilization Review Required
"RTN","IBCNBMI",111,0)
 ;;40.05^.06^Require Pre-Cert^        ; Pre-Certification Required
"RTN","IBCNBMI",112,0)
 ;;40.06^.12^Require Amb Cert^        ; Ambulatory Care Certification
"RTN","IBCNBMI",113,0)
 ;;40.07^.07^Exclude Pre-Cond^        ; Exclude Pre-Existing Conditions
"RTN","IBCNBMI",114,0)
 ;;40.08^.08^Benefits Assign^         ; Benefits Assignable
"RTN","IBCNBMI",115,0)
 ;;40.09^.09^Type of Plan^            ; Type of Plan
"RTN","IBCNBMI",116,0)
 ;
"RTN","IBCNBMI",117,0)
GRPA ; auto set fields
"RTN","IBCNBMI",118,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",119,0)
 ;;1.06^DUZ^                          ; Last edited By
"RTN","IBCNBMI",120,0)
 ;
"RTN","IBCNBMI",121,0)
POLDR ;
"RTN","IBCNBMI",122,0)
 ;;2.312^60.02:61.12^8;3;1;6;16;17;3.01;3.05;4.01;4.02;.2;2.1;2.015;2.11;2.12;2.01:2.08
"RTN","IBCNBMI",123,0)
POLFLD ; corresponding fields:  Buffer File (355.33) and Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",124,0)
 ;;60.02^8^Effective Date^            ; Effective Date
"RTN","IBCNBMI",125,0)
 ;;60.03^3^Expiration Date^           ; Expiration Date
"RTN","IBCNBMI",126,0)
 ;;60.04^1^Subscriber Id^             ; Subscriber Id
"RTN","IBCNBMI",127,0)
 ;;60.05^6^Whose Insurance^           ; Whose Insurance
"RTN","IBCNBMI",128,0)
 ;;60.06^16^Relationship^             ; Pt. Relationship to Insured
"RTN","IBCNBMI",129,0)
 ;;60.07^17^Name of Insured^          ; Name of Insured
"RTN","IBCNBMI",130,0)
 ;;60.08^3.01^Insured's DOB^          ; Insured's DOB
"RTN","IBCNBMI",131,0)
 ;;60.09^3.05^Insured's SSN^          ; Insured's SSN
"RTN","IBCNBMI",132,0)
 ;;60.1^4.01^Primary Provider^        ; Primary Care Provider
"RTN","IBCNBMI",133,0)
 ;;60.11^4.02^Provider Phone^         ; Primary Care Provider Phone
"RTN","IBCNBMI",134,0)
 ;;60.12^.2^Coor of Benefits^         ; Coordination of Benefits
"RTN","IBCNBMI",135,0)
 ;;  
"RTN","IBCNBMI",136,0)
 ;;61.01^2.1^Emp Sponsored^           ; ESGHP?
"RTN","IBCNBMI",137,0)
 ;;61.02^2.015^Employer Name^         ; Subscriber's Employer Name
"RTN","IBCNBMI",138,0)
 ;;61.03^2.11^Emp Status^             ; Employment Status
"RTN","IBCNBMI",139,0)
 ;;61.04^2.12^Retirement Date^        ; Retirement Date
"RTN","IBCNBMI",140,0)
 ;;61.05^2.01^Send to Employer^       ; Send Bill to Employer?
"RTN","IBCNBMI",141,0)
 ;;61.06^2.02^Emp Street Ln 1^1       ; Employer Claims Street Line 1
"RTN","IBCNBMI",142,0)
 ;;61.07^2.03^Emp Street Ln 2^1       ; Employer Claims Street Line 2
"RTN","IBCNBMI",143,0)
 ;;61.08^2.04^Emp Street Ln 3^1       ; Employer Claims Street Line 3
"RTN","IBCNBMI",144,0)
 ;;61.09^2.05^Emp City^1              ; Employer Claims City
"RTN","IBCNBMI",145,0)
 ;;61.1^2.06^Emp State^1              ; Employer Claims State
"RTN","IBCNBMI",146,0)
 ;;61.11^2.07^Emp Zip Code^1          ; Employer Claims Zip Code
"RTN","IBCNBMI",147,0)
 ;;61.12^2.08^Emp Phone^              ; Employer Claims Phone
"RTN","IBCNBMI",148,0)
 ;
"RTN","IBCNBMI",149,0)
POLA ; auto set fields
"RTN","IBCNBMI",150,0)
 ;;1.03^NOW^                          ; Date Last Verified (default is person that accepts entry)
"RTN","IBCNBMI",151,0)
 ;;1.04^DUZ^                          ; Verified By        (default is person that accepts entry)
"RTN","IBCNBMI",152,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",153,0)
 ;;1.06^DUZ^                          ; Last Edited By
"RTN","IBCNBMI",154,0)
 ;
"RTN","IBCNBMI",155,0)
 ;
"RTN","IBCNBMI",156,0)
POLOTH(IBBUFDA,IBPOLDA) ; other special cases that can not be transferred using the generic code above, usually because of dependencies
"RTN","IBCNBMI",157,0)
 N IB0 S IB0=$G(^IBA(355.33,+IBBUFDA,0))
"RTN","IBCNBMI",158,0)
 ;
"RTN","IBCNBMI",159,0)
 ;  --- if buffer entry was verified before the accept step, then add the correct verifier info to the policy
"RTN","IBCNBMI",160,0)
 I +$P(IB0,U,10) D
"RTN","IBCNBMI",161,0)
 . S IBCHNG(2.312,IBPOLDA,1.03)=$E($P(IB0,U,10),1,12),IBCHNGN(2.312,IBPOLDA,1.03)=""
"RTN","IBCNBMI",162,0)
 . S IBCHNG(2.312,IBPOLDA,1.04)=$P(IB0,U,11),IBCHNGN(2.312,IBPOLDA,1.04)=""
"RTN","IBCNBMI",163,0)
 ;
"RTN","IBCNBMI",164,0)
 I $D(IBCHNGN)>9 D FILE^DIE("I","IBCHNGN","IBERR")
"RTN","IBCNBMI",165,0)
 I $D(IBCHNG)>9 D FILE^DIE("I","IBCHNG","IBERR")
"RTN","IBCNBMI",166,0)
 Q
"RTN","IBCNBMI",167,0)
 ;
"RTN","IBCNBMI",168,0)
PAT(DFN,IBPOLDA) ; Force DOB & SSN from Patient file (#2) in to Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",169,0)
 N DA,DR,DIE,DOB,SSN,IENS,WI
"RTN","IBCNBMI",170,0)
 S IENS=IBPOLDA_","_DFN_","
"RTN","IBCNBMI",171,0)
 S WI=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNBMI",172,0)
 I WI'="v" Q  ; Only use when Whose Insurance is 'v'
"RTN","IBCNBMI",173,0)
 S DOB=$$GET1^DIQ(2,DFN,.03,"I")
"RTN","IBCNBMI",174,0)
 S SSN=$$GET1^DIQ(2,DFN,.09,"I")
"RTN","IBCNBMI",175,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN,DA=IBPOLDA
"RTN","IBCNBMI",176,0)
 S DR="3.01///^S X=DOB;3.05///^S X=SSN"
"RTN","IBCNBMI",177,0)
 D ^DIE
"RTN","IBCNBMI",178,0)
 Q
"RTN","IBCNEDE2")
0^2^B63218575^B62755710
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - IIV PRE REG EXTRACT (APPTS) ;18-JUN-2002
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,249,345**;21-MAR-94;Build 28
"RTN","IBCNEDE2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ;
"RTN","IBCNEDE2",15,0)
 N TODAYSDT,FRESHDAY,SLCCRIT1,MAXCNT,CNT,ENDDT,CLNC,FRESHDT
"RTN","IBCNEDE2",16,0)
 N APTDT,INREC,INSIEN,PAYER,PIEN,PAYERSTR,SYMBOL,SUPPBUFF
"RTN","IBCNEDE2",17,0)
 N DFN,OK,VAIN,INS,DATA1,DATA2,ELG,PAYERID,SETSTR,SRVICEDT,ACTINS
"RTN","IBCNEDE2",18,0)
 N TQIEN,IBINDT,IBOUTP,QURYFLAG,INSNAME,FOUND1,FOUND2,IBCNETOT
"RTN","IBCNEDE2",19,0)
 N SID,SIDACT,SIDDATA,SCNT5,SIDARRAY,SIDCNT,IBDDI,IBINS,DISYS
"RTN","IBCNEDE2",20,0)
 ;
"RTN","IBCNEDE2",21,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",22,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",23,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",24,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",25,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",26,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",27,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",28,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",29,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",30,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",31,0)
 K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)   ; Clean TMP globals
"RTN","IBCNEDE2",32,0)
 ;
"RTN","IBCNEDE2",33,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",34,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",35,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",36,0)
 . ;
"RTN","IBCNEDE2",37,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",38,0)
 . ;
"RTN","IBCNEDE2",39,0)
 . S ^TMP("IBCNEDE2",$J,CLNC)=""
"RTN","IBCNEDE2",40,0)
 ;
"RTN","IBCNEDE2",41,0)
 ; Set up variables for scheduling call and call
"RTN","IBCNEDE2",42,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE2",43,0)
 S IBSDA(1)=DT_";"_ENDDT
"RTN","IBCNEDE2",44,0)
 S IBSDA(2)="^TMP(""IBCNEDE2"",$J,"
"RTN","IBCNEDE2",45,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE2",46,0)
 I $$SDAPI^SDAMA301(.IBSDA)<1 D ERRMSG G ENQ
"RTN","IBCNEDE2",47,0)
 ;
"RTN","IBCNEDE2",48,0)
 ;
"RTN","IBCNEDE2",49,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",50,0)
 ; Loop through clinics returned
"RTN","IBCNEDE2",51,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  Q:$G(ZTSTOP)!(CNT'<MAXCNT)
"RTN","IBCNEDE2",52,0)
 . ;
"RTN","IBCNEDE2",53,0)
 . ; Loop through patients returned
"RTN","IBCNEDE2",54,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",55,0)
 .. ;
"RTN","IBCNEDE2",56,0)
 .. S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",57,0)
 .. ;
"RTN","IBCNEDE2",58,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE2",59,0)
 .. F  S APTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",60,0)
 ... ;
"RTN","IBCNEDE2",61,0)
 ... S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",62,0)
 ... S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",63,0)
 ... ;
"RTN","IBCNEDE2",64,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",65,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",66,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",67,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",68,0)
 ... ;
"RTN","IBCNEDE2",69,0)
 ... S IBSDATA=$G(^TMP($J,"SDAMA301",CLNC,DFN,APTDT))
"RTN","IBCNEDE2",70,0)
 ... S ELG=$P(IBSDATA,U,8)
"RTN","IBCNEDE2",71,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",72,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",73,0)
 ... I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",74,0)
 ... ;
"RTN","IBCNEDE2",75,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",76,0)
 ... ; D INP Q:'OK     ; No longer check for inpatient status
"RTN","IBCNEDE2",77,0)
 ... ;
"RTN","IBCNEDE2",78,0)
 ... K ACTINS
"RTN","IBCNEDE2",79,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",1)
"RTN","IBCNEDE2",80,0)
 ... ;
"RTN","IBCNEDE2",81,0)
 ... I '$D(ACTINS(0)) D NOACTIVE Q   ; Patient has no active ins
"RTN","IBCNEDE2",82,0)
 ... ;
"RTN","IBCNEDE2",83,0)
 ... S INREC=0 ; Record ien
"RTN","IBCNEDE2",84,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",85,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",86,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",87,0)
 ... . ;
"RTN","IBCNEDE2",88,0)
 ... . ; check for ins. to exclude (i.e. Medicare/Medicaid)
"RTN","IBCNEDE2",89,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",90,0)
 ... . ;
"RTN","IBCNEDE2",91,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",92,0)
 ... . ;
"RTN","IBCNEDE2",93,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",94,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",95,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",96,0)
 ... . ;
"RTN","IBCNEDE2",97,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",98,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",99,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",100,0)
 ... . ;
"RTN","IBCNEDE2",101,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",102,0)
 ... . ;  date range
"RTN","IBCNEDE2",103,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",104,0)
 ... . ;
"RTN","IBCNEDE2",105,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",106,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",107,0)
 ... . ;
"RTN","IBCNEDE2",108,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",109,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",110,0)
 ... . ;
"RTN","IBCNEDE2",111,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",112,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",113,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",114,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",115,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",116,0)
 ... . S SCNT5=$S(SIDACT=5:1,1:0)
"RTN","IBCNEDE2",117,0)
 ... . I CNT+SCNT5+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",118,0)
 ... . ;
"RTN","IBCNEDE2",119,0)
 ... . S SID=""
"RTN","IBCNEDE2",120,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D SET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE2",121,0)
 ... . I SIDACT=4!(SIDACT=5) D SET("","")
"RTN","IBCNEDE2",122,0)
 ... . Q
"RTN","IBCNEDE2",123,0)
 ... Q
"RTN","IBCNEDE2",124,0)
ENQ K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)
"RTN","IBCNEDE2",125,0)
 Q
"RTN","IBCNEDE2",126,0)
 ;
"RTN","IBCNEDE2",127,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",128,0)
 S OK=1
"RTN","IBCNEDE2",129,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",130,0)
 Q
"RTN","IBCNEDE2",131,0)
 ;
"RTN","IBCNEDE2",132,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",133,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",134,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",135,0)
 S OK=1
"RTN","IBCNEDE2",136,0)
 Q
"RTN","IBCNEDE2",137,0)
 ;
"RTN","IBCNEDE2",138,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",139,0)
 D INP^VADPT
"RTN","IBCNEDE2",140,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",141,0)
 K VAIN
"RTN","IBCNEDE2",142,0)
 S OK=1
"RTN","IBCNEDE2",143,0)
 Q
"RTN","IBCNEDE2",144,0)
 ;
"RTN","IBCNEDE2",145,0)
NOACTIVE ; No active insurance
"RTN","IBCNEDE2",146,0)
 ;
"RTN","IBCNEDE2",147,0)
 ; Call IB utility to search for patient's inactive insurance
"RTN","IBCNEDE2",148,0)
 ; IBCNS passes back IBINS = 1 if active insurance was found
"RTN","IBCNEDE2",149,0)
 ; IBCNS sets the array IBDD to the patient's valid insurance
"RTN","IBCNEDE2",150,0)
 ; IBCNS sets the array IBDDI to the patient's invalid insurance
"RTN","IBCNEDE2",151,0)
 ;
"RTN","IBCNEDE2",152,0)
 N SVIBDDI
"RTN","IBCNEDE2",153,0)
 K IBINS,IBDD,IBDDI
"RTN","IBCNEDE2",154,0)
 S IBINDT=APTDT,IBOUTP=2,(FOUND1,FOUND2)=0
"RTN","IBCNEDE2",155,0)
 ;
"RTN","IBCNEDE2",156,0)
 D ^IBCNS
"RTN","IBCNEDE2",157,0)
 K IBDD           ; don't need this array
"RTN","IBCNEDE2",158,0)
 I $G(IBINS)=1 Q  ; if active insurance was found quit
"RTN","IBCNEDE2",159,0)
 M SVIBDDI=IBDDI
"RTN","IBCNEDE2",160,0)
 ; Inactive Insurance
"RTN","IBCNEDE2",161,0)
 I CNT<MAXCNT,$D(IBDDI)>0 S FOUND2=$$INAC^IBCNEDE6(.CNT,MAXCNT,.IBDDI,SRVICEDT,FRESHDAY,1)
"RTN","IBCNEDE2",162,0)
 M IBDDI=SVIBDDI
"RTN","IBCNEDE2",163,0)
 ;
"RTN","IBCNEDE2",164,0)
 ; Most Popular Payer
"RTN","IBCNEDE2",165,0)
 I CNT<MAXCNT S FOUND1=$$POP^IBCNEDE4(.CNT,MAXCNT,SRVICEDT,FRESHDAY,1,.IBDDI)
"RTN","IBCNEDE2",166,0)
 ;
"RTN","IBCNEDE2",167,0)
 I 'FOUND1,'FOUND2,(CNT<MAXCNT) D BLANKTQ
"RTN","IBCNEDE2",168,0)
 ;
"RTN","IBCNEDE2",169,0)
 K INS,IBBDI
"RTN","IBCNEDE2",170,0)
 Q
"RTN","IBCNEDE2",171,0)
 ;
"RTN","IBCNEDE2",172,0)
SET(SID,INR) ; Set data in TQ
"RTN","IBCNEDE2",173,0)
 ;
"RTN","IBCNEDE2",174,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",175,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",176,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",177,0)
 ;
"RTN","IBCNEDE2",178,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",179,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",180,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",181,0)
 ;
"RTN","IBCNEDE2",182,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",183,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",184,0)
 ;
"RTN","IBCNEDE2",185,0)
 Q
"RTN","IBCNEDE2",186,0)
 ;
"RTN","IBCNEDE2",187,0)
BLANKTQ ; no new records were created in file 365.1 for this DFN
"RTN","IBCNEDE2",188,0)
 ; need to check if a blank inquiry exists (patient w/o a payer)
"RTN","IBCNEDE2",189,0)
 ; if it doesn't exist create a new blank inquiry
"RTN","IBCNEDE2",190,0)
 ;
"RTN","IBCNEDE2",191,0)
 ; Check for at least 1 other VAMC a patient has traveled to
"RTN","IBCNEDE2",192,0)
 I $$TFL^IBCNEDE6(DFN)=0 Q
"RTN","IBCNEDE2",193,0)
 ;
"RTN","IBCNEDE2",194,0)
 N DISYS
"RTN","IBCNEDE2",195,0)
 S PIEN=$$FIND1^DIC(365.12,,"X","~NO PAYER"),SID=""
"RTN","IBCNEDE2",196,0)
 ;
"RTN","IBCNEDE2",197,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE2",198,0)
 ;  date range
"RTN","IBCNEDE2",199,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",200,0)
 ; 
"RTN","IBCNEDE2",201,0)
 ; Update service dates for inquiry to be transmitted - necessary here?
"RTN","IBCNEDE2",202,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",203,0)
 ;
"RTN","IBCNEDE2",204,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY,1) G BLANKXT
"RTN","IBCNEDE2",205,0)
 ;
"RTN","IBCNEDE2",206,0)
 S QURYFLAG="I" D SET("","")
"RTN","IBCNEDE2",207,0)
 S PIEN=""
"RTN","IBCNEDE2",208,0)
BLANKXT ;
"RTN","IBCNEDE2",209,0)
 Q
"RTN","IBCNEDE2",210,0)
 ;
"RTN","IBCNEDE2",211,0)
ERRMSG ; Send a message indicating an extract error has occured
"RTN","IBCNEDE2",212,0)
 N MGRP,XMSUB,MSG,IBX,IBM
"RTN","IBCNEDE2",213,0)
 ;
"RTN","IBCNEDE2",214,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE2",215,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE2",216,0)
 ;
"RTN","IBCNEDE2",217,0)
 S XMSUB="IIV Problem: Appointment Extract"
"RTN","IBCNEDE2",218,0)
 S MSG(1)="On "_$$FMTE^XLFDT(DT)_" the Appointment Extract for IIV encountered one or more"
"RTN","IBCNEDE2",219,0)
 S MSG(2)="errors while attempting to get Appointment data from the scheduling"
"RTN","IBCNEDE2",220,0)
 S MSG(3)="package."
"RTN","IBCNEDE2",221,0)
 S MSG(4)=""
"RTN","IBCNEDE2",222,0)
 S MSG(5)="Error(s) encountered: "
"RTN","IBCNEDE2",223,0)
 S MSG(6)=""
"RTN","IBCNEDE2",224,0)
 S MSG(7)="  Error Code   Error Message"
"RTN","IBCNEDE2",225,0)
 S MSG(8)="  ----------   -------------"
"RTN","IBCNEDE2",226,0)
 S IBM=8,IBX=0 F  S IBX=$O(^TMP($J,"SDAMA301",IBX)) Q:IBX=""  S IBM=IBM+1,MSG(IBM)="  "_$$LJ^XLFSTR(IBX,13)_$G(^TMP($J,"SDAMA301",IBX))
"RTN","IBCNEDE2",227,0)
 S IBM=IBM+1,MSG(IBM)=""
"RTN","IBCNEDE2",228,0)
 S IBM=IBM+1,MSG(IBM)="As a result of this error the extract was not done.  The extract"
"RTN","IBCNEDE2",229,0)
 S IBM=IBM+1,MSG(IBM)="will be attempted again the next night automatically.  If you"
"RTN","IBCNEDE2",230,0)
 S IBM=IBM+1,MSG(IBM)="continue to receive error messages you should contact your IRM"
"RTN","IBCNEDE2",231,0)
 S IBM=IBM+1,MSG(IBM)="and possibly log a NOIS call for assistance."
"RTN","IBCNEDE2",232,0)
 ;
"RTN","IBCNEDE2",233,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE2",234,0)
 ;
"RTN","IBCNEDE2",235,0)
 Q
"RTN","IBCNEDE6")
0^4^B30305878^B27396831
"RTN","IBCNEDE6",1,0)
IBCNEDE6 ;DAOU/DAC - IIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345**;21-MAR-94;Build 28
"RTN","IBCNEDE6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE6",4,0)
 ;
"RTN","IBCNEDE6",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE6",6,0)
 ;
"RTN","IBCNEDE6",7,0)
INAC(IBCNCNT,MAXNUM,IBDDI,SRVICEDT,FDAYS,APPTFLG) ;Get Inactive Insurances
"RTN","IBCNEDE6",8,0)
 ; DAOU/BHS - 10/15/2002 - Replaced VRFDT w/ FDAYS (fresh days value)
"RTN","IBCNEDE6",9,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE6",10,0)
 ;
"RTN","IBCNEDE6",11,0)
 NEW IDATA,INCP,IEN,TQIEN,INS,INACT,DATA1,DATA2,FRESHDT
"RTN","IBCNEDE6",12,0)
 NEW PAYER,PAYERID,RESULT,FOUND,SIDARRAY,SIDACT,SIDCNT,SID,INREC
"RTN","IBCNEDE6",13,0)
 ;
"RTN","IBCNEDE6",14,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE6",15,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE6",16,0)
 ; extract was created.
"RTN","IBCNEDE6",17,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE6",18,0)
 ;
"RTN","IBCNEDE6",19,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE6",20,0)
 S IDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE6",21,0)
 S INACT=$P(IDATA,U,8)
"RTN","IBCNEDE6",22,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",23,0)
 ;
"RTN","IBCNEDE6",24,0)
 ;  If the search for inactive insurances is 'No', quit
"RTN","IBCNEDE6",25,0)
 I 'INACT G INACX
"RTN","IBCNEDE6",26,0)
 ;
"RTN","IBCNEDE6",27,0)
 S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:INCP=""  D  Q:IBCNCNT'<MAXNUM
"RTN","IBCNEDE6",28,0)
 . S IEN="" F  S IEN=$O(^DPT(DFN,.312,"B",INCP,IEN)) Q:IEN=""  D
"RTN","IBCNEDE6",29,0)
 .. S INS=$P(^DPT(DFN,.312,IEN,0),U)
"RTN","IBCNEDE6",30,0)
 .. ;
"RTN","IBCNEDE6",31,0)
 .. ;Check for Medicare/Medicaid
"RTN","IBCNEDE6",32,0)
 .. I $$EXCLUDE^IBCNEUT4($P($G(^DIC(36,INS,0)),U)) Q
"RTN","IBCNEDE6",33,0)
 .. ;
"RTN","IBCNEDE6",34,0)
 .. ;  Check for insurance company payer, etc.
"RTN","IBCNEDE6",35,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INS)
"RTN","IBCNEDE6",36,0)
 .. I $P(RESULT,U)'="" Q
"RTN","IBCNEDE6",37,0)
 .. ;
"RTN","IBCNEDE6",38,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3)
"RTN","IBCNEDE6",39,0)
 .. I ('PAYER)!(PAYERID="") Q
"RTN","IBCNEDE6",40,0)
 .. ;
"RTN","IBCNEDE6",41,0)
 .. S FOUND=1  ; potential inquiry
"RTN","IBCNEDE6",42,0)
 .. ;
"RTN","IBCNEDE6",43,0)
 .. ; Update service date based on payer's allowed range
"RTN","IBCNEDE6",44,0)
 .. D UPDDTS(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",45,0)
 .. ;  update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",46,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",47,0)
 .. ;  check for outstanding/current entries in File 356.1
"RTN","IBCNEDE6",48,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE6",49,0)
 .. ;
"RTN","IBCNEDE6",50,0)
 .. ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE6",51,0)
 .. ;
"RTN","IBCNEDE6",52,0)
 .. K SIDARRAY
"RTN","IBCNEDE6",53,0)
 .. S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE6",54,0)
 .. S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE6",55,0)
 .. ;  Add to SIDCNT to compensate for a TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",56,0)
 .. I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE6",57,0)
 .. I IBCNCNT+SIDCNT>MAXNUM S IBCNCNT=MAXNUM Q  ; see if TQ entries will exceed MAXNUM
"RTN","IBCNEDE6",58,0)
 .. S SID="" F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE6",59,0)
 ... S INREC=$P(SID,"_",2)   ; which patient ins rec ID is from
"RTN","IBCNEDE6",60,0)
 ... D INACSET($P(SID,"_"),INREC)
"RTN","IBCNEDE6",61,0)
 ... ; 
"RTN","IBCNEDE6",62,0)
 .. ;  Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",63,0)
 .. I (SIDACT=5)!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D INACSET("","")
"RTN","IBCNEDE6",64,0)
 K SIDARRAY
"RTN","IBCNEDE6",65,0)
INACX ;
"RTN","IBCNEDE6",66,0)
 Q FOUND
"RTN","IBCNEDE6",67,0)
 ;
"RTN","IBCNEDE6",68,0)
INACSET(SID,INREC) ; INAC. SET
"RTN","IBCNEDE6",69,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",70,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",71,0)
 N FRESH
"RTN","IBCNEDE6",72,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",73,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE6",74,0)
 ;
"RTN","IBCNEDE6",75,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE6",76,0)
 ; it is.
"RTN","IBCNEDE6",77,0)
 I APPTFLG S DATA2=2    ; appt extract IBCNEDE2
"RTN","IBCNEDE6",78,0)
 I 'APPTFLG S DATA2=4   ; no ins extract IBCNEDE4
"RTN","IBCNEDE6",79,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE6",80,0)
 ;
"RTN","IBCNEDE6",81,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE6",82,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",83,0)
 ;
"RTN","IBCNEDE6",84,0)
 Q
"RTN","IBCNEDE6",85,0)
 ;
"RTN","IBCNEDE6",86,0)
UPDDTS(PIEN,SVDT,FRDT) ;  Update service date and freshness date per payer
"RTN","IBCNEDE6",87,0)
 ; date parameters FUTURE SERVICE DAYS (365.121,.14) and PAST SERVICE
"RTN","IBCNEDE6",88,0)
 ; DAYS (365.121,.15)
"RTN","IBCNEDE6",89,0)
 ; Output:
"RTN","IBCNEDE6",90,0)
 ;  SVDT - passed by reference - updates service date
"RTN","IBCNEDE6",91,0)
 ;  FRDT - passed by reference - updates freshness date - except for 
"RTN","IBCNEDE6",92,0)
 ;         INAC where it is optional
"RTN","IBCNEDE6",93,0)
 N FDAYS,PDAYS,DIFF,AIEN,DATA,OSVDT,EDTFLG
"RTN","IBCNEDE6",94,0)
 ;
"RTN","IBCNEDE6",95,0)
 ; Init vars - save original service date to calc diff
"RTN","IBCNEDE6",96,0)
 S (FDAYS,PDAYS,EDTFLG)=0,OSVDT=SVDT
"RTN","IBCNEDE6",97,0)
 ; Determine Payer App IEN
"RTN","IBCNEDE6",98,0)
 S AIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE6",99,0)
 I AIEN="" Q  ; Quit without changing if app is not defined
"RTN","IBCNEDE6",100,0)
 S DATA=$G(^IBE(365.12,PIEN,1,AIEN,0))
"RTN","IBCNEDE6",101,0)
 I DATA="" Q  ; Quit without changing if node is not defined
"RTN","IBCNEDE6",102,0)
 S FDAYS=$P(DATA,U,14),PDAYS=$P(DATA,U,15)
"RTN","IBCNEDE6",103,0)
 ; DAOU/WCW - Overriding this to allow service date of only today
"RTN","IBCNEDE6",104,0)
 ;            for the time being - setting params to 0
"RTN","IBCNEDE6",105,0)
 S FDAYS=0,PDAYS=0
"RTN","IBCNEDE6",106,0)
 ; Process past service days if not null
"RTN","IBCNEDE6",107,0)
 I PDAYS'="" D
"RTN","IBCNEDE6",108,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",109,0)
 . I PDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",110,0)
 . ; If non-zero and service date is earlier than the allowed
"RTN","IBCNEDE6",111,0)
 . ;  payer service date range, reset service date to earliest allowed
"RTN","IBCNEDE6",112,0)
 . ;  date for the payer
"RTN","IBCNEDE6",113,0)
 . I PDAYS,SVDT<$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1) D
"RTN","IBCNEDE6",114,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1),EDTFLG=1
"RTN","IBCNEDE6",115,0)
 ; Process future service days if not edited and if not null
"RTN","IBCNEDE6",116,0)
 I EDTFLG=0,FDAYS'="" D
"RTN","IBCNEDE6",117,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",118,0)
 . I FDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",119,0)
 . ; If non-zero and service date is later than the allowed
"RTN","IBCNEDE6",120,0)
 . ;  payer service date range, reset service date to latest allowed
"RTN","IBCNEDE6",121,0)
 . ;  date for the payer
"RTN","IBCNEDE6",122,0)
 . I FDAYS,SVDT>$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1) D
"RTN","IBCNEDE6",123,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1),EDTFLG=1
"RTN","IBCNEDE6",124,0)
 ;
"RTN","IBCNEDE6",125,0)
 ; Determine if difference exists
"RTN","IBCNEDE6",126,0)
 I EDTFLG,$G(FRDT)'="" S FRDT=$$FMADD^XLFDT(FRDT,$$FMDIFF^XLFDT(SVDT,OSVDT))
"RTN","IBCNEDE6",127,0)
 ;
"RTN","IBCNEDE6",128,0)
 Q
"RTN","IBCNEDE6",129,0)
 ;
"RTN","IBCNEDE6",130,0)
BLANKTQ(SRVICEDT,FRESHDT,YDAYS,IBCNCNT) ; 
"RTN","IBCNEDE6",131,0)
 ; This tag is only called from PROCESS^IBCNEDE4 
"RTN","IBCNEDE6",132,0)
 ; No new records were created in file 365.1 for this DFN.
"RTN","IBCNEDE6",133,0)
 ; Need to check if an inquiry for any payer exists for this DFN within
"RTN","IBCNEDE6",134,0)
 ; the freshness period.  If it doesn't exist create a new blank inquiry
"RTN","IBCNEDE6",135,0)
 ;
"RTN","IBCNEDE6",136,0)
 ; Input
"RTN","IBCNEDE6",137,0)
 ;    SRVICEDT - Service Date
"RTN","IBCNEDE6",138,0)
 ;    FRESHDT - Freshness Date
"RTN","IBCNEDE6",139,0)
 ;    YDAYS - 
"RTN","IBCNEDE6",140,0)
 ;    IBCNCNT - updated - Counter for the extract
"RTN","IBCNEDE6",141,0)
 ;
"RTN","IBCNEDE6",142,0)
 I $$TFL^IBCNEDE6(DFN)=0 Q
"RTN","IBCNEDE6",143,0)
 ;
"RTN","IBCNEDE6",144,0)
 N PAYER,DATA1,DATA2,TQIEN
"RTN","IBCNEDE6",145,0)
 ;
"RTN","IBCNEDE6",146,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEDE6",147,0)
 ;
"RTN","IBCNEDE6",148,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE6",149,0)
 ;  date range
"RTN","IBCNEDE6",150,0)
 D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",151,0)
 ;
"RTN","IBCNEDE6",152,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",153,0)
 D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",154,0)
 ;
"RTN","IBCNEDE6",155,0)
 ; Are we allowed to add it to the TQ file
"RTN","IBCNEDE6",156,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS,1) G BLANKXT
"RTN","IBCNEDE6",157,0)
 ;
"RTN","IBCNEDE6",158,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",159,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",160,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEDE6",161,0)
 ;
"RTN","IBCNEDE6",162,0)
 ; The hardcoded '4' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE6",163,0)
 ; the file 365.1 that it is the no active insurance extract.
"RTN","IBCNEDE6",164,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEDE6",165,0)
 ;
"RTN","IBCNEDE6",166,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2),PAYER=""
"RTN","IBCNEDE6",167,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",168,0)
 ;
"RTN","IBCNEDE6",169,0)
BLANKXT ;
"RTN","IBCNEDE6",170,0)
 Q
"RTN","IBCNEDE6",171,0)
 ;
"RTN","IBCNEDE6",172,0)
TFL(DFN) ; Examines treating facility list,
"RTN","IBCNEDE6",173,0)
 ; value returned is 1 if patient has visited at least one other site
"RTN","IBCNEDE6",174,0)
 N IBC,IBZ,IBS
"RTN","IBCNEDE6",175,0)
 D TFL^VAFCTFU1(.IBZ,DFN) Q:-$G(IBZ(1))=1 0
"RTN","IBCNEDE6",176,0)
 S IBS=+$P($$SITE^VASITE,"^",3),(IBZ,IBC)=0
"RTN","IBCNEDE6",177,0)
 ; Look for remote facilities of type VAMC:
"RTN","IBCNEDE6",178,0)
 F  S IBZ=$O(IBZ(IBZ)) Q:IBZ<1  I +IBZ(IBZ)>0,+IBZ(IBZ)'=IBS,$P(IBZ(IBZ),U,5)="VAMC" S IBC=1 Q
"RTN","IBCNEDE6",179,0)
 Q IBC
"RTN","IBCNEHL1")
0^8^B32996551^B32619299
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002  ; Compiled December 16, 2004 15:29:01
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345**;21-MAR-94;Build 28
"RTN","IBCNEHL1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;  
"RTN","IBCNEHL1",11,0)
 ;  This routine is based on IBCNEHLR which was introduced with patch 184, and subsequently
"RTN","IBCNEHL1",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLR is obsolete and deleted with patch 300.
"RTN","IBCNEHL1",13,0)
 ;
"RTN","IBCNEHL1",14,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHL1",15,0)
 ;  DAOU/BHS     10/04/2002  Added logic to update the service date in
"RTN","IBCNEHL1",16,0)
 ;                           the TQ entry so long as the Error Action is
"RTN","IBCNEHL1",17,0)
 ;                           not Please submit original transaction.
"RTN","IBCNEHL1",18,0)
 ;  DAOU/DB      03/11/2004  Added logic to utilize new status flag
"RTN","IBCNEHL1",19,0)
 ;                           transmitted to VistA from EC (IIVSTAT)
"RTN","IBCNEHL1",20,0)
 ;               03/15/2004  Update other retries to comm failure (if
"RTN","IBCNEHL1",21,0)
 ;                           not response rcvd)
"RTN","IBCNEHL1",22,0)
 ;  DAOU/BEE     07/14/2004  Cleaned up routine - Made more readable
"RTN","IBCNEHL1",23,0)
 ;                           Cleaned up variables                          
"RTN","IBCNEHL1",24,0)
 ;  PROXICOM/RTO 08/23/2006  Fixed logic issue when determining whether
"RTN","IBCNEHL1",25,0)
 ;                           to update a buffer entry
"RTN","IBCNEHL1",26,0)
 ;
"RTN","IBCNEHL1",27,0)
 ;  Variables
"RTN","IBCNEHL1",28,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHL1",29,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHL1",30,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",31,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHL1",32,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL1",33,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL1",34,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL1",35,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL1",36,0)
 ;    IIVSTAT = EC generated flag interpreting status of response
"RTN","IBCNEHL1",37,0)
 ;              1 = +
"RTN","IBCNEHL1",38,0)
 ;              6 = -
"RTN","IBCNEHL1",39,0)
 ;              V = #
"RTN","IBCNEHL1",40,0)
 ;    MAP = Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",41,0)
 ;
"RTN","IBCNEHL1",42,0)
EN ; Entry Point
"RTN","IBCNEHL1",43,0)
 N EBDA,ERFLG,ERROR,HCT,IIVSTAT,IRIEN,MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP,ACK
"RTN","IBCNEHL1",44,0)
 S ERFLG=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",45,0)
 ;
"RTN","IBCNEHL1",46,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",47,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",48,0)
 ;
"RTN","IBCNEHL1",49,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",50,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",51,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHL1",52,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",53,0)
 . ;
"RTN","IBCNEHL1",54,0)
 . I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q:ERFLG
"RTN","IBCNEHL1",55,0)
 . ;
"RTN","IBCNEHL1",56,0)
 . ;  Contact Segment
"RTN","IBCNEHL1",57,0)
 . I SEG="CTD" D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",58,0)
 . ;
"RTN","IBCNEHL1",59,0)
 . ;  Patient Segment
"RTN","IBCNEHL1",60,0)
 . I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",61,0)
 . ;
"RTN","IBCNEHL1",62,0)
 . ;  Guarantor Segment
"RTN","IBCNEHL1",63,0)
 . I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID)
"RTN","IBCNEHL1",64,0)
 . ;
"RTN","IBCNEHL1",65,0)
 . ;  Insurance Segment
"RTN","IBCNEHL1",66,0)
 . I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID)
"RTN","IBCNEHL1",67,0)
 . ;
"RTN","IBCNEHL1",68,0)
 . ;  Addt'l Insurance Segment
"RTN","IBCNEHL1",69,0)
 . ;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",70,0)
 . ;
"RTN","IBCNEHL1",71,0)
 . ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",72,0)
 . I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",73,0)
 . ;
"RTN","IBCNEHL1",74,0)
 . ;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",75,0)
 . I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",76,0)
 . ;
"RTN","IBCNEHL1",77,0)
 . ;  Notes Segment
"RTN","IBCNEHL1",78,0)
 . I SEG="NTE" D NTE^IBCNEHL2(EBDA,.IBSEG,RIEN)
"RTN","IBCNEHL1",79,0)
 ;
"RTN","IBCNEHL1",80,0)
 D FIL
"RTN","IBCNEHL1",81,0)
 Q
"RTN","IBCNEHL1",82,0)
 ;
"RTN","IBCNEHL1",83,0)
 ; =================================================================
"RTN","IBCNEHL1",84,0)
FIL ;  Finish processing the response message
"RTN","IBCNEHL1",85,0)
 ;
"RTN","IBCNEHL1",86,0)
 ; Input Variables
"RTN","IBCNEHL1",87,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",88,0)
 ;
"RTN","IBCNEHL1",89,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",90,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",91,0)
 ;
"RTN","IBCNEHL1",92,0)
 N BUFF,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",93,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",94,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",95,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",96,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",97,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",98,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",99,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",100,0)
 ;
"RTN","IBCNEHL1",101,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",102,0)
 ; send a warning email message
"RTN","IBCNEHL1",103,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",104,0)
 I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT
"RTN","IBCNEHL1",105,0)
 ;
"RTN","IBCNEHL1",106,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",107,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",108,0)
 ;
"RTN","IBCNEHL1",109,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",110,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",111,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",112,0)
 ;
"RTN","IBCNEHL1",113,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",114,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",115,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",116,0)
 ;
"RTN","IBCNEHL1",117,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",118,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",119,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",120,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",121,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",122,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",123,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",124,0)
 ;
"RTN","IBCNEHL1",125,0)
 ;  Check for error action
"RTN","IBCNEHL1",126,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",127,0)
 ;
"RTN","IBCNEHL1",128,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",129,0)
 S FILEIT=1
"RTN","IBCNEHL1",130,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",131,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",132,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",133,0)
 . S FILEIT=0
"RTN","IBCNEHL1",134,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",135,0)
 ;
"RTN","IBCNEHL1",136,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",137,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",138,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",139,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",140,0)
 I BUFF'="",($P(^IBA(355.33,BUFF,0),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",141,0)
 ;
"RTN","IBCNEHL1",142,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",143,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",144,0)
 ;
"RTN","IBCNEHL1",145,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",146,0)
 ;  response data
"RTN","IBCNEHL1",147,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",148,0)
 ;
"RTN","IBCNEHL1",149,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",150,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",151,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",152,0)
 ;
"RTN","IBCNEHL1",153,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL1",154,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",155,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",156,0)
FILX ;
"RTN","IBCNEHL1",157,0)
 Q
"RTN","IBCNEHL1",158,0)
 ;
"RTN","IBCNEHL1",159,0)
 ; =================================================================
"RTN","IBCNEHL1",160,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL1",161,0)
 ;
"RTN","IBCNEHL1",162,0)
 ; Input Variables
"RTN","IBCNEHL1",163,0)
 ; ERROR, TRACE
"RTN","IBCNEHL1",164,0)
 ;
"RTN","IBCNEHL1",165,0)
 ; Output Variables
"RTN","IBCNEHL1",166,0)
 ; ERFLG=1
"RTN","IBCNEHL1",167,0)
 ;
"RTN","IBCNEHL1",168,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL1",169,0)
 S VEN=0,MCT=8,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL1",170,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL1",171,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL1",172,0)
 S MSG(3)="*** IRM *** Please log a NOIS because the"
"RTN","IBCNEHL1",173,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL1",174,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL1",175,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL1",176,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL1",177,0)
 S MSG(8)="please review the response with the eIV Response Report by Trace#."
"RTN","IBCNEHL1",178,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL1",179,0)
 . F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  D
"RTN","IBCNEHL1",180,0)
 . . S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL1",181,0)
 . S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL1",182,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL1",183,0)
 Q
"RTN","IBCNEHL1",184,0)
 ;
"RTN","IBCNEHL1",185,0)
 ; =================================================================
"RTN","IBCNEHL1",186,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL1",187,0)
 ; encountered problem filing date
"RTN","IBCNEHL1",188,0)
 ;
"RTN","IBCNEHL1",189,0)
 ; Input Variables
"RTN","IBCNEHL1",190,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL1",191,0)
 ;
"RTN","IBCNEHL1",192,0)
 ; Output Variables
"RTN","IBCNEHL1",193,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL1",194,0)
 ;
"RTN","IBCNEHL1",195,0)
 N DFN,SYMBOL
"RTN","IBCNEHL1",196,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL1",197,0)
 ;
"RTN","IBCNEHL1",198,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL1",199,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL1",200,0)
 ;
"RTN","IBCNEHL1",201,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",202,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",203,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",204,0)
 ;
"RTN","IBCNEHL1",205,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL1",206,0)
 ; create buffer entry
"RTN","IBCNEHL1",207,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL1",208,0)
 ;
"RTN","IBCNEHL1",209,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL1",210,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL1",211,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL1",212,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL1",213,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL1",214,0)
 ;
"RTN","IBCNEHL1",215,0)
 ;Update buffer symbol
"RTN","IBCNEHL1",216,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL1",217,0)
 ;
"RTN","IBCNEHL1",218,0)
 Q
"RTN","IBCNEHL2")
0^10^B48625538^B48954965
"RTN","IBCNEHL2",1,0)
IBCNEHL2 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:29:37
"RTN","IBCNEHL2",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345**;21-MAR-94;Build 28
"RTN","IBCNEHL2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL2",4,0)
 ;
"RTN","IBCNEHL2",5,0)
 ;**Program Description**
"RTN","IBCNEHL2",6,0)
 ;  This pgm will process the indiv segments of the
"RTN","IBCNEHL2",7,0)
 ;  incoming IIV response msgs.
"RTN","IBCNEHL2",8,0)
 ;
"RTN","IBCNEHL2",9,0)
 ; * Each of these tags are called by IBCNEHL1.
"RTN","IBCNEHL2",10,0)
 ; 
"RTN","IBCNEHL2",11,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL2",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL2",13,0)
 ;
"RTN","IBCNEHL2",14,0)
 ;  Variables
"RTN","IBCNEHL2",15,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL2",16,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL2",17,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL2",18,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL2",19,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL2",20,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL2",21,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL2",22,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL2",23,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL2",24,0)
 ;
"RTN","IBCNEHL2",25,0)
 Q  ; No direct calls
"RTN","IBCNEHL2",26,0)
 ;
"RTN","IBCNEHL2",27,0)
MSA(ERACT,ERCON,ERROR,ERTXT,IBSEG,MGRP,RIEN,TRACE) ;  Process the MSA seg
"RTN","IBCNEHL2",28,0)
 ;
"RTN","IBCNEHL2",29,0)
 ;  Input:
"RTN","IBCNEHL2",30,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL2",31,0)
 ;
"RTN","IBCNEHL2",32,0)
 ;  Output:
"RTN","IBCNEHL2",33,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL2",34,0)
 ;
"RTN","IBCNEHL2",35,0)
 D MSA^IBCNEHL4
"RTN","IBCNEHL2",36,0)
 Q
"RTN","IBCNEHL2",37,0)
 ;
"RTN","IBCNEHL2",38,0)
CTD(ERROR,IBSEG,RIEN) ; Process the CTD seg
"RTN","IBCNEHL2",39,0)
 ;
"RTN","IBCNEHL2",40,0)
 ; Input:
"RTN","IBCNEHL2",41,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",42,0)
 ;
"RTN","IBCNEHL2",43,0)
 ; Output:
"RTN","IBCNEHL2",44,0)
 ; ERROR
"RTN","IBCNEHL2",45,0)
 ;
"RTN","IBCNEHL2",46,0)
 N CTNAME,CTQUAL,CTNUM,CTQIEN,D1,DA,DATA,DIC,DILN,DISYS,DLAYGO,FFL,FLD,IENS,II,RSUPDT,X,Y
"RTN","IBCNEHL2",47,0)
 ;
"RTN","IBCNEHL2",48,0)
 ;  Parse out data from seg
"RTN","IBCNEHL2",49,0)
 S CTNAME=$G(IBSEG(3)),CTQUAL=$P($G(IBSEG(6)),$E(HLECH),9),CTNUM=$P($G(IBSEG(6)),$E(HLECH))
"RTN","IBCNEHL2",50,0)
 I $TR(CTNAME," ")="" S CTNAME="NOT SPECIFIED"
"RTN","IBCNEHL2",51,0)
 S CTQIEN=$$FIND1^DIC(365.021,"","X",CTQUAL)
"RTN","IBCNEHL2",52,0)
 I CTNAME[$E(HLECH) S CTNAME=$$DECHL7($$FMNAME^HLFNC(CTNAME,HLECH))
"RTN","IBCNEHL2",53,0)
 S CTNAME=$E(CTNAME,1,32)
"RTN","IBCNEHL2",54,0)
 ;
"RTN","IBCNEHL2",55,0)
 ;  Look up contact person
"RTN","IBCNEHL2",56,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",3,",DIC(0)="LZ",DLAYGO=365.03
"RTN","IBCNEHL2",57,0)
 I '$D(^IBCN(365,DA(1),3,0)) S ^IBCN(365,DA(1),3,0)="^365.03^^"
"RTN","IBCNEHL2",58,0)
 S X=CTNAME D ^DIC
"RTN","IBCNEHL2",59,0)
 S DA=+Y,DATA=^IBCN(365,DA(1),3,DA,0),FLD=2,FFL=0
"RTN","IBCNEHL2",60,0)
 ;
"RTN","IBCNEHL2",61,0)
 ;  Check if contact already has this communication qualifier on file
"RTN","IBCNEHL2",62,0)
 F II=2,4,6 I $P(DATA,U,II)=CTQIEN S FLD=II,FFL=1 Q
"RTN","IBCNEHL2",63,0)
 I 'FFL F II=2,4,6 I $P(DATA,U,II)="" S FLD=II Q
"RTN","IBCNEHL2",64,0)
 ;
"RTN","IBCNEHL2",65,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",66,0)
 S RSUPDT(365.03,IENS,".0"_(FLD+1))=CTNUM
"RTN","IBCNEHL2",67,0)
 S RSUPDT(365.03,IENS,".0"_FLD)=CTQIEN
"RTN","IBCNEHL2",68,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",69,0)
CTDX ;
"RTN","IBCNEHL2",70,0)
 Q
"RTN","IBCNEHL2",71,0)
 ;
"RTN","IBCNEHL2",72,0)
PID(ERFLG,ERROR,IBSEG,RIEN) ;  Process the PID seg
"RTN","IBCNEHL2",73,0)
 ;
"RTN","IBCNEHL2",74,0)
 ; Input:
"RTN","IBCNEHL2",75,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",76,0)
 ;
"RTN","IBCNEHL2",77,0)
 ; Output:
"RTN","IBCNEHL2",78,0)
 ; ERFLG,ERROR
"RTN","IBCNEHL2",79,0)
 ;
"RTN","IBCNEHL2",80,0)
 D PID^IBCNEHL4
"RTN","IBCNEHL2",81,0)
 Q
"RTN","IBCNEHL2",82,0)
 ;
"RTN","IBCNEHL2",83,0)
GT1(ERROR,IBSEG,RIEN,SUBID) ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL2",84,0)
 ;
"RTN","IBCNEHL2",85,0)
 ; Input:
"RTN","IBCNEHL2",86,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",87,0)
 ;
"RTN","IBCNEHL2",88,0)
 ; Output:
"RTN","IBCNEHL2",89,0)
 ; ERROR,SUBID
"RTN","IBCNEHL2",90,0)
 ;
"RTN","IBCNEHL2",91,0)
 D GT1^IBCNEHL4
"RTN","IBCNEHL2",92,0)
 Q
"RTN","IBCNEHL2",93,0)
 ;
"RTN","IBCNEHL2",94,0)
IN1(ERROR,IBSEG,RIEN,SUBID) ;  Process the IN1 Insurance seg
"RTN","IBCNEHL2",95,0)
 ;
"RTN","IBCNEHL2",96,0)
 ; Input:
"RTN","IBCNEHL2",97,0)
 ; IBSEG,RIEN,SUBID,ACK
"RTN","IBCNEHL2",98,0)
 ;
"RTN","IBCNEHL2",99,0)
 ; Output:
"RTN","IBCNEHL2",100,0)
 ; ERROR
"RTN","IBCNEHL2",101,0)
 ;
"RTN","IBCNEHL2",102,0)
 N COB,EFFDT,EXPDT,GNAME,GNUMB,MBRID,PAYRID,PYRNM,RSUPDT,SRVDT
"RTN","IBCNEHL2",103,0)
 N PYLEDT,CERDT,RELTN
"RTN","IBCNEHL2",104,0)
 ;
"RTN","IBCNEHL2",105,0)
 ; Austin sending responses with an error indicator will populate IBSEG(3) w/ 
"RTN","IBCNEHL2",106,0)
 ;9 zeros in order to send the HL7 required field when the payer does not 
"RTN","IBCNEHL2",107,0)
 ;send a value for this field
"RTN","IBCNEHL2",108,0)
 S MBRID=$$DECHL7($G(IBSEG(3))) I ACK="AE",($TR(MBRID,0)="") S MBRID=""
"RTN","IBCNEHL2",109,0)
 S PAYRID=$G(IBSEG(4)),PYRNM=$G(IBSEG(5))
"RTN","IBCNEHL2",110,0)
 S GNAME=$$DECHL7($G(IBSEG(10))),GNUMB=$$DECHL7($G(IBSEG(9)))
"RTN","IBCNEHL2",111,0)
 S EFFDT=$G(IBSEG(13)),EXPDT=$G(IBSEG(14))
"RTN","IBCNEHL2",112,0)
 S COB=$G(IBSEG(23)),SRVDT=$G(IBSEG(27))
"RTN","IBCNEHL2",113,0)
 S PYLEDT=$G(IBSEG(30)),RELTN=$G(IBSEG(18))
"RTN","IBCNEHL2",114,0)
 ;
"RTN","IBCNEHL2",115,0)
 ; Relationship codes sent through the HL7 msg are X12 codes
"RTN","IBCNEHL2",116,0)
 ; X12 codes from the interface "01"=spouse, "18"=self "21"=unknown, "34"=other adult
"RTN","IBCNEHL2",117,0)
 S RELTN=$S(RELTN="01":"02",RELTN="18":"01",RELTN="21":"09",1:"")
"RTN","IBCNEHL2",118,0)
 S EFFDT=$$FMDATE^HLFNC(EFFDT),EXPDT=$$FMDATE^HLFNC(EXPDT)
"RTN","IBCNEHL2",119,0)
 S SRVDT=$$FMDATE^HLFNC(SRVDT),PYLEDT=$$FMDATE^HLFNC(PYLEDT)
"RTN","IBCNEHL2",120,0)
 ;
"RTN","IBCNEHL2",121,0)
 S RSUPDT(365,RIEN_",",1.05)=$S($G(SUBID)'="":SUBID,1:MBRID)
"RTN","IBCNEHL2",122,0)
 S RSUPDT(365,RIEN_",",1.07)=GNUMB
"RTN","IBCNEHL2",123,0)
 S RSUPDT(365,RIEN_",",1.06)=GNAME,RSUPDT(365,RIEN_",",1.11)=EFFDT
"RTN","IBCNEHL2",124,0)
 S RSUPDT(365,RIEN_",",1.12)=EXPDT,RSUPDT(365,RIEN_",",1.1)=SRVDT
"RTN","IBCNEHL2",125,0)
 S RSUPDT(365,RIEN_",",1.19)=PYLEDT
"RTN","IBCNEHL2",126,0)
 S RSUPDT(365,RIEN_",",1.13)=COB,RSUPDT(365,RIEN_",",1.18)=MBRID
"RTN","IBCNEHL2",127,0)
 S RSUPDT(365,RIEN_",",1.09)=RELTN
"RTN","IBCNEHL2",128,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",129,0)
IN1X ;
"RTN","IBCNEHL2",130,0)
 Q
"RTN","IBCNEHL2",131,0)
 ;
"RTN","IBCNEHL2",132,0)
IN3(ERROR,IBSEG,RIEN) ;  Process IN3 Addt'l Insurance - Cert Seg
"RTN","IBCNEHL2",133,0)
 ;
"RTN","IBCNEHL2",134,0)
 ; Input:
"RTN","IBCNEHL2",135,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",136,0)
 ;
"RTN","IBCNEHL2",137,0)
 ; Output:
"RTN","IBCNEHL2",138,0)
 ; ERROR
"RTN","IBCNEHL2",139,0)
 ;
"RTN","IBCNEHL2",140,0)
 N CRDT,RSUPDT
"RTN","IBCNEHL2",141,0)
 ;
"RTN","IBCNEHL2",142,0)
 S CRDT=$G(IBSEG(7))
"RTN","IBCNEHL2",143,0)
 S CRDT=$$FMDATE^HLFNC(CRDT)
"RTN","IBCNEHL2",144,0)
 S RSUPDT(365,RIEN_",",1.17)=CRDT
"RTN","IBCNEHL2",145,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",146,0)
IN3X ;
"RTN","IBCNEHL2",147,0)
 Q
"RTN","IBCNEHL2",148,0)
 ;
"RTN","IBCNEHL2",149,0)
ZEB(EBDA,ERROR,IBSEG,RIEN) ;  Process the ZEB Elig/Benefit seg
"RTN","IBCNEHL2",150,0)
 ;
"RTN","IBCNEHL2",151,0)
 ; Input:
"RTN","IBCNEHL2",152,0)
 ; IBSEG,IIVSTAT,RIEN
"RTN","IBCNEHL2",153,0)
 ;
"RTN","IBCNEHL2",154,0)
 ; Output:
"RTN","IBCNEHL2",155,0)
 ; EBDA,ERROR
"RTN","IBCNEHL2",156,0)
 ;
"RTN","IBCNEHL2",157,0)
 N D1,DA,DIC,DILN,DISYS,DLAYGO,EBN,IENS,II,MSG,RSUPDT,SUBJECT,X,XMY,Y,MA
"RTN","IBCNEHL2",158,0)
 ;
"RTN","IBCNEHL2",159,0)
 ; Set a default IIV Status value of # ("V")
"RTN","IBCNEHL2",160,0)
 I IIVSTAT="" D
"RTN","IBCNEHL2",161,0)
 .   I IBSEG(7)'="IIV Eligibility Determination" S IIVSTAT="V" Q
"RTN","IBCNEHL2",162,0)
 .   I $F("_1_6_V_","_"_IBSEG(3)_"_") S IIVSTAT=IBSEG(3) Q
"RTN","IBCNEHL2",163,0)
 .   ; Unknown code received from the EC
"RTN","IBCNEHL2",164,0)
 .   S SUBJECT="IIV: Invalid Eligibility Status flag"
"RTN","IBCNEHL2",165,0)
 .   S MSG(1)="An invalid Eligibility Status flag '"_$G(IBSEG(3))_"' was received for site "_$P($$SITE^VASITE,"^",3)_","
"RTN","IBCNEHL2",166,0)
 .   S MSG(2)="trace number "_$G(TRACE,"unknown")_" and message control id "_$G(MSGID,"unknown")_"."
"RTN","IBCNEHL2",167,0)
 .   S MSG(3)="It has been interpreted as an ambiguous response in VistA."
"RTN","IBCNEHL2",168,0)
 .   S XMY("FSCECADMIN@mail.va.gov")=""
"RTN","IBCNEHL2",169,0)
 .   D MSG^IBCNEUT5("",SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEHL2",170,0)
 .   S IIVSTAT="V"
"RTN","IBCNEHL2",171,0)
 ;
"RTN","IBCNEHL2",172,0)
 ; Process the ZEB
"RTN","IBCNEHL2",173,0)
 S EBN=$G(IBSEG(2))
"RTN","IBCNEHL2",174,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",2,",DIC(0)="L",DLAYGO=365.02
"RTN","IBCNEHL2",175,0)
 I '$D(^IBCN(365,DA(1),2,0)) S ^IBCN(365,DA(1),2,0)="^365.02^^"
"RTN","IBCNEHL2",176,0)
 S X=EBN D ^DIC
"RTN","IBCNEHL2",177,0)
 S DA=+Y,EBDA=DA
"RTN","IBCNEHL2",178,0)
 ;
"RTN","IBCNEHL2",179,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",180,0)
 ;
"RTN","IBCNEHL2",181,0)
 ; decode plan description ZEB segment
"RTN","IBCNEHL2",182,0)
 S IBSEG(7)=$$DECHL7($G(IBSEG(7)))
"RTN","IBCNEHL2",183,0)
 F II=2:1:7 S RSUPDT(365.02,IENS,".0"_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",184,0)
 S MA=$G(IBSEG(9)) I $TR(MA," ","")'="" S MA=$J(MA,0,2)
"RTN","IBCNEHL2",185,0)
 S RSUPDT(365.02,IENS,".08")=MA                     ; Monetary amt
"RTN","IBCNEHL2",186,0)
 S RSUPDT(365.02,IENS,".09")=$G(IBSEG(10))          ; Percent
"RTN","IBCNEHL2",187,0)
 S RSUPDT(365.02,IENS,".1")=$G(IBSEG(11))           ; Quantity Qual.
"RTN","IBCNEHL2",188,0)
 F II=11:1:13 S RSUPDT(365.02,IENS,"."_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",189,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL2",190,0)
ZEBX ;
"RTN","IBCNEHL2",191,0)
 Q
"RTN","IBCNEHL2",192,0)
 ;
"RTN","IBCNEHL2",193,0)
NTE(EBDA,IBSEG,RIEN) ; Process NTE Notes seg
"RTN","IBCNEHL2",194,0)
 ;
"RTN","IBCNEHL2",195,0)
 ; Input:
"RTN","IBCNEHL2",196,0)
 ; EBDA,IBSEG,RIEN
"RTN","IBCNEHL2",197,0)
 ;
"RTN","IBCNEHL2",198,0)
 ; Output:
"RTN","IBCNEHL2",199,0)
 ; ERROR
"RTN","IBCNEHL2",200,0)
 ;
"RTN","IBCNEHL2",201,0)
 N DA,IENS,NOTES
"RTN","IBCNEHL2",202,0)
 I $G(EBDA)="" Q
"RTN","IBCNEHL2",203,0)
 S NOTES(1)=$$DECHL7($G(IBSEG(4)))
"RTN","IBCNEHL2",204,0)
 S DA(1)=RIEN,DA=EBDA
"RTN","IBCNEHL2",205,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",206,0)
 D WP^DIE(365.02,IENS,2,"A","NOTES","ERROR")
"RTN","IBCNEHL2",207,0)
NTEX ;
"RTN","IBCNEHL2",208,0)
 Q
"RTN","IBCNEHL2",209,0)
 ;
"RTN","IBCNEHL2",210,0)
DECHL7(STR,HLSEP,ECHARS) ; Decode HL7 escape seqs in data fields
"RTN","IBCNEHL2",211,0)
 ;
"RTN","IBCNEHL2",212,0)
 ; Input:
"RTN","IBCNEHL2",213,0)
 ; STR = Field data possible containing HL7 escape seqs for encoding chars
"RTN","IBCNEHL2",214,0)
 ; HLSEP (opt) = HL7 Field sep. char - assumes HLFS if not passed
"RTN","IBCNEHL2",215,0)
 ; ECHARS (opt) = HL7 encoding chars being used, assumes HL("ECH") if not passed
"RTN","IBCNEHL2",216,0)
 ;
"RTN","IBCNEHL2",217,0)
 ; Output Values
"RTN","IBCNEHL2",218,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHL2",219,0)
 ;
"RTN","IBCNEHL2",220,0)
 N ESC,PAT,REPL,ECODE,PCE
"RTN","IBCNEHL2",221,0)
 ; Initialize opt. params.
"RTN","IBCNEHL2",222,0)
 I $G(HLSEP)="" S HLSEP=HLFS
"RTN","IBCNEHL2",223,0)
 I $G(ECHARS)="" S ECHARS=HL("ECH")
"RTN","IBCNEHL2",224,0)
 ;
"RTN","IBCNEHL2",225,0)
 S ESC=$E(ECHARS,3) ; Escape char.
"RTN","IBCNEHL2",226,0)
 ; Check for escape seqs, quit if not
"RTN","IBCNEHL2",227,0)
 I STR'[ESC G DECHL7X
"RTN","IBCNEHL2",228,0)
 ; Replace ^ w/{sp} (if any) to prevent filing problems
"RTN","IBCNEHL2",229,0)
 S ECHARS=$TR(ECHARS,"^"," ")
"RTN","IBCNEHL2",230,0)
 ;
"RTN","IBCNEHL2",231,0)
 ; Array of rep. chars
"RTN","IBCNEHL2",232,0)
 S REPL("F")=$TR(HLSEP,"^"," ") ;Field Sep
"RTN","IBCNEHL2",233,0)
 S REPL("S")=$E(ECHARS)     ;Comp Sep
"RTN","IBCNEHL2",234,0)
 S REPL("R")=$E(ECHARS,2)   ;Rep. sep
"RTN","IBCNEHL2",235,0)
 ; Temp. replace w/ASC 26, until after other ESC are stripped
"RTN","IBCNEHL2",236,0)
 S REPL("E")=$C(26)  ;Esc. sep
"RTN","IBCNEHL2",237,0)
 S REPL("T")=$E(ECHARS,4)   ;Subcomp. sep
"RTN","IBCNEHL2",238,0)
 ;
"RTN","IBCNEHL2",239,0)
 ; Translate out escape seqs left->right
"RTN","IBCNEHL2",240,0)
 F PCE=1:1:($L(STR,ESC)-1)\2 D
"RTN","IBCNEHL2",241,0)
 . ; Ignore empty esc. or unrec. esc. seq.
"RTN","IBCNEHL2",242,0)
 . S ECODE=$P(STR,ESC,2) I ECODE="" S ECODE="XXXX"
"RTN","IBCNEHL2",243,0)
 . I $D(REPL(ECODE))'>0 S STR=$P(STR,ESC)_$C(26)_$P(STR,ESC,2)_$C(26)_$P(STR,ESC,3,99999) Q
"RTN","IBCNEHL2",244,0)
 . ; Else, replace esc. seq. w/ char.
"RTN","IBCNEHL2",245,0)
 . S STR=$P(STR,ESC)_$G(REPL(ECODE))_$P(STR,ESC,3,99999)
"RTN","IBCNEHL2",246,0)
 ;
"RTN","IBCNEHL2",247,0)
 ;Replace the decoded ESC chars that were actually sent
"RTN","IBCNEHL2",248,0)
 S STR=$TR(STR,$C(26),ESC)
"RTN","IBCNEHL2",249,0)
 ;
"RTN","IBCNEHL2",250,0)
DECHL7X ; Exit w/return values
"RTN","IBCNEHL2",251,0)
 Q STR
"RTN","IBCNERP8")
0^9^B55076349^B54393232
"RTN","IBCNERP8",1,0)
IBCNERP8 ;DAOU/BHS - IBCNE IIV STATISTICAL REPORT COMPILE ;11-JUN-2002
"RTN","IBCNERP8",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345**;21-MAR-94;Build 28
"RTN","IBCNERP8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP8",4,0)
 ;
"RTN","IBCNERP8",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP8",6,0)
 ;
"RTN","IBCNERP8",7,0)
 ;Input vars from IBCNERP7:
"RTN","IBCNERP8",8,0)
 ; IBCNERTN = "IBCNERP7"
"RTN","IBCNERP8",9,0)
 ; **IBCNESPC array ONLY passed by reference **
"RTN","IBCNERP8",10,0)
 ; IBCNESPC("BEGDTM") = Start Dt/Tm for rpt range
"RTN","IBCNERP8",11,0)
 ; IBCNESPC("ENDDTM") = End Dt/Tm for rpt range
"RTN","IBCNERP8",12,0)
 ; IBCNESPC("SECTS")  = 1 - All sections OR ',' sep'd list of 1 or more
"RTN","IBCNERP8",13,0)
 ;  of the following (not all)
"RTN","IBCNERP8",14,0)
 ;  2 - Outgoing data, inq trans stats
"RTN","IBCNERP8",15,0)
 ;  3 - Incoming data, resps rec'd stats
"RTN","IBCNERP8",16,0)
 ;  4 - Current status, pending resps, queued inqs, deferred inqs, payer
"RTN","IBCNERP8",17,0)
 ;      stats, ins buf stats
"RTN","IBCNERP8",18,0)
 ; IBCNESPC("MM") = "" - do not generate MailMan message OR MAILGROUP to
"RTN","IBCNERP8",19,0)
 ;  send report to Mail Group as defined in the IB site parameters
"RTN","IBCNERP8",20,0)
 ;Output vars:
"RTN","IBCNERP8",21,0)
 ; Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP8",22,0)
 ; may be built
"RTN","IBCNERP8",23,0)
 ; 1 OR contains 2 --> 
"RTN","IBCNERP8",24,0)
 ; ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",25,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",26,0)
 ; 1 OR contains 3 --> 
"RTN","IBCNERP8",27,0)
 ; ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",28,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",29,0)
 ; 1 OR contains 4 --> 
"RTN","IBCNERP8",30,0)
 ; ^TMP($J,RTN,"CUR")=TotPendingResponses^TotQueuedInquiries^...
"RTN","IBCNERP8",31,0)
 ;  TotDeferredInquiries(Hold)^TotInsCosw/oNationalID^...
"RTN","IBCNERP8",32,0)
 ;  ToteIIVPyrsDisabldLocally^TotInsBufVerified^TotalManVerified...
"RTN","IBCNERP8",33,0)
 ;  TotalIIVVerified^TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP8",34,0)
 ;  ? InsBufSubtotal^- InsBufSubtotal^Other InsBufSubtotal
"RTN","IBCNERP8",35,0)
 ; 1 OR contains 4 -->
"RTN","IBCNERP8",36,0)
 ; ^TMP($J,RTN,"PYR",PAYER,IEN)=""  (list of new payers)
"RTN","IBCNERP8",37,0)
 ;
"RTN","IBCNERP8",38,0)
 ; Must call at EN
"RTN","IBCNERP8",39,0)
 Q
"RTN","IBCNERP8",40,0)
 ;
"RTN","IBCNERP8",41,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP8",42,0)
 ; Init vars
"RTN","IBCNERP8",43,0)
 N IBBDT,IBEDT,IBSCT,IBTOT,PIECES,VALUE,CT
"RTN","IBCNERP8",44,0)
 ;
"RTN","IBCNERP8",45,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP8",46,0)
 ;
"RTN","IBCNERP8",47,0)
 S IBTOT=0
"RTN","IBCNERP8",48,0)
 ;
"RTN","IBCNERP8",49,0)
 ; Kill scratch global
"RTN","IBCNERP8",50,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERP8",51,0)
 ;
"RTN","IBCNERP8",52,0)
 ; Init looping vars
"RTN","IBCNERP8",53,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP8",54,0)
 S IBSCT=$G(IBCNESPC("SECTS"))
"RTN","IBCNERP8",55,0)
 ;
"RTN","IBCNERP8",56,0)
 I IBSCT=1!$F(IBSCT,",2,") D OUT(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",57,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",58,0)
 I IBSCT=1!$F(IBSCT,",3,") D IN(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",59,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",60,0)
 I IBSCT=1!$F(IBSCT,",4,") D CUR(IBCNERTN,.IBTOT),PYR^IBCNERP0(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",61,0)
 ;
"RTN","IBCNERP8",62,0)
EXIT ; EN Exit pt
"RTN","IBCNERP8",63,0)
 Q
"RTN","IBCNERP8",64,0)
 ;
"RTN","IBCNERP8",65,0)
IN(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP8",66,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP8",67,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP8",68,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP8",69,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"IN") as follows:
"RTN","IBCNERP8",70,0)
 ;  1=total Resps rec'd for date/time range
"RTN","IBCNERP8",71,0)
 ;  2=Ins Buf extract subtotal
"RTN","IBCNERP8",72,0)
 ;  3=Pre-Reg extract subtotal
"RTN","IBCNERP8",73,0)
 ;  4=Non-ver extract subtotal
"RTN","IBCNERP8",74,0)
 ;  5=No Act Ins subtotal
"RTN","IBCNERP8",75,0)
 ;
"RTN","IBCNERP8",76,0)
 ; Init vars
"RTN","IBCNERP8",77,0)
 N IBDT,PYRIEN,PATIEN,IBPTR,IBTYP,RPTDATA,TRANSIEN
"RTN","IBCNERP8",78,0)
 ;
"RTN","IBCNERP8",79,0)
 ; Loop thru the IIV Resp File (#365) x-ref on Date/Time Resp Rec'd
"RTN","IBCNERP8",80,0)
 S IBDT=$O(^IBCN(365,"AD",BDT),-1)
"RTN","IBCNERP8",81,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",82,0)
 . S PYRIEN=0
"RTN","IBCNERP8",83,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",84,0)
 . . S PATIEN=0
"RTN","IBCNERP8",85,0)
 . . F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",86,0)
 . . . S IBPTR=0
"RTN","IBCNERP8",87,0)
 . . . F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",88,0)
 . . . . S TOT=TOT+1
"RTN","IBCNERP8",89,0)
 . . . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",90,0)
 . . . . ; Update total
"RTN","IBCNERP8",91,0)
 . . . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",92,0)
 . . . . ; Update extract type total
"RTN","IBCNERP8",93,0)
 . . . . ; Get the data for the report - build RPTDATA
"RTN","IBCNERP8",94,0)
 . . . . S IBTYP=5,TRANSIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",95,0)
 . . . . I TRANSIEN'="" S IBTYP=$P($G(^IBCN(365.1,TRANSIEN,0)),U,10)
"RTN","IBCNERP8",96,0)
 . . . . S $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",97,0)
 ;
"RTN","IBCNERP8",98,0)
 I $G(ZTSTOP) G INX
"RTN","IBCNERP8",99,0)
 ;
"RTN","IBCNERP8",100,0)
 ; Save data to global
"RTN","IBCNERP8",101,0)
 S ^TMP($J,RTN,"IN")=$G(RPTDATA)
"RTN","IBCNERP8",102,0)
 ;
"RTN","IBCNERP8",103,0)
INX ; IN exit pt
"RTN","IBCNERP8",104,0)
 Q
"RTN","IBCNERP8",105,0)
 ;
"RTN","IBCNERP8",106,0)
OUT(RTN,BDT,EDT,TOT) ; Outgoing Data
"RTN","IBCNERP8",107,0)
 ;Input params:  RTN-routine name used as subscript in ^TMP($J),
"RTN","IBCNERP8",108,0)
 ; BDT-start date/time, EDT-end date/time, **TOT-total recs searched-used
"RTN","IBCNERP8",109,0)
 ; only for status checks when process is queued (passed by reference)
"RTN","IBCNERP8",110,0)
 ;Output vars: Set pcs of ^TMP($J,RTN,"OUT") as follows:
"RTN","IBCNERP8",111,0)
 ; 1=total Inqs transmitted for timeframe
"RTN","IBCNERP8",112,0)
 ; 2=Ins Buffer extract subtotal
"RTN","IBCNERP8",113,0)
 ; 3=Pre-Reg extract subtotal
"RTN","IBCNERP8",114,0)
 ; 4=Non-Ver extract subtotal
"RTN","IBCNERP8",115,0)
 ; 5=No Act Ins subtotal
"RTN","IBCNERP8",116,0)
 ;
"RTN","IBCNERP8",117,0)
 ; Init vars
"RTN","IBCNERP8",118,0)
 N IBDT,IBPTR,IBTYP,RPTDATA,TQIEN
"RTN","IBCNERP8",119,0)
 ;
"RTN","IBCNERP8",120,0)
 ; Loop thru the IIV Resp File (#365) by x-ref on Date/Time Resp Created
"RTN","IBCNERP8",121,0)
 ;  Only count responses for unique HL7 message IDs - filter out
"RTN","IBCNERP8",122,0)
 ;  unsolicited responses as they artificially inflate the Outgoing Count
"RTN","IBCNERP8",123,0)
 S IBDT=$O(^IBCN(365,"AE",BDT),-1)
"RTN","IBCNERP8",124,0)
 F  S IBDT=$O(^IBCN(365,"AE",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",125,0)
 . S IBPTR=0
"RTN","IBCNERP8",126,0)
 . F  S IBPTR=$O(^IBCN(365,"AE",IBDT,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",127,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",128,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",129,0)
 . . ; Quit, if response was not O - original
"RTN","IBCNERP8",130,0)
 . . I $P($G(^IBCN(365,IBPTR,0)),U,10)'="O" Q
"RTN","IBCNERP8",131,0)
 . . ; Update total
"RTN","IBCNERP8",132,0)
 . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",133,0)
 . . ; Update extract type total (1,2,3,4)
"RTN","IBCNERP8",134,0)
 . . S IBTYP=5
"RTN","IBCNERP8",135,0)
 . . S TQIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",136,0)
 . . I TQIEN="" Q
"RTN","IBCNERP8",137,0)
 . . S IBTYP=$P($G(^IBCN(365.1,TQIEN,0)),U,10)
"RTN","IBCNERP8",138,0)
 . . S $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",139,0)
 ;
"RTN","IBCNERP8",140,0)
 I $G(ZTSTOP) G OUTX
"RTN","IBCNERP8",141,0)
 ;
"RTN","IBCNERP8",142,0)
 ; Save data to global array
"RTN","IBCNERP8",143,0)
 S ^TMP($J,RTN,"OUT")=$G(RPTDATA)
"RTN","IBCNERP8",144,0)
 ;
"RTN","IBCNERP8",145,0)
OUTX ; OUT exit pt
"RTN","IBCNERP8",146,0)
 Q
"RTN","IBCNERP8",147,0)
 ;
"RTN","IBCNERP8",148,0)
CUR(RTN,TOT) ; Current Status - stats - timeframe independent
"RTN","IBCNERP8",149,0)
 ; Input params: RTN-routine name as subs in ^TMP($J), **TOT-total recs
"RTN","IBCNERP8",150,0)
 ;  searched - used only for status checks when the process is queued
"RTN","IBCNERP8",151,0)
 ;  passed by reference
"RTN","IBCNERP8",152,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"CUR") as follows:
"RTN","IBCNERP8",153,0)
 ;  1=total Pending Resps (Transmitted-2)
"RTN","IBCNERP8",154,0)
 ;  2=total Queued Inqs (Ready to Transmit-1/Retry-6)
"RTN","IBCNERP8",155,0)
 ;  3=total Deferred Inqs (Hold-4)
"RTN","IBCNERP8",156,0)
 ;  4=Ins Cos w/o National ID
"RTN","IBCNERP8",157,0)
 ;  5=Payers w/IIV disabled locally
"RTN","IBCNERP8",158,0)
 ;  6=total user action required (symbol'='*' or '#' or '!' or '?' or '-')
"RTN","IBCNERP8",159,0)
 ;  7=total Man. Ver'd Ins Buf entries (symbol='*')
"RTN","IBCNERP8",160,0)
 ;  8=total IIV Processed Ver. (symbol='+')
"RTN","IBCNERP8",161,0)
 ;  9=total awaiting processing (symbol='?' or BLANK)
"RTN","IBCNERP8",162,0)
 ;  10=total Ins Buf entries w/symbol='#'
"RTN","IBCNERP8",163,0)
 ;  11=total Ins Buf entries w/symbol='!'
"RTN","IBCNERP8",164,0)
 ;  12=total Ins Buf entries w/symbol='?'
"RTN","IBCNERP8",165,0)
 ;  13=total Ins Buf entries w/symbol='-'
"RTN","IBCNERP8",166,0)
 ;  14=total Ins Buffer entries w/symbol not in ('*','#','!','?','-')
"RTN","IBCNERP8",167,0)
 ;
"RTN","IBCNERP8",168,0)
 ; Init vars
"RTN","IBCNERP8",169,0)
 N RIEN,TQIEN,ICIEN,IBIEN,RPTDATA,IEN,IBSYMBOL,PIECE,IBSTS,APPIEN
"RTN","IBCNERP8",170,0)
 N PIEN,TMP,APPDATA,XDT
"RTN","IBCNERP8",171,0)
 ;
"RTN","IBCNERP8",172,0)
 S RPTDATA=""
"RTN","IBCNERP8",173,0)
 ;
"RTN","IBCNERP8",174,0)
 ; Responses pending (Transmitted - 2)
"RTN","IBCNERP8",175,0)
 S RIEN=0
"RTN","IBCNERP8",176,0)
 F  S RIEN=$O(^IBCN(365,"AC",2,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",177,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",178,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",179,0)
 .  S $P(RPTDATA,U,1)=$P(RPTDATA,U,1)+1
"RTN","IBCNERP8",180,0)
 ;
"RTN","IBCNERP8",181,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",182,0)
 ;
"RTN","IBCNERP8",183,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and 
"RTN","IBCNERP8",184,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNERP8",185,0)
 F IBSTS=1,6,4 D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",186,0)
 . S TQIEN=0
"RTN","IBCNERP8",187,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",IBSTS,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",188,0)
 . .  S TOT=TOT+1
"RTN","IBCNERP8",189,0)
 . .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",190,0)
 . .  I IBSTS'=4 S $P(RPTDATA,U,2)=$P(RPTDATA,U,2)+1 Q
"RTN","IBCNERP8",191,0)
 . .  S $P(RPTDATA,U,3)=$P(RPTDATA,U,3)+1
"RTN","IBCNERP8",192,0)
 ;
"RTN","IBCNERP8",193,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",194,0)
 ;
"RTN","IBCNERP8",195,0)
 ; Payer stats
"RTN","IBCNERP8",196,0)
 ; Ins cos w/o National ID
"RTN","IBCNERP8",197,0)
 S ICIEN=0
"RTN","IBCNERP8",198,0)
 F  S ICIEN=$O(^DIC(36,ICIEN)) Q:'ICIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",199,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",200,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",201,0)
 .  ; Exclude inactive
"RTN","IBCNERP8",202,0)
 .  S TMP=$$ACTIVE^IBCNEUT4(ICIEN) I 'TMP Q
"RTN","IBCNERP8",203,0)
 .  ; Exclude Medicare/Medicaid, etc.
"RTN","IBCNERP8",204,0)
 .  I $$EXCLUDE^IBCNEUT4($P(TMP,U,2)) Q
"RTN","IBCNERP8",205,0)
 .  ; Determine assoc Payer
"RTN","IBCNERP8",206,0)
 .  S PIEN=$P($G(^DIC(36,ICIEN,3)),U,10)
"RTN","IBCNERP8",207,0)
 .  ; Missing payer link
"RTN","IBCNERP8",208,0)
 .  I 'PIEN S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1 Q
"RTN","IBCNERP8",209,0)
 .  ; Does a VA NATIONAL ID exist?
"RTN","IBCNERP8",210,0)
 .  I $P($G(^IBE(365.12,PIEN,0)),U,2)'="" Q
"RTN","IBCNERP8",211,0)
 .  S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1
"RTN","IBCNERP8",212,0)
 ;
"RTN","IBCNERP8",213,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",214,0)
 ;
"RTN","IBCNERP8",215,0)
 ; IIV Payers disabled locally
"RTN","IBCNERP8",216,0)
 S PIEN=0
"RTN","IBCNERP8",217,0)
 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",218,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",219,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",220,0)
 .  ; Must have National ID
"RTN","IBCNERP8",221,0)
 .  I $P($G(^IBE(365.12,PIEN,0)),U,2)'="" Q
"RTN","IBCNERP8",222,0)
 .  ; Get Payer app multiple IEN
"RTN","IBCNERP8",223,0)
 .  S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP8",224,0)
 .  ; Must have eIIV application
"RTN","IBCNERP8",225,0)
 .  I 'APPIEN Q
"RTN","IBCNERP8",226,0)
 .  S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP8",227,0)
 .  ; Must be Nationally Active
"RTN","IBCNERP8",228,0)
 .  I '$P(APPDATA,U,2) Q
"RTN","IBCNERP8",229,0)
 .  ; Must not be Locally Active
"RTN","IBCNERP8",230,0)
 .  I $P(APPDATA,U,3) Q
"RTN","IBCNERP8",231,0)
 .  S $P(RPTDATA,U,5)=$P(RPTDATA,U,5)+1
"RTN","IBCNERP8",232,0)
 ;
"RTN","IBCNERP8",233,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",234,0)
 ;
"RTN","IBCNERP8",235,0)
 ; Buffer stats
"RTN","IBCNERP8",236,0)
 ; Loop thru the Ins Buffer File (#355.33)
"RTN","IBCNERP8",237,0)
 S IBIEN=0,XDT=0
"RTN","IBCNERP8",238,0)
 F  S XDT=$O(^IBA(355.33,"AEST","E",XDT)) Q:XDT=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",239,0)
 . F  S IBIEN=$O(^IBA(355.33,"AEST","E",XDT,IBIEN)) Q:IBIEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",240,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",241,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",242,0)
 . . S IBSYMBOL=$$SYMBOL^IBCNBLL(IBIEN)
"RTN","IBCNERP8",243,0)
 . . ; Determine piece to update based on symbol
"RTN","IBCNERP8",244,0)
 . . ; ('*') = Man. Verified,  ('#','!','-','?',blank/null) = IIV Processing
"RTN","IBCNERP8",245,0)
 . . ; ('+') = IIV Processed
"RTN","IBCNERP8",246,0)
 . . S PIECE=$S(IBSYMBOL="*":7,IBSYMBOL="+":8,IBSYMBOL="#":10,IBSYMBOL="!":11,IBSYMBOL="-":13,IBSYMBOL="?":12,1:14)
"RTN","IBCNERP8",247,0)
 . . I PIECE=12!(PIECE=14) S $P(RPTDATA,U,9)=$P($G(RPTDATA),U,9)+1
"RTN","IBCNERP8",248,0)
 . . E  S $P(RPTDATA,U,6)=$P($G(RPTDATA),U,6)+1
"RTN","IBCNERP8",249,0)
 . . S $P(RPTDATA,U,PIECE)=$P($G(RPTDATA),U,PIECE)+1
"RTN","IBCNERP8",250,0)
 ;
"RTN","IBCNERP8",251,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",252,0)
 ;
"RTN","IBCNERP8",253,0)
 ; Save data to global
"RTN","IBCNERP8",254,0)
 S ^TMP($J,RTN,"CUR")=$G(RPTDATA)
"RTN","IBCNERP8",255,0)
 ;
"RTN","IBCNERP8",256,0)
CURX ; CUR exit point
"RTN","IBCNERP8",257,0)
 Q
"RTN","IBCNERP8",258,0)
 ;
"RTN","IBCNERP8",259,0)
 ;
"RTN","IBCNERPA")
0^15^B29790461^B29062798
"RTN","IBCNERPA",1,0)
IBCNERPA ;DAOU/BHS - IBCNE IIV RESPONSE REPORT (cont'd) ;03-JUN-2002
"RTN","IBCNERPA",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345**;21-MAR-94;Build 28
"RTN","IBCNERPA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPA",4,0)
 ;
"RTN","IBCNERPA",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERPA",6,0)
 ;
"RTN","IBCNERPA",7,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERPA",8,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERPA",9,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERPA",10,0)
 ;  IBCNESPC("PYR")=Pyr IEN OR "" for all
"RTN","IBCNERPA",11,0)
 ;  IBCNESPC("PAT")=Pat IEN OR "" for all
"RTN","IBCNERPA",12,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERPA",13,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERPA",14,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERPA",15,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERPA",16,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERPA",17,0)
 ;   run.  Response Report (O), Inactive Report (1), or Ambiguous
"RTN","IBCNERPA",18,0)
 ;   Report (2).
"RTN","IBCNERPA",19,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERPA",20,0)
 ;
"RTN","IBCNERPA",21,0)
 ;  Based on structure of IIV Response File (#365)
"RTN","IBCNERPA",22,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERPA",23,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERPA",24,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERPA",25,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERPA",26,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERPA",27,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERPA",28,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERPA",29,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERPA",30,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERPA",31,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERPA",32,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERPA",33,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERPA",34,0)
 ; Must call at one of the entry points, EN3 or EN6
"RTN","IBCNERPA",35,0)
 Q
"RTN","IBCNERPA",36,0)
 ;
"RTN","IBCNERPA",37,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP3
"RTN","IBCNERPA",38,0)
 N IBBDT,IBEDT,IBPY,IBPT,IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPA",39,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC,IPRF
"RTN","IBCNERPA",40,0)
 S IBBDT=$G(IBCNESPC("BEGDT")),IBEDT=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPA",41,0)
 S IBPY=$G(IBCNESPC("PYR")),IBPT=$G(IBCNESPC("PAT"))
"RTN","IBCNERPA",42,0)
 S IBTYP=$G(IBCNESPC("TYPE")),IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPA",43,0)
 S IBTRC=$P($G(IBCNESPC("TRCN")),U,1),(IBPXT,IBPGC)=0
"RTN","IBCNERPA",44,0)
 S IBEXP=$G(IBCNESPC("DTEXP"))
"RTN","IBCNERPA",45,0)
 S IPRF=$G(IBCNESPC("RFLAG"))
"RTN","IBCNERPA",46,0)
 ; Determine IO params
"RTN","IBCNERPA",47,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",48,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",49,0)
 D PRINT^IBCNERP3(IBCNERTN,IBBDT,IBEDT,IBPY,IBPT,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT,IBTRC,IBEXP,IPRF)
"RTN","IBCNERPA",50,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPA",51,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",52,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",53,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",54,0)
EXIT3 ; Exit pt
"RTN","IBCNERPA",55,0)
 Q
"RTN","IBCNERPA",56,0)
 ;
"RTN","IBCNERPA",57,0)
 ;
"RTN","IBCNERPA",58,0)
EN6(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP6
"RTN","IBCNERPA",59,0)
 ;
"RTN","IBCNERPA",60,0)
 ; Init vars
"RTN","IBCNERPA",61,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBPY,IBSRT,IBDTL
"RTN","IBCNERPA",62,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN,TOTALS
"RTN","IBCNERPA",63,0)
 ;
"RTN","IBCNERPA",64,0)
 S IBBDT=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERPA",65,0)
 S IBEDT=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPA",66,0)
 S IBPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERPA",67,0)
 S IBDTL=$G(IBCNESPC("DTL"))
"RTN","IBCNERPA",68,0)
 S IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPA",69,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPA",70,0)
 ;
"RTN","IBCNERPA",71,0)
 ; Determine IO parameters
"RTN","IBCNERPA",72,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",73,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",74,0)
 ;
"RTN","IBCNERPA",75,0)
 D PRINT^IBCNERP6(IBCNERTN,IBBDT,IBEDT,IBPY,IBDTL,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERPA",76,0)
 I $G(ZTSTOP)!IBPXT G EXIT6
"RTN","IBCNERPA",77,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",78,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",79,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",80,0)
 ;
"RTN","IBCNERPA",81,0)
EXIT6 ; Exit pt
"RTN","IBCNERPA",82,0)
 Q
"RTN","IBCNERPA",83,0)
 ;
"RTN","IBCNERPA",84,0)
EBDISP(RPTDATA,DISPDATA,LCT) ; Build sorted Elig/Ben notes for display
"RTN","IBCNERPA",85,0)
 ; Called by IBCNERP3 - all inputs should be passed by reference
"RTN","IBCNERPA",86,0)
 ; Init local variables
"RTN","IBCNERPA",87,0)
 N EBCT,EBSEGS,CT,SRT1,SRT2,SRT3,SRT4,SRT5,SRT6,SEGCT,CT2,ITEM,NTCT
"RTN","IBCNERPA",88,0)
 N STATFLG
"RTN","IBCNERPA",89,0)
 ;
"RTN","IBCNERPA",90,0)
 ; Only build more display lines if notes exist
"RTN","IBCNERPA",91,0)
 S EBCT=+$O(RPTDATA(2,""),-1) I 'EBCT,'$D(RPTDATA(2,0)) G EBEXIT
"RTN","IBCNERPA",92,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Eligibility/Benefit Information:",LCT=LCT+1
"RTN","IBCNERPA",93,0)
 S STATFLG=""
"RTN","IBCNERPA",94,0)
 ; Build EB w/Notes
"RTN","IBCNERPA",95,0)
 I $D(RPTDATA(2,0)) S STATFLG=RPTDATA(2,0)
"RTN","IBCNERPA",96,0)
 F CT=1:1:EBCT D
"RTN","IBCNERPA",97,0)
 . S (SRT1,SRT2,SRT3,SRT4,SRT5)="*"
"RTN","IBCNERPA",98,0)
 . S SEGCT=$L($G(RPTDATA(2,CT)),U)
"RTN","IBCNERPA",99,0)
 . F CT2=2:1:SEGCT S ITEM=$P(RPTDATA(2,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPA",100,0)
 . . I CT2=3 S SRT4=ITEM Q
"RTN","IBCNERPA",101,0)
 . . I CT2=4 S SRT2=ITEM Q
"RTN","IBCNERPA",102,0)
 . . I CT2=5 S SRT3=ITEM Q
"RTN","IBCNERPA",103,0)
 . . I CT2=13 S SRT1=ITEM Q
"RTN","IBCNERPA",104,0)
 . S EBSEGS(SRT1,SRT2,SRT3,SRT4,SRT5,CT)=""
"RTN","IBCNERPA",105,0)
 ; Display Active/Inactive/Undetermined message
"RTN","IBCNERPA",106,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPA",107,0)
 I STATFLG]"" D
"RTN","IBCNERPA",108,0)
 . I STATFLG="U" S DISPDATA(LCT)="IIV was unable to determine the status of this patient's policy.",LCT=LCT+1 Q
"RTN","IBCNERPA",109,0)
 . S DISPDATA(LCT)="IIV has determined that this patient's policy is "_STATFLG_".",LCT=LCT+1
"RTN","IBCNERPA",110,0)
 ; Loop thru sorted EB Notes
"RTN","IBCNERPA",111,0)
 S SRT1="" F  S SRT1=$O(EBSEGS(SRT1)) Q:SRT1=""  D
"RTN","IBCNERPA",112,0)
 . S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPA",113,0)
 . I SRT1'="*" S DISPDATA(LCT)=" "_$$LBL^IBCNERP2(365.02,.13)_SRT1,LCT=LCT+1
"RTN","IBCNERPA",114,0)
 . S SRT2="" F  S SRT2=$O(EBSEGS(SRT1,SRT2)) Q:SRT2=""  D
"RTN","IBCNERPA",115,0)
 . . I SRT2'="*" S DISPDATA(LCT)="  "_$$LBL^IBCNERP2(365.02,.04)_SRT2,LCT=LCT+1
"RTN","IBCNERPA",116,0)
 . . S SRT3="" F  S SRT3=$O(EBSEGS(SRT1,SRT2,SRT3)) Q:SRT3=""  D
"RTN","IBCNERPA",117,0)
 . . . I SRT3'="*" S DISPDATA(LCT)="   "_$$LBL^IBCNERP2(365.02,.05)_SRT3,LCT=LCT+1
"RTN","IBCNERPA",118,0)
 . . . S SRT4="" F  S SRT4=$O(EBSEGS(SRT1,SRT2,SRT3,SRT4)) Q:SRT4=""  D
"RTN","IBCNERPA",119,0)
 . . . . I SRT4'="*" S DISPDATA(LCT)="    "_$$LBL^IBCNERP2(365.02,.03)_SRT4,LCT=LCT+1
"RTN","IBCNERPA",120,0)
 . . . . S SRT5="" F  S SRT5=$O(EBSEGS(SRT1,SRT2,SRT3,SRT4,SRT5)) Q:SRT5=""  D
"RTN","IBCNERPA",121,0)
 . . . . . I SRT5'="*" S DISPDATA(LCT)="     "_$$LBL^IBCNERP2(365.02,.02)_SRT5,LCT=LCT+1
"RTN","IBCNERPA",122,0)
 . . . . . S SRT6="" F  S SRT6=$O(EBSEGS(SRT1,SRT2,SRT3,SRT4,SRT5,SRT6)) Q:SRT6=""  D
"RTN","IBCNERPA",123,0)
 . . . . . . S DISPDATA(LCT)="       "
"RTN","IBCNERPA",124,0)
 . . . . . . S SEGCT=$L($G(RPTDATA(2,CT)),U)
"RTN","IBCNERPA",125,0)
 . . . . . . F CT2=2,6:1:$S(SEGCT>12:12,1:SEGCT) S ITEM=$P(RPTDATA(2,SRT6),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPA",126,0)
 . . . . . . . ; Display label for all but .09 field - Percentage
"RTN","IBCNERPA",127,0)
 . . . . . . . S ITEM=$S(CT2'=9:$$LBL^IBCNERP2(365.02,(.01*CT2)),1:"")_ITEM
"RTN","IBCNERPA",128,0)
 . . . . . . . I $L(ITEM)+$L(DISPDATA(LCT))>69 S LCT=LCT+1,DISPDATA(LCT)="       "_ITEM Q
"RTN","IBCNERPA",129,0)
 . . . . . . . I DISPDATA(LCT)'="       " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERPA",130,0)
 . . . . . . . S DISPDATA(LCT)="       "_ITEM
"RTN","IBCNERPA",131,0)
 . . . . . . ; Notes
"RTN","IBCNERPA",132,0)
 . . . . . . S NTCT=$O(RPTDATA(2,SRT6,""),-1),ITEM="" I NTCT>0 D
"RTN","IBCNERPA",133,0)
 . . . . . . . F CT2=1:1:NTCT S LCT=LCT+1,DISPDATA(LCT)="        "_RPTDATA(2,SRT6,CT2)
"RTN","IBCNERPA",134,0)
 . . . . . . . S LCT=LCT+1,DISPDATA(LCT)="       "
"RTN","IBCNERPA",135,0)
 . . . . . . I $TR(DISPDATA(LCT)," ","")'="" S LCT=LCT+1
"RTN","IBCNERPA",136,0)
EBEXIT ; EBDISP exit point
"RTN","IBCNERPA",137,0)
 Q
"RTN","IBCNERPA",138,0)
 ;
"RTN","IBCNEUT4")
0^1^B50608524^B49767116
"RTN","IBCNEUT4",1,0)
IBCNEUT4 ;DAOU/ESG - eIV MISC. UTILITIES ;17-JUN-2002
"RTN","IBCNEUT4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345**;21-MAR-94;Build 28
"RTN","IBCNEUT4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEUT4",4,0)
 ;
"RTN","IBCNEUT4",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT4",6,0)
 Q
"RTN","IBCNEUT4",7,0)
 ;
"RTN","IBCNEUT4",8,0)
 ;
"RTN","IBCNEUT4",9,0)
ACTIVE(INSDA) ; Is this insurance company currently active?  1:yes or 0:no
"RTN","IBCNEUT4",10,0)
 ; Insurance company name returned in the second piece.
"RTN","IBCNEUT4",11,0)
 ; Input:  INSDA - insurance company ien
"RTN","IBCNEUT4",12,0)
 NEW ACTFLG,INSDATA
"RTN","IBCNEUT4",13,0)
 S ACTFLG=0                                  ; default inactive
"RTN","IBCNEUT4",14,0)
 I '$G(INSDA) G ACTIVEX                      ; bad data passed in
"RTN","IBCNEUT4",15,0)
 S INSDATA=$G(^DIC(36,INSDA,0))              ; zero node of File 36
"RTN","IBCNEUT4",16,0)
 I INSDATA="" G ACTIVEX                      ; bad record
"RTN","IBCNEUT4",17,0)
 I $P(INSDATA,U,5) G ACTIVEX                 ; INACTIVE flag is true
"RTN","IBCNEUT4",18,0)
 I $P($G(^DIC(36,INSDA,5)),U,1) G ACTIVEX    ; SCHEDULED FOR DELETION flag is true
"RTN","IBCNEUT4",19,0)
 S ACTFLG=1                                  ; Otherwise, its active
"RTN","IBCNEUT4",20,0)
ACTIVEX ;
"RTN","IBCNEUT4",21,0)
 Q ACTFLG_U_$P($G(^DIC(36,+$G(INSDA),0)),U,1)
"RTN","IBCNEUT4",22,0)
 ;
"RTN","IBCNEUT4",23,0)
 ;
"RTN","IBCNEUT4",24,0)
EXCLUDE(NAME) ; This function determines if we should exclude the insurance
"RTN","IBCNEUT4",25,0)
 ; company based on the name.
"RTN","IBCNEUT4",26,0)
 ; This function returns 1 if we should exclude the insurance company.
"RTN","IBCNEUT4",27,0)
 ; This function returns 0 if we should not exclude it (i.e. include it)
"RTN","IBCNEUT4",28,0)
 ;
"RTN","IBCNEUT4",29,0)
 ; Initialize flag; default to not exclude it
"RTN","IBCNEUT4",30,0)
 NEW EXCL
"RTN","IBCNEUT4",31,0)
 S EXCL=0
"RTN","IBCNEUT4",32,0)
 ;
"RTN","IBCNEUT4",33,0)
 ; Screen out bad data
"RTN","IBCNEUT4",34,0)
 I $G(NAME)="" S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",35,0)
 ;
"RTN","IBCNEUT4",36,0)
 ; Screen out MEDICAID or MEDICARE ins co names
"RTN","IBCNEUT4",37,0)
 I NAME["MEDICAID"!(NAME["MEDICARE") S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",38,0)
EXCLUDX ;
"RTN","IBCNEUT4",39,0)
 Q EXCL
"RTN","IBCNEUT4",40,0)
 ;
"RTN","IBCNEUT4",41,0)
 ;
"RTN","IBCNEUT4",42,0)
CLEAR(DA,EDITED,FORCE) ; This procedure will clear the eIV status field from an
"RTN","IBCNEUT4",43,0)
 ; Insurance Buffer entry (pass in the internal entry number of the
"RTN","IBCNEUT4",44,0)
 ; buffer entry).  If the FORCE variable is not passed then the eIV
"RTN","IBCNEUT4",45,0)
 ; status will only be cleared if the existing status is an error status
"RTN","IBCNEUT4",46,0)
 ;
"RTN","IBCNEUT4",47,0)
 ; Parameters
"RTN","IBCNEUT4",48,0)
 ;        DA - required input parameter; buffer ien
"RTN","IBCNEUT4",49,0)
 ;    EDITED - optional output parameter; this will tell you if the
"RTN","IBCNEUT4",50,0)
 ;             buffer symbol was cleared
"RTN","IBCNEUT4",51,0)
 ;     FORCE - optional input parameter; if this is set to 1 then the
"RTN","IBCNEUT4",52,0)
 ;             eIV status field will be cleared regardless of the
"RTN","IBCNEUT4",53,0)
 ;             current status 
"RTN","IBCNEUT4",54,0)
 NEW DIE,DR,D,D0,DI,DIC,DISYS,DQ,X,%
"RTN","IBCNEUT4",55,0)
 I '$G(DA) G CLEARX
"RTN","IBCNEUT4",56,0)
 I '$D(FORCE) S FORCE=0
"RTN","IBCNEUT4",57,0)
 I 'FORCE,$$SYMBOL^IBCNBLL(DA)'="!" G CLEARX
"RTN","IBCNEUT4",58,0)
 S DIE=355.33,DR=".12///@"
"RTN","IBCNEUT4",59,0)
 D ^DIE
"RTN","IBCNEUT4",60,0)
 S EDITED=1
"RTN","IBCNEUT4",61,0)
CLEARX ;
"RTN","IBCNEUT4",62,0)
 Q
"RTN","IBCNEUT4",63,0)
 ;
"RTN","IBCNEUT4",64,0)
 ;
"RTN","IBCNEUT4",65,0)
INFO(IBBUFDA) ; Return original and current buffer data
"RTN","IBCNEUT4",66,0)
 ; This procedure will retrieve the following data from the buffer and
"RTN","IBCNEUT4",67,0)
 ; from the transmission queue file.  The buffer holds the current data
"RTN","IBCNEUT4",68,0)
 ; and the TQ file holds the original buffer data.
"RTN","IBCNEUT4",69,0)
 ; Input
"RTN","IBCNEUT4",70,0)
 ;    IBBUFDA - buffer internal entry number
"RTN","IBCNEUT4",71,0)
 ; Output
"RTN","IBCNEUT4",72,0)
 ;    a pieced string as follows
"RTN","IBCNEUT4",73,0)
 ;    [1]  Has this buffer entry been transmitted? 1/0
"RTN","IBCNEUT4",74,0)
 ;    [2]  Current buffer source of information (external)
"RTN","IBCNEUT4",75,0)
 ;    [3]  Current buffer source of information (internal)
"RTN","IBCNEUT4",76,0)
 ;    [4]  Current buffer insurance company name
"RTN","IBCNEUT4",77,0)
 ;    [5]  Current buffer group number
"RTN","IBCNEUT4",78,0)
 ;    [6]  Current buffer group name
"RTN","IBCNEUT4",79,0)
 ;    [7]  Current buffer subscriber ID
"RTN","IBCNEUT4",80,0)
 ;    [8]  Original buffer insurance company name
"RTN","IBCNEUT4",81,0)
 ;    [9]  Original buffer group number
"RTN","IBCNEUT4",82,0)
 ;   [10]  Original buffer group name
"RTN","IBCNEUT4",83,0)
 ;   [11]  Original buffer subscriber ID
"RTN","IBCNEUT4",84,0)
 ;
"RTN","IBCNEUT4",85,0)
 NEW IB0,IB20,IB40,IB60,DATA,RESPIEN,FOUND,TQIEN,TQDATA,TQDATA1,DISYS
"RTN","IBCNEUT4",86,0)
 S DATA=""
"RTN","IBCNEUT4",87,0)
 I '$G(IBBUFDA) G INFOX
"RTN","IBCNEUT4",88,0)
 I '$D(^IBA(355.33,IBBUFDA)) G INFOX
"RTN","IBCNEUT4",89,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0))
"RTN","IBCNEUT4",90,0)
 S IB20=$G(^IBA(355.33,IBBUFDA,20))
"RTN","IBCNEUT4",91,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNEUT4",92,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNEUT4",93,0)
 S $P(DATA,U,1)=0    ; default to not been transmitted
"RTN","IBCNEUT4",94,0)
 S $P(DATA,U,2)=$$EXTERNAL^DILFD(355.33,.03,"",$P(IB0,U,3))  ; source
"RTN","IBCNEUT4",95,0)
 S $P(DATA,U,3)=$P(IB0,U,3)     ; internal source
"RTN","IBCNEUT4",96,0)
 S $P(DATA,U,4)=$P(IB20,U,1)    ; insurance company name
"RTN","IBCNEUT4",97,0)
 S $P(DATA,U,5)=$P(IB40,U,3)    ; group number
"RTN","IBCNEUT4",98,0)
 S $P(DATA,U,6)=$P(IB40,U,2)    ; group name
"RTN","IBCNEUT4",99,0)
 S $P(DATA,U,7)=$P(IB60,U,4)    ; subscriber id
"RTN","IBCNEUT4",100,0)
 ;
"RTN","IBCNEUT4",101,0)
 ; Look at the response file and the transmission queue file.  Since
"RTN","IBCNEUT4",102,0)
 ; we're trying to get the original data look at the oldest data first.
"RTN","IBCNEUT4",103,0)
 S RESPIEN=0,FOUND=0
"RTN","IBCNEUT4",104,0)
 F  S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,RESPIEN)) Q:'RESPIEN  D  Q:FOUND
"RTN","IBCNEUT4",105,0)
 . S TQIEN=$P($G(^IBCN(365,RESPIEN,0)),U,5)
"RTN","IBCNEUT4",106,0)
 . I 'TQIEN Q
"RTN","IBCNEUT4",107,0)
 . S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEUT4",108,0)
 . S TQDATA1=$G(^IBCN(365.1,TQIEN,1))
"RTN","IBCNEUT4",109,0)
 . I TQDATA="" Q
"RTN","IBCNEUT4",110,0)
 . S $P(DATA,U,8)=$P(TQDATA1,U,2)    ; insurance company name
"RTN","IBCNEUT4",111,0)
 . S $P(DATA,U,9)=$P(TQDATA1,U,3)    ; group number
"RTN","IBCNEUT4",112,0)
 . S $P(DATA,U,10)=$P(TQDATA1,U,4)    ; group name
"RTN","IBCNEUT4",113,0)
 . S $P(DATA,U,11)=$P(TQDATA1,U,5)    ; subscriber id
"RTN","IBCNEUT4",114,0)
 . S FOUND=1                          ; Stop once we have some data
"RTN","IBCNEUT4",115,0)
 . Q
"RTN","IBCNEUT4",116,0)
 ;
"RTN","IBCNEUT4",117,0)
 I FOUND S $P(DATA,U,1)=1
"RTN","IBCNEUT4",118,0)
INFOX ;
"RTN","IBCNEUT4",119,0)
 Q DATA
"RTN","IBCNEUT4",120,0)
 ;
"RTN","IBCNEUT4",121,0)
 ;
"RTN","IBCNEUT4",122,0)
VALID(INSIEN,PAYIEN,PAYID,SYMIEN) ; Validate an Ins Co IEN
"RTN","IBCNEUT4",123,0)
 ; Input parameter: INSIEN - Ins co IEN, passed by value
"RTN","IBCNEUT4",124,0)
 ; Output parameters: PAYIEN, PAYID, SYMIEN, passed by reference
"RTN","IBCNEUT4",125,0)
 N APPDATA,APPIEN,INSNAME
"RTN","IBCNEUT4",126,0)
 ; Retrieve the Ins Co name
"RTN","IBCNEUT4",127,0)
 S INSNAME=$P($G(^DIC(36,INSIEN,0)),U,1)
"RTN","IBCNEUT4",128,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Insurance company IEN "_INSIEN_" doesn't have a name on file.") G VALIDX
"RTN","IBCNEUT4",129,0)
 ; Screen out MEDICAID or MEDICARE ins co names
"RTN","IBCNEUT4",130,0)
 I $$EXCLUDE(INSNAME) S SYMIEN=$$ERROR^IBCNEUT8("B11","Insurance company "_INSNAME_" contains MEDICAID or MEDICARE in the name.  Electronic inquiries cannot be made to this insurance company.") G VALIDX
"RTN","IBCNEUT4",131,0)
 ; Retrieve the Payer IEN associated with this ins co
"RTN","IBCNEUT4",132,0)
 S PAYIEN=$P($G(^DIC(36,INSIEN,3)),U,10)
"RTN","IBCNEUT4",133,0)
 I PAYIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") G VALIDX
"RTN","IBCNEUT4",134,0)
 D VALPYR(INSNAME) ; Payer val'n
"RTN","IBCNEUT4",135,0)
VALIDX ;
"RTN","IBCNEUT4",136,0)
 Q
"RTN","IBCNEUT4",137,0)
 ;
"RTN","IBCNEUT4",138,0)
PAYER(PAYIEN) ;
"RTN","IBCNEUT4",139,0)
 ; Entry pt for Most Pop Payer (called by POP^IBCNEDE4)
"RTN","IBCNEUT4",140,0)
 N SYMIEN,PAYID
"RTN","IBCNEUT4",141,0)
 N APPDATA,APPIEN ; Set within tag VALPYR these variables are never
"RTN","IBCNEUT4",142,0)
 ;                  killed. Using tag VALID's method of NEWing variables
"RTN","IBCNEUT4",143,0)
 ;                  first will allow them to be killed appropriately.
"RTN","IBCNEUT4",144,0)
 N ARRAY ; This is an array that is set by ERROR^IBCNEUT8 but never
"RTN","IBCNEUT4",145,0)
 ;         killed.  When there is a most popular payer that is not
"RTN","IBCNEUT4",146,0)
 ;         eligible for inquiries, ARRAY would continue to grow.
"RTN","IBCNEUT4",147,0)
 S (SYMIEN,PAYID)=""
"RTN","IBCNEUT4",148,0)
 D VALPYR("")
"RTN","IBCNEUT4",149,0)
 Q SYMIEN_U_PAYID
"RTN","IBCNEUT4",150,0)
 ;
"RTN","IBCNEUT4",151,0)
VALPYR(INSNM) ;
"RTN","IBCNEUT4",152,0)
 ; Payer Val'n - note: PAYIEN (payer IEN) must be set
"RTN","IBCNEUT4",153,0)
 ; If INSNM="" val'n is for Most Pop Payer
"RTN","IBCNEUT4",154,0)
 N PAYNM
"RTN","IBCNEUT4",155,0)
 ;
"RTN","IBCNEUT4",156,0)
 S INSNM=$G(INSNM) ; Init variable if not passed
"RTN","IBCNEUT4",157,0)
 ; Retrieve the National ID(Payer ID) for this Payer IEN
"RTN","IBCNEUT4",158,0)
 S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT4",159,0)
 I PAYID="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Payer IEN "_PAYIEN_" does not have a Payer.") Q
"RTN","IBCNEUT4",160,0)
 ; Retrieve payer name
"RTN","IBCNEUT4",161,0)
 S PAYNM=$P($G(^IBE(365.12,PAYIEN,0)),U,1)
"RTN","IBCNEUT4",162,0)
 ; Retrieve the IEN of the eIV Application
"RTN","IBCNEUT4",163,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PAYIEN)
"RTN","IBCNEUT4",164,0)
 I APPIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B9","The eIV Payer Application has not been created for this site.") Q
"RTN","IBCNEUT4",165,0)
 ; Verify the existence of the application for this Payer
"RTN","IBCNEUT4",166,0)
 I '$D(^IBE(365.12,PAYIEN,1,APPIEN)) S SYMIEN=$$ERROR^IBCNEUT8("B7","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not set up to accept electronic insurance eligibility requests.") Q
"RTN","IBCNEUT4",167,0)
 ; Retrieve the eIV-specific application data for this Payer
"RTN","IBCNEUT4",168,0)
 S APPDATA=$G(^IBE(365.12,PAYIEN,1,APPIEN,0))
"RTN","IBCNEUT4",169,0)
 ; Check if the Payer doesn't have either an active national or an
"RTN","IBCNEUT4",170,0)
 ; active local connection and return one or, if applicable, BOTH errors
"RTN","IBCNEUT4",171,0)
 I '$P(APPDATA,U,3) S SYMIEN=$$ERROR^IBCNEUT8("B6","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not locally active for eIV.")
"RTN","IBCNEUT4",172,0)
 I '$P(APPDATA,U,2) S SYMIEN=$$ERROR^IBCNEUT8("B5","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not nationally active for eIV.")
"RTN","IBCNEUT4",173,0)
 ; Check if the Payer has been deactivated, if so report it
"RTN","IBCNEUT4",174,0)
 I $P(APPDATA,U,11) S SYMIEN=$$ERROR^IBCNEUT8("B14","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which has been deactivated as of "_$$FMTE^XLFDT($P(APPDATA,U,12),"5Z")_".")
"RTN","IBCNEUT4",175,0)
 Q
"RTN","IBCNEUT4",176,0)
 ;
"RTN","IBCNEUT4",177,0)
MULTNAME(TEXT,LIST) ; Function to return an error message with a list of multiple names
"RTN","IBCNEUT4",178,0)
 ; Input parameters:
"RTN","IBCNEUT4",179,0)
 ;  TEXT - Error text to display
"RTN","IBCNEUT4",180,0)
 ;  LIST - List of items, can be either a list of ins co
"RTN","IBCNEUT4",181,0)
 ;         names or National ID names
"RTN","IBCNEUT4",182,0)
 ; Output parameter: Function value - Formatted list of items in 1 string
"RTN","IBCNEUT4",183,0)
 N COLIST,I,NAME,TOOLONG
"RTN","IBCNEUT4",184,0)
 S NAME="",COLIST=TEXT,TOOLONG=0
"RTN","IBCNEUT4",185,0)
 F I=1:1 S NAME=$O(LIST(NAME)) Q:NAME=""  D  Q:TOOLONG
"RTN","IBCNEUT4",186,0)
 . ; Add this name to the list of found names
"RTN","IBCNEUT4",187,0)
 . I I=1 S COLIST=COLIST_": "_NAME
"RTN","IBCNEUT4",188,0)
 . E  S COLIST=COLIST_", "_NAME
"RTN","IBCNEUT4",189,0)
 . ; check if the list of items may cause a MAXSTRING error
"RTN","IBCNEUT4",190,0)
 . I $L(COLIST)<450 Q
"RTN","IBCNEUT4",191,0)
 . S COLIST=COLIST_" (Too many items to display)",TOOLONG=1
"RTN","IBCNEUT4",192,0)
 ;
"RTN","IBCNEUT4",193,0)
 Q COLIST_"."
"RTN","IBCNEUT4",194,0)
 ;
"RTN","IBCOPR")
0^12^B34320642^B24610097
"RTN","IBCOPR",1,0)
IBCOPR ;WISC/RFJ,BOISE/WRL-print dollar amts for pre-registration ; 05 May 97  8:30 AM [7/22/03 11:59am]
"RTN","IBCOPR",2,0)
 ;;2.0; INTEGRATED BILLING ;**75,345**; 21-MAR-94;Build 28
"RTN","IBCOPR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCOPR",4,0)
 ;
"RTN","IBCOPR",5,0)
 W !!,"This report will sort through insurance policies in the patient file"
"RTN","IBCOPR",6,0)
 W !,"and print patients, bills, and payments with an insurance policy source"
"RTN","IBCOPR",7,0)
 W !,"of information equal to the user selected criteria."
"RTN","IBCOPR",8,0)
 ;
"RTN","IBCOPR",9,0)
 N DATEEND,DATESTRT,IBCNFSUM,IBCNESOI
"RTN","IBCOPR",10,0)
 ;
"RTN","IBCOPR",11,0)
 ;  select date range
"RTN","IBCOPR",12,0)
 W ! D DATESEL I '$G(DATEEND) Q
"RTN","IBCOPR",13,0)
 ;
"RTN","IBCOPR",14,0)
 ;  select Source of Information (SOI)
"RTN","IBCOPR",15,0)
 W ! D SOISEL I '$D(IBCNESOI) Q
"RTN","IBCOPR",16,0)
 ;
"RTN","IBCOPR",17,0)
 S IBCNFSUM=$$SUMMARY I 'IBCNFSUM Q
"RTN","IBCOPR",18,0)
 ;
"RTN","IBCOPR",19,0)
 W !!,"Since this report has to loop through all patients and check all insurance"
"RTN","IBCOPR",20,0)
 W !,"policies, it is recommended this report be queued."
"RTN","IBCOPR",21,0)
 ;
"RTN","IBCOPR",22,0)
 ;  select device
"RTN","IBCOPR",23,0)
 W ! S %ZIS="Q" D ^%ZIS Q:POP
"RTN","IBCOPR",24,0)
 I $D(IO("Q")) D  D ^%ZTLOAD K IO("Q"),ZTSK Q
"RTN","IBCOPR",25,0)
 .   S ZTDESC="Source of Information Report",ZTRTN="DQ^IBCOPR"
"RTN","IBCOPR",26,0)
 .   S ZTSAVE("DATE*")="",ZTSAVE("IBCN*")="",ZTSAVE("ZTREQ")="@"
"RTN","IBCOPR",27,0)
 ;
"RTN","IBCOPR",28,0)
 W !!,"<*> please wait <*>"
"RTN","IBCOPR",29,0)
 ;
"RTN","IBCOPR",30,0)
DQ ;  report (queue) starts here
"RTN","IBCOPR",31,0)
 N AMOUNT,BILLNUM,CANCEL,CLASS,COUNTNEW,DA,DATA,DATE,DFN,INSCO,PAYMTAMT,PAYMTCNT,TOTALAMT,TOTALCNT,TRANDA,VA,Y,SOI
"RTN","IBCOPR",32,0)
 K ^TMP($J,"IBCOPR")
"RTN","IBCOPR",33,0)
 S COUNTNEW=0
"RTN","IBCOPR",34,0)
 ;
"RTN","IBCOPR",35,0)
 ;  build list of patients using source
"RTN","IBCOPR",36,0)
 S INSCO=0 F  S INSCO=$O(^DPT("AB",INSCO)) Q:'INSCO  D
"RTN","IBCOPR",37,0)
 .   S DFN=0 F  S DFN=$O(^DPT("AB",INSCO,DFN)) Q:'DFN  D
"RTN","IBCOPR",38,0)
 .   .   S DA=0 F  S DA=$O(^DPT("AB",INSCO,DFN,DA)) Q:'DA  D
"RTN","IBCOPR",39,0)
 .   .   .   S DATA=$G(^DPT(DFN,.312,DA,1))
"RTN","IBCOPR",40,0)
 .   .   .   S DATE=$P($P(DATA,"^",10),".")
"RTN","IBCOPR",41,0)
 .   .   .   S SOI=$P(DATA,"^",9)
"RTN","IBCOPR",42,0)
 .   .   .   ;
"RTN","IBCOPR",43,0)
 .   .   .   ; Check for existence of SOI
"RTN","IBCOPR",44,0)
 .   .   .   I $G(SOI)="" Q
"RTN","IBCOPR",45,0)
 .   .   .   ;
"RTN","IBCOPR",46,0)
 .   .   .   ;  check source of information
"RTN","IBCOPR",47,0)
 .   .   .   I $G(IBCNESOI)'=1,$G(IBCNESOI(SOI))="" Q
"RTN","IBCOPR",48,0)
 .   .   .   ;
"RTN","IBCOPR",49,0)
 .   .   .   ;  build list of all patients
"RTN","IBCOPR",50,0)
 .   .   .   D PID^VADPT
"RTN","IBCOPR",51,0)
 .   .   .   S Y=$P(DATE,".") D DD^%DT
"RTN","IBCOPR",52,0)
 .   .   .   S ^TMP($J,"IBCOPR","ALL",DFN,INSCO)=$P($G(^DPT(DFN,0)),"^")_"^"_$G(VA("BID"))_"^"_Y_"^"_SOI
"RTN","IBCOPR",53,0)
 .   .   .   ;
"RTN","IBCOPR",54,0)
 .   .   .   ;  check date of source of information
"RTN","IBCOPR",55,0)
 .   .   .   I DATE<DATESTRT!(DATE>DATEEND) Q
"RTN","IBCOPR",56,0)
 .   .   .   ;
"RTN","IBCOPR",57,0)
 .   .   .   ;  build list of patients match during select date range
"RTN","IBCOPR",58,0)
 .   .   .   S COUNTNEW(SOI)=$G(COUNTNEW(SOI))+1
"RTN","IBCOPR",59,0)
 .   .   .   S COUNTNEW=COUNTNEW+1
"RTN","IBCOPR",60,0)
 .   .   .   S ^TMP($J,"IBCOPR","NEW",SOI,DFN,INSCO)=""
"RTN","IBCOPR",61,0)
 ;
"RTN","IBCOPR",62,0)
 ;  get charges and payments
"RTN","IBCOPR",63,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"IBCOPR","ALL",DFN)) Q:'DFN  D
"RTN","IBCOPR",64,0)
 .   S INSCO=0 F  S INSCO=$O(^TMP($J,"IBCOPR","ALL",DFN,INSCO)) Q:'INSCO  D
"RTN","IBCOPR",65,0)
 .   .   S SOI=$P(^TMP($J,"IBCOPR","ALL",DFN,INSCO),"^",4)
"RTN","IBCOPR",66,0)
 .   .   S DA=0 F  S DA=$O(^DGCR(399,"AE",DFN,INSCO,DA)) Q:'DA  D
"RTN","IBCOPR",67,0)
 .   .   .   ;  date first printed, bill classification
"RTN","IBCOPR",68,0)
 .   .   .   S DATE=$P($P($G(^DGCR(399,DA,"S")),"^",12),".")
"RTN","IBCOPR",69,0)
 .   .   .   S CLASS=$P($G(^DGCR(399,DA,0)),"^",5)
"RTN","IBCOPR",70,0)
 .   .   .   ;
"RTN","IBCOPR",71,0)
 .   .   .   ;  check for 1 or 2 inpatient, 3 or 4 outpatient
"RTN","IBCOPR",72,0)
 .   .   .   S CLASS=$S(CLASS<3:1,1:3)
"RTN","IBCOPR",73,0)
 .   .   .   ;
"RTN","IBCOPR",74,0)
 .   .   .   ;  bill canceled
"RTN","IBCOPR",75,0)
 .   .   .   S CANCEL="" I $P($G(^DGCR(399,DA,"S")),"^",16)=1 S CANCEL="*"
"RTN","IBCOPR",76,0)
 .   .   .   S BILLNUM=$P($G(^DGCR(399,DA,0)),"^")
"RTN","IBCOPR",77,0)
 .   .   .   S AMOUNT=+$$ORI^PRCAFN(DA) I AMOUNT'>0 Q
"RTN","IBCOPR",78,0)
 .   .   .   ;
"RTN","IBCOPR",79,0)
 .   .   .   I DATE'<DATESTRT,DATE'>DATEEND D
"RTN","IBCOPR",80,0)
 .   .   .   .   S ^TMP($J,"IBCOPR","BILL",SOI,CLASS,DATE,DA)=DFN_"^"_INSCO_"^"_CANCEL_"^"_BILLNUM_"^"_AMOUNT
"RTN","IBCOPR",81,0)
 .   .   .   .   I CANCEL="" S TOTALCNT(SOI,CLASS)=$G(TOTALCNT(SOI,CLASS))+1,TOTALAMT(SOI,CLASS)=$G(TOTALAMT(SOI,CLASS))+AMOUNT
"RTN","IBCOPR",82,0)
 .   .   .   ;
"RTN","IBCOPR",83,0)
 .   .   .   ;  get payments
"RTN","IBCOPR",84,0)
 .   .   .   S TRANDA=0 F  S TRANDA=$O(^PRCA(433,"C",DA,TRANDA)) Q:'TRANDA  D
"RTN","IBCOPR",85,0)
 .   .   .   .   S DATA=$G(^PRCA(433,TRANDA,1))
"RTN","IBCOPR",86,0)
 .   .   .   .   ;  transaction type 2 and 34 are payments
"RTN","IBCOPR",87,0)
 .   .   .   .   I $P(DATA,"^",2)'=2,$P(DATA,"^",2)'=34 Q
"RTN","IBCOPR",88,0)
 .   .   .   .   S DATE=$P($P(DATA,"^",9),".")
"RTN","IBCOPR",89,0)
 .   .   .   .   I DATE<DATESTRT!(DATE>DATEEND) Q
"RTN","IBCOPR",90,0)
 .   .   .   .   I '$P($G(^PRCA(433,TRANDA,0)),"^",4) Q
"RTN","IBCOPR",91,0)
 .   .   .   .   S AMOUNT=$P($G(^PRCA(433,TRANDA,3)),"^")
"RTN","IBCOPR",92,0)
 .   .   .   .   S ^TMP($J,"IBCOPR","TRAN",SOI,CLASS,DATE,DA)=DFN_"^"_INSCO_"^"_CANCEL_"^"_TRANDA_"^"_$P(DATA,"^",2)_"^"_AMOUNT
"RTN","IBCOPR",93,0)
 .   .   .   .   I CANCEL="" S PAYMTCNT(SOI,CLASS)=$G(PAYMTCNT(SOI,CLASS))+1,PAYMTAMT(SOI,CLASS)=$G(PAYMTAMT(SOI,CLASS))+AMOUNT
"RTN","IBCOPR",94,0)
 ;
"RTN","IBCOPR",95,0)
 S SOI=0
"RTN","IBCOPR",96,0)
 F  S SOI=$O(TOTALCNT(SOI)) Q:SOI=""  I $G(COUNTNEW(SOI))="" S COUNTNEW(SOI)=0
"RTN","IBCOPR",97,0)
 F  S SOI=$O(PAYMTCNT(SOI)) Q:SOI=""  I $G(COUNTNEW(SOI))="" S COUNTNEW(SOI)=0
"RTN","IBCOPR",98,0)
 D PRINT^IBCOPR1
"RTN","IBCOPR",99,0)
 ;
"RTN","IBCOPR",100,0)
 D ^%ZISC
"RTN","IBCOPR",101,0)
 K ^TMP($J,"IBCOPR")
"RTN","IBCOPR",102,0)
 Q
"RTN","IBCOPR",103,0)
 ;
"RTN","IBCOPR",104,0)
 ;
"RTN","IBCOPR",105,0)
DATESEL ;  select starting and ending dates in days
"RTN","IBCOPR",106,0)
 ;  returns datestrt and dateend
"RTN","IBCOPR",107,0)
 N %,%DT,%H,%I,DEFAULT,X,Y
"RTN","IBCOPR",108,0)
 K DATEEND,DATESTRT
"RTN","IBCOPR",109,0)
START S Y=$E(DT,1,5)_"01" D DD^%DT S DEFAULT=Y
"RTN","IBCOPR",110,0)
 S %DT("A")="Start with Date: ",%DT("B")=DEFAULT,%DT="AEP",%DT(0)=-DT D ^%DT I Y<0 Q
"RTN","IBCOPR",111,0)
 I $E(Y,6,7)="00" S Y=$E(Y,1,5)_"01"
"RTN","IBCOPR",112,0)
 S DATESTRT=Y
"RTN","IBCOPR",113,0)
 S Y=DT D DD^%DT S DEFAULT=Y
"RTN","IBCOPR",114,0)
 S %DT("A")="  End with Date: ",%DT("B")=DEFAULT,%DT="AEP",%DT(0)=-DT D ^%DT I Y<0 Q
"RTN","IBCOPR",115,0)
 I $E(Y,6,7)="00" S Y=$E(Y,1,5)_"01"
"RTN","IBCOPR",116,0)
 I Y<DATESTRT W !,"END DATE MUST BE GREATER THAN OR EQUAL TO THE START DATE.",! G START
"RTN","IBCOPR",117,0)
 S DATEEND=Y,Y=DATESTRT D DD^%DT
"RTN","IBCOPR",118,0)
 W !?5,"***  Selected date range from ",Y," to " S Y=DATEEND D DD^%DT W Y,"  ***"
"RTN","IBCOPR",119,0)
 Q
"RTN","IBCOPR",120,0)
 ;
"RTN","IBCOPR",121,0)
 ;;
"RTN","IBCOPR",122,0)
SOISEL ; Select one SOI (source of information) or ALL - File #355.12
"RTN","IBCOPR",123,0)
 NEW DIC,DTOUT,DUOUT,X,Y,CT,Q
"RTN","IBCOPR",124,0)
 K IBCNESOI S CT=0 W !?5,"Enter Sources of Information to include one at a time."
"RTN","IBCOPR",125,0)
SOISEL1 S DIC(0)="AMEQ"
"RTN","IBCOPR",126,0)
 S Q="Include Source of Information"
"RTN","IBCOPR",127,0)
 I CT=0 S Q=Q_" (<RETURN> for ALL)"
"RTN","IBCOPR",128,0)
 E  S Q="Also "_Q
"RTN","IBCOPR",129,0)
 S DIC("A")=$$FO^IBCNEUT1(Q_": ",50,"R")
"RTN","IBCOPR",130,0)
 S DIC="^IBE(355.12,"
"RTN","IBCOPR",131,0)
 D ^DIC
"RTN","IBCOPR",132,0)
 I $D(DUOUT)!$D(DTOUT) G SOISELX
"RTN","IBCOPR",133,0)
 ; If nothing was selected (Y=-1), select ALL sources
"RTN","IBCOPR",134,0)
 I Y=-1 G SOISELX:CT=1 S IBCNESOI=1 G SOISELX
"RTN","IBCOPR",135,0)
 S IBCNESOI($P(Y,"^",1))=$P(Y,"^",2),CT=1 G SOISEL1
"RTN","IBCOPR",136,0)
 ;
"RTN","IBCOPR",137,0)
SOISELX ; SOISEL exit pt
"RTN","IBCOPR",138,0)
 Q
"RTN","IBCOPR",139,0)
 ;
"RTN","IBCOPR",140,0)
SUMMARY() ;  ask to print detailed or summary report
"RTN","IBCOPR",141,0)
 N DIR,DIRUT,X,Y
"RTN","IBCOPR",142,0)
 S DIR(0)="SOA^D:detailed;S:summary;",DIR("B")="summary"
"RTN","IBCOPR",143,0)
 S DIR("A")="Type of report to print: "
"RTN","IBCOPR",144,0)
 W ! D ^DIR
"RTN","IBCOPR",145,0)
 I $D(DIRUT) Q 0
"RTN","IBCOPR",146,0)
 Q $S(Y="S":1,Y="D":2,1:0)
"RTN","IBCOPR",147,0)
 ;
"RTN","IBCOPR1")
0^13^B32793618^B31375069
"RTN","IBCOPR1",1,0)
IBCOPR1 ;WISC/RFJ,BOISE/WRL-print dollar amts for pre-registration ; 05 May 97  8:34 AM
"RTN","IBCOPR1",2,0)
 ;;2.0; INTEGRATED BILLING ;**75,345**; 21-MAR-94;Build 28
"RTN","IBCOPR1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCOPR1",4,0)
 Q
"RTN","IBCOPR1",5,0)
 ;
"RTN","IBCOPR1",6,0)
 ;
"RTN","IBCOPR1",7,0)
PRINT ;  print report
"RTN","IBCOPR1",8,0)
 N %,%H,%I,DATA,DATEDIS1,DATEDIS2,DFN,IBCNFLAG,IBCNLINE,INSCO,NOW,PAGE,SCREEN,X,Y,SOI
"RTN","IBCOPR1",9,0)
 ;
"RTN","IBCOPR1",10,0)
 S Y=$P(DATESTRT,".") D DD^%DT S DATEDIS1=Y
"RTN","IBCOPR1",11,0)
 S Y=$P(DATEEND,".") D DD^%DT S DATEDIS2=Y
"RTN","IBCOPR1",12,0)
 D NOW^%DTC S Y=% D DD^%DT S NOW=Y
"RTN","IBCOPR1",13,0)
 S PAGE=1,IBCNLINE="",$P(IBCNLINE,"-",81)=""
"RTN","IBCOPR1",14,0)
 S SCREEN=0 I '$D(ZTQUEUED),IO=IO(0),$E(IOST)="C" S SCREEN=1
"RTN","IBCOPR1",15,0)
 U IO
"RTN","IBCOPR1",16,0)
 S SOI=0
"RTN","IBCOPR1",17,0)
P1 S SOI=$O(COUNTNEW(SOI)) I SOI="" Q
"RTN","IBCOPR1",18,0)
 I SCREEN,PAGE>1 D PAUSE Q:$G(IBCNFLAG)
"RTN","IBCOPR1",19,0)
 D H
"RTN","IBCOPR1",20,0)
 ;
"RTN","IBCOPR1",21,0)
 ;  show list of new patients for source
"RTN","IBCOPR1",22,0)
 I IBCNFSUM=2 D H1 S DFN=0 F  S DFN=$O(^TMP($J,"IBCOPR","NEW",SOI,DFN)) Q:'DFN!($G(IBCNFLAG))  D
"RTN","IBCOPR1",23,0)
 .   S INSCO=0 F  S INSCO=$O(^TMP($J,"IBCOPR","NEW",SOI,DFN,INSCO)) Q:'INSCO!($G(IBCNFLAG))  D
"RTN","IBCOPR1",24,0)
 .   .   S DATA=^TMP($J,"IBCOPR","ALL",DFN,INSCO)
"RTN","IBCOPR1",25,0)
 .   .   W !,$E($P(DATA,"^"),1,25),?27,$P(DATA,"^",2),?34,$E($P($G(^DIC(36,INSCO,0)),"^"),1,30),?68,$P(DATA,"^",3)
"RTN","IBCOPR1",26,0)
 .   .   I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H,H1
"RTN","IBCOPR1",27,0)
 ;
"RTN","IBCOPR1",28,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",29,0)
 I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H
"RTN","IBCOPR1",30,0)
 ;
"RTN","IBCOPR1",31,0)
 W !,"    TOTAL NEW POLICIES IDENTIFIED WITH ",$P(^IBE(355.12,SOI,0),"^",2),": ",COUNTNEW(SOI),!
"RTN","IBCOPR1",32,0)
 ;
"RTN","IBCOPR1",33,0)
 ;  *** INPATIENT ***
"RTN","IBCOPR1",34,0)
 ;  show list of new inpatient bills
"RTN","IBCOPR1",35,0)
 I $G(IBCNFSUM)=2 D BILL(1)
"RTN","IBCOPR1",36,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",37,0)
 I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H
"RTN","IBCOPR1",38,0)
 ;
"RTN","IBCOPR1",39,0)
 W !,"    TOTAL INPATIENT BILLS COUNT: ",$G(TOTALCNT(SOI,1))+0,?44,"AMOUNT: ",$J($FN(+$G(TOTALAMT(SOI,1)),",",2),12),!
"RTN","IBCOPR1",40,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",41,0)
 I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H
"RTN","IBCOPR1",42,0)
 ;
"RTN","IBCOPR1",43,0)
 ;  show list of inpatient transactions
"RTN","IBCOPR1",44,0)
 I $G(IBCNFSUM)=2 D TRAN(1)
"RTN","IBCOPR1",45,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",46,0)
 I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H
"RTN","IBCOPR1",47,0)
 ;
"RTN","IBCOPR1",48,0)
 W !,"    TOTAL INPATIENT PAYMENT COUNT: ",$G(PAYMTCNT(SOI,1))+0,?44,"AMOUNT: ",$J($FN(+$G(PAYMTAMT(SOI,1)),",",2),12),!
"RTN","IBCOPR1",49,0)
 ;
"RTN","IBCOPR1",50,0)
 ;  *** OUTPATIENT ***
"RTN","IBCOPR1",51,0)
 ;  show list of new outpatient bills
"RTN","IBCOPR1",52,0)
 I $G(IBCNFSUM)=2 D BILL(3)
"RTN","IBCOPR1",53,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",54,0)
 I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H
"RTN","IBCOPR1",55,0)
 ;
"RTN","IBCOPR1",56,0)
 W !,"    TOTAL OUTPATIENT BILLS COUNT: ",$G(TOTALCNT(SOI,3))+0,?44,"AMOUNT: ",$J($FN(+$G(TOTALAMT(SOI,3)),",",2),12),!
"RTN","IBCOPR1",57,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",58,0)
 I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H
"RTN","IBCOPR1",59,0)
 ;
"RTN","IBCOPR1",60,0)
 ;  show list of outpatient transactions
"RTN","IBCOPR1",61,0)
 I $G(IBCNFSUM)=2 D TRAN(3)
"RTN","IBCOPR1",62,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",63,0)
 I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H
"RTN","IBCOPR1",64,0)
 ;
"RTN","IBCOPR1",65,0)
 W !,"    TOTAL OUTPATIENT PAYMENT COUNT: ",$G(PAYMTCNT(SOI,3))+0,?44,"AMOUNT: ",$J($FN(+$G(PAYMTAMT(SOI,3)),",",2),12),!
"RTN","IBCOPR1",66,0)
 G P1
"RTN","IBCOPR1",67,0)
 ;
"RTN","IBCOPR1",68,0)
 ;
"RTN","IBCOPR1",69,0)
 ;
"RTN","IBCOPR1",70,0)
BILL(CLASS) ;  print bills where class=1 inpatient, class=3 outpatient
"RTN","IBCOPR1",71,0)
 N CANCEL,DA,DATE,DATA,DATA1,Y
"RTN","IBCOPR1",72,0)
 D H2
"RTN","IBCOPR1",73,0)
 S DATE=0 F  S DATE=$O(^TMP($J,"IBCOPR","BILL",SOI,CLASS,DATE)) Q:'DATE!($G(IBCNFLAG))  D
"RTN","IBCOPR1",74,0)
 .   S DA=0 F  S DA=$O(^TMP($J,"IBCOPR","BILL",SOI,CLASS,DATE,DA)) Q:'DA!($G(IBCNFLAG))  D
"RTN","IBCOPR1",75,0)
 .   .   ;  data1 = dfn ^ insco ^ cancel ^ bill number ^ amount
"RTN","IBCOPR1",76,0)
 .   .   S DATA1=$G(^TMP($J,"IBCOPR","BILL",SOI,CLASS,DATE,DA))
"RTN","IBCOPR1",77,0)
 .   .   S DATA=$G(^TMP($J,"IBCOPR","ALL",+$P(DATA1,"^"),$P(DATA1,"^",2)))
"RTN","IBCOPR1",78,0)
 .   .   S Y=DATE D DD^%DT
"RTN","IBCOPR1",79,0)
 .   .   W !,$E($P(DATA,"^"),1,25),?27,$P(DATA,"^",2),?33,$P(DATA1,"^",3),?34,$P(DATA1,"^",4),?54,$J($FN(+$P(DATA1,"^",5),",",2),10),?68,Y
"RTN","IBCOPR1",80,0)
 .   .   I $P(DATA1,"^",3)'="" S CANCEL=1
"RTN","IBCOPR1",81,0)
 .   .   I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H,H2
"RTN","IBCOPR1",82,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",83,0)
 I $G(CANCEL) W !,"    * Next to bill indicates bill is canceled and not used in totals"
"RTN","IBCOPR1",84,0)
 Q
"RTN","IBCOPR1",85,0)
 ;
"RTN","IBCOPR1",86,0)
 ;
"RTN","IBCOPR1",87,0)
TRAN(CLASS) ;  print transaction where class=1 inpatient, class=3 outpatient
"RTN","IBCOPR1",88,0)
 N CANCEL,DA,DATE,DATA,DATA1,TYPE,Y
"RTN","IBCOPR1",89,0)
 D H3
"RTN","IBCOPR1",90,0)
 S DATE=0 F  S DATE=$O(^TMP($J,"IBCOPR","TRAN",SOI,CLASS,DATE)) Q:'DATE!($G(IBCNFLAG))  D
"RTN","IBCOPR1",91,0)
 .   S DA=0 F  S DA=$O(^TMP($J,"IBCOPR","TRAN",SOI,CLASS,DATE,DA)) Q:'DA!($G(IBCNFLAG))  D
"RTN","IBCOPR1",92,0)
 .   .   ;  data1 = dfn ^ insco ^ cancel ^ trans # ^ type ^ amount 
"RTN","IBCOPR1",93,0)
 .   .   S DATA1=$G(^TMP($J,"IBCOPR","TRAN",SOI,CLASS,DATE,DA))
"RTN","IBCOPR1",94,0)
 .   .   S DATA=$G(^TMP($J,"IBCOPR","ALL",+$P(DATA1,"^"),$P(DATA1,"^",2)))
"RTN","IBCOPR1",95,0)
 .   .   S Y=DATE D DD^%DT
"RTN","IBCOPR1",96,0)
 .   .   S TYPE=$P(DATA1,"^",5),TYPE=$S(TYPE=34:"FULL",1:"PART")
"RTN","IBCOPR1",97,0)
 .   .   W !,$E($P(DATA,"^"),1,25),?27,$P(DATA,"^",2),?33,$P(DATA1,"^",3),?34,$P(DATA1,"^",4),?46,TYPE,?54,$J($FN(+$P(DATA1,"^",6),",",2),10),?68,Y
"RTN","IBCOPR1",98,0)
 .   .   I $P(DATA1,"^",3)'="" S CANCEL=1
"RTN","IBCOPR1",99,0)
 .   .   I $Y>(IOSL-6) D:SCREEN PAUSE Q:$G(IBCNFLAG)  D H,H3
"RTN","IBCOPR1",100,0)
 I $G(IBCNFLAG) Q
"RTN","IBCOPR1",101,0)
 I $G(CANCEL) W !,"    * Next to payment indicates payment is canceled and not used in totals"
"RTN","IBCOPR1",102,0)
 Q
"RTN","IBCOPR1",103,0)
 ;
"RTN","IBCOPR1",104,0)
 ;
"RTN","IBCOPR1",105,0)
PAUSE ;  pause at end of page
"RTN","IBCOPR1",106,0)
 N X U IO(0) W !,"Press RETURN to continue, '^' to exit:" R X:DTIME
"RTN","IBCOPR1",107,0)
 S:'$T X="^" S:X["^" IBCNFLAG=1 U IO
"RTN","IBCOPR1",108,0)
 Q
"RTN","IBCOPR1",109,0)
 ;
"RTN","IBCOPR1",110,0)
 ;
"RTN","IBCOPR1",111,0)
H ;  header
"RTN","IBCOPR1",112,0)
 S %=NOW_"  PAGE "_PAGE,PAGE=PAGE+1 I PAGE'=2!(SCREEN) W @IOF
"RTN","IBCOPR1",113,0)
 W $C(13),"SOURCE OF INFORMATION REPORT",?(80-$L(%)),%
"RTN","IBCOPR1",114,0)
 W !,"  FOR THE DATE RANGE: ",DATEDIS1,"  TO  ",DATEDIS2,?65,$J("TYPE: "_$S(IBCNFSUM=1:"SUMMARY",1:"DETAILED"),15)
"RTN","IBCOPR1",115,0)
 W !,"  SOURCE OF INFORMATION: ",$P(^IBE(355.12,SOI,0),"^",2)
"RTN","IBCOPR1",116,0)
 W !,IBCNLINE
"RTN","IBCOPR1",117,0)
 Q
"RTN","IBCOPR1",118,0)
 ;
"RTN","IBCOPR1",119,0)
 ;
"RTN","IBCOPR1",120,0)
H1 ;  header for patient list
"RTN","IBCOPR1",121,0)
 W !,"Patient Name",?27,"SSN",?34,"Insurance Company",?68,"Source Date"
"RTN","IBCOPR1",122,0)
 W !,$TR(IBCNLINE,"-",".")
"RTN","IBCOPR1",123,0)
 Q
"RTN","IBCOPR1",124,0)
 ;
"RTN","IBCOPR1",125,0)
 ;
"RTN","IBCOPR1",126,0)
H2 ;  header for bill list
"RTN","IBCOPR1",127,0)
 W !,$E($TR(IBCNLINE,"-","."),1,27)," ",$S(CLASS=1:" Inpatient",1:"Outpatient")," Bills Entered ",$E($TR(IBCNLINE,"-","."),1,27)
"RTN","IBCOPR1",128,0)
 W !,"Patient Name",?27,"SSN",?34,"Bill Number",?54,$J("Amount",10),?68,"Bill Date"
"RTN","IBCOPR1",129,0)
 W !,$TR(IBCNLINE,"-",".")
"RTN","IBCOPR1",130,0)
 Q
"RTN","IBCOPR1",131,0)
 ;
"RTN","IBCOPR1",132,0)
 ;
"RTN","IBCOPR1",133,0)
H3 ;  header for transaction list
"RTN","IBCOPR1",134,0)
 W !,$E($TR(IBCNLINE,"-","."),1,24)," ",$S(CLASS=1:" Inpatient",1:"Outpatient")," Payments Collected ",$E($TR(IBCNLINE,"-","."),1,25)
"RTN","IBCOPR1",135,0)
 W !,"Patient Name",?27,"SSN",?34,"Tran Number",?46,"Type",?54,$J("Amount",10),?68,"Bill Date"
"RTN","IBCOPR1",136,0)
 W !,$TR(IBCNLINE,"-",".")
"RTN","IBCOPR1",137,0)
 Q
"RTN","IBRFN2")
0^11^B11408951^B11587183
"RTN","IBRFN2",1,0)
IBRFN2 ;ALB/AAS - PASS INSURANCE/BEDSECTION DATA TO A/R FOR MCCR/NDB ; 8-OCT-93
"RTN","IBRFN2",2,0)
 ;;2.0;INTEGRATED BILLING;**75,80,345**;21-MAR-94;Build 28
"RTN","IBRFN2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBRFN2",4,0)
 ;
"RTN","IBRFN2",5,0)
CRIT(IBIFN) ; Pass AR insurance data for MCCR/NDB
"RTN","IBRFN2",6,0)
 ;         Input:    IBIFN -- Internal entry of Bill (ptr to #399)
"RTN","IBRFN2",7,0)
 ;                            (should be same as ptr to 430)
"RTN","IBRFN2",8,0)
 ;
"RTN","IBRFN2",9,0)
 ;         Returns:  piece 1 = criteria 3 (type of policy)
"RTN","IBRFN2",10,0)
 ;                   piece 2 = criteria 4 (how policy identified)
"RTN","IBRFN2",11,0)
 ;                   piece 3 = criteria 5 (primary bedsection of bill)
"RTN","IBRFN2",12,0)
 ;            see table below for values
"RTN","IBRFN2",13,0)
 ;
"RTN","IBRFN2",14,0)
 ;  -------------------------------------------------------------------
"RTN","IBRFN2",15,0)
 ; |       |              Numeric Value                                |
"RTN","IBRFN2",16,0)
 ; |-------|-----------------------------------------------------------|
"RTN","IBRFN2",17,0)
 ; | Piece |        1       |       2      |      3      |       4     |
"RTN","IBRFN2",18,0)
 ; |-------|----------------|--------------|-------------|-------------|
"RTN","IBRFN2",19,0)
 ; |   1   |  Full Medical  | Medicare Sup |  *Other     |       -     |
"RTN","IBRFN2",20,0)
 ; |   2   | *By interview  | By Data Match|   by IVM    |by pre-regist|
"RTN","IBRFN2",21,0)
 ; |   3   |    Medical     |   Surgical   | Pschiatric  | *Any Other  |
"RTN","IBRFN2",22,0)
 ; |       |                |              |             |including opt|
"RTN","IBRFN2",23,0)
 ;  -------------------------------------------------------------------
"RTN","IBRFN2",24,0)
 ;
"RTN","IBRFN2",25,0)
 ; -- error, returns -1, bill does not exist
"RTN","IBRFN2",26,0)
 ;
"RTN","IBRFN2",27,0)
 N IBX
"RTN","IBRFN2",28,0)
 S IBX=-1
"RTN","IBRFN2",29,0)
 ; -- set value to defaults if okayed by vaco
"RTN","IBRFN2",30,0)
 ;S IBX="3^1^4"
"RTN","IBRFN2",31,0)
 ;
"RTN","IBRFN2",32,0)
 I '$G(IBIFN)!($G(^DGCR(399,+$G(IBIFN),0))="") G CRITQ
"RTN","IBRFN2",33,0)
 S IBX=""
"RTN","IBRFN2",34,0)
 ;
"RTN","IBRFN2",35,0)
 S $P(IBX,"^",1)=$$TYPOL(IBIFN)
"RTN","IBRFN2",36,0)
 S $P(IBX,"^",2)=$$HOWID(IBIFN)
"RTN","IBRFN2",37,0)
 S $P(IBX,"^",3)=$$BEDSC(IBIFN)
"RTN","IBRFN2",38,0)
 ;
"RTN","IBRFN2",39,0)
CRITQ Q IBX
"RTN","IBRFN2",40,0)
 ;
"RTN","IBRFN2",41,0)
 ;
"RTN","IBRFN2",42,0)
TYPOL(IBIFN) ; -- compute type of policy for a bill
"RTN","IBRFN2",43,0)
 N IBX,IBCDFN,IBCPOL,TYPE
"RTN","IBRFN2",44,0)
 S IBX=""
"RTN","IBRFN2",45,0)
 S IBCDFN=$$POL(IBIFN) I 'IBCDFN G TYPOLQ
"RTN","IBRFN2",46,0)
 S IBCPOL=$P($G(^DPT(+$P($G(^DGCR(399,+$G(IBIFN),0)),"^",2),.312,IBCDFN,0)),"^",18) ; pointer to group plan (355.3)
"RTN","IBRFN2",47,0)
 I 'IBCPOL S IBX=3 ; default type of policy is 3 or other
"RTN","IBRFN2",48,0)
 I IBCPOL D
"RTN","IBRFN2",49,0)
 .S TYPE=$P($G(^IBE(355.1,+$P($G(^IBA(355.3,+IBCPOL,0)),"^",9),0)),"^",3)
"RTN","IBRFN2",50,0)
 .S IBX=$S(TYPE=1:1,TYPE=11:2,1:3) ; full medical, medicare supplementa or other
"RTN","IBRFN2",51,0)
TYPOLQ I IBX<1!(IBX>3)!(IBX'?1N) S IBX=3 ; must be number from 1-3, default=3
"RTN","IBRFN2",52,0)
 Q IBX
"RTN","IBRFN2",53,0)
 ;
"RTN","IBRFN2",54,0)
 ;
"RTN","IBRFN2",55,0)
HOWID(IBIFN) ; -- compute how policy was identified
"RTN","IBRFN2",56,0)
 N IBX,IBCDFN
"RTN","IBRFN2",57,0)
 S IBX=""
"RTN","IBRFN2",58,0)
 S IBCDFN=$$POL(IBIFN) I 'IBCDFN G HOWIDQ
"RTN","IBRFN2",59,0)
 S IBX=$P($G(^DPT(+$P($G(^DGCR(399,+$G(IBIFN),0)),"^",2),.312,IBCDFN,1)),"^",9)
"RTN","IBRFN2",60,0)
 ;
"RTN","IBRFN2",61,0)
HOWIDQ I IBX<1!(IBX'?1N) S IBX=1 ; must be number, default=1 by interview
"RTN","IBRFN2",62,0)
 Q IBX
"RTN","IBRFN2",63,0)
 ;
"RTN","IBRFN2",64,0)
 ;
"RTN","IBRFN2",65,0)
BEDSC(IBIFN) ; -- compute primary bedsection for a bill
"RTN","IBRFN2",66,0)
 ; -- based on greatest length of stay
"RTN","IBRFN2",67,0)
 N IBX,IBRC,IBBS,IBUN,IBMAX
"RTN","IBRFN2",68,0)
 S IBX=""
"RTN","IBRFN2",69,0)
 I '$G(IBIFN) G BEDSCQ
"RTN","IBRFN2",70,0)
 I $P($G(^DGCR(399,+IBIFN,0)),"^",5)>2 S IBX=4 G BEDSCQ ; opt bill
"RTN","IBRFN2",71,0)
 ;
"RTN","IBRFN2",72,0)
 ; -- add up all los for each rev code.
"RTN","IBRFN2",73,0)
 S IBRC=0 F  S IBRC=$O(^DGCR(399,+IBIFN,"RC",IBRC)) Q:'IBRC  D
"RTN","IBRFN2",74,0)
 .S IBUN=$P($G(^DGCR(399,+IBIFN,"RC",IBRC,0)),"^",3) ; units of service
"RTN","IBRFN2",75,0)
 .S IBBS=$P($G(^DGCR(399,+IBIFN,"RC",IBRC,0)),"^",5) ; bedsection from 399.1
"RTN","IBRFN2",76,0)
 .Q:IBBS=""
"RTN","IBRFN2",77,0)
 .S IBBS(IBBS)=$G(IBBS(IBBS))+IBUN
"RTN","IBRFN2",78,0)
 .Q
"RTN","IBRFN2",79,0)
 ;
"RTN","IBRFN2",80,0)
 ; -- find bedsection with highest los
"RTN","IBRFN2",81,0)
 S IBMAX=""
"RTN","IBRFN2",82,0)
 S X=0 F  S X=$O(IBBS(X)) Q:'X  I IBBS(X)>$G(IBBS(+IBMAX)) S IBMAX=X
"RTN","IBRFN2",83,0)
 ;
"RTN","IBRFN2",84,0)
 S IBX=$P($G(^DGCR(399.1,+IBMAX,0)),"^")
"RTN","IBRFN2",85,0)
 ;
"RTN","IBRFN2",86,0)
BEDSCQ S IBX=$S(IBX="":4,IBX["MEDICAL":1,IBX["SURGICAL":2,IBX["PSYCHIATRIC":3,1:4)
"RTN","IBRFN2",87,0)
 Q IBX
"RTN","IBRFN2",88,0)
 ;
"RTN","IBRFN2",89,0)
POL(IBIFN) ; -- compute internal policy id for a bill
"RTN","IBRFN2",90,0)
 N X,Y,DFN,IBDD,IBCDFN
"RTN","IBRFN2",91,0)
 S IBCDFN=$P($G(^DGCR(399,+IBIFN,"MP")),"^",2)
"RTN","IBRFN2",92,0)
 I 'IBCDFN D
"RTN","IBRFN2",93,0)
 .S IBCNS=+$G(^DGCR(399,+IBIFN,"MP"))
"RTN","IBRFN2",94,0)
 .S DFN=$P($G(^DGCR(399,+IBIFN,0)),"^",2)
"RTN","IBRFN2",95,0)
 .S X="IBCNS1" X ^%ZOSF("TEST") I $T D ALL^IBCNS1(DFN,"IBDD")
"RTN","IBRFN2",96,0)
 .I '$D(IBDD) Q
"RTN","IBRFN2",97,0)
 .S X=0 F  S X=$O(IBDD(X)) Q:'X  I IBCNS=+$G(IBDD(X,0)) S IBCDFN=X Q
"RTN","IBRFN2",98,0)
 .Q
"RTN","IBRFN2",99,0)
POLQ Q IBCDFN
"RTN","IBY345PR")
0^^B567144^n/a
"RTN","IBY345PR",1,0)
IBY345PR ;;PROXICOM/RTO - Pre Installation Program ;5-March-2007
"RTN","IBY345PR",2,0)
 ;;2.0;INTEGRATED BILLING;**345**;21-MAR-94;Build 28
"RTN","IBY345PR",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBY345PR",4,0)
 ;
"RTN","IBY345PR",5,0)
 ;
"RTN","IBY345PR",6,0)
 ;Program Description: This is the pre install routine for IB*2.0*345
"RTN","IBY345PR",7,0)
 ;
"RTN","IBY345PR",8,0)
 ;  Program to remove all prior entires of file "SOURCE OF INFORMATION" ^IBE(355.12)
"RTN","IBY345PR",9,0)
 ;  
"RTN","IBY345PR",10,0)
REM ;  Remove old entries
"RTN","IBY345PR",11,0)
 N DA,DIK
"RTN","IBY345PR",12,0)
 S DIK="^IBE(355.12,",DA(1)=1,DA=0
"RTN","IBY345PR",13,0)
 F  S DA=$O(^IBE(355.12,DA)) Q:DA="B"!'DA  D ^DIK
"RTN","IBY345PR",14,0)
 Q
"RTN","IBY345PS")
0^^B830341^n/a
"RTN","IBY345PS",1,0)
IBY345PS ;;PROXICOM/RTO - Post Installation Program ;10-November-2006
"RTN","IBY345PS",2,0)
 ;;2.0;INTEGRATED BILLING;**345**;21-MAR-94;Build 28
"RTN","IBY345PS",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBY345PS",4,0)
 ;
"RTN","IBY345PS",5,0)
 ;
"RTN","IBY345PS",6,0)
 ;Program Description: This is the post install routine for IB*2.0*345
"RTN","IBY345PS",7,0)
 ;
"RTN","IBY345PS",8,0)
 ;  Program to check and clean up "ghost buffer entries"
"RTN","IBY345PS",9,0)
 ;  
"RTN","IBY345PS",10,0)
REM ;  Remove old entries
"RTN","IBY345PS",11,0)
 NEW IEN,STAT
"RTN","IBY345PS",12,0)
 S IEN=0
"RTN","IBY345PS",13,0)
 F  S IEN=$O(^IBA(355.33,IEN)) Q:'IEN  D
"RTN","IBY345PS",14,0)
 . S STAT=$P($G(^IBA(355.33,IEN,0)),"^",4)
"RTN","IBY345PS",15,0)
 . I STAT="E" Q
"RTN","IBY345PS",16,0)
 . I $G(^IBA(355.33,IEN,40))="",$G(^IBA(355.33,IEN,60))="" Q
"RTN","IBY345PS",17,0)
 . D DELDATA^IBCNBED(IEN)
"RTN","IBY345PS",18,0)
 Q
"SEC","^DIC",355.12,355.12,0,"AUDIT")
@
"SEC","^DIC",355.12,355.12,0,"DD")
@
"SEC","^DIC",355.12,355.12,0,"DEL")
@
"SEC","^DIC",355.12,355.12,0,"LAYGO")
@
"SEC","^DIC",355.12,355.12,0,"RD")
@
"SEC","^DIC",355.12,355.12,0,"WR")
@
"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"VER")
8.0^22.0
"^DD",2,2.312,1.09,0)
SOURCE OF INFORMATION^P355.12'O^IBE(355.12,^1;9^Q
"^DD",2,2.312,1.09,1,0)
^.1
"^DD",2,2.312,1.09,1,1,0)
^^TRIGGER^2.312^1.1
"^DD",2,2.312,1.09,1,1,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DPT(D0,.312,D1,1)):^(1),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X=DIV S %=$P($H,",",2),X=DT_(%\60#60/100+(%\3600)+(%#60/10000)/100) X ^DD(2.312,1.09,1,1,1.4)
"^DD",2,2.312,1.09,1,1,1.1)
S X=DIV S %=$P($H,",",2),X=$E(DT_(%\60#60/100+(%\3600)+(%#60/10000)/100),1,12)
"^DD",2,2.312,1.09,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),1)),DIV=X S $P(^(1),U,10)=DIV,DIH=2.312,DIG=1.1 D ^DICR
"^DD",2,2.312,1.09,1,1,2)
Q
"^DD",2,2.312,1.09,1,1,"CREATE VALUE")
NOW
"^DD",2,2.312,1.09,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2.312,1.09,1,1,"DT")
3030131
"^DD",2,2.312,1.09,1,1,"FIELD")
#1.1
"^DD",2,2.312,1.09,2)
S Y(0)=Y S Y=$$GET1^DIQ(355.12,Y_",",.02,"E")
"^DD",2,2.312,1.09,2.1)
S Y=$$GET1^DIQ(355.12,Y_",",.02,"E")
"^DD",2,2.312,1.09,3)
Enter the source by which this insurance information was obtained.
"^DD",2,2.312,1.09,21,0)
^.001^11^11^3061206^^^
"^DD",2,2.312,1.09,21,1,0)
Enter the last source of this information.
"^DD",2,2.312,1.09,21,2,0)
If the insurance information was obtained by patient interview, then
"^DD",2,2.312,1.09,21,3,0)
enter interview, etc.  If the information was initially or previously
"^DD",2,2.312,1.09,21,4,0)
obtained by one source but updated by another source, then enter the
"^DD",2,2.312,1.09,21,5,0)
most recent source of the information.
"^DD",2,2.312,1.09,21,6,0)
 
"^DD",2,2.312,1.09,21,7,0)
The data in this field will be initially set to INTERVIEW with IB v2.
"^DD",2,2.312,1.09,21,8,0)
The data may be passed to Accounts Receivable and/or the MCCR NDB.
"^DD",2,2.312,1.09,21,9,0)
 
"^DD",2,2.312,1.09,21,10,0)
If this field is being edited through the use of the pre-registration
"^DD",2,2.312,1.09,21,11,0)
software, the default for this field will be set to PRE-REGISTRATION.
"^DD",2,2.312,1.09,"DT")
3061031
"^DD",355.12,355.12,0)
FIELD^^.03^3
"^DD",355.12,355.12,0,"DDA")
N
"^DD",355.12,355.12,0,"DT")
3061024
"^DD",355.12,355.12,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",355.12,355.12,0,"IX","B",355.12,.01)

"^DD",355.12,355.12,0,"IX","C",355.12,.02)

"^DD",355.12,355.12,0,"NM","SOURCE OF INFORMATION")

"^DD",355.12,355.12,0,"PT",2.312,1.09)

"^DD",355.12,355.12,0,"PT",355.33,.03)

"^DD",355.12,355.12,.01,0)
CODE^RNJ3,0O^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",355.12,355.12,.01,1,0)
^.1
"^DD",355.12,355.12,.01,1,1,0)
355.12^B
"^DD",355.12,355.12,.01,1,1,1)
S ^IBE(355.12,"B",$E(X,1,30),DA)=""
"^DD",355.12,355.12,.01,1,1,2)
K ^IBE(355.12,"B",$E(X,1,30),DA)
"^DD",355.12,355.12,.01,2)
S Y(0)=Y S Y=$$GET1^DIQ(355.12,Y_",",.02,"E")
"^DD",355.12,355.12,.01,2.1)
S Y=$$GET1^DIQ(355.12,Y_",",.02,"E")
"^DD",355.12,355.12,.01,3)
Type a Number between 1 and 999, 0 Decimal Digits
"^DD",355.12,355.12,.01,21,0)
^.001^2^2^3061206^^^
"^DD",355.12,355.12,.01,21,1,0)
Source of Information code represents the origination of the patients 
"^DD",355.12,355.12,.01,21,2,0)
insurance information.
"^DD",355.12,355.12,.01,"DT")
3061108
"^DD",355.12,355.12,.02,0)
DESCRIPTION^RF^^0;2^K:$L(X)>30!($L(X)<3) X
"^DD",355.12,355.12,.02,1,0)
^.1
"^DD",355.12,355.12,.02,1,1,0)
355.12^C
"^DD",355.12,355.12,.02,1,1,1)
S ^IBE(355.12,"C",$E(X,1,30),DA)=""
"^DD",355.12,355.12,.02,1,1,2)
K ^IBE(355.12,"C",$E(X,1,30),DA)
"^DD",355.12,355.12,.02,1,1,"DT")
3061025
"^DD",355.12,355.12,.02,3)
Answer must be 3-30 characters in length.
"^DD",355.12,355.12,.02,21,0)
^^1^1^3061108^
"^DD",355.12,355.12,.02,21,1,0)
This is the description of the Source of Information code.
"^DD",355.12,355.12,.02,"DT")
3061108
"^DD",355.12,355.12,.03,0)
IB BUFFER ACRONYM^F^^0;3^K:$L(X)>5!($L(X)<1) X
"^DD",355.12,355.12,.03,3)
Answer must be 1-5 characters in length.
"^DD",355.12,355.12,.03,21,0)
^.001^1^1^3061206^^
"^DD",355.12,355.12,.03,21,1,0)
This acronym is used for display purposes in the Insurance Buffer screen.
"^DD",355.12,355.12,.03,"DT")
3061108
"^DD",355.33,355.33,.03,0)
SOURCE OF INFORMATION^P355.12'O^IBE(355.12,^0;3^Q
"^DD",355.33,355.33,.03,2)
S Y(0)=Y S Y=$$GET1^DIQ(355.12,Y_",",.02,"E")
"^DD",355.33,355.33,.03,2.1)
S Y=$$GET1^DIQ(355.12,Y_",",.02,"E")
"^DD",355.33,355.33,.03,3)
Enter the source by which this insurance information was obtained.
"^DD",355.33,355.33,.03,21,0)
^.001^1^1^3061206^^
"^DD",355.33,355.33,.03,21,1,0)
This is the source by which this insurance information was obtained.
"^DD",355.33,355.33,.03,"DT")
3061031
"^DIC",355.12,355.12,0)
SOURCE OF INFORMATION^355.12
"^DIC",355.12,355.12,0,"GL")
^IBE(355.12,
"^DIC",355.12,355.12,"%",0)
^1.005^^
"^DIC",355.12,355.12,"%D",0)
^^5^5^3061108^
"^DIC",355.12,355.12,"%D",1,0)
This file contains a list of valid Source of Information codes. These
"^DIC",355.12,355.12,"%D",2,0)
codes can be used to track where the insurance information originated 
"^DIC",355.12,355.12,"%D",3,0)
from.
"^DIC",355.12,355.12,"%D",4,0)
 
"^DIC",355.12,355.12,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",355.12,"B","SOURCE OF INFORMATION",355.12)

"BLD",6388,6)
^332
**END**
**END**
