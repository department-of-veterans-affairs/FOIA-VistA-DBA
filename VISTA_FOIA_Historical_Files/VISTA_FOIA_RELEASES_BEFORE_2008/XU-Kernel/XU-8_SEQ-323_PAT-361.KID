Released XU*8*361 SEQ #323
Extracted from mail message
**KIDS**:XU*8.0*361^

**INSTALL NAME**
XU*8.0*361
"BLD",849,0)
XU*8.0*361^KERNEL^0^3051103^y
"BLD",849,1,0)
^^2^2^3050126^^
"BLD",849,1,1,0)
Kernel Patch XU*8.0*361 Proxy Application User for Rehosting effort.
"BLD",849,1,2,0)
Please refer to the Description in Forum Patch Module for details.
"BLD",849,4,0)
^9.64PA^8994^3
"BLD",849,4,200,0)
200
"BLD",849,4,200,2,0)
^9.641^200.07^1
"BLD",849,4,200,2,200.07,0)
USER CLASS  (sub-file)
"BLD",849,4,200,2,200.07,1,0)
^9.6411^^0
"BLD",849,4,200,222)
y^n^p^^^^n^^n
"BLD",849,4,200,224)

"BLD",849,4,201,0)
201
"BLD",849,4,201,222)
y^n^f^^n^^y^o^y
"BLD",849,4,8994,0)
8994
"BLD",849,4,8994,2,0)
^9.641^8994^1
"BLD",849,4,8994,2,8994,0)
REMOTE PROCEDURE  (File-top level)
"BLD",849,4,8994,2,8994,1,0)
^9.6411^.11^1
"BLD",849,4,8994,2,8994,1,.11,0)
APP PROXY ALLOWED
"BLD",849,4,8994,222)
y^n^p^^^^n^^n
"BLD",849,4,8994,224)

"BLD",849,4,"APDD",200,200.07)

"BLD",849,4,"APDD",8994,8994)

"BLD",849,4,"APDD",8994,8994,.11)

"BLD",849,4,"B",200,200)

"BLD",849,4,"B",201,201)

"BLD",849,4,"B",8994,8994)

"BLD",849,6)
8^
"BLD",849,6.3)
1
"BLD",849,"ABPKG")
n
"BLD",849,"KRN",0)
^9.67PA^8989.52^19
"BLD",849,"KRN",.4,0)
.4
"BLD",849,"KRN",.4,"NM",0)
^9.68A^1^1
"BLD",849,"KRN",.4,"NM",1,0)
XUSAP PROXY LIST    FILE #200^200^0
"BLD",849,"KRN",.4,"NM","B","XUSAP PROXY LIST    FILE #200",1)

"BLD",849,"KRN",.401,0)
.401
"BLD",849,"KRN",.401,"NM",0)
^9.68A^1^1
"BLD",849,"KRN",.401,"NM",1,0)
XUSAP PROXY LIST    FILE #200^200^0
"BLD",849,"KRN",.401,"NM","B","XUSAP PROXY LIST    FILE #200",1)

"BLD",849,"KRN",.402,0)
.402
"BLD",849,"KRN",.403,0)
.403
"BLD",849,"KRN",.5,0)
.5
"BLD",849,"KRN",.84,0)
.84
"BLD",849,"KRN",3.6,0)
3.6
"BLD",849,"KRN",3.8,0)
3.8
"BLD",849,"KRN",9.2,0)
9.2
"BLD",849,"KRN",9.8,0)
9.8
"BLD",849,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",849,"KRN",9.8,"NM",1,0)
XUSAP^^0^10492122
"BLD",849,"KRN",9.8,"NM",2,0)
XUSRB5^^0^33074245
"BLD",849,"KRN",9.8,"NM","B","XUSAP",1)

"BLD",849,"KRN",9.8,"NM","B","XUSRB5",2)

"BLD",849,"KRN",19,0)
19
"BLD",849,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",849,"KRN",19,"NM",1,0)
XUSAP PROXY LIST^^0
"BLD",849,"KRN",19,"NM",2,0)
XUOPTUSER^^2
"BLD",849,"KRN",19,"NM","B","XUOPTUSER",2)

"BLD",849,"KRN",19,"NM","B","XUSAP PROXY LIST",1)

"BLD",849,"KRN",19.1,0)
19.1
"BLD",849,"KRN",101,0)
101
"BLD",849,"KRN",409.61,0)
409.61
"BLD",849,"KRN",771,0)
771
"BLD",849,"KRN",870,0)
870
"BLD",849,"KRN",8989.51,0)
8989.51
"BLD",849,"KRN",8989.52,0)
8989.52
"BLD",849,"KRN",8994,0)
8994
"BLD",849,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",849,"KRN",8994,"NM",1,0)
XUS INTRO MSG^^0
"BLD",849,"KRN",8994,"NM","B","XUS INTRO MSG",1)

"BLD",849,"KRN","B",.4,.4)

"BLD",849,"KRN","B",.401,.401)

"BLD",849,"KRN","B",.402,.402)

"BLD",849,"KRN","B",.403,.403)

"BLD",849,"KRN","B",.5,.5)

"BLD",849,"KRN","B",.84,.84)

"BLD",849,"KRN","B",3.6,3.6)

"BLD",849,"KRN","B",3.8,3.8)

"BLD",849,"KRN","B",9.2,9.2)

"BLD",849,"KRN","B",9.8,9.8)

"BLD",849,"KRN","B",19,19)

"BLD",849,"KRN","B",19.1,19.1)

"BLD",849,"KRN","B",101,101)

"BLD",849,"KRN","B",409.61,409.61)

"BLD",849,"KRN","B",771,771)

"BLD",849,"KRN","B",870,870)

"BLD",849,"KRN","B",8989.51,8989.51)

"BLD",849,"KRN","B",8989.52,8989.52)

"BLD",849,"KRN","B",8994,8994)

"BLD",849,"QUES",0)
^9.62^^
"DATA",201,1,0)
APPLICATION PROXY^^^
"DATA",201,2,0)
TEST ENTRY^^^
"DATA",201,3,0)
NON-PERSON^^
"DATA",201,4,0)
VOLUNTEER^^
"DATA",201,5,0)
CONNECTOR PROXY^^
"DATA",201,6,0)
EMPLOYEE
"FIA",200)
NEW PERSON
"FIA",200,0)
^VA(200,
"FIA",200,0,0)
200I
"FIA",200,0,1)
y^n^p^^^^n^^n
"FIA",200,0,10)

"FIA",200,0,11)

"FIA",200,0,"RLRO")

"FIA",200,0,"VR")
8.0^XU
"FIA",200,200)
1
"FIA",200,200,9.5)

"FIA",200,200.07)
0
"FIA",201)
USER CLASS
"FIA",201,0)
^VA(201,
"FIA",201,0,0)
201
"FIA",201,0,1)
y^n^f^^n^^y^o^y
"FIA",201,0,10)

"FIA",201,0,11)

"FIA",201,0,"RLRO")

"FIA",201,0,"VR")
8.0^XU
"FIA",201,201)
0
"FIA",201,201.01)
0
"FIA",8994)
REMOTE PROCEDURE
"FIA",8994,0)
^XWB(8994,
"FIA",8994,0,0)
8994
"FIA",8994,0,1)
y^n^p^^^^n^^n
"FIA",8994,0,10)

"FIA",8994,0,11)

"FIA",8994,0,"RLRO")

"FIA",8994,0,"VR")
8.0^XU
"FIA",8994,8994)
1
"FIA",8994,8994,.11)

"KRN",.4,126,-1)
0^1
"KRN",.4,126,0)
XUSAP PROXY LIST^3050308.1608^@^200^^@^3050511
"KRN",.4,126,"F",2)
.01~9.5,.01~9.5,2~
"KRN",.4,126,"H")
PROXY USER LIST
"KRN",.401,80,-1)
0^1
"KRN",.401,80,0)
XUSAP PROXY LIST^3050308.1611^@^200^^@^3050908
"KRN",.401,80,2,0)
^.4014^1^1
"KRN",.401,80,2,1,0)
200.07^^User Class^".01^^^^^^4
"KRN",.401,80,2,1,1,0)
^.40141^1^1
"KRN",.401,80,2,1,1,1,0)
200^USC3
"KRN",.401,80,2,1,1,"B",200,1)

"KRN",.401,80,2,1,"CM")
S Y(1)=$S($D(^VA(200,D0,"USC3",D1,0)):^(0),1:"") S X=$P($G(^VA(201,+$P(Y(1),U,1),0)),U) I D1>0 S DISX(1)=X
"KRN",.401,80,2,1,"F")
APPLICATION PROXXz^APPLICATION PROXY
"KRN",.401,80,2,1,"GET")
S Y(1)=$S($D(^VA(200,D0,"USC3",D1,0)):^(0),1:"") S X=$P($G(^VA(201,+$P(Y(1),U,1),0)),U) I D1>0 S DISX(1)=X
"KRN",.401,80,2,1,"QCON")
I (DISX(1)]]"APPLICATION PROXXz")&(DISX(1)']]"CONNECTOR PROXY")
"KRN",.401,80,2,1,"T")
CONNECTOR PROXY^CONNECTOR PROXY
"KRN",.401,80,2,1,"TXT")
User Class from APPLICATION PROXY to CONNECTOR PROXY
"KRN",.401,80,2,"B",200.07,1)

"KRN",.401,80,"%D",0)
^^1^1^3050308^
"KRN",.401,80,"%D",1,0)
Sort the NPF by entries that are APP PROXY or CONNECTOR PROXY.
"KRN",19,148,-1)
2^2
"KRN",19,148,0)
XUOPTUSER^User Management Menu^^M^.5^^^^^^^3^y
"KRN",19,148,10,0)
^19.01IP^7^7
"KRN",19,148,10,7,0)
1063^PXY
"KRN",19,148,10,7,"^")
XUSAP PROXY LIST
"KRN",19,148,"U")
USER MANAGEMENT MENU
"KRN",19,1063,-1)
0^1
"KRN",19,1063,0)
XUSAP PROXY LIST^Proxy User List^^P^^^^^^^^KERNEL^y
"KRN",19,1063,1,0)
^^2^2^3050308^
"KRN",19,1063,1,1,0)
This option will run a FM print to show any USERS that have a USER CLASS 
"KRN",19,1063,1,2,0)
of APPLICATION PROXY or CONNECTOR PROXY.
"KRN",19,1063,60)
VA(200,
"KRN",19,1063,61)
1
"KRN",19,1063,62)
0
"KRN",19,1063,63)
[XUSAP PROXY LIST]
"KRN",19,1063,64)
[XUSAP PROXY LIST]
"KRN",19,1063,68)
1
"KRN",19,1063,"U")
PROXY USER LIST
"KRN",8994,17,-1)
0^1
"KRN",8994,17,0)
XUS INTRO MSG^INTRO^XUSRB^3^R^^^1^^^1
"KRN",8994,17,1,0)
^8994.01^1^1^3050613^^^
"KRN",8994,17,1,1,0)
This RPC returns the INTRO message from the KERNEL SYSTEM PARAMETERS file.
"KRN",8994,17,2,0)
^8994.02A
"MBREQ")
0
"ORD",5,.4)
.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"ORD",5,.4,0)
PRINT TEMPLATE
"ORD",6,.401)
.401;6;;;EDEOUT^DIFROMSO(.401,DA,"",XPDA);FPRE^DIFROMSI(.401,"",XPDA);EPRE^DIFROMSI(.401,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.401,DA,"",XPDA);DEL^DIFROMSK(.401,"",%)
"ORD",6,.401,0)
SORT TEMPLATE
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^^0
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^2950703^2970507^.5
"PKG",3,22,1,"PAH",1,0)
361^3051103^2
"PKG",3,22,1,"PAH",1,1,0)
^^2^2^3051103
"PKG",3,22,1,"PAH",1,1,1,0)
Kernel Patch XU*8.0*361 Proxy Application User for Rehosting effort.
"PKG",3,22,1,"PAH",1,1,2,0)
Please refer to the Description in Forum Patch Module for details.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","XUSAP")
0^1^B10492122
"RTN","XUSAP",1,0)
XUSAP ;ISF/RWF - PROXY User Tools ;11/03/2005
"RTN","XUSAP",2,0)
 ;;8.0;KERNEL;**361**;Jul 10, 1995;Build 1
"RTN","XUSAP",3,0)
 Q
"RTN","XUSAP",4,0)
 ;
"RTN","XUSAP",5,0)
APFIND(NAME) ;Lookup Appliction user by name, return ien^vpid
"RTN","XUSAP",6,0)
 N X,IEN
"RTN","XUSAP",7,0)
 S IEN=+$$FIND1^DIC(200,,"X",NAME,"B")
"RTN","XUSAP",8,0)
 I IEN>0,'$$USERTYPE(IEN,"APPLICATION PROXY") S IEN=0
"RTN","XUSAP",9,0)
 I IEN>0,$$USERTYPE(IEN,"CONNECTOR PROXY") S IEN=0 ;Can't be both
"RTN","XUSAP",10,0)
 S X=0 I IEN S X=IEN_"^"_$$VPID^XUPS(IEN)
"RTN","XUSAP",11,0)
 Q X
"RTN","XUSAP",12,0)
 ;
"RTN","XUSAP",13,0)
APCHK(IEN) ;Check if OK for AP user to run.
"RTN","XUSAP",14,0)
 ;Return 1 if OK, 0 if not
"RTN","XUSAP",15,0)
 Q $$ACTIVE(IEN)
"RTN","XUSAP",16,0)
 ;
"RTN","XUSAP",17,0)
CPCHK(IEN) ;Check if OK for Connector Proxy to run
"RTN","XUSAP",18,0)
 ;Return 1 if OK, "0^text" if NOT ok.
"RTN","XUSAP",19,0)
 I $D(^VA(200,IEN,0))[0 Q "0^IEN not valid"
"RTN","XUSAP",20,0)
 I IEN>0,'$$USERTYPE(IEN,"CONNECTOR PROXY") Q "0^Not a CONNECTOR PROXY User"
"RTN","XUSAP",21,0)
 I IEN>0,$$USERTYPE(IEN,"APPLICATION PROXY") Q "0^APPLICATION PROXY USER" ;Can't be both
"RTN","XUSAP",22,0)
 Q 1
"RTN","XUSAP",23,0)
 ;
"RTN","XUSAP",24,0)
ACTIVE(XUDA) ;Get if a user is active.
"RTN","XUSAP",25,0)
 N %,X1,X2
"RTN","XUSAP",26,0)
 S X1=$G(^VA(200,+$G(XUDA),0)),X2=1
"RTN","XUSAP",27,0)
 S:$P(X1,U,7)=1 X2="0^DISUSER"
"RTN","XUSAP",28,0)
 S %=$P(X1,U,11) I %>0,%'>DT S X2="0^TERMINATED^"_%
"RTN","XUSAP",29,0)
 Q X2
"RTN","XUSAP",30,0)
 ;
"RTN","XUSAP",31,0)
USERTYPE(IE,CLASS) ;See if IEN points to a APP user
"RTN","XUSAP",32,0)
 ;Return 1 if match class, else 0
"RTN","XUSAP",33,0)
 N IX,R
"RTN","XUSAP",34,0)
 I $E(CLASS,1)="`" S IX=+$E(CLASS,2,9)
"RTN","XUSAP",35,0)
 E  S IX=$$FIND1^DIC(201,,"X",CLASS)
"RTN","XUSAP",36,0)
 Q:'IX 0 ;Did not find User class.
"RTN","XUSAP",37,0)
 S R=+$O(^VA(200,IE,"USC3","B",IX,0))
"RTN","XUSAP",38,0)
 Q (R>0)
"RTN","XUSAP",39,0)
 ;
"RTN","XUSAP",40,0)
RPC(RPC) ;Check if OK for AP to run RPC
"RTN","XUSAP",41,0)
 ;Return 1 if OK to run, 0 otherwise.
"RTN","XUSAP",42,0)
 I +RPC'=RPC S RPC=$O(^XWB(8994,"B",RPC,0))
"RTN","XUSAP",43,0)
 I RPC'>0 Q 0
"RTN","XUSAP",44,0)
 Q +$P($G(^XWB(8994,RPC,0)),"^",11)
"RTN","XUSAP",45,0)
 ;
"RTN","XUSAP",46,0)
CREATE(NAME,FMAC,OPT,NIL) ;Create an APPLICATION PROXY user
"RTN","XUSAP",47,0)
 ;Return ien if OK, -1 if failed or 0 if exists.
"RTN","XUSAP",48,0)
 ;NAME for user, FMAC FM access code, OPT Option menu for secondary menu.
"RTN","XUSAP",49,0)
 ;OPT can be a name or array of names
"RTN","XUSAP",50,0)
 N IEN,IENS,FDA,DIC,IX K ^TMP("DIERR",$J)
"RTN","XUSAP",51,0)
 S IEN=$$FIND1^DIC(200,,"M",NAME)
"RTN","XUSAP",52,0)
 I IEN Q "0^Name in Use"
"RTN","XUSAP",53,0)
 S DIC="^VA(200,",DIC(0)="LMQ",DLAYGO=200,X=NAME
"RTN","XUSAP",54,0)
 S DIC("DR")="3///"_FMAC
"RTN","XUSAP",55,0)
 S XUNOTRIG=1 ;Needed to stop call to name components.
"RTN","XUSAP",56,0)
 D ^DIC S IEN=+Y
"RTN","XUSAP",57,0)
 Q:IEN<0 -1 ;Failed to create
"RTN","XUSAP",58,0)
 ;Build FDA to add Options
"RTN","XUSAP",59,0)
 S IEN(1)=","_IEN_",",IX=2
"RTN","XUSAP",60,0)
 I $D(OPT)#2 S FDA(200.03,"+"_IX_IEN(1),.01)=OPT,IX=IX+1
"RTN","XUSAP",61,0)
 I $D(OPT)>9 D
"RTN","XUSAP",62,0)
 . N O S O=""
"RTN","XUSAP",63,0)
 . F  S O=$O(OPT(O)) Q:O=""  S FDA(200.03,"+"_IX_IEN(1),.01)=O,IX=IX+1
"RTN","XUSAP",64,0)
 . Q
"RTN","XUSAP",65,0)
 S FDA(200.07,"+"_IX_IEN(1),.01)="APPLICATION PROXY",FDA(200.07,"+"_IX_IEN(1),2)=1
"RTN","XUSAP",66,0)
 S DIC(0)="" ;Needed in call to XUA4A7
"RTN","XUSAP",67,0)
 D UPDATE^DIE("E","FDA","IENS")
"RTN","XUSAP",68,0)
 I $D(^TMP("DIERR",$J)) Q -1
"RTN","XUSAP",69,0)
 Q IEN
"RTN","XUSAP",70,0)
 ;
"RTN","XUSAP",71,0)
CONT ;Connector Proxy User
"RTN","XUSAP",72,0)
 N DA,DIC,DIE,DR,DLAYGO,DIRUT,XUITNAME,X,Y
"RTN","XUSAP",73,0)
 I '$D(^XUSEC("XUMGR",$G(DUZ,0))) W !,"You MUST hold the XUMGR key" Q
"RTN","XUSAP",74,0)
 S DIC="^VA(200,",DIC(0)="AELMQ",DLAYGO=200,DIC("A")="Enter NPF CONNECTOR PROXY name : ",XUITNAME=1
"RTN","XUSAP",75,0)
 S DIC("DR")="3///@"
"RTN","XUSAP",76,0)
 D ^DIC S DA=+Y
"RTN","XUSAP",77,0)
 Q:DA'>0
"RTN","XUSAP",78,0)
 I '$P(Y,U,3),'$$USERTYPE(DA,"CONNECTOR PROXY") D  Q  ;Quit
"RTN","XUSAP",79,0)
 . W !,"Existing User is not a CONNECTOR PROXY"
"RTN","XUSAP",80,0)
 . Q
"RTN","XUSAP",81,0)
 I DA,$$USERTYPE(DA,"APPLICATION PROXY") W !,"Can't use an APPLICATION PROXY user." Q
"RTN","XUSAP",82,0)
 ;Build DIE call
"RTN","XUSAP",83,0)
 L +^VA(200,DA,0):DTIME
"RTN","XUSAP",84,0)
 S DIE="^VA(200,"
"RTN","XUSAP",85,0)
 S DR="7.2///Y;9.5///CONNECTOR PROXY;2.1;11.1;200.04///ALLOWED;201///@",DR(2,200.07)="2///Y"
"RTN","XUSAP",86,0)
 D ^DIE
"RTN","XUSAP",87,0)
 L -^VA(200,DA,0)
"RTN","XUSAP",88,0)
 Q
"RTN","XUSRB5")
0^2^B33074245
"RTN","XUSRB5",1,0)
XUSRB5 ;SFISC/STAFF - FATKAT and KAJEE support ;09/08/2005
"RTN","XUSRB5",2,0)
 ;;8.0;KERNEL;**361**;Jul 10, 1995;Build 1
"RTN","XUSRB5",3,0)
 Q
"RTN","XUSRB5",4,0)
 ;All this code is run under an APPLICATION PROXY user.
"RTN","XUSRB5",5,0)
FATKAAT1(RET,AVCODE,CLIENTIP) ;Get division list via proxy
"RTN","XUSRB5",6,0)
 ;Use AVcode to find user, Return data from VALIDAV plus DIVGET
"RTN","XUSRB5",7,0)
 N DUZ ;Protect caller
"RTN","XUSRB5",8,0)
 N %,X,CCOW,IEN,XUCI,XQVOL,XUVOL,XUTEXT,DIV
"RTN","XUSRB5",9,0)
 S CLIENTIP=$G(CLIENTIP,$G(IO("IP"))) S:'$L(CLIENTIP) CLIENTIP="127.0.0.1" ;Use loopback if don't have real one.
"RTN","XUSRB5",10,0)
 D XUVOL^XUS
"RTN","XUSRB5",11,0)
 D VALIDAV(AVCODE,.DIV,CLIENTIP) ;DIVGET is done in here
"RTN","XUSRB5",12,0)
 S %=RET(5)+6,CCOW=$D(DUZ("CCOW"))
"RTN","XUSRB5",13,0)
 Q:'RET(0)
"RTN","XUSRB5",14,0)
 I CCOW D  Q
"RTN","XUSRB5",15,0)
 . S RET(%+1)=1,RET(%+2)=DUZ(2)_"^"_$$NS^XUAF4(DUZ(2))_"^1"
"RTN","XUSRB5",16,0)
 . Q
"RTN","XUSRB5",17,0)
 I 'CCOW F X=0:1:DIV D
"RTN","XUSRB5",18,0)
 . S RET(%+X)=DIV(X)
"RTN","XUSRB5",19,0)
 K DUZ("CCOW")
"RTN","XUSRB5",20,0)
 Q
"RTN","XUSRB5",21,0)
 ;
"RTN","XUSRB5",22,0)
DIVGET(XUDIV,IEN) ;Get Division data
"RTN","XUSRB5",23,0)
 N %,X
"RTN","XUSRB5",24,0)
 S XUDIV=0,%=$$CHKDIV^XUS1(.XUDIV) ;Get users div.
"RTN","XUSRB5",25,0)
 I 'XUDIV,(%>0)&($P(%,U,2)'>0) D
"RTN","XUSRB5",26,0)
 . S DUZ(2)=+% ;Set users default div.
"RTN","XUSRB5",27,0)
 . S XUDIV=1,XUDIV(1)=DUZ(2)_"^"_$$NS^XUAF4(DUZ(2))_"^1"
"RTN","XUSRB5",28,0)
 I 'XUDIV,'% D
"RTN","XUSRB5",29,0)
 . S DUZ(2)=+$$KSP^XUPARAM("INST")
"RTN","XUSRB5",30,0)
 . S XUDIV=1,XUDIV(1)=DUZ(2)_"^"_$$NS^XUAF4(DUZ(2))_"^1"
"RTN","XUSRB5",31,0)
 ;
"RTN","XUSRB5",32,0)
 S %=0 D  S RESULT(0)=XUDIV
"RTN","XUSRB5",33,0)
 . ;RET(%) is divison array eg. ien;station name;station#
"RTN","XUSRB5",34,0)
 . F  S %=$O(XUDIV(%)) Q:(%'>0)  D
"RTN","XUSRB5",35,0)
 .. S XUDIV(%)=$P(XUDIV(%),U,1,3)_U_(+$P(XUDIV(%),U,4))
"RTN","XUSRB5",36,0)
 S XUDIV(0)=XUDIV
"RTN","XUSRB5",37,0)
 Q
"RTN","XUSRB5",38,0)
 ;
"RTN","XUSRB5",39,0)
VALIDAV(AVCODE,DIV,CLIP) ;Check a users access
"RTN","XUSRB5",40,0)
 ;Return R(0)=DUZ, R(1)=(0=OK, 1,2...=Can't sign-on for some reason)
"RTN","XUSRB5",41,0)
 ; R(2)=verify needs changing, R(3)=Message, R(4)=0, R(5)=msg cnt, R(5+n)
"RTN","XUSRB5",42,0)
 ; R(R(5)+6)=# div user must select from, R(R(5)+6+n)=div
"RTN","XUSRB5",43,0)
 ;
"RTN","XUSRB5",44,0)
 N X,XUSER,XUF,XUNOW,XUDEV,XUM,XUMSG,%1,VCCH
"RTN","XUSRB5",45,0)
 S U="^",RET(0)=0,RET(1)=0,RET(2)=0,RET(3)="",RET(4)=0,RET(5)=0
"RTN","XUSRB5",46,0)
 S XUF=$G(XUF,0),XUM=0,XUMSG=0,XUDEV=0
"RTN","XUSRB5",47,0)
 S DUZ=0,DUZ(0)="",VCCH=0 D NOW
"RTN","XUSRB5",48,0)
 D XOPT^XUS
"RTN","XUSRB5",49,0)
 S XUMSG=$$INHIBIT^XUSRB() I XUMSG S XUM=1 G VAX ;Logon inhibited
"RTN","XUSRB5",50,0)
 ;3 Strikes, Put J2EE server IP in as Terminal server.
"RTN","XUSRB5",51,0)
 I $$LKCHECK^XUSTZIP($G(CLIP)) S XUMSG=7 G VAX ;IP locked
"RTN","XUSRB5",52,0)
 ;Only allow A/V, CCOW sign-on code
"RTN","XUSRB5",53,0)
 I $L(AVCODE) S DUZ=$$CHECKAV^XUS($$DECRYP^XUSRB1(AVCODE))
"RTN","XUSRB5",54,0)
 D DIVGET(.DIV) ;Get DIV now
"RTN","XUSRB5",55,0)
 I DUZ'>0 S XUM=1,XUMSG=4 D  H 2 G VAX ;Bad AV code
"RTN","XUSRB5",56,0)
 . S X=$$FAIL^XUS3(CLIP) ;Check Lockout
"RTN","XUSRB5",57,0)
 S XUMSG=$$UVALID^XUS() G:XUMSG VAX ;Check User
"RTN","XUSRB5",58,0)
 S VCCH=$$VCVALID^XUSRB() ;Check VC
"RTN","XUSRB5",59,0)
 I DUZ>0 S XUMSG=$$POST(1)
"RTN","XUSRB5",60,0)
 I XUMSG>0 S DUZ=0,VCCH=0 ;If can't sign-on, don't tell need to change VC
"RTN","XUSRB5",61,0)
 I 'XUMSG,VCCH S XUMSG=12 ;Need to change VC
"RTN","XUSRB5",62,0)
VAX S:XUMSG>0 DUZ=0 ;Can't sign-on, Clear DUZ.
"RTN","XUSRB5",63,0)
 S RET(0)=DUZ,RET(1)=XUM,RET(2)=VCCH,RET(3)=$S(XUMSG:$$TXT^XUS3(XUMSG),1:""),RET(4)=0
"RTN","XUSRB5",64,0)
 Q
"RTN","XUSRB5",65,0)
 ;
"RTN","XUSRB5",66,0)
CVC(RET,XU1) ;change VC, Return 0 = success
"RTN","XUSRB5",67,0)
 N XU2,XU3,XU4 S DUZ=$G(DUZ),RET(0)=99,XU4=$$STATE^XWBSEC("XUS DUZ") S:(DUZ=0)&(XU4>0) DUZ=XU4 Q:DUZ'>0
"RTN","XUSRB5",68,0)
 S U="^",XU2=$P(XU1,U,2),XU3=$P(XU1,U,3),XU1=$P(XU1,U)
"RTN","XUSRB5",69,0)
 S XU1=$$DECRYP^XUSRB1(XU1),XU2=$$DECRYP^XUSRB1(XU2),XU3=$$DECRYP^XUSRB1(XU3)
"RTN","XUSRB5",70,0)
 S XU3=$$BRCVC^XUS2(XU1,XU2),RET(0)=+XU3,RET(1)=$P(XU3,U,2,9)
"RTN","XUSRB5",71,0)
 I XU3>0 S DUZ=0 ;Clean-up if not changed.
"RTN","XUSRB5",72,0)
 I 'XU3,XU4 D KILL^XWBSEC("XUS DUZ"),POST2
"RTN","XUSRB5",73,0)
 Q
"RTN","XUSRB5",74,0)
 ;
"RTN","XUSRB5",75,0)
POST(CVC) ;Finish setup partition, I CVC don't log yet
"RTN","XUSRB5",76,0)
 N X,XUM,XUDIV
"RTN","XUSRB5",77,0)
 I '$D(XUSER(0)),DUZ D USER^XUS(DUZ)
"RTN","XUSRB5",78,0)
 S XUM=$$USER Q:XUM>0 XUM ;User can't sign on for some reason.
"RTN","XUSRB5",79,0)
 S RET(5)=0 ;The next line sends the post sign-on msg
"RTN","XUSRB5",80,0)
 F %=1:1 Q:'$D(XUTEXT(%))  S RET(5+%)=$E(XUTEXT(%),2,256),RET(5)=%
"RTN","XUSRB5",81,0)
 I '$$SHOWPOST^XUSRB S RET(5)=0 ;This line stops the send/display of the msg.
"RTN","XUSRB5",82,0)
 D:'$G(CVC) POST2
"RTN","XUSRB5",83,0)
 Q 0
"RTN","XUSRB5",84,0)
 ;
"RTN","XUSRB5",85,0)
POST2 D:'$D(XUNOW) NOW
"RTN","XUSRB5",86,0)
 D DUZ^XUS1A,SAVE^XUS1,LOG^XUS1,ABT^XQ12
"RTN","XUSRB5",87,0)
 D KILL^XWBSEC("XUS XOPT"),CLRFAC^XUS3($G(IO("IP"))) ;p265
"RTN","XUSRB5",88,0)
 K XUTEXT,XOPT,XUEON,XUEOFF,XUTT,XUDEV,XUSER
"RTN","XUSRB5",89,0)
 Q
"RTN","XUSRB5",90,0)
 ;
"RTN","XUSRB5",91,0)
NOW ;
"RTN","XUSRB5",92,0)
 S U="^",XUNOW=$$NOW^XLFDT(),DT=$P(XUNOW,".")
"RTN","XUSRB5",93,0)
 Q
"RTN","XUSRB5",94,0)
USER() ;
"RTN","XUSRB5",95,0)
 N %B,%E,%T,I1,X1,X2
"RTN","XUSRB5",96,0)
 K XUTEXT
"RTN","XUSRB5",97,0)
 S XUTEXT=0,DUZ(2)=$G(DUZ(2),0)
"RTN","XUSRB5",98,0)
 F I=0:0 S I=$O(^XTV(8989.3,1,"POST",I)) Q:I'>0  D SET("!"_$G(^(I,0)))
"RTN","XUSRB5",99,0)
 D SET("!"),XOPT^XUS
"RTN","XUSRB5",100,0)
 S %H=$P($H,",",2)
"RTN","XUSRB5",101,0)
 D SET("!Good "_$S(%H<43200:"morning ",%H<61200:"afternoon ",1:"evening ")_$S($P(XUSER(1),U,4)]"":$P(XUSER(1),U,4),1:$P(XUSER(0),U,1)))
"RTN","XUSRB5",102,0)
 S I1=$G(^VA(200,DUZ,1.1)),X=(+I1_"0000")
"RTN","XUSRB5",103,0)
 I X D SET("!     You last signed on "_$S(X\1=DT:"today",X\1+1=DT:"yesterday",1:$$FMTE^XLFDT(X,"1D"))_" at "_$E(X,9,10)_":"_$E(X,11,12))
"RTN","XUSRB5",104,0)
 I $P(I1,"^",2) S I=$P(I1,"^",2) D SET("!There "_$S(I>1:"were ",1:"was ")_I_" unsuccessful attempt"_$S(I>1:"s",1:"")_" since you last signed on.")
"RTN","XUSRB5",105,0)
 I $P(XUSER(0),U,12),$$PH(%H,$P(XUSER(0),U,12)) Q 17 ;Time frame
"RTN","XUSRB5",106,0)
 I +$P(XOPT,U,15) S %=$P(XOPT,U,15)-($H-XUSER(1)) I %<6,%>0 D SET("!     Your Verify code will expire in "_%_" days")
"RTN","XUSRB5",107,0)
 ;Report new Mail
"RTN","XUSRB5",108,0)
 N XUXM S %=$$NU^XMGAPI4(1,1,"XUXM") I $G(XUXM) F %=0:0 S %=$O(XUXM(%)) Q:%'>0  D SET("!"_XUXM(%))
"RTN","XUSRB5",109,0)
 ;S:$P(XOPT,"^",5) XUTT=1 S DTIME=$P(XOPT,U,10)
"RTN","XUSRB5",110,0)
 ;Check Multiple Sign-on allowed, X1 signed on flag, X2 0=No,1=Yes,2=1IP
"RTN","XUSRB5",111,0)
 ;S X1=$P($G(^VA(200,DUZ,1.1)),U,3),X2=$P(XOPT,U,4)
"RTN","XUSRB5",112,0)
 ;I 'X2,X1 Q 9 ;Multi Sign-on not allowed
"RTN","XUSRB5",113,0)
 ;I X2=2 D  Q:%B>0 %B ;Only from one IP
"RTN","XUSRB5",114,0)
 ;. S %B=0 I '$D(IO("IP")) S:X1 %B=9 Q  ;Can't tell IP, 
"RTN","XUSRB5",115,0)
 ;. S X1=$$COUNT(DUZ,IO("IP")),%B=$S(X1<0:9,(X1+1)>$P(XOPT,U,19):9,1:0)
"RTN","XUSRB5",116,0)
USX ;S $P(^VA(200,DUZ,1.1),U,3)=1
"RTN","XUSRB5",117,0)
 ;Call XQOR to handle SIGN-ON protocall.
"RTN","XUSRB5",118,0)
 ;N XUSER,XUSQUIT ;Protect ourself.
"RTN","XUSRB5",119,0)
 ;S DIC="^DIC(19,",X="XU USER SIGN-ON",XUSQUIT=0
"RTN","XUSRB5",120,0)
 ;D EN^XQOR
"RTN","XUSRB5",121,0)
 Q 0 ;If protocol set XUSQUIT will stop sign-on.
"RTN","XUSRB5",122,0)
 ;
"RTN","XUSRB5",123,0)
SET(V) ;Set into XUTEXT(XUTEXT), Also Called from XU USER SIGN-ON protocol.
"RTN","XUSRB5",124,0)
 S XUTEXT=$G(XUTEXT)+1,XUTEXT(XUTEXT)=V
"RTN","XUSRB5",125,0)
 Q
"RTN","XUSRB5",126,0)
 ;
"RTN","XUSRB5",127,0)
PH(%T,%R) ;Check Prohibited time for R/S
"RTN","XUSRB5",128,0)
 N MSG S MSG=$$PROHIBIT(%T,%R)
"RTN","XUSRB5",129,0)
 I MSG S XUM(0)=$P(MSG,U,2) Q 1
"RTN","XUSRB5",130,0)
 D SET("!"),SET("! "_$$EZBLD^DIALOG(30810.62)_" "_$P(MSG,U,2))
"RTN","XUSRB5",131,0)
 Q 0
"RTN","XUSRB5",132,0)
 ;
"RTN","XUSRB5",133,0)
PROHIBIT(%T,%R) ;See if a prohibited time, (Time from $H, restrict range)
"RTN","XUSRB5",134,0)
 N XMSG,%B,%E
"RTN","XUSRB5",135,0)
 S %T=%T\60#60+(%T\3600*100),%B=$P(%R,"-",1),%E=$P(%R,"-",2)
"RTN","XUSRB5",136,0)
 S XMSG=$P($$FMTE^XLFDT(DT_"."_%B,"2P")," ",2,3)_" "_$$EZBLD^DIALOG(30810.61)_" "_$P($$FMTE^XLFDT(DT_"."_%E,"2P")," ",2,3)
"RTN","XUSRB5",137,0)
 I $S(%E'<%B:%T'>%E&(%T'<%B),1:%T>%B!(%T<%E)) Q "1^"_XMSG ;No
"RTN","XUSRB5",138,0)
 Q "0^"_XMSG
"RTN","XUSRB5",139,0)
 ;
"RTN","XUSRB5",140,0)
SET1(FLAG) ;Setup for FATKAAT
"RTN","XUSRB5",141,0)
 N %
"RTN","XUSRB5",142,0)
 S U="^"
"RTN","XUSRB5",143,0)
 D XUVOL^XUS,XOPT^XUS
"RTN","XUSRB5",144,0)
 S XUDEV=0,XUIOP=""
"RTN","XUSRB5",145,0)
 D GETFAC^XUS3($G(IO("IP")))
"RTN","XUSRB5",146,0)
 S %=$P(XOPT,U,14)
"RTN","XUSRB5",147,0)
 Q
"RTN","XUSRB5",148,0)
SET2() ;EF. Return error code
"RTN","XUSRB5",149,0)
 N %,X
"RTN","XUSRB5",150,0)
 S XUNOW=$$HTFM^XLFDT($H),DT=$P(XUNOW,".")
"RTN","XUSRB5",151,0)
 K DUZ,XUSER
"RTN","XUSRB5",152,0)
 S (DUZ,DUZ(2))=0,(DUZ(0),DUZ("AG"),XUSER(0),XUSER(1),XUTT,%UCI)=""
"RTN","XUSRB5",153,0)
 S %=$$INHIBIT^XUSRB() I %>0 Q %
"RTN","XUSRB5",154,0)
 S DTIME=600
"RTN","XUSRB5",155,0)
 I '$P(XOPT,U,11),$D(^%ZIS(1,XUDEV,90)),^(90)>2800000,^(90)'>DT Q 8
"RTN","XUSRB5",156,0)
 I $D(XRT0) S XRTN="XUS" D T1^%ZOSV
"RTN","XUSRB5",157,0)
 Q 0
"RTN","XUSRB5",158,0)
 ;
"UP",200,200.07,-1)
200^USC3
"UP",200,200.07,0)
200.07
"VER")
8.0^22.0
"^DD",200,200,9.5,0)
USER CLASS^200.07P^^USC3;0
"^DD",200,200,9.5,"DT")
3041104
"^DD",200,200.07,0)
USER CLASS SUB-FIELD^^2^2
"^DD",200,200.07,0,"DT")
3041229
"^DD",200,200.07,0,"IX","B",200.07,.01)

"^DD",200,200.07,0,"NM","USER CLASS")

"^DD",200,200.07,0,"UP")
200
"^DD",200,200.07,.01,0)
User Class^P201'^VA(201,^0;1^Q
"^DD",200,200.07,.01,1,0)
^.1
"^DD",200,200.07,.01,1,1,0)
200.07^B
"^DD",200,200.07,.01,1,1,1)
S ^VA(200,DA(1),"USC3","B",$E(X,1,30),DA)=""
"^DD",200,200.07,.01,1,1,2)
K ^VA(200,DA(1),"USC3","B",$E(X,1,30),DA)
"^DD",200,200.07,.01,"DT")
3041105
"^DD",200,200.07,2,0)
ISPRIMARY^S^0:No;1:Yes;^0;2^Q
"^DD",200,200.07,2,.1)
Is Primary
"^DD",200,200.07,2,21,0)
^^3^3^3041229^
"^DD",200,200.07,2,21,1,0)
This field notes if this User Class is the primary User Class for this 
"^DD",200,200.07,2,21,2,0)
user.  If returning just one User Class then this is the one to be 
"^DD",200,200.07,2,21,3,0)
returned.
"^DD",200,200.07,2,"DT")
3041229
"^DD",201,201,0)
FIELD^^99.991^4
"^DD",201,201,0,"DDA")
N
"^DD",201,201,0,"DT")
3041108
"^DD",201,201,0,"IX","B",201,.01)

"^DD",201,201,0,"IX","C",201.01,1)

"^DD",201,201,0,"NM","USER CLASS")

"^DD",201,201,0,"PT",200.07,.01)

"^DD",201,201,0,"VRPK")
XU
"^DD",201,201,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",201,201,.01,1,0)
^.1
"^DD",201,201,.01,1,1,0)
201^B
"^DD",201,201,.01,1,1,1)
S ^VA(201,"B",$E(X,1,30),DA)=""
"^DD",201,201,.01,1,1,2)
K ^VA(201,"B",$E(X,1,30),DA)
"^DD",201,201,.01,3)
Answer must be 3-30 characters in length.
"^DD",201,201,.01,21,0)
^.001^1^1^3041005^^^
"^DD",201,201,.01,21,1,0)
This field is User Class that is to be used for identifying users.
"^DD",201,201,.01,"DT")
3041005
"^DD",201,201,1,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<3) X
"^DD",201,201,1,3)
Answer must be 3-75 characters in length.
"^DD",201,201,1,"DT")
3041108
"^DD",201,201,99.99,0)
VUID^FX^^0;3^K:$L(X)>18!($L(X)<18)!(X'?.N) X
"^DD",201,201,99.99,3)
Answer must be 18 numeric digit VUID value
"^DD",201,201,99.99,"DT")
3041108
"^DD",201,201,99.991,0)
STATUS^201.01SA^^1;0
"^DD",201,201.01,0)
STATUS SUB-FIELD^^1^2
"^DD",201,201.01,0,"DT")
3041108
"^DD",201,201.01,0,"IX","B",201.01,.01)

"^DD",201,201.01,0,"NM","STATUS")

"^DD",201,201.01,0,"UP")
201
"^DD",201,201.01,.01,0)
STATUS^MS^0:INACTIVE;1:ACTIVE;^0;1^Q
"^DD",201,201.01,.01,1,0)
^.1
"^DD",201,201.01,.01,1,1,0)
201.01^B
"^DD",201,201.01,.01,1,1,1)
S ^VA(201,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",201,201.01,.01,1,1,2)
K ^VA(201,DA(1),1,"B",$E(X,1,30),DA)
"^DD",201,201.01,.01,"DT")
3041108
"^DD",201,201.01,1,0)
EFFECTIVE DATE^D^^0;2^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",201,201.01,1,1,0)
^.1
"^DD",201,201.01,1,1,1,0)
201^C
"^DD",201,201.01,1,1,1,1)
S ^VA(201,"C",$E(X,1,30),DA(1),DA)=""
"^DD",201,201.01,1,1,1,2)
K ^VA(201,"C",$E(X,1,30),DA(1),DA)
"^DD",201,201.01,1,1,1,"%D",0)
^^1^1^3041108^
"^DD",201,201.01,1,1,1,"%D",1,0)
This x-ref is the effective date of the entry.
"^DD",201,201.01,1,1,1,"DT")
3041108
"^DD",201,201.01,1,21,0)
^^2^2^3041108^
"^DD",201,201.01,1,21,1,0)
This field is the effective date the entry was activated or
"^DD",201,201.01,1,21,2,0)
inactivated.
"^DD",201,201.01,1,"DT")
3041108
"^DD",8994,8994,.11,0)
APP PROXY ALLOWED^S^0:No;1:Yes;^0;11^Q
"^DD",8994,8994,.11,21,0)
^.001^3^3^3050301^^
"^DD",8994,8994,.11,21,1,0)
This field must be set to Allowed if this RPC is to be run by an 
"^DD",8994,8994,.11,21,2,0)
APPLICATION PROXY user.
"^DD",8994,8994,.11,21,3,0)
The default is to NOT allow access.
"^DD",8994,8994,.11,"DT")
3050301
"^DIC",201,201,0)
USER CLASS^201
"^DIC",201,201,0,"GL")
^VA(201,
"^DIC",201,201,"%",0)
^1.005^^0
"^DIC",201,201,"%D",0)
^^3^3^3041108^
"^DIC",201,201,"%D",1,0)
USER CLASS is to be used for identifying the kinds of all other entries 
"^DIC",201,201,"%D",2,0)
in the NEW PERSON file #200 that are not providers identified with PERSON 
"^DIC",201,201,"%D",3,0)
CLASS.
"^DIC",201,"B","USER CLASS",201)

"BLD",849,6)
^323
**END**
**END**
