KIDS Distribution saved on Aug 20, 1996@15:22:07
KIDS Distribution of SD*5.3*44 & DG*5.3*94
**KIDS**:SD*5.3*44^DG*5.3*94^

**INSTALL NAME**
SD*5.3*44
"BLD",41,0)
SD*5.3*44^SCHEDULING^0^2960812^n
"BLD",41,1,0)
^^5^5^2960807^^^^
"BLD",41,1,1,0)
 KIDS distribution of the Scheduling portion of the Ambulatory Care
"BLD",41,1,2,0)
 Reporting Project.
"BLD",41,1,3,0)
   
"BLD",41,1,4,0)
 The changes included in this patch are described in the description of
"BLD",41,1,5,0)
 patch SD*5.3*44 in the National Patch Module.
"BLD",41,4,0)
^9.64PA^409.43^8
"BLD",41,4,404.91,0)
404.91
"BLD",41,4,404.91,222)
y^y^f^^^^n
"BLD",41,4,409.43,0)
409.43
"BLD",41,4,409.43,2,0)
^9.641^409.43^1
"BLD",41,4,409.43,2,409.43,0)
OUTPATIENT DIAGNOSIS  (File-top level)
"BLD",41,4,409.43,2,409.43,1,0)
^9.6411^.03^1
"BLD",41,4,409.43,2,409.43,1,.03,0)
DIAGNOSIS RANKING
"BLD",41,4,409.43,222)
y^n^p^^^^n
"BLD",41,4,409.44,0)
409.44
"BLD",41,4,409.44,2,0)
^9.641^409.44^1
"BLD",41,4,409.44,2,409.44,0)
OUTPATIENT PROVIDER  (File-top level)
"BLD",41,4,409.44,2,409.44,1,0)
^9.6411^.03^1
"BLD",41,4,409.44,2,409.44,1,.03,0)
PROVIDER TYPE CODE
"BLD",41,4,409.44,222)
y^n^p^^^^n
"BLD",41,4,409.68,0)
409.68
"BLD",41,4,409.68,2,0)
^9.641^409.68^1
"BLD",41,4,409.68,2,409.68,0)
OUTPATIENT ENCOUNTER  (File-top level)
"BLD",41,4,409.68,2,409.68,1,0)
^9.6411^.05^3
"BLD",41,4,409.68,2,409.68,1,.05,0)
VISIT FILE ENTRY
"BLD",41,4,409.68,2,409.68,1,.09,0)
EXTENDED REFERENCE
"BLD",41,4,409.68,2,409.68,1,.2,0)
UNIQUE VISIT NUMBER
"BLD",41,4,409.68,222)
y^n^p^^^^n
"BLD",41,4,409.73,0)
409.73
"BLD",41,4,409.73,222)
y^y^f^^^^n
"BLD",41,4,409.74,0)
409.74
"BLD",41,4,409.74,222)
y^y^f^^^^n
"BLD",41,4,409.75,0)
409.75
"BLD",41,4,409.75,222)
y^y^f^^^^n
"BLD",41,4,409.76,0)
409.76
"BLD",41,4,409.76,222)
y^y^f^^n^^y^o^n
"BLD",41,4,"APDD",409.43,409.43)

"BLD",41,4,"APDD",409.43,409.43,.03)

"BLD",41,4,"APDD",409.44,409.44)

"BLD",41,4,"APDD",409.44,409.44,.03)

"BLD",41,4,"APDD",409.68,409.68)

"BLD",41,4,"APDD",409.68,409.68,.05)

"BLD",41,4,"APDD",409.68,409.68,.09)

"BLD",41,4,"APDD",409.68,409.68,.2)

"BLD",41,4,"B",404.91,404.91)

"BLD",41,4,"B",409.43,409.43)

"BLD",41,4,"B",409.44,409.44)

"BLD",41,4,"B",409.68,409.68)

"BLD",41,4,"B",409.73,409.73)

"BLD",41,4,"B",409.74,409.74)

"BLD",41,4,"B",409.75,409.75)

"BLD",41,4,"B",409.76,409.76)

"BLD",41,"ABNS",0)
^9.66A^1^1
"BLD",41,"ABNS",1,0)
SCDX
"BLD",41,"ABNS",1,1,0)
^9.661A^^
"BLD",41,"ABNS","B","SCDX",1)

"BLD",41,"ABPKG")
n^n^
"BLD",41,"INI")
CHKPTS^SCMSPRE
"BLD",41,"INIT")
CHKPTS^SCMSPST
"BLD",41,"KRN",0)
^9.67PA^8994^14
"BLD",41,"KRN",.4,0)
.4
"BLD",41,"KRN",.4,"NM",0)
^9.68A^4^2
"BLD",41,"KRN",.4,"NM",2,0)
SCDX TRANSMITTED ERROR LIST    FILE #409.75^409.75^0
"BLD",41,"KRN",.4,"NM",4,0)
SCDX NPCDB TRANSMISSION REPORT    FILE #409.73^409.73^0
"BLD",41,"KRN",.4,"NM","B","SCDX NPCDB TRANSMISSION REPORT    FILE #409.73",4)

"BLD",41,"KRN",.4,"NM","B","SCDX TRANSMITTED ERROR LIST    FILE #409.75",2)

"BLD",41,"KRN",.401,0)
.401
"BLD",41,"KRN",.402,0)
.402
"BLD",41,"KRN",.402,"NM",0)
^9.68A^2^2
"BLD",41,"KRN",.402,"NM",1,0)
SDB    FILE #44^44^0
"BLD",41,"KRN",.402,"NM",2,0)
SD ENCOUNTER ENTRY    FILE #409.68^409.68^0
"BLD",41,"KRN",.402,"NM","B","SD ENCOUNTER ENTRY    FILE #409.68",2)

"BLD",41,"KRN",.402,"NM","B","SDB    FILE #44",1)

"BLD",41,"KRN",.403,0)
.403
"BLD",41,"KRN",.5,0)
.5
"BLD",41,"KRN",.84,0)
.84
"BLD",41,"KRN",3.6,0)
3.6
"BLD",41,"KRN",3.6,"NM",0)
^9.68A^1^1
"BLD",41,"KRN",3.6,"NM",1,0)
SCDX AMBCARE TO NPCDB SUMMARY^^0
"BLD",41,"KRN",3.6,"NM","B","SCDX AMBCARE TO NPCDB SUMMARY",1)

"BLD",41,"KRN",9.2,0)
9.2
"BLD",41,"KRN",9.8,0)
9.8
"BLD",41,"KRN",9.8,"NM",0)
^9.68A^80^60
"BLD",41,"KRN",9.8,"NM",1,0)
SCDXACK^^0^B13084476
"BLD",41,"KRN",9.8,"NM",2,0)
SCDXFU01^^0^B19257810
"BLD",41,"KRN",9.8,"NM",3,0)
SCDXFU02^^0^B12986217
"BLD",41,"KRN",9.8,"NM",4,0)
SCDXFX01^^0^B5115837
"BLD",41,"KRN",9.8,"NM",5,0)
SCDXHLDR^^0^B8611673
"BLD",41,"KRN",9.8,"NM",6,0)
SCDXMSG^^0^B24645758
"BLD",41,"KRN",9.8,"NM",7,0)
SCDXMSG0^^0^B23431822
"BLD",41,"KRN",9.8,"NM",8,0)
SCDXMSG1^^0^B41485507
"BLD",41,"KRN",9.8,"NM",9,0)
SCDXPRN^^0^B1384722
"BLD",41,"KRN",9.8,"NM",10,0)
SCDXRT01^^0^B27872204
"BLD",41,"KRN",9.8,"NM",11,0)
SCDXUTL^^0^B9467909
"BLD",41,"KRN",9.8,"NM",12,0)
SCDXUTL0^^0^B31199923
"BLD",41,"KRN",9.8,"NM",13,0)
SCDXUTL1^^0^B3627623
"BLD",41,"KRN",9.8,"NM",14,0)
SCDXUTL2^^0^B2465107
"BLD",41,"KRN",9.8,"NM",15,0)
SCMSP^^0^B43735400
"BLD",41,"KRN",9.8,"NM",16,0)
SCMSP0^^0^B44652105
"BLD",41,"KRN",9.8,"NM",17,0)
SCMSPST^^0^B2945108
"BLD",41,"KRN",9.8,"NM",18,0)
SCMSPU1^^0^B3796450
"BLD",41,"KRN",9.8,"NM",19,0)
SCMSVDG1^^0^B7170959
"BLD",41,"KRN",9.8,"NM",20,0)
SCMSVEVN^^0^B1794829
"BLD",41,"KRN",9.8,"NM",21,0)
SCMSVPID^^0^B9519819
"BLD",41,"KRN",9.8,"NM",22,0)
SCMSVPR1^^0^B7642915
"BLD",41,"KRN",9.8,"NM",23,0)
SCMSVPV1^^0^B3277930
"BLD",41,"KRN",9.8,"NM",24,0)
SCMSVUT0^^0^B10539026
"BLD",41,"KRN",9.8,"NM",25,0)
SCMSVZCL^^0^B2743020
"BLD",41,"KRN",9.8,"NM",26,0)
SCMSVZEL^^0^B2423804
"BLD",41,"KRN",9.8,"NM",27,0)
SCMSVZIR^^0^B2564711
"BLD",41,"KRN",9.8,"NM",28,0)
SCMSVZPD^^0^B2118983
"BLD",41,"KRN",9.8,"NM",29,0)
SCMSVZSC^^0^B2816717
"BLD",41,"KRN",9.8,"NM",30,0)
SCMSVZSP^^0^B2677103
"BLD",41,"KRN",9.8,"NM",31,0)
SDA223N^^0^B22972149
"BLD",41,"KRN",9.8,"NM",32,0)
SDACS^^0^B8465073
"BLD",41,"KRN",9.8,"NM",33,0)
SDAPIAE^^0^B11667864
"BLD",41,"KRN",9.8,"NM",34,0)
SDAPICO^^0^B11963393
"BLD",41,"KRN",9.8,"NM",35,0)
SDCO0^^0^B21599579
"BLD",41,"KRN",9.8,"NM",36,0)
SDCO3^^0^B16851759
"BLD",41,"KRN",9.8,"NM",37,0)
SDCO4^^0^B19224412
"BLD",41,"KRN",9.8,"NM",38,0)
SDCODEL^^0^B15015454
"BLD",41,"KRN",9.8,"NM",39,0)
SDM^^0^B30637215
"BLD",41,"KRN",9.8,"NM",40,0)
SDOPC^^0^B19092578
"BLD",41,"KRN",9.8,"NM",41,0)
SDOPCDEL^^0^B13308686
"BLD",41,"KRN",9.8,"NM",43,0)
SDPCE1^^0^B38188904
"BLD",41,"KRN",9.8,"NM",45,0)
SDSTP3^^0^B9142495
"BLD",41,"KRN",9.8,"NM",46,0)
SDTRAN^^0^B14774688
"BLD",41,"KRN",9.8,"NM",47,0)
SDTRANDV^^0^B8444249
"BLD",41,"KRN",9.8,"NM",48,0)
SDVSIT^^0^B24896059
"BLD",41,"KRN",9.8,"NM",49,0)
SDVSIT2^^0^B8771762
"BLD",41,"KRN",9.8,"NM",63,0)
SCMSPRE^^0^B643259
"BLD",41,"KRN",9.8,"NM",64,0)
SCMSPEN^^0^B33991612
"BLD",41,"KRN",9.8,"NM",66,0)
SDSTP2^^0^B16941780
"BLD",41,"KRN",9.8,"NM",67,0)
SCMSP1^^0^B14570357
"BLD",41,"KRN",9.8,"NM",69,0)
SDSTP1^^0^B12099192
"BLD",41,"KRN",9.8,"NM",71,0)
SDAPIAE1^^0^B13626253
"BLD",41,"KRN",9.8,"NM",73,0)
SCDXMSG2^^0^B15648498
"BLD",41,"KRN",9.8,"NM",74,0)
SCDXFU03^^0^B1399899
"BLD",41,"KRN",9.8,"NM",75,0)
SCMSPX1^^0^B31314743
"BLD",41,"KRN",9.8,"NM",76,0)
SCMSPX2^^0^B25813809
"BLD",41,"KRN",9.8,"NM",77,0)
SCMSPU2^^0^B3897977
"BLD",41,"KRN",9.8,"NM",79,0)
SDAPI^^0^B6937568
"BLD",41,"KRN",9.8,"NM",80,0)
SDAMQ^^0^B10937142
"BLD",41,"KRN",9.8,"NM","B","SCDXACK",1)

"BLD",41,"KRN",9.8,"NM","B","SCDXFU01",2)

"BLD",41,"KRN",9.8,"NM","B","SCDXFU02",3)

"BLD",41,"KRN",9.8,"NM","B","SCDXFU03",74)

"BLD",41,"KRN",9.8,"NM","B","SCDXFX01",4)

"BLD",41,"KRN",9.8,"NM","B","SCDXHLDR",5)

"BLD",41,"KRN",9.8,"NM","B","SCDXMSG",6)

"BLD",41,"KRN",9.8,"NM","B","SCDXMSG0",7)

"BLD",41,"KRN",9.8,"NM","B","SCDXMSG1",8)

"BLD",41,"KRN",9.8,"NM","B","SCDXMSG2",73)

"BLD",41,"KRN",9.8,"NM","B","SCDXPRN",9)

"BLD",41,"KRN",9.8,"NM","B","SCDXRT01",10)

"BLD",41,"KRN",9.8,"NM","B","SCDXUTL",11)

"BLD",41,"KRN",9.8,"NM","B","SCDXUTL0",12)

"BLD",41,"KRN",9.8,"NM","B","SCDXUTL1",13)

"BLD",41,"KRN",9.8,"NM","B","SCDXUTL2",14)

"BLD",41,"KRN",9.8,"NM","B","SCMSP",15)

"BLD",41,"KRN",9.8,"NM","B","SCMSP0",16)

"BLD",41,"KRN",9.8,"NM","B","SCMSP1",67)

"BLD",41,"KRN",9.8,"NM","B","SCMSPEN",64)

"BLD",41,"KRN",9.8,"NM","B","SCMSPRE",63)

"BLD",41,"KRN",9.8,"NM","B","SCMSPST",17)

"BLD",41,"KRN",9.8,"NM","B","SCMSPU1",18)

"BLD",41,"KRN",9.8,"NM","B","SCMSPU2",77)

"BLD",41,"KRN",9.8,"NM","B","SCMSPX1",75)

"BLD",41,"KRN",9.8,"NM","B","SCMSPX2",76)

"BLD",41,"KRN",9.8,"NM","B","SCMSVDG1",19)

"BLD",41,"KRN",9.8,"NM","B","SCMSVEVN",20)

"BLD",41,"KRN",9.8,"NM","B","SCMSVPID",21)

"BLD",41,"KRN",9.8,"NM","B","SCMSVPR1",22)

"BLD",41,"KRN",9.8,"NM","B","SCMSVPV1",23)

"BLD",41,"KRN",9.8,"NM","B","SCMSVUT0",24)

"BLD",41,"KRN",9.8,"NM","B","SCMSVZCL",25)

"BLD",41,"KRN",9.8,"NM","B","SCMSVZEL",26)

"BLD",41,"KRN",9.8,"NM","B","SCMSVZIR",27)

"BLD",41,"KRN",9.8,"NM","B","SCMSVZPD",28)

"BLD",41,"KRN",9.8,"NM","B","SCMSVZSC",29)

"BLD",41,"KRN",9.8,"NM","B","SCMSVZSP",30)

"BLD",41,"KRN",9.8,"NM","B","SDA223N",31)

"BLD",41,"KRN",9.8,"NM","B","SDACS",32)

"BLD",41,"KRN",9.8,"NM","B","SDAMQ",80)

"BLD",41,"KRN",9.8,"NM","B","SDAPI",79)

"BLD",41,"KRN",9.8,"NM","B","SDAPIAE",33)

"BLD",41,"KRN",9.8,"NM","B","SDAPIAE1",71)

"BLD",41,"KRN",9.8,"NM","B","SDAPICO",34)

"BLD",41,"KRN",9.8,"NM","B","SDCO0",35)

"BLD",41,"KRN",9.8,"NM","B","SDCO3",36)

"BLD",41,"KRN",9.8,"NM","B","SDCO4",37)

"BLD",41,"KRN",9.8,"NM","B","SDCODEL",38)

"BLD",41,"KRN",9.8,"NM","B","SDM",39)

"BLD",41,"KRN",9.8,"NM","B","SDOPC",40)

"BLD",41,"KRN",9.8,"NM","B","SDOPCDEL",41)

"BLD",41,"KRN",9.8,"NM","B","SDPCE1",43)

"BLD",41,"KRN",9.8,"NM","B","SDSTP1",69)

"BLD",41,"KRN",9.8,"NM","B","SDSTP2",66)

"BLD",41,"KRN",9.8,"NM","B","SDSTP3",45)

"BLD",41,"KRN",9.8,"NM","B","SDTRAN",46)

"BLD",41,"KRN",9.8,"NM","B","SDTRANDV",47)

"BLD",41,"KRN",9.8,"NM","B","SDVSIT",48)

"BLD",41,"KRN",9.8,"NM","B","SDVSIT2",49)

"BLD",41,"KRN",19,0)
19
"BLD",41,"KRN",19,"NM",0)
^9.68A^6^6
"BLD",41,"KRN",19,"NM",1,0)
SCDX AMBCAR ERROR REPORT^^0
"BLD",41,"KRN",19,"NM",2,0)
SCDX AMBCAR NIGHTLY XMIT^^0
"BLD",41,"KRN",19,"NM",3,0)
SCDX AMBCAR REPORTING^^0
"BLD",41,"KRN",19,"NM",4,0)
SCDX AMBCAR RETRANS BY DATE^^0
"BLD",41,"KRN",19,"NM",5,0)
SCDX AMBCAR TRANS REPORT^^0
"BLD",41,"KRN",19,"NM",6,0)
SDMGR^^2
"BLD",41,"KRN",19,"NM","B","SCDX AMBCAR ERROR REPORT",1)

"BLD",41,"KRN",19,"NM","B","SCDX AMBCAR NIGHTLY XMIT",2)

"BLD",41,"KRN",19,"NM","B","SCDX AMBCAR REPORTING",3)

"BLD",41,"KRN",19,"NM","B","SCDX AMBCAR RETRANS BY DATE",4)

"BLD",41,"KRN",19,"NM","B","SCDX AMBCAR TRANS REPORT",5)

"BLD",41,"KRN",19,"NM","B","SDMGR",6)

"BLD",41,"KRN",19.1,0)
19.1
"BLD",41,"KRN",101,0)
101
"BLD",41,"KRN",101,"NM",0)
^9.68A^4^4
"BLD",41,"KRN",101,"NM",1,0)
SCDX AMBCARE EVENT^^0
"BLD",41,"KRN",101,"NM",2,0)
SCDX AMBCARE SEND CLIENT FOR ADT-Z00^^0
"BLD",41,"KRN",101,"NM",3,0)
SCDX AMBCARE SEND SERVER FOR ADT-Z00^^0
"BLD",41,"KRN",101,"NM",4,0)
SDAM APPOINTMENT EVENTS^^2
"BLD",41,"KRN",101,"NM","B","SCDX AMBCARE EVENT",1)

"BLD",41,"KRN",101,"NM","B","SCDX AMBCARE SEND CLIENT FOR ADT-Z00",2)

"BLD",41,"KRN",101,"NM","B","SCDX AMBCARE SEND SERVER FOR ADT-Z00",3)

"BLD",41,"KRN",101,"NM","B","SDAM APPOINTMENT EVENTS",4)

"BLD",41,"KRN",409.61,0)
409.61
"BLD",41,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",41,"KRN",8994,0)
8994
"BLD",41,"KRN","B",.4,.4)

"BLD",41,"KRN","B",.401,.401)

"BLD",41,"KRN","B",.402,.402)

"BLD",41,"KRN","B",.403,.403)

"BLD",41,"KRN","B",.5,.5)

"BLD",41,"KRN","B",.84,.84)

"BLD",41,"KRN","B",3.6,3.6)

"BLD",41,"KRN","B",9.2,9.2)

"BLD",41,"KRN","B",9.8,9.8)

"BLD",41,"KRN","B",19,19)

"BLD",41,"KRN","B",19.1,19.1)

"BLD",41,"KRN","B",101,101)

"BLD",41,"KRN","B",409.61,409.61)

"BLD",41,"KRN","B",8994,8994)

"BLD",41,"PRE")
SCMSPEN
"BLD",41,"QUES",0)
^9.62^1^1
"BLD",41,"QUES",1,0)
POSHOPUP
"BLD",41,"QUES",1,1)
DA^NOW:2961001:AERSX
"BLD",41,"QUES",1,"A")
check out: 
"BLD",41,"QUES",1,"A1",0)
^^2^2^2960729^^
"BLD",41,"QUES",1,"A1",1,0)
Date and time to update HOSPITAL LOCATION file
"BLD",41,"QUES",1,"A1",2,0)
so that provider and diagnosis are required for
"BLD",41,"QUES",1,"B")
9-30-1996@11:00PM
"BLD",41,"QUES",1,"M")
K:(DT'<2961001) DIR
"BLD",41,"QUES",1,"Q")
This date and time must fall between 'NOW' and 9-30-1996 @ 11:59:59 PM.
"BLD",41,"QUES",1,"Q1",0)
^^10^10^2960724^
"BLD",41,"QUES",1,"Q1",1,0)
Enter the date and time you want all clinics contained in the HOSPITAL
"BLD",41,"QUES",1,"Q1",2,0)
LOCATION file (#44) marked to require provider and diagnosis for check
"BLD",41,"QUES",1,"Q1",3,0)
out.
"BLD",41,"QUES",1,"Q1",4,0)
  
"BLD",41,"QUES",1,"Q1",5,0)
Clinics that have an exempted stop code will not be marked to require
"BLD",41,"QUES",1,"Q1",6,0)
diagnosis for check out.  The following exempted stop codes are the
"BLD",41,"QUES",1,"Q1",7,0)
exception to this rule: 
"BLD",41,"QUES",1,"Q1",8,0)
  
"BLD",41,"QUES",1,"Q1",9,0)
    117   118   119   120   121   123   124
"BLD",41,"QUES",1,"Q1",10,0)
    125   126   128   152   165   170   999
"BLD",41,"QUES","B","POSHOPUP",1)

"DATA",409.76,1,0)
100
"DATA",409.76,1,1)
Event Type is not 'A08' or 'A23'.
"DATA",409.76,2,0)
105
"DATA",409.76,2,1)
Event Date is missing, invalid, after processing date, or before project start date.
"DATA",409.76,3,0)
106
"DATA",409.76,3,1)
Event Time is invalid.
"DATA",409.76,4,0)
200
"DATA",409.76,4,1)
Patient Name is missing, or not alphanumeric, or all numeric, or all blanks.
"DATA",409.76,5,0)
203
"DATA",409.76,5,1)
Patient ID (Internal) is missing or not numeric.
"DATA",409.76,6,0)
205
"DATA",409.76,6,1)
Date of Birth is missing, or invalid date, or after the processing date.
"DATA",409.76,7,0)
210
"DATA",409.76,7,1)
Sex code is missing or an invalid code.
"DATA",409.76,8,0)
215
"DATA",409.76,8,1)
Invalid Race code.
"DATA",409.76,9,0)
220
"DATA",409.76,9,1)
Address - Line 1 contains all numbers.
"DATA",409.76,10,0)
221
"DATA",409.76,10,1)
Address - Line 2 contains all numbers.
"DATA",409.76,11,0)
222
"DATA",409.76,11,1)
Address - City contains all numbers.
"DATA",409.76,12,0)
223
"DATA",409.76,12,1)
Address - State is missing or is an invalid code.
"DATA",409.76,13,0)
224
"DATA",409.76,13,1)
Address - Zip Code is missing or not numeric.
"DATA",409.76,14,0)
225
"DATA",409.76,14,1)
Invalid County code.
"DATA",409.76,15,0)
230
"DATA",409.76,15,1)
Invalid Marital Status code.
"DATA",409.76,16,0)
233
"DATA",409.76,16,1)
Invalid Religion code.
"DATA",409.76,17,0)
235
"DATA",409.76,17,1)
Pseudo SSN is not 'P' or blank.
"DATA",409.76,18,0)
236
"DATA",409.76,18,1)
Social Security Number is missing, or not numeric, or is equal to zeros.
"DATA",409.76,19,0)
237
"DATA",409.76,19,1)
Date of Death for this SSN is after the Admit Date.
"DATA",409.76,20,0)
300
"DATA",409.76,20,1)
Date of Death is missing, or invalid date, or after the processing date.
"DATA",409.76,21,0)
310
"DATA",409.76,21,1)
Homeless Indicator is neither '0' nor '1'.
"DATA",409.76,22,0)
315
"DATA",409.76,22,1)
POW Status is neither 'N', 'U', nor 'Y'.  Null not allowed.
"DATA",409.76,23,0)
320
"DATA",409.76,23,1)
Invalid Type Insurance code or not null.
"DATA",409.76,24,0)
400
"DATA",409.76,24,1)
Patient Class is not 'O' for OPC.
"DATA",409.76,25,0)
405
"DATA",409.76,25,1)
Invalid Admission Type code.
"DATA",409.76,26,0)
407
"DATA",409.76,26,1)
Admission Source is not '1' no '6'.
"DATA",409.76,27,0)
410
"DATA",409.76,27,1)
Alternate Visit ID is blank or null.
"DATA",409.76,28,0)
415
"DATA",409.76,28,1)
Invalid Service Facility.
"DATA",409.76,29,0)
420
"DATA",409.76,29,1)
Admit Date is invalid, or after processing date, or before project start date.
"DATA",409.76,30,0)
421
"DATA",409.76,30,1)
Admit Time is invalid.
"DATA",409.76,31,0)
500
"DATA",409.76,31,1)
Invalid Diagnosis Code.
"DATA",409.76,32,0)
503
"DATA",409.76,32,1)
Diagnosis Coding Method is not 'I9'.
"DATA",409.76,33,0)
510
"DATA",409.76,33,1)
Diagnosis Priority is not '1' or null.
"DATA",409.76,34,0)
515
"DATA",409.76,34,1)
Sequencing error in DG1 Set ID.
"DATA",409.76,35,0)
600
"DATA",409.76,35,1)
Procedure Coding Method is not 'C4'.
"DATA",409.76,36,0)
605
"DATA",409.76,36,1)
Invalid Procedure Code.
"DATA",409.76,37,0)
610
"DATA",409.76,37,1)
Not used at this time.
"DATA",409.76,38,0)
612
"DATA",409.76,38,1)
Not used at this time.
"DATA",409.76,39,0)
620
"DATA",409.76,39,1)
Needs one Procedure Practitioner code or is invalid.
"DATA",409.76,40,0)
625
"DATA",409.76,40,1)
Sequencing error in PR1 Set ID.
"DATA",409.76,41,0)
700
"DATA",409.76,41,1)
Invalid Eligibility Code.
"DATA",409.76,42,0)
702
"DATA",409.76,42,1)
Eligibility Code inconsistent with Veteran.
"DATA",409.76,43,0)
705
"DATA",409.76,43,1)
Veteran is not '0' or '1'.
"DATA",409.76,44,0)
710
"DATA",409.76,44,1)
Veteran inconsistent with POW status.
"DATA",409.76,45,0)
805
"DATA",409.76,45,1)
Number of Dependents is not '00'-'99' or 'XX'.
"DATA",409.76,46,0)
807
"DATA",409.76,46,1)
Number of Dependents inconsistent with Means Test Indicator.
"DATA",409.76,47,0)
810
"DATA",409.76,47,1)
Invalid Means Test Indicator.
"DATA",409.76,48,0)
815
"DATA",409.76,48,1)
Patient Income is neither numeric nor zeros.
"DATA",409.76,49,0)
900
"DATA",409.76,49,1)
Outpatient Classification Type is missing or invalid.
"DATA",409.76,50,0)
902
"DATA",409.76,50,1)
Outpatient Classification Type inconsistent with Veteran.
"DATA",409.76,51,0)
905
"DATA",409.76,51,1)
Value is neither '1', '0', nor null.
"DATA",409.76,52,0)
915
"DATA",409.76,52,1)
Sequencing error in ZCL Set ID.
"DATA",409.76,53,0)
002
"DATA",409.76,53,1)
BSH Segment missing.
"DATA",409.76,54,0)
003
"DATA",409.76,54,1)
MSH Segment missing.  Invalid control id.
"DATA",409.76,55,0)
004
"DATA",409.76,55,1)
Invalid Batch Sending Facility.
"DATA",409.76,56,0)
005
"DATA",409.76,56,1)
EVN Segment missing in update message.
"DATA",409.76,57,0)
006
"DATA",409.76,57,1)
PID Segment missing in update message.
"DATA",409.76,58,0)
007
"DATA",409.76,58,1)
ZPD Segment missing in update message.
"DATA",409.76,59,0)
008
"DATA",409.76,59,1)
PV1 Segment missing in update message.
"DATA",409.76,60,0)
009
"DATA",409.76,60,1)
PR1 Segment missing in update message.
"DATA",409.76,61,0)
010
"DATA",409.76,61,1)
ZEL Segment missing in update message.
"DATA",409.76,62,0)
011
"DATA",409.76,62,1)
ZIR Segment missing in update message.
"DATA",409.76,63,0)
012
"DATA",409.76,63,1)
ZCL Segment missing in update message.
"DATA",409.76,64,0)
013
"DATA",409.76,64,1)
ZSC Segment missing in update message.
"DATA",409.76,65,0)
014
"DATA",409.76,65,1)
ZSP Segment missing in update message.
"DATA",409.76,66,0)
020
"DATA",409.76,66,1)
EVN Segment missing in delete message.
"DATA",409.76,67,0)
021
"DATA",409.76,67,1)
PID Segment missing in delete message.
"DATA",409.76,68,0)
022
"DATA",409.76,68,1)
ZPD Segment missing in delete message.
"DATA",409.76,69,0)
023
"DATA",409.76,69,1)
PV1 Segment missing in delete message.
"DATA",409.76,70,0)
030
"DATA",409.76,70,1)
BTS Segment missing.
"DATA",409.76,71,0)
035
"DATA",409.76,71,1)
Invalid Segment name.
"DATA",409.76,72,0)
A00
"DATA",409.76,72,1)
Invalid Stop Code.
"DATA",409.76,73,0)
A05
"DATA",409.76,73,1)
Sequencing error in ZSC Set ID.
"DATA",409.76,74,0)
B00
"DATA",409.76,74,1)
Service Connected is not '1' or '0'.
"DATA",409.76,75,0)
B05
"DATA",409.76,75,1)
Service Connected Percentage is not numeric or null.
"DATA",409.76,76,0)
B10
"DATA",409.76,76,1)
Invalid Period of Service.
"DATA",409.76,77,0)
B15
"DATA",409.76,77,1)
Veteran Service Indicated is neither 'N', 'U', nor 'Y'.
"DATA",409.76,78,0)
B17
"DATA",409.76,78,1)
Vietnam Service Indicated inconsistent with Veteran.
"DATA",409.76,79,0)
C00
"DATA",409.76,79,1)
Batch Message count does not match number received.
"FIA",404.91)
SCHEDULING PARAMETER
"FIA",404.91,0)
^SD(404.91,
"FIA",404.91,0,0)
404.91
"FIA",404.91,0,1)
y^y^f^^^^n
"FIA",404.91,0,10)

"FIA",404.91,0,11)

"FIA",404.91,0,"RLRO")

"FIA",404.91,0,"VR")
5.3^SD
"FIA",404.91,404.91)
0
"FIA",409.43)
OUTPATIENT DIAGNOSIS
"FIA",409.43,0)
^SDD(409.43,
"FIA",409.43,0,0)
409.43IP
"FIA",409.43,0,1)
y^n^p^^^^n
"FIA",409.43,0,10)

"FIA",409.43,0,11)

"FIA",409.43,0,"RLRO")

"FIA",409.43,0,"VR")
5.3^SD
"FIA",409.43,409.43)
1
"FIA",409.43,409.43,.03)

"FIA",409.44)
OUTPATIENT PROVIDER
"FIA",409.44,0)
^SDD(409.44,
"FIA",409.44,0,0)
409.44IP
"FIA",409.44,0,1)
y^n^p^^^^n
"FIA",409.44,0,10)

"FIA",409.44,0,11)

"FIA",409.44,0,"RLRO")

"FIA",409.44,0,"VR")
5.3^SD
"FIA",409.44,409.44)
1
"FIA",409.44,409.44,.03)

"FIA",409.68)
OUTPATIENT ENCOUNTER
"FIA",409.68,0)
^SCE(
"FIA",409.68,0,0)
409.68DI
"FIA",409.68,0,1)
y^n^p^^^^n
"FIA",409.68,0,10)

"FIA",409.68,0,11)

"FIA",409.68,0,"RLRO")

"FIA",409.68,0,"VR")
5.3^SD
"FIA",409.68,409.68)
1
"FIA",409.68,409.68,.05)

"FIA",409.68,409.68,.09)

"FIA",409.68,409.68,.2)

"FIA",409.73)
TRANSMITTED OUTPATIENT ENCOUNTER
"FIA",409.73,0)
^SD(409.73,
"FIA",409.73,0,0)
409.73
"FIA",409.73,0,1)
y^y^f^^^^n
"FIA",409.73,0,10)

"FIA",409.73,0,11)

"FIA",409.73,0,"RLRO")

"FIA",409.73,0,"VR")
5.3^SD
"FIA",409.73,409.73)
0
"FIA",409.74)
DELETED OUTPATIENT ENCOUNTER
"FIA",409.74,0)
^SD(409.74,
"FIA",409.74,0,0)
409.74DI
"FIA",409.74,0,1)
y^y^f^^^^n
"FIA",409.74,0,10)

"FIA",409.74,0,11)

"FIA",409.74,0,"RLRO")

"FIA",409.74,0,"VR")
5.3^SD
"FIA",409.74,409.74)
0
"FIA",409.75)
TRANSMITTED OUTPATIENT ENCOUNTER ERROR
"FIA",409.75,0)
^SD(409.75,
"FIA",409.75,0,0)
409.75P
"FIA",409.75,0,1)
y^y^f^^^^n
"FIA",409.75,0,10)

"FIA",409.75,0,11)

"FIA",409.75,0,"RLRO")

"FIA",409.75,0,"VR")
5.3^SD
"FIA",409.75,409.75)
0
"FIA",409.76)
TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE
"FIA",409.76,0)
^SD(409.76,
"FIA",409.76,0,0)
409.76
"FIA",409.76,0,1)
y^y^f^^n^^y^o^n
"FIA",409.76,0,10)

"FIA",409.76,0,11)

"FIA",409.76,0,"RLRO")

"FIA",409.76,0,"VR")
5.3^SD
"FIA",409.76,409.76)
0
"INI")
CHKPTS^SCMSPRE
"INIT")
CHKPTS^SCMSPST
"KRN",.4,1398,-1)
0^4
"KRN",.4,1398,0)
SCDX NPCDB TRANSMISSION REPORT^2960617.1346^@^409.73^^@^2960815
"KRN",.4,1398,"DXS",1,9.2)
S DIP(2)=$C(59)_$S($D(^DD(409.73,.04,0)):$P(^(0),U,3),1:""),DIP(1)=$S($D(^SD(409.73,D0,0)):^(0),1:"") S X=$P($P(DIP(2),$C(59)_$P(DIP(1),U,4)_":",2),$C(59),1)
"KRN",.4,1398,"F",1)
.06;C1~
"KRN",.4,1398,"F",2)
X DXS(1,9.2) S X=X="YES",DIP(3)=X S X="NO",DIP(4)=X S X=1,DIP(5)=X S X="YES",X=$S(DIP(3):DIP(4),DIP(5):X) W X K DIP;"TRANSMITTED";Z;"$S(TRANSMISSION REQUIRED="YES":"NO",1:"YES")"~
"KRN",.4,1398,"F",3)
.05;"EVENT"~11;"DATE/TIME OF XMIT"~15;"STATUS"~20.01~20.02~
"KRN",.4,1398,"H")
TRANSMITTED OUTPATIENT ENCOUNTER STATISTICS
"KRN",.4,1399,-1)
0^2
"KRN",.4,1399,0)
SCDX TRANSMITTED ERROR LIST^2960528.0705^@^409.75^^@^2960815
"KRN",.4,1399,"F",1)
10.01;C1~-409.76,^SD(409.76,^^S I(0,0)=D0 S DIP(1)=$S($D(^SD(409.75,D0,0)):^(0),1:"") S X=$P(DIP(1),U,2),X=X S D(0)=+X;Z;".02:"~
"KRN",.4,1399,"F",2)
-409.73,^SD(409.73,^^S I(0,0)=D0 S DIP(1)=$S($D(^SD(409.75,D0,0)):^(0),1:"") S X=$P(DIP(1),U,1),X=X S D(0)=+X;Z;".01:"~-409.73,20.01~-409.73,20.02~
"KRN",.4,1399,"F",3)
-409.73,20.03~-409.76,^SD(409.76,^^S I(0,0)=D0 S DIP(1)=$S($D(^SD(409.75,D0,0)):^(0),1:"") S X=$P(DIP(1),U,2),X=X S D(0)=+X;Z;".02:"~-409.76,.01;C1~-409.76,11~
"KRN",.4,1399,"H")
TRANSMITTED OUTPATIENT ENCOUNTER ERROR LIST
"KRN",.402,67,-1)
0^1
"KRN",.402,67,0)
SDB^2960718.0943^^44^^^2960813
"KRN",.402,67,"DIAB",1,1,44.03,0)
ALL
"KRN",.402,67,"DIAB",1,1,44.04,0)
ALL
"KRN",.402,67,"DR",1,44)
.01;1;2504//Y;9;2502;S:X'["Y" Y="@05";2502.5;@05;S:$S('$D(^DG(43,1,"GL")):1,$D(^DG(43,1,"GL"))&('$P(^DG(43,1,"GL"),"^",2)):1,1:0) Y="@10";3.5//^S X=+$O(^DG(40.8,0)),X=$S($D(^(X,0)):$P(^(0),"^"),1:"");@10;8;2507//REGULAR;99;2000;
"KRN",.402,67,"DR",1,44,1)
2000.5//YES;2508;2509;2510;2511;24;I '$$DATECHK^SCDXUTL() S Y="@13";26///1;S Y="@14";@13;26;S:'X Y="@15";@14;2600;2801;@15;I $$OCCA^SCDXUTL(DA)!('$$DATECHK^SCDXUTL) S Y="@18";27///1;S Y="@19";@18;27;S:'X Y="@20";@19;2700;@20;28;
"KRN",.402,67,"DR",1,44,2)
2001;2002;S:$N(^SC(DA,"ST",0))>0 Y="@25";1914;Q;@25;2003;2005;1918.5;2503;2500;S:X'="Y" Y="@30";2501;Q;@30;10;1916;1918;1910;1912;Q;I '$D(SDLA) S SDLA=X;1913;S:$N(^SC(DA,"ST",0))>0 Y="@99";1917//4;@99;
"KRN",.402,67,"DR",2,44.03)
.01
"KRN",.402,67,"DR",2,44.04)
.01
"KRN",.402,67,"DR",2,44.1)
.01;.02;
"KRN",.402,67,"DR",2,44.11)
.01;.02;
"KRN",.402,67,"ROU")
^SDBT
"KRN",.402,67,"ROUOLD")
SDBT
"KRN",.402,1169,-1)
0^2
"KRN",.402,1169,0)
SD ENCOUNTER ENTRY^2960730.1107^^409.68^^^2960814
"KRN",.402,1169,"%D",0)
^^1^1^2960801^^
"KRN",.402,1169,"%D",1,0)
 
"KRN",.402,1169,"DR",1,409.68)
.01///^S X=SDT;.12////^S X=$G(SDVSIT("STA"));.02////^S X=$G(SDVSIT("DFN"));.03////^S X=$G(SDVSIT("CLN"));.04////^S X=$G(SDVSIT("LOC"));.05////^S X=$G(SDVSIT("VST"));.06////^S X=$G(SDVSIT("PAR"));.08////^S X=$G(SDVSIT("ORG"));
"KRN",.402,1169,"DR",1,409.68,1)
.09////^S X=$G(SDVSIT("REF"));.1////^S X=$G(SDVSIT("TYP"));.11////^S X=$G(SDVSIT("DIV"));.13////^S X=$G(SDVSIT("ELG"));
"KRN",.402,1169,"ROU")
^SDAMXOE
"KRN",.402,1169,"ROUOLD")
SDAMXOE
"KRN",3.6,109,-1)
0^1
"KRN",3.6,109,0)
SCDX AMBCARE TO NPCDB SUMMARY^|1|
"KRN",3.6,109,1,0)
^^1^1^2960701^^^^
"KRN",3.6,109,1,1,0)
  
"KRN",3.6,109,3,0)
^^3^3^2960701^^^^
"KRN",3.6,109,3,1,0)
Bulletin sent at the [un]successfull completion of generating workload
"KRN",3.6,109,3,2,0)
information to be transmitted to the National Patient Care Database via
"KRN",3.6,109,3,3,0)
HL7.
"KRN",3.6,109,4,0)
^3.64A^1^1
"KRN",3.6,109,4,1,0)
1
"KRN",3.6,109,4,1,1,0)
^^2^2^2960701^^^^
"KRN",3.6,109,4,1,1,1,0)
Subject of message - allows use of one bulletin for success and
"KRN",3.6,109,4,1,1,2,0)
unsuccessfull completion.
"KRN",19,227,-1)
2^6
"KRN",19,227,0)
SDMGR^Scheduling Manager's Menu^^M^^^^^^^^SCHEDULING^^1
"KRN",19,227,1,0)
^^2^2^2960725^^^^
"KRN",19,227,1,1,0)
This is the primary menu option which allows the user access to all
"KRN",19,227,1,2,0)
options of the scheduling module.
"KRN",19,227,10,0)
^19.01PI^7^7
"KRN",19,227,10,7,0)
6086^ACR
"KRN",19,227,10,7,"^")
SCDX AMBCAR REPORTING
"KRN",19,227,20)
D ^SDVER
"KRN",19,227,25)
SD
"KRN",19,227,51)
3,4,5
"KRN",19,227,99)
56824,46466
"KRN",19,227,99.1)
53729,33583
"KRN",19,227,"U")
SCHEDULING MANAGER'S MENU
"KRN",19,6084,-1)
0^2
"KRN",19,6084,0)
SCDX AMBCAR NIGHTLY XMIT^Ambulatory Care Nightly Transmission to NPCDB^^R^^^^^^^n^SCHEDULING
"KRN",19,6084,1,0)
^^5^5^2960802^^^^
"KRN",19,6084,1,1,0)
Nightly background job which transmits outpatient encounter data, as
"KRN",19,6084,1,2,0)
stored in the Outpatient Encounter (#409.68) and Deleted Outpatient
"KRN",19,6084,1,3,0)
Encounter (#409.74) files, to the National Patient Care Database.
"KRN",19,6084,1,4,0)
Administrative data concerning the transmission of this data is stored in
"KRN",19,6084,1,5,0)
the Transmitted Outpatient Encounter file (#409.73).
"KRN",19,6084,10.1)
Amb Care Background Job
"KRN",19,6084,25)
SNDZ00^SCDXMSG
"KRN",19,6084,200.9)
y
"KRN",19,6084,"U")
AMBULATORY CARE NIGHTLY TRANSM
"KRN",19,6085,-1)
0^4
"KRN",19,6085,0)
SCDX AMBCAR RETRANS BY DATE^Retransmit Ambulatory Care Data by Date Range^^R^^SD SUPERVISOR^^^^^n^SCHEDULING
"KRN",19,6085,1,0)
^^6^6^2960529^^^^
"KRN",19,6085,1,1,0)
Retransmission option which will gather data from the Outpatient Encounter
"KRN",19,6085,1,2,0)
(#409.68) and Deleted Outpatient Encounter (#409.74) files within a
"KRN",19,6085,1,3,0)
specified date range and mark the corresponding entry in the Transmitted
"KRN",19,6085,1,4,0)
Outpatient Encounter file (#409.73) for retransmission.  The nightly
"KRN",19,6085,1,5,0)
background job 'SDCX AMBCAR NIGHTLY XMIT' will then transmit this data to
"KRN",19,6085,1,6,0)
the National Patient Care Database.
"KRN",19,6085,10.1)
Amb Care Retrans by Date
"KRN",19,6085,25)
RTRNRNG^SCDXRT01
"KRN",19,6085,"U")
RETRANSMIT AMBULATORY CARE DAT
"KRN",19,6086,-1)
0^3
"KRN",19,6086,0)
SCDX AMBCAR REPORTING^Ambulatory Care Reporting Menu^^M^^^^^^^^SCHEDULING
"KRN",19,6086,1,0)
^^3^3^2960621^^^^
"KRN",19,6086,1,1,0)
This menu option contains all menus and options needed to collect, edit,
"KRN",19,6086,1,2,0)
maintain and transmit Ambulitory Care information to the National Patient
"KRN",19,6086,1,3,0)
Care Database.
"KRN",19,6086,10,0)
^19.01IP^5^4
"KRN",19,6086,10,2,0)
6085
"KRN",19,6086,10,2,"^")
SCDX AMBCAR RETRANS BY DATE
"KRN",19,6086,10,3,0)
6248^TRAN
"KRN",19,6086,10,3,"^")
SCDX AMBCAR TRANS REPORT
"KRN",19,6086,10,4,0)
6249^ERR
"KRN",19,6086,10,4,"^")
SCDX AMBCAR ERROR REPORT
"KRN",19,6086,99)
56769,40046
"KRN",19,6086,"U")
AMBULATORY CARE REPORTING MENU
"KRN",19,6248,-1)
0^5
"KRN",19,6248,0)
SCDX AMBCAR TRANS REPORT^Data Transmission Report^^R^^^^^^^^SCHEDULING^^
"KRN",19,6248,1,0)
^^2^2^2960606^^^^
"KRN",19,6248,1,1,0)
This report will provide a listing of the records and the current status
"KRN",19,6248,1,2,0)
of those Outpatient Encounters that have been transmitted to NPCDB.
"KRN",19,6248,20)

"KRN",19,6248,25)
TRANS^SCDXPRN
"KRN",19,6248,99)
56757,46659
"KRN",19,6248,"U")
DATA TRANSMISSION REPORT
"KRN",19,6249,-1)
0^1
"KRN",19,6249,0)
SCDX AMBCAR ERROR REPORT^Error Listing^^R^^^^^^^^SCHEDULING^^
"KRN",19,6249,1,0)
^^1^1^2960606^^
"KRN",19,6249,1,1,0)
This report will list for a date range all errors reported by the NPCDB.
"KRN",19,6249,20)

"KRN",19,6249,25)
ERROR^SCDXPRN
"KRN",19,6249,99)
56757,51862
"KRN",19,6249,"U")
ERROR LISTING
"KRN",101,414,-1)
2^4
"KRN",101,414,0)
SDAM APPOINTMENT EVENTS^Appointment Event Driver^^X^^^^^^^^SCHEDULING
"KRN",101,414,1,0)
^^4^4^2960722^^^^
"KRN",101,414,1,1,0)
This extended action contains all the actions that
"KRN",101,414,1,2,0)
need to be performed when an action is taken upon
"KRN",101,414,1,3,0)
an appointment, such as checking in.
"KRN",101,414,1,4,0)
 
"KRN",101,414,2,0)
^101.02A^^0
"KRN",101,414,10,0)
^101.01PA^12^12
"KRN",101,414,10,11,0)
1774^^^
"KRN",101,414,10,11,"^")
SCDX AMBCARE EVENT
"KRN",101,414,20)
D ANC^SDVSIT2
"KRN",101,414,99)
56827,36096
"KRN",101,414,101.0431,0)
^^1^1^2960508^^^^
"KRN",101,414,101.0431,1,0)
 
"KRN",101,1774,-1)
0^1
"KRN",101,1774,0)
SCDX AMBCARE EVENT^AMBCARE EVENT HANDLER^^A^^^^^^^^SCHEDULING
"KRN",101,1774,1,0)
^^4^4^2960711^^^^
"KRN",101,1774,1,1,0)
This is the ambcare event handler that will hang off of the Scheduling
"KRN",101,1774,1,2,0)
event driver.  It will monitor the events that are happening and populate
"KRN",101,1774,1,3,0)
the necessary Ambcare files in the case of new encounters, edits or deletes
"KRN",101,1774,1,4,0)
to existing encounters.
"KRN",101,1774,15)

"KRN",101,1774,20)
D EN^SCDXHLDR
"KRN",101,1774,99)
56741,40647
"KRN",101,1775,-1)
0^3
"KRN",101,1775,0)
SCDX AMBCARE SEND SERVER FOR ADT-Z00^AMBCARE SERVER FOR SENDING ADT-Z00 TO NPCDB^^E^^^^^^^^SCHEDULING
"KRN",101,1775,1,0)
^^4^4^2960805^^^^
"KRN",101,1775,1,1,0)
HL7 server protocol for the sending of batch ADT-Z00 messages by the
"KRN",101,1775,1,2,0)
Ambulatory Care Reporting Project.  These batch messages will contain
"KRN",101,1775,1,3,0)
ADT-A08 & ADT-A23 messages as required and used by the National Patient
"KRN",101,1775,1,4,0)
Care Databse.
"KRN",101,1775,10,0)
^101.01PA^1^1
"KRN",101,1775,10,1,0)
1786^^^
"KRN",101,1775,10,1,"^")
SCDX AMBCARE SEND CLIENT FOR ADT-Z00
"KRN",101,1775,99)
56742,35444
"KRN",101,1775,770)
AMBCARE-DHCP^^ADT^Z00^^P^^NE^AL^2.2^ADT
"KRN",101,1775,772)
D ACKZ00^SCDXACK
"KRN",101,1786,-1)
0^2
"KRN",101,1786,0)
SCDX AMBCARE SEND CLIENT FOR ADT-Z00^AMBCARE CLIENT FOR SENDING ADT-Z00 TO NPCDB^^S^^^^^^^^SCHEDULING
"KRN",101,1786,1,0)
^^4^4^2960805^^^^
"KRN",101,1786,1,1,0)
HL7 client protocol for the sending of batch ADT-Z00 messages by the
"KRN",101,1786,1,2,0)
Ambulatory Care Reporting Project.  These batch messages will contain
"KRN",101,1786,1,3,0)
ADT-A08 & ADT-A23 messages as required and used by the National Patient
"KRN",101,1786,1,4,0)
Care Databse.
"KRN",101,1786,99)
56742,35416
"KRN",101,1786,770)
^NPCD-AAC^ADT^Z00^^P^AMB-CARE^^^2.2^ADT
"KRN",101,1786,771)
Q
"KRN",101,1786,773)
1^1^0^1
"OER",16,0)
16^SD^^M.A.S.^
"OER",16,1,0)
^100.9951PA^2^2
"OER",16,1,1,0)
103
"OER",16,1,1,1,0)
^100.99511PA^1^1
"OER",16,1,1,1,1,0)
101
"OER",16,1,2,0)
645
"OER",16,1,2,1,0)
^100.99511PA^1^1
"OER",16,1,2,1,1,0)
121
"ORD",2,3.6)
3.6;2;1;;BUL^XPDTA1;;BULE1^XPDIA1;;;BULDEL^XPDIA1
"ORD",2,3.6,0)
BULLETIN
"ORD",5,.4)
.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"ORD",5,.4,0)
PRINT TEMPLATE
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",16,-1)
1^1
"PKG",16,0)
SCHEDULING^SD^APPOINTMENTS,PROFILES,LETTERS,AMIS REPORTS
"PKG",16,22,0)
^9.49^1^1
"PKG",16,22,1,0)
5.3^2930813
"PKG",16,22,1,"PAH",1,0)
44^2960812
"PKG",16,22,1,"PAH",1,1,0)
^^5^5^2960820
"PKG",16,22,1,"PAH",1,1,1,0)
 KIDS distribution of the Scheduling portion of the Ambulatory Care
"PKG",16,22,1,"PAH",1,1,2,0)
 Reporting Project.
"PKG",16,22,1,"PAH",1,1,3,0)
   
"PKG",16,22,1,"PAH",1,1,4,0)
 The changes included in this patch are described in the description of
"PKG",16,22,1,"PAH",1,1,5,0)
 patch SD*5.3*44 in the National Patch Module.
"PRE")
SCMSPEN
"QUES","POSHOPUP",0)
DA^NOW:2961001:AERSX
"QUES","POSHOPUP","?")
This date and time must fall between 'NOW' and 9-30-1996 @ 11:59:59 PM.
"QUES","POSHOPUP","?",1)
Enter the date and time you want all clinics contained in the HOSPITAL
"QUES","POSHOPUP","?",2)
LOCATION file (#44) marked to require provider and diagnosis for check
"QUES","POSHOPUP","?",3)
out.
"QUES","POSHOPUP","?",4)
  
"QUES","POSHOPUP","?",5)
Clinics that have an exempted stop code will not be marked to require
"QUES","POSHOPUP","?",6)
diagnosis for check out.  The following exempted stop codes are the
"QUES","POSHOPUP","?",7)
exception to this rule: 
"QUES","POSHOPUP","?",8)
  
"QUES","POSHOPUP","?",9)
    117   118   119   120   121   123   124
"QUES","POSHOPUP","?",10)
    125   126   128   152   165   170   999
"QUES","POSHOPUP","A")
check out: 
"QUES","POSHOPUP","A",1)
Date and time to update HOSPITAL LOCATION file
"QUES","POSHOPUP","A",2)
so that provider and diagnosis are required for
"QUES","POSHOPUP","B")
9-30-1996@11:00PM
"QUES","POSHOPUP","M")
K:(DT'<2961001) DIR
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
60
"RTN","SCDXACK")
0^1^B13084476
"RTN","SCDXACK",1,0)
SCDXACK ;ALB/JRP - HL7 BATCH ACKNOWLEDGEMENT HANDLER;26-APR-1996
"RTN","SCDXACK",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXACK",3,0)
 ;
"RTN","SCDXACK",4,0)
ACKZ00 ;Process batch acknowledgements from National Patient Care Database
"RTN","SCDXACK",5,0)
 ;
"RTN","SCDXACK",6,0)
 ;Input  : All variables set by the HL7 package
"RTN","SCDXACK",7,0)
 ;Output : None
"RTN","SCDXACK",8,0)
 ;Notes  : The batch acknowledgement received is an exception based
"RTN","SCDXACK",9,0)
 ;         acknowledgement - this allows for a complete acceptance or
"RTN","SCDXACK",10,0)
 ;         rejection of an entire batch message.
"RTN","SCDXACK",11,0)
 ;
"RTN","SCDXACK",12,0)
 ;         If the batch acknowledgement is a batch acceptance, than
"RTN","SCDXACK",13,0)
 ;         the batch message will only contain acknowledgements for
"RTN","SCDXACK",14,0)
 ;         messages that were rejected.  All other messages contained
"RTN","SCDXACK",15,0)
 ;         in the sent batch message are assumed to be accepted.
"RTN","SCDXACK",16,0)
 ;
"RTN","SCDXACK",17,0)
 ;         If the batch acknowledgement is a batch rejection, than
"RTN","SCDXACK",18,0)
 ;         the batch message will only contain acknowledgements for
"RTN","SCDXACK",19,0)
 ;         messages that were accepted.  All other messages contained
"RTN","SCDXACK",20,0)
 ;         in the sent batch message are assumed to be rejected.
"RTN","SCDXACK",21,0)
 ;
"RTN","SCDXACK",22,0)
 ;Declare variables
"RTN","SCDXACK",23,0)
 N %,%H,%I,X,ACKDATE,BATCHID,MSGID,XMITPTR,XMITARRY,ACKCODE
"RTN","SCDXACK",24,0)
 N MSGTYPE,EVNTTYPE,FLDSEP,CMPNTSEP,REPTNSEP,ERRCODES,ERROR,ERRNUM,ERRCNT
"RTN","SCDXACK",25,0)
 S XMITARRY="^TMP(""AMB-CARE"","_$J_",""BID"")"
"RTN","SCDXACK",26,0)
 K @XMITARRY
"RTN","SCDXACK",27,0)
 ;Get current date/time
"RTN","SCDXACK",28,0)
 D NOW^%DTC
"RTN","SCDXACK",29,0)
 ;Remember date/time acknowledgement was received
"RTN","SCDXACK",30,0)
 S ACKDATE=%
"RTN","SCDXACK",31,0)
 ;Get field & component seperators
"RTN","SCDXACK",32,0)
 S FLDSEP=HL("FS")
"RTN","SCDXACK",33,0)
 S CMPNTSEP=$E(HL("ECH"),1)
"RTN","SCDXACK",34,0)
 S REPTNSEP=$E(HL("ECH"),2)
"RTN","SCDXACK",35,0)
 ;Get acknowledgement code
"RTN","SCDXACK",36,0)
 S ACKCODE=$P(HLMSA,FLDSEP,2)
"RTN","SCDXACK",37,0)
 ;Get rejection reason
"RTN","SCDXACK",38,0)
 S ERROR=$P(HLMSA,FLDSEP,3)
"RTN","SCDXACK",39,0)
 ;Default to acceptance
"RTN","SCDXACK",40,0)
 S:(ACKCODE="") ACKCODE="AA"
"RTN","SCDXACK",41,0)
 ;Only file APPLICATION ACKNOWLEDGEMENT
"RTN","SCDXACK",42,0)
 Q:($E(ACKCODE,1)'="A")
"RTN","SCDXACK",43,0)
 ;Translate acknowledgement code to Accept, Reject, Error
"RTN","SCDXACK",44,0)
 S ACKCODE=$E(ACKCODE,2)
"RTN","SCDXACK",45,0)
 ;Get batch control ID
"RTN","SCDXACK",46,0)
 S BATCHID=$P(HLMSA,FLDSEP,3)
"RTN","SCDXACK",47,0)
 ;Get list of all entries in Transmitted Outpatient Encounter file
"RTN","SCDXACK",48,0)
 ; (#409.73) that were contained in batch being acknowledged
"RTN","SCDXACK",49,0)
 D PTRS4BID^SCDXFU02(BATCHID,XMITARRY)
"RTN","SCDXACK",50,0)
 ;Loop through list of entries - do implied acceptance/rejection
"RTN","SCDXACK",51,0)
 S XMITPTR=""
"RTN","SCDXACK",52,0)
 F  S XMITPTR=+$O(@XMITARRY@(XMITPTR)) Q:('XMITPTR)  D
"RTN","SCDXACK",53,0)
 .;Mark entry as accepted/rejected by National Patient Care Database
"RTN","SCDXACK",54,0)
 .D ACKDATA^SCDXFU01(XMITPTR,ACKDATE,ACKCODE)
"RTN","SCDXACK",55,0)
 .;Store error code if rejected by National Patient Care Database
"RTN","SCDXACK",56,0)
 .I (ACKCODE'="A") S X=$$CRTERR^SCDXFU02(XMITPTR,ERROR)
"RTN","SCDXACK",57,0)
 ;Loop through batch acknowledgement - do explicite acceptance/rejection
"RTN","SCDXACK",58,0)
 F  X HLNEXT D  Q:(HLQUIT'>0)
"RTN","SCDXACK",59,0)
 .;Skip to next message header (MSH)
"RTN","SCDXACK",60,0)
 .Q:($E(HLNODE,1,3)'="MSH")
"RTN","SCDXACK",61,0)
 .;Get field & component seperators
"RTN","SCDXACK",62,0)
 .S FLDSEP=$E(HLNODE,4)
"RTN","SCDXACK",63,0)
 .S CMPNTSEP=$E(HLNODE,5)
"RTN","SCDXACK",64,0)
 .;Get message and event types
"RTN","SCDXACK",65,0)
 .S X=$P(HLNODE,FLDSEP,9)
"RTN","SCDXACK",66,0)
 .S MSGTYPE=$P(X,CMPNTSEP,1)
"RTN","SCDXACK",67,0)
 .S EVNTTYPE=$P(X,CMPNTSEP,2)
"RTN","SCDXACK",68,0)
 .;Only process message types ACK-A08 and ACK-A23
"RTN","SCDXACK",69,0)
 .Q:(MSGTYPE'="ACK")
"RTN","SCDXACK",70,0)
 .Q:((EVNTTYPE'="A08")&(EVNTTYPE'="A23"))
"RTN","SCDXACK",71,0)
 .;Skip to message acknowledgement (MSA)
"RTN","SCDXACK",72,0)
 .F  X HLNEXT Q:((HLQUIT'>0)!($E(HLNODE,1,3)="MSA"))
"RTN","SCDXACK",73,0)
 .;Didn't find MSA - quit
"RTN","SCDXACK",74,0)
 .Q:($E(HLNODE,1,3)'="MSA")
"RTN","SCDXACK",75,0)
 .;Get acknowledgement code
"RTN","SCDXACK",76,0)
 .S ACKCODE=$P(HLNODE,FLDSEP,2)
"RTN","SCDXACK",77,0)
 .;Only file APPLICATION ACKNOWLEDGEMENT codes
"RTN","SCDXACK",78,0)
 .Q:($E(ACKCODE,1)'="A")
"RTN","SCDXACK",79,0)
 .;Translate acknowledgement code to Accept, Reject, Error
"RTN","SCDXACK",80,0)
 .S ACKCODE=$E(ACKCODE,2)
"RTN","SCDXACK",81,0)
 .;Get message ID being acknowledged
"RTN","SCDXACK",82,0)
 .S MSGID=$P(HLNODE,FLDSEP,3)
"RTN","SCDXACK",83,0)
 .;Get error codes
"RTN","SCDXACK",84,0)
 .S ERRCODES=$P(HLNODE,FLDSEP,4)
"RTN","SCDXACK",85,0)
 .;Find entry in Transmitted Outpatient Encounter file
"RTN","SCDXACK",86,0)
 .S XMITPTR=$$PTR4MID^SCDXFU02(MSGID)
"RTN","SCDXACK",87,0)
 .;Didn't find message control ID
"RTN","SCDXACK",88,0)
 .Q:('XMITPTR)
"RTN","SCDXACK",89,0)
 .;Store acknowledgement code
"RTN","SCDXACK",90,0)
 .D ACKDATA^SCDXFU01(XMITPTR,ACKDATE,ACKCODE)
"RTN","SCDXACK",91,0)
 .;Parse list of reported error codes
"RTN","SCDXACK",92,0)
 .S ERRCNT=$L(ERRCODES,REPTNSEP)
"RTN","SCDXACK",93,0)
 .F ERRNUM=1:1:ERRCNT D
"RTN","SCDXACK",94,0)
 ..;Get error code
"RTN","SCDXACK",95,0)
 ..S ERROR=$P(ERRCODES,REPTNSEP,ERRNUM)
"RTN","SCDXACK",96,0)
 ..;Store error code
"RTN","SCDXACK",97,0)
 ..Q:(ERROR="")
"RTN","SCDXACK",98,0)
 ..S X=$$CRTERR^SCDXFU02(XMITPTR,ERROR)
"RTN","SCDXACK",99,0)
 ;Clean up
"RTN","SCDXACK",100,0)
 K @XMITARRY
"RTN","SCDXACK",101,0)
 ;Done
"RTN","SCDXACK",102,0)
 Q
"RTN","SCDXFU01")
0^2^B19257810
"RTN","SCDXFU01",1,0)
SCDXFU01 ;ALB/JRP - AMB CARE FILE UTILITIES;01-MAY-1996
"RTN","SCDXFU01",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXFU01",3,0)
 ;
"RTN","SCDXFU01",4,0)
CRTXMIT(ENCPTR,DELPTR,EVNTDATE) ;Create entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU01",5,0)
 ; ENCOUNTER file (#409.73)
"RTN","SCDXFU01",6,0)
 ;
"RTN","SCDXFU01",7,0)
 ;Input  : ENCPTR - Pointer to entry in OUTPATIENT ENCOUNTER
"RTN","SCDXFU01",8,0)
 ;                  file (#409.68)
"RTN","SCDXFU01",9,0)
 ;         DELPTR - Pointer to entry in DELETED OUTPATIENT ENCOUNTER
"RTN","SCDXFU01",10,0)
 ;                  file (#409.74)
"RTN","SCDXFU01",11,0)
 ;         EVNTDATE - Date/time the [DELETED] OUTPATIENT ENCOUNTER
"RTN","SCDXFU01",12,0)
 ;                    occurred in FileMan format (Defaults to NOW)
"RTN","SCDXFU01",13,0)
 ;Output : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU01",14,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU01",15,0)
 ;         -1^Error - Unable to create entry / bad input
"RTN","SCDXFU01",16,0)
 ;Note   : When an encounter is deleted from the OUTPATIENT ENCOUNTER
"RTN","SCDXFU01",17,0)
 ;         file and an entry for the encounter is created in the
"RTN","SCDXFU01",18,0)
 ;         DELETED OUTPATIENT ENCOUNTER file, the ENCPTR and DELPTR
"RTN","SCDXFU01",19,0)
 ;         parameters should both be used.  This allows an existing
"RTN","SCDXFU01",20,0)
 ;         entry that points to the OUTPATIENT ENCOUNTER file (ENCPTR)
"RTN","SCDXFU01",21,0)
 ;         to be repointed to the related entry entry in the DELETED
"RTN","SCDXFU01",22,0)
 ;         OUTPATIENT ENCOUNTER file (DELPTR).  If an existing entry
"RTN","SCDXFU01",23,0)
 ;         for the OUTPATIENT ENCOUNTER is not found (or ENCPTR is not
"RTN","SCDXFU01",24,0)
 ;         passed/valid), a new entry will be created that points to
"RTN","SCDXFU01",25,0)
 ;         the DELETED OUTPATIENT ENCOUNTER.
"RTN","SCDXFU01",26,0)
 ;Note   : A value for DELPTR should not be passed when creating an
"RTN","SCDXFU01",27,0)
 ;         entry for an OUTPATIENT ENCOUNTER.  A value for ENCPTR does
"RTN","SCDXFU01",28,0)
 ;         not have to be passed when creating an entry for a DELETED
"RTN","SCDXFU01",29,0)
 ;         OUTPATIENT ENCOUNTER, but is recommended.
"RTN","SCDXFU01",30,0)
 ;Note   : If an entry for the [DELETED] OUTPATIENT ENCOUNTER already
"RTN","SCDXFU01",31,0)
 ;         exists, a new entry will not be created and a pointer to
"RTN","SCDXFU01",32,0)
 ;         the existing entry will be returned.
"RTN","SCDXFU01",33,0)
 ;
"RTN","SCDXFU01",34,0)
 ;Check input
"RTN","SCDXFU01",35,0)
 S ENCPTR=+$G(ENCPTR)
"RTN","SCDXFU01",36,0)
 S DELPTR=+$G(DELPTR)
"RTN","SCDXFU01",37,0)
 Q:(('ENCPTR)&('DELPTR)) "-1^Did not pass pointer to encounter"
"RTN","SCDXFU01",38,0)
 Q:(('$D(^SCE(ENCPTR)))&('$D(^SD(409.74,DELPTR)))) "-1^Did not pass valid pointer to encounter"
"RTN","SCDXFU01",39,0)
 S EVNTDATE=+$G(EVNTDATE)
"RTN","SCDXFU01",40,0)
 S:('EVNTDATE) EVNTDATE="NOW"
"RTN","SCDXFU01",41,0)
 ;Declare variables
"RTN","SCDXFU01",42,0)
 N ADDENC,XMITPTR,DIE,DA,DR,DIDEL,DIC,DA,DINUM,DLAYGO,X,Y
"RTN","SCDXFU01",43,0)
 ;Adding new Outpatient Encounter
"RTN","SCDXFU01",44,0)
 S ADDENC=1
"RTN","SCDXFU01",45,0)
 ;Adding new Deleted Outpatient Encounter
"RTN","SCDXFU01",46,0)
 S:(DELPTR) ADDENC=0
"RTN","SCDXFU01",47,0)
 ;Find existing Outpatient Encounter
"RTN","SCDXFU01",48,0)
 S XMITPTR=+$O(^SD(409.73,"AENC",ENCPTR,""))
"RTN","SCDXFU01",49,0)
 ;Adding an existing Outpatient Encounter - done
"RTN","SCDXFU01",50,0)
 Q:((ADDENC)&(XMITPTR)) XMITPTR
"RTN","SCDXFU01",51,0)
 ;Converting an Outpatient Encounter to a Deleted Outpatient Encounter
"RTN","SCDXFU01",52,0)
 ; Swap pointer & store deletion event and event date/time - done
"RTN","SCDXFU01",53,0)
 I (('ADDENC)&(XMITPTR)) D  Q XMITPTR
"RTN","SCDXFU01",54,0)
 .S DIE="^SD(409.73,"
"RTN","SCDXFU01",55,0)
 .S DA=XMITPTR
"RTN","SCDXFU01",56,0)
 .S DR=".02///@;.03////^S X=DELPTR;.05///3;.06///^S X=EVNTDATE"
"RTN","SCDXFU01",57,0)
 .D ^DIE
"RTN","SCDXFU01",58,0)
 ;Adding a new [Deleted] Outpatient Encounter - create entry
"RTN","SCDXFU01",59,0)
 ; using auto-numbering capabilities of file
"RTN","SCDXFU01",60,0)
 S DIC="^SD(409.73,"
"RTN","SCDXFU01",61,0)
 S DIC(0)="L"
"RTN","SCDXFU01",62,0)
 S X="+"
"RTN","SCDXFU01",63,0)
 S DLAYGO=409.73
"RTN","SCDXFU01",64,0)
 ;Adding a new Outpatient Encounter
"RTN","SCDXFU01",65,0)
 S DIC("DR")=".02////^S X=ENCPTR;.05///1;.06///^S X=EVNTDATE"
"RTN","SCDXFU01",66,0)
 ;Adding a new Deleted Outpatient Encounter
"RTN","SCDXFU01",67,0)
 S:('ADDENC) DIC("DR")=".03////^S X=DELPTR;.05///3;.06///^S X=EVNTDATE"
"RTN","SCDXFU01",68,0)
 ;Create entry
"RTN","SCDXFU01",69,0)
 D ^DIC
"RTN","SCDXFU01",70,0)
 ;Get pointer to entry
"RTN","SCDXFU01",71,0)
 S XMITPTR=+Y
"RTN","SCDXFU01",72,0)
 ;Error creating entry
"RTN","SCDXFU01",73,0)
 S:(XMITPTR<0) XMITPTR="-1^Unable to create entry in Transmitted Outpatient Encounter file"
"RTN","SCDXFU01",74,0)
 ;Done
"RTN","SCDXFU01",75,0)
 Q XMITPTR
"RTN","SCDXFU01",76,0)
 ;
"RTN","SCDXFU01",77,0)
FINDXMIT(ENCPTR,DELPTR) ;Find entry in TRANSMITTED OUTPATIENT ENCOUNTER
"RTN","SCDXFU01",78,0)
 ; file (#409.73)
"RTN","SCDXFU01",79,0)
 ;
"RTN","SCDXFU01",80,0)
 ;Input  : ENCPTR - Pointer to entry in OUTPATIENT ENCOUNTER
"RTN","SCDXFU01",81,0)
 ;                  file (#409.68)
"RTN","SCDXFU01",82,0)
 ;         DELPTR - Pointer to entry in DELETED OUTPATIENT ENCOUNTER
"RTN","SCDXFU01",83,0)
 ;                  file (#409.74)
"RTN","SCDXFU01",84,0)
 ;Output : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU01",85,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU01",86,0)
 ;         0 - Entry in TRANSMITTED OUTPATIENT ENCOUNTER file for the
"RTN","SCDXFU01",87,0)
 ;             [DELETED] OUTPATIENT ENCOUNTER does not exist
"RTN","SCDXFU01",88,0)
 ;Note   : A value for DELPTR should not be passed if finding an entry
"RTN","SCDXFU01",89,0)
 ;         for an OUTPATIENT ENCOUNTER.  A value for ENCPTR should not
"RTN","SCDXFU01",90,0)
 ;         be passed if finding an entry for a DELETED OUTPATIENT
"RTN","SCDXFU01",91,0)
 ;         ENCOUNTER.  If values for both parameters are passed, the
"RTN","SCDXFU01",92,0)
 ;         pointer to the OUTPATIENT ENCOUNTER will be used.
"RTN","SCDXFU01",93,0)
 ;
"RTN","SCDXFU01",94,0)
 ;Check input
"RTN","SCDXFU01",95,0)
 S ENCPTR=+$G(ENCPTR)
"RTN","SCDXFU01",96,0)
 S DELPTR=+$G(DELPTR)
"RTN","SCDXFU01",97,0)
 Q:(('ENCPTR)&('DELPTR)) 0
"RTN","SCDXFU01",98,0)
 ;Find entry for Outpatient Encounter - done
"RTN","SCDXFU01",99,0)
 Q:(ENCPTR) +$O(^SD(409.73,"AENC",ENCPTR,""))
"RTN","SCDXFU01",100,0)
 ;Find entry for Deleted Outpatient Encounter - done
"RTN","SCDXFU01",101,0)
 Q +$O(^SD(409.73,"ADEL",DELPTR,""))
"RTN","SCDXFU01",102,0)
 ;
"RTN","SCDXFU01",103,0)
STREEVNT(XMITPTR,XMITEVNT,EVNTDATE) ;Store event information for entry
"RTN","SCDXFU01",104,0)
 ; in TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFU01",105,0)
 ;
"RTN","SCDXFU01",106,0)
 ;Input  : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU01",107,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU01",108,0)
 ;         XMITEVNT - Flag denoting event causing transmission
"RTN","SCDXFU01",109,0)
 ;                    0 = Retransmit (DEFAULT)
"RTN","SCDXFU01",110,0)
 ;                    1 = Addition of entry in OUTPATIENT ENCOUNTER file
"RTN","SCDXFU01",111,0)
 ;                    2 = Editing of entry in OUTPATIENT ENCOUNTER file
"RTN","SCDXFU01",112,0)
 ;                    3 = Deletion of entry in OUTPATIENT ENCOUNTER file
"RTN","SCDXFU01",113,0)
 ;                        (Addition of entry in DELETED OUTPATIENT
"RTN","SCDXFU01",114,0)
 ;                         ENCOUNTER file)
"RTN","SCDXFU01",115,0)
 ;         EVNTDATE - Date/time event causing transmission occurred
"RTN","SCDXFU01",116,0)
 ;                    in FileMan format (defaults to NOW)
"RTN","SCDXFU01",117,0)
 ;Output  : None
"RTN","SCDXFU01",118,0)
 ;
"RTN","SCDXFU01",119,0)
 ;Check input
"RTN","SCDXFU01",120,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCDXFU01",121,0)
 Q:('XMITPTR)
"RTN","SCDXFU01",122,0)
 Q:('$D(^SD(409.73,XMITPTR)))
"RTN","SCDXFU01",123,0)
 S XMITEVNT=+$G(XMITEVNT)
"RTN","SCDXFU01",124,0)
 S:((XMITEVNT<0)!(XMITEVNT>3)) XMITEVNT=0
"RTN","SCDXFU01",125,0)
 S EVNTDATE=+$G(EVNTDATE)
"RTN","SCDXFU01",126,0)
 S:('EVNTDATE) EVNTDATE="NOW"
"RTN","SCDXFU01",127,0)
 ;Declare variables
"RTN","SCDXFU01",128,0)
 N DIE,DA,DR,DIDEL,X,Y,DIC
"RTN","SCDXFU01",129,0)
 ;Store event data
"RTN","SCDXFU01",130,0)
 S DIE="^SD(409.73,"
"RTN","SCDXFU01",131,0)
 S DA=XMITPTR
"RTN","SCDXFU01",132,0)
 S DR=".05////^S X=XMITEVNT;.06///^S X=EVNTDATE"
"RTN","SCDXFU01",133,0)
 D ^DIE
"RTN","SCDXFU01",134,0)
 ;Done
"RTN","SCDXFU01",135,0)
 Q
"RTN","SCDXFU01",136,0)
 ;
"RTN","SCDXFU01",137,0)
XMITFLAG(XMITPTR,RESET) ;Set/reset transmission flag for entry in
"RTN","SCDXFU01",138,0)
 ; TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFU01",139,0)
 ;
"RTN","SCDXFU01",140,0)
 ;Input  : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU01",141,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU01",142,0)
 ;         RESET - Denotes if transmission field should be turned
"RTN","SCDXFU01",143,0)
 ;                 on or off
"RTN","SCDXFU01",144,0)
 ;                 0 = Set TRANSMISSION REQUIRED field (#.04) equal
"RTN","SCDXFU01",145,0)
 ;                     to 'YES' (DEFAULT)
"RTN","SCDXFU01",146,0)
 ;                 1 = Set TRANSMISSION REQUIRED field (#.04) equal
"RTN","SCDXFU01",147,0)
 ;                     to 'NO'
"RTN","SCDXFU01",148,0)
 ;Output : None
"RTN","SCDXFU01",149,0)
 ;Notes  : Setting the TRANSMISSION REQUIRED field to 'YES' flags
"RTN","SCDXFU01",150,0)
 ;         the entry for transmission
"RTN","SCDXFU01",151,0)
 ;
"RTN","SCDXFU01",152,0)
 ;Check input
"RTN","SCDXFU01",153,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCDXFU01",154,0)
 Q:('$D(^SD(409.73,XMITPTR)))
"RTN","SCDXFU01",155,0)
 S RESET=+$G(RESET)
"RTN","SCDXFU01",156,0)
 ;Declare variables
"RTN","SCDXFU01",157,0)
 N DIE,DA,DR,DIDEL,X,Y,DIC
"RTN","SCDXFU01",158,0)
 ;Store new value for transmission flag
"RTN","SCDXFU01",159,0)
 S DIE="^SD(409.73,"
"RTN","SCDXFU01",160,0)
 S DA=XMITPTR
"RTN","SCDXFU01",161,0)
 ;Set transmission flag
"RTN","SCDXFU01",162,0)
 S DR=".04///YES"
"RTN","SCDXFU01",163,0)
 ;Reset transmission flag
"RTN","SCDXFU01",164,0)
 S:(RESET) DR=".04///NO"
"RTN","SCDXFU01",165,0)
 D ^DIE
"RTN","SCDXFU01",166,0)
 ;Done
"RTN","SCDXFU01",167,0)
 Q
"RTN","SCDXFU01",168,0)
XMITDATA(XMITPTR,XMITDATE,MID,BID) ;Store transmission data for entry in
"RTN","SCDXFU01",169,0)
 ; TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFU01",170,0)
 ;
"RTN","SCDXFU01",171,0)
 ;Input  : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU01",172,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU01",173,0)
 ;         XMITDATE - FileMan ate/time entry was transmitted to National
"RTN","SCDXFU01",174,0)
 ;                    Patient Care Database (Defaults to NOW)
"RTN","SCDXFU01",175,0)
 ;         MID - Message Control ID used when entry was transmitted
"RTN","SCDXFU01",176,0)
 ;               to National Patient Care Database
"RTN","SCDXFU01",177,0)
 ;         BID - Batch Control ID used when entry was transmitted
"RTN","SCDXFU01",178,0)
 ;               to National Patient Care Database
"RTN","SCDXFU01",179,0)
 ;Output : None
"RTN","SCDXFU01",180,0)
 ;
"RTN","SCDXFU01",181,0)
 ;Check input
"RTN","SCDXFU01",182,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCDXFU01",183,0)
 Q:('$D(^SD(409.73,XMITPTR)))
"RTN","SCDXFU01",184,0)
 S XMITDATE=+$G(XMITDATE)
"RTN","SCDXFU01",185,0)
 S:('XMITDATE) XMITDATE="NOW"
"RTN","SCDXFU01",186,0)
 S MID=$G(MID)
"RTN","SCDXFU01",187,0)
 S BID=$G(BID)
"RTN","SCDXFU01",188,0)
 ;Declare variables
"RTN","SCDXFU01",189,0)
 N DIE,DA,DR,DIDEL,X,Y,DIC
"RTN","SCDXFU01",190,0)
 ;Store transmission data
"RTN","SCDXFU01",191,0)
 S DIE="^SD(409.73,"
"RTN","SCDXFU01",192,0)
 S DA=XMITPTR
"RTN","SCDXFU01",193,0)
 S DR="11///^S X=XMITDATE;12///^S X=MID;13///^S X=BID"
"RTN","SCDXFU01",194,0)
 D ^DIE
"RTN","SCDXFU01",195,0)
 ;Done
"RTN","SCDXFU01",196,0)
 Q
"RTN","SCDXFU01",197,0)
ACKDATA(XMITPTR,ACKDATE,ACKCODE) ;Store acknowledgement data for entry
"RTN","SCDXFU01",198,0)
 ; in TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFU01",199,0)
 ;
"RTN","SCDXFU01",200,0)
 ;Input  : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU01",201,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU01",202,0)
 ;         ACKDATE - FileMan date/time acknowledgement from National
"RTN","SCDXFU01",203,0)
 ;                   Patient Care Database was received (Defaults to NOW)
"RTN","SCDXFU01",204,0)
 ;         ACKCODE - Denotes type of acknowledgement received
"RTN","SCDXFU01",205,0)
 ;                   A = Transmission was accepted (DEFAULT)
"RTN","SCDXFU01",206,0)
 ;                   R = Transmission was rejected
"RTN","SCDXFU01",207,0)
 ;                   E = Error
"RTN","SCDXFU01",208,0)
 ;Output : None
"RTN","SCDXFU01",209,0)
 ;
"RTN","SCDXFU01",210,0)
 ;Check input
"RTN","SCDXFU01",211,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCDXFU01",212,0)
 Q:('$D(^SD(409.73,XMITPTR)))
"RTN","SCDXFU01",213,0)
 S ACKDATE=+$G(ACKDATE)
"RTN","SCDXFU01",214,0)
 S:('ACKDATE) ACKDATE="NOW"
"RTN","SCDXFU01",215,0)
 S ACKCODE=$G(ACKCODE)
"RTN","SCDXFU01",216,0)
 S:("ARE"'[ACKCODE) ACKCODE="A"
"RTN","SCDXFU01",217,0)
 ;Declare variables
"RTN","SCDXFU01",218,0)
 N DIE,DA,DR,DIDEL,X,Y,DIC
"RTN","SCDXFU01",219,0)
 ;Store acknowledgement data
"RTN","SCDXFU01",220,0)
 S DIE="^SD(409.73,"
"RTN","SCDXFU01",221,0)
 S DA=XMITPTR
"RTN","SCDXFU01",222,0)
 S DR="14///^S X=ACKDATE;15////^S X=ACKCODE"
"RTN","SCDXFU01",223,0)
 D ^DIE
"RTN","SCDXFU01",224,0)
 ;Done
"RTN","SCDXFU01",225,0)
 Q
"RTN","SCDXFU02")
0^3^B12986217
"RTN","SCDXFU02",1,0)
SCDXFU02 ;ALB/JRP - AMB CARE FILE UTILITIES;03-MAY-1996
"RTN","SCDXFU02",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXFU02",3,0)
 ;
"RTN","SCDXFU02",4,0)
CRTDEL(ENCDATE,DFN,DELDATE,ENCNODE) ;Create entry in DELETED OUTPATIENT
"RTN","SCDXFU02",5,0)
 ; ENCOUNTER file (#409.74)
"RTN","SCDXFU02",6,0)
 ;
"RTN","SCDXFU02",7,0)
 ;Input  : ENCDATE - Date/time Outpatient Encounter occurred in
"RTN","SCDXFU02",8,0)
 ;                   FileMan format
"RTN","SCDXFU02",9,0)
 ;         DFN - Pointer to entry in PATIENT file (#2) that the
"RTN","SCDXFU02",10,0)
 ;               deleted Outpatient Encounter was for
"RTN","SCDXFU02",11,0)
 ;         DELDATE - FileMan date/time Outpatient Encounter was deleted
"RTN","SCDXFU02",12,0)
 ;                   (Defaults to NOW)
"RTN","SCDXFU02",13,0)
 ;         ENCNODE - Zero node of entry in OUTPATIENT ENCOUNTER file
"RTN","SCDXFU02",14,0)
 ;                   (#409.68) that was deleted
"RTN","SCDXFU02",15,0)
 ;Output : DELPTR - Pointer to entry in DELETED OUTPATIENT ENCOUNTER
"RTN","SCDXFU02",16,0)
 ;                  file (#409.74)
"RTN","SCDXFU02",17,0)
 ;         -1^Error - Unable to create entry / bad input
"RTN","SCDXFU02",18,0)
 ;
"RTN","SCDXFU02",19,0)
 ;Check input
"RTN","SCDXFU02",20,0)
 S ENCDATE=+$G(ENCDATE)
"RTN","SCDXFU02",21,0)
 Q:('ENCDATE) "-1^Did not pass date/time Outpatient Encounter occurred"
"RTN","SCDXFU02",22,0)
 S DFN=+$G(DFN)
"RTN","SCDXFU02",23,0)
 Q:('$D(^DPT(DFN,0))) "-1^Did not pass valid pointer to patient"
"RTN","SCDXFU02",24,0)
 S DELDATE=+$G(DELDATE)
"RTN","SCDXFU02",25,0)
 S:('DELDATE) DELDATE="NOW"
"RTN","SCDXFU02",26,0)
 S ENCNODE=$G(ENCNODE)
"RTN","SCDXFU02",27,0)
 ;Declare variables
"RTN","SCDXFU02",28,0)
 N DIC,DA,DINUM,DLAYGO,DIDEL,DELPTR
"RTN","SCDXFU02",29,0)
 ;Create entry
"RTN","SCDXFU02",30,0)
 S DIC="^SD(409.74,"
"RTN","SCDXFU02",31,0)
 S DIC(0)="L"
"RTN","SCDXFU02",32,0)
 S X=ENCDATE
"RTN","SCDXFU02",33,0)
 S DIC("DR")=".02////^S X=DFN;.03///^S X=DELDATE;11////^S X=ENCNODE"
"RTN","SCDXFU02",34,0)
 S DLAYGO=409.74
"RTN","SCDXFU02",35,0)
 K DD,DO D FILE^DICN
"RTN","SCDXFU02",36,0)
 ;Get pointer to entry
"RTN","SCDXFU02",37,0)
 S DELPTR=+Y
"RTN","SCDXFU02",38,0)
 ;Error creating entry
"RTN","SCDXFU02",39,0)
 S:(DELPTR<0) DELPTR="-1^Unable to create entry in Deleted Outpatient Encounter file"
"RTN","SCDXFU02",40,0)
 ;Done
"RTN","SCDXFU02",41,0)
 Q DELPTR
"RTN","SCDXFU02",42,0)
 ;
"RTN","SCDXFU02",43,0)
PTR4MID(MID) ;Find entry in TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFU02",44,0)
 ; using Message Control ID
"RTN","SCDXFU02",45,0)
 ;
"RTN","SCDXFU02",46,0)
 ;Input  : MID - Message Control ID used when entry was transmitted to
"RTN","SCDXFU02",47,0)
 ;               National Patient Care Database
"RTN","SCDXFU02",48,0)
 ;Output : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU02",49,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU02",50,0)
 ;         0 - Entry in TRANSMITTED OUTPATIENT ENCOUNTER file with
"RTN","SCDXFU02",51,0)
 ;             given Message Control ID could not be found
"RTN","SCDXFU02",52,0)
 ;
"RTN","SCDXFU02",53,0)
 ;Check input
"RTN","SCDXFU02",54,0)
 S MID=$G(MID)
"RTN","SCDXFU02",55,0)
 Q:(MID="") 0
"RTN","SCDXFU02",56,0)
 ;Find entry - done
"RTN","SCDXFU02",57,0)
 Q +$O(^SD(409.73,"AACMID",MID,""))
"RTN","SCDXFU02",58,0)
 ;
"RTN","SCDXFU02",59,0)
PTRS4BID(BID,ARRAY) ;Find all entries in TRANSMITTED OUTPATIENT ENCOUNTER
"RTN","SCDXFU02",60,0)
 ; file (#409.73) with a specified Batch Control ID
"RTN","SCDXFU02",61,0)
 ;
"RTN","SCDXFU02",62,0)
 ;Input  : BID - Batch Control ID used when entries were transmitted
"RTN","SCDXFU02",63,0)
 ;               to National Patient Care Database
"RTN","SCDXFU02",64,0)
 ;         ARRAY - Array to place pointers to TRANSMITTED OUTPATIENT
"RTN","SCDXFU02",65,0)
 ;                 ENCOUNTER file (#409.73) into (Full global reference)
"RTN","SCDXFU02",66,0)
 ;                 (Defaults to ^TMP("AMB-CARE",$J,"BID"))
"RTN","SCDXFU02",67,0)
 ;Output : None
"RTN","SCDXFU02",68,0)
 ;         ARRAY(XMITPTR) - Array of pointers to TRANSMITTED OUTPATIENT
"RTN","SCDXFU02",69,0)
 ;                          ENCOUNTER file (#409.73)
"RTN","SCDXFU02",70,0)
 ;Note   : It is the responsibility of the calling procedure to
"RTN","SCDXFU02",71,0)
 ;         initialize (i.e. KILL) ARRAY
"RTN","SCDXFU02",72,0)
 ;
"RTN","SCDXFU02",73,0)
 ;Check input
"RTN","SCDXFU02",74,0)
 S BID=$G(BID)
"RTN","SCDXFU02",75,0)
 Q:(BID="")
"RTN","SCDXFU02",76,0)
 S ARRAY=$G(ARRAY)
"RTN","SCDXFU02",77,0)
 S:(ARRAY="") ARRAY="^TMP(""AMB-CARE"","_$J_",""BID"")"
"RTN","SCDXFU02",78,0)
 ;Build array of pointers (merge AACBID cross reference into ARRAY)
"RTN","SCDXFU02",79,0)
 M @ARRAY=^SD(409.73,"AACBID",BID)
"RTN","SCDXFU02",80,0)
 Q
"RTN","SCDXFU02",81,0)
 ;
"RTN","SCDXFU02",82,0)
CRTERR(XMITPTR,ERRCODE) ;Create entry in TRANSMITTED OUTPATIENT ENCOUNTER
"RTN","SCDXFU02",83,0)
 ; ERROR file (#409.75)
"RTN","SCDXFU02",84,0)
 ;
"RTN","SCDXFU02",85,0)
 ;Input  : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU02",86,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXFU02",87,0)
 ;         ERRCODE - Error code (external format)
"RTN","SCDXFU02",88,0)
 ;Output : ERRPTR - Pointer to entry in TRANSMITTED OUTPATIENT ENCOUNTER
"RTN","SCDXFU02",89,0)
 ;                  ERROR file (#409.75)
"RTN","SCDXFU02",90,0)
 ;         -1^Error - Unable to create entry / bad input
"RTN","SCDXFU02",91,0)
 ;Notes  : ERRCODE must be a valid entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU02",92,0)
 ;         ENCOUNTER ERROR CODE file (#409.76)
"RTN","SCDXFU02",93,0)
 ;
"RTN","SCDXFU02",94,0)
 ;Check input
"RTN","SCDXFU02",95,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCDXFU02",96,0)
 Q:('$D(^SD(409.73,XMITPTR,0))) "-1^Did not pass valid pointer to Transmitted Outpatient Encounter"
"RTN","SCDXFU02",97,0)
 S ERRCODE=$G(ERRCODE)
"RTN","SCDXFU02",98,0)
 Q:(ERRCODE="") "-1^Did not pass valid error code"
"RTN","SCDXFU02",99,0)
 Q:('$O(^SD(409.76,"B",ERRCODE,""))) "-1^Did not pass valid error code"
"RTN","SCDXFU02",100,0)
 ;Declare variables
"RTN","SCDXFU02",101,0)
 N DIC,DA,DINUM,DLAYGO,X,Y
"RTN","SCDXFU02",102,0)
 ;Create entry
"RTN","SCDXFU02",103,0)
 S DIC="^SD(409.75,"
"RTN","SCDXFU02",104,0)
 S DIC(0)="L"
"RTN","SCDXFU02",105,0)
 S DLAYGO=409.75
"RTN","SCDXFU02",106,0)
 S X=XMITPTR
"RTN","SCDXFU02",107,0)
 S DIC("DR")=".02///^S X=ERRCODE"
"RTN","SCDXFU02",108,0)
 K DD,DO D FILE^DICN
"RTN","SCDXFU02",109,0)
 ;Get pointer to entry
"RTN","SCDXFU02",110,0)
 S ERRPTR=+Y
"RTN","SCDXFU02",111,0)
 ;Error creating entry
"RTN","SCDXFU02",112,0)
 S:(ERRPTR<0) ERRPTR="-1^Unable to create entry in Transmitted Outpatient Encounter Error file"
"RTN","SCDXFU02",113,0)
 ;Done
"RTN","SCDXFU02",114,0)
 Q ERRPTR
"RTN","SCDXFU02",115,0)
 ;
"RTN","SCDXFU02",116,0)
DELERR(ERRPTR) ;Delete entry in TRANSMITTED OUTPATIENT ENCOUNTER ERROR
"RTN","SCDXFU02",117,0)
 ; file (#409.75)
"RTN","SCDXFU02",118,0)
 ;
"RTN","SCDXFU02",119,0)
 ;Input  : ERRPTR - Pointer to entry in TRANSMITTED OUTPATIENT ENCOUNTER
"RTN","SCDXFU02",120,0)
 ;                  ERROR file (#409.75) to delete
"RTN","SCDXFU02",121,0)
 ;Output : 0 - Success
"RTN","SCDXFU02",122,0)
 ;        -1 - Unable to delete entry
"RTN","SCDXFU02",123,0)
 ;Note   : Success (0) is returned when a valid pointer to the
"RTN","SCDXFU02",124,0)
 ;         TRANSMITTED OUTPATIENT ENCOUNTER ERROR file is not passed
"RTN","SCDXFU02",125,0)
 ;         (Deleting an entry that doesn't exist is successful)
"RTN","SCDXFU02",126,0)
 ;
"RTN","SCDXFU02",127,0)
 ;Check input
"RTN","SCDXFU02",128,0)
 S ERRPTR=+$G(ERRPTR)
"RTN","SCDXFU02",129,0)
 Q:('$D(^SD(409.75,ERRPTR,0))) 0
"RTN","SCDXFU02",130,0)
 ;Declare variables
"RTN","SCDXFU02",131,0)
 N DIK,DA,DIE,DR,DIDEL,X,Y,DIC
"RTN","SCDXFU02",132,0)
 ;Delete entry
"RTN","SCDXFU02",133,0)
 S DIK="^SD(409.75,"
"RTN","SCDXFU02",134,0)
 S DA=ERRPTR
"RTN","SCDXFU02",135,0)
 D ^DIK
"RTN","SCDXFU02",136,0)
 ;Make sure entry was deleted - done
"RTN","SCDXFU02",137,0)
 Q:('$D(^SD(409.75,ERRPTR))) 0
"RTN","SCDXFU02",138,0)
 ;Not deleted - attempt to delete using DIE
"RTN","SCDXFU02",139,0)
 S DIE="^SD(409.75,"
"RTN","SCDXFU02",140,0)
 S DA=ERRPTR
"RTN","SCDXFU02",141,0)
 S DR=".01///@"
"RTN","SCDXFU02",142,0)
 S DIDEL=409.75
"RTN","SCDXFU02",143,0)
 D ^DIE
"RTN","SCDXFU02",144,0)
 ;Make sure entry was deleted - done
"RTN","SCDXFU02",145,0)
 Q:('$D(^SD(409.75,ERRPTR))) 0
"RTN","SCDXFU02",146,0)
 ;Entry couldn't be deleted - return error
"RTN","SCDXFU02",147,0)
 Q -1
"RTN","SCDXFU02",148,0)
DELAERR(XMITPTR) ;Delete all entries in TRANSMITTED OUTPATIENT ENCOUNTER
"RTN","SCDXFU02",149,0)
 ; ERROR file (#409.75) for a Transmitted Outpatient Encounter
"RTN","SCDXFU02",150,0)
 ;
"RTN","SCDXFU02",151,0)
 ;Input  : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXFU02",152,0)
 ;                   ENCOUNTER file (#409.73) to delete errors for
"RTN","SCDXFU02",153,0)
 ;Output : None
"RTN","SCDXFU02",154,0)
 ;
"RTN","SCDXFU02",155,0)
 ;Check input
"RTN","SCDXFU02",156,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCDXFU02",157,0)
 ;Declare variables
"RTN","SCDXFU02",158,0)
 N ERRPTR,TMP
"RTN","SCDXFU02",159,0)
 ;Find all entries in Transmitted Outpatient Encounter Error file that
"RTN","SCDXFU02",160,0)
 ; point to the Transmitted Outpatient Encounter and delete
"RTN","SCDXFU02",161,0)
 S ERRPTR=""
"RTN","SCDXFU02",162,0)
 F  S ERRPTR=+$O(^SD(409.75,"B",XMITPTR,ERRPTR)) Q:('ERRPTR)  S TMP=$$DELERR(ERRPTR)
"RTN","SCDXFU02",163,0)
 ;Done
"RTN","SCDXFU02",164,0)
 Q
"RTN","SCDXFU03")
0^74^B1399899
"RTN","SCDXFU03",1,0)
SCDXFU03 ;ALB/JRP - AMBULATORY CARE FILE UTILITIES;01-JUL-1996
"RTN","SCDXFU03",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXFU03",3,0)
 ;
"RTN","SCDXFU03",4,0)
DELXMIT(PTR,PTR2) ;Delete entry in TRANSMITTED OUTPATIENT ENCOUNTER
"RTN","SCDXFU03",5,0)
 ; file (#409.73)
"RTN","SCDXFU03",6,0)
 ;
"RTN","SCDXFU03",7,0)
 ;Input  : PTR - Pointer to entry in one of the following files
"RTN","SCDXFU03",8,0)
 ;               *  TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFU03",9,0)
 ;               *  OUTPATIENT ENCOUNTER file (#409.68)
"RTN","SCDXFU03",10,0)
 ;               *  DELETED OUTPATIENT ENCOUNTER file (#409.74)
"RTN","SCDXFU03",11,0)
 ;         PTR2 - Denotes which file PTR points to
"RTN","SCDXFU03",12,0)
 ;                0 = TRANSMITTED OUTPATIENT ENCOUNTER file (Default)
"RTN","SCDXFU03",13,0)
 ;                1 = OUTPATIENT ENCOUNTER file
"RTN","SCDXFU03",14,0)
 ;                2 = DELETED OUTPATIENT ENCOUNTER file
"RTN","SCDXFU03",15,0)
 ;Output : 0 - Success
"RTN","SCDXFU03",16,0)
 ;        -1 - Unable to delete entry
"RTN","SCDXFU03",17,0)
 ;Note   : Success (0) is returned when a valid pointer to the
"RTN","SCDXFU03",18,0)
 ;         specified file is not passed or an entry in the
"RTN","SCDXFU03",19,0)
 ;         TRANSMITTED OUTPATIENT ENCOUNTER file can not be found
"RTN","SCDXFU03",20,0)
 ;         (Deleting an entry that doesn't exist is successful)
"RTN","SCDXFU03",21,0)
 ;
"RTN","SCDXFU03",22,0)
 ;Check input
"RTN","SCDXFU03",23,0)
 S PTR=+$G(PTR)
"RTN","SCDXFU03",24,0)
 S PTR2=+$G(PTR2)
"RTN","SCDXFU03",25,0)
 S:((PTR2<0)!(PTR2>2)) PTR2=0
"RTN","SCDXFU03",26,0)
 ;Declare variables
"RTN","SCDXFU03",27,0)
 N DIK,DA,DIE,DR,DIDEL,X,Y,DIC,XMITPTR
"RTN","SCDXFU03",28,0)
 ;Get pointer to TRANSMITTED OUTPATIENT ENCOUNTER file
"RTN","SCDXFU03",29,0)
 S XMITPTR=PTR
"RTN","SCDXFU03",30,0)
 S:(PTR2=1) XMITPTR=+$O(^SD(409.73,"AENC",PTR,0))
"RTN","SCDXFU03",31,0)
 S:(PTR2=2) XMITPTR=+$O(^SD(409.73,"ADEL",PTR,0))
"RTN","SCDXFU03",32,0)
 ;Entry in TRANSMITTED OUTPATIENT ENCOUNTER file doesn't exist - success
"RTN","SCDXFU03",33,0)
 Q:('$D(^SD(409.73,XMITPTR,0))) 0
"RTN","SCDXFU03",34,0)
 ;Delete all entries in TRANSMITTED OUTPATIENT ENCOUNTER ERROR file
"RTN","SCDXFU03",35,0)
 ; (#409.75) that refer to entry being deleted
"RTN","SCDXFU03",36,0)
 D DELAERR^SCDXFU02(XMITPTR)
"RTN","SCDXFU03",37,0)
 ;Delete entry
"RTN","SCDXFU03",38,0)
 S DIK="^SD(409.73,"
"RTN","SCDXFU03",39,0)
 S DA=XMITPTR
"RTN","SCDXFU03",40,0)
 D ^DIK
"RTN","SCDXFU03",41,0)
 ;Make sure entry was deleted - done
"RTN","SCDXFU03",42,0)
 Q:('$D(^SD(409.73,XMITPTR))) 0
"RTN","SCDXFU03",43,0)
 ;Not deleted - attempt to delete using DIE
"RTN","SCDXFU03",44,0)
 S DIE="^SD(409.73,"
"RTN","SCDXFU03",45,0)
 S DA=XMITPTR
"RTN","SCDXFU03",46,0)
 S DR=".01///@"
"RTN","SCDXFU03",47,0)
 S DIDEL=409.73
"RTN","SCDXFU03",48,0)
 D ^DIE
"RTN","SCDXFU03",49,0)
 ;Make sure entry was deleted - done
"RTN","SCDXFU03",50,0)
 Q:('$D(^SD(409.73,XMITPTR))) 0
"RTN","SCDXFU03",51,0)
 ;Entry couldn't be deleted - return error
"RTN","SCDXFU03",52,0)
 Q -1
"RTN","SCDXFX01")
0^4^B5115837
"RTN","SCDXFX01",1,0)
SCDXFX01 ;ALB/JRP - AMBULATORY CARE FILE X-REFS & UTILS;30-APR-1996
"RTN","SCDXFX01",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXFX01",3,0)
 ;
"RTN","SCDXFX01",4,0)
AACXMIT(IFN,SET,OLDDATE) ;Logic for AACXMIT* cross references of
"RTN","SCDXFX01",5,0)
 ; TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFX01",6,0)
 ;
"RTN","SCDXFX01",7,0)
 ;Input  : IFN - Pointer to entry in file
"RTN","SCDXFX01",8,0)
 ;         SET - If 1, set cross reference
"RTN","SCDXFX01",9,0)
 ;               If 0, kill cross reference
"RTN","SCDXFX01",10,0)
 ;               If -1, check the current value of TRANSMISSION
"RTN","SCDXFX01",11,0)
 ;                 REQUIRED field (#.04), setting the cross reference
"RTN","SCDXFX01",12,0)
 ;                 if a value of 'YES' is found and killing the
"RTN","SCDXFX01",13,0)
 ;                 cross reference if a value of 'NO' is found
"RTN","SCDXFX01",14,0)
 ;                 (DEFAULT)
"RTN","SCDXFX01",15,0)
 ;         OLDDATE - Previous value of DATE/TIME OF EVENT field (#.06)
"RTN","SCDXFX01",16,0)
 ;                 - Only valid when KILLing the x-ref is due to the
"RTN","SCDXFX01",17,0)
 ;                   DATE/TIME OF EVENT field (#.06) changing
"RTN","SCDXFX01",18,0)
 ;Output : None
"RTN","SCDXFX01",19,0)
 ;
"RTN","SCDXFX01",20,0)
 ;Check input
"RTN","SCDXFX01",21,0)
 Q:('$G(IFN))
"RTN","SCDXFX01",22,0)
 Q:('$D(^SD(409.73,IFN)))
"RTN","SCDXFX01",23,0)
 S:($G(SET)="") SET=-1
"RTN","SCDXFX01",24,0)
 S OLDDATE=+$G(OLDDATE)
"RTN","SCDXFX01",25,0)
 ;Declare variables
"RTN","SCDXFX01",26,0)
 N ZERO,EVENT,EVNTDATE,XMIT
"RTN","SCDXFX01",27,0)
 ;Get zero node
"RTN","SCDXFX01",28,0)
 S ZERO=$G(^SD(409.73,IFN,0))
"RTN","SCDXFX01",29,0)
 ;Get value of TRANSMISSION REQUIRED field
"RTN","SCDXFX01",30,0)
 S XMIT=+$P(ZERO,"^",4)
"RTN","SCDXFX01",31,0)
 ;Set/kill logic based on value of TRANSMISSION REQUIRED
"RTN","SCDXFX01",32,0)
 S:(SET=-1) SET=$S(XMIT=1:1,1:0)
"RTN","SCDXFX01",33,0)
 ;Get event date/time
"RTN","SCDXFX01",34,0)
 S EVNTDATE=+$P(ZERO,"^",6)
"RTN","SCDXFX01",35,0)
 ;Use old event date/time if killing due to this value changing
"RTN","SCDXFX01",36,0)
 S:(('SET)&(OLDDATE)) EVNTDATE=OLDDATE
"RTN","SCDXFX01",37,0)
 ;No event date/time - don't set x-ref
"RTN","SCDXFX01",38,0)
 Q:('EVNTDATE)
"RTN","SCDXFX01",39,0)
 ;Setting of x-ref is screened so x-ref is only set on add, edit,
"RTN","SCDXFX01",40,0)
 ; delete, and retransmit events
"RTN","SCDXFX01",41,0)
 S EVENT=+$P(ZERO,"^",5)
"RTN","SCDXFX01",42,0)
 I (SET) Q:((EVENT>3)!(EVENT<0))  S ^SD(409.73,"AACXMIT",EVNTDATE,IFN)=""
"RTN","SCDXFX01",43,0)
 ;Kill x-ref
"RTN","SCDXFX01",44,0)
 K:('SET) ^SD(409.73,"AACXMIT",EVNTDATE,IFN)
"RTN","SCDXFX01",45,0)
 Q
"RTN","SCDXFX01",46,0)
 ;
"RTN","SCDXFX01",47,0)
AACNA(IFN,SET,OLDDATE) ;Logic for AACNA* cross references of TRANSMITTED
"RTN","SCDXFX01",48,0)
 ; OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFX01",49,0)
 ;
"RTN","SCDXFX01",50,0)
 ;Input  : IFN - Pointer to entry in file
"RTN","SCDXFX01",51,0)
 ;         SET - If 1, set cross reference
"RTN","SCDXFX01",52,0)
 ;               If 0, kill cross reference (DEFAULT)
"RTN","SCDXFX01",53,0)
 ;         OLDDATE - Previous value of DATE/TIME OF XMIT TO NPCDB
"RTN","SCDXFX01",54,0)
 ;                   field (#11)
"RTN","SCDXFX01",55,0)
 ;                 - Only valid when KILLing the x-ref is due to the
"RTN","SCDXFX01",56,0)
 ;                   DATE/TIME OF XMIT TO NPCDB field (#11) changing
"RTN","SCDXFX01",57,0)
 ;Output : None
"RTN","SCDXFX01",58,0)
 ;
"RTN","SCDXFX01",59,0)
 ;Check input
"RTN","SCDXFX01",60,0)
 Q:('$G(IFN))
"RTN","SCDXFX01",61,0)
 Q:('$D(^SD(409.73,IFN)))
"RTN","SCDXFX01",62,0)
 S SET=+$G(SET)
"RTN","SCDXFX01",63,0)
 S OLDDATE=+$G(OLDDATE)
"RTN","SCDXFX01",64,0)
 ;Declare variables
"RTN","SCDXFX01",65,0)
 N NODE,XMITDATE
"RTN","SCDXFX01",66,0)
 ;Get node
"RTN","SCDXFX01",67,0)
 S NODE=$G(^SD(409.73,IFN,1))
"RTN","SCDXFX01",68,0)
 ;Get date/time of transmission
"RTN","SCDXFX01",69,0)
 S XMITDATE=+$P(NODE,"^",1)
"RTN","SCDXFX01",70,0)
 ;Use old date/time of transmission if this changed
"RTN","SCDXFX01",71,0)
 S:(('SET)&(OLDDATE)) XMITDATE=OLDDATE
"RTN","SCDXFX01",72,0)
 ;No transmission date/time - don't set x-ref
"RTN","SCDXFX01",73,0)
 Q:('XMITDATE)
"RTN","SCDXFX01",74,0)
 ;Set x-ref
"RTN","SCDXFX01",75,0)
 S:(SET) ^SD(409.73,"AACNOACK",XMITDATE,IFN)=""
"RTN","SCDXFX01",76,0)
 ;Kill x-ref
"RTN","SCDXFX01",77,0)
 K:('SET) ^SD(409.73,"AACNOACK",XMITDATE,IFN)
"RTN","SCDXFX01",78,0)
 Q
"RTN","SCDXFX01",79,0)
 ;
"RTN","SCDXFX01",80,0)
AUTO() ;Auto-numbering logic for TRANSMITTED OUTPATIENT ENCOUNTER file
"RTN","SCDXFX01",81,0)
 ;
"RTN","SCDXFX01",82,0)
 ;Input  : None
"RTN","SCDXFX01",83,0)
 ;Output : N - Next value to use for NUMBER field (#.01) of
"RTN","SCDXFX01",84,0)
 ;             TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXFX01",85,0)
 ;Note   : Auto-numbering logic is based on the LAST XMIT OUTPAT
"RTN","SCDXFX01",86,0)
 ;         ENC NUMBER field (#701.01) of the SCHEDULING PARAMETER
"RTN","SCDXFX01",87,0)
 ;         file (#404.91)
"RTN","SCDXFX01",88,0)
 ;
"RTN","SCDXFX01",89,0)
 ;Declare variables
"RTN","SCDXFX01",90,0)
 N NEXT,TRIES,SUCCESS
"RTN","SCDXFX01",91,0)
 ;Lock node to prevent simultaneous use
"RTN","SCDXFX01",92,0)
 S SUCCESS=0 F TRIES=1:1:10 L +^SD(404.91,1,"AMB"):3 S:($T) SUCCESS=1 Q:(SUCCESS)
"RTN","SCDXFX01",93,0)
 ;Couldn't lock node - quit
"RTN","SCDXFX01",94,0)
 Q:('SUCCESS) 0
"RTN","SCDXFX01",95,0)
 ;Get last value used and increment by 1
"RTN","SCDXFX01",96,0)
 S NEXT=1+$G(^SD(404.91,1,"AMB"))
"RTN","SCDXFX01",97,0)
 ;Make sure value hasn't already been used
"RTN","SCDXFX01",98,0)
 I $D(^SD(409.73,"B",NEXT)) F NEXT=NEXT:1 Q:('$D(^SD(409.73,"B",NEXT)))
"RTN","SCDXFX01",99,0)
 ;Store new value
"RTN","SCDXFX01",100,0)
 S $P(^SD(404.91,1,"AMB"),"^",1)=NEXT
"RTN","SCDXFX01",101,0)
 ;Unlock node
"RTN","SCDXFX01",102,0)
 L -^SD(404.91,1,"AMB")
"RTN","SCDXFX01",103,0)
 ;Return value to use
"RTN","SCDXFX01",104,0)
 Q NEXT
"RTN","SCDXHLDR")
0^5^B8611673
"RTN","SCDXHLDR",1,0)
SCDXHLDR ;ALB/JLU;Ambulatory care event handler;4/30/96
"RTN","SCDXHLDR",2,0)
 ;;5.3;Scheduling;**44**;5/1/96
"RTN","SCDXHLDR",3,0)
 ;This routine is the Ambulatory care event handler.  It will hang on 
"RTN","SCDXHLDR",4,0)
 ;the Scheduling event driver and monitor the types of events.  When a
"RTN","SCDXHLDR",5,0)
 ;check out, edit to a check out or deletion of a check out occurs this
"RTN","SCDXHLDR",6,0)
 ;routine will update the Transmitted outpatient encounter file.
"RTN","SCDXHLDR",7,0)
 ;
"RTN","SCDXHLDR",8,0)
EN ;Main entry point
"RTN","SCDXHLDR",9,0)
 ;
"RTN","SCDXHLDR",10,0)
 I '$D(SDAMEVT) G ENQ
"RTN","SCDXHLDR",11,0)
 I SDAMEVT'>4!SDAMEVT>9 G ENQ ;check out, add/edit and add/edit change
"RTN","SCDXHLDR",12,0)
 N SDOE,SDPROC,SDBEFORE,SDAFTER,EVTDT
"RTN","SCDXHLDR",13,0)
 S SDPROC=0
"RTN","SCDXHLDR",14,0)
 F  S SDPROC=$O(^TMP("SDEVT",$J,SDHDL,SDPROC)) Q:'SDPROC  I SDPROC'=4 DO
"RTN","SCDXHLDR",15,0)
 .S SDOE=0
"RTN","SCDXHLDR",16,0)
 .F  S SDOE=$O(^TMP("SDEVT",$J,SDHDL,SDPROC,"SDOE",SDOE)) Q:'SDOE  DO
"RTN","SCDXHLDR",17,0)
 ..D NOW^%DTC S EVTDT=%
"RTN","SCDXHLDR",18,0)
 ..S SDAFTER=$G(^TMP("SDEVT",$J,SDHDL,SDPROC,"SDOE",SDOE,0,"AFTER"))
"RTN","SCDXHLDR",19,0)
 ..S SDBEFORE=$G(^("BEFORE")) ;naked reference from previous line
"RTN","SCDXHLDR",20,0)
 ..;
"RTN","SCDXHLDR",21,0)
 ..I SDAFTER]"" Q:$$NONCNT($P(SDAFTER,U,4))
"RTN","SCDXHLDR",22,0)
 ..I SDBEFORE]"" Q:$$NONCNT($P(SDBEFORE,U,4))
"RTN","SCDXHLDR",23,0)
 ..I SDAFTER]"",SDBEFORE]"",SDAFTER'=SDBEFORE,'$$COMPL(SDAFTER) D LOAD("DELETE",SDOE,EVTDT,SDBEFORE) Q  ;DELETION OF A CHECK OUT
"RTN","SCDXHLDR",24,0)
 ..I SDBEFORE]"",SDAFTER']"" D LOAD("DELETE",SDOE,EVTDT,SDBEFORE) Q  ;delete under
"RTN","SCDXHLDR",25,0)
 ..;
"RTN","SCDXHLDR",26,0)
 ..I '$S(SDAFTER]"":$$COMPL(SDAFTER),SDBEFORE]"":$$COMPL(SDBEFORE),1:0) Q
"RTN","SCDXHLDR",27,0)
 ..;
"RTN","SCDXHLDR",28,0)
 ..I SDBEFORE]"",SDAFTER]"" D LOAD("EDIT",SDOE,EVTDT) ;edit of C/O
"RTN","SCDXHLDR",29,0)
 ..I SDBEFORE']"",SDAFTER]"" D LOAD("ADD",SDOE,EVTDT) ;new encounter at C/O
"RTN","SCDXHLDR",30,0)
 ..I SDBEFORE]"",SDAFTER']"",SDPROC=2 D LOAD("EDIT",SDOE,EVTDT,SDBEFORE) Q  ;delete of add/edit
"RTN","SCDXHLDR",31,0)
 ..;;;I SDBEFORE]"",SDAFTER']"" D LOAD("DELETE",SDOE,EVTDT,SDBEFORE) ;delete
"RTN","SCDXHLDR",32,0)
 ..Q
"RTN","SCDXHLDR",33,0)
 .Q
"RTN","SCDXHLDR",34,0)
 ;
"RTN","SCDXHLDR",35,0)
ENQ ;
"RTN","SCDXHLDR",36,0)
 Q
"RTN","SCDXHLDR",37,0)
 ;
"RTN","SCDXHLDR",38,0)
NONCNT(IEN) ;this function determines if the clinic is non count or not
"RTN","SCDXHLDR",39,0)
 ;INPUT IEN the poitner to the hospital location.
"RTN","SCDXHLDR",40,0)
 ;OUTPUT 1 if a non count
"RTN","SCDXHLDR",41,0)
 ;       0 if not a non count
"RTN","SCDXHLDR",42,0)
 I '$D(IEN) S ANS=0 G NONCNTQ
"RTN","SCDXHLDR",43,0)
 I 'IEN S ANS=0 G NONCNTQ
"RTN","SCDXHLDR",44,0)
 S ANS=$S($P(^SC(IEN,0),U,17)="Y":1,1:0)
"RTN","SCDXHLDR",45,0)
NONCNTQ Q ANS
"RTN","SCDXHLDR",46,0)
 ;
"RTN","SCDXHLDR",47,0)
COMPL(NODE) ;this function call returns whether or not the check out
"RTN","SCDXHLDR",48,0)
 ;process is complete or not.  1 for complete  0 for not
"RTN","SCDXHLDR",49,0)
 ;
"RTN","SCDXHLDR",50,0)
 Q $S(+$P(NODE,U,7):1,1:0)
"RTN","SCDXHLDR",51,0)
 ;
"RTN","SCDXHLDR",52,0)
LOAD(ACTION,IEN,EVTDT,NODE) ;
"RTN","SCDXHLDR",53,0)
 ;ACTION is what type of action caused this event
"RTN","SCDXHLDR",54,0)
 ;IEN is the pointer to the outpatient encounter file
"RTN","SCDXHLDR",55,0)
 ;EVTDT is the date this action occured
"RTN","SCDXHLDR",56,0)
 ;NODE is the zero node of the outpatient encounter file
"RTN","SCDXHLDR",57,0)
 ;
"RTN","SCDXHLDR",58,0)
 N EVNT,XMIT,PAR
"RTN","SCDXHLDR",59,0)
 ;
"RTN","SCDXHLDR",60,0)
 I ACTION'="DELETE" DO
"RTN","SCDXHLDR",61,0)
 .I $D(^SCE(IEN,0)) S PAR=$P(^SCE(IEN,0),U,6)
"RTN","SCDXHLDR",62,0)
 .E  S PAR=$P(NODE,U,6)
"RTN","SCDXHLDR",63,0)
 .S IEN=$S(+PAR:PAR,1:IEN)
"RTN","SCDXHLDR",64,0)
 .S EVNT=$S(ACTION="ADD":1,1:2)
"RTN","SCDXHLDR",65,0)
 .S XMIT=$$FINDXMIT^SCDXFU01(IEN)
"RTN","SCDXHLDR",66,0)
 .I 'XMIT S XMIT=$$CRTXMIT^SCDXFU01(IEN,"",EVTDT)
"RTN","SCDXHLDR",67,0)
 .I +XMIT>0 D STREEVNT^SCDXFU01(XMIT,EVNT,EVTDT),XMITFLAG^SCDXFU01(XMIT,0)
"RTN","SCDXHLDR",68,0)
 .Q
"RTN","SCDXHLDR",69,0)
 ;
"RTN","SCDXHLDR",70,0)
 I ACTION="DELETE" DO
"RTN","SCDXHLDR",71,0)
 .N DELENT,TRANENT,DELENCT,PAR
"RTN","SCDXHLDR",72,0)
 .S PAR=$P(NODE,U,6)
"RTN","SCDXHLDR",73,0)
 .S IEN=$S(+PAR:PAR,1:IEN)
"RTN","SCDXHLDR",74,0)
 .S XMIT=$$CRTDEL^SCDXFU02($P(NODE,U,1),$P(NODE,U,2),EVTDT,NODE)
"RTN","SCDXHLDR",75,0)
 .Q:'XMIT
"RTN","SCDXHLDR",76,0)
 .S XMIT=$$CRTXMIT^SCDXFU01(IEN,XMIT,EVTDT)
"RTN","SCDXHLDR",77,0)
 .Q:'XMIT
"RTN","SCDXHLDR",78,0)
 .D XMITFLAG^SCDXFU01(XMIT,0)
"RTN","SCDXHLDR",79,0)
 .Q
"RTN","SCDXHLDR",80,0)
 Q
"RTN","SCDXMSG")
0^6^B24645758
"RTN","SCDXMSG",1,0)
SCDXMSG ;ALB/JRP - AMB CARE TRANSMISSION BUILDER;06-MAY-1996
"RTN","SCDXMSG",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXMSG",3,0)
 ;
"RTN","SCDXMSG",4,0)
SNDZ00 ;Main entry point for the sending of ADT-Z00 batch messages to
"RTN","SCDXMSG",5,0)
 ; the National Patient Care Database
"RTN","SCDXMSG",6,0)
 ;
"RTN","SCDXMSG",7,0)
 ;Input  : None
"RTN","SCDXMSG",8,0)
 ;Output : None
"RTN","SCDXMSG",9,0)
 ;
"RTN","SCDXMSG",10,0)
 ;Declare variables
"RTN","SCDXMSG",11,0)
 N X,X1,X2,%H
"RTN","SCDXMSG",12,0)
 N XMITPTR,NOACKBY,XMITDATE,EVNTDATE,MAXBATCH,MAXLINE,BATCHCNT
"RTN","SCDXMSG",13,0)
 N LINECNT,MSHLINE,XMITLIST,XMITERR,HL7XMIT,ERROR
"RTN","SCDXMSG",14,0)
 N HLEID,HL,HLECH,HLFS,HLQ,HLMID,HLMTIEN,HLDT,HLDT1,MSGID,HLRESLT,HLP
"RTN","SCDXMSG",15,0)
 ;Set message count limit for batch message
"RTN","SCDXMSG",16,0)
 S MAXBATCH=100
"RTN","SCDXMSG",17,0)
 ;Set line count limit for batch message
"RTN","SCDXMSG",18,0)
 S MAXLINE=100000
"RTN","SCDXMSG",19,0)
 ;Initialize global locations
"RTN","SCDXMSG",20,0)
 S XMITERR="^TMP(""SCDX-XMIT-BLD"","_$J_",""ERRORS"")"
"RTN","SCDXMSG",21,0)
 S HL7XMIT="^TMP(""HLS"","_$J_")"
"RTN","SCDXMSG",22,0)
 K @XMITERR,@HL7XMIT
"RTN","SCDXMSG",23,0)
 ;Get lag time for acks from NPCDB (default to 2 days)
"RTN","SCDXMSG",24,0)
 S NOACKBY=+$P($G(^SD(404.91,1,"AMB")),"^",4)
"RTN","SCDXMSG",25,0)
 S:('NOACKBY) NOACKBY=2
"RTN","SCDXMSG",26,0)
 ;Determine T-LAG @ 11:59:59 PM
"RTN","SCDXMSG",27,0)
 S X1=DT
"RTN","SCDXMSG",28,0)
 S X2=0-NOACKBY
"RTN","SCDXMSG",29,0)
 D C^%DTC
"RTN","SCDXMSG",30,0)
 S NOACKBY=X_".235959"
"RTN","SCDXMSG",31,0)
 ;Flag transmissions that haven't been acked by T-2 for retransmission
"RTN","SCDXMSG",32,0)
 S XMITDATE=""
"RTN","SCDXMSG",33,0)
 F  S XMITDATE=+$O(^SD(409.73,"AACNOACK",XMITDATE)) Q:(('XMITDATE)!(XMITDATE>NOACKBY))  D
"RTN","SCDXMSG",34,0)
 .S XMITPTR=""
"RTN","SCDXMSG",35,0)
 .F  S XMITPTR=+$O(^SD(409.73,"AACNOACK",XMITDATE,XMITPTR)) Q:('XMITPTR)  D
"RTN","SCDXMSG",36,0)
 ..;Mark entry with retransmit event
"RTN","SCDXMSG",37,0)
 ..D STREEVNT^SCDXFU01(XMITPTR,0)
"RTN","SCDXMSG",38,0)
 ..;Turn transmission flag on
"RTN","SCDXMSG",39,0)
 ..D XMITFLAG^SCDXFU01(XMITPTR)
"RTN","SCDXMSG",40,0)
 ;Get pointer to sending event
"RTN","SCDXMSG",41,0)
 S HLEID=+$O(^ORD(101,"B","SCDX AMBCARE SEND SERVER FOR ADT-Z00",0))
"RTN","SCDXMSG",42,0)
 ;Sending event not found - send error bulletin - done
"RTN","SCDXMSG",43,0)
 I ('HLEID) D ERRBULL^SCDXMSG2("Unable to initialize HL7 variables - protocol not found") Q
"RTN","SCDXMSG",44,0)
 ;Initialze HL7 variables
"RTN","SCDXMSG",45,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","SCDXMSG",46,0)
 ;Unable to initialize HL7 variables - send error bulletin - done
"RTN","SCDXMSG",47,0)
 I ($O(HL(""))="") D ERRBULL^SCDXMSG2($P(HL,"^",2)) Q
"RTN","SCDXMSG",48,0)
 ;Create batch message
"RTN","SCDXMSG",49,0)
 D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","SCDXMSG",50,0)
 ;Unable to create batch message - send error bulletin - done
"RTN","SCDXMSG",51,0)
 I ('HLMTIEN) D ERRBULL^SCDXMSG2("Unable to create batch HL7 message") Q
"RTN","SCDXMSG",52,0)
 ;Initialize message count
"RTN","SCDXMSG",53,0)
 S BATCHCNT=0
"RTN","SCDXMSG",54,0)
 ;Initialize line count
"RTN","SCDXMSG",55,0)
 S LINECNT=1
"RTN","SCDXMSG",56,0)
 ;Loop through list of [deleted] encounters requiring transmission
"RTN","SCDXMSG",57,0)
 S EVNTDATE=""
"RTN","SCDXMSG",58,0)
 F  S EVNTDATE=+$O(^SD(409.73,"AACXMIT",EVNTDATE)) Q:('EVNTDATE)  D
"RTN","SCDXMSG",59,0)
 .S XMITPTR=""
"RTN","SCDXMSG",60,0)
 .F  S XMITPTR=+$O(^SD(409.73,"AACXMIT",EVNTDATE,XMITPTR)) Q:('XMITPTR)  D
"RTN","SCDXMSG",61,0)
 ..;Bad entry in cross reference - delete cross reference and quit
"RTN","SCDXMSG",62,0)
 ..I ('$D(^SD(409.73,XMITPTR))) K ^SD(409.73,"AACXMIT",EVNTDATE,XMITPTR) Q
"RTN","SCDXMSG",63,0)
 ..;Make sure entry points to an existing encounter - delete entry
"RTN","SCDXMSG",64,0)
 ..; and quit if it doesn't
"RTN","SCDXMSG",65,0)
 ..S X=^SD(409.73,XMITPTR,0)
"RTN","SCDXMSG",66,0)
 ..S X1=+$P(X,"^",2)
"RTN","SCDXMSG",67,0)
 ..S X2=+$P(X,"^",3)
"RTN","SCDXMSG",68,0)
 ..I (((X1)&('$D(^SCE(X1))))!((X2)&('$D(^SD(409.74,X2))))) S ERROR=$$DELXMIT^SCDXFU03(XMITPTR) Q
"RTN","SCDXMSG",69,0)
 ..;If inpatient appointment, delete entry and quit
"RTN","SCDXMSG",70,0)
 ..I ($$INPATENC^SCDXUTL(XMITPTR)) S ERROR=$$DELXMIT^SCDXFU03(XMITPTR) Q
"RTN","SCDXMSG",71,0)
 ..;Calculate message control ID
"RTN","SCDXMSG",72,0)
 ..S MSGID=HLMID_"-"_((BATCHCNT#MAXBATCH)+1)
"RTN","SCDXMSG",73,0)
 ..;Put [deleted] encounter into transmission
"RTN","SCDXMSG",74,0)
 ..S ERROR=$$BUILDHL7^SCDXMSG0(XMITPTR,.HL,MSGID,HL7XMIT,LINECNT)
"RTN","SCDXMSG",75,0)
 ..;[Deleted] encounter not added to transmission
"RTN","SCDXMSG",76,0)
 ..I (ERROR<0) D  Q
"RTN","SCDXMSG",77,0)
 ...;Add [deleted] encounter to transmission error list
"RTN","SCDXMSG",78,0)
 ...S @XMITERR@(XMITPTR)=$P(ERROR,"^",2)
"RTN","SCDXMSG",79,0)
 ..;Increment line count
"RTN","SCDXMSG",80,0)
 ..S LINECNT=LINECNT+ERROR
"RTN","SCDXMSG",81,0)
 ..;Increment message count
"RTN","SCDXMSG",82,0)
 ..S BATCHCNT=BATCHCNT+1
"RTN","SCDXMSG",83,0)
 ..;Update transmission info for [deleted] encounter
"RTN","SCDXMSG",84,0)
 ..D XMITDATA^SCDXFU01(XMITPTR,HLDT,MSGID,HLMID)
"RTN","SCDXMSG",85,0)
 ..;Turn off transmission flag for [deleted] encounter
"RTN","SCDXMSG",86,0)
 ..D XMITFLAG^SCDXFU01(XMITPTR,1)
"RTN","SCDXMSG",87,0)
 ..;Delete all errors previously reported for [deleted] encounter
"RTN","SCDXMSG",88,0)
 ..D DELAERR^SCDXFU02(XMITPTR)
"RTN","SCDXMSG",89,0)
 ..;Reached max size for batch
"RTN","SCDXMSG",90,0)
 ..I (('(BATCHCNT#MAXBATCH))!(LINECNT>MAXLINE)) D
"RTN","SCDXMSG",91,0)
 ...;Send batch message - immediate priority
"RTN","SCDXMSG",92,0)
 ...S HLP("PRIORITY")="I"
"RTN","SCDXMSG",93,0)
 ...D GENERATE^HLMA(HLEID,"GB",1,HLMTIEN,.HLRESLT,.HLP)
"RTN","SCDXMSG",94,0)
 ...;Re-initialize HL7 message
"RTN","SCDXMSG",95,0)
 ...K @HL7XMIT
"RTN","SCDXMSG",96,0)
 ...;Re-initialize HL7 variables
"RTN","SCDXMSG",97,0)
 ...K HL,HLRESLT,HLP,HLMID,HLMTIEN,HLDT,HLDT1
"RTN","SCDXMSG",98,0)
 ...S HLEID=+$O(^ORD(101,"B","SCDX AMBCARE SEND SERVER FOR ADT-Z00",0))
"RTN","SCDXMSG",99,0)
 ...D INIT^HLFNC2(HLEID,.HL)
"RTN","SCDXMSG",100,0)
 ...;Create new batch message
"RTN","SCDXMSG",101,0)
 ...D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","SCDXMSG",102,0)
 ...;Re-initialize line count
"RTN","SCDXMSG",103,0)
 ...S LINECNT=1
"RTN","SCDXMSG",104,0)
 ;Check for unsent batch message
"RTN","SCDXMSG",105,0)
 I ($O(@HL7XMIT@(0))) D
"RTN","SCDXMSG",106,0)
 .;Send batch message - immediate priority
"RTN","SCDXMSG",107,0)
 .S HLP("PRIORITY")="I"
"RTN","SCDXMSG",108,0)
 .D GENERATE^HLMA(HLEID,"GB",1,HLMTIEN,.HLRESLT,.HLP)
"RTN","SCDXMSG",109,0)
 ;Send completion bulletin
"RTN","SCDXMSG",110,0)
 D CMPLBULL^SCDXMSG2(BATCHCNT,XMITERR)
"RTN","SCDXMSG",111,0)
 ;Clean up global arrays used
"RTN","SCDXMSG",112,0)
 K @XMITERR,@HL7XMIT
"RTN","SCDXMSG",113,0)
 ;Determine if updating of Hospital Location file hasn't completed AND
"RTN","SCDXMSG",114,0)
 ; if today is past the OPC to HL7 cut over date
"RTN","SCDXMSG",115,0)
 I ('$P($G(^SD(404.91,1,"AMB")),"^",7)) I ($$DATE^SCDXUTL(DT)) D
"RTN","SCDXMSG",116,0)
 .;Task updating of Hospital Location file
"RTN","SCDXMSG",117,0)
 .N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSK
"RTN","SCDXMSG",118,0)
 .S ZTRTH="HOPUP^SCMSP"
"RTN","SCDXMSG",119,0)
 .S ZTDESC="REQUIRE PROVIDER AND DIAGNOSIS FOR CHECKOUT FROM CLINICS"
"RTN","SCDXMSG",120,0)
 .S ZTDTH="NOW"
"RTN","SCDXMSG",121,0)
 .S ZTIO=""
"RTN","SCDXMSG",122,0)
 .D ^%ZTLOAD
"RTN","SCDXMSG",123,0)
 ;Done
"RTN","SCDXMSG",124,0)
 Q
"RTN","SCDXMSG0")
0^7^B23431822
"RTN","SCDXMSG0",1,0)
SCDXMSG0 ;ALB/JRP - AMB CARE MESSAGE BUILDER;07-MAY-1996
"RTN","SCDXMSG0",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXMSG0",3,0)
 ;
"RTN","SCDXMSG0",4,0)
BUILDHL7(XMITPTR,HL,MID,XMITARRY,INSRTPNT) ;Build an HL7 message for an
"RTN","SCDXMSG0",5,0)
 ; entry in the TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXMSG0",6,0)
 ;
"RTN","SCDXMSG0",7,0)
 ;Input  : XMITPTR - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXMSG0",8,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXMSG0",9,0)
 ;         HL - Array containing HL7 variables - pass by reference
"RTN","SCDXMSG0",10,0)
 ;              This is the output of the call to INIT^HLFNC2()
"RTN","SCDXMSG0",11,0)
 ;         MID - Message Control ID to use in the MSH segment
"RTN","SCDXMSG0",12,0)
 ;         XMITARRY - Array to store HL7 message in (full global ref)
"RTN","SCDXMSG0",13,0)
 ;                    (Defaults to ^TMP("HLS",$J))
"RTN","SCDXMSG0",14,0)
 ;         INSRTPNT - Line to begin inserting message text at
"RTN","SCDXMSG0",15,0)
 ;                    (Defaults to 1)
"RTN","SCDXMSG0",16,0)
 ;Output : LINES - Number of lines in message (success)
"RTN","SCDXMSG0",17,0)
 ;           XMITARRY(N) = Line N of HL7 message
"RTN","SCDXMSG0",18,0)
 ;           XMITARRY(N,M) = Continuation number M of line N
"RTN","SCDXMSG0",19,0)
 ;         -1^Error - Unable to build message / bad input
"RTN","SCDXMSG0",20,0)
 ;Notes  : It is the responsibility of the calling program to
"RTN","SCDXMSG0",21,0)
 ;         initialize (i.e. KILL) XMITARRY
"RTN","SCDXMSG0",22,0)
 ;       : The MSH segment will not be built if MID is not passed
"RTN","SCDXMSG0",23,0)
 ;       : When retransmitting, an EDIT event will be used if the
"RTN","SCDXMSG0",24,0)
 ;         OUTPATIENT ENCOUNTER field (#.02) has a value and a
"RTN","SCDXMSG0",25,0)
 ;         DELETE event will be used if the DELETED OUTPATIENT
"RTN","SCDXMSG0",26,0)
 ;         ENCOUNTER field (#.03) has a value
"RTN","SCDXMSG0",27,0)
 ;
"RTN","SCDXMSG0",28,0)
 ;Check input
"RTN","SCDXMSG0",29,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCDXMSG0",30,0)
 Q:('$D(^SD(409.73,XMITPTR,0))) "-1^Did not pass valid pointer to Transmitted Outpatient Encounter file"
"RTN","SCDXMSG0",31,0)
 Q:($O(HL(""))="") "-1^Did not pass variables required to interact with the HL7 package"
"RTN","SCDXMSG0",32,0)
 S MID=$G(MID)
"RTN","SCDXMSG0",33,0)
 S XMITARRY=$G(XMITARRY)
"RTN","SCDXMSG0",34,0)
 S:(XMITARRY="") XMITARRY="^TMP(""HLS"","_$J_")"
"RTN","SCDXMSG0",35,0)
 S INSRTPNT=$G(INSRTPNT)
"RTN","SCDXMSG0",36,0)
 S:(INSRTPNT="") INSRTPNT=1
"RTN","SCDXMSG0",37,0)
 ;Declare variables
"RTN","SCDXMSG0",38,0)
 N ENCDT,NODE,DFN,XMITEVNT,ENCPTR,DELPTR,LINESADD,LINETAG
"RTN","SCDXMSG0",39,0)
 N CURLINE,EVNTHL7,VAFARRY,ORIGMTN,ORIGETN,RESULT
"RTN","SCDXMSG0",40,0)
 N ERROR,SEGMENTS,SEGORDR,SEGNAME,XMITDATE,VAFSTR
"RTN","SCDXMSG0",41,0)
 ;Get zero node of Transmitted Outpatient Encounter
"RTN","SCDXMSG0",42,0)
 S NODE=$G(^SD(409.73,XMITPTR,0))
"RTN","SCDXMSG0",43,0)
 ;Get pointer to Outpatient Encounter file
"RTN","SCDXMSG0",44,0)
 S ENCPTR=+$P(NODE,"^",2)
"RTN","SCDXMSG0",45,0)
 ;Get pointer to Deleted Outpatient Encounter file
"RTN","SCDXMSG0",46,0)
 S DELPTR=+$P(NODE,"^",3)
"RTN","SCDXMSG0",47,0)
 ;Pointer to either type of encounter not found - done
"RTN","SCDXMSG0",48,0)
 Q:(('ENCPTR)&('DELPTR)) "-1^Entry in Transmitted Outpatient Encounter file does not reference an encounter"
"RTN","SCDXMSG0",49,0)
 ;Get transmission event
"RTN","SCDXMSG0",50,0)
 S XMITEVNT=+$P(NODE,"^",5)
"RTN","SCDXMSG0",51,0)
 ;Retransmitting - use EDIT event for Outpatient Encounters and
"RTN","SCDXMSG0",52,0)
 ; DELETE event for Deleted Outpatient Encounter
"RTN","SCDXMSG0",53,0)
 S:('XMITEVNT) XMITEVNT=$S(ENCPTR:2,1:3)
"RTN","SCDXMSG0",54,0)
 ;Convert event type to HL7 event
"RTN","SCDXMSG0",55,0)
 ; Using A08 for ADD & EDIT and A23 for DELETE
"RTN","SCDXMSG0",56,0)
 S EVNTHL7="A23"
"RTN","SCDXMSG0",57,0)
 S:(XMITEVNT'=3) EVNTHL7="A08"
"RTN","SCDXMSG0",58,0)
 ;Get event date/time
"RTN","SCDXMSG0",59,0)
 S EVNTDATE=+$P(NODE,"^",6)
"RTN","SCDXMSG0",60,0)
 ;Determine patient and encounter date/time
"RTN","SCDXMSG0",61,0)
 S DFN=0
"RTN","SCDXMSG0",62,0)
 S ENCDT=0
"RTN","SCDXMSG0",63,0)
 ;Get data from Outpatient Encounter
"RTN","SCDXMSG0",64,0)
 I (ENCPTR) D
"RTN","SCDXMSG0",65,0)
 .S NODE=$G(^SCE(ENCPTR,0))
"RTN","SCDXMSG0",66,0)
 .S DFN=+$P(NODE,"^",2)
"RTN","SCDXMSG0",67,0)
 .S ENCDT=+$P($P(NODE,"^"),".")
"RTN","SCDXMSG0",68,0)
 ;Get data from Deleted Outpatient Encounter
"RTN","SCDXMSG0",69,0)
 I (DELPTR) D
"RTN","SCDXMSG0",70,0)
 .S NODE=$G(^SD(409.74,DELPTR,0))
"RTN","SCDXMSG0",71,0)
 .S DFN=+$P(NODE,"^",2)
"RTN","SCDXMSG0",72,0)
 .S ENCDT=+$P($P(NODE,"^"),".")
"RTN","SCDXMSG0",73,0)
 ;Unable to determine patient - done
"RTN","SCDXMSG0",74,0)
 Q:('DFN) "-1^"_$S(DELPTR:"Deleted ",1:"")_"Outpatient Encounter did not refer to a patient"
"RTN","SCDXMSG0",75,0)
 ;Couldn't determine encounter date/time - use today
"RTN","SCDXMSG0",76,0)
 S:('$G(ENCDT)) ENCDT=DT
"RTN","SCDXMSG0",77,0)
 ;Build MSH segment if MID was passed
"RTN","SCDXMSG0",78,0)
 S LINESADD=0
"RTN","SCDXMSG0",79,0)
 S CURLINE=INSRTPNT
"RTN","SCDXMSG0",80,0)
 S ERROR=0
"RTN","SCDXMSG0",81,0)
 I (MID'="") D
"RTN","SCDXMSG0",82,0)
 .;Remember original message & event types (only applicable to batch)
"RTN","SCDXMSG0",83,0)
 .S ORIGMTN=HL("MTN")
"RTN","SCDXMSG0",84,0)
 .S ORIGETN=HL("ETN")
"RTN","SCDXMSG0",85,0)
 .;Put in message & event types for actual message
"RTN","SCDXMSG0",86,0)
 .S HL("MTN")="ADT"
"RTN","SCDXMSG0",87,0)
 .S HL("ETN")=EVNTHL7
"RTN","SCDXMSG0",88,0)
 .;Build MSH segment
"RTN","SCDXMSG0",89,0)
 .K RESULT D MSH^HLFNC2(.HL,MID,.RESULT)
"RTN","SCDXMSG0",90,0)
 .;Reset message & event types to original values
"RTN","SCDXMSG0",91,0)
 .S HL("MTN")=ORIGMTN
"RTN","SCDXMSG0",92,0)
 .S HL("ETN")=ORIGETN
"RTN","SCDXMSG0",93,0)
 .;Error
"RTN","SCDXMSG0",94,0)
 .I (RESULT="") S ERROR="-1^Unable to create MSH segment" Q
"RTN","SCDXMSG0",95,0)
 .;Copy MSH segment into HL7 message
"RTN","SCDXMSG0",96,0)
 .S @XMITARRY@(CURLINE)=RESULT
"RTN","SCDXMSG0",97,0)
 .;Increment number of lines added
"RTN","SCDXMSG0",98,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG0",99,0)
 .;Check for continuation node
"RTN","SCDXMSG0",100,0)
 .I ($D(RESULT(1))) D
"RTN","SCDXMSG0",101,0)
 ..;Copy continuation into HL7 message
"RTN","SCDXMSG0",102,0)
 ..S @XMITARRY@(CURLINE,1)=RESULT(1)
"RTN","SCDXMSG0",103,0)
 ..;Increment number of lines added
"RTN","SCDXMSG0",104,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG0",105,0)
 .;Increment current line number
"RTN","SCDXMSG0",106,0)
 .S CURLINE=CURLINE+1
"RTN","SCDXMSG0",107,0)
 ;Error building MSH segment - done
"RTN","SCDXMSG0",108,0)
 Q:(ERROR) ERROR
"RTN","SCDXMSG0",109,0)
 ;Get list of segments
"RTN","SCDXMSG0",110,0)
 D SEGMENTS^SCDXMSG1(EVNTHL7,"SEGMENTS")
"RTN","SCDXMSG0",111,0)
 ;Loop through list of segments
"RTN","SCDXMSG0",112,0)
 S ERROR=0
"RTN","SCDXMSG0",113,0)
 S SEGORDR=0
"RTN","SCDXMSG0",114,0)
 F  S SEGORDR=+$O(SEGMENTS(SEGORDR)) Q:('SEGORDR)  D  Q:(ERROR)
"RTN","SCDXMSG0",115,0)
 .S SEGNAME=""
"RTN","SCDXMSG0",116,0)
 .F  S SEGNAME=$O(SEGMENTS(SEGORDR,SEGNAME)) Q:(SEGNAME="")  D  Q:(ERROR)
"RTN","SCDXMSG0",117,0)
 ..;Build segment
"RTN","SCDXMSG0",118,0)
 ..S VAFSTR=SEGMENTS(SEGORDR,SEGNAME)
"RTN","SCDXMSG0",119,0)
 ..S VAFARRY="^TMP(""SCDX-XMIT-BLD"","_$J_","""_SEGNAME_""")"
"RTN","SCDXMSG0",120,0)
 ..S LINETAG="BLD"_SEGNAME S ERROR=0 D @LINETAG^SCDXMSG1
"RTN","SCDXMSG0",121,0)
 ..;Error - delete segment & quit
"RTN","SCDXMSG0",122,0)
 ..I (ERROR) S LINETAG="DEL"_SEGNAME D @LINETAG^SCDXMSG1 Q
"RTN","SCDXMSG0",123,0)
 ..;Validate segment
"RTN","SCDXMSG0",124,0)
 ..S LINETAG="VLD"_SEGNAME S ERROR=0 D @LINETAG^SCDXMSG1
"RTN","SCDXMSG0",125,0)
 ..;Error - delete segment & quit
"RTN","SCDXMSG0",126,0)
 ..I (ERROR) S LINETAG="DEL"_SEGNAME D @LINETAG^SCDXMSG1 Q
"RTN","SCDXMSG0",127,0)
 ..;Copy segment into HL7 message
"RTN","SCDXMSG0",128,0)
 ..S LINETAG="CPY"_SEGNAME S ERROR=0 D @LINETAG^SCDXMSG1
"RTN","SCDXMSG0",129,0)
 ..;Delete segment
"RTN","SCDXMSG0",130,0)
 ..S LINETAG="DEL"_SEGNAME D @LINETAG^SCDXMSG1
"RTN","SCDXMSG0",131,0)
 ..;Increment current line number
"RTN","SCDXMSG0",132,0)
 ..S CURLINE=CURLINE+1
"RTN","SCDXMSG0",133,0)
 ;Error building segment - remove segments already put into HL7
"RTN","SCDXMSG0",134,0)
 ; message & quit
"RTN","SCDXMSG0",135,0)
 I (ERROR) D UNWIND^SCDXMSG1(XMITARRY,INSRTPNT) Q ERROR
"RTN","SCDXMSG0",136,0)
 ;Done
"RTN","SCDXMSG0",137,0)
 Q LINESADD
"RTN","SCDXMSG1")
0^8^B41485507
"RTN","SCDXMSG1",1,0)
SCDXMSG1 ;ALB/JRP - AMB CARE MESSAGE BUILDER UTILS;08-MAY-1996
"RTN","SCDXMSG1",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXMSG1",3,0)
 ;
"RTN","SCDXMSG1",4,0)
 ;-- Line tags for building HL7 segment
"RTN","SCDXMSG1",5,0)
BLDEVN S VAFEVN=$$EN^VAFHLEVN(EVNTHL7,EVNTDATE,VAFSTR,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",6,0)
 Q
"RTN","SCDXMSG1",7,0)
BLDPID S VAFPID=$$EN^VAFHLPID(DFN,VAFSTR)
"RTN","SCDXMSG1",8,0)
 D SETMAR^SCMSVUT0($G(PID),$G(PID1),HLQ,HLFS)
"RTN","SCDXMSG1",9,0)
 Q
"RTN","SCDXMSG1",10,0)
BLDZPD S VAFZPD=$$EN^VAFHLZPD(DFN,VAFSTR)
"RTN","SCDXMSG1",11,0)
 Q
"RTN","SCDXMSG1",12,0)
BLDPV1 D SETID^SCMSVUT0(ENCPTR,DELPTR)
"RTN","SCDXMSG1",13,0)
 S VAFPV1=$$EN^VAFHLPV1(ENCPTR,DELPTR,VAFSTR,1,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",14,0)
 Q
"RTN","SCDXMSG1",15,0)
BLDDG1 K @VAFARRY
"RTN","SCDXMSG1",16,0)
 D EN^VAFHLDG1(ENCPTR,VAFSTR,HL("Q"),HL("FS"),VAFARRY)
"RTN","SCDXMSG1",17,0)
 Q
"RTN","SCDXMSG1",18,0)
BLDPR1 K @VAFARRY
"RTN","SCDXMSG1",19,0)
 D SETPRTY^SCMSVUT0(ENCPTR)
"RTN","SCDXMSG1",20,0)
 D EN^VAFHLPR1(ENCPTR,VAFSTR,HL("Q"),HL("FS"),HL("ECH"),VAFARRY)
"RTN","SCDXMSG1",21,0)
 Q
"RTN","SCDXMSG1",22,0)
BLDZEL S VAFZEL=$$EN^VAFHLZEL(DFN,VAFSTR,1)
"RTN","SCDXMSG1",23,0)
 Q
"RTN","SCDXMSG1",24,0)
BLDZIR K DGREL,DGINC,DGINR,DGDEP
"RTN","SCDXMSG1",25,0)
 D ALL^DGMTU21(DFN,"V",ENCDT,"R")
"RTN","SCDXMSG1",26,0)
 S VAFZIR=$$EN^VAFHLZIR(+$G(DGINR("V")),VAFSTR,1,ENCPTR)
"RTN","SCDXMSG1",27,0)
 K DGREL,DGINC,DGINR,DGDEP
"RTN","SCDXMSG1",28,0)
 Q
"RTN","SCDXMSG1",29,0)
BLDZCL K @VAFARRY
"RTN","SCDXMSG1",30,0)
 D EN^VAFHLZCL(DFN,ENCPTR,VAFSTR,HL("Q"),HL("FS"),VAFARRY)
"RTN","SCDXMSG1",31,0)
 Q
"RTN","SCDXMSG1",32,0)
BLDZSC K @VAFARRY
"RTN","SCDXMSG1",33,0)
 D EN^VAFHLZSC(ENCPTR,VAFSTR,HL("Q"),HL("FS"),VAFARRY)
"RTN","SCDXMSG1",34,0)
 Q
"RTN","SCDXMSG1",35,0)
BLDZSP S VAFZSP=$$EN^VAFHLZSP(DFN,1,1)
"RTN","SCDXMSG1",36,0)
 Q
"RTN","SCDXMSG1",37,0)
 ;
"RTN","SCDXMSG1",38,0)
 ;-- Line tags for validating HL7 segments
"RTN","SCDXMSG1",39,0)
VLDEVN S ERROR=$$EN^SCMSVEVN(VAFEVN,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",40,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",41,0)
 Q
"RTN","SCDXMSG1",42,0)
VLDPID S ERROR=$$EN^SCMSVPID(VAFPID,$G(VAFPID(1)),HL("Q"),HL("FS"),HL("ECH"))
"RTN","SCDXMSG1",43,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",44,0)
 Q
"RTN","SCDXMSG1",45,0)
VLDZPD S ERROR=$$EN^SCMSVZPD(VAFZPD,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",46,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",47,0)
 Q
"RTN","SCDXMSG1",48,0)
VLDPV1 S ERROR=$$EN^SCMSVPV1(VAFPV1,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",49,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",50,0)
 Q
"RTN","SCDXMSG1",51,0)
VLDDG1 S ERROR=$$EN^SCMSVDG1(VAFARRY,HL("Q"),HL("FS"),ENCPTR)
"RTN","SCDXMSG1",52,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",53,0)
 Q
"RTN","SCDXMSG1",54,0)
VLDPR1 S ERROR=$$EN^SCMSVPR1(VAFARRY,HL("Q"),HL("FS"),HL("ECH"))
"RTN","SCDXMSG1",55,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",56,0)
 Q
"RTN","SCDXMSG1",57,0)
VLDZEL S ERROR=$$EN^SCMSVZEL(VAFZEL,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",58,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",59,0)
 Q
"RTN","SCDXMSG1",60,0)
VLDZIR S ERROR=$$EN^SCMSVZIR(VAFZIR,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",61,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",62,0)
 Q
"RTN","SCDXMSG1",63,0)
VLDZCL S ERROR=$$EN^SCMSVZCL(VAFARRY,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",64,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",65,0)
 Q
"RTN","SCDXMSG1",66,0)
VLDZSC S ERROR=$$EN^SCMSVZSC(VAFARRY,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",67,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",68,0)
 Q
"RTN","SCDXMSG1",69,0)
VLDZSP S ERROR=$$EN^SCMSVZSP(VAFZSP,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",70,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",71,0)
 Q
"RTN","SCDXMSG1",72,0)
 ;
"RTN","SCDXMSG1",73,0)
 ;-- Line tags for copying HL7 segments into HL7 message
"RTN","SCDXMSG1",74,0)
CPYEVN N I
"RTN","SCDXMSG1",75,0)
 S @XMITARRY@(CURLINE)=VAFEVN
"RTN","SCDXMSG1",76,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",77,0)
 S I=""
"RTN","SCDXMSG1",78,0)
 F  S I=+$O(VAFEVN(I)) Q:('I)  D
"RTN","SCDXMSG1",79,0)
 .S @XMITARRY@(CURLINE,I)=VAFEVN(I)
"RTN","SCDXMSG1",80,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",81,0)
 Q
"RTN","SCDXMSG1",82,0)
CPYPID N I
"RTN","SCDXMSG1",83,0)
 S @XMITARRY@(CURLINE)=VAFPID
"RTN","SCDXMSG1",84,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",85,0)
 S I=""
"RTN","SCDXMSG1",86,0)
 F  S I=+$O(VAFPID(I)) Q:('I)  D
"RTN","SCDXMSG1",87,0)
 .S @XMITARRY@(CURLINE,I)=VAFPID(I)
"RTN","SCDXMSG1",88,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",89,0)
 Q
"RTN","SCDXMSG1",90,0)
CPYZPD N I
"RTN","SCDXMSG1",91,0)
 S @XMITARRY@(CURLINE)=VAFZPD
"RTN","SCDXMSG1",92,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",93,0)
 S I=""
"RTN","SCDXMSG1",94,0)
 F  S I=+$O(VAFZPD(I)) Q:('I)  D
"RTN","SCDXMSG1",95,0)
 .S @XMITARRY@(CURLINE,I)=VAFZPD(I)
"RTN","SCDXMSG1",96,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",97,0)
 Q
"RTN","SCDXMSG1",98,0)
CPYPV1 N I
"RTN","SCDXMSG1",99,0)
 S @XMITARRY@(CURLINE)=VAFPV1
"RTN","SCDXMSG1",100,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",101,0)
 S I=""
"RTN","SCDXMSG1",102,0)
 F  S I=+$O(VAFPV1(I)) Q:('I)  D
"RTN","SCDXMSG1",103,0)
 .S @XMITARRY@(CURLINE,I)=VAFPV1(I)
"RTN","SCDXMSG1",104,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",105,0)
 Q
"RTN","SCDXMSG1",106,0)
CPYDG1 N I,J,K
"RTN","SCDXMSG1",107,0)
 S I=""
"RTN","SCDXMSG1",108,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",109,0)
 .S J=""
"RTN","SCDXMSG1",110,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",111,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",112,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",113,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",114,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",115,0)
 Q
"RTN","SCDXMSG1",116,0)
CPYPR1 N I,J,K
"RTN","SCDXMSG1",117,0)
 S I=""
"RTN","SCDXMSG1",118,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",119,0)
 .S J=""
"RTN","SCDXMSG1",120,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",121,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",122,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",123,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",124,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",125,0)
 Q
"RTN","SCDXMSG1",126,0)
CPYZEL N I
"RTN","SCDXMSG1",127,0)
 S @XMITARRY@(CURLINE)=VAFZEL
"RTN","SCDXMSG1",128,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",129,0)
 S I=""
"RTN","SCDXMSG1",130,0)
 F  S I=+$O(VAFZEL(I)) Q:('I)  D
"RTN","SCDXMSG1",131,0)
 .S @XMITARRY@(CURLINE,I)=VAFZEL(I)
"RTN","SCDXMSG1",132,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",133,0)
 Q
"RTN","SCDXMSG1",134,0)
CPYZIR N I
"RTN","SCDXMSG1",135,0)
 S @XMITARRY@(CURLINE)=VAFZIR
"RTN","SCDXMSG1",136,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",137,0)
 N I
"RTN","SCDXMSG1",138,0)
 S I=""
"RTN","SCDXMSG1",139,0)
 F  S I=+$O(VAFZIR(I)) Q:('I)  D
"RTN","SCDXMSG1",140,0)
 .S @XMITARRY@(CURLINE,I)=VAFZIR(I)
"RTN","SCDXMSG1",141,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",142,0)
 Q
"RTN","SCDXMSG1",143,0)
CPYZCL N I,J,K
"RTN","SCDXMSG1",144,0)
 S I=""
"RTN","SCDXMSG1",145,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",146,0)
 .S J=""
"RTN","SCDXMSG1",147,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",148,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",149,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",150,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",151,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",152,0)
 Q
"RTN","SCDXMSG1",153,0)
CPYZSC N I,J,K
"RTN","SCDXMSG1",154,0)
 S I=""
"RTN","SCDXMSG1",155,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",156,0)
 .S J=""
"RTN","SCDXMSG1",157,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",158,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",159,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",160,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",161,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",162,0)
 Q
"RTN","SCDXMSG1",163,0)
CPYZSP N I
"RTN","SCDXMSG1",164,0)
 S @XMITARRY@(CURLINE)=VAFZSP
"RTN","SCDXMSG1",165,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",166,0)
 S I=""
"RTN","SCDXMSG1",167,0)
 F  S I=+$O(VAFZSP(I)) Q:('I)  D
"RTN","SCDXMSG1",168,0)
 .S @XMITARRY@(CURLINE,I)=VAFZSP(I)
"RTN","SCDXMSG1",169,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",170,0)
 Q
"RTN","SCDXMSG1",171,0)
 ;
"RTN","SCDXMSG1",172,0)
 ;-- Line tags for deleting HL7 segments
"RTN","SCDXMSG1",173,0)
DELEVN K VAFEVN
"RTN","SCDXMSG1",174,0)
 Q
"RTN","SCDXMSG1",175,0)
DELPID K VAFPID
"RTN","SCDXMSG1",176,0)
 Q
"RTN","SCDXMSG1",177,0)
DELZPD K VAFZPD
"RTN","SCDXMSG1",178,0)
 Q
"RTN","SCDXMSG1",179,0)
DELPV1 K VAFPV1
"RTN","SCDXMSG1",180,0)
 Q
"RTN","SCDXMSG1",181,0)
DELDG1 K @VAFARRY
"RTN","SCDXMSG1",182,0)
 Q
"RTN","SCDXMSG1",183,0)
DELPR1 K @VAFARRY
"RTN","SCDXMSG1",184,0)
 Q
"RTN","SCDXMSG1",185,0)
DELZEL K VAFZEL
"RTN","SCDXMSG1",186,0)
 Q
"RTN","SCDXMSG1",187,0)
DELZIR K VAFZIR
"RTN","SCDXMSG1",188,0)
 Q
"RTN","SCDXMSG1",189,0)
DELZCL K @VAFARRY
"RTN","SCDXMSG1",190,0)
 Q
"RTN","SCDXMSG1",191,0)
DELZSC K @VAFARRY
"RTN","SCDXMSG1",192,0)
 Q
"RTN","SCDXMSG1",193,0)
DELZSP K VAFZSP
"RTN","SCDXMSG1",194,0)
 Q
"RTN","SCDXMSG1",195,0)
 ;
"RTN","SCDXMSG1",196,0)
 ;
"RTN","SCDXMSG1",197,0)
SEGMENTS(EVNTTYPE,SEGARRY) ;Build list of HL7 segments for a given
"RTN","SCDXMSG1",198,0)
 ; event type
"RTN","SCDXMSG1",199,0)
 ;
"RTN","SCDXMSG1",200,0)
 ;Input  : EVNTTYPE - Event type to build list for
"RTN","SCDXMSG1",201,0)
 ;                    A08 & A23 are the only types currently supported
"RTN","SCDXMSG1",202,0)
 ;                    (Defaults to A08)
"RTN","SCDXMSG1",203,0)
 ;         SEGARRY - Array to place output in (full global reference)
"RTN","SCDXMSG1",204,0)
 ;                   (Defaults to ^TMP("SCDX SEGMENTS",$J))
"RTN","SCDXMSG1",205,0)
 ;Output : None
"RTN","SCDXMSG1",206,0)
 ;           SEGARRY(Seq,Name) = Fields
"RTN","SCDXMSG1",207,0)
 ;             Seq - Sequencing number to order the segments as
"RTN","SCDXMSG1",208,0)
 ;                   they should be placed in the HL7 message
"RTN","SCDXMSG1",209,0)
 ;             Name - Name of HL7 segment
"RTN","SCDXMSG1",210,0)
 ;             Fields - List of fields used by Ambulatory Care
"RTN","SCDXMSG1",211,0)
 ;                      VAFSTR would be set to this value
"RTN","SCDXMSG1",212,0)
 ;       : MSH segment is not included
"RTN","SCDXMSG1",213,0)
 ;
"RTN","SCDXMSG1",214,0)
 ;Check input
"RTN","SCDXMSG1",215,0)
 S EVNTTYPE=$G(EVNTTYPE)
"RTN","SCDXMSG1",216,0)
 S:(EVNTTYPE'="A23") EVNTTYPE="A08"
"RTN","SCDXMSG1",217,0)
 S SEGARRY=$G(SEGARRY)
"RTN","SCDXMSG1",218,0)
 S:(SEGARRY="") SEGARRY="^TMP(""SCDX SEGMENTS"","_$J_")"
"RTN","SCDXMSG1",219,0)
 ;Segments used by A08 & A23
"RTN","SCDXMSG1",220,0)
 S @SEGARRY@(1,"EVN")="1,2"
"RTN","SCDXMSG1",221,0)
 S @SEGARRY@(2,"PID")="1,2,3,4,5,6,7,8,10,11,12,13,14,16,17,19"
"RTN","SCDXMSG1",222,0)
 S @SEGARRY@(3,"ZPD")="1,2,3,4,5,6,7,8,9,10,11,12,13,16,17,18"
"RTN","SCDXMSG1",223,0)
 S @SEGARRY@(4,"PV1")="1,2,4,14,19,39,44,50"
"RTN","SCDXMSG1",224,0)
 ;Rest of segments not used by A23
"RTN","SCDXMSG1",225,0)
 Q:(EVNTTYPE="A23")
"RTN","SCDXMSG1",226,0)
 S @SEGARRY@(5,"DG1")="1,2,3,4,5,15"
"RTN","SCDXMSG1",227,0)
 S @SEGARRY@(6,"PR1")="1,2,3,4,12"
"RTN","SCDXMSG1",228,0)
 S @SEGARRY@(7,"ZEL")="1,2,3,4,5,6,7,8,9,10,11,12,13"
"RTN","SCDXMSG1",229,0)
 S @SEGARRY@(8,"ZIR")="1,2,3,4,5,6,7,8,9,10,11,12,13"
"RTN","SCDXMSG1",230,0)
 S @SEGARRY@(9,"ZCL")="1,2,3"
"RTN","SCDXMSG1",231,0)
 S @SEGARRY@(10,"ZSC")="1,2,3"
"RTN","SCDXMSG1",232,0)
 S @SEGARRY@(11,"ZSP")="1,2,3,4"
"RTN","SCDXMSG1",233,0)
 Q
"RTN","SCDXMSG1",234,0)
 ;
"RTN","SCDXMSG1",235,0)
UNWIND(XMITARRY,INSRTPNT) ;Remove all data that was put into HL7 message
"RTN","SCDXMSG1",236,0)
 ;
"RTN","SCDXMSG1",237,0)
 ;Input  : XMITARRY - Array containing HL7 message (full global ref)
"RTN","SCDXMSG1",238,0)
 ;                    (Defaults to ^TMP("HLS",$J))
"RTN","SCDXMSG1",239,0)
 ;         INSRTPNT - Where to begin deletion from (Defaults to 1)
"RTN","SCDXMSG1",240,0)
 ;Output : None
"RTN","SCDXMSG1",241,0)
 ;
"RTN","SCDXMSG1",242,0)
 ;Check input
"RTN","SCDXMSG1",243,0)
 S XMITARRY=$G(XMITARRY)
"RTN","SCDXMSG1",244,0)
 S:(XMITARRY="") XMITARRY="^TMP(""HLS"","_$J_")"
"RTN","SCDXMSG1",245,0)
 S INSRTPNT=$G(INSRTPNT)
"RTN","SCDXMSG1",246,0)
 S:(INSRTPNT="") INSRTPNT=1
"RTN","SCDXMSG1",247,0)
 ;Remove insertion point from array
"RTN","SCDXMSG1",248,0)
 K @XMITARRY@(INSRTPNT)
"RTN","SCDXMSG1",249,0)
 ;Remove everything from insertion point to end of array
"RTN","SCDXMSG1",250,0)
 F  S INSRTPNT=$O(@XMITARRY@(INSRTPNT)) Q:(INSRTPNT="")  K @XMITARRY@(INSRTPNT)
"RTN","SCDXMSG1",251,0)
 ;Done
"RTN","SCDXMSG1",252,0)
 Q
"RTN","SCDXMSG2")
0^73^B15648498
"RTN","SCDXMSG2",1,0)
SCDXMSG2 ;ALB/JRP - AMB CARE TRANSMISSION BULLETINS;01-JUL-1996
"RTN","SCDXMSG2",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXMSG2",3,0)
 ;
"RTN","SCDXMSG2",4,0)
CMPLBULL(SENT,ERRARY) ;Send completion bulletin
"RTN","SCDXMSG2",5,0)
 ;
"RTN","SCDXMSG2",6,0)
 ;Input  : SENT - Number of encounters sent to NPCDB (Defaults to 0)
"RTN","SCDXMSG2",7,0)
 ;         ERRARRY - Array containing list of encounters that
"RTN","SCDXMSG2",8,0)
 ;                   could not be transmitted (full global reference)
"RTN","SCDXMSG2",9,0)
 ;           ERRARY(Ptr) = Reason
"RTN","SCDXMSG2",10,0)
 ;             Ptr - Pointer to entry in TRANSMITTED OUTPATIENT
"RTN","SCDXMSG2",11,0)
 ;                   ENCOUNTER file (#409.73)
"RTN","SCDXMSG2",12,0)
 ;             Reason - Why the encounter could not be transmitted
"RTN","SCDXMSG2",13,0)
 ;Output : None
"RTN","SCDXMSG2",14,0)
 ;
"RTN","SCDXMSG2",15,0)
 ;Check input
"RTN","SCDXMSG2",16,0)
 S SENT=+$G(SENT)
"RTN","SCDXMSG2",17,0)
 S ERRARY=$G(ERRARY)
"RTN","SCDXMSG2",18,0)
 S:(ERRARY="") ERRARY="^TMP(""SCDX-XMIT-BLD"","_$J_",""ERRORS"")"
"RTN","SCDXMSG2",19,0)
 ;Declare variables
"RTN","SCDXMSG2",20,0)
 N MSGTXT,XMB,XMTEXT,XMY,XMDUZ,XMDT,XMZ,XMITPTR,LINE,ERRCNT
"RTN","SCDXMSG2",21,0)
 N ENCPTR,DELPTR,ENCDATE,ENCLOC,NAME,TMP,ENCZERO,SSN,PATZERO
"RTN","SCDXMSG2",22,0)
 S MSGTXT="^TMP(""SCDX-XMIT-BLD"","_$J_",""BULLETIN"")"
"RTN","SCDXMSG2",23,0)
 K @MSGTXT
"RTN","SCDXMSG2",24,0)
 ;Put number of encounters transmitted into message text
"RTN","SCDXMSG2",25,0)
 S @MSGTXT@(1)="Transmission of data to the National Patient Care Database has completed."
"RTN","SCDXMSG2",26,0)
 S @MSGTXT@(2)="A total of "_SENT_" Outpatient Encounters were sent."
"RTN","SCDXMSG2",27,0)
 S @MSGTXT@(3)=" "
"RTN","SCDXMSG2",28,0)
 ;Put nontransmitted encounter information into message text
"RTN","SCDXMSG2",29,0)
 I (+$O(@ERRARY@(0))) D
"RTN","SCDXMSG2",30,0)
 .S @MSGTXT@(4)=" "
"RTN","SCDXMSG2",31,0)
 .S @MSGTXT@(5)="The following Outpatient Encounters could not be sent:"
"RTN","SCDXMSG2",32,0)
 .S @MSGTXT@(6)="(Deleted Outpatient Encounters are marked with an '*')"
"RTN","SCDXMSG2",33,0)
 .S @MSGTXT@(7)=" "
"RTN","SCDXMSG2",34,0)
 .S LINE=8
"RTN","SCDXMSG2",35,0)
 .S XMITPTR=0
"RTN","SCDXMSG2",36,0)
 .S ERRCNT=0
"RTN","SCDXMSG2",37,0)
 .F  S XMITPTR=+$O(@ERRARY@(XMITPTR)) Q:('XMITPTR)  D
"RTN","SCDXMSG2",38,0)
 ..Q:('$D(^SD(409.73,XMITPTR,0)))
"RTN","SCDXMSG2",39,0)
 ..;Get pointer to [deleted] encounter
"RTN","SCDXMSG2",40,0)
 ..S TMP=$G(^SD(409.73,XMITPTR,0))
"RTN","SCDXMSG2",41,0)
 ..S ENCPTR=+$P(TMP,"^",2)
"RTN","SCDXMSG2",42,0)
 ..S DELPTR=+$P(TMP,"^",3)
"RTN","SCDXMSG2",43,0)
 ..;Get zero node of encounter
"RTN","SCDXMSG2",44,0)
 ..S ENCZERO=$G(^SCE(ENCPTR,0))
"RTN","SCDXMSG2",45,0)
 ..S:(DELPTR) ENCZERO=$G(^SD(409.74,DELPTR,1))
"RTN","SCDXMSG2",46,0)
 ..;Get encounter date/time
"RTN","SCDXMSG2",47,0)
 ..S TMP=+ENCZERO
"RTN","SCDXMSG2",48,0)
 ..S ENCDATE=$E(TMP,4,5)_"/"_$E(TMP,6,7)_"/"_(1700+$E(TMP,1,3))
"RTN","SCDXMSG2",49,0)
 ..S TMP=$P(TMP,".",2)_"000000"
"RTN","SCDXMSG2",50,0)
 ..S ENCDATE=ENCDATE_" @ "_$E(TMP,1,2)_":"_$E(TMP,3,4)_":"_$E(TMP,5,6)
"RTN","SCDXMSG2",51,0)
 ..;Get patient's name & SSN - truncate name to 24 characters
"RTN","SCDXMSG2",52,0)
 ..S TMP=+$P(ENCZERO,"^",2)
"RTN","SCDXMSG2",53,0)
 ..S PATZERO=$G(^DPT(TMP,0))
"RTN","SCDXMSG2",54,0)
 ..S NAME=$E($P(PATZERO,"^",1),1,24)
"RTN","SCDXMSG2",55,0)
 ..S:(NAME="") NAME="Unknown Patient"
"RTN","SCDXMSG2",56,0)
 ..S SSN=$E($P(PATZERO,"^",9),6,10)
"RTN","SCDXMSG2",57,0)
 ..S:(SSN="") SSN="????"
"RTN","SCDXMSG2",58,0)
 ..;Get location of encounter - truncate to 23 characters
"RTN","SCDXMSG2",59,0)
 ..S TMP=+$P(ENCZERO,"^",4)
"RTN","SCDXMSG2",60,0)
 ..S ENCLOC=$E($P($G(^SC(TMP,0)),"^",1),1,23)
"RTN","SCDXMSG2",61,0)
 ..S:(ENCLOC="") ENCLOC="Unknown Location"
"RTN","SCDXMSG2",62,0)
 ..;Put info into bulletin - mark deleted encounters with a '*'
"RTN","SCDXMSG2",63,0)
 ..S TMP=$S(DELPTR:"*",1:" ")
"RTN","SCDXMSG2",64,0)
 ..S TMP=$$INSERT^SCDXUTL1(NAME,TMP,2)
"RTN","SCDXMSG2",65,0)
 ..S TMP=$$INSERT^SCDXUTL1("("_SSN_")",TMP,24)
"RTN","SCDXMSG2",66,0)
 ..S TMP=$$INSERT^SCDXUTL1(ENCDATE,TMP,33)
"RTN","SCDXMSG2",67,0)
 ..S TMP=$$INSERT^SCDXUTL1(ENCLOC,TMP,56)
"RTN","SCDXMSG2",68,0)
 ..S @MSGTXT@(LINE)=TMP
"RTN","SCDXMSG2",69,0)
 ..S @MSGTXT@(LINE+1)=$G(@ERRARY@(XMITPTR))
"RTN","SCDXMSG2",70,0)
 ..S @MSGTXT@(LINE+2)=" "
"RTN","SCDXMSG2",71,0)
 ..S LINE=LINE+3
"RTN","SCDXMSG2",72,0)
 ..S ERRCNT=ERRCNT+1
"RTN","SCDXMSG2",73,0)
 .;Put number of nontransmitted encounters into message text
"RTN","SCDXMSG2",74,0)
 .S @MSGTXT@(3)="A total of "_ERRCNT_" Outpatient Encounters could not be sent."
"RTN","SCDXMSG2",75,0)
 ;Set bulletin subject
"RTN","SCDXMSG2",76,0)
 S XMB(1)="Transmission of data to NPCDB completed"
"RTN","SCDXMSG2",77,0)
 ;Deliver bulletin
"RTN","SCDXMSG2",78,0)
 S XMB="SCDX AMBCARE TO NPCDB SUMMARY"
"RTN","SCDXMSG2",79,0)
 S XMTEXT=$P(MSGTXT,")",1)_","
"RTN","SCDXMSG2",80,0)
 D ^XMB
"RTN","SCDXMSG2",81,0)
 ;Done - clean up and quit
"RTN","SCDXMSG2",82,0)
 K @MSGTXT
"RTN","SCDXMSG2",83,0)
 Q
"RTN","SCDXMSG2",84,0)
 ;
"RTN","SCDXMSG2",85,0)
ERRBULL(REASON) ;Send error bulletin
"RTN","SCDXMSG2",86,0)
 ;
"RTN","SCDXMSG2",87,0)
 ;Input  : REASON - Why transmission of data could not be completed
"RTN","SCDXMSG2",88,0)
 ;Output : None
"RTN","SCDXMSG2",89,0)
 ;
"RTN","SCDXMSG2",90,0)
 ;Check input
"RTN","SCDXMSG2",91,0)
 S REASON=$G(REASON)
"RTN","SCDXMSG2",92,0)
 ;Declare variables
"RTN","SCDXMSG2",93,0)
 N MSGTXT,XMB,XMTEXT,XMY,XMDUZ,XMDT,XMZ
"RTN","SCDXMSG2",94,0)
 ;Set message text
"RTN","SCDXMSG2",95,0)
 S MSGTXT(1)="Transmission of data to the National Patient Care Database"
"RTN","SCDXMSG2",96,0)
 S MSGTXT(2)=" "
"RTN","SCDXMSG2",97,0)
 S MSGTXT(3)="could not be completed for the following reason:"
"RTN","SCDXMSG2",98,0)
 S MSGTXT(4)=" "
"RTN","SCDXMSG2",99,0)
 S MSGTXT(5)="  "_REASON
"RTN","SCDXMSG2",100,0)
 ;Set bulletin subject
"RTN","SCDXMSG2",101,0)
 S XMB(1)="** TRANSMISSION OF DATA TO NPCDB NOT COMPLETED **"
"RTN","SCDXMSG2",102,0)
 ;Deliver bulletin
"RTN","SCDXMSG2",103,0)
 S XMB="SCDX AMBCARE TO NPCDB SUMMARY"
"RTN","SCDXMSG2",104,0)
 S XMTEXT="MSGTXT("
"RTN","SCDXMSG2",105,0)
 D ^XMB
"RTN","SCDXMSG2",106,0)
 ;Done
"RTN","SCDXMSG2",107,0)
 Q
"RTN","SCDXPRN")
0^9^B1384722
"RTN","SCDXPRN",1,0)
SCDXPRN ;ALB/MTC - PRINT ROUTINES;23-MAY-1996
"RTN","SCDXPRN",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXPRN",3,0)
 Q
"RTN","SCDXPRN",4,0)
TRANS ;-- This report will print the NPCDB Transmissions for a Date Range.
"RTN","SCDXPRN",5,0)
 ;   The date to perform the sort is the date the Encounter tranaction
"RTN","SCDXPRN",6,0)
 ;   was posted to file 409.73.
"RTN","SCDXPRN",7,0)
 ;
"RTN","SCDXPRN",8,0)
 W !!,"NPCDB Data Transmission Report."
"RTN","SCDXPRN",9,0)
 W !!,*7,"This report requires 132 columns.",!!
"RTN","SCDXPRN",10,0)
 S L="DATA TRANSMISSION REPORT",DIC="^SD(409.73,",FLDS="[SCDX NPCDB TRANSMISSION REPORT]",BY=".06"
"RTN","SCDXPRN",11,0)
 D EN1^DIP
"RTN","SCDXPRN",12,0)
 K DIC,L,BY,FLDS
"RTN","SCDXPRN",13,0)
 Q
"RTN","SCDXPRN",14,0)
 ;
"RTN","SCDXPRN",15,0)
ERROR ;-- This report will provide a listing of the errors that occured from
"RTN","SCDXPRN",16,0)
 ;   the transmission of the data to NPCDB.
"RTN","SCDXPRN",17,0)
 ;
"RTN","SCDXPRN",18,0)
 W !!,"NPCDB Data Error Report."
"RTN","SCDXPRN",19,0)
 W !!,*7,"This report requires 132 columns.",!!
"RTN","SCDXPRN",20,0)
 S L="ERROR TRANSMISSION REPORT",DIC="^SD(409.75,",FLDS="[SCDX TRANSMITTED ERROR LIST]",BY="10.01"
"RTN","SCDXPRN",21,0)
 D EN1^DIP
"RTN","SCDXPRN",22,0)
 K DIC,L,BY,FLDS
"RTN","SCDXPRN",23,0)
 Q
"RTN","SCDXPRN",24,0)
 ;
"RTN","SCDXRT01")
0^10^B27872204
"RTN","SCDXRT01",1,0)
SCDXRT01 ;ALB/JRP - AMB CARE RETRANSMISSION;09-MAY-1996
"RTN","SCDXRT01",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXRT01",3,0)
 ;
"RTN","SCDXRT01",4,0)
RTRNRNG ;Mark all [Deleted] Outpatient Encounters for a user specified
"RTN","SCDXRT01",5,0)
 ; date range for retransmission to the National Ambulatory Care
"RTN","SCDXRT01",6,0)
 ; Database
"RTN","SCDXRT01",7,0)
 ;
"RTN","SCDXRT01",8,0)
 ;Input  : None
"RTN","SCDXRT01",9,0)
 ;Output : None
"RTN","SCDXRT01",10,0)
 ;Note   : User is prompted for the date range to retransmit
"RTN","SCDXRT01",11,0)
 ;       : Encounters that are not contained in the Transmitted
"RTN","SCDXRT01",12,0)
 ;         Outpatient Encounter file (#409.73) can not be
"RTN","SCDXRT01",13,0)
 ;         retransmitted
"RTN","SCDXRT01",14,0)
 ;       : [Deleted] Encounters that occurred before switching to new
"RTN","SCDXRT01",15,0)
 ;         transmission format can not be retransmitted
"RTN","SCDXRT01",16,0)
 ;       : [Deleted] Encounters that occurred within the last two days
"RTN","SCDXRT01",17,0)
 ;         can not be retransmitted
"RTN","SCDXRT01",18,0)
 ;
"RTN","SCDXRT01",19,0)
 ;Declare variables
"RTN","SCDXRT01",20,0)
 N MINDT,MAXDT,SCDXSTRT,SCDXEND,HELPTXT,X,%H,%,%I
"RTN","SCDXRT01",21,0)
 N ZTSK,ZTDESC,ZTRTN,ZTIO,ZTDTH
"RTN","SCDXRT01",22,0)
 W !!
"RTN","SCDXRT01",23,0)
 ;Cut-off date for old transmission format is earliest date
"RTN","SCDXRT01",24,0)
 ; allowed for retransmission (default to 10/1/96)
"RTN","SCDXRT01",25,0)
 S MINDT=+$P($G(^SD(404.91,1,"AMB")),"^",2)
"RTN","SCDXRT01",26,0)
 S:('MINDT) MINDT=2961001
"RTN","SCDXRT01",27,0)
 ;Today is the latest date allowed for retransmission
"RTN","SCDXRT01",28,0)
 D NOW^%DTC
"RTN","SCDXRT01",29,0)
 S MAXDT=X
"RTN","SCDXRT01",30,0)
 ;Set up help text for getting beginning and ending dates
"RTN","SCDXRT01",31,0)
 S HELPTXT("BGN")="Enter the beginning date for retransmitting encounters"
"RTN","SCDXRT01",32,0)
 S HELPTXT("END")="Enter the ending date for retransmitting encounters"
"RTN","SCDXRT01",33,0)
 ;Get beginning and ending dates
"RTN","SCDXRT01",34,0)
 S X=$$GETDTRNG^SCDXUTL1(MINDT,MAXDT,"HELPTXT(""BGN"")","HELPTXT(""END"")")
"RTN","SCDXRT01",35,0)
 ;User abort / time out
"RTN","SCDXRT01",36,0)
 Q:(X<0)
"RTN","SCDXRT01",37,0)
 W !!
"RTN","SCDXRT01",38,0)
 ;Verify that user wants to do this
"RTN","SCDXRT01",39,0)
 S SCDXSTRT=$P(X,"^",1)
"RTN","SCDXRT01",40,0)
 S SCDXEND=$P(X,"^",2)
"RTN","SCDXRT01",41,0)
 S DIR("A",1)=" "
"RTN","SCDXRT01",42,0)
 S DIR("A",2)=" "
"RTN","SCDXRT01",43,0)
 S X=(+$E(SCDXSTRT,4,5))_"/"_(+$E(SCDXSTRT,6,7))_"/"_(1700+$E(SCDXSTRT,1,3))
"RTN","SCDXRT01",44,0)
 S DIR("A",3)="All outpatient encounters that occurred between "_X
"RTN","SCDXRT01",45,0)
 S X=(+$E(SCDXEND,4,5))_"/"_(+$E(SCDXEND,6,7))_"/"_(1700+$E(SCDXEND,1,3))
"RTN","SCDXRT01",46,0)
 S DIR("A",4)="and "_X_" will be marked for retransmission to the"
"RTN","SCDXRT01",47,0)
 S DIR("A",5)="National Patient Care Database."
"RTN","SCDXRT01",48,0)
 S DIR("A",6)=" "
"RTN","SCDXRT01",49,0)
 S DIR("A",7)=" "
"RTN","SCDXRT01",50,0)
 S DIR("A")="Are you sure you want to do this ? "
"RTN","SCDXRT01",51,0)
 S DIR(0)="YA"
"RTN","SCDXRT01",52,0)
 D ^DIR
"RTN","SCDXRT01",53,0)
 ;Not verified / user abort / time out
"RTN","SCDXRT01",54,0)
 Q:('Y)
"RTN","SCDXRT01",55,0)
 ;Queue marking for retransmission
"RTN","SCDXRT01",56,0)
 S ZTRTN="TASKRX^SCDXRT01"
"RTN","SCDXRT01",57,0)
 S ZTDESC="Mark [Deleted] Outpatient Encounters for retransmission"
"RTN","SCDXRT01",58,0)
 S ZTDTH=$H
"RTN","SCDXRT01",59,0)
 S ZTIO=""
"RTN","SCDXRT01",60,0)
 S ZTSAVE("SCDXSTRT")=SCDXSTRT
"RTN","SCDXRT01",61,0)
 S ZTSAVE("SCDXEND")=SCDXEND
"RTN","SCDXRT01",62,0)
 K ZTSK D ^%ZTLOAD
"RTN","SCDXRT01",63,0)
 W:('$G(ZTSK)) !!,"** UNABLE TO QUEUE MARKING OF ENCOUNTERS FOR RETRANSMISSION **",!!
"RTN","SCDXRT01",64,0)
 W:($G(ZTSK)) !!,"Marking of encounters for retransmission queued as task number ",ZTSK
"RTN","SCDXRT01",65,0)
 W !!
"RTN","SCDXRT01",66,0)
 Q
"RTN","SCDXRT01",67,0)
 ;
"RTN","SCDXRT01",68,0)
TASKRX ;Mark all [Deleted] Outpatient Encounters in a given date range
"RTN","SCDXRT01",69,0)
 ; for retransmission
"RTN","SCDXRT01",70,0)
 ;
"RTN","SCDXRT01",71,0)
 ;Input  : SCDXSTRT - Date to begin marking encounters from 
"RTN","SCDXRT01",72,0)
 ;                    (FileMan format) (Required)
"RTN","SCDXRT01",73,0)
 ;         SCDXEND - Date to end marking encounters at
"RTN","SCDXRT01",74,0)
 ;                   (FileMan format) (Required)
"RTN","SCDXRT01",75,0)
 ;Output : None
"RTN","SCDXRT01",76,0)
 ;Notes  : Encounters that are not contained in the Transmitted
"RTN","SCDXRT01",77,0)
 ;         Outpatient Encounter file (#409.73) can not be
"RTN","SCDXRT01",78,0)
 ;         retransmitted
"RTN","SCDXRT01",79,0)
 ;       : This entry point should be used when marking for
"RTN","SCDXRT01",80,0)
 ;         retransmission is being queued.  If queued, ZTSTOP will
"RTN","SCDXRT01",81,0)
 ;         be set accordingly.
"RTN","SCDXRT01",82,0)
 ;
"RTN","SCDXRT01",83,0)
 ;Check input
"RTN","SCDXRT01",84,0)
 Q:('$G(SCDXSTRT))
"RTN","SCDXRT01",85,0)
 Q:('$G(SCDXEND))
"RTN","SCDXRT01",86,0)
 ;Declare variables
"RTN","SCDXRT01",87,0)
 N JUNK
"RTN","SCDXRT01",88,0)
 ;Call module to mark entries for retransmission
"RTN","SCDXRT01",89,0)
 S JUNK=$$REXMIT(SCDXSTRT,SCDXEND)
"RTN","SCDXRT01",90,0)
 ;Set ZTSTOP accordingly
"RTN","SCDXRT01",91,0)
 S:($P(JUNK,"^",4)) ZTSTOP=1
"RTN","SCDXRT01",92,0)
 ;Done
"RTN","SCDXRT01",93,0)
 Q
"RTN","SCDXRT01",94,0)
 ;
"RTN","SCDXRT01",95,0)
REXMIT(STARTDT,ENDDT) ;Mark all [Deleted] Outpatient Encounters in a
"RTN","SCDXRT01",96,0)
 ; given date range for retransmission
"RTN","SCDXRT01",97,0)
 ;
"RTN","SCDXRT01",98,0)
 ;Input  : STARTDT - Date to begin marking encounters from 
"RTN","SCDXRT01",99,0)
 ;                   (FileMan format) (Required)
"RTN","SCDXRT01",100,0)
 ;         ENDDT - Date to end marking encounters at (FileMan format)
"RTN","SCDXRT01",101,0)
 ;                 (Required)
"RTN","SCDXRT01",102,0)
 ;Output : Tot^Enc^Del^Stop - Number of [deleted] encounters marked for
"RTN","SCDXRT01",103,0)
 ;                            retransmission
"RTN","SCDXRT01",104,0)
 ;           Tot - Total number of encounters marked
"RTN","SCDXRT01",105,0)
 ;           Enc - Number of existing encounters marked
"RTN","SCDXRT01",106,0)
 ;           Del - Number of deleted encounters marked
"RTN","SCDXRT01",107,0)
 ;           Stop - Flag indicating if task was asked to stop
"RTN","SCDXRT01",108,0)
 ;             1 = Task was asked to stop
"RTN","SCDXRT01",109,0)
 ;             0 = Task was not asked to stop
"RTN","SCDXRT01",110,0)
 ;         0 - No encounters marked / bad input
"RTN","SCDXRT01",111,0)
 ;Notes  : Encounters that are not contained in the Transmitted
"RTN","SCDXRT01",112,0)
 ;         Outpatient Encounter file (#409.73) can not be
"RTN","SCDXRT01",113,0)
 ;         retransmitted
"RTN","SCDXRT01",114,0)
 ;
"RTN","SCDXRT01",115,0)
 ;Check input
"RTN","SCDXRT01",116,0)
 S STARTDT=+$G(STARTDT)
"RTN","SCDXRT01",117,0)
 Q:('STARTDT)
"RTN","SCDXRT01",118,0)
 S ENDDT=+$G(ENDDT)
"RTN","SCDXRT01",119,0)
 Q:('ENDDT)
"RTN","SCDXRT01",120,0)
 ;Declare variables
"RTN","SCDXRT01",121,0)
 N XMITPTR,ENCPTR,DELPTR,ENCDATE,EVNTDATE,DELCNT,ENCCNT,STOP,LOOP
"RTN","SCDXRT01",122,0)
 S STOP=0
"RTN","SCDXRT01",123,0)
 ;Add one second before midnight to ending date
"RTN","SCDXRT01",124,0)
 S ENDDT=ENDDT+.235959
"RTN","SCDXRT01",125,0)
 ;Find all deleted encounters that fall in date range
"RTN","SCDXRT01",126,0)
 S ENCDATE=STARTDT-.000001
"RTN","SCDXRT01",127,0)
 S DELCNT=0
"RTN","SCDXRT01",128,0)
 F LOOP=1:1 S ENCDATE=+$O(^SD(409.74,"B",ENCDATE)) Q:(('ENCDATE)!(ENCDATE>ENDDT))  D  Q:(STOP)
"RTN","SCDXRT01",129,0)
 .;Check for request to stop
"RTN","SCDXRT01",130,0)
 .I ('(LOOP#10)) S STOP=$$S^%ZTLOAD(DELCNT_" encounters have been marked for retransmission") Q:(STOP)
"RTN","SCDXRT01",131,0)
 .S DELPTR=0
"RTN","SCDXRT01",132,0)
 .F  S DELPTR=+$O(^SD(409.74,"B",ENCDATE,DELPTR)) Q:('DELPTR)  D
"RTN","SCDXRT01",133,0)
 ..;Find entry in Transmitted Outpatient Encounter file
"RTN","SCDXRT01",134,0)
 ..S XMITPTR=+$O(^SD(409.73,"ADEL",DELPTR,0))
"RTN","SCDXRT01",135,0)
 ..;Entry not found - don't retransmit
"RTN","SCDXRT01",136,0)
 ..Q:('XMITPTR)
"RTN","SCDXRT01",137,0)
 ..;Mark entry for retransmission
"RTN","SCDXRT01",138,0)
 ..D STREEVNT^SCDXFU01(XMITPTR,0)
"RTN","SCDXRT01",139,0)
 ..;Turn on transmission flag
"RTN","SCDXRT01",140,0)
 ..D XMITFLAG^SCDXFU01(XMITPTR)
"RTN","SCDXRT01",141,0)
 ..;Increment count of deleted encounters marked
"RTN","SCDXRT01",142,0)
 ..S DELCNT=DELCNT+1
"RTN","SCDXRT01",143,0)
 ;Task was asked to stop - abort
"RTN","SCDXRT01",144,0)
 Q:(STOP) DELCNT_"^^"_DELCNT_"^1"
"RTN","SCDXRT01",145,0)
 ;Find all encounters that fall in date range
"RTN","SCDXRT01",146,0)
 S ENCCNT=0
"RTN","SCDXRT01",147,0)
 S ENCDATE=STARTDT-.000001
"RTN","SCDXRT01",148,0)
 F LOOP=1:1 S ENCDATE=+$O(^SCE("B",ENCDATE)) Q:(('ENCDATE)!(ENCDATE>ENDDT))  D  Q:(STOP)
"RTN","SCDXRT01",149,0)
 .;Check for request to stop
"RTN","SCDXRT01",150,0)
 .I ('(LOOP#10)) S STOP=$$S^%ZTLOAD((ENCCNT+DELCNT)_" encounters have been marked for retransmission") Q:(STOP)
"RTN","SCDXRT01",151,0)
 .S ENCPTR=0
"RTN","SCDXRT01",152,0)
 .F  S ENCPTR=+$O(^SCE("B",ENCDATE,ENCPTR)) Q:('ENCPTR)  D
"RTN","SCDXRT01",153,0)
 ..;Find entry in Transmitted Outpatient Encounter file
"RTN","SCDXRT01",154,0)
 ..S XMITPTR=+$O(^SD(409.73,"AENC",ENCPTR,0))
"RTN","SCDXRT01",155,0)
 ..;Entry not found - don't retransmit
"RTN","SCDXRT01",156,0)
 ..Q:('XMITPTR)
"RTN","SCDXRT01",157,0)
 ..;Mark entry for retransmission
"RTN","SCDXRT01",158,0)
 ..D STREEVNT^SCDXFU01(XMITPTR,0)
"RTN","SCDXRT01",159,0)
 ..;Turn on transmission flag
"RTN","SCDXRT01",160,0)
 ..D XMITFLAG^SCDXFU01(XMITPTR)
"RTN","SCDXRT01",161,0)
 ..;Increment count of encounters marked
"RTN","SCDXRT01",162,0)
 ..S ENCCNT=ENCCNT+1
"RTN","SCDXRT01",163,0)
 ;Done
"RTN","SCDXRT01",164,0)
 Q (DELCNT+ENCCNT)_"^"_ENCCNT_"^"_DELCNT_"^"_STOP
"RTN","SCDXUTL")
0^11^B9467909
"RTN","SCDXUTL",1,0)
SCDXUTL ;ALB/JLU;Utility routine for ambcare project;4/26/96
"RTN","SCDXUTL",2,0)
 ;;5.3;Scheduling;**44**;5/1/96
"RTN","SCDXUTL",3,0)
 ;
"RTN","SCDXUTL",4,0)
DATE(DATE) ;this entry point will accept a date and return whether the new or old Scheduling Visits file limitations are to be used.
"RTN","SCDXUTL",5,0)
 ;INPUTS  -  a date in FM format to be compared to the ambcare start
"RTN","SCDXUTL",6,0)
 ;           date parameter,
"RTN","SCDXUTL",7,0)
 ;OUTPUTS -  1 for using the new structure
"RTN","SCDXUTL",8,0)
 ;           0 for using the old structure
"RTN","SCDXUTL",9,0)
 ;
"RTN","SCDXUTL",10,0)
 N PAR,ANS
"RTN","SCDXUTL",11,0)
 S PAR=$P($G(^SD(404.91,1,"AMB")),U,2) ;get parameter date
"RTN","SCDXUTL",12,0)
 I 'PAR S ANS=0 G QT
"RTN","SCDXUTL",13,0)
 I DATE<PAR S ANS=0 G QT ;if date passed in older than parameter us old
"RTN","SCDXUTL",14,0)
 S ANS=1
"RTN","SCDXUTL",15,0)
QT Q ANS
"RTN","SCDXUTL",16,0)
 ;
"RTN","SCDXUTL",17,0)
FMDATE() ;this entry point returns the FM date from the parameter of
"RTN","SCDXUTL",18,0)
 ;whether to use the new or old structure.
"RTN","SCDXUTL",19,0)
 Q $P($G(^SD(404.91,1,"AMB")),U,2)
"RTN","SCDXUTL",20,0)
 ;
"RTN","SCDXUTL",21,0)
CLOSED(DATE) ;this entry point accepts a date, compares it to the close out
"RTN","SCDXUTL",22,0)
 ;date and returns whether the close out period is up.
"RTN","SCDXUTL",23,0)
 ;INPUTS  - a date in FM format to be compared to the close out date 
"RTN","SCDXUTL",24,0)
 ;          parameter.
"RTN","SCDXUTL",25,0)
 ;OUTPUTS - 1 for close out period is over
"RTN","SCDXUTL",26,0)
 ;          0 for still being able to close out
"RTN","SCDXUTL",27,0)
 ;
"RTN","SCDXUTL",28,0)
 N PAR,ANS
"RTN","SCDXUTL",29,0)
 S PAR=$P($G(^SD(404.91,1,"AMB")),U,3) ;gets close out parameter
"RTN","SCDXUTL",30,0)
 I 'PAR S ANS=0 G CQT
"RTN","SCDXUTL",31,0)
 I DATE<PAR S ANS=0 G CQT ;if date is after close out date parameter 1.
"RTN","SCDXUTL",32,0)
 S ANS=1
"RTN","SCDXUTL",33,0)
CQT Q ANS
"RTN","SCDXUTL",34,0)
 ;
"RTN","SCDXUTL",35,0)
CLOSEFM() ;this entry point returns the close out date parameter in FM format.
"RTN","SCDXUTL",36,0)
 Q $P($G(^SD(404.91,1,"AMB")),U,3)
"RTN","SCDXUTL",37,0)
 ;
"RTN","SCDXUTL",38,0)
SDVDT(DATE,DFN) ;this subroutine will do a lookup on the ADT xref in SDV to get
"RTN","SCDXUTL",39,0)
 ;the SDV entry for a date and patient.
"RTN","SCDXUTL",40,0)
 ;
"RTN","SCDXUTL",41,0)
 Q $G(^SDV("ADT",DFN,DATE))
"RTN","SCDXUTL",42,0)
 ;
"RTN","SCDXUTL",43,0)
INPATENC(PTR,PTR2) ;ALB/JRP - Determine if an Outpatient Encounter
"RTN","SCDXUTL",44,0)
 ; is for an inpatient appointment
"RTN","SCDXUTL",45,0)
 ;
"RTN","SCDXUTL",46,0)
 ;Input  : PTR - Pointer to one of the following files:
"RTN","SCDXUTL",47,0)
 ;               *  TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73)
"RTN","SCDXUTL",48,0)
 ;               *  OUTPATIENT ENCOUNTER file (#409.68)
"RTN","SCDXUTL",49,0)
 ;               *  DELETED OUTPATIENT ENCOUNTER file (#409.74)
"RTN","SCDXUTL",50,0)
 ;         PTR2 - Denotes which file PTR points to
"RTN","SCDXUTL",51,0)
 ;                0 = TRANSMITTED OUTPATIENT ENCOUNTER file (Default)
"RTN","SCDXUTL",52,0)
 ;                1 = OUTPATIENT ENCOUNTER file
"RTN","SCDXUTL",53,0)
 ;                2 = DELETED OUTPATIENT ENCOUNTER file
"RTN","SCDXUTL",54,0)
 ;Output : 0 - Encounter is not an inpatient appointment
"RTN","SCDXUTL",55,0)
 ;         1 - Encounter is an inpatient appointment
"RTN","SCDXUTL",56,0)
 ;Notes  : 0 is returned if a valid pointer is not passed or the
"RTN","SCDXUTL",57,0)
 ;         entry in the TRANSMITTED OUTPATIENT ENCOUNTER file does
"RTN","SCDXUTL",58,0)
 ;         not point to a valid entry in the OUTPATIENT ENCOUNTER
"RTN","SCDXUTL",59,0)
 ;         file or DELETED OUTPATIENT ENCOUNTER file
"RTN","SCDXUTL",60,0)
 ;
"RTN","SCDXUTL",61,0)
 ;Check input
"RTN","SCDXUTL",62,0)
 S PTR=+$G(PTR)
"RTN","SCDXUTL",63,0)
 Q:('PTR) 0
"RTN","SCDXUTL",64,0)
 S PTR2=+$G(PTR2)
"RTN","SCDXUTL",65,0)
 S:((PTR2<0)!(PTR2>2)) PTR2=0
"RTN","SCDXUTL",66,0)
 I ('PTR) Q:('$D(^SD(409.73,PTR,0))) 0
"RTN","SCDXUTL",67,0)
 I (PTR2=1) Q:('$D(^SCE(PTR,0))) 0
"RTN","SCDXUTL",68,0)
 I (PTR2=2) Q:('$D(^SD(409.74,PTR,0))) 0
"RTN","SCDXUTL",69,0)
 ;Declare variables
"RTN","SCDXUTL",70,0)
 N ZERONODE,STATPTR,STATUS
"RTN","SCDXUTL",71,0)
 ;Passed pointer to TRANSMITTED OUTPATIENT ENCOUNTER file
"RTN","SCDXUTL",72,0)
 ; Convert to pointer to [DELETED] OUTPATIENT ENCOUNTER file
"RTN","SCDXUTL",73,0)
 ; Quit if it can't be converted
"RTN","SCDXUTL",74,0)
 I ('PTR2) D  Q:('PTR) 0
"RTN","SCDXUTL",75,0)
 .S ZERONODE=$G(^SD(409.73,PTR,0))
"RTN","SCDXUTL",76,0)
 .S PTR=+$P(ZERONODE,"^",2)
"RTN","SCDXUTL",77,0)
 .;Entry is for an outpatient encounter
"RTN","SCDXUTL",78,0)
 .I (PTR) S PTR2=1 Q
"RTN","SCDXUTL",79,0)
 .;Entry is for a deleted outpatient encounter
"RTN","SCDXUTL",80,0)
 .S PTR=+$P(ZERONODE,"^",3)
"RTN","SCDXUTL",81,0)
 .S PTR2=2
"RTN","SCDXUTL",82,0)
 ;Get zero node of [deleted] encounter
"RTN","SCDXUTL",83,0)
 S ZERONODE=$G(^SCE(PTR,0))
"RTN","SCDXUTL",84,0)
 S:(PTR2=2) ZERONODE=$G(^SD(409.74,PTR,1))
"RTN","SCDXUTL",85,0)
 ;Get pointer to appointment status
"RTN","SCDXUTL",86,0)
 S STATPTR=+$P(ZERONODE,"^",12)
"RTN","SCDXUTL",87,0)
 Q:('STATPTR) 0
"RTN","SCDXUTL",88,0)
 ;Get zero node of appointment status
"RTN","SCDXUTL",89,0)
 S ZERONODE=$G(^SD(409.63,STATPTR,0))
"RTN","SCDXUTL",90,0)
 ;Get abbreviation for appointment status
"RTN","SCDXUTL",91,0)
 S STATUS=$P(ZERONODE,"^",2)
"RTN","SCDXUTL",92,0)
 ;Inpatient appointments have an abbreviation of 'I'
"RTN","SCDXUTL",93,0)
 Q:(STATUS="I") 1
"RTN","SCDXUTL",94,0)
 ;Not an inpatient appointment
"RTN","SCDXUTL",95,0)
 Q 0
"RTN","SCDXUTL",96,0)
 ;
"RTN","SCDXUTL",97,0)
DATECHK() ;this function call returns whether to require diag/prov based
"RTN","SCDXUTL",98,0)
 ;on the date function call and whether the post init has run.
"RTN","SCDXUTL",99,0)
 ;there are no inout variables.
"RTN","SCDXUTL",100,0)
 ;
"RTN","SCDXUTL",101,0)
 ;a 1 if after 10/1 or the post init has been run to require diag etc.
"RTN","SCDXUTL",102,0)
 ;a 0 if not to require yet
"RTN","SCDXUTL",103,0)
 ;
"RTN","SCDXUTL",104,0)
 N DATE,ANS
"RTN","SCDXUTL",105,0)
 S ANS=$$DATE(DT) I ANS G DATECHKQ
"RTN","SCDXUTL",106,0)
 I $P(^SD(404.91,1,"AMB"),U,7) S ANS=1 G DATECHKQ
"RTN","SCDXUTL",107,0)
 S ANS=0
"RTN","SCDXUTL",108,0)
DATECHKQ Q ANS
"RTN","SCDXUTL",109,0)
 ;
"RTN","SCDXUTL",110,0)
OCCA(CLN) ;This function call returns whether or not the clinic is
"RTN","SCDXUTL",111,0)
 ;considered an occasion of service, based upon file 409.45.
"RTN","SCDXUTL",112,0)
 ;
"RTN","SCDXUTL",113,0)
 ;CLN is the clinic in question
"RTN","SCDXUTL",114,0)
 ;
"RTN","SCDXUTL",115,0)
 ;a 1 if this clinic is an occasion of service clinic
"RTN","SCDXUTL",116,0)
 ;a 0 if not
"RTN","SCDXUTL",117,0)
 ;
"RTN","SCDXUTL",118,0)
 N SCP,SC,ANS
"RTN","SCDXUTL",119,0)
 I '$D(^SC(CLN,0)) S ANS=0 G OCCAQ
"RTN","SCDXUTL",120,0)
 S SCP=$P(^SC(CLN,0),U,7)
"RTN","SCDXUTL",121,0)
 I 'SCP S ANS=0 G OCCAQ
"RTN","SCDXUTL",122,0)
 I '$D(^DIC(40.7,SCP,0)) S ANS=0 G OCCAQ
"RTN","SCDXUTL",123,0)
 S SC=$P(^DIC(40.7,SCP,0),U,2)
"RTN","SCDXUTL",124,0)
 I 'SC S ANS=0 G OCCAQ
"RTN","SCDXUTL",125,0)
 I '$O(^SD(409.45,"B",SC,"")) S ANS=0 G OCCAQ
"RTN","SCDXUTL",126,0)
 I "117^118^119^120^121^123^124^125^126^128^152^165^170^999"[SC S ANS=0 G OCCAQ
"RTN","SCDXUTL",127,0)
 S ANS=1
"RTN","SCDXUTL",128,0)
OCCAQ Q ANS
"RTN","SCDXUTL0")
0^12^B31199923
"RTN","SCDXUTL0",1,0)
SCDXUTL0 ;ALB/ESD - Generic functions for Amb Care HL7 Interface ; 30 Apr 96
"RTN","SCDXUTL0",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCDXUTL0",3,0)
 ;
"RTN","SCDXUTL0",4,0)
 ; This routine contains functions used with the Ambulatory Care
"RTN","SCDXUTL0",5,0)
 ; Reporting Project (ACRP).
"RTN","SCDXUTL0",6,0)
 ;
"RTN","SCDXUTL0",7,0)
MTI(DFN,DATE,EC,AT,SDOE) ;Calculate Means Test Indicator
"RTN","SCDXUTL0",8,0)
 ;
"RTN","SCDXUTL0",9,0)
 ;    Input:     DFN   =  Patient IEN
"RTN","SCDXUTL0",10,0)
 ;               Date  =  Encounter Date/Time
"RTN","SCDXUTL0",11,0)
 ;               EC    =  Eligibility (Code) of Encounter
"RTN","SCDXUTL0",12,0)
 ;               AT    =  Appointment Type of Encounter
"RTN","SCDXUTL0",13,0)
 ;               SDOE  =  Outpatient Encounter IEN
"RTN","SCDXUTL0",14,0)
 ;
"RTN","SCDXUTL0",15,0)
 ;   Output:     MTI   =  Means Test Indicator
"RTN","SCDXUTL0",16,0)
 ;
"RTN","SCDXUTL0",17,0)
 N MT,MTI,SDVD1,SDINPT,SDANS,SDANS1
"RTN","SCDXUTL0",18,0)
 S MTI=""
"RTN","SCDXUTL0",19,0)
 S DFN=$G(DFN),DATE=$G(DATE),EC=$G(EC),AT=$G(AT),SDOE=$G(SDOE)
"RTN","SCDXUTL0",20,0)
 I (DFN="")!(DATE="")!(EC="")!(AT="")!(SDOE="") G MTQ
"RTN","SCDXUTL0",21,0)
 ;
"RTN","SCDXUTL0",22,0)
 ;- VA Code (get from MAS Eligibility Code IEN)
"RTN","SCDXUTL0",23,0)
 S EC=$P($G(^DIC(8.1,$P($G(^DIC(8,+EC,0)),"^",9),0)),"^",4)
"RTN","SCDXUTL0",24,0)
 ;- Non-Veteran
"RTN","SCDXUTL0",25,0)
 I $P($G(^DPT(DFN,"VET")),"^")="N" S MTI="N" G MTQ
"RTN","SCDXUTL0",26,0)
 ;- Dom patient
"RTN","SCDXUTL0",27,0)
 I EC=6 S MTI="X" G MTQ
"RTN","SCDXUTL0",28,0)
 ;- Inpatient status
"RTN","SCDXUTL0",29,0)
 S SDVD1=DATE D INPT^SDOPC1 I SDINPT=1 S MTI="X" G MTQ
"RTN","SCDXUTL0",30,0)
 ;- Service Connected
"RTN","SCDXUTL0",31,0)
 I (EC=1)!(EC=3) S MTI="AS" G MTQ
"RTN","SCDXUTL0",32,0)
 ;
"RTN","SCDXUTL0",33,0)
 I EC=2 D  I MTI'="" G MTQ
"RTN","SCDXUTL0",34,0)
 .;- Mexican Border Period or World War I
"RTN","SCDXUTL0",35,0)
 .I $P($G(^DPT(DFN,.32)),"^",3)=1!($P($G(^DPT(DFN,.32)),"^",3)=3) S MTI="AS" Q
"RTN","SCDXUTL0",36,0)
 .;- Prisoner of War (POW)
"RTN","SCDXUTL0",37,0)
 .I $P($G(^DPT(DFN,.52)),"^",5)="Y" S MTI="AS" Q
"RTN","SCDXUTL0",38,0)
 .;- Housebound
"RTN","SCDXUTL0",39,0)
 .I $P($G(^DPT(DFN,.362)),"^",13)="Y" S MTI="AN" Q
"RTN","SCDXUTL0",40,0)
 ;- Receiving VA Pension
"RTN","SCDXUTL0",41,0)
 I EC=4,$P($G(^DPT(DFN,.362)),"^",14)="Y" S MTI="AN" G MTQ
"RTN","SCDXUTL0",42,0)
 ;
"RTN","SCDXUTL0",43,0)
 I EC=5 D  I MTI'="" G MTQ
"RTN","SCDXUTL0",44,0)
 .;- Eligible for Medicaid
"RTN","SCDXUTL0",45,0)
 .I $P($G(^DPT(DFN,.38)),"^")=1 S MTI="AN" Q
"RTN","SCDXUTL0",46,0)
 .;- Comp & Pen or Class II Dental Appt Type
"RTN","SCDXUTL0",47,0)
 .I (AT=1)!(AT=2) S MTI="X" Q
"RTN","SCDXUTL0",48,0)
 .;- Treatment for AO, IR, EC
"RTN","SCDXUTL0",49,0)
 .F SDANS1=1,2,4 S SDANS=$S('$D(^SDD(409.42,"AO",+SDOE,SDANS1)):"",$P($G(^SDD(409.42,$O(^(SDANS1,0)),0)),"^",3):1,1:0) I SDANS=1 S MTI="AS" Q
"RTN","SCDXUTL0",50,0)
 .;- Means Test Category A or Category C (also Pending Adj = Cat C)
"RTN","SCDXUTL0",51,0)
 .S MT=$$LST^DGMTU(DFN,DATE) D
"RTN","SCDXUTL0",52,0)
 ..I $P(MT,"^",4)="A" S MTI="AN" Q
"RTN","SCDXUTL0",53,0)
 ..I $P(MT,"^",4)="C"!($P(MT,"^",4)="P") S MTI="C"
"RTN","SCDXUTL0",54,0)
 ;- Means Test required and not done/completed
"RTN","SCDXUTL0",55,0)
 S MTI="U"
"RTN","SCDXUTL0",56,0)
MTQ Q MTI
"RTN","SCDXUTL0",57,0)
 ;
"RTN","SCDXUTL0",58,0)
 ;
"RTN","SCDXUTL0",59,0)
PATCLASS(DFN) ; - Return classification questions from PATIENT (#2) file
"RTN","SCDXUTL0",60,0)
 ;           (Agent Orange, Radiation Exposure, Service Connected, and
"RTN","SCDXUTL0",61,0)
 ;            Environmental Contaminants questions)
"RTN","SCDXUTL0",62,0)
 ;
"RTN","SCDXUTL0",63,0)
 ;   Input:  DFN = Patient IEN (from file #2)
"RTN","SCDXUTL0",64,0)
 ;
"RTN","SCDXUTL0",65,0)
 ;  Output:  String containing Y if classification question = YES, N if 
"RTN","SCDXUTL0",66,0)
 ;           = NO, null otherwise (classifications separated by "^")
"RTN","SCDXUTL0",67,0)
 ;
"RTN","SCDXUTL0",68,0)
 N NODE,PATCLASS
"RTN","SCDXUTL0",69,0)
 S $P(PATCLASS,"^",4)=""
"RTN","SCDXUTL0",70,0)
 S NODE=$G(^DPT(DFN,.321)),$P(PATCLASS,"^",1)=$P(NODE,"^",2),$P(PATCLASS,"^",2)=$P(NODE,"^",3)
"RTN","SCDXUTL0",71,0)
 S $P(PATCLASS,"^",3)=$P($G(^DPT(DFN,.3)),"^"),$P(PATCLASS,"^",4)=$P($G(^DPT(DFN,.322)),"^",13)
"RTN","SCDXUTL0",72,0)
 Q PATCLASS
"RTN","SCDXUTL0",73,0)
 ;
"RTN","SCDXUTL0",74,0)
 ;
"RTN","SCDXUTL0",75,0)
CLASS(SDOE,SCDXARRY) ; - Return array of classification types for encounter
"RTN","SCDXUTL0",76,0)
 ;
"RTN","SCDXUTL0",77,0)
 ;   Input:  SDOE = Outpatient Encounter IEN (from file #409.68)
"RTN","SCDXUTL0",78,0)
 ;
"RTN","SCDXUTL0",79,0)
 ;  Output:  Array (pass desired name as parameter) containing
"RTN","SCDXUTL0",80,0)
 ;           Classification Type^Value
"RTN","SCDXUTL0",81,0)
 ;
"RTN","SCDXUTL0",82,0)
 N CLASS,I,X
"RTN","SCDXUTL0",83,0)
 S CLASS="",(I,X)=0
"RTN","SCDXUTL0",84,0)
 S SDOE=+$G(SDOE)
"RTN","SCDXUTL0",85,0)
 F  S CLASS=+$O(^SDD(409.42,"OE",SDOE,CLASS)) Q:'CLASS  D
"RTN","SCDXUTL0",86,0)
 . S I=$P($G(^SDD(409.42,CLASS,0)),"^"),X=X+1
"RTN","SCDXUTL0",87,0)
 . S @SCDXARRY@(I)=$P($G(^SDD(409.42,CLASS,0)),"^")_"^"_$P($G(^SDD(409.42,CLASS,0)),"^",3)
"RTN","SCDXUTL0",88,0)
CLASSQ S @SCDXARRY@(0)=X
"RTN","SCDXUTL0",89,0)
 Q
"RTN","SCDXUTL0",90,0)
 ;
"RTN","SCDXUTL0",91,0)
 ;
"RTN","SCDXUTL0",92,0)
CHKCLASS(DFN,SDOE) ; - Get classification data for HL7 VAFHLZCL segment
"RTN","SCDXUTL0",93,0)
 ;
"RTN","SCDXUTL0",94,0)
 ;   Input:  DFN = Patient IEN (from file #2)
"RTN","SCDXUTL0",95,0)
 ;          SDOE = Outpatient Encounter IEN (from file #409.68)
"RTN","SCDXUTL0",96,0)
 ;
"RTN","SCDXUTL0",97,0)
 ;  Output:  String separated by "^" containing: 
"RTN","SCDXUTL0",98,0)
 ;           1 (patient class = YES and encounter class = YES)
"RTN","SCDXUTL0",99,0)
 ;           0 (patient class = YES and encounter class = NO)
"RTN","SCDXUTL0",100,0)
 ;           HLQ ("""""") otherwise
"RTN","SCDXUTL0",101,0)
 ;
"RTN","SCDXUTL0",102,0)
EN N I,OECLASS,OUT,PATCLASS,SUB,TYPE,X
"RTN","SCDXUTL0",103,0)
 S PATCLASS=$$PATCLASS(DFN)
"RTN","SCDXUTL0",104,0)
 D CLASS(SDOE,"OECLASS")
"RTN","SCDXUTL0",105,0)
 S SUB=0,X=$L(PATCLASS,"^")
"RTN","SCDXUTL0",106,0)
 F I=1:1:X S $P(OUT,"^",I)=""""""
"RTN","SCDXUTL0",107,0)
 ;
"RTN","SCDXUTL0",108,0)
 I '+$G(OECLASS(SUB)) F I=1:1:X I $P(PATCLASS,"^",I)="Y" S $P(OUT,"^",I)=0  G ENQ
"RTN","SCDXUTL0",109,0)
 ;
"RTN","SCDXUTL0",110,0)
 F  S SUB=$O(OECLASS(SUB)) Q:SUB=""  D
"RTN","SCDXUTL0",111,0)
 . S TYPE=$G(OECLASS(SUB))
"RTN","SCDXUTL0",112,0)
 . S $P(OUT,"^",+TYPE)=$S($P(PATCLASS,"^",+TYPE)="Y"&(+$P(TYPE,"^",2)=1):1,($P(PATCLASS,"^",+TYPE)="Y")&(+$P(TYPE,"^",2)=0):0,1:"""""")
"RTN","SCDXUTL0",113,0)
 ;
"RTN","SCDXUTL0",114,0)
ENQ Q OUT
"RTN","SCDXUTL0",115,0)
 ;
"RTN","SCDXUTL0",116,0)
 ;
"RTN","SCDXUTL0",117,0)
POV(DFN,DATE,CLINIC,APTYP) ; - Determine Purpose of Visit for encounter
"RTN","SCDXUTL0",118,0)
 ;
"RTN","SCDXUTL0",119,0)
 ;   Input:  DFN = Patient IEN
"RTN","SCDXUTL0",120,0)
 ;          DATE = Appointment Date/Time
"RTN","SCDXUTL0",121,0)
 ;        CLINIC = Clinic
"RTN","SCDXUTL0",122,0)
 ;         APTYP = Appointment Type
"RTN","SCDXUTL0",123,0)
 ;
"RTN","SCDXUTL0",124,0)
 ;  Output:  Purpose of Visit value (combination of Purpose of Visit
"RTN","SCDXUTL0",125,0)
 ;           and Appointment Type)
"RTN","SCDXUTL0",126,0)
 ;
"RTN","SCDXUTL0",127,0)
 N POV,SCDXPOV
"RTN","SCDXUTL0",128,0)
 I (DFN=""!(DATE="")!(CLINIC="")!(APTYP="")) G POVQ
"RTN","SCDXUTL0",129,0)
 I $P($G(^DPT(DFN,"S",+DATE,0)),"^")'=CLINIC G POVQ
"RTN","SCDXUTL0",130,0)
 S POV=$P($G(^DPT(DFN,"S",+DATE,0)),"^",7),POV=$S($L(POV)=1:"0"_POV,1:POV)
"RTN","SCDXUTL0",131,0)
 S APTYP=$S($L(APTYP)=1:"0"_APTYP,1:APTYP)
"RTN","SCDXUTL0",132,0)
 S SCDXPOV=POV_APTYP
"RTN","SCDXUTL0",133,0)
POVQ Q $G(SCDXPOV)
"RTN","SCDXUTL0",134,0)
 ;
"RTN","SCDXUTL0",135,0)
 ;
"RTN","SCDXUTL0",136,0)
SCODE(SDOE,SCDXARRY) ; Return array of stop codes for encounter
"RTN","SCDXUTL0",137,0)
 ;
"RTN","SCDXUTL0",138,0)
 ;   Input:  SDOE = Outpatient Encounter IEN (from file #409.68)
"RTN","SCDXUTL0",139,0)
 ;
"RTN","SCDXUTL0",140,0)
 ;  Output:  Array (pass desired name as parameter) containing
"RTN","SCDXUTL0",141,0)
 ;           stop codes
"RTN","SCDXUTL0",142,0)
 ;
"RTN","SCDXUTL0",143,0)
 ;
"RTN","SCDXUTL0",144,0)
 N CNT,I,SDOE0,SDOEC,SDOEC0
"RTN","SCDXUTL0",145,0)
 S CNT=1,(I,SDOEC)=0
"RTN","SCDXUTL0",146,0)
 S SDOE=+$G(SDOE)
"RTN","SCDXUTL0",147,0)
 I '$D(^SCE(SDOE,0)) G SCODEQ
"RTN","SCDXUTL0",148,0)
 I '$P($G(^SCE(SDOE,0)),"^",3) G SCODEQ
"RTN","SCDXUTL0",149,0)
 S SDOE0=$G(^SCE(SDOE,0))
"RTN","SCDXUTL0",150,0)
 ;
"RTN","SCDXUTL0",151,0)
 ;- Get stop code from parent encounter
"RTN","SCDXUTL0",152,0)
 I $P(SDOE0,"^",3) S @SCDXARRY@(CNT)=$P(SDOE0,"^",3),I=CNT
"RTN","SCDXUTL0",153,0)
 ;
"RTN","SCDXUTL0",154,0)
 ;- Get stop code from child encounter (credit stop)
"RTN","SCDXUTL0",155,0)
 F  S SDOEC=+$O(^SCE("APAR",SDOE,SDOEC)) Q:('SDOEC)!(CNT=2)  D
"RTN","SCDXUTL0",156,0)
 . S SDOEC0=$G(^SCE(SDOEC,0))
"RTN","SCDXUTL0",157,0)
 . I $P(SDOEC0,"^",3),($P(SDOEC0,"^",8)=4) D
"RTN","SCDXUTL0",158,0)
 .. S CNT=CNT+1,I=CNT
"RTN","SCDXUTL0",159,0)
 .. S @SCDXARRY@(CNT)=$P(SDOEC0,"^",3)
"RTN","SCDXUTL0",160,0)
SCODEQ S @SCDXARRY@(0)=I
"RTN","SCDXUTL0",161,0)
 Q
"RTN","SCDXUTL0",162,0)
 ;
"RTN","SCDXUTL0",163,0)
 ;
"RTN","SCDXUTL0",164,0)
PROC(SDOE,SCDXARRY) ; Return array of procedures for encounter
"RTN","SCDXUTL0",165,0)
 ;
"RTN","SCDXUTL0",166,0)
 ;
"RTN","SCDXUTL0",167,0)
 ;   Input:  SDOE = Outpatient Encounter IEN (from file #409.68)
"RTN","SCDXUTL0",168,0)
 ;
"RTN","SCDXUTL0",169,0)
 ;  Output:  Array (pass desired name as parameter) containing
"RTN","SCDXUTL0",170,0)
 ;           procedures
"RTN","SCDXUTL0",171,0)
 ;
"RTN","SCDXUTL0",172,0)
 N CNT,SDOEC
"RTN","SCDXUTL0",173,0)
 S CNT=0,SDOE=+$G(SDOE),SDOEC=""
"RTN","SCDXUTL0",174,0)
 I '$D(^SCE(SDOE,0)) G PROCQ
"RTN","SCDXUTL0",175,0)
 ;
"RTN","SCDXUTL0",176,0)
 ;- Use parent encounter for standalone add/edit
"RTN","SCDXUTL0",177,0)
 I $P($G(^SCE(SDOE,0)),"^",8)=2 D GETPROC(.CNT,SDOE,SCDXARRY) G PROCQ
"RTN","SCDXUTL0",178,0)
 ;
"RTN","SCDXUTL0",179,0)
 ;- Use child encounter(s) for appointment and disposition
"RTN","SCDXUTL0",180,0)
 F  S SDOEC=$O(^SCE("APAR",SDOE,SDOEC)) Q:'SDOEC  I $P($G(^SCE(SDOEC,0)),"^",8)=2 D GETPROC(.CNT,SDOEC,SCDXARRY)
"RTN","SCDXUTL0",181,0)
 ;
"RTN","SCDXUTL0",182,0)
 ;- Array of procedures
"RTN","SCDXUTL0",183,0)
PROCQ S @SCDXARRY@(0)=CNT
"RTN","SCDXUTL0",184,0)
 Q
"RTN","SCDXUTL0",185,0)
 ;
"RTN","SCDXUTL0",186,0)
 ;
"RTN","SCDXUTL0",187,0)
GETPROC(CNT,ENC,SCDXARRY) ;Get procedures from Scheduling Visits file
"RTN","SCDXUTL0",188,0)
 ;
"RTN","SCDXUTL0",189,0)
 ;
"RTN","SCDXUTL0",190,0)
 N DATE,DFN,EXTREF,I,NODE,PRNODE,SDVDT,SUB,X
"RTN","SCDXUTL0",191,0)
 S NODE=$G(^SCE(ENC,0)),DATE=+$P(NODE,"^"),DFN=+$P(NODE,"^",2),EXTREF=$P(NODE,"^",9)
"RTN","SCDXUTL0",192,0)
 S DATE=$P(DATE,"."),SDVDT=$P($G(^SDV("ADT",DFN,DATE)),"^")
"RTN","SCDXUTL0",193,0)
 Q:'$G(SDVDT)
"RTN","SCDXUTL0",194,0)
 F I=1:1 Q:'$P(EXTREF,":",I)  D
"RTN","SCDXUTL0",195,0)
 . S SUB=$P(EXTREF,":",I)
"RTN","SCDXUTL0",196,0)
 . I '$D(^SDV(SDVDT,"CS",SUB,0)) Q
"RTN","SCDXUTL0",197,0)
 . I '$D(^SDV(SDVDT,"CS",SUB,"PR")) Q
"RTN","SCDXUTL0",198,0)
 . I $D(^SDV(SDVDT,"CS",SUB,"PR")) S PRNODE=^("PR")
"RTN","SCDXUTL0",199,0)
 . I $L(PRNODE,"^")<1 Q
"RTN","SCDXUTL0",200,0)
 . F X=1:1:$L(PRNODE,"^") I $P(PRNODE,"^",X)'="" S CNT=CNT+1,@SCDXARRY@(CNT)=$P(PRNODE,"^",X)
"RTN","SCDXUTL0",201,0)
 Q
"RTN","SCDXUTL1")
0^13^B3627623
"RTN","SCDXUTL1",1,0)
SCDXUTL1 ;ALB/JRP - GENERAL UTILITY ROUTINES;10-MAY-1996
"RTN","SCDXUTL1",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXUTL1",3,0)
 ;
"RTN","SCDXUTL1",4,0)
GETDTRNG(EARLIEST,LATEST,HELPBGN,HELPEND) ;Prompt user for a date range
"RTN","SCDXUTL1",5,0)
 ;
"RTN","SCDXUTL1",6,0)
 ;Input  : EARLIEST - Earliest date allowed in FileMan format (Optional)
"RTN","SCDXUTL1",7,0)
 ;         LATEST - Latest date allowed in FileMan format (Optional)
"RTN","SCDXUTL1",8,0)
 ;         HELPBGN - Array containing help information for beginning
"RTN","SCDXUTL1",9,0)
 ;                   date (Full global reference) (Optional)
"RTN","SCDXUTL1",10,0)
 ;         HELPEND - Array containing help information for ending
"RTN","SCDXUTL1",11,0)
 ;                   date (Full global reference) (Optional)
"RTN","SCDXUTL1",12,0)
 ;Output : Begin^End - Success
"RTN","SCDXUTL1",13,0)
 ;           Begin - Beginning date
"RTN","SCDXUTL1",14,0)
 ;           End - Ending date
"RTN","SCDXUTL1",15,0)
 ;         -1 - User abort / timed out
"RTN","SCDXUTL1",16,0)
 ;Notes  : HELPBGN & HELPEND arrays have same format as DIR("?",#) array
"RTN","SCDXUTL1",17,0)
 ;
"RTN","SCDXUTL1",18,0)
 ;Check input
"RTN","SCDXUTL1",19,0)
 S EARLIEST=$G(EARLIEST)
"RTN","SCDXUTL1",20,0)
 S LATEST=$G(LATEST)
"RTN","SCDXUTL1",21,0)
 S HELPBGN=$G(HELPBGN)
"RTN","SCDXUTL1",22,0)
 S HELPEND=$G(HELPEND)
"RTN","SCDXUTL1",23,0)
 ;Declare variables
"RTN","SCDXUTL1",24,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,BEGIN,END
"RTN","SCDXUTL1",25,0)
 ;Get beginning date
"RTN","SCDXUTL1",26,0)
 S DIR(0)="DA^"_EARLIEST_":"_LATEST_":EPX"
"RTN","SCDXUTL1",27,0)
 S DIR("A")="Enter beginning date: "
"RTN","SCDXUTL1",28,0)
 I (HELPBGN'="") M DIR("?")=@HELPBGN
"RTN","SCDXUTL1",29,0)
 D ^DIR
"RTN","SCDXUTL1",30,0)
 S BEGIN=+Y
"RTN","SCDXUTL1",31,0)
 ;User abort / time out
"RTN","SCDXUTL1",32,0)
 Q:($D(DIRUT)) -1
"RTN","SCDXUTL1",33,0)
 ;Get ending date
"RTN","SCDXUTL1",34,0)
 K DIR
"RTN","SCDXUTL1",35,0)
 S DIR(0)="DA^"_BEGIN_":"_LATEST_":EPX"
"RTN","SCDXUTL1",36,0)
 S DIR("A")="Enter ending date: "
"RTN","SCDXUTL1",37,0)
 I (HELPEND'="") M DIR("?")=@HELPEND
"RTN","SCDXUTL1",38,0)
 D ^DIR
"RTN","SCDXUTL1",39,0)
 S END=+Y
"RTN","SCDXUTL1",40,0)
 ;User abort / time out
"RTN","SCDXUTL1",41,0)
 Q:($D(DIRUT)) -1
"RTN","SCDXUTL1",42,0)
 ;Done
"RTN","SCDXUTL1",43,0)
 Q BEGIN_"^"_END
"RTN","SCDXUTL1",44,0)
 ;
"RTN","SCDXUTL1",45,0)
REPEAT(CHAR,TIMES) ;Repeat a string
"RTN","SCDXUTL1",46,0)
 ;INPUT  : CHAR - Character to repeat
"RTN","SCDXUTL1",47,0)
 ;         TIMES - Number of times to repeat CHAR
"RTN","SCDXUTL1",48,0)
 ;OUTPUT : s - String of CHAR that is TIMES long
"RTN","SCDXUTL1",49,0)
 ;         "" - Error (bad input)
"RTN","SCDXUTL1",50,0)
 ;
"RTN","SCDXUTL1",51,0)
 ;Check input
"RTN","SCDXUTL1",52,0)
 Q:($G(CHAR)="") ""
"RTN","SCDXUTL1",53,0)
 Q:((+$G(TIMES))=0) ""
"RTN","SCDXUTL1",54,0)
 ;Return string
"RTN","SCDXUTL1",55,0)
 Q $TR($J("",TIMES)," ",CHAR)
"RTN","SCDXUTL1",56,0)
 ;
"RTN","SCDXUTL1",57,0)
INSERT(INSTR,OUTSTR,COLUMN,LENGTH) ;Insert a string into another string
"RTN","SCDXUTL1",58,0)
 ;INPUT  : INSTR - String to insert
"RTN","SCDXUTL1",59,0)
 ;         OUTSTR - String to insert into
"RTN","SCDXUTL1",60,0)
 ;         COLUMN - Where to begin insertion (defaults to end of OUTSTR)
"RTN","SCDXUTL1",61,0)
 ;         LENGTH - Number of characters to clear from OUTSTR
"RTN","SCDXUTL1",62,0)
 ;                  (defaults to length of INSTR)
"RTN","SCDXUTL1",63,0)
 ;OUTPUT : s - INSTR will be placed into OUTSTR starting at COLUMN
"RTN","SCDXUTL1",64,0)
 ;             using LENGTH characters
"RTN","SCDXUTL1",65,0)
 ;         "" - Error (bad input)
"RTN","SCDXUTL1",66,0)
 ;
"RTN","SCDXUTL1",67,0)
 ;NOTE : This module is based on $$SETSTR^VALM1
"RTN","SCDXUTL1",68,0)
 ;
"RTN","SCDXUTL1",69,0)
 ;Check input
"RTN","SCDXUTL1",70,0)
 S INSTR=$G(INSTR)
"RTN","SCDXUTL1",71,0)
 Q:(INSTR="") $G(OUTSTR)
"RTN","SCDXUTL1",72,0)
 S OUTSTR=$G(OUTSTR)
"RTN","SCDXUTL1",73,0)
 S:('$D(COLUMN)) COLUMN=$L(OUTSTR)+1
"RTN","SCDXUTL1",74,0)
 S:('$D(LENGTH)) LENGTH=$L(INSTR)
"RTN","SCDXUTL1",75,0)
 ;Declare variables
"RTN","SCDXUTL1",76,0)
 N FRONT,END
"RTN","SCDXUTL1",77,0)
 S FRONT=$E((OUTSTR_$J("",COLUMN-1)),1,(COLUMN-1))
"RTN","SCDXUTL1",78,0)
 S END=$E(OUTSTR,(COLUMN+LENGTH),$L(OUTSTR))
"RTN","SCDXUTL1",79,0)
 ;Insert string
"RTN","SCDXUTL1",80,0)
 Q FRONT_$E((INSTR_$J("",LENGTH)),1,LENGTH)_END
"RTN","SCDXUTL2")
0^14^B2465107
"RTN","SCDXUTL2",1,0)
SCDXUTL2 ;ALB/MTC - PRINT UTILITY ROUTINES;23-MAY-1996
"RTN","SCDXUTL2",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCDXUTL2",3,0)
 ;
"RTN","SCDXUTL2",4,0)
PAT(D0) ;-- This function is used for the computed field 20.01 in file
"RTN","SCDXUTL2",5,0)
 ;   Transmission OutPatient Encounter file 409.73. For the given
"RTN","SCDXUTL2",6,0)
 ;   entry in 409.73 a determination of the PATIENT involved with
"RTN","SCDXUTL2",7,0)
 ;   the transaction will be determined.
"RTN","SCDXUTL2",8,0)
 ;
"RTN","SCDXUTL2",9,0)
 N SDTOE
"RTN","SCDXUTL2",10,0)
 S SDTOE=$G(^SD(409.73,D0,0))
"RTN","SCDXUTL2",11,0)
 I $P(SDTOE,U,2)="",$P(SDTOE,U,3) D
"RTN","SCDXUTL2",12,0)
 . S X=$P($G(^SD(409.74,$P(SDTOE,U,3),0)),U,2)
"RTN","SCDXUTL2",13,0)
 E  I $P(SDTOE,U,2),$P(SDTOE,U,3)="" D
"RTN","SCDXUTL2",14,0)
 . S X=$P($G(^SCE($P(SDTOE,U,2),0)),U,2)
"RTN","SCDXUTL2",15,0)
 E  S X=""
"RTN","SCDXUTL2",16,0)
 I X S X=$P($G(^DPT(X,0)),U)
"RTN","SCDXUTL2",17,0)
 Q
"RTN","SCDXUTL2",18,0)
 ;
"RTN","SCDXUTL2",19,0)
ECDT(D0) ;-- This function is used for the computed field 20.02 in file
"RTN","SCDXUTL2",20,0)
 ;   Transmission OutPatient Encounter file 409.73. For the given
"RTN","SCDXUTL2",21,0)
 ;   entry in 409.73 a determination of the ENCOUNTER D/T involved with
"RTN","SCDXUTL2",22,0)
 ;   the transaction will be determined.
"RTN","SCDXUTL2",23,0)
 ;
"RTN","SCDXUTL2",24,0)
 N SDTOE
"RTN","SCDXUTL2",25,0)
 S SDTOE=$G(^SD(409.73,D0,0))
"RTN","SCDXUTL2",26,0)
 I $P(SDTOE,U,2)="",$P(SDTOE,U,3) D
"RTN","SCDXUTL2",27,0)
 . S X=$P($G(^SD(409.74,$P(SDTOE,U,3),0)),U)
"RTN","SCDXUTL2",28,0)
 E  I $P(SDTOE,U,2),$P(SDTOE,U,3)="" D
"RTN","SCDXUTL2",29,0)
 . S X=$P($G(^SCE($P(SDTOE,U,2),0)),U)
"RTN","SCDXUTL2",30,0)
 E  S X=""
"RTN","SCDXUTL2",31,0)
 I X S Y=X D DD^%DT S X=$TR(Y,"@"," ")
"RTN","SCDXUTL2",32,0)
 Q
"RTN","SCDXUTL2",33,0)
 ;
"RTN","SCDXUTL2",34,0)
ECLOC(D0) ;-- This function is used for the computed field 20.03 in file
"RTN","SCDXUTL2",35,0)
 ;   Transmission OutPatient Encounter file 409.73. For the given
"RTN","SCDXUTL2",36,0)
 ;   entry in 409.73 a determination of the LOCATION involved with
"RTN","SCDXUTL2",37,0)
 ;   the transaction will be determined.
"RTN","SCDXUTL2",38,0)
 ;
"RTN","SCDXUTL2",39,0)
 N SDTOE
"RTN","SCDXUTL2",40,0)
 S SDTOE=$G(^SD(409.73,D0,0))
"RTN","SCDXUTL2",41,0)
 I $P(SDTOE,U,2)="",$P(SDTOE,U,3) D
"RTN","SCDXUTL2",42,0)
 . S X=$P($G(^SD(409.74,$P(SDTOE,U,3),1)),U,4)
"RTN","SCDXUTL2",43,0)
 E  I $P(SDTOE,U,2),$P(SDTOE,U,3)="" D
"RTN","SCDXUTL2",44,0)
 . S X=$P($G(^SCE($P(SDTOE,U,2),0)),U,4)
"RTN","SCDXUTL2",45,0)
 E  S X=""
"RTN","SCDXUTL2",46,0)
 I X S X=$P($G(^SC(X,0)),U)
"RTN","SCDXUTL2",47,0)
 Q
"RTN","SCDXUTL2",48,0)
 ;
"RTN","SCDXUTL2",49,0)
XDATE(D0) ;-- This function is used for the computed field 10.01 in file
"RTN","SCDXUTL2",50,0)
 ;  Transmitted OutPatinet Encounter Error file 409.75. For the given
"RTN","SCDXUTL2",51,0)
 ;  entry the x-mit date to NPCDB will be determined.
"RTN","SCDXUTL2",52,0)
 N SDXDT
"RTN","SCDXUTL2",53,0)
 S X=""
"RTN","SCDXUTL2",54,0)
 S SDXDT=$P($G(^SD(409.73,+$P($G(^SD(409.75,D0,0)),U),1)),U)
"RTN","SCDXUTL2",55,0)
 I SDXDT S Y=SDXDT X ^DD("DD") S X=$TR(Y,"@"," ")
"RTN","SCDXUTL2",56,0)
 Q
"RTN","SCMSP")
0^15^B43735400
"RTN","SCMSP",1,0)
SCMSP ;ALB/MTC - POST INIT ROUTINE;28-MAY-1996
"RTN","SCMSP",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSP",3,0)
 ;
"RTN","SCMSP",4,0)
HOPUP ;-- This function will update all the clinics in file #44 to
"RTN","SCMSP",5,0)
 ;   require Provider and Diagnosis for checkout. Using the "B"
"RTN","SCMSP",6,0)
 ;   x-ref a check will be performed to make sure that the location
"RTN","SCMSP",7,0)
 ;   is clinic then fields 26 (Ask provider@ CO) and 27 (Ask diagnosis
"RTN","SCMSP",8,0)
 ;   @ CO) will be set to 1 (REQUIRED).
"RTN","SCMSP",9,0)
 ;
"RTN","SCMSP",10,0)
 N SCX,SCY,SCZ,DIC,DIE,DA,DR,X,Y,%,%H,%I
"RTN","SCMSP",11,0)
 N MSGTXT,XMB,XMTEXT,XMY,XMDUZ,XMDT,XMZ
"RTN","SCMSP",12,0)
 ;
"RTN","SCMSP",13,0)
 S SCX=0
"RTN","SCMSP",14,0)
 F  S SCX=$O(^SC("B",SCX)) Q:SCX=""  S SCY=0 F  S SCY=$O(^SC("B",SCX,SCY)) Q:'SCY  D
"RTN","SCMSP",15,0)
 . S SCZ=$G(^SC(SCY,0)) Q:SCZ=""
"RTN","SCMSP",16,0)
 . I $P(SCZ,U,3)'="C" Q
"RTN","SCMSP",17,0)
 . I $$OCCA^SCDXUTL(SCY) Q
"RTN","SCMSP",18,0)
 . S DIE="^SC(",DA=SCY,DR="26///1;27///1" D ^DIE
"RTN","SCMSP",19,0)
 ;Get current date/time
"RTN","SCMSP",20,0)
 D NOW^%DTC
"RTN","SCMSP",21,0)
 ;Convert to external format
"RTN","SCMSP",22,0)
 S SCZ=$P(%,".",2)_"000000"
"RTN","SCMSP",23,0)
 S SCY=$E(SCZ,1,2)_":"_$E(SCZ,3,4)_":"_$E(SCZ,5,6)
"RTN","SCMSP",24,0)
 S SCX=%I(1)_"/"_%I(2)_"/"_(%I(3)+1700)_" @ "_SCY
"RTN","SCMSP",25,0)
 ;Store completion time in Scheduling Parameter file
"RTN","SCMSP",26,0)
 S SCZ=0
"RTN","SCMSP",27,0)
 F X=1:1:10 L +^SD(404.91,1,"AMB"):5 I ($T) S SCZ=1 Q
"RTN","SCMSP",28,0)
 S:(SCZ) $P(^SD(404.91,1,"AMB"),"^",7)=%
"RTN","SCMSP",29,0)
 L -^SD(404.91,1,"AMB")
"RTN","SCMSP",30,0)
 ;Send completion bulletin
"RTN","SCMSP",31,0)
 ;Set message text
"RTN","SCMSP",32,0)
 S MSGTXT(1)=" "
"RTN","SCMSP",33,0)
 S MSGTXT(2)="Updating of all clinics contained in the HOSPITAL LOCATION"
"RTN","SCMSP",34,0)
 S MSGTXT(3)="file (#44) to require provider and diagnosis for checkout"
"RTN","SCMSP",35,0)
 S MSGTXT(4)="completed on "_SCX
"RTN","SCMSP",36,0)
 S MSGTXT(5)=" "
"RTN","SCMSP",37,0)
 ;Set bulletin subject
"RTN","SCMSP",38,0)
 S XMB(1)="HOSPITAL LOCATION UPDATE COMPLETED"
"RTN","SCMSP",39,0)
 ;Deliver bulletin
"RTN","SCMSP",40,0)
 S XMB="SCDX AMBCARE TO NPCDB SUMMARY"
"RTN","SCMSP",41,0)
 S XMTEXT="MSGTXT("
"RTN","SCMSP",42,0)
 D ^XMB
"RTN","SCMSP",43,0)
 Q
"RTN","SCMSP",44,0)
 ;
"RTN","SCMSP",45,0)
PARAM ;ALB/JLU - This entry point will set the Amb Care parameters in the
"RTN","SCMSP",46,0)
 ; Scheduling parameter file
"RTN","SCMSP",47,0)
 ;
"RTN","SCMSP",48,0)
 N DIC,DIE,DA,DR,X,Y,DTOUT,DUOUT,MSGTXT,DELAY
"RTN","SCMSP",49,0)
 N PTRPAR,DLAYGO,DINUM,NODE,TASKNUM,QUEUEDT
"RTN","SCMSP",50,0)
 D BMES^XPDUTL(">>> Setting parameters contained in SCHEDULING PARAMETER file (#404.91)")
"RTN","SCMSP",51,0)
 ;Create/find entry
"RTN","SCMSP",52,0)
 S DIC="^SD(404.91,"
"RTN","SCMSP",53,0)
 S DIC(0)="LX"
"RTN","SCMSP",54,0)
 S DIC("DR")=".001///1"
"RTN","SCMSP",55,0)
 S DLAYGO=404.91
"RTN","SCMSP",56,0)
 S DINUM=1
"RTN","SCMSP",57,0)
 S X=1
"RTN","SCMSP",58,0)
 D ^DIC
"RTN","SCMSP",59,0)
 S PTRPAR=+Y
"RTN","SCMSP",60,0)
 ;Unable to create/find entry - quit
"RTN","SCMSP",61,0)
 I (Y<0) D  Q
"RTN","SCMSP",62,0)
 .S MSGTXT(1)="   *** Unable to create/find entry in Scheduling Parameter file"
"RTN","SCMSP",63,0)
 .S MSGTXT(2)="   *** Unable to store parameters relating to Ambulatory Care"
"RTN","SCMSP",64,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP",65,0)
 ;Get check point's parameter data.  This value will be in the
"RTN","SCMSP",66,0)
 ; format QueueTime-TaskNumber
"RTN","SCMSP",67,0)
 S X=$$PARCP^XPDUTL("SCMS01")
"RTN","SCMSP",68,0)
 S QUEUEDT=$P(X,"-",1)
"RTN","SCMSP",69,0)
 S TASKNUM=$P(X,"-",2)
"RTN","SCMSP",70,0)
 ;Store Ambulatory Care parameters - using hard set since there's no
"RTN","SCMSP",71,0)
 ; cross references on these fields
"RTN","SCMSP",72,0)
 S NODE=$G(^SD(404.91,PTRPAR,"AMB"))
"RTN","SCMSP",73,0)
 S $P(NODE,U,1)=+$P(NODE,U,1)
"RTN","SCMSP",74,0)
 S $P(NODE,U,2)=2961001
"RTN","SCMSP",75,0)
 S $P(NODE,U,3)=2961101
"RTN","SCMSP",76,0)
 S DELAY=+$P(NODE,U,4)
"RTN","SCMSP",77,0)
 S:('DELAY) DELAY=2
"RTN","SCMSP",78,0)
 S $P(NODE,U,4)=DELAY
"RTN","SCMSP",79,0)
 S $P(NODE,U,5)=QUEUEDT
"RTN","SCMSP",80,0)
 S $P(NODE,U,6)=TASKNUM
"RTN","SCMSP",81,0)
 S $P(NODE,U,7)="0000000"
"RTN","SCMSP",82,0)
 S ^SD(404.91,1,"AMB")=NODE
"RTN","SCMSP",83,0)
 D MES^XPDUTL("    Parameters relating to Ambulatory Care have been stored")
"RTN","SCMSP",84,0)
 Q
"RTN","SCMSP",85,0)
 ;
"RTN","SCMSP",86,0)
MG4BULL ;ALB/JRP - Attach Mail Group that receives OPC generation bulletin
"RTN","SCMSP",87,0)
 ; to the Ambulatory Care transmission summary bulletin
"RTN","SCMSP",88,0)
 ;
"RTN","SCMSP",89,0)
 ;Input  : None
"RTN","SCMSP",90,0)
 ;Output : None
"RTN","SCMSP",91,0)
 ;Notes  : This is a KIDS complient check point
"RTN","SCMSP",92,0)
 ;
"RTN","SCMSP",93,0)
 ;Declare variables
"RTN","SCMSP",94,0)
 N DIC,DIE,DA,DR,X,Y,DTOUT,DUOUT,OPCMG,BULLNAME,PTRBULL,MSGTXT
"RTN","SCMSP",95,0)
 D BMES^XPDUTL(">>> Attaching mail group to Ambulatory Care transmission summary bulletin")
"RTN","SCMSP",96,0)
 ;Get name of Mail Group that receives OPC generation bulletin
"RTN","SCMSP",97,0)
 S OPCMG=$$OPCMG^SCMSPU1(1)
"RTN","SCMSP",98,0)
 I (OPCMG="") D  Q
"RTN","SCMSP",99,0)
 .S MSGTXT(1)="    ** MAS PARAMETER file (#43) does not have a value for"
"RTN","SCMSP",100,0)
 .S MSGTXT(2)="       the OPC GENERATE MAIL GROUP field (#216)"
"RTN","SCMSP",101,0)
 .S MSGTXT(3)="    ** Unable to attach mail group to the SCDX AMBCARE"
"RTN","SCMSP",102,0)
 .S MSGTXT(4)="       TO NPCDB SUMMARY bulletin"
"RTN","SCMSP",103,0)
 .S MSGTXT(5)="    ** Mail group must be added to bulletin manually"
"RTN","SCMSP",104,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP",105,0)
 ;Get pointer to Ambulatory Care transmission summary bulletin
"RTN","SCMSP",106,0)
 S BULLNAME="SCDX AMBCARE TO NPCDB SUMMARY"
"RTN","SCMSP",107,0)
 S PTRBULL=+$O(^XMB(3.6,"B",BULLNAME,0))
"RTN","SCMSP",108,0)
 I ('PTRBULL) D  Q
"RTN","SCMSP",109,0)
 .S MSGTXT(1)="    ** Unable to find entry for SCDX AMBCARE TO NPCDB"
"RTN","SCMSP",110,0)
 .S MSGTXT(2)="       SUMMARY in BULLETIN file (#3.6)"
"RTN","SCMSP",111,0)
 .S MSGTXT(3)="    ** Bulletin must be manually entered"
"RTN","SCMSP",112,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP",113,0)
 ;Attach Mail Group to Ambulatory Care transmission summary bulletin
"RTN","SCMSP",114,0)
 S DIC="^XMB(3.6,"_PTRBULL_",2,"
"RTN","SCMSP",115,0)
 S DIC(0)="LX"
"RTN","SCMSP",116,0)
 S DIC("P")=$P(^DD(3.6,4,0),"^",2)
"RTN","SCMSP",117,0)
 S DA(1)=PTRBULL
"RTN","SCMSP",118,0)
 S DLAYGO=3.6
"RTN","SCMSP",119,0)
 S X=OPCMG
"RTN","SCMSP",120,0)
 D ^DIC
"RTN","SCMSP",121,0)
 S MSGTXT(1)="    Mail group contained in the OPC GENERATE MAIL GROUP"
"RTN","SCMSP",122,0)
 S MSGTXT(2)="    field (#216) of the MAS PARAMETER file (#43) has"
"RTN","SCMSP",123,0)
 S MSGTXT(3)="    been attached to the SCDX AMBCARE TO NPCDB SUMMARY bulletin"
"RTN","SCMSP",124,0)
 I (Y<0) D
"RTN","SCMSP",125,0)
 .K MSGTXT
"RTN","SCMSP",126,0)
 .S MSGTXT(1)="    ** Unable to attach mail group to the SCDX AMBCARE"
"RTN","SCMSP",127,0)
 .S MSGTXT(2)="       TO NPCDB SUMMARY bulletin"
"RTN","SCMSP",128,0)
 .S MSGTXT(3)="    ** Mail group must be added to bulletin manually"
"RTN","SCMSP",129,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP",130,0)
 ;Done
"RTN","SCMSP",131,0)
 Q
"RTN","SCMSP",132,0)
 ;
"RTN","SCMSP",133,0)
SDM ;ALB/JRP - Have an overlap routine with PCMM (SD*5.3*41)
"RTN","SCMSP",134,0)
 ;          Make sure that correct version of SDM routine is installed
"RTN","SCMSP",135,0)
 ;
"RTN","SCMSP",136,0)
 ;Input  : None
"RTN","SCMSP",137,0)
 ;Output : None
"RTN","SCMSP",138,0)
 ;Notes  : This is a KIDS complient check point
"RTN","SCMSP",139,0)
 ;       : Routine SCMSPX1 contains SDM with patch 41 applied to it
"RTN","SCMSP",140,0)
 ;         and routine SCMSPX2 contains SDM with patch 41 not applied
"RTN","SCMSP",141,0)
 ;         to it
"RTN","SCMSP",142,0)
 ;
"RTN","SCMSP",143,0)
 ;Declare variables
"RTN","SCMSP",144,0)
 N PATCHED,TMP,MSGTXT
"RTN","SCMSP",145,0)
 D BMES^XPDUTL(">>> Installing correct version of routine SDM")
"RTN","SCMSP",146,0)
 ;Check for PCMM installation
"RTN","SCMSP",147,0)
 S PATCHED=$$PATCH^XPDUTL("SD*5.3*41")
"RTN","SCMSP",148,0)
 ;PCMM not installed - SDM should come from SCMSPX2
"RTN","SCMSP",149,0)
 I ('PATCHED) D
"RTN","SCMSP",150,0)
 .S MSGTXT(1)=" "
"RTN","SCMSP",151,0)
 .S MSGTXT(2)="    PCMM has NOT been installed.  Will install a version"
"RTN","SCMSP",152,0)
 .S MSGTXT(3)="    of routine SDM that DOES NOT have the PCMM changes"
"RTN","SCMSP",153,0)
 .S MSGTXT(4)="    applied to it."
"RTN","SCMSP",154,0)
 .S MSGTXT(5)=" "
"RTN","SCMSP",155,0)
 .S MSGTXT(6)="    MSM sites must copy the SDM routine to all appropriate UCIs"
"RTN","SCMSP",156,0)
 .S MSGTXT(7)=" "
"RTN","SCMSP",157,0)
 .S MSGTXT(8)="    ********** PLEASE NOTE THE FOLLOWING ***********"
"RTN","SCMSP",158,0)
 .S MSGTXT(9)="    *                                              *"
"RTN","SCMSP",159,0)
 .S MSGTXT(10)="    * After installing PCMM, call the routine      *"
"RTN","SCMSP",160,0)
 .S MSGTXT(11)="    * SCMSP at theline tag SDM (i.e. D SDM^SCMSP)  *"
"RTN","SCMSP",161,0)
 .S MSGTXT(12)="    * in order to install a version of routine SDM *"
"RTN","SCMSP",162,0)
 .S MSGTXT(13)="    * with the ACRP & PCMM changes applied to it.  *"
"RTN","SCMSP",163,0)
 .S MSGTXT(14)="    *                                              *"
"RTN","SCMSP",164,0)
 .S MSGTXT(15)="    * MSM sites will then need to copy the updated *"
"RTN","SCMSP",165,0)
 .S MSGTXT(16)="    * SDM routine to all appropriate UCIs.         *"
"RTN","SCMSP",166,0)
 .S MSGTXT(17)="    *                                              *"
"RTN","SCMSP",167,0)
 .S MSGTXT(18)="    ************************************************"
"RTN","SCMSP",168,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP",169,0)
 .S TMP=$$COPY^SCMSPU2("SCMSPX2","SDM",3)
"RTN","SCMSP",170,0)
 ;PCMM installed - SDM should come from SCMSPX1
"RTN","SCMSP",171,0)
 I (PATCHED) D
"RTN","SCMSP",172,0)
 .S MSGTXT(1)=" "
"RTN","SCMSP",173,0)
 .S MSGTXT(2)="    PCMM has been installed.  Will install a version"
"RTN","SCMSP",174,0)
 .S MSGTXT(3)="    of routine SDM that has the PCMM changes applied"
"RTN","SCMSP",175,0)
 .S MSGTXT(4)="    to it"
"RTN","SCMSP",176,0)
 .S MSGTXT(5)=" "
"RTN","SCMSP",177,0)
 .S MSGTXT(6)="    MSM sites must copy the SDM routine to all appropriate UCIs"
"RTN","SCMSP",178,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP",179,0)
 .S TMP=$$COPY^SCMSPU2("SCMSPX1","SDM",3)
"RTN","SCMSP",180,0)
 ;Done
"RTN","SCMSP",181,0)
 Q
"RTN","SCMSP0")
0^16^B44652105
"RTN","SCMSP0",1,0)
SCMSP0 ;ALB/JRP - CHECK POINTS TO CREATE ENTRIES IN HL7 FILES;29-MAY-1996
"RTN","SCMSP0",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSP0",3,0)
 ;
"RTN","SCMSP0",4,0)
HL7EVNT ;Create HL7 event Z00 - HL7 EVENT TYPE CODE file (#779.001)
"RTN","SCMSP0",5,0)
 ;
"RTN","SCMSP0",6,0)
 ;Input  : None
"RTN","SCMSP0",7,0)
 ;Output : None
"RTN","SCMSP0",8,0)
 ;Note   : This is a KIDS complient check point
"RTN","SCMSP0",9,0)
 ;
"RTN","SCMSP0",10,0)
 ;Declare variables
"RTN","SCMSP0",11,0)
 N DIC,X,Y,DLAYGO,DTOUT,DUOUT,NEWENTRY,MSGTXT,PTREVNT,DIE,DA,DR
"RTN","SCMSP0",12,0)
 ;Create/find entry
"RTN","SCMSP0",13,0)
 D BMES^XPDUTL(">>> Creating entry for Z00 in HL7 EVENT TYPE CODE file (#779.001)")
"RTN","SCMSP0",14,0)
 S DIC="^HL(779.001,"
"RTN","SCMSP0",15,0)
 S DIC(0)="L"
"RTN","SCMSP0",16,0)
 S DIC("DR")="2///Ambulatory Care transmission to/from NPCDB"
"RTN","SCMSP0",17,0)
 S DLAYGO=779.001
"RTN","SCMSP0",18,0)
 S X="Z00"
"RTN","SCMSP0",19,0)
 D ^DIC
"RTN","SCMSP0",20,0)
 S PTREVNT=+Y
"RTN","SCMSP0",21,0)
 S NEWENTRY=+$P(Y,"^",3)
"RTN","SCMSP0",22,0)
 S MSGTXT(1)="    Existing entry found - support of HL7 v2.2 will be added/verified"
"RTN","SCMSP0",23,0)
 S:(NEWENTRY) MSGTXT(1)="    Entry created - support of HL7 v2.2 will be added"
"RTN","SCMSP0",24,0)
 I (PTREVNT<0) D
"RTN","SCMSP0",25,0)
 .S MSGTXT(1)="    ** Unable to create entry for Z00"
"RTN","SCMSP0",26,0)
 .S MSGTXT(2)="    ** Entry must be created manually"
"RTN","SCMSP0",27,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",28,0)
 K MSGTXT
"RTN","SCMSP0",29,0)
 ;Don't continue if entry wasn't created
"RTN","SCMSP0",30,0)
 Q:(PTREVNT<0)
"RTN","SCMSP0",31,0)
 ;Add support for HL7 version 2.2
"RTN","SCMSP0",32,0)
 S DIC="^HL(779.001,"_PTREVNT_",1,"
"RTN","SCMSP0",33,0)
 S DIC(0)="LX"
"RTN","SCMSP0",34,0)
 S DIC("P")=$P(^DD(779.001,100,0),"^",2)
"RTN","SCMSP0",35,0)
 S DA(1)=PTREVNT
"RTN","SCMSP0",36,0)
 S DLAYGO=779.001
"RTN","SCMSP0",37,0)
 S X="2.2"
"RTN","SCMSP0",38,0)
 D ^DIC
"RTN","SCMSP0",39,0)
 S MSGTXT(1)="    Support for HL7 v2.2 "_$S($P(Y,"^",3):"added",1:"verified")
"RTN","SCMSP0",40,0)
 I (Y<0) D
"RTN","SCMSP0",41,0)
 .S MSGTXT(1)="    ** Unable to add support for HL7 v2.2"
"RTN","SCMSP0",42,0)
 .S MSGTXT(2)="    ** Support for HL7 v2.2 must be added manually"
"RTN","SCMSP0",43,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",44,0)
 ;Done
"RTN","SCMSP0",45,0)
 Q
"RTN","SCMSP0",46,0)
 ;
"RTN","SCMSP0",47,0)
HL7APPS ;Create required entries in HL APPLICATION file (#771)
"RTN","SCMSP0",48,0)
 ;
"RTN","SCMSP0",49,0)
 ;Input  : None
"RTN","SCMSP0",50,0)
 ;Output : None
"RTN","SCMSP0",51,0)
 ;Note   : This is a KIDS complient check point
"RTN","SCMSP0",52,0)
 ;
"RTN","SCMSP0",53,0)
 ;Declare variables
"RTN","SCMSP0",54,0)
 N APPNAME,FACNUM,MAILGRP,MSGTXT,PTRAPP
"RTN","SCMSP0",55,0)
 D BMES^XPDUTL(">>> Creating entries in HL APPLICATION file (#771)")
"RTN","SCMSP0",56,0)
 ;Create sending application
"RTN","SCMSP0",57,0)
 S APPNAME="AMBCARE-DHCP"
"RTN","SCMSP0",58,0)
 S FACNUM=+$P($$SITE^VASITE(),"^",3)
"RTN","SCMSP0",59,0)
 S MAILGRP=$$OPCMG^SCMSPU1(0)
"RTN","SCMSP0",60,0)
 I ('MAILGRP) D  Q
"RTN","SCMSP0",61,0)
 .S MSGTXT(1)="    ** MAS PARAMETER file (#43) does not have a value for"
"RTN","SCMSP0",62,0)
 .S MSGTXT(2)="       the OPC GENERATE MAIL GROUP field (#216)"
"RTN","SCMSP0",63,0)
 .S MSGTXT(3)="    ** Entries for AMBCARE-DHCP and NPCD-AAC in the HL"
"RTN","SCMSP0",64,0)
 .S MSGTXT(4)="       APPLICATION file (#771) can not be created"
"RTN","SCMSP0",65,0)
 .S MSGTXT(5)="    ** Entries must be manually entered"
"RTN","SCMSP0",66,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",67,0)
 D MES^XPDUTL("     Creating entry for sending application (AMBCARE-DHCP)")
"RTN","SCMSP0",68,0)
 S PTRAPP=$$CRTAPP^SCMSPU1(APPNAME,FACNUM,MAILGRP)
"RTN","SCMSP0",69,0)
 S MSGTXT(1)="       Entry for AMBCARE-DHCP successfully created"
"RTN","SCMSP0",70,0)
 I ('$P(PTRAPP,"^",2)) D
"RTN","SCMSP0",71,0)
 .S MSGTXT(1)="      Existing entry for AMBCARE-DHCP found - current values not overwritten"
"RTN","SCMSP0",72,0)
 I (PTRAPP<0) D
"RTN","SCMSP0",73,0)
 .S MSGTXT(1)="       ** Unable to create entry for AMBCARE-DHCP"
"RTN","SCMSP0",74,0)
 .S MSGTXT(2)="       ** "_$P(PTRAPP,"^",2)
"RTN","SCMSP0",75,0)
 .S MSGTXT(3)="       ** Sending application must be added manually"
"RTN","SCMSP0",76,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",77,0)
 K MSGTXT
"RTN","SCMSP0",78,0)
 ;Create receiving application
"RTN","SCMSP0",79,0)
 S APPNAME="NPCD-AAC"
"RTN","SCMSP0",80,0)
 S FACNUM=200
"RTN","SCMSP0",81,0)
 S MAILGRP=$$OPCMG^SCMSPU1(0)
"RTN","SCMSP0",82,0)
 D MES^XPDUTL("     Creating entry for receiving application (NPCD-AAC)")
"RTN","SCMSP0",83,0)
 S PTRAPP=$$CRTAPP^SCMSPU1(APPNAME,FACNUM,MAILGRP)
"RTN","SCMSP0",84,0)
 S MSGTXT(1)="       Entry for NPCD-AAC successfully created"
"RTN","SCMSP0",85,0)
 I ('$P(PTRAPP,"^",2)) D
"RTN","SCMSP0",86,0)
 .S MSGTXT(1)="      Existing entry for NPCD-AAC found - current values not overwritten"
"RTN","SCMSP0",87,0)
 I (PTRAPP<0) D
"RTN","SCMSP0",88,0)
 .S MSGTXT(1)="       ** Unable to create entry for NPCD-AAC"
"RTN","SCMSP0",89,0)
 .S MSGTXT(2)="       ** "_$P(PTRAPP,"^",2)
"RTN","SCMSP0",90,0)
 .S MSGTXT(3)="       ** Receiving application must be added manually"
"RTN","SCMSP0",91,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",92,0)
 ;Done
"RTN","SCMSP0",93,0)
 Q
"RTN","SCMSP0",94,0)
 ;
"RTN","SCMSP0",95,0)
MAILGRP ;Create entry in MAIL GROUP file (#3.8) that will be attached to
"RTN","SCMSP0",96,0)
 ; the lower level protocol parameter
"RTN","SCMSP0",97,0)
 ;
"RTN","SCMSP0",98,0)
 ;Input  : None
"RTN","SCMSP0",99,0)
 ;Output : None
"RTN","SCMSP0",100,0)
 ;Note   : This is a KIDS complient check point
"RTN","SCMSP0",101,0)
 ;
"RTN","SCMSP0",102,0)
 ;Declare variables
"RTN","SCMSP0",103,0)
 N NAME,DESC,PTR2MG,MSGTXT,DIE,DIC,DA,DR,X,Y,DTOUT
"RTN","SCMSP0",104,0)
 D BMES^XPDUTL(">>> Creating entry in MAIL GROUP file (#3.8)")
"RTN","SCMSP0",105,0)
 ;Create entry in MAIL GROUP file
"RTN","SCMSP0",106,0)
 S NAME="SCDX AMBCARE TO NPCDB"
"RTN","SCMSP0",107,0)
 S DESC(1)="Mail Group used by the Ambulatory Care Reporting Project to"
"RTN","SCMSP0",108,0)
 S DESC(2)="transmit data to the National Patient Care Database via HL7"
"RTN","SCMSP0",109,0)
 S PTR2MG=$$MG^XMBGRP(NAME,0,.5,0,.XMY,.DESC,1)
"RTN","SCMSP0",110,0)
 S MSGTXT(1)="    Entry for SCDX AMBCARE TO NPCDB successfully created"
"RTN","SCMSP0",111,0)
 I ('PTR2MG) D
"RTN","SCMSP0",112,0)
 .S MSGTXT(1)="    ** Unable to create entry for SCDX AMBCARE TO NPCDB"
"RTN","SCMSP0",113,0)
 .S MSGTXT(2)="    ** Entry must be created manually"
"RTN","SCMSP0",114,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",115,0)
 K MSGTXT
"RTN","SCMSP0",116,0)
 ;Don't continue if entry wasn't created
"RTN","SCMSP0",117,0)
 Q:('PTR2MG)
"RTN","SCMSP0",118,0)
 ;Add queue for National Patient Care Database as REMOTE MEMBER
"RTN","SCMSP0",119,0)
 D MES^XPDUTL("    Adding National Patient Care Database (NPCDB) to Mail Group")
"RTN","SCMSP0",120,0)
 S DIC="^XMB(3.8,"_PTR2MG_",6,"
"RTN","SCMSP0",121,0)
 S DIC(0)="LX"
"RTN","SCMSP0",122,0)
 S DIC("P")=$P(^DD(3.8,12,0),"^",2)
"RTN","SCMSP0",123,0)
 S DA(1)=PTR2MG
"RTN","SCMSP0",124,0)
 S DLAYGO=3.8
"RTN","SCMSP0",125,0)
 S X="XXX@Q-ACS.MED.VA.GOV"
"RTN","SCMSP0",126,0)
 D ^DIC
"RTN","SCMSP0",127,0)
 S MSGTXT(1)="    XXX@Q-ACS.MED.VA.GOV successfully added as REMOTE MEMBER"
"RTN","SCMSP0",128,0)
 I (Y<0) D
"RTN","SCMSP0",129,0)
 .S MSGTXT(1)="    ** Unable to add XXX@Q-ACS.MED.VA.GOV as REMOTE MEMBER"
"RTN","SCMSP0",130,0)
 .S MSGTXT(2)="    ** Remote member must be added manually"
"RTN","SCMSP0",131,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",132,0)
 ;Done
"RTN","SCMSP0",133,0)
 Q
"RTN","SCMSP0",134,0)
 ;
"RTN","SCMSP0",135,0)
HL7LLPP ;Create entry in HL LOWER LEVEL PROTOCOL PARAMETER file (#869.2)
"RTN","SCMSP0",136,0)
 ;
"RTN","SCMSP0",137,0)
 ;Input  : None
"RTN","SCMSP0",138,0)
 ;Output : None
"RTN","SCMSP0",139,0)
 ;Note   : This is a KIDS complient check point
"RTN","SCMSP0",140,0)
 ;       : If an entry for AMB-CARE already exists, values currently
"RTN","SCMSP0",141,0)
 ;         defined for the entry will not be overwritten
"RTN","SCMSP0",142,0)
 ;
"RTN","SCMSP0",143,0)
 ;Declare variables
"RTN","SCMSP0",144,0)
 N DIC,X,Y,DLAYGO,DTOUT,DUOUT,NEWENTRY,PTRLLPP,DIE,DA,DR,MSGTXT
"RTN","SCMSP0",145,0)
 ;Create entry
"RTN","SCMSP0",146,0)
 D BMES^XPDUTL(">>> Creating entry in HL LOWER LEVEL PROTOCOL PARAMETER file (#869.2)")
"RTN","SCMSP0",147,0)
 S DIC="^HLCS(869.2,"
"RTN","SCMSP0",148,0)
 S DIC(0)="LX"
"RTN","SCMSP0",149,0)
 S DIC("DR")=".02///MAILMAN;100.01///SCDX AMBCARE TO NPCDB"
"RTN","SCMSP0",150,0)
 S DLAYGO=869.2
"RTN","SCMSP0",151,0)
 S X="AMB-CARE"
"RTN","SCMSP0",152,0)
 D ^DIC
"RTN","SCMSP0",153,0)
 S PTRLLPP=+Y
"RTN","SCMSP0",154,0)
 S NEWENTRY=+$P(Y,"^",3)
"RTN","SCMSP0",155,0)
 S MSGTXT(1)="    Entry for AMB-CARE created"
"RTN","SCMSP0",156,0)
 I ((PTRLLPP)&('NEWENTRY)) D
"RTN","SCMSP0",157,0)
 .S MSGTXT(1)="    Entry for AMB-CARE found"
"RTN","SCMSP0",158,0)
 .S MSGTXT(2)="    Existing information will not be overwritten"
"RTN","SCMSP0",159,0)
 I (PTRLLPP<0) D
"RTN","SCMSP0",160,0)
 .S MSGTXT(1)="    ** Unable to create entry for AMB-CARE"
"RTN","SCMSP0",161,0)
 .S MSGTXT(2)="    ** Entry must be created manually"
"RTN","SCMSP0",162,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",163,0)
 ;Done
"RTN","SCMSP0",164,0)
 Q
"RTN","SCMSP0",165,0)
 ;
"RTN","SCMSP0",166,0)
HL7LINK ;Create entry in HL LOGICAL LINK file (#870)
"RTN","SCMSP0",167,0)
 ;
"RTN","SCMSP0",168,0)
 ;Input  : None
"RTN","SCMSP0",169,0)
 ;Output : None
"RTN","SCMSP0",170,0)
 ;Note   : This is a KIDS complient check point
"RTN","SCMSP0",171,0)
 ;       : If an entry for AMB-CARE already exists, values currently
"RTN","SCMSP0",172,0)
 ;         defined for the entry will not be overwritten
"RTN","SCMSP0",173,0)
 ;
"RTN","SCMSP0",174,0)
 ;Declare variables
"RTN","SCMSP0",175,0)
 N DIC,X,Y,DLAYGO,DTOUT,DUOUT,NEWENTRY,PTRLINK,DIE,DA,DR,MSGTXT
"RTN","SCMSP0",176,0)
 ;Create entry
"RTN","SCMSP0",177,0)
 D BMES^XPDUTL(">>> Creating entry in HL LOGICAL LINK file (#870)")
"RTN","SCMSP0",178,0)
 S DIC="^HLCS(870,"
"RTN","SCMSP0",179,0)
 S DIC(0)="LX"
"RTN","SCMSP0",180,0)
 S DIC("DR")="2///AMB-CARE"
"RTN","SCMSP0",181,0)
 S DLAYGO=870
"RTN","SCMSP0",182,0)
 S X="AMB-CARE"
"RTN","SCMSP0",183,0)
 D ^DIC
"RTN","SCMSP0",184,0)
 S PTRLINK=+Y
"RTN","SCMSP0",185,0)
 S NEWENTRY=+$P(Y,"^",3)
"RTN","SCMSP0",186,0)
 S MSGTXT(1)="    Entry for AMB-CARE created"
"RTN","SCMSP0",187,0)
 I ((PTRLINK)&('NEWENTRY)) D
"RTN","SCMSP0",188,0)
 .S MSGTXT(1)="    Entry for AMB-CARE found"
"RTN","SCMSP0",189,0)
 .S MSGTXT(2)="    Existing information will not be overwritten"
"RTN","SCMSP0",190,0)
 I (PTRLINK<0) D
"RTN","SCMSP0",191,0)
 .S MSGTXT(1)="    ** Unable to create entry for AMB-CARE"
"RTN","SCMSP0",192,0)
 .S MSGTXT(2)="    ** Entry must be created manually"
"RTN","SCMSP0",193,0)
 D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP0",194,0)
 ;Done
"RTN","SCMSP0",195,0)
 Q
"RTN","SCMSP1")
0^67^B14570357
"RTN","SCMSP1",1,0)
SCMSP1 ;ALB/JRP - POST INIT ROUTINE;07-JUN-1996
"RTN","SCMSP1",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSP1",3,0)
 ;
"RTN","SCMSP1",4,0)
FIXEVNT ;Enable Ambulatory Care event handler
"RTN","SCMSP1",5,0)
 ;
"RTN","SCMSP1",6,0)
 ;Input  : None
"RTN","SCMSP1",7,0)
 ;Output : None
"RTN","SCMSP1",8,0)
 ;Notes  : This is a KIDS complient check point
"RTN","SCMSP1",9,0)
 ;
"RTN","SCMSP1",10,0)
 ;Declare variables
"RTN","SCMSP1",11,0)
 N DIC,DIE,DA,DR,X,Y,DTOUT,DUOUT,MSGTXT,PTRPROT
"RTN","SCMSP1",12,0)
 D BMES^XPDUTL(">>> Enabling Ambulatory Care event handler")
"RTN","SCMSP1",13,0)
 ;Find protocol
"RTN","SCMSP1",14,0)
 S PTRPROT=+$O(^ORD(101,"B","SCDX AMBCARE EVENT",""))
"RTN","SCMSP1",15,0)
 I ('PTRPROT) D  Q
"RTN","SCMSP1",16,0)
 .S MSGTXT(1)="    ** Unable to find SCDX AMBCARE EVENT in PROTOCOL file (#101)"
"RTN","SCMSP1",17,0)
 .S MSGTXT(2)="    ** Entry must be manually created"
"RTN","SCMSP1",18,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP1",19,0)
 ;Enable protocol
"RTN","SCMSP1",20,0)
 S DIE="^ORD(101,"
"RTN","SCMSP1",21,0)
 S DA=PTRPROT
"RTN","SCMSP1",22,0)
 S DR="2///@"
"RTN","SCMSP1",23,0)
 D ^DIE
"RTN","SCMSP1",24,0)
 ;Done
"RTN","SCMSP1",25,0)
 Q
"RTN","SCMSP1",26,0)
 ;
"RTN","SCMSP1",27,0)
FIXSRVR ;Fix entry in PROTOCOL file (#101) for server protocol
"RTN","SCMSP1",28,0)
 ;
"RTN","SCMSP1",29,0)
 ;Input  : None
"RTN","SCMSP1",30,0)
 ;Output : None
"RTN","SCMSP1",31,0)
 ;Notes  : This is a KIDS complient check point
"RTN","SCMSP1",32,0)
 ;
"RTN","SCMSP1",33,0)
 ;Declare variables
"RTN","SCMSP1",34,0)
 N DIC,DIE,DA,DR,X,Y,DTOUT,DUOUT,MSGTXT,PTRPROT,PTRAPP
"RTN","SCMSP1",35,0)
 D BMES^XPDUTL(">>> Correcting entry in PROTOCOL file (#101) for server protocol")
"RTN","SCMSP1",36,0)
 ;Find server protocol
"RTN","SCMSP1",37,0)
 S PTRPROT=+$O(^ORD(101,"B","SCDX AMBCARE SEND SERVER FOR ADT-Z00",""))
"RTN","SCMSP1",38,0)
 I ('PTRPROT) D  Q
"RTN","SCMSP1",39,0)
 .S MSGTXT(1)="    ** Unable to find SCDX AMBCARE SEND SERVER FOR ADT-Z00"
"RTN","SCMSP1",40,0)
 .S MSGTXT(2)="       in PROTOCOL file (#101)"
"RTN","SCMSP1",41,0)
 .S MSGTXT(3)="    ** Entry must be manually created"
"RTN","SCMSP1",42,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP1",43,0)
 ;Find server application
"RTN","SCMSP1",44,0)
 S PTRAPP=+$O(^HL(771,"B","AMBCARE-DHCP",""))
"RTN","SCMSP1",45,0)
 I ('PTRAPP) D  Q
"RTN","SCMSP1",46,0)
 .S MSGTXT(1)="    ** Unable to find AMBCARE-DHCP in HL7 APPLICATION file (#771)"
"RTN","SCMSP1",47,0)
 .S MSGTXT(2)="    ** Entry must be manually created and attached to"
"RTN","SCMSP1",48,0)
 .S MSGTXT(3)="       the SCDX AMBCARE SEND SERVER FOR ADT-Z00 protocol"
"RTN","SCMSP1",49,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP1",50,0)
 ;Fix entry
"RTN","SCMSP1",51,0)
 S DIE="^ORD(101,"
"RTN","SCMSP1",52,0)
 S DA=PTRPROT
"RTN","SCMSP1",53,0)
 S DR="2///@;770.1////^S X=PTRAPP;770.3///ADT;770.11///ADT;770.4///Z00;770.8///NE;770.9///AL;770.95///2.2"
"RTN","SCMSP1",54,0)
 D ^DIE
"RTN","SCMSP1",55,0)
 ;Done
"RTN","SCMSP1",56,0)
 Q
"RTN","SCMSP1",57,0)
 ;
"RTN","SCMSP1",58,0)
FIXCLNT ;Fix entry in PROTOCOL file (#101) for client protocol
"RTN","SCMSP1",59,0)
 ;
"RTN","SCMSP1",60,0)
 ;Input  : None
"RTN","SCMSP1",61,0)
 ;Output : None
"RTN","SCMSP1",62,0)
 ;Notes  : This is a KIDS complient check point
"RTN","SCMSP1",63,0)
 ;
"RTN","SCMSP1",64,0)
 ;Declare variables
"RTN","SCMSP1",65,0)
 N DIC,DIE,DA,DR,X,Y,DTOUT,DUOUT,MSGTXT,PTRPROT,PTRAPP,PTRLINK
"RTN","SCMSP1",66,0)
 D BMES^XPDUTL(">>> Correcting entry in PROTOCOL file (#101) for client protocol")
"RTN","SCMSP1",67,0)
 ;Find client protocol
"RTN","SCMSP1",68,0)
 S PTRPROT=+$O(^ORD(101,"B","SCDX AMBCARE SEND CLIENT FOR ADT-Z00",""))
"RTN","SCMSP1",69,0)
 I ('PTRPROT) D  Q
"RTN","SCMSP1",70,0)
 .S MSGTXT(1)="    ** Unable to find SCDX AMBCARE SEND CLIENT FOR ADT-Z00"
"RTN","SCMSP1",71,0)
 .S MSGTXT(2)="       in PROTOCOL file (#101)"
"RTN","SCMSP1",72,0)
 .S MSGTXT(3)="    ** Entry must be manually created"
"RTN","SCMSP1",73,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP1",74,0)
 ;Find client application
"RTN","SCMSP1",75,0)
 S PTRAPP=+$O(^HL(771,"B","NPCD-AAC",""))
"RTN","SCMSP1",76,0)
 I ('PTRAPP) D  Q
"RTN","SCMSP1",77,0)
 .S MSGTXT(1)="    ** Unable to find NPCD-AAC in HL7 APPLICATION file (#771)"
"RTN","SCMSP1",78,0)
 .S MSGTXT(2)="    ** Entry must be manually created and attached to"
"RTN","SCMSP1",79,0)
 .S MSGTXT(3)="       the SCDX AMBCARE SEND CLIENT FOR ADT-Z00 protocol"
"RTN","SCMSP1",80,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP1",81,0)
 ;Find logical link
"RTN","SCMSP1",82,0)
 S PTRLINK=+$O(^HLCS(870,"B","AMB-CARE",0))
"RTN","SCMSP1",83,0)
 I ('PTRLINK) D  Q
"RTN","SCMSP1",84,0)
 .S MSGTXT(1)="    ** Unable to find AMB-CARE in HL LOGICAL LINK file (#870)"
"RTN","SCMSP1",85,0)
 .S MSGTXT(2)="    ** Entry must be manually created and attached to"
"RTN","SCMSP1",86,0)
 .S MSGTXT(3)="       the SCDX AMBCARE SEND CLIENT FOR ADT-Z00 protocol"
"RTN","SCMSP1",87,0)
 .D MES^XPDUTL(.MSGTXT)
"RTN","SCMSP1",88,0)
 ;Fix entry
"RTN","SCMSP1",89,0)
 S DIE="^ORD(101,"
"RTN","SCMSP1",90,0)
 S DA=PTRPROT
"RTN","SCMSP1",91,0)
 S DR="2///@;770.2////^S X=PTRAPP;770.3///ADT;770.11///ADT;770.4///Z00;770.7////^S X=PTRLINK;770.95///2.2"
"RTN","SCMSP1",92,0)
 D ^DIE
"RTN","SCMSP1",93,0)
 Q
"RTN","SCMSPEN")
0^64^B33991612
"RTN","SCMSPEN",1,0)
SCMSPEN ;ALB/JRP - AMB CARE ENVIRONMENT CHECKER;04-JUN-96
"RTN","SCMSPEN",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSPEN",3,0)
CHKENV ;Main entry point for environment checker
"RTN","SCMSPEN",4,0)
 ;Input  : All variables set by KIDS
"RTN","SCMSPEN",5,0)
 ;Output : Variables required by KIDS to denote success or failure
"RTN","SCMSPEN",6,0)
 ;         of environment check (XPDQUIT and XPDABORT)
"RTN","SCMSPEN",7,0)
 ;
"RTN","SCMSPEN",8,0)
 ;Declare variables
"RTN","SCMSPEN",9,0)
 N VERSION,PATCHED,NODE,PTR,NAME
"RTN","SCMSPEN",10,0)
 W !!,">>> Beginning environment check",!!
"RTN","SCMSPEN",11,0)
 ;Check for installation of PCE version 1.0 - required for install
"RTN","SCMSPEN",12,0)
 W !!,"  Checking for installation of PCE version 1.0 ..."
"RTN","SCMSPEN",13,0)
 S VERSION=$$VERSION^XPDUTL("PX")
"RTN","SCMSPEN",14,0)
 I ((+VERSION)<1) D
"RTN","SCMSPEN",15,0)
 .W !!,"    *** Required element missing ***",!
"RTN","SCMSPEN",16,0)
 .W !,"    Installation of Ambulatory Care requires that PCE version"
"RTN","SCMSPEN",17,0)
 .W !,"    1.0 be installed - you have version ",VERSION," installed."
"RTN","SCMSPEN",18,0)
 .W !,"    Installation will be aborted at end of environment check."
"RTN","SCMSPEN",19,0)
 .W !
"RTN","SCMSPEN",20,0)
 .S XPDABORT=2
"RTN","SCMSPEN",21,0)
 ;Check for installation of HL7 version 1.6 - required for install
"RTN","SCMSPEN",22,0)
 W !!,"  Checking for installation of HL7 version 1.6 ..."
"RTN","SCMSPEN",23,0)
 S VERSION=+$$VERSION^XPDUTL("HL")
"RTN","SCMSPEN",24,0)
 I (VERSION<1.6) D
"RTN","SCMSPEN",25,0)
 .W !!,"    *** Required element missing ***",!
"RTN","SCMSPEN",26,0)
 .W !,"    Installation of Ambulatory Care requires that HL7 version"
"RTN","SCMSPEN",27,0)
 .W !,"    1.6 be installed - you have version ",VERSION," installed."
"RTN","SCMSPEN",28,0)
 .W !,"    Installation will be aborted at end of environment check."
"RTN","SCMSPEN",29,0)
 .W !
"RTN","SCMSPEN",30,0)
 .S XPDABORT=2
"RTN","SCMSPEN",31,0)
 ;Check for installation of XU*8.0*27 - required for install
"RTN","SCMSPEN",32,0)
 W !!,"  Checking for installation of patch XU*8.0*27 ..."
"RTN","SCMSPEN",33,0)
 S PATCHED=$$PATCH^XPDUTL("XU*8.0*27")
"RTN","SCMSPEN",34,0)
 I ('PATCHED) D
"RTN","SCMSPEN",35,0)
 .W !!,"    *** Required element missing ***",!
"RTN","SCMSPEN",36,0)
 .W !,"    Installation of Ambulatory Care requires that Kernel patch"
"RTN","SCMSPEN",37,0)
 .W !,"    XU*8.0*27 be installed.  Install will be aborted at end of"
"RTN","SCMSPEN",38,0)
 .W !,"    environment check."
"RTN","SCMSPEN",39,0)
 .W !
"RTN","SCMSPEN",40,0)
 .S XPDABORT=2
"RTN","SCMSPEN",41,0)
 ;Check for installation of HL*1.6*8 - required for install
"RTN","SCMSPEN",42,0)
 W !!,"  Checking for installation of patch HL*1.6*8 ..."
"RTN","SCMSPEN",43,0)
 S PATCHED=$$PATCH^XPDUTL("HL*1.6*8")
"RTN","SCMSPEN",44,0)
 I ('PATCHED) D
"RTN","SCMSPEN",45,0)
 .W !!,"    *** Required element missing ***",!
"RTN","SCMSPEN",46,0)
 .W !,"    Installation of Ambulatory Care requires that HL7 patch"
"RTN","SCMSPEN",47,0)
 .W !,"    HL*1.6*8 be installed.  Install will be aborted at end of"
"RTN","SCMSPEN",48,0)
 .W !,"    environment check."
"RTN","SCMSPEN",49,0)
 .W !
"RTN","SCMSPEN",50,0)
 .S XPDABORT=2
"RTN","SCMSPEN",51,0)
 ;Check for installation of IB*2.0*60 - required for install
"RTN","SCMSPEN",52,0)
 W !!,"  Checking for installation of patch IB*2.0*60 ..."
"RTN","SCMSPEN",53,0)
 S PATCHED=$$PATCH^XPDUTL("IB*2.0*60")
"RTN","SCMSPEN",54,0)
 I ('PATCHED) D
"RTN","SCMSPEN",55,0)
 .W !!,"    *** Required element missing ***",!
"RTN","SCMSPEN",56,0)
 .W !,"    Installation of Ambulatory Care requires that Integrated"
"RTN","SCMSPEN",57,0)
 .W !,"    Billing patch IB*2.O*60 be installed.  Install will be aborted"
"RTN","SCMSPEN",58,0)
 .W !,"    at end of environment check."
"RTN","SCMSPEN",59,0)
 .W !
"RTN","SCMSPEN",60,0)
 .S XPDABORT=2
"RTN","SCMSPEN",61,0)
 ;Check for existance of Q-ACS.MED.VA.GOV domain - required for install
"RTN","SCMSPEN",62,0)
 W !!,"  Checking for existance of Q-ACS.MED.VA.GOV domain ..."
"RTN","SCMSPEN",63,0)
 I ('$O(^DIC(4.2,"B","Q-ACS.MED.VA.GOV",0))) D
"RTN","SCMSPEN",64,0)
 .W !!,"    *** Required element missing ***",!
"RTN","SCMSPEN",65,0)
 .W !,"    Installation of Ambulatory Care requires that the domain"
"RTN","SCMSPEN",66,0)
 .W !,"    Q-ACS.MED.VA.GOV be defined.  Install will be aborted at end"
"RTN","SCMSPEN",67,0)
 .W !,"    of environment check."
"RTN","SCMSPEN",68,0)
 .W !
"RTN","SCMSPEN",69,0)
 .S XPDABORT=2
"RTN","SCMSPEN",70,0)
 ;Check for installation of PCMM - not required for install but
"RTN","SCMSPEN",71,0)
 ; causes a problem if installed after Amb Care
"RTN","SCMSPEN",72,0)
 W !!,"  Checking for installation of patch SD*5.3*41 (PCMM) ..."
"RTN","SCMSPEN",73,0)
 S PATCHED=$$PATCH^XPDUTL("SD*5.3*41")
"RTN","SCMSPEN",74,0)
 I ('PATCHED) D
"RTN","SCMSPEN",75,0)
 .W !!,"    *** Warning ***",!
"RTN","SCMSPEN",76,0)
 .W !,"    Primary Care Management Module (SD*5.3*41) has not been"
"RTN","SCMSPEN",77,0)
 .W !,"    installed.  After installing PCMM, call the routine SCMSP"
"RTN","SCMSPEN",78,0)
 .W !,"    at the line tag SDM (i.e. D SDM^SCMSP) in order to install"
"RTN","SCMSPEN",79,0)
 .W !,"    a version of routine SDM with the ACRP & PCMM changes"
"RTN","SCMSPEN",80,0)
 .W !,"    applied to it."
"RTN","SCMSPEN",81,0)
 .W !
"RTN","SCMSPEN",82,0)
 ;Check for installation of RA*4.5*4 - not required for install but
"RTN","SCMSPEN",83,0)
 ; loose workload credit if not installed
"RTN","SCMSPEN",84,0)
 W !!,"  Checking for installation of patch RA*4.5*4 ..."
"RTN","SCMSPEN",85,0)
 S PATCHED=$$PATCH^XPDUTL("RA*4.5*4")
"RTN","SCMSPEN",86,0)
 I ('PATCHED) D
"RTN","SCMSPEN",87,0)
 .W !!,"    *** Warning ***",!
"RTN","SCMSPEN",88,0)
 .W !,"    Radiology patch RA*4.5*4 has not been installed.  This patch"
"RTN","SCMSPEN",89,0)
 .W !,"    must be installed in order for all workload credit to be"
"RTN","SCMSPEN",90,0)
 .W !,"    reported."
"RTN","SCMSPEN",91,0)
 .W !
"RTN","SCMSPEN",92,0)
 ;Check for installation of LR*5.2*127 - not required for install but
"RTN","SCMSPEN",93,0)
 ; loose workload credit if not installed
"RTN","SCMSPEN",94,0)
 W !!,"  Checking for installation of patch LR*5.2*127 ..."
"RTN","SCMSPEN",95,0)
 S PATCHED=$$PATCH^XPDUTL("LR*5.2*127")
"RTN","SCMSPEN",96,0)
 I ('PATCHED) D
"RTN","SCMSPEN",97,0)
 .W !!,"    *** Warning ***",!
"RTN","SCMSPEN",98,0)
 .W !,"    Lab patch LR*5.2*127 has not been installed.  This patch must"
"RTN","SCMSPEN",99,0)
 .W !,"    be installed in order for all workload credit to be reported."
"RTN","SCMSPEN",100,0)
 .W !
"RTN","SCMSPEN",101,0)
 ;Check for installation of SOW*3*42 - not required for install but
"RTN","SCMSPEN",102,0)
 ; loose ability to correctly transmit homeless indicator
"RTN","SCMSPEN",103,0)
 W !!,"  Checking for installation of patch SOW*3*42 ..."
"RTN","SCMSPEN",104,0)
 S PATCHED=$$PATCH^XPDUTL("SOW*3*42")
"RTN","SCMSPEN",105,0)
 I ('PATCHED) D
"RTN","SCMSPEN",106,0)
 .;Don't have it listed in patch history (pre KIDS patch) - check for
"RTN","SCMSPEN",107,0)
 .; existance of line tag used by VAFHLZPD
"RTN","SCMSPEN",108,0)
 .Q:($T(HOMELESS^SOWKHIRM)'="")
"RTN","SCMSPEN",109,0)
 .W !!,"    *** Warning ***",!
"RTN","SCMSPEN",110,0)
 .W !,"    Social Work patch SOW*3*42 has not been installed.  This"
"RTN","SCMSPEN",111,0)
 .W !,"    patch must be installed in order to correctly report whether"
"RTN","SCMSPEN",112,0)
 .W !,"    a patient is homeless or not."
"RTN","SCMSPEN",113,0)
 .W !
"RTN","SCMSPEN",114,0)
 ;Check for entry in OPC GENERATE MAIL GROUP field (#216) of the
"RTN","SCMSPEN",115,0)
 ; MAS PARAMETERS file (#43) - not required for install but is used
"RTN","SCMSPEN",116,0)
 ; during pre/post-init
"RTN","SCMSPEN",117,0)
 W !!,"  Checking MAS PARAMETER file for OPC mail group ..."
"RTN","SCMSPEN",118,0)
 ;Get node value is stored on
"RTN","SCMSPEN",119,0)
 S NODE=$G(^DG(43,1,"SCLR"))
"RTN","SCMSPEN",120,0)
 ;Get pointer
"RTN","SCMSPEN",121,0)
 S PTR=+$P(NODE,"^",16)
"RTN","SCMSPEN",122,0)
 ;Get name of Mail Group
"RTN","SCMSPEN",123,0)
 S NODE=$G(^XMB(3.8,PTR,0))
"RTN","SCMSPEN",124,0)
 S NAME=$P(NODE,"^",1)
"RTN","SCMSPEN",125,0)
 I (NAME="") D
"RTN","SCMSPEN",126,0)
 .W !!,"    *** Warning ***",!
"RTN","SCMSPEN",127,0)
 .W !,"    The OPC GENERATE MAIL GROUP field (#216) of the MAS PARAMETERS"
"RTN","SCMSPEN",128,0)
 .W !,"    file (#43) does not contain a valid mail group.  The mail group"
"RTN","SCMSPEN",129,0)
 .W !,"    stored in this field is attached to entries that will be created"
"RTN","SCMSPEN",130,0)
 .W !,"    in the HL APPLICATION file (#771) and BULLETIN file (#3.8)."
"RTN","SCMSPEN",131,0)
 .W !
"RTN","SCMSPEN",132,0)
 ;End of environment check
"RTN","SCMSPEN",133,0)
 W !!!,">>> Environment check completed"
"RTN","SCMSPEN",134,0)
 ;Write abort message (if appropriate)
"RTN","SCMSPEN",135,0)
 I (+$G(XPDABORT)) D
"RTN","SCMSPEN",136,0)
 .W !!,"*** Element(s) critical to installation of Ambulatory Care are missing"
"RTN","SCMSPEN",137,0)
 .W !,"*** Installation will be aborted"
"RTN","SCMSPEN",138,0)
 .W !
"RTN","SCMSPEN",139,0)
 ;Write A-OK message (if appropriate)
"RTN","SCMSPEN",140,0)
 W:('$G(XPDABORT)) !!,"Installation will proceed as planned",!!
"RTN","SCMSPEN",141,0)
 ;Done
"RTN","SCMSPEN",142,0)
 Q
"RTN","SCMSPRE")
0^63^B643259
"RTN","SCMSPRE",1,0)
SCMSPRE ;ALB/JRP - AMB CARE PRE INIT DRIVER;28-MAY-1996
"RTN","SCMSPRE",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSPRE",3,0)
CHKPTS ;Create check points for pre-init
"RTN","SCMSPRE",4,0)
 ;Input  : All variables set by KIDS
"RTN","SCMSPRE",5,0)
 ;Output : None
"RTN","SCMSPRE",6,0)
 ;
"RTN","SCMSPRE",7,0)
 ;Declare variables
"RTN","SCMSPRE",8,0)
 N TMP
"RTN","SCMSPRE",9,0)
 ;Create check points
"RTN","SCMSPRE",10,0)
 ;Create Z00 HL7 Event Code
"RTN","SCMSPRE",11,0)
 S TMP=$$NEWCP^XPDUTL("SCMS01","HL7EVNT^SCMSP0")
"RTN","SCMSPRE",12,0)
 ;Create HL7 Applications
"RTN","SCMSPRE",13,0)
 S TMP=$$NEWCP^XPDUTL("SCMS02","HL7APPS^SCMSP0")
"RTN","SCMSPRE",14,0)
 ;Create Mail Group for HL7 Logical Link
"RTN","SCMSPRE",15,0)
 S TMP=$$NEWCP^XPDUTL("SCMS03","MAILGRP^SCMSP0")
"RTN","SCMSPRE",16,0)
 ;Create HL7 Lower Level Protocol Parameters
"RTN","SCMSPRE",17,0)
 S TMP=$$NEWCP^XPDUTL("SCMS04","HL7LLPP^SCMSP0")
"RTN","SCMSPRE",18,0)
 ;Create HL7 Logical Link
"RTN","SCMSPRE",19,0)
 S TMP=$$NEWCP^XPDUTL("SCMS05","HL7LINK^SCMSP0")
"RTN","SCMSPRE",20,0)
 ;Done
"RTN","SCMSPRE",21,0)
 Q
"RTN","SCMSPST")
0^17^B2945108
"RTN","SCMSPST",1,0)
SCMSPST ;ALB/JRP - AMB CARE POST INIT DRIVER;04-JUN-1996
"RTN","SCMSPST",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSPST",3,0)
CHKPTS ;Create check points for pre-init
"RTN","SCMSPST",4,0)
 ;Input  : All variables set by KIDS
"RTN","SCMSPST",5,0)
 ;Output : None
"RTN","SCMSPST",6,0)
 ;
"RTN","SCMSPST",7,0)
 ;Declare variables
"RTN","SCMSPST",8,0)
 N TMP,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSK,SCQUEUE,X,Y,%,%H
"RTN","SCMSPST",9,0)
 ;Queue task to require provider and diagnosis for checkout from clinics
"RTN","SCMSPST",10,0)
 S TMP=$G(XPDQUES("POSHOPUP","B"))
"RTN","SCMSPST",11,0)
 S:(TMP="") TMP="NOW"
"RTN","SCMSPST",12,0)
 D BMES^XPDUTL("Background job to require provider and diagnosis for")
"RTN","SCMSPST",13,0)
 D MES^XPDUTL("checkout from clinics will be queued for "_TMP)
"RTN","SCMSPST",14,0)
 S ZTDTH=$G(XPDQUES("POSHOPUP"))
"RTN","SCMSPST",15,0)
 S:(ZTDTH="") ZTDTH=$H
"RTN","SCMSPST",16,0)
 S ZTDESC="REQUIRE PROVIDER AND DIAGNOSIS FOR CHECKOUT FROM CLINICS"
"RTN","SCMSPST",17,0)
 S ZTIO=""
"RTN","SCMSPST",18,0)
 S ZTRTN="HOPUP^SCMSP"
"RTN","SCMSPST",19,0)
 D ^%ZTLOAD
"RTN","SCMSPST",20,0)
 S ZTSK=+$G(ZTSK)
"RTN","SCMSPST",21,0)
 S SCQUEUE="0000000"
"RTN","SCMSPST",22,0)
 I ('ZTSK) D BMES^XPDUTL("*** Unable to queue task ***")
"RTN","SCMSPST",23,0)
 I (ZTSK) D
"RTN","SCMSPST",24,0)
 .D BMES^XPDUTL("Queued as task number "_ZTSK)
"RTN","SCMSPST",25,0)
 .S %H=$G(ZTSK("D")) D YMD^%DTC S SCQUEUE=X_%
"RTN","SCMSPST",26,0)
 ;Create check points
"RTN","SCMSPST",27,0)
 ;Initialize parameters - pass Queue Time & Task Number
"RTN","SCMSPST",28,0)
 S TMP=$$NEWCP^XPDUTL("SCMS01","PARAM^SCMSP",SCQUEUE_"-"_ZTSK)
"RTN","SCMSPST",29,0)
 ;Attach mail group to Ambulatory Care xmit summary bulletin
"RTN","SCMSPST",30,0)
 S TMP=$$NEWCP^XPDUTL("SCMS02","MG4BULL^SCMSP")
"RTN","SCMSPST",31,0)
 ;Enable event driver
"RTN","SCMSPST",32,0)
 S TMP=$$NEWCP^XPDUTL("SCMS03","FIXEVNT^SCMSP1")
"RTN","SCMSPST",33,0)
 ;Fix server protocol
"RTN","SCMSPST",34,0)
 S TMP=$$NEWCP^XPDUTL("SCMS04","FIXSRVR^SCMSP1")
"RTN","SCMSPST",35,0)
 ;Fix client protocol
"RTN","SCMSPST",36,0)
 S TMP=$$NEWCP^XPDUTL("SCMS05","FIXCLNT^SCMSP1")
"RTN","SCMSPST",37,0)
 ;Install correct version of SDM routine
"RTN","SCMSPST",38,0)
 S TMP=$$NEWCP^XPDUTL("SCMS06","SDM^SCMSP")
"RTN","SCMSPST",39,0)
 ;Done
"RTN","SCMSPST",40,0)
 Q
"RTN","SCMSPU1")
0^18^B3796450
"RTN","SCMSPU1",1,0)
SCMSPU1 ;ALB/JRP - AMB CARE POST INIT UTILITIES;03-JUN-1996
"RTN","SCMSPU1",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSPU1",3,0)
CRTAPP(HL7APP,HL7FAC,HL7MG) ;Create/find entry in HL APPLICATION file (#771)
"RTN","SCMSPU1",4,0)
 ;
"RTN","SCMSPU1",5,0)
 ;Input  : HL7APP - Name of application to create (field #.01)
"RTN","SCMSPU1",6,0)
 ;                  Free text - 3 to 15 characters
"RTN","SCMSPU1",7,0)
 ;         HL7FAC - Facility name (field #3)
"RTN","SCMSPU1",8,0)
 ;                  Free text - 1 to 20 characters
"RTN","SCMSPU1",9,0)
 ;                  Defaults to facility number
"RTN","SCMSPU1",10,0)
 ;         HL7MG - Mail Group (field #4)
"RTN","SCMSPU1",11,0)
 ;                 Pointer to entry in MAIL GROUP file (#3.8)
"RTN","SCMSPU1",12,0)
 ;Output : Ptr^New - Pointer to entry in HL APPLICATION file
"RTN","SCMSPU1",13,0)
 ;                   Flag indicating if entry was created
"RTN","SCMSPU1",14,0)
 ;                     1 = Yes
"RTN","SCMSPU1",15,0)
 ;                     0 = No
"RTN","SCMSPU1",16,0)
 ;         -1^Text - Error
"RTN","SCMSPU1",17,0)
 ;Notes  : If an existing entry is found, the currently stored values
"RTN","SCMSPU1",18,0)
 ;         will not be overwritten
"RTN","SCMSPU1",19,0)
 ;       : Default field seperator (#100) and encoding characters (#101)
"RTN","SCMSPU1",20,0)
 ;         are used.  This is done by not storing anything in the file
"RTN","SCMSPU1",21,0)
 ;         for these fields.
"RTN","SCMSPU1",22,0)
 ;       : A value for the country code (#7) will not be stored
"RTN","SCMSPU1",23,0)
 ;       : Application will be marked as active
"RTN","SCMSPU1",24,0)
 ;
"RTN","SCMSPU1",25,0)
 ;Check input
"RTN","SCMSPU1",26,0)
 S HL7APP=$G(HL7APP)
"RTN","SCMSPU1",27,0)
 Q:(HL7APP="") "-1^Did not pass name of HL7 Application to create"
"RTN","SCMSPU1",28,0)
 Q:((($L(HL7APP)<3))!(($L(HL7APP)>15))) "-1^Did not pass valid name for HL7 Application"
"RTN","SCMSPU1",29,0)
 S HL7FAC=$G(HL7FAC)
"RTN","SCMSPU1",30,0)
 S:(HL7FAC="") HL7FAC=+$P($$SITE^VASITE(),"^",3)
"RTN","SCMSPU1",31,0)
 Q:($L(HL7FAC)>20) "-1^Did not pass valid HL7 Facility Name"
"RTN","SCMSPU1",32,0)
 S HL7MG=+$G(HL7MG)
"RTN","SCMSPU1",33,0)
 Q:('$D(^XMB(3.8,HL7MG,0))) "-1^Did not pass valid pointer to Mail Group"
"RTN","SCMSPU1",34,0)
 ;Declare variables
"RTN","SCMSPU1",35,0)
 N HL7PTR,DIC,DIE,DA,DR,X,Y,DLAYGO,DTOUT,DUOUT,HL7NEW
"RTN","SCMSPU1",36,0)
 S DIC="^HL(771,"
"RTN","SCMSPU1",37,0)
 S DIC(0)="LX"
"RTN","SCMSPU1",38,0)
 S DIC("DR")="2///ACTIVE;3///^S X=HL7FAC;4////^S X=HL7MG"
"RTN","SCMSPU1",39,0)
 S DLAYGO=771
"RTN","SCMSPU1",40,0)
 S X=HL7APP
"RTN","SCMSPU1",41,0)
 ;Create/find entry
"RTN","SCMSPU1",42,0)
 D ^DIC
"RTN","SCMSPU1",43,0)
 S HL7PTR=+Y
"RTN","SCMSPU1",44,0)
 S HL7NEW=+$P(Y,"^",3)
"RTN","SCMSPU1",45,0)
 ;Error
"RTN","SCMSPU1",46,0)
 Q:(HL7PTR<0) "-1^Unable to create HL7 Application"
"RTN","SCMSPU1",47,0)
 ;Success - done
"RTN","SCMSPU1",48,0)
 Q HL7PTR_"^"_HL7NEW
"RTN","SCMSPU1",49,0)
 ;
"RTN","SCMSPU1",50,0)
OPCMG(RETNAME) ;Get pointer to Mail Group that receives OPC generation bulletin
"RTN","SCMSPU1",51,0)
 ;Input  : RETNAME - Flag indicating if name of Mail Group should
"RTN","SCMSPU1",52,0)
 ;                   be returned instead of a pointer to the Mail Group
"RTN","SCMSPU1",53,0)
 ;                   0 = No (default)
"RTN","SCMSPU1",54,0)
 ;                   1 = Yes
"RTN","SCMSPU1",55,0)
 ;Output : Value contained in OPC GENERATE MAIL GROUP field (#216)
"RTN","SCMSPU1",56,0)
 ;         of the MAS PARAMTER file (#43) - Pointer to MAIL GROUP
"RTN","SCMSPU1",57,0)
 ;         file (#3.8)
"RTN","SCMSPU1",58,0)
 ;
"RTN","SCMSPU1",59,0)
 ;Check input
"RTN","SCMSPU1",60,0)
 S RETNAME=+$G(RETNAME)
"RTN","SCMSPU1",61,0)
 ;Declare variables
"RTN","SCMSPU1",62,0)
 N NODE,PTR,NAME
"RTN","SCMSPU1",63,0)
 ;Get node value is stored on
"RTN","SCMSPU1",64,0)
 S NODE=$G(^DG(43,1,"SCLR"))
"RTN","SCMSPU1",65,0)
 ;Get pointer
"RTN","SCMSPU1",66,0)
 S PTR=+$P(NODE,"^",16)
"RTN","SCMSPU1",67,0)
 ;Return pointer to Mail Group file
"RTN","SCMSPU1",68,0)
 Q:('RETNAME) PTR
"RTN","SCMSPU1",69,0)
 ;Get name of Mail Group
"RTN","SCMSPU1",70,0)
 S NODE=$G(^XMB(3.8,PTR,0))
"RTN","SCMSPU1",71,0)
 S NAME=$P(NODE,"^",1)
"RTN","SCMSPU1",72,0)
 ;Return name of Mail Group
"RTN","SCMSPU1",73,0)
 Q NAME
"RTN","SCMSPU2")
0^77^B3897977
"RTN","SCMSPU2",1,0)
SCMSPU2 ;ALB/JRP - UTILITIES FOR INSTALLING EXPORTED ROUTINES;24-AUG-93
"RTN","SCMSPU2",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSPU2",3,0)
 ;
"RTN","SCMSPU2",4,0)
EXIST(X) ;DETERMINE IF ROUTINE X EXISTS
"RTN","SCMSPU2",5,0)
 ;INPUT  : X - Name of routine
"RTN","SCMSPU2",6,0)
 ;OUTPUT : 1 - Routine exists
"RTN","SCMSPU2",7,0)
 ;         0 - Routine doesn't exist
"RTN","SCMSPU2",8,0)
 ;        "" - Error
"RTN","SCMSPU2",9,0)
 ;
"RTN","SCMSPU2",10,0)
 ;CHECK INPUT & EXISTANCE OF ^%ZOSF("TEST")
"RTN","SCMSPU2",11,0)
 Q:($G(X)="") ""
"RTN","SCMSPU2",12,0)
 Q:('$D(^%ZOSF("TEST"))) ""
"RTN","SCMSPU2",13,0)
 ;CHECK FOR EXISTANCE
"RTN","SCMSPU2",14,0)
 X ^%ZOSF("TEST") Q $T
"RTN","SCMSPU2",15,0)
 ;
"RTN","SCMSPU2",16,0)
LOAD(X,ARRAY) ;LOAD ROUTINE X INTO ARRAY
"RTN","SCMSPU2",17,0)
 ;INPUT  : X - Name of routine
"RTN","SCMSPU2",18,0)
 ;         ARRAY - Array to copy into (full global reference)
"RTN","SCMSPU2",19,0)
 ;OUTPUT : None
"RTN","SCMSPU2",20,0)
 ;NOTES  : ARRAY will be in the format
"RTN","SCMSPU2",21,0)
 ;           ARRAY(Line_N,0)=Line number N of routine X
"RTN","SCMSPU2",22,0)
 ;       : ARRAY will be killed before loading routine.  If routine
"RTN","SCMSPU2",23,0)
 ;         could not be loaded, ARRAY() will not exit.
"RTN","SCMSPU2",24,0)
 ;
"RTN","SCMSPU2",25,0)
 ;CHECK INPUT, KILL ARRAY, TEST FOR ^%ZOSF("LOAD")
"RTN","SCMSPU2",26,0)
 Q:($G(ARRAY)="")
"RTN","SCMSPU2",27,0)
 K @ARRAY
"RTN","SCMSPU2",28,0)
 Q:($G(X)="")
"RTN","SCMSPU2",29,0)
 Q:('$D(^%ZOSF("LOAD")))
"RTN","SCMSPU2",30,0)
 ;DECLARE VARIABLES
"RTN","SCMSPU2",31,0)
 N XCNP,DIF,TMP,TMP1,TMP2
"RTN","SCMSPU2",32,0)
 ;SET REQUIRED VARIABLES
"RTN","SCMSPU2",33,0)
 S TMP=$P(ARRAY,"(",1)
"RTN","SCMSPU2",34,0)
 S TMP1=$P(ARRAY,"(",2)
"RTN","SCMSPU2",35,0)
 S TMP2=$P(TMP1,")",1)
"RTN","SCMSPU2",36,0)
 S:(TMP2="") DIF=TMP_"("
"RTN","SCMSPU2",37,0)
 S:(TMP2'="") DIF=TMP_"("_TMP2_","
"RTN","SCMSPU2",38,0)
 S XCNP=0
"RTN","SCMSPU2",39,0)
 ;LOAD ROUTINE
"RTN","SCMSPU2",40,0)
 X ^%ZOSF("LOAD")
"RTN","SCMSPU2",41,0)
 Q
"RTN","SCMSPU2",42,0)
 ;
"RTN","SCMSPU2",43,0)
COPY(OLDROU,NEWROU,XCN) ;COPY ROUTINE OLDROU TO ROUTINE NEWROU
"RTN","SCMSPU2",44,0)
 ;INPUT  : OLDROU - Name of existing routine
"RTN","SCMSPU2",45,0)
 ;         NEWROU - New name for routine
"RTN","SCMSPU2",46,0)
 ;         XCN - Line in existing routine to begin copying from
"RTN","SCMSPU2",47,0)
 ;               (defaults to line 1)
"RTN","SCMSPU2",48,0)
 ;OUTPUT : 0 - Success
"RTN","SCMSPU2",49,0)
 ;        -1 - Error
"RTN","SCMSPU2",50,0)
 ;
"RTN","SCMSPU2",51,0)
 ;CHECK INPUT & EXISTANCE OF ^%ZOSF("SAVE")
"RTN","SCMSPU2",52,0)
 Q:($G(OLDROU)="") -1
"RTN","SCMSPU2",53,0)
 Q:($G(NEWROU)="") -1
"RTN","SCMSPU2",54,0)
 S XCN=+$G(XCN)
"RTN","SCMSPU2",55,0)
 Q:('$D(^%ZOSF("SAVE"))) -1
"RTN","SCMSPU2",56,0)
 ;CHECK FOR EXISTANCE OF OLDROU
"RTN","SCMSPU2",57,0)
 Q:('$$EXIST(OLDROU)) -1
"RTN","SCMSPU2",58,0)
 ;DECLARE VARIABLES
"RTN","SCMSPU2",59,0)
 N ROOT1,ROOT2,X,DIE
"RTN","SCMSPU2",60,0)
 S ROOT1="^UTILITY(""SCMSPST"","_$J_")"
"RTN","SCMSPU2",61,0)
 S ROOT2="^UTILITY(""SCMSPST"","_$J_","
"RTN","SCMSPU2",62,0)
 K @ROOT1
"RTN","SCMSPU2",63,0)
 ;LOAD OLDROU
"RTN","SCMSPU2",64,0)
 D LOAD(OLDROU,ROOT1)
"RTN","SCMSPU2",65,0)
 Q:('$D(@ROOT1)) -1
"RTN","SCMSPU2",66,0)
 ;CALL TO ^%ZOSF("SAVE") START WITH LINE AFTER XCN.  SUBTRACT
"RTN","SCMSPU2",67,0)
 ; ONE FROM THE VALUE PASSED TO MATCH STATED VALUE.
"RTN","SCMSPU2",68,0)
 S XCN=XCN-1
"RTN","SCMSPU2",69,0)
 ;SAVE OLDROU AS NEWROU
"RTN","SCMSPU2",70,0)
 S X=NEWROU
"RTN","SCMSPU2",71,0)
 S DIE=ROOT2
"RTN","SCMSPU2",72,0)
 X ^%ZOSF("SAVE")
"RTN","SCMSPU2",73,0)
 K @ROOT1
"RTN","SCMSPU2",74,0)
 ;HAVE TO ASSUME THAT SAVE WAS SUCCESSFUL
"RTN","SCMSPU2",75,0)
 Q 0
"RTN","SCMSPU2",76,0)
 ;
"RTN","SCMSPU2",77,0)
SECOND(ROU,STRIP) ;RETURN SECOND LINE OF ROUTINE ROU
"RTN","SCMSPU2",78,0)
 ;INPUT  : ROU - Name of routine
"RTN","SCMSPU2",79,0)
 ;         STRIP - Flad indicating of leading <TAB>;; should be stripped
"RTN","SCMSPU2",80,0)
 ;           If 1, strip <TAB>;;  (default)
"RTN","SCMSPU2",81,0)
 ;           If 0, don't strip <TAB>;;
"RTN","SCMSPU2",82,0)
 ;OUTPUT : Second line of ROU
"RTN","SCMSPU2",83,0)
 ;         NULL returned on error
"RTN","SCMSPU2",84,0)
 ;
"RTN","SCMSPU2",85,0)
 ;CHECK INPUT
"RTN","SCMSPU2",86,0)
 Q:($G(ROU)="") ""
"RTN","SCMSPU2",87,0)
 Q:('$$EXIST(ROU)) ""
"RTN","SCMSPU2",88,0)
 S:($G(STRIP)="") STRIP=1
"RTN","SCMSPU2",89,0)
 ;DECLARE VARIABLES
"RTN","SCMSPU2",90,0)
 N ROOT,LINE2
"RTN","SCMSPU2",91,0)
 S ROOT="^UTILITY(""VAQPST"","_$J_")"
"RTN","SCMSPU2",92,0)
 ;LOAD ROUTINE
"RTN","SCMSPU2",93,0)
 D LOAD(ROU,ROOT)
"RTN","SCMSPU2",94,0)
 Q:('$D(@ROOT)) ""
"RTN","SCMSPU2",95,0)
 ;GET SECOND LINE
"RTN","SCMSPU2",96,0)
 S LINE2=$G(@ROOT@(2,0))
"RTN","SCMSPU2",97,0)
 ;STRIP LEADING <TAB>;;
"RTN","SCMSPU2",98,0)
 S:(STRIP) LINE2=$P(LINE2,";;",2,$L(LINE2,";;"))
"RTN","SCMSPU2",99,0)
 K @ROOT
"RTN","SCMSPU2",100,0)
 Q LINE2
"RTN","SCMSPX1")
0^75^B31314743
"RTN","SCMSPX1",1,0)
SCMSPX1 ;ALB/JRP - EXPORTED ROUTINE SDM WITH PATCH 41 APPLIED TO IT;03-JUL-96
"RTN","SCMSPX1",2,0)
 ;;5.3;Scheduling;**44**;AUG 13, 1993
"RTN","SCMSPX1",3,0)
SDM ;SF/GFT,ALB/BOK - MAKE AN APPOINTMENT ; 14 SEP 84  9:38 am
"RTN","SCMSPX1",4,0)
 ;;5.3;Scheduling;**5,32,38,41,44**;AUG 13, 1993
"RTN","SCMSPX1",5,0)
 ;                                           If defined...
"RTN","SCMSPX1",6,0)
 ; appt mgt vars:  SDFN := DFN of patient....will not be asked
"RTN","SCMSPX1",7,0)
 ;                SDCLN := ifn of clinic.....will not be asked    
"RTN","SCMSPX1",8,0)
 ;              SDAMERR := returned if error occurs
"RTN","SCMSPX1",9,0)
 ; 
"RTN","SCMSPX1",10,0)
 S:'$D(SDMM) SDMM=0
"RTN","SCMSPX1",11,0)
EN1 L  W !! D I^SDUTL I '$D(SDCLN) S DIC="^SC(",DIC(0)="AEMZQ",DIC("A")="Select CLINIC: ",DIC("S")="I $P(^(0),U,3)=""C""" D ^DIC K DIC G:Y<0!'$D(^("SL")) END
"RTN","SCMSPX1",12,0)
 K SDAPTYP,SDIN,SDRE,SDXXX S:$D(SDCLN) Y=+SDCLN
"RTN","SCMSPX1",13,0)
 I $D(^SC(+Y,"I")) S SDIN=+^("I"),SDRE=+$P(^("I"),U,2)
"RTN","SCMSPX1",14,0)
 K SDINA I $D(SDIN),SDIN S SDINA=SDIN K SDIN
"RTN","SCMSPX1",15,0)
 I $D(SD),$D(SC),+Y'=+SC K SD
"RTN","SCMSPX1",16,0)
 S SL=^SC(+Y,"SL"),X=$P(SL,U,3),STARTDAY=$S(X:X,1:8),SC=Y,SB=STARTDAY-1/100,X=$P(SL,U,6),HSI=$S(X=1:X,X:X,1:4),SI=$S(X="":4,X<3:4,X:X,1:4),STR="#@!$* XXWVUTSRQPONMLKJIHGFEDCBA0123456789jklmnopqrstuvwxyz",SDDIF=$S(HSI<3:8/HSI,1:2) K Y
"RTN","SCMSPX1",17,0)
 I $D(^SC(+SC,"SDPROT")),$P(^("SDPROT"),U)="Y",'$D(^SC(+SC,"SDPRIV",DUZ)) W !,*7,"Access to this clinic is prohibited!!",!,"Only users with a special code may access this clinic",*7 S:$D(SDCLN) SDAMERR="" G END:$D(SDCLN),SDM
"RTN","SCMSPX1",18,0)
 D CS^SDM1A S SDW="",WY="Y"
"RTN","SCMSPX1",19,0)
 I '$D(ORACTION),'$D(SDFN) S (DIC,DIE)="^DPT(",DIC(0)="AQZME" D ^DIC S DFN=+Y G:Y<0 END:$D(SDCLN),^SDM0:X[U,SDM
"RTN","SCMSPX1",20,0)
 S:$D(SDFN) DFN=SDFN
"RTN","SCMSPX1",21,0)
 I $D(^DPT(DFN,.35)),$P(^(.35),U)]"" W !?10,*7,"PATIENT HAS DIED." S:$D(SDFN) SDAMERR="" G END:$D(SDFN),SDM
"RTN","SCMSPX1",22,0)
 D ^SDM4 I $S('$D(COLLAT):1,COLLAT=7:1,1:0) G:$D(SDCLN) END G SDM
"RTN","SCMSPX1",23,0)
 K SDXXX D EN G END:$D(SDCLN),SDM
"RTN","SCMSPX1",24,0)
EN K SDMLT1 W:$P(VAEL(9),U,2)]"" !!,?15,"MEANS TEST STATUS: ",$P(VAEL(9),U,2),!
"RTN","SCMSPX1",25,0)
 S Y=DFN,Y(0)=^DPT(DFN,0) I VADM(7)]"" W !?3,*7,VADM(7)
"RTN","SCMSPX1",26,0)
 I $D(^DGS(41.1,"B",DFN)) F I=0:0 S I=$N(^DGS(41.1,"B",DFN,I)) Q:I'>0  I $P(^DGS(41.1,I,0),U,2)'<DT&('$P(^DGS(41.1,I,0),U,13)) W !,"SCHEDULED FOR ADMISSION ON " S Y=$P(^(0),U,2) D DT^SDM0
"RTN","SCMSPX1",27,0)
PEND W:$N(^DPT(DFN,"S",DT))'>DT !,"NO PENDING APPOINTMENTS" I $N(^DPT(DFN,"S",DT))>DT R !,"DISPLAY PENDING APPOINTMENTS: NO//",X:DTIME S:X="^" SDMLT1=1 G END:X["^",HELP:"YN"'[X I X["Y" W $P("YES",X,2)
"RTN","SCMSPX1",28,0)
 I  F Y=DT:0 S Y=$N(^DPT(DFN,"S",Y)) Q:Y'>0  I "I"[$P(^(Y,0),U,2) D CHKSO W:$X>9 ! W ?11 D DT^SDM0 W ?32 S DA=+SSC W SDLN,$S($D(^SC(DA,0)):$P(^(0),U),1:"DELETED CLINIC "),COV,"  ",SDAT16
"RTN","SCMSPX1",29,0)
 ;Prompt for RACE if no value is currently on file
"RTN","SCMSPX1",30,0)
 S DA=DFN,DR=$S($P(^DPT(DFN,0),U,6)="":.06,1:"")
"RTN","SCMSPX1",31,0)
 I DR]"" S DIE="^DPT(" D ^DIE K DR
"RTN","SCMSPX1",32,0)
 S DA=DFN,DR=$S('$D(^DPT(DA,.11)):"[SDM1]",$P(^(.11),U)="":"[SDM1]",1:"")
"RTN","SCMSPX1",33,0)
 S DIE="^DPT(" D ^DIE:DR]"" K DR Q:$D(SDXXX)
"RTN","SCMSPX1",34,0)
E S Y=$P(SL,U,5)
"RTN","SCMSPX1",35,0)
 S SDW="" I $D(^DPT(DFN,.1)) S SDW=^(.1) W !,"NOTE - PATIENT IS NOW IN WARD "_SDW
"RTN","SCMSPX1",36,0)
 Q:$D(SDXXX)
"RTN","SCMSPX1",37,0)
EN2 F X=0:0 S X=$N(^DPT(DFN,"DE",X)) Q:'$D(^(X,0))  I ^(0)-SC=0!'(^(0)-Y) F XX=0:0 S XX=$N(^DPT(DFN,"DE",X,1,XX)) Q:XX<1  S SDDIS=$P(^(XX,0),U,3),SDPRCL=Y D WRT S Y=SDPRCL K SDPRCL G ^SDM0:'SDDIS
"RTN","SCMSPX1",38,0)
 W *7,!?9,"PATIENT NOT ENROLLED IN CLINIC!" S X=$S(VADM(5)["F":"ER",1:"IM") I '$D(^SC(+Y,0)) S Y=+SC
"RTN","SCMSPX1",39,0)
 S Y=$P(^SC(Y,0),U)
"RTN","SCMSPX1",40,0)
 ; SCRESTA = Array of pt's teams causing restricted consults
"RTN","SCMSPX1",41,0)
 N SCRESTA
"RTN","SCMSPX1",42,0)
 S SCREST=$$RESTPT^SCAPMCU4(DFN,DT,"SCRESTA")
"RTN","SCMSPX1",43,0)
 IF SCREST D
"RTN","SCMSPX1",44,0)
 .N SCTM
"RTN","SCMSPX1",45,0)
 . S SCCLNM=Y
"RTN","SCMSPX1",46,0)
 . W !,?5,"Patient has restricted consults due to team assignment(s):"
"RTN","SCMSPX1",47,0)
 .S SCTM=0
"RTN","SCMSPX1",48,0)
 .F  S SCTM=$O(SCRESTA(SCTM)) Q:'SCTM  W !,?10,SCRESTA(SCTM)
"RTN","SCMSPX1",49,0)
 IF SCREST&'$G(SCOKCONS) D  Q
"RTN","SCMSPX1",50,0)
 .W !,?5,"This patient may only be given appointments and enrolled in clinics via"
"RTN","SCMSPX1",51,0)
 .W !,?15,"Make Consult Appointment Option, and"
"RTN","SCMSPX1",52,0)
 .W !,?15,"Edit Clinic Enrollment Data option"
"RTN","SCMSPX1",53,0)
ENR S %="",DTOUT=0 W !?9,"WANT TO ENROLL H"_X_" IN "_Y D YN^DICN I '%,%Y]"" W !,"RESPOND YES (Y) OR NO (N)" G ENR
"RTN","SCMSPX1",54,0)
 Q:'DTOUT&(%<0)  G:(%-1) ASKC S SDY=Y
"RTN","SCMSPX1",55,0)
GETED D BEFORE^SCMCEV3(DFN)
"RTN","SCMSPX1",56,0)
 R !,?9,"DATE OF ENROLLMENT: NOW// ",X:DTIME Q:X["^"  S:X="" X="NOW" S %DT="EXT" D ^%DT G:Y<0 GETED S HEY=Y
"RTN","SCMSPX1",57,0)
 S DA=DFN,DR="3///"_SDY,(DIE,DIC)="^DPT(",DP=2,DR(2,2.001)=".01///"_SDY_";1///"_HEY,DR(3,2.011)=".01///"_HEY_";S DIE(""NO^"")="""";1" D ^DIE
"RTN","SCMSPX1",58,0)
 D MAIL^SCMCCON(DFN,.SCCLNM,1,DT,"SCRESTA")
"RTN","SCMSPX1",59,0)
 N TMPY
"RTN","SCMSPX1",60,0)
 I $D(Y) S TMPY=Y
"RTN","SCMSPX1",61,0)
 K DR,DP,SCCLNM,SCREST
"RTN","SCMSPX1",62,0)
 D AFTER^SCMCEV3(DFN),INVOKE^SCMCEV3(DFN)
"RTN","SCMSPX1",63,0)
 I $D(TMPY) S Y=TMPY
"RTN","SCMSPX1",64,0)
 I '$D(TMPY) K Y
"RTN","SCMSPX1",65,0)
 K TMPY
"RTN","SCMSPX1",66,0)
 G ^SDM0:'$D(Y)
"RTN","SCMSPX1",67,0)
 Q
"RTN","SCMSPX1",68,0)
 ;
"RTN","SCMSPX1",69,0)
ASKC S %="" W !,"WANT TO SCHEDULE PATIENT FOR CONSULT" D YN^DICN Q:%<0  I '% W !,"REPLY YES (Y) OR NO (N)" G ASKC
"RTN","SCMSPX1",70,0)
 Q:(%-1)  D:$G(SCREST) MAIL^SCMCCON(DFN,.SCCLNM,2,DT,"SCRESTA") K DR,SCREST,SCCLNM G ^SDM0
"RTN","SCMSPX1",71,0)
CHKSO S COV=$S($P(^DPT(DFN,"S",Y,0),U,11)=1:" (COLLATERAL)",1:""),HY=Y,SSC=^(0),SDAT16=$S($D(^SD(409.1,+$P(SSC,U,16),0)):$P(^(0),U),1:"")
"RTN","SCMSPX1",72,0)
 F SDJ=3,4,5 I $P(^DPT(DFN,"S",HY,0),U,SDJ)]"" S Y=$P(^(0),U,SDJ) W:$X>9 ! W ?10,"*" D DT^SDM0 W ?32,$S(SDJ=3:"LAB",SDJ=4:"XRAY",1:"EKG")
"RTN","SCMSPX1",73,0)
 S SDLN="" F J=0:0 S J=$N(^SC(+SSC,"S",HY,1,J)) Q:J<0  I $D(^(J,0)),+^(0)=DFN S SDLN="("_$P(^(0),U,2)_" MINUTES) " Q
"RTN","SCMSPX1",74,0)
 S Y=HY Q
"RTN","SCMSPX1",75,0)
END D KVAR^VADPT K SDAPTYP,SDSC,%,%DT,ASKC,COV,DA,DIC,DIE,DP,DR,HEY,HSI,HY,J,SB,SC,SDDIF,SDJ,SDLN,SD17,SDMAX,SDU,SDYC,SI,SL,SSC,STARTDAY,STR
"RTN","SCMSPX1",76,0)
 K WY,X,XX,Y,S,SD,SDAP16,SDEDT,SDTY,SM,SS,ST,ARG,CCX,CCXN,HX,I,PXR,SDINA,SDW,COLLAT,SDDIS I $D(SDMM) K:'SDMM SDMM
"RTN","SCMSPX1",77,0)
 I '$D(SDMLT) K SDMLT1
"RTN","SCMSPX1",78,0)
 Q
"RTN","SCMSPX1",79,0)
OERR S XQORQUIT=1 Q:'$D(ORVP)  S DFN=+ORVP G SDM
"RTN","SCMSPX1",80,0)
HELP W !,"YES - TO DISPLAY FUTURE APPOINTMENTS",!,"NO - FUTURE APPOINTMENTS NOT DISPLAYED" G PEND
"RTN","SCMSPX1",81,0)
WRT W !,$S('SDDIS:"CURRENT  ",1:"PREVIOUS "),"ENROLLMENT: ",$S($P(^DPT(DFN,"DE",X,1,XX,0),U,2)["O":"OPT",1:"AC") I SDDIS W ?41,"DISCHARGED FROM CLINIC: " S Y=SDDIS D DT^DIQ
"RTN","SCMSPX1",82,0)
 Q
"RTN","SCMSPX2")
0^76^B25813809
"RTN","SCMSPX2",1,0)
SCMSPX2 ;ALB/JRP - EXPORTED ROUTINE SDM WITHOUT PATCH 41 APPLIED TO IT;03-JUL-96
"RTN","SCMSPX2",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSPX2",3,0)
SDM ;SF/GFT,ALB/BOK - MAKE AN APPOINTMENT ; 14 SEP 84  9:38 am
"RTN","SCMSPX2",4,0)
 ;;5.3;Scheduling;**15,32,38,44**;Aug 13, 1993
"RTN","SCMSPX2",5,0)
 ;                                           If defined...
"RTN","SCMSPX2",6,0)
 ; appt mgt vars:  SDFN := DFN of patient....will not be asked
"RTN","SCMSPX2",7,0)
 ;                SDCLN := ifn of clinic.....will not be asked    
"RTN","SCMSPX2",8,0)
 ;              SDAMERR := returned if error occurs
"RTN","SCMSPX2",9,0)
 ; 
"RTN","SCMSPX2",10,0)
 S:'$D(SDMM) SDMM=0
"RTN","SCMSPX2",11,0)
EN1 L  W !! D I^SDUTL I '$D(SDCLN) S DIC="^SC(",DIC(0)="AEMZQ",DIC("A")="Select CLINIC: ",DIC("S")="I $P(^(0),U,3)=""C""" D ^DIC K DIC G:Y<0!'$D(^("SL")) END
"RTN","SCMSPX2",12,0)
 K SDAPTYP,SDIN,SDRE,SDXXX S:$D(SDCLN) Y=+SDCLN
"RTN","SCMSPX2",13,0)
 I $D(^SC(+Y,"I")) S SDIN=+^("I"),SDRE=+$P(^("I"),U,2)
"RTN","SCMSPX2",14,0)
 K SDINA I $D(SDIN),SDIN S SDINA=SDIN K SDIN
"RTN","SCMSPX2",15,0)
 I $D(SD),$D(SC),+Y'=+SC K SD
"RTN","SCMSPX2",16,0)
 S SL=^SC(+Y,"SL"),X=$P(SL,U,3),STARTDAY=$S(X:X,1:8),SC=Y,SB=STARTDAY-1/100,X=$P(SL,U,6),HSI=$S(X=1:X,X:X,1:4),SI=$S(X="":4,X<3:4,X:X,1:4),STR="#@!$* XXWVUTSRQPONMLKJIHGFEDCBA0123456789jklmnopqrstuvwxyz",SDDIF=$S(HSI<3:8/HSI,1:2) K Y
"RTN","SCMSPX2",17,0)
 I $D(^SC(+SC,"SDPROT")),$P(^("SDPROT"),U)="Y",'$D(^SC(+SC,"SDPRIV",DUZ)) W !,*7,"Access to this clinic is prohibited!!",!,"Only users with a special code may access this clinic",*7 S:$D(SDCLN) SDAMERR="" G END:$D(SDCLN),SDM
"RTN","SCMSPX2",18,0)
 D CS^SDM1A S SDW="",WY="Y"
"RTN","SCMSPX2",19,0)
 I '$D(ORACTION),'$D(SDFN) S (DIC,DIE)="^DPT(",DIC(0)="AQZME" D ^DIC S DFN=+Y G:Y<0 END:$D(SDCLN),^SDM0:X[U,SDM
"RTN","SCMSPX2",20,0)
 S:$D(SDFN) DFN=SDFN
"RTN","SCMSPX2",21,0)
 I $D(^DPT(DFN,.35)),$P(^(.35),U)]"" W !?10,*7,"PATIENT HAS DIED." S:$D(SDFN) SDAMERR="" G END:$D(SDFN),SDM
"RTN","SCMSPX2",22,0)
 D ^SDM4 I $S('$D(COLLAT):1,COLLAT=7:1,1:0) G:$D(SDCLN) END G SDM
"RTN","SCMSPX2",23,0)
 K SDXXX D EN G END:$D(SDCLN),SDM
"RTN","SCMSPX2",24,0)
EN K SDMLT1 W:$P(VAEL(9),U,2)]"" !!,?15,"MEANS TEST STATUS: ",$P(VAEL(9),U,2),!
"RTN","SCMSPX2",25,0)
 S Y=DFN,Y(0)=^DPT(DFN,0) I VADM(7)]"" W !?3,*7,VADM(7)
"RTN","SCMSPX2",26,0)
 I $D(^DGS(41.1,"B",DFN)) F I=0:0 S I=$N(^DGS(41.1,"B",DFN,I)) Q:I'>0  I $P(^DGS(41.1,I,0),U,2)'<DT&('$P(^DGS(41.1,I,0),U,13)) W !,"SCHEDULED FOR ADMISSION ON " S Y=$P(^(0),U,2) D DT^SDM0
"RTN","SCMSPX2",27,0)
PEND W:$N(^DPT(DFN,"S",DT))'>DT !,"NO PENDING APPOINTMENTS" I $N(^DPT(DFN,"S",DT))>DT R !,"DISPLAY PENDING APPOINTMENTS: NO//",X:DTIME S:X="^" SDMLT1=1 S X=$$UP^XLFSTR(X) G END:X["^",HELP:"YN"'[X I X["Y" W $P("YES",X,2)
"RTN","SCMSPX2",28,0)
 I  F Y=DT:0 S Y=$N(^DPT(DFN,"S",Y)) Q:Y'>0  I "I"[$P(^(Y,0),U,2) D CHKSO W:$X>9 ! W ?11 D DT^SDM0 W ?32 S DA=+SSC W SDLN,$S($D(^SC(DA,0)):$P(^(0),U),1:"DELETED CLINIC "),COV,"  ",SDAT16
"RTN","SCMSPX2",29,0)
 S DA=DFN,DR=$S($P(^DPT(DFN,0),U,6)="":.06,1:"")
"RTN","SCMSPX2",30,0)
 I DR]"" S DIE="^DPT(" D ^DIE K DR
"RTN","SCMSPX2",31,0)
 S DA=DFN,DR=$S('$D(^DPT(DA,.11)):"[SDM1]",$P(^(.11),U)="":"[SDM1]",1:"")
"RTN","SCMSPX2",32,0)
 S DIE="^DPT(" D ^DIE:DR]"" K DR Q:$D(SDXXX)
"RTN","SCMSPX2",33,0)
E S Y=$P(SL,U,5)
"RTN","SCMSPX2",34,0)
 S SDW="" I $D(^DPT(DFN,.1)) S SDW=^(.1) W !,"NOTE - PATIENT IS NOW IN WARD "_SDW
"RTN","SCMSPX2",35,0)
 Q:$D(SDXXX)
"RTN","SCMSPX2",36,0)
EN2 F X=0:0 S X=$N(^DPT(DFN,"DE",X)) Q:'$D(^(X,0))  I ^(0)-SC=0!'(^(0)-Y) F XX=0:0 S XX=$N(^DPT(DFN,"DE",X,1,XX)) Q:XX<1  S SDDIS=$P(^(XX,0),U,3),SDPRCL=Y D WRT S Y=SDPRCL K SDPRCL G ^SDM0:'SDDIS
"RTN","SCMSPX2",37,0)
 W *7,!?9,"PATIENT NOT ENROLLED IN CLINIC!" S X=$S(VADM(5)["F":"ER",1:"IM") I '$D(^SC(+Y,0)) S Y=+SC
"RTN","SCMSPX2",38,0)
 N SCP
"RTN","SCMSPX2",39,0)
 S SCP=Y,Y=$P(^SC(Y,0),U)
"RTN","SCMSPX2",40,0)
ENR S %="",DTOUT=0 W !?9,"WANT TO ENROLL H"_X_" IN "_Y D YN^DICN I '%,%Y]"" W !,"RESPOND YES (Y) OR NO (N)" G ENR
"RTN","SCMSPX2",41,0)
 Q:'DTOUT&(%<0)  G:(%-1) ASKC S SDY=Y
"RTN","SCMSPX2",42,0)
GETED R !,?9,"DATE OF ENROLLMENT: NOW// ",X:DTIME Q:X["^"  S:X="" X="NOW" S %DT="EXT" D ^%DT G:Y<0 GETED S HEY=Y
"RTN","SCMSPX2",43,0)
 S DA=DFN,DR="3///`"_+SCP,(DIE,DIC)="^DPT(",DP=2,DR(2,2.001)=".01///`"_+SCP_";1///"_HEY,DR(3,2.011)=".01///"_HEY_";S DIE(""NO^"")="""";1" D ^DIE K DR,DP G ^SDM0:'$D(Y) Q
"RTN","SCMSPX2",44,0)
 ;
"RTN","SCMSPX2",45,0)
ASKC S %="" W !,"WANT TO SCHEDULE PATIENT FOR CONSULT" D YN^DICN Q:%<0  I '% W !,"REPLY YES (Y) OR NO (N)" G ASKC
"RTN","SCMSPX2",46,0)
 Q:(%-1)  K DR G ^SDM0
"RTN","SCMSPX2",47,0)
CHKSO S COV=$S($P(^DPT(DFN,"S",Y,0),U,11)=1:" (COLLATERAL)",1:""),HY=Y,SSC=^(0),SDAT16=$S($D(^SD(409.1,+$P(SSC,U,16),0)):$P(^(0),U),1:"")
"RTN","SCMSPX2",48,0)
 F SDJ=3,4,5 I $P(^DPT(DFN,"S",HY,0),U,SDJ)]"" S Y=$P(^(0),U,SDJ) W:$X>9 ! W ?10,"*" D DT^SDM0 W ?32,$S(SDJ=3:"LAB",SDJ=4:"XRAY",1:"EKG")
"RTN","SCMSPX2",49,0)
 S SDLN="" F J=0:0 S J=$N(^SC(+SSC,"S",HY,1,J)) Q:J<0  I $D(^(J,0)),+^(0)=DFN S SDLN="("_$P(^(0),U,2)_" MINUTES) " Q
"RTN","SCMSPX2",50,0)
 S Y=HY Q
"RTN","SCMSPX2",51,0)
END D KVAR^VADPT K SDAPTYP,SDSC,%,%DT,ASKC,COV,DA,DIC,DIE,DP,DR,HEY,HSI,HY,J,SB,SC,SDDIF,SDJ,SDLN,SD17,SDMAX,SDU,SDYC,SI,SL,SSC,STARTDAY,STR
"RTN","SCMSPX2",52,0)
 K WY,X,XX,Y,S,SD,SDAP16,SDEDT,SDTY,SM,SS,ST,ARG,CCX,CCXN,HX,I,PXR,SDINA,SDW,COLLAT,SDDIS I $D(SDMM) K:'SDMM SDMM
"RTN","SCMSPX2",53,0)
 I '$D(SDMLT) K SDMLT1
"RTN","SCMSPX2",54,0)
 Q
"RTN","SCMSPX2",55,0)
OERR S XQORQUIT=1 Q:'$D(ORVP)  S DFN=+ORVP G SDM
"RTN","SCMSPX2",56,0)
HELP W !,"YES - TO DISPLAY FUTURE APPOINTMENTS",!,"NO - FUTURE APPOINTMENTS NOT DISPLAYED" G PEND
"RTN","SCMSPX2",57,0)
WRT W !,$S('SDDIS:"CURRENT  ",1:"PREVIOUS "),"ENROLLMENT: ",$S($P(^DPT(DFN,"DE",X,1,XX,0),U,2)["O":"OPT",1:"AC") I SDDIS W ?41,"DISCHARGED FROM CLINIC: " S Y=SDDIS D DT^DIQ
"RTN","SCMSPX2",58,0)
 Q
"RTN","SCMSVDG1")
0^19^B7170959
"RTN","SCMSVDG1",1,0)
SCMSVDG1 ;ALB/ESD HL7 DG1 Segment Validation ;05/08/95
"RTN","SCMSVDG1",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVDG1",3,0)
 ;
"RTN","SCMSVDG1",4,0)
 ;
"RTN","SCMSVDG1",5,0)
EN(DG1ARRY,HLQ,HLFS,ENCPTR) ;
"RTN","SCMSVDG1",6,0)
 ; Entry point to return the HL7 DG1 (Outpatient Diagnosis) validation segment
"RTN","SCMSVDG1",7,0)
 ;
"RTN","SCMSVDG1",8,0)
 ;  Input:  DG1ARRY - Array of DG1 Segments
"RTN","SCMSVDG1",9,0)
 ;              HLQ - HL7 null variable
"RTN","SCMSVDG1",10,0)
 ;             HLFS - HL7 field separator
"RTN","SCMSVDG1",11,0)
 ;           ENCPTR - Outpatient Encounter IEN (file #409.68)
"RTN","SCMSVDG1",12,0)
 ;
"RTN","SCMSVDG1",13,0)
 ;
"RTN","SCMSVDG1",14,0)
 ; Output:  1 if DG1 passed validity check
"RTN","SCMSVDG1",15,0)
 ;          Error message if DG1 failed validity check in form of:
"RTN","SCMSVDG1",16,0)
 ;          -1^"xxx failed validity check" (xxx=element in DG1 segment)
"RTN","SCMSVDG1",17,0)
 ;
"RTN","SCMSVDG1",18,0)
 ; NOTE:  This validity check will pass if at least ONE DG1 segment in 
"RTN","SCMSVDG1",19,0)
 ;        the DG1 array passes the validity checks.
"RTN","SCMSVDG1",20,0)
 ;
"RTN","SCMSVDG1",21,0)
 ;        A check for occasion of service (procedure which does not 
"RTN","SCMSVDG1",22,0)
 ;        require a diagnosis) is contained in this routine.
"RTN","SCMSVDG1",23,0)
 ;
"RTN","SCMSVDG1",24,0)
 ;
"RTN","SCMSVDG1",25,0)
 N DG1SEG,I,J,MSG,PROCARRY,OCCSERV,VALID,X,Z
"RTN","SCMSVDG1",26,0)
 S MSG=" element in DG1 segment failed validity check"
"RTN","SCMSVDG1",27,0)
 S I=0,X="",PROCARRY="PROCS",DG1ARRY=$G(DG1ARRY)
"RTN","SCMSVDG1",28,0)
 S:(DG1ARRY="") DG1ARRY="^TMP(""VAFHL"",$J,""DIAGNOSIS"")"
"RTN","SCMSVDG1",29,0)
 ;
"RTN","SCMSVDG1",30,0)
 ;- Creates local array of procedures to check for occasion of service
"RTN","SCMSVDG1",31,0)
 ;  (Occasion of service does not require a diagnosis)
"RTN","SCMSVDG1",32,0)
 D PROC^SCDXUTL0(ENCPTR,PROCARRY)
"RTN","SCMSVDG1",33,0)
 ;
"RTN","SCMSVDG1",34,0)
 F  S I=+$O(@DG1ARRY@(I)) Q:'I  D
"RTN","SCMSVDG1",35,0)
 . S J="",VALID(I)=1
"RTN","SCMSVDG1",36,0)
 . F  S J=$O(@DG1ARRY@(I,J)) Q:J=""  D
"RTN","SCMSVDG1",37,0)
 .. S DG1SEG=$G(@DG1ARRY@(I,J)),DG1SEG=$$CONVERT^SCMSVUT0(DG1SEG,HLFS,HLQ)
"RTN","SCMSVDG1",38,0)
 .. F Z=1,2,3,4,6 Q:(+VALID(I))=-1  I $P(DG1SEG,HLFS,Z)="" S VALID(I)=-1_"^"_$P(($T(@Z)),";;",2)_MSG
"RTN","SCMSVDG1",39,0)
 .. ;
"RTN","SCMSVDG1",40,0)
 .. ;- Check for occasion of service (no diagnosis required)
"RTN","SCMSVDG1",41,0)
 .. I $P(DG1SEG,HLFS,4)="" S OCCSERV=$$CHKOCC(PROCARRY) I OCCSERV=1 S VALID(I)=1
"RTN","SCMSVDG1",42,0)
 ;
"RTN","SCMSVDG1",43,0)
 I '$D(VALID) S VALID(1)=-1_"^"_"No ICD9 diagnosis found for this encounter (invalid HL7 DG1 segment)"
"RTN","SCMSVDG1",44,0)
 ;- Loop thru VALID array to find (at least one) valid diagnosis record
"RTN","SCMSVDG1",45,0)
 F  S X=$O(VALID(X)) Q:'X  I +$G(VALID(X))=1 G ENQ
"RTN","SCMSVDG1",46,0)
 ;
"RTN","SCMSVDG1",47,0)
 ;- Get first error entry if none are valid
"RTN","SCMSVDG1",48,0)
 S X="",X=$O(VALID(X)) I +$G(VALID(X))=-1 G ENQ
"RTN","SCMSVDG1",49,0)
 ;
"RTN","SCMSVDG1",50,0)
ENQ K @PROCARRY
"RTN","SCMSVDG1",51,0)
 Q $G(VALID(X))
"RTN","SCMSVDG1",52,0)
 ;
"RTN","SCMSVDG1",53,0)
 ;
"RTN","SCMSVDG1",54,0)
CHKOCC(PROCARRY) ; Occasion of Service Check
"RTN","SCMSVDG1",55,0)
 ;
"RTN","SCMSVDG1",56,0)
 N X,OCC,PROC,Z
"RTN","SCMSVDG1",57,0)
 S (OCC,X)=0
"RTN","SCMSVDG1",58,0)
 F  S X=$O(@PROCARRY@(X)) Q:'X!(OCC=1)  D
"RTN","SCMSVDG1",59,0)
 . S Z=100
"RTN","SCMSVDG1",60,0)
 . S PROC=+$G(@PROCARRY@(X)) I PROC=0 Q
"RTN","SCMSVDG1",61,0)
 . I PROC<($P($T(@Z),";;",2)) S OCC=0 Q
"RTN","SCMSVDG1",62,0)
 . F Z=100:100:400 Q:OCC=1  D
"RTN","SCMSVDG1",63,0)
 .. I (PROC=($P($T(@Z),";;",2))!(PROC>($P($T(@Z),";;",2)))&(PROC<($P($T(@Z),";;",3)))!(PROC=($P($T(@Z),";;",3)))) S OCC=1 Q
"RTN","SCMSVDG1",64,0)
 . I PROC>($P($T(@Z),";;",3)) S OCC=0 Q
"RTN","SCMSVDG1",65,0)
CHKOCCQ Q OCC
"RTN","SCMSVDG1",66,0)
 ;
"RTN","SCMSVDG1",67,0)
 ;
"RTN","SCMSVDG1",68,0)
 ;- DG1 data elements validated
"RTN","SCMSVDG1",69,0)
 ;
"RTN","SCMSVDG1",70,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVDG1",71,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVDG1",72,0)
3 ;;DIAGNOSIS CODING METHOD 
"RTN","SCMSVDG1",73,0)
4 ;;DIAGNOSIS CODE (ICD 9) 
"RTN","SCMSVDG1",74,0)
6 ;;DIAGNOSIS DATE/TIME 
"RTN","SCMSVDG1",75,0)
 ;
"RTN","SCMSVDG1",76,0)
 ;
"RTN","SCMSVDG1",77,0)
 ;- CPT ranges for occasion of service codes
"RTN","SCMSVDG1",78,0)
100 ;;70010;;89399
"RTN","SCMSVDG1",79,0)
200 ;;90700;;90749
"RTN","SCMSVDG1",80,0)
300 ;;93000;;93278
"RTN","SCMSVDG1",81,0)
400 ;;95812;;95827
"RTN","SCMSVEVN")
0^20^B1794829
"RTN","SCMSVEVN",1,0)
SCMSVEVN ;ALB/ESD HL7 EVN Segment Validation ;05/08/95
"RTN","SCMSVEVN",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVEVN",3,0)
 ;
"RTN","SCMSVEVN",4,0)
 ;
"RTN","SCMSVEVN",5,0)
EN(EVNSEG,HLQ,HLFS) ;
"RTN","SCMSVEVN",6,0)
 ; Entry point to return the HL7 EVN (Event Type) validation segment
"RTN","SCMSVEVN",7,0)
 ;
"RTN","SCMSVEVN",8,0)
 ;  Input:  EVNSEG - EVN Segment
"RTN","SCMSVEVN",9,0)
 ;             HLQ - HL7 null variable
"RTN","SCMSVEVN",10,0)
 ;            HLFS - HL7 field separator
"RTN","SCMSVEVN",11,0)
 ;
"RTN","SCMSVEVN",12,0)
 ; Output:  1 if EVN passed validity check
"RTN","SCMSVEVN",13,0)
 ;          Error message if EVN failed validity check in form of:
"RTN","SCMSVEVN",14,0)
 ;          -1^"xxx failed validity check" (xxx=element in EVN segment)
"RTN","SCMSVEVN",15,0)
 ;
"RTN","SCMSVEVN",16,0)
 ;
"RTN","SCMSVEVN",17,0)
 N I,MSG,VALID,X
"RTN","SCMSVEVN",18,0)
 S VALID=1,MSG=" element in EVN segment failed validity check"
"RTN","SCMSVEVN",19,0)
 S EVNSEG=$G(EVNSEG) I EVNSEG="" S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVEVN",20,0)
 I $L(EVNSEG,HLFS)'>2 S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVEVN",21,0)
 S EVNSEG=$$CONVERT^SCMSVUT0(EVNSEG,HLFS,HLQ)
"RTN","SCMSVEVN",22,0)
 F I=1:1:3 Q:(+$G(VALID)<1)  D
"RTN","SCMSVEVN",23,0)
 . S X=$P(EVNSEG,HLFS,I)
"RTN","SCMSVEVN",24,0)
 . I X="" S VALID=-1_"^"_$P(($T(@I)),";;",2)_MSG
"RTN","SCMSVEVN",25,0)
 ;
"RTN","SCMSVEVN",26,0)
ENQ Q VALID
"RTN","SCMSVEVN",27,0)
 ;
"RTN","SCMSVEVN",28,0)
 ;
"RTN","SCMSVEVN",29,0)
 ;
"RTN","SCMSVEVN",30,0)
ERR ;;Invalid or missing HL7 event data for encounter (HL7 EVN data segment)
"RTN","SCMSVEVN",31,0)
 ;
"RTN","SCMSVEVN",32,0)
 ;
"RTN","SCMSVEVN",33,0)
 ;- EVN data elements validated
"RTN","SCMSVEVN",34,0)
 ;
"RTN","SCMSVEVN",35,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVEVN",36,0)
2 ;;HL7 EVENT TYPE 
"RTN","SCMSVEVN",37,0)
3 ;;HL7 EVENT DATE/TIME 
"RTN","SCMSVPID")
0^21^B9519819
"RTN","SCMSVPID",1,0)
SCMSVPID ;ALB/ESD HL7 PID Segment Validation ;05/08/95
"RTN","SCMSVPID",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVPID",3,0)
 ;
"RTN","SCMSVPID",4,0)
 ;
"RTN","SCMSVPID",5,0)
EN(PIDSEG,PID1ARRY,HLQ,HLFS,HLECH) ;
"RTN","SCMSVPID",6,0)
 ; Entry point to return the HL7 PID (Patient ID) validation segment
"RTN","SCMSVPID",7,0)
 ;
"RTN","SCMSVPID",8,0)
 ;  Input:  PIDSEG  -  String containing PID segment (up to 245 char)
"RTN","SCMSVPID",9,0)
 ;         PID1ARRY - Array containing rest of PID segment (>245 char)
"RTN","SCMSVPID",10,0)
 ;             HLQ  - HL7 null variable
"RTN","SCMSVPID",11,0)
 ;            HLFS  - HL7 field separator
"RTN","SCMSVPID",12,0)
 ;           HLECH  - HL7 encoding characters
"RTN","SCMSVPID",13,0)
 ;
"RTN","SCMSVPID",14,0)
 ; Output:  1 if PID passed validity check
"RTN","SCMSVPID",15,0)
 ;          Error message if PID failed validity check in form of:
"RTN","SCMSVPID",16,0)
 ;          -1^"xxx failed validity check" (xxx=element in PID segment)
"RTN","SCMSVPID",17,0)
 ;
"RTN","SCMSVPID",18,0)
 ;
"RTN","SCMSVPID",19,0)
 N ENDSEG,I,MSG,NEXTP,PID1,PID1SEG,VALID,X
"RTN","SCMSVPID",20,0)
 S MSG=" element in PID segment failed validity check",PID1=0,VALID=1,X=""
"RTN","SCMSVPID",21,0)
 S PIDSEG=$G(PIDSEG),PID1ARRY=$G(PID1ARRY)
"RTN","SCMSVPID",22,0)
 I PIDSEG="" S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVPID",23,0)
 ;
"RTN","SCMSVPID",24,0)
 ;-Set encoding chars to standard HL7 encoding chars if not passed in
"RTN","SCMSVPID",25,0)
 S HLECH=$G(HLECH)
"RTN","SCMSVPID",26,0)
 S:HLECH="" HLECH="~|\&"
"RTN","SCMSVPID",27,0)
 ;
"RTN","SCMSVPID",28,0)
 ;- Get length of PIDSEG in case PID segment is >245
"RTN","SCMSVPID",29,0)
 S LSTP=$L(PIDSEG,HLFS) I LSTP'>2 S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVPID",30,0)
 S PIDSEG=$$CONVERT^SCMSVUT0(PIDSEG,HLFS,HLQ)
"RTN","SCMSVPID",31,0)
 ;
"RTN","SCMSVPID",32,0)
 F I=1,2,6,8,9,11,12,13,17,18,20 G ENQ:+$G(VALID)<1 I (I'>($S(PID1ARRY]"":LSTP-1,1:LSTP))) D
"RTN","SCMSVPID",33,0)
 . I ($P(PIDSEG,HLFS,I)="") S VALID=-1_"^"_$P($T(@I),";;",2)_MSG Q
"RTN","SCMSVPID",34,0)
 . I I=12 S VALID=$$ADDRCHK($P(PIDSEG,HLFS,12),VALID)
"RTN","SCMSVPID",35,0)
 ;
"RTN","SCMSVPID",36,0)
 ;- Validating PID1ARRY (>245 remainder of PID segment)
"RTN","SCMSVPID",37,0)
 I PID1ARRY]"" D
"RTN","SCMSVPID",38,0)
 . S ENDSEG=($L(PID1ARRY,HLFS)+(LSTP-1)),ENDSEG=$G(ENDSEG)
"RTN","SCMSVPID",39,0)
 . S PID1SEG=PID1ARRY,PID1SEG=$$CONVERT^SCMSVUT0(PID1SEG,HLFS,HLQ)
"RTN","SCMSVPID",40,0)
 . ;
"RTN","SCMSVPID",41,0)
 . ;-Concatenate PIDSEG last piece w/PID1SEG 1st piece and validate 
"RTN","SCMSVPID",42,0)
 . S NEXTP=($P(PIDSEG,HLFS,LSTP)_$P(PID1SEG,HLFS)),NEXTP=$G(NEXTP)
"RTN","SCMSVPID",43,0)
 . I NEXTP="""""" S NEXTP=""
"RTN","SCMSVPID",44,0)
 . F I=1,2,6,8,9,11,12,13,17,18,20 Q:+$G(VALID)<1  D
"RTN","SCMSVPID",45,0)
 .. I (I=LSTP),(NEXTP="") S VALID=-1_"^"_$P($T(@I),";;",2)_MSG Q
"RTN","SCMSVPID",46,0)
 .. I (I=LSTP),(LSTP=12) S VALID=$$ADDRCHK(NEXTP,VALID)
"RTN","SCMSVPID",47,0)
 . ;
"RTN","SCMSVPID",48,0)
 . ;-Validate rest of PID1SEG
"RTN","SCMSVPID",49,0)
 . F I=1,2,6,8,9,11,12,13,17,18,20 Q:+$G(VALID)<1  I (I>(LSTP))&((I<ENDSEG)!(I=ENDSEG)) D
"RTN","SCMSVPID",50,0)
 .. I PID1=0 S $P(X,HLFS,LSTP)="",PID1SEG=X_PID1SEG,PID1=1
"RTN","SCMSVPID",51,0)
 .. I $P(PID1SEG,HLFS,I)="" S VALID=-1_"^"_$P($T(@I),";;",2)_MSG Q
"RTN","SCMSVPID",52,0)
 .. I I=12 S VALID=$$ADDRCHK($P(PID1SEG,HLFS,I),VALID)
"RTN","SCMSVPID",53,0)
 ;
"RTN","SCMSVPID",54,0)
 ;
"RTN","SCMSVPID",55,0)
ENQ Q $G(VALID)
"RTN","SCMSVPID",56,0)
 ;
"RTN","SCMSVPID",57,0)
 ;
"RTN","SCMSVPID",58,0)
ADDRCHK(PIDADDR,VALID) ;- Validity chk for street addr 1, city, state, zip
"RTN","SCMSVPID",59,0)
 ;
"RTN","SCMSVPID",60,0)
 I $P(PIDADDR,$E(HLECH,1),1)="" S VALID=-1_"^"_$P($T(12),";;",2)_MSG
"RTN","SCMSVPID",61,0)
 I $P(PIDADDR,$E(HLECH,1),3)="" S VALID=-1_"^"_$P($T(A),";;",2)_MSG
"RTN","SCMSVPID",62,0)
 I $P(PIDADDR,$E(HLECH,1),4)="" S VALID=-1_"^"_$P($T(B),";;",2)_MSG
"RTN","SCMSVPID",63,0)
 I $P(PIDADDR,$E(HLECH,1),5)="" S VALID=-1_"^"_$P($T(C),";;",2)_MSG
"RTN","SCMSVPID",64,0)
 Q VALID
"RTN","SCMSVPID",65,0)
 ;
"RTN","SCMSVPID",66,0)
 ;
"RTN","SCMSVPID",67,0)
 ;
"RTN","SCMSVPID",68,0)
ERR ;;Invalid or missing patient ID data for encounter (HL7 PID data segment)
"RTN","SCMSVPID",69,0)
 ;
"RTN","SCMSVPID",70,0)
 ;
"RTN","SCMSVPID",71,0)
 ;- PID data elements validated
"RTN","SCMSVPID",72,0)
 ;
"RTN","SCMSVPID",73,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVPID",74,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVPID",75,0)
6 ;;NAME 
"RTN","SCMSVPID",76,0)
8 ;;DATE OF BIRTH 
"RTN","SCMSVPID",77,0)
9 ;;SEX 
"RTN","SCMSVPID",78,0)
11 ;;RACE 
"RTN","SCMSVPID",79,0)
12 ;;STREET ADDRESS 1 
"RTN","SCMSVPID",80,0)
A ;;CITY 
"RTN","SCMSVPID",81,0)
B ;;STATE 
"RTN","SCMSVPID",82,0)
C ;;ZIP CODE 
"RTN","SCMSVPID",83,0)
13 ;;COUNTY CODE 
"RTN","SCMSVPID",84,0)
17 ;;MARITAL STATUS 
"RTN","SCMSVPID",85,0)
18 ;;RELIGION 
"RTN","SCMSVPID",86,0)
20 ;;SSN 
"RTN","SCMSVPR1")
0^22^B7642915
"RTN","SCMSVPR1",1,0)
SCMSVPR1 ;ALB/ESD HL7 PR1 Segment Validation ;05/08/95
"RTN","SCMSVPR1",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVPR1",3,0)
 ;
"RTN","SCMSVPR1",4,0)
 ;
"RTN","SCMSVPR1",5,0)
EN(PR1ARRY,HLQ,HLFS,HLECH) ;
"RTN","SCMSVPR1",6,0)
 ; Entry point to return the HL7 PR1 (Procedure) validation segment
"RTN","SCMSVPR1",7,0)
 ;
"RTN","SCMSVPR1",8,0)
 ;  Input:  PR1ARRY - Array of PR1 Segments
"RTN","SCMSVPR1",9,0)
 ;              HLQ - HL7 null variable
"RTN","SCMSVPR1",10,0)
 ;             HLFS - HL7 field separator
"RTN","SCMSVPR1",11,0)
 ;            HLECH - HL7 encoding characters
"RTN","SCMSVPR1",12,0)
 ;
"RTN","SCMSVPR1",13,0)
 ; Output:  1 if PR1 passed validity check
"RTN","SCMSVPR1",14,0)
 ;          Error message if PR1 failed validity check in form of:
"RTN","SCMSVPR1",15,0)
 ;          -1^"xxx failed validity check" (xxx=element in PR1 segment)
"RTN","SCMSVPR1",16,0)
 ;
"RTN","SCMSVPR1",17,0)
 ; NOTE:  This validity check will pass if at least ONE PR1 segment in 
"RTN","SCMSVPR1",18,0)
 ;        the PR1 array passes the validity checks.
"RTN","SCMSVPR1",19,0)
 ;
"RTN","SCMSVPR1",20,0)
 ;        Currently procedures cannot be linked to providers.  Due to 
"RTN","SCMSVPR1",21,0)
 ;        this limitation, all provider data will be sent with each 
"RTN","SCMSVPR1",22,0)
 ;        procedure.
"RTN","SCMSVPR1",23,0)
 ;
"RTN","SCMSVPR1",24,0)
 ;
"RTN","SCMSVPR1",25,0)
 N I,J,MSG,OUT,PR1SEG,PR1ASEG,PRTYPE,VALID,X
"RTN","SCMSVPR1",26,0)
 S X="",(I,OUT)=0,MSG=" element in PR1 segment failed validity check"
"RTN","SCMSVPR1",27,0)
 S PR1ARRY=$G(PR1ARRY)
"RTN","SCMSVPR1",28,0)
 S:(PR1ARRY="") PR1ARRY="^TMP(""VAFHL"",$J,""PROCEDURE"")"
"RTN","SCMSVPR1",29,0)
 F  S I=+$O(@PR1ARRY@(I)) Q:'I  D
"RTN","SCMSVPR1",30,0)
 . S VALID(I)=1
"RTN","SCMSVPR1",31,0)
 . S J="",J=$O(@PR1ARRY@(I,J)) Q:J=""
"RTN","SCMSVPR1",32,0)
 . S PR1SEG=$G(@PR1ARRY@(I,J)),PR1SEG=$$CONVERT^SCMSVUT0(PR1SEG,HLFS,HLQ)
"RTN","SCMSVPR1",33,0)
 . ;
"RTN","SCMSVPR1",34,0)
 . ;- Validate procedure fields
"RTN","SCMSVPR1",35,0)
 . D PROCVAL I +(VALID(I))=-1 Q
"RTN","SCMSVPR1",36,0)
 . ;
"RTN","SCMSVPR1",37,0)
 . ;- Validate provider type(s)
"RTN","SCMSVPR1",38,0)
 . ;
"RTN","SCMSVPR1",39,0)
 . ;- No provider type subnodes found (Node'>245), chk existence of provider type on this node
"RTN","SCMSVPR1",40,0)
 . I $L(PR1SEG,HLFS)=15 S:($P(PR1SEG,HLFS,13)="")!($P($P(PR1SEG,HLFS,13),$E(HLECH,1),9)="") VALID(I)=-1_"^"_$P($T(13),";;",2)_MSG Q
"RTN","SCMSVPR1",41,0)
 . ;
"RTN","SCMSVPR1",42,0)
 . ;- Node >245, check existence of provider type on subnode
"RTN","SCMSVPR1",43,0)
 . I ($L(PR1SEG,HLFS)'=15)&($P(PR1SEG,HLFS,13)="") D
"RTN","SCMSVPR1",44,0)
 .. S J=+$O(@PR1ARRY@(I,J)) I J="" S VALID(I)=-1_"^"_$P($T(13),";;",2)_MSG Q
"RTN","SCMSVPR1",45,0)
 .. S PR1ASEG=$G(@PR1ARRY@(I,J)),PR1ASEG=$$CONVERT^SCMSVUT0(PR1ASEG,HLFS,HLQ)
"RTN","SCMSVPR1",46,0)
 .. I $P(PR1ASEG,($E(HLECH,2)))="" S VALID(I)=-1_"^"_$P($T(13),";;",2)_MSG
"RTN","SCMSVPR1",47,0)
 ;
"RTN","SCMSVPR1",48,0)
 I '$D(VALID) S VALID(1)=-1_"^"_"No CPT procedure found for this encounter (invalid HL7 PR1 segment)"
"RTN","SCMSVPR1",49,0)
 ;
"RTN","SCMSVPR1",50,0)
 ; - Loop thru VALID array to find (at least one) valid procedure record
"RTN","SCMSVPR1",51,0)
 F  S X=$O(VALID(X)) Q:'X  I +$G(VALID(X))=1 G ENQ
"RTN","SCMSVPR1",52,0)
 ;
"RTN","SCMSVPR1",53,0)
 ; - Get first error entry if none are valid
"RTN","SCMSVPR1",54,0)
 S X="",X=$O(VALID(X)) I +$G(VALID(X))=-1 G ENQ
"RTN","SCMSVPR1",55,0)
 ;
"RTN","SCMSVPR1",56,0)
ENQ Q $G(VALID(X))
"RTN","SCMSVPR1",57,0)
 ;
"RTN","SCMSVPR1",58,0)
 ;
"RTN","SCMSVPR1",59,0)
PROCVAL ; -Validate procedure fields
"RTN","SCMSVPR1",60,0)
 ;
"RTN","SCMSVPR1",61,0)
 N X,Z
"RTN","SCMSVPR1",62,0)
 F Z=1,2,3,4 Q:+$G(VALID(I))<1  D
"RTN","SCMSVPR1",63,0)
 . S X=$P(PR1SEG,HLFS,Z)
"RTN","SCMSVPR1",64,0)
 . I X="" S VALID(I)=-1_"^"_$P(($T(@Z)),";;",2)_MSG
"RTN","SCMSVPR1",65,0)
 Q
"RTN","SCMSVPR1",66,0)
 ;
"RTN","SCMSVPR1",67,0)
 ;
"RTN","SCMSVPR1",68,0)
 ;
"RTN","SCMSVPR1",69,0)
 ;- PR1 data elements validated
"RTN","SCMSVPR1",70,0)
 ;
"RTN","SCMSVPR1",71,0)
 ;
"RTN","SCMSVPR1",72,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVPR1",73,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVPR1",74,0)
3 ;;PROCEDURE CODING METHOD 
"RTN","SCMSVPR1",75,0)
4 ;;PROCEDURE CODE (CPT) 
"RTN","SCMSVPR1",76,0)
13 ;;PROVIDER TYPE 
"RTN","SCMSVPV1")
0^23^B3277930
"RTN","SCMSVPV1",1,0)
SCMSVPV1 ;ALB/ESD HL7 PV1 Segment Validation ;05/08/95
"RTN","SCMSVPV1",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVPV1",3,0)
 ;
"RTN","SCMSVPV1",4,0)
 ;
"RTN","SCMSVPV1",5,0)
EN(PV1SEG,HLQ,HLFS) ;
"RTN","SCMSVPV1",6,0)
 ; Entry point to return the HL7 PV1 (Patient Visit) validation segment
"RTN","SCMSVPV1",7,0)
 ;
"RTN","SCMSVPV1",8,0)
 ;  Input:  PV1SEG - PV1 Segment
"RTN","SCMSVPV1",9,0)
 ;             HLQ - HL7 null variable
"RTN","SCMSVPV1",10,0)
 ;            HLFS - HL7 field separator
"RTN","SCMSVPV1",11,0)
 ;
"RTN","SCMSVPV1",12,0)
 ; Output:  1 if PV1 passed validity check
"RTN","SCMSVPV1",13,0)
 ;          Error message if PV1 failed validity check in form of:
"RTN","SCMSVPV1",14,0)
 ;          -1^"xxx failed validity check" (xxx=element in PV1 segment)
"RTN","SCMSVPV1",15,0)
 ;
"RTN","SCMSVPV1",16,0)
 ;
"RTN","SCMSVPV1",17,0)
 N I,MSG,VALID,X
"RTN","SCMSVPV1",18,0)
 S VALID=1,MSG=" element in PV1 segment failed validity check"
"RTN","SCMSVPV1",19,0)
 S PV1SEG=$G(PV1SEG) I PV1SEG="" S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVPV1",20,0)
 I $L(PV1SEG,HLFS)'>2 S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVPV1",21,0)
 ;
"RTN","SCMSVPV1",22,0)
 ;- Convert HLQ to null
"RTN","SCMSVPV1",23,0)
 S PV1SEG=$$CONVERT^SCMSVUT0(PV1SEG,HLFS,HLQ)
"RTN","SCMSVPV1",24,0)
 ;
"RTN","SCMSVPV1",25,0)
 ;- Validate data elements
"RTN","SCMSVPV1",26,0)
 F I=1,2,3,5,15,40,45,51 G ENQ:(+$G(VALID)<1)  D
"RTN","SCMSVPV1",27,0)
 . S X=$P(PV1SEG,HLFS,I)
"RTN","SCMSVPV1",28,0)
 . I X="" S VALID=-1_"^"_$P(($T(@I)),";;",2)_MSG
"RTN","SCMSVPV1",29,0)
 ;
"RTN","SCMSVPV1",30,0)
 ;- Check Purpose of Visit (2 chars Purpose of Visit_2 chars Appt Type)
"RTN","SCMSVPV1",31,0)
 I $L($P(PV1SEG,HLFS,5))'=4 S VALID=-1_"^"_$P($T(5),";;",2)_MSG G ENQ
"RTN","SCMSVPV1",32,0)
 ;
"RTN","SCMSVPV1",33,0)
 ;- Check Location of Visit (1=this facility, 6=other facility)
"RTN","SCMSVPV1",34,0)
 I ($P(PV1SEG,HLFS,15)'=1)&($P(PV1SEG,HLFS,15)'=6) S VALID=-1_"^"_$P($T(15),";;",2)_MSG
"RTN","SCMSVPV1",35,0)
 ;
"RTN","SCMSVPV1",36,0)
ENQ Q VALID
"RTN","SCMSVPV1",37,0)
 ;
"RTN","SCMSVPV1",38,0)
 ;
"RTN","SCMSVPV1",39,0)
 ;
"RTN","SCMSVPV1",40,0)
ERR ;;Invalid or missing patient visit data for encounter (HL7 PV1 segment)
"RTN","SCMSVPV1",41,0)
 ;
"RTN","SCMSVPV1",42,0)
 ;
"RTN","SCMSVPV1",43,0)
 ;- PV1 data elements validated
"RTN","SCMSVPV1",44,0)
 ;
"RTN","SCMSVPV1",45,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVPV1",46,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVPV1",47,0)
3 ;;PATIENT CLASS 
"RTN","SCMSVPV1",48,0)
5 ;;PURPOSE OF VISIT 
"RTN","SCMSVPV1",49,0)
15 ;;LOCATION OF VISIT 
"RTN","SCMSVPV1",50,0)
40 ;;FACILITY NUMBER/SUFFIX 
"RTN","SCMSVPV1",51,0)
45 ;;VISIT (ENCOUNTER) DATE/TIME 
"RTN","SCMSVPV1",52,0)
51 ;;UNIQUE IDENTIFIER (PCE) 
"RTN","SCMSVUT0")
0^24^B10539026
"RTN","SCMSVUT0",1,0)
SCMSVUT0 ;ALB/ESD HL7 Segment Validation Utilities ;05/09/96
"RTN","SCMSVUT0",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVUT0",3,0)
 ;
"RTN","SCMSVUT0",4,0)
 ;
"RTN","SCMSVUT0",5,0)
CONVERT(SEG,HLFS,HLQ) ; Convert HLQ ("") to null in segment
"RTN","SCMSVUT0",6,0)
 ;      Input:  SEG  = HL7 segment
"RTN","SCMSVUT0",7,0)
 ;             HLFS  = HL7 field separator
"RTN","SCMSVUT0",8,0)
 ;              HLQ  = HL7 "" character
"RTN","SCMSVUT0",9,0)
 ;
"RTN","SCMSVUT0",10,0)
 ;     Output:  SEG  = Segment where HLQ replaced with null
"RTN","SCMSVUT0",11,0)
 ;
"RTN","SCMSVUT0",12,0)
 ;
"RTN","SCMSVUT0",13,0)
 N I
"RTN","SCMSVUT0",14,0)
 F I=1:1:55 I $P(SEG,HLFS,I)=HLQ S $P(SEG,HLFS,I)=""
"RTN","SCMSVUT0",15,0)
 Q SEG
"RTN","SCMSVUT0",16,0)
 ;
"RTN","SCMSVUT0",17,0)
SETID(SDOE,SDDELOE) ; Set PCE Unique Visit Number in field #.2 of #409.68
"RTN","SCMSVUT0",18,0)
 ;      Input:   SDOE = IEN of Outpatient Encounter (#409.68) file
"RTN","SCMSVUT0",19,0)
 ;            SDDELOE = IEN of Deleted Outpatient Encounter (#409.74) file
"RTN","SCMSVUT0",20,0)
 ;
"RTN","SCMSVUT0",21,0)
 ;     Output:   Unique Visit Number set in field #.2 of #409.68
"RTN","SCMSVUT0",22,0)
 ;               or field #.2 of #409.74
"RTN","SCMSVUT0",23,0)
 ;
"RTN","SCMSVUT0",24,0)
 ;
"RTN","SCMSVUT0",25,0)
 N SDOEC,SDARRY
"RTN","SCMSVUT0",26,0)
 S SDOEC=0
"RTN","SCMSVUT0",27,0)
 S SDOE=+$G(SDOE)
"RTN","SCMSVUT0",28,0)
 S SDDELOE=+$G(SDDELOE)
"RTN","SCMSVUT0",29,0)
 ;
"RTN","SCMSVUT0",30,0)
 ;-Outpatient Enc pointer passed in; use file #409.68
"RTN","SCMSVUT0",31,0)
 S SDARRY="^SCE("_SDOE_",0)"
"RTN","SCMSVUT0",32,0)
 ;
"RTN","SCMSVUT0",33,0)
 ;-Deleted Outpatient Enc pointer passed in; use file #409.74
"RTN","SCMSVUT0",34,0)
 S:(SDDELOE) SDARRY="^SD(409.74,"_SDDELOE_",1)"
"RTN","SCMSVUT0",35,0)
 ;
"RTN","SCMSVUT0",36,0)
 ;-Add unique ID to parent
"RTN","SCMSVUT0",37,0)
 D GETID
"RTN","SCMSVUT0",38,0)
 ;
"RTN","SCMSVUT0",39,0)
 ;-Add unique ID to children for Outpatient Enc only
"RTN","SCMSVUT0",40,0)
 I (SDOE) F  S SDOEC=+$O(^SCE("APAR",SDOE,SDOEC)) Q:'SDOEC  S SDARRY="^SCE("_SDOEC_",0)" D GETID
"RTN","SCMSVUT0",41,0)
 Q
"RTN","SCMSVUT0",42,0)
 ;
"RTN","SCMSVUT0",43,0)
GETID ;Get unique visit ID
"RTN","SCMSVUT0",44,0)
 S:$P($G(@SDARRY),"^",20)="" $P(@SDARRY,"^",20)=$$IEN2VID^VSIT($P(@SDARRY,"^",5))
"RTN","SCMSVUT0",45,0)
 ;;;S:$P($G(@SDARRY),"^",20)="" $P(@SDARRY,"^",20)="ALPHA_TEST"
"RTN","SCMSVUT0",46,0)
 Q
"RTN","SCMSVUT0",47,0)
 ;
"RTN","SCMSVUT0",48,0)
SETPRTY(SDOE) ;Set outpatient provider type in field #.03 of #409.44
"RTN","SCMSVUT0",49,0)
 ;      Input:  SDOE = IEN of Outpatient Encounter (#409.68) file
"RTN","SCMSVUT0",50,0)
 ;
"RTN","SCMSVUT0",51,0)
 ;     Output:  Outpatient Provider Type set in field #.03 of Outpatient
"RTN","SCMSVUT0",52,0)
 ;              Provider file (#409.44)
"RTN","SCMSVUT0",53,0)
 ;
"RTN","SCMSVUT0",54,0)
 ;
"RTN","SCMSVUT0",55,0)
 N SDEDIT,SDPROV,SDPRTYP
"RTN","SCMSVUT0",56,0)
 S SDOE=+$G(SDOE),SDPROV=0
"RTN","SCMSVUT0",57,0)
 ;
"RTN","SCMSVUT0",58,0)
 ;- Get all provider IENs for encounter
"RTN","SCMSVUT0",59,0)
 F  S SDPROV=+$O(^SDD(409.44,"OE",SDOE,SDPROV)) Q:'SDPROV  D
"RTN","SCMSVUT0",60,0)
 . S SDPRTYP=0
"RTN","SCMSVUT0",61,0)
 . ;
"RTN","SCMSVUT0",62,0)
 . ;- If no prov type, call API and add provider type to record
"RTN","SCMSVUT0",63,0)
 . S:$P($G(^SDD(409.44,SDPROV,0)),"^",3)="" SDPRTYP=$$GET^XUA4A72(+$P($G(^SDD(409.44,SDPROV,0)),"^"),$P($G(^SCE(SDOE,0)),"^"))
"RTN","SCMSVUT0",64,0)
 . I +$G(SDPRTYP)>0 S SDEDIT=$$EDIT^SDCO3(+$P($G(^SDD(409.44,SDPROV,0)),"^"),SDOE,+SDPRTYP)
"RTN","SCMSVUT0",65,0)
 Q
"RTN","SCMSVUT0",66,0)
 ;
"RTN","SCMSVUT0",67,0)
SETMAR(PIDSEG,PID1SEG,HLQ,HLFS) ; Set marital status prior to PID segment validation
"RTN","SCMSVUT0",68,0)
 ;     Input:   PIDSEG = PID segment (< or = 245 chars)
"RTN","SCMSVUT0",69,0)
 ;             PID1SEG = Remainder of PID segment (> 245 chars)
"RTN","SCMSVUT0",70,0)
 ;                 HLQ = HL7 null variable
"RTN","SCMSVUT0",71,0)
 ;                HLFS = HL7 field separator
"RTN","SCMSVUT0",72,0)
 ;
"RTN","SCMSVUT0",73,0)
 ;    Output:  Marital status changed from null to "U" (UNKNOWN) prior to validation of PID segment and transmittal to AAC
"RTN","SCMSVUT0",74,0)
 ;
"RTN","SCMSVUT0",75,0)
 ;
"RTN","SCMSVUT0",76,0)
 N LSTP
"RTN","SCMSVUT0",77,0)
 S PIDSEG=$G(PIDSEG)
"RTN","SCMSVUT0",78,0)
 S:PIDSEG="" PIDSEG="VAFPID"
"RTN","SCMSVUT0",79,0)
 S PID1SEG=$G(PID1SEG)
"RTN","SCMSVUT0",80,0)
 S:PID1SEG="" PID1SEG="VAFPID"
"RTN","SCMSVUT0",81,0)
 Q:(($G(@PIDSEG)="")&($G(@PID1SEG@(1))=""))
"RTN","SCMSVUT0",82,0)
 ;
"RTN","SCMSVUT0",83,0)
 ;- Piece 17 of PID segment is marital status (piece 1 = segment name)
"RTN","SCMSVUT0",84,0)
 I $G(@PID1SEG@(1))="" S:($P(@PIDSEG,HLFS,17)=""!($P(@PIDSEG,HLFS,17)=HLQ)) $P(@PIDSEG,HLFS,17)="U" G SETMARQ
"RTN","SCMSVUT0",85,0)
 I $G(@PID1SEG@(1))]"" D
"RTN","SCMSVUT0",86,0)
 . S LSTP=+($L(@PIDSEG,HLFS))
"RTN","SCMSVUT0",87,0)
 .;
"RTN","SCMSVUT0",88,0)
 .;- If PID segment = or > 17th piece, check marital status in PIDSEG
"RTN","SCMSVUT0",89,0)
 . I ((LSTP=17)!(LSTP>17)) S:($P(@PIDSEG,HLFS,17)=""!($P(@PIDSEG,HLFS,17)=HLQ)) $P(@PIDSEG,HLFS,17)="U" Q
"RTN","SCMSVUT0",90,0)
 .;
"RTN","SCMSVUT0",91,0)
 .;- If PID segment < 17th piece, check marital status in PID1SEG
"RTN","SCMSVUT0",92,0)
 . I (LSTP<17) S:($P(@PID1SEG@(1),HLFS,(17-(LSTP-1)))=""!($P(@PID1SEG@(1),HLFS,(17-(LSTP-1)))=HLQ)) $P(@PID1SEG@(1),HLFS,(17-(LSTP-1)))="U"
"RTN","SCMSVUT0",93,0)
 ;
"RTN","SCMSVUT0",94,0)
SETMARQ Q
"RTN","SCMSVZCL")
0^25^B2743020
"RTN","SCMSVZCL",1,0)
SCMSVZCL ;ALB/ESD HL7 ZCL Segment Validation ;05/08/95
"RTN","SCMSVZCL",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVZCL",3,0)
 ;
"RTN","SCMSVZCL",4,0)
 ;
"RTN","SCMSVZCL",5,0)
EN(ZCLARRY,HLQ,HLFS) ;
"RTN","SCMSVZCL",6,0)
 ; Entry point to return the HL7 ZCL (Outpatient Classification) validation segment
"RTN","SCMSVZCL",7,0)
 ;
"RTN","SCMSVZCL",8,0)
 ;  Input:  ZCLARRY - Array of ZCL Segments
"RTN","SCMSVZCL",9,0)
 ;              HLQ - HL7 null variable
"RTN","SCMSVZCL",10,0)
 ;             HLFS - HL7 field separator
"RTN","SCMSVZCL",11,0)
 ;         
"RTN","SCMSVZCL",12,0)
 ;
"RTN","SCMSVZCL",13,0)
 ; Output:  1 if ZCL passed validity check
"RTN","SCMSVZCL",14,0)
 ;          Error message if ZCL failed validity check in form of:
"RTN","SCMSVZCL",15,0)
 ;          -1^"xxx failed validity check" (xxx=element in ZCL segment)
"RTN","SCMSVZCL",16,0)
 ;
"RTN","SCMSVZCL",17,0)
 ;
"RTN","SCMSVZCL",18,0)
 N I,J,MSG,VALID,X,Z,ZCLSEG
"RTN","SCMSVZCL",19,0)
 S VALID=1,MSG=" element in ZCL segment failed validity check"
"RTN","SCMSVZCL",20,0)
 S I=0,J="",ZCLARRY=$G(ZCLARRY)
"RTN","SCMSVZCL",21,0)
 S:(ZCLARRY="") ZCLARRY="^TMP(""VAFHL"",$J,""CLASS"")"
"RTN","SCMSVZCL",22,0)
 ;
"RTN","SCMSVZCL",23,0)
 ;- Validate classification fields
"RTN","SCMSVZCL",24,0)
 F  S I=+$O(@ZCLARRY@(I)) Q:'I  F  S J=$O(@ZCLARRY@(I,J)) Q:J=""  D
"RTN","SCMSVZCL",25,0)
 . S ZCLSEG=$G(@ZCLARRY@(I,J))
"RTN","SCMSVZCL",26,0)
 . F Z=1,2,3,4 Q:(+$G(VALID)<1)  D
"RTN","SCMSVZCL",27,0)
 .. S X=$P(ZCLSEG,HLFS,Z)
"RTN","SCMSVZCL",28,0)
 .. I X="" S VALID=-1_"^"_$P(($T(@Z)),";;",2)_MSG
"RTN","SCMSVZCL",29,0)
 .;
"RTN","SCMSVZCL",30,0)
 .;- Classifications 1-4 are valid
"RTN","SCMSVZCL",31,0)
 . I ($P(ZCLSEG,HLFS,3)<0)!($P(ZCLSEG,HLFS,3)>4) S VALID=-1_"^"_$P(($T(@3)),";;",2)_MSG
"RTN","SCMSVZCL",32,0)
 ;
"RTN","SCMSVZCL",33,0)
 I '$D(VALID) S VALID=-1_"^"_"No classification data found for encounter (invalid HL7 ZCL segment)"
"RTN","SCMSVZCL",34,0)
 ;
"RTN","SCMSVZCL",35,0)
ENQ Q VALID
"RTN","SCMSVZCL",36,0)
 ;
"RTN","SCMSVZCL",37,0)
 ;
"RTN","SCMSVZCL",38,0)
 ;- ZCL data elements validated
"RTN","SCMSVZCL",39,0)
 ;
"RTN","SCMSVZCL",40,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVZCL",41,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVZCL",42,0)
3 ;;CLASSIFICATION TYPE 
"RTN","SCMSVZCL",43,0)
4 ;;VALUE 
"RTN","SCMSVZEL")
0^26^B2423804
"RTN","SCMSVZEL",1,0)
SCMSVZEL ;ALB/ESD HL7 ZEL Segment Validation ;05/08/95
"RTN","SCMSVZEL",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVZEL",3,0)
 ;
"RTN","SCMSVZEL",4,0)
 ;
"RTN","SCMSVZEL",5,0)
EN(ZELSEG,HLQ,HLFS) ;
"RTN","SCMSVZEL",6,0)
 ; Entry point to return the HL7 ZEL (Patient Eligibility) validation segment
"RTN","SCMSVZEL",7,0)
 ;
"RTN","SCMSVZEL",8,0)
 ;  Input:  ZELSEG - ZEL Segment
"RTN","SCMSVZEL",9,0)
 ;             HLQ - HL7 null variable
"RTN","SCMSVZEL",10,0)
 ;            HLFS - HL7 field separator
"RTN","SCMSVZEL",11,0)
 ;
"RTN","SCMSVZEL",12,0)
 ; Output:  1 if ZEL passed validity check
"RTN","SCMSVZEL",13,0)
 ;          Error message if ZEL failed validity check in form of:
"RTN","SCMSVZEL",14,0)
 ;          -1^"xxx failed validity check" (xxx=element in ZEL segment)
"RTN","SCMSVZEL",15,0)
 ;
"RTN","SCMSVZEL",16,0)
 ;
"RTN","SCMSVZEL",17,0)
 N I,MSG,VALID,X
"RTN","SCMSVZEL",18,0)
 S VALID=1,MSG=" element in ZEL segment failed validity check"
"RTN","SCMSVZEL",19,0)
 S ZELSEG=$G(ZELSEG) I ZELSEG="" S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZEL",20,0)
 I $L(ZELSEG,HLFS)'>2 S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZEL",21,0)
 ;
"RTN","SCMSVZEL",22,0)
 ;- Convert HLQ to null
"RTN","SCMSVZEL",23,0)
 S ZELSEG=$$CONVERT^SCMSVUT0(ZELSEG,HLFS,HLQ)
"RTN","SCMSVZEL",24,0)
 ;
"RTN","SCMSVZEL",25,0)
 ;- Primary eligibility only
"RTN","SCMSVZEL",26,0)
 I $P(ZELSEG,HLFS,2)=""!($P(ZELSEG,HLFS,2)'=1) S VALID=-1_"^"_$P($T(2),";;",2)_MSG G ENQ
"RTN","SCMSVZEL",27,0)
 F I=1,3,9 Q:(+$G(VALID)<1)  D
"RTN","SCMSVZEL",28,0)
 . S X=$P(ZELSEG,HLFS,I)
"RTN","SCMSVZEL",29,0)
 . I X="" S VALID=-1_"^"_$P(($T(@I)),";;",2)_MSG
"RTN","SCMSVZEL",30,0)
 ;
"RTN","SCMSVZEL",31,0)
ENQ Q VALID
"RTN","SCMSVZEL",32,0)
 ;
"RTN","SCMSVZEL",33,0)
 ;
"RTN","SCMSVZEL",34,0)
 ;
"RTN","SCMSVZEL",35,0)
ERR ;;Invalid or missing patient eligibility data for encounter (HL7 ZEL segment)
"RTN","SCMSVZEL",36,0)
 ;
"RTN","SCMSVZEL",37,0)
 ;
"RTN","SCMSVZEL",38,0)
 ;- ZEL data elements validated
"RTN","SCMSVZEL",39,0)
 ;
"RTN","SCMSVZEL",40,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVZEL",41,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVZEL",42,0)
3 ;;ELIGIBILITY CODE 
"RTN","SCMSVZEL",43,0)
9 ;;VETERAN? 
"RTN","SCMSVZIR")
0^27^B2564711
"RTN","SCMSVZIR",1,0)
SCMSVZIR ;ALB/ESD HL7 ZIR Segment Validation ;05/08/95
"RTN","SCMSVZIR",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVZIR",3,0)
 ;
"RTN","SCMSVZIR",4,0)
 ;
"RTN","SCMSVZIR",5,0)
EN(ZIRSEG,HLQ,HLFS) ;
"RTN","SCMSVZIR",6,0)
 ; Entry point to return the HL7 ZIR (Income Relation) validation segment
"RTN","SCMSVZIR",7,0)
 ;
"RTN","SCMSVZIR",8,0)
 ;  Input:  ZIRSEG - ZIR Segment
"RTN","SCMSVZIR",9,0)
 ;             HLQ - HL7 null variable
"RTN","SCMSVZIR",10,0)
 ;            HLFS - HL7 field separator
"RTN","SCMSVZIR",11,0)
 ;
"RTN","SCMSVZIR",12,0)
 ; Output:  1 if ZIR passed validity check
"RTN","SCMSVZIR",13,0)
 ;          Error message if ZIR failed validity check in form of:
"RTN","SCMSVZIR",14,0)
 ;          -1^"xxx failed validity check" (xxx=element in ZIR segment)
"RTN","SCMSVZIR",15,0)
 ;
"RTN","SCMSVZIR",16,0)
 ;
"RTN","SCMSVZIR",17,0)
 N I,MSG,VALID,X
"RTN","SCMSVZIR",18,0)
 S VALID=1,MSG=" element in ZIR segment failed validity check"
"RTN","SCMSVZIR",19,0)
 S ZIRSEG=$G(ZIRSEG) I ZIRSEG="" S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZIR",20,0)
 I $L(ZIRSEG,HLFS)'>2 S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZIR",21,0)
 ;
"RTN","SCMSVZIR",22,0)
 ;- Convert HLQ to null
"RTN","SCMSVZIR",23,0)
 S ZIRSEG=$$CONVERT^SCMSVUT0(ZIRSEG,HLFS,HLQ)
"RTN","SCMSVZIR",24,0)
 ;
"RTN","SCMSVZIR",25,0)
 ;- Validate data elements
"RTN","SCMSVZIR",26,0)
 F I=1,2,12,13,14 Q:(+$G(VALID)<1)  D
"RTN","SCMSVZIR",27,0)
 . S X=$P(ZIRSEG,HLFS,I)
"RTN","SCMSVZIR",28,0)
 . I X="" S VALID=-1_"^"_$P(($T(@I)),";;",2)_MSG
"RTN","SCMSVZIR",29,0)
 I +$P(ZIRSEG,HLFS,13)>0,($P(ZIRSEG,HLFS,14)="U") S VALID=-1_"^"_$P($T(14),";;",2)_MSG G ENQ
"RTN","SCMSVZIR",30,0)
 ;
"RTN","SCMSVZIR",31,0)
ENQ Q VALID
"RTN","SCMSVZIR",32,0)
 ;
"RTN","SCMSVZIR",33,0)
 ;
"RTN","SCMSVZIR",34,0)
ERR ;;Invalid or missing patient income data for encounter (HL7 ZIR segment)
"RTN","SCMSVZIR",35,0)
 ;
"RTN","SCMSVZIR",36,0)
 ;
"RTN","SCMSVZIR",37,0)
 ;- ZIR data elements validated
"RTN","SCMSVZIR",38,0)
 ;
"RTN","SCMSVZIR",39,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVZIR",40,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVZIR",41,0)
12 ;;NUMBER OF DEPENDENTS 
"RTN","SCMSVZIR",42,0)
13 ;;PATIENT INCOME 
"RTN","SCMSVZIR",43,0)
14 ;;MEANS TEST INDICATOR 
"RTN","SCMSVZPD")
0^28^B2118983
"RTN","SCMSVZPD",1,0)
SCMSVZPD ;ALB/ESD HL7 ZPD Segment Validation ;05/08/95
"RTN","SCMSVZPD",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVZPD",3,0)
 ;
"RTN","SCMSVZPD",4,0)
 ;
"RTN","SCMSVZPD",5,0)
EN(ZPDSEG,HLQ,HLFS) ;
"RTN","SCMSVZPD",6,0)
 ; Entry point to return the HL7 ZPD (Patient Data) validation segment
"RTN","SCMSVZPD",7,0)
 ;
"RTN","SCMSVZPD",8,0)
 ;  Input:  ZPDSEG - ZPD Segment
"RTN","SCMSVZPD",9,0)
 ;             HLQ - HL7 null variable
"RTN","SCMSVZPD",10,0)
 ;            HLFS - HL7 field separator
"RTN","SCMSVZPD",11,0)
 ;
"RTN","SCMSVZPD",12,0)
 ; Output:  1 if ZPD passed validity check
"RTN","SCMSVZPD",13,0)
 ;          Error message if ZPD failed validity check in form of:
"RTN","SCMSVZPD",14,0)
 ;          -1^"xxx failed validity check" (xxx=element in ZPD segment)
"RTN","SCMSVZPD",15,0)
 ;
"RTN","SCMSVZPD",16,0)
 ;
"RTN","SCMSVZPD",17,0)
 N I,MSG,VALID,X
"RTN","SCMSVZPD",18,0)
 S VALID=1,MSG=" element in ZPD segment failed validity check"
"RTN","SCMSVZPD",19,0)
 S ZPDSEG=$G(ZPDSEG) I ZPDSEG="" S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZPD",20,0)
 I $L(ZPDSEG,HLFS)'>2 S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZPD",21,0)
 ;
"RTN","SCMSVZPD",22,0)
 ;- Convert HLQ to null
"RTN","SCMSVZPD",23,0)
 S ZPDSEG=$$CONVERT^SCMSVUT0(ZPDSEG,HLFS,HLQ)
"RTN","SCMSVZPD",24,0)
 ;
"RTN","SCMSVZPD",25,0)
 ;- Validate data elements
"RTN","SCMSVZPD",26,0)
 F I=1,2,17,19 Q:(+$G(VALID)<1)  D
"RTN","SCMSVZPD",27,0)
 . S X=$P(ZPDSEG,HLFS,I)
"RTN","SCMSVZPD",28,0)
 . I X="" S VALID=-1_"^"_$P(($T(@I)),";;",2)_MSG
"RTN","SCMSVZPD",29,0)
 ;
"RTN","SCMSVZPD",30,0)
ENQ Q VALID
"RTN","SCMSVZPD",31,0)
 ;
"RTN","SCMSVZPD",32,0)
 ;
"RTN","SCMSVZPD",33,0)
ERR ;;Invalid or missing patient ID data for encounter (HL7 ZPD data segment)
"RTN","SCMSVZPD",34,0)
 ;
"RTN","SCMSVZPD",35,0)
 ;
"RTN","SCMSVZPD",36,0)
 ;- ZPD data elements validated
"RTN","SCMSVZPD",37,0)
 ;
"RTN","SCMSVZPD",38,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVZPD",39,0)
2 ;;SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVZPD",40,0)
17 ;;HOMELESS INDICATOR 
"RTN","SCMSVZPD",41,0)
18 ;;POW STATUS INDICATED? 
"RTN","SCMSVZPD",42,0)
19 ;;TYPE OF INSURANCE 
"RTN","SCMSVZSC")
0^29^B2816717
"RTN","SCMSVZSC",1,0)
SCMSVZSC ;ALB/ESD HL7 ZSC Segment Validation ;05/08/95
"RTN","SCMSVZSC",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVZSC",3,0)
 ;
"RTN","SCMSVZSC",4,0)
 ;
"RTN","SCMSVZSC",5,0)
EN(ZSCARRY,HLQ,HLFS) ;
"RTN","SCMSVZSC",6,0)
 ; Entry point to return the HL7 ZSC (Stop Code) validation segment
"RTN","SCMSVZSC",7,0)
 ;
"RTN","SCMSVZSC",8,0)
 ;  Input:  ZSCARRY - Array of ZSC Segments
"RTN","SCMSVZSC",9,0)
 ;              HLQ - HL7 null variable
"RTN","SCMSVZSC",10,0)
 ;             HLFS - HL7 field separator
"RTN","SCMSVZSC",11,0)
 ;
"RTN","SCMSVZSC",12,0)
 ;
"RTN","SCMSVZSC",13,0)
 ; Output:  1 if ZSC passed validity check
"RTN","SCMSVZSC",14,0)
 ;          Error message if ZSC failed validity check in form of:
"RTN","SCMSVZSC",15,0)
 ;          -1^"xxx failed validity check" (xxx=element in ZSC segment)
"RTN","SCMSVZSC",16,0)
 ;
"RTN","SCMSVZSC",17,0)
 ;
"RTN","SCMSVZSC",18,0)
 N I,J,MSG,VALID,X,Z,ZSCSEG
"RTN","SCMSVZSC",19,0)
 S MSG=" element in ZSC segment failed validity check"
"RTN","SCMSVZSC",20,0)
 S I=0,X="",ZSCARRY=$G(ZSCARRY)
"RTN","SCMSVZSC",21,0)
 S:(ZSCARRY="") ZSCARRY="^TMP(""VAFHL"",$J,""STOPCODE"")"
"RTN","SCMSVZSC",22,0)
 ;
"RTN","SCMSVZSC",23,0)
 F  S I=+$O(@ZSCARRY@(I)) Q:'I  D
"RTN","SCMSVZSC",24,0)
 . S J="",VALID(I)=1
"RTN","SCMSVZSC",25,0)
 . F  S J=$O(@ZSCARRY@(I,J)) Q:J=""  D
"RTN","SCMSVZSC",26,0)
 .. S ZSCSEG=$G(@ZSCARRY@(I,J)),ZSCSEG=$$CONVERT^SCMSVUT0(ZSCSEG,HLFS,HLQ)
"RTN","SCMSVZSC",27,0)
 .. F Z=1,2,3 Q:(+$G(VALID(I))<1)  I $P(ZSCSEG,HLFS,Z)="" S VALID(I)=-1_"^"_$P(($T(@Z)),";;",2)_MSG
"RTN","SCMSVZSC",28,0)
 ;
"RTN","SCMSVZSC",29,0)
 I '$D(VALID) S VALID(1)=-1_"^"_"No stop code(s) found for this encounter (invalid HL7 ZSC segment)"
"RTN","SCMSVZSC",30,0)
 ;
"RTN","SCMSVZSC",31,0)
 ;- Loop thru VALID array to find (at least one) valid stop code node
"RTN","SCMSVZSC",32,0)
 F  S X=$O(VALID(X)) Q:'X  I +$G(VALID(X))=1 G ENQ
"RTN","SCMSVZSC",33,0)
 ;
"RTN","SCMSVZSC",34,0)
 ;- Get first error entry if none are valid
"RTN","SCMSVZSC",35,0)
 S X="",X=$O(VALID(X)) I +$G(VALID(X))=-1 G ENQ
"RTN","SCMSVZSC",36,0)
 ;
"RTN","SCMSVZSC",37,0)
ENQ Q $G(VALID(X))
"RTN","SCMSVZSC",38,0)
 ;
"RTN","SCMSVZSC",39,0)
 ;
"RTN","SCMSVZSC",40,0)
 ;- ZSC data elements validated
"RTN","SCMSVZSC",41,0)
 ;
"RTN","SCMSVZSC",42,0)
 ;
"RTN","SCMSVZSC",43,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVZSC",44,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVZSC",45,0)
3 ;;STOP CODE 
"RTN","SCMSVZSP")
0^30^B2677103
"RTN","SCMSVZSP",1,0)
SCMSVZSP ;ALB/ESD HL7 ZSP Segment Validation ;05/08/95
"RTN","SCMSVZSP",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SCMSVZSP",3,0)
 ;
"RTN","SCMSVZSP",4,0)
 ;
"RTN","SCMSVZSP",5,0)
EN(ZSPSEG,HLQ,HLFS) ;
"RTN","SCMSVZSP",6,0)
 ; Entry point to return the HL7 ZSP (Service Period) validation segment
"RTN","SCMSVZSP",7,0)
 ;
"RTN","SCMSVZSP",8,0)
 ;  Input:  ZSPSEG - ZSP Segment
"RTN","SCMSVZSP",9,0)
 ;             HLQ - HL7 null variable
"RTN","SCMSVZSP",10,0)
 ;            HLFS - HL7 field separator
"RTN","SCMSVZSP",11,0)
 ;
"RTN","SCMSVZSP",12,0)
 ; Output:  1 if ZSP passed validity check
"RTN","SCMSVZSP",13,0)
 ;          Error message if ZSP failed validity check in form of:
"RTN","SCMSVZSP",14,0)
 ;          -1^"xxx failed validity check" (xxx=element in ZSP segment)
"RTN","SCMSVZSP",15,0)
 ;
"RTN","SCMSVZSP",16,0)
 ;
"RTN","SCMSVZSP",17,0)
 N I,MSG,VALID,X
"RTN","SCMSVZSP",18,0)
 S VALID=1,MSG=" element in ZSP segment failed validity check"
"RTN","SCMSVZSP",19,0)
 S ZSPSEG=$G(ZSPSEG) I ZSPSEG="" S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZSP",20,0)
 I $L(ZSPSEG,HLFS)'>2 S VALID=-1_"^"_$P($T(ERR),";;",2) G ENQ
"RTN","SCMSVZSP",21,0)
 ;
"RTN","SCMSVZSP",22,0)
 ;- Convert HLQ to null
"RTN","SCMSVZSP",23,0)
 S ZSPSEG=$$CONVERT^SCMSVUT0(ZSPSEG,HLFS,HLQ)
"RTN","SCMSVZSP",24,0)
 ;
"RTN","SCMSVZSP",25,0)
 ;- Validate data elements
"RTN","SCMSVZSP",26,0)
 F I=1,2,5 Q:(+$G(VALID)<1)  D
"RTN","SCMSVZSP",27,0)
 . S X=$P(ZSPSEG,HLFS,I)
"RTN","SCMSVZSP",28,0)
 . I X="" S VALID=-1_"^"_$P(($T(@I)),";;",2)_MSG
"RTN","SCMSVZSP",29,0)
 ;
"RTN","SCMSVZSP",30,0)
 ;- If service connected, check existence of serv conn %
"RTN","SCMSVZSP",31,0)
 I $P(ZSPSEG,HLFS,3)=1,($P(ZSPSEG,HLFS,4)="") S VALID=-1_"^"_$P(($T(4)),";;",2)_MSG
"RTN","SCMSVZSP",32,0)
ENQ Q VALID
"RTN","SCMSVZSP",33,0)
 ;
"RTN","SCMSVZSP",34,0)
 ;
"RTN","SCMSVZSP",35,0)
ERR ;;Invalid or missing patient service period data for encounter (HL7 ZSP segment)
"RTN","SCMSVZSP",36,0)
 ;
"RTN","SCMSVZSP",37,0)
 ;- ZSP data elements validated
"RTN","SCMSVZSP",38,0)
 ;
"RTN","SCMSVZSP",39,0)
1 ;;HL7 SEGMENT NAME 
"RTN","SCMSVZSP",40,0)
2 ;;HL7 SEQUENTIAL NUMBER (SET ID) 
"RTN","SCMSVZSP",41,0)
4 ;;SERVICE CONNECTED PERCENTAGE 
"RTN","SCMSVZSP",42,0)
5 ;;PERIOD OF SERVICE CODE 
"RTN","SCMSVZSP",43,0)
6 ;;VIETNAM SERVICE INDICATED? 
"RTN","SDA223N")
0^31^B22972149
"RTN","SDA223N",1,0)
SDA223N ;BSN/GRR - SET-UP TOTALS FOR AMIS 223 REPORT ;1/6/92  10:42 [ 10/12/93  9:49 AM ]
"RTN","SDA223N",2,0)
 ;;5.3;Scheduling;**7,44**;Aug 13, 1993
"RTN","SDA223N",3,0)
DT1 S %DT("A")="FROM DATE: ",%DT="AEP" D ^%DT K %DT("A") S DATE=Y G:X["?" DT1 G:Y<0 END
"RTN","SDA223N",4,0)
DT2 S %DT("A")="TO DATE: " D ^%DT K %DT("A") G:X["?" DT2 G:Y<0 END S DATEND=Y+.9
"RTN","SDA223N",5,0)
 K DGFLG I DATEND<DATE W !,"TO DATE CANNOT BE EARLIER THAN FROM DATE",*7 G DT1
"RTN","SDA223N",6,0)
 S Y=$$FMDATE^SCDXUTL() I DATE'<Y!(DATEND'<Y) X ^DD("DD") W !,"THE FROM AND TO DATES MUST BE PRIOR TO ",Y,"." G DT1
"RTN","SDA223N",7,0)
 D DTCK^SDA223N1 I $D(SDFG) K SDFG G DT1
"RTN","SDA223N",8,0)
 D AMIS^SDAMQ2(DATE,DATEND)
"RTN","SDA223N",9,0)
 S VAR="DATE^DATEND",VAL=DATE_"^"_DATEND,PGM="START^SDA223N"
"RTN","SDA223N",10,0)
 D ZIS^DGUTQ G:POP END
"RTN","SDA223N",11,0)
START K ^UTILITY($J) D CK G END:SDABORT U IO S:'$D(DTIME) DTIME=300 I '$D(DT) D DT^SDUTL
"RTN","SDA223N",12,0)
 S MDIV=0,DVN="" I $D(^DIC(4,+$$SITE^VASITE(DATE),"DIV")),^("DIV")="Y" S MDIV=1
"RTN","SDA223N",13,0)
 S (DIV,DVN)=$P($$SITE^VASITE(DATE),U,3)
"RTN","SDA223N",14,0)
 S GOT=0 I MDIV S SDTOTFLG=1 F DIV=0:0 S DIV=$O(^DG(40.8,DIV)) S HDIV=DIV,DIV=$P($$SITE^VASITE(DATE,+DIV),"^",3) Q:DIV'>0  D INIT S DIV=HDIV
"RTN","SDA223N",15,0)
 I 'MDIV S SDTOTFLG=1 D INIT
"RTN","SDA223N",16,0)
 F S=DATE-.1:0 S S=$O(^SDASF("AVD",S)) Q:S'>0!(S>DATEND)  F I=0:0 S I=$O(^SDASF("AVD",S,I)) Q:I'>0  I $D(^SDASF(I,1,S,0)) D GOTIT G END:SDABORT
"RTN","SDA223N",17,0)
 D BLD:$D(DGFLG),^SDA223AN:'$D(DGFLG)
"RTN","SDA223N",18,0)
END W ! W:IOSL>24 @IOF K ^UTILITY($J),%DT,%IS,%ZIS,C,CNT,COV,CS,DA,DATE,DATEND,DDD,DFN,DGJ,DIC,DIE,DIV,DNAME,DR,DVN,ELIG,ETOT,GDATE,GOT,HDIV,HDVN,I,J,K,L,LL,M,MDIV,N,NUM,NVELIG,OE,OEC,OEL,POP,S,SC,SDCN,SDCS,SDFS,SDI,TOT,TOTE,VELIG,X,Y
"RTN","SDA223N",19,0)
 I '$D(DGFLG) D CLOSE^DGUTQ K SDABORT
"RTN","SDA223N",20,0)
 Q
"RTN","SDA223N",21,0)
INIT F SDK=1:1:4 S ^UTILITY($J,DIV,"COV",SDK)=0 S:$D(SDTOTFLG) ^UTILITY($J,"TOT","COV",SDK)=0
"RTN","SDA223N",22,0)
 F ELIG=1:1:6 S ^UTILITY($J,DIV,"VELIG",ELIG)=0 S:$D(SDTOTFLG) ^UTILITY($J,"TOT","VELIG",ELIG)=0
"RTN","SDA223N",23,0)
 F NELIG=1:1:8 S ^UTILITY($J,DIV,"NVELIG",NELIG)=0 S:$D(SDTOTFLG) ^UTILITY($J,"TOT","NVELIG",NELIG)=0
"RTN","SDA223N",24,0)
 F SDCS=1:1:6 S ^UTILITY($J,DIV,"CS",SDCS)=0 S:$D(SDTOTFLG) ^UTILITY($J,"TOT","CS",SDCS)=0
"RTN","SDA223N",25,0)
 K NELIG,SDK,SDTOTFLG Q
"RTN","SDA223N",26,0)
SET S:MDIV (DIV,DVN)=$S($P(^SC(SC,0),"^",15)="":+$P($$SITE^VASITE,U,3),1:$P(^DG(40.8,$P(^SC(SC,0),"^",15),0),"^",2)) Q
"RTN","SDA223N",27,0)
GOTIT S:$D(^SDASF(I,1,S,0)) SD0=^(0) D:'$D(^SDASF(I,1,S,0)) CK I SDABORT K ^UTILITY($J) Q
"RTN","SDA223N",28,0)
 S COV=$P(SD0,"^",11),VELIG=$P(SD0,"^",9),NVELIG=$P(SD0,"^",10),CS=$P(SD0,"^",13),DIV=$P(SD0,"^",2) F SDI=0:0 Q:'$F(DIV," ")  S SDFS=$F(DIV," ")-1,DIV=$E(DIV,1,SDFS-1)_$E(DIV,SDFS+1,5)
"RTN","SDA223N",29,0)
 I '$D(^UTILITY($J,DIV)) D INIT
"RTN","SDA223N",30,0)
 I $D(DGFLG),DGSTA'=DIV Q
"RTN","SDA223N",31,0)
 I S<2871000,CS]"" F J=1:2:23 Q:'$E(CS,J,J+1)  S SDCS=$E(CS,J,J+1),SDCS=$S(SDCS=43:1,SDCS=77:2,SDCS=78:3,SDCS=79:4,SDCS=83:5,SDCS=88:6,1:0) S:SDCS ^(SDCS)=^UTILITY($J,"TOT","CS",SDCS)+1,^(SDCS)=^UTILITY($J,DIV,"CS",SDCS)+1
"RTN","SDA223N",32,0)
 I S>2871000,CS]"" S X=$S($$FY^SDOPC5(S)>93:9,1:3) F J=1:X:135 S SDCS=$E(CS,J,J+2) Q:'SDCS  S SDCS=$S(SDCS=170:1,SDCS=550:2,SDCS=505!(SDCS=553):3,SDCS=506!(SDCS=554):4,SDCS=502:5,SDCS=571!(SDCS=572):6,1:0) D:SDCS CNT
"RTN","SDA223N",33,0)
 S COV=$S(1234[COV&(COV]""):COV,1:4),^UTILITY($J,DIV,"COV",COV)=^UTILITY($J,DIV,"COV",COV)+1,^UTILITY($J,"TOT","COV",COV)=^UTILITY($J,"TOT","COV",COV)+1
"RTN","SDA223N",34,0)
 K SD0 I VELIG]"",$D(^UTILITY($J,DIV,"VELIG",VELIG)) S ^(VELIG)=^(VELIG)+1,^UTILITY($J,"TOT","VELIG",VELIG)=^UTILITY($J,"TOT","VELIG",VELIG)+1 Q
"RTN","SDA223N",35,0)
 I NVELIG]"",$D(^UTILITY($J,DIV,"NVELIG",NVELIG)) S ^(NVELIG)=^(NVELIG)+1,^UTILITY($J,"TOT","NVELIG",NVELIG)=^UTILITY($J,"TOT","NVELIG",NVELIG)+1
"RTN","SDA223N",36,0)
 Q
"RTN","SDA223N",37,0)
CNT S ^(SDCS)=^UTILITY($J,DIV,"CS",SDCS)+1,^(SDCS)=^UTILITY($J,"TOT","CS",SDCS)+1
"RTN","SDA223N",38,0)
 Q
"RTN","SDA223N",39,0)
 ;
"RTN","SDA223N",40,0)
BLD S DGSTR="" F DGI="VELIG","NVELIG","COV" F DGJ=0:0 S DGJ=$O(^UTILITY($J,DGSTA,DGI,DGJ)) Q:DGJ'>0  S DGSTR=DGSTR_$S(DGSTR'="":"^",1:"")_+^(DGJ)
"RTN","SDA223N",41,0)
 F DGJ=2,5,3,4,6,1 S DGSTR=DGSTR_"^"_$S($D(^UTILITY($J,DGSTA,"CS",DGJ)):+^(DGJ),1:0)
"RTN","SDA223N",42,0)
 Q
"RTN","SDA223N",43,0)
CK S SDABORT=0
"RTN","SDA223N",44,0)
 I $D(^DG(43,1,"SCLR")),$P(^("SCLR"),"^",4),DATEND'<($P(^("SCLR"),"^",7)) S SDABORT=1
"RTN","SDA223N",45,0)
 G CKQ:'SDABORT
"RTN","SDA223N",46,0)
 S Y=$P(^DG(43,1,"SCLR"),"^",7) D D^DIQ
"RTN","SDA223N",47,0)
 W !!?4,*7,"The AMIS 223 ",$S($D(DGFLG):"code sheet",1:"report")," CANNOT be ",$S($D(DGFLG):"generated",1:"printed")," for the requested time"
"RTN","SDA223N",48,0)
 W !?4,"frame, since the OPC FILE is currently being GENERATED from"
"RTN","SDA223N",49,0)
 W !?4,Y," by another job."
"RTN","SDA223N",50,0)
 W !!?4,"If processing were allowed to continue, the information"
"RTN","SDA223N",51,0)
 W !?4,"on the AMIS 223 ",$S($D(DGFLG):"code sheet",1:"report")," may have been inaccurate."
"RTN","SDA223N",52,0)
 W !!?4,"Please re-schedule after the OPC GENERATION job is complete."
"RTN","SDA223N",53,0)
CKQ Q
"RTN","SDACS")
0^32^B8465073
"RTN","SDACS",1,0)
SDACS ;ALB/GRR,BOK,CAW - ADD/EDIT/DELETE CLINIC STOPS ;1/3/92  18:38
"RTN","SDACS",2,0)
 ;;5.3;Scheduling;**4,20,27,36,44**;Aug 13, 1993
"RTN","SDACS",3,0)
 Q
"RTN","SDACS",4,0)
EN1 ;"ASDPSD" MUMPS X-REF FOR SPECIAL SURVEY DISPOSITIONING - SET LOGIC
"RTN","SDACS",5,0)
 N SDY S (SDP,SDF)=0,(SDDATE,SDX)=$P(SDX,"."),SDQ="" F SDI=SDX:0 S SDI=$O(^DPT(DA(1),"S",SDI)) Q:SDI'>0!(SDX-(SDI\1))  I $P(^(SDI,0),"^",2)'="C",$P(^(0),"^",2)'="N" S SDQ=1 Q
"RTN","SDACS",6,0)
 S SDY="" I 'SDQ,$D(^DPT(DA(1),.321)) F SDI=1:1:3 I $P(^DPT(DA(1),.321),"^",SDI)["Y" S SDY=1 Q
"RTN","SDACS",7,0)
 ;I SDY W:$D(SDSD) !!,*7,"This visit will require special survey dispositioning",! H:$D(SDSD) 2 S:$D(DIV) SDIV=DIV I $D(SDIV) S ^DPT("ASDPSD","B"," "_SDIV,SDX,DA(1))=0,^DPT("ASDPSD","C"," "_SDIV," ",SDX,DA(1))=$S(SDX\1=DT:"E",1:"")
"RTN","SDACS",8,0)
 I SDY S:$D(DIV) SDIV=DIV I $D(SDIV) S ^DPT("ASDPSD","B"," "_SDIV,SDX,DA(1))=0,^DPT("ASDPSD","C"," "_SDIV," ",SDX,DA(1))=$S(SDX\1=DT:"E",1:"")
"RTN","SDACS",9,0)
 K SDI,SDQ,SDSD
"RTN","SDACS",10,0)
 Q
"RTN","SDACS",11,0)
EN1K ;"ASDPSD" MUMPS X-REF - KILL LOGIC
"RTN","SDACS",12,0)
 S:$D(DIV) SDIV=DIV Q:$S('$D(SDIV):1,'$D(^DPT(DA(1),.321)):1,^(.321)'["Y":1,1:0)  K ^DPT("ASDPSD","C"," "_SDIV," ",SDX,DA(1)) Q
"RTN","SDACS",13,0)
EN2 ;Q:SDQ
"RTN","SDACS",14,0)
 Q
"RTN","SDACS",15,0)
EN3 I $$DATE^SCDXUTL(DT) S SDERR=1 Q
"RTN","SDACS",16,0)
EN3B ;this is not a supported call
"RTN","SDACS",17,0)
 ;input variables:
"RTN","SDACS",18,0)
 ;AMBVER=Optional variable for ambcare version
"RTN","SDACS",19,0)
 ;DUZ or SDUZ - If SDUZ not defined, DUZ will be used
"RTN","SDACS",20,0)
 ;SDIV=Internal Entry Number (pointer number) in Institution file;
"RTN","SDACS",21,0)
 ;     will be reset to corresponding entry in the Medical Center
"RTN","SDACS",22,0)
 ;     Division file, file # 40.8
"RTN","SDACS",23,0)
 ;SDATE=date of visit YYYMMDD
"RTN","SDACS",24,0)
 ;DFN=Internal Entry Number of patient in Patient file
"RTN","SDACS",25,0)
 ;SDC=stop code numbers separated by "^" (not pointer number); or SDC="" 
"RTN","SDACS",26,0)
 ;    if no stop codes; can not contain stop code 900
"RTN","SDACS",27,0)
 ;SDCTYPE=type of codes - must equal either S for only Stop Codes,
"RTN","SDACS",28,0)
 ;     C for only CPT codes, or B for both types
"RTN","SDACS",29,0)
 ;SDMSG=(optional)
"RTN","SDACS",30,0)
 ;     - If not set or equals 0, error message printing is suppressed
"RTN","SDACS",31,0)
 ;     - If improperly set or $D(ZTQUEUED), reset to 0
"RTN","SDACS",32,0)
 ;     - "S"  to print general and Stop Code error messages
"RTN","SDACS",33,0)
 ;     - "C"  to print general and CPT error messages
"RTN","SDACS",34,0)
 ;     - "B"  to print all messages
"RTN","SDACS",35,0)
 ;SDCPT(x)=(optional, use for CPT codes); x=array number from 1-6
"RTN","SDACS",36,0)
 ;   format: 900^associated clinic ptr^CPT^CPT^CPT^CPT^CPT
"RTN","SDACS",37,0)
 ;   where CPT is the procedure code & '900' is the flag for CPT's.
"RTN","SDACS",38,0)
 ;   The string must contain at least one procedure and not more than 5.
"RTN","SDACS",39,0)
 ;SDCLINIC=(optional)
"RTN","SDACS",40,0)
 ;   Pointer to a clinic in the Hospital Location file.
"RTN","SDACS",41,0)
 ;SDOEP=(optional)
"RTN","SDACS",42,0)
 ;   Pointer to the parent Outpatient Encounter entry.   
"RTN","SDACS",43,0)
 ;SDATYPE=(optional)
"RTN","SDACS",44,0)
 ;   Pointer to the Appointment Type file
"RTN","SDACS",45,0)
 ;SDVTIEN=(optional)
"RTN","SDACS",46,0)
 ;   Pointer to the Visit file
"RTN","SDACS",47,0)
 ;NOTE - For a given date you are not allowed to enter more than
"RTN","SDACS",48,0)
 ;   six '900' type stop codes, or a total of 15 stop codes
"RTN","SDACS",49,0)
 ;
"RTN","SDACS",50,0)
 ;Output variable SDERR, 0=successfully updated at least one stop code
"RTN","SDACS",51,0)
 ;                       1=no updating occurred
"RTN","SDACS",52,0)
 ;
"RTN","SDACS",53,0)
 ;
"RTN","SDACS",54,0)
 N CPT,SD900,SDI,SDPR,SDX,MSG,DIC
"RTN","SDACS",55,0)
 S SDERR=$$ERRCHK^SDSTP(.DUZ,.DFN,.SDIV,.SDATE,.SDC)
"RTN","SDACS",56,0)
 I SDERR D MSG^SDSTP1(.SDSTP,.SD900,.MSG,.SDATE,.DFN,.SDMSG),MAIL^SDSTP1 G EN3Q
"RTN","SDACS",57,0)
 ;I '$D(AMBVER) S AMBVER=$$DATE^SCDXUTL($P(^SCE(SDOEP,0),U,1))
"RTN","SDACS",58,0)
 I '$D(AMBVER) S AMBVER=$S('$D(SDOEP):$$DATE^SCDXUTL(DT),1:$$DATE^SCDXUTL($P(^SCE(SDOEP,0),U,1)))
"RTN","SDACS",59,0)
 ; Seperate stop codes from old format to new
"RTN","SDACS",60,0)
 I SDC D
"RTN","SDACS",61,0)
 .F SDI=1:1:$S(AMBVER:99,1:15) S SDSTP=$P(SDC,"^",SDI) Q:'SDSTP  S SDSTP(SDSTP)=""
"RTN","SDACS",62,0)
 ; Seperate CPT codes from old format to new
"RTN","SDACS",63,0)
 I $D(SDCPT) S SDCPT=0 D
"RTN","SDACS",64,0)
 .F SDX=1:1:$S(AMBVER:99,1:6) S SDCPT=$O(SDCPT(SDCPT)) Q:'SDCPT  K SDPR D
"RTN","SDACS",65,0)
 ..S SDCLST=$P($G(^SC($P(SDCPT(SDCPT),U,2),0)),U,7) K SDSTP(+$P($G(^DIC(40.7,+SDCLST,0)),U,2))
"RTN","SDACS",66,0)
 ..F SDI=3:1:8 S CPT=$P(SDCPT(SDCPT),U,SDI) Q:CPT=""  D
"RTN","SDACS",67,0)
 ...Q:'$O(^ICPT("B",CPT,0))  S SDPR=$G(SDPR)+1,SD900(SDX,$P(SDCPT(SDCPT),U,2),+$O(^ICPT("B",CPT,0)),SDPR)=""
"RTN","SDACS",68,0)
 K SDCPT
"RTN","SDACS",69,0)
 S SDIV=$O(^DG(40.8,"AD",SDIV,0))
"RTN","SDACS",70,0)
 I $P($G(SDATE),".",2)]"" S SDATE=$P(SDATE,".")
"RTN","SDACS",71,0)
 D EN^SDSTP(DFN,SDIV,SDATE,.SDMSG,.SDSTP,.SD900)
"RTN","SDACS",72,0)
EN3Q K SDATYPE,SDATE,SDIV,SD900,SDC,SDSTP,SDCTYPE,SDMSG,SDNOTCG,SDSCD,SDCNT,SDCOMF,SDCLINIC,MSG
"RTN","SDACS",73,0)
 Q
"RTN","SDAMQ")
0^80^B10937142
"RTN","SDAMQ",1,0)
SDAMQ ;ALB/MJK - AM Background Job ; 12/1/91
"RTN","SDAMQ",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SDAMQ",3,0)
 ;
"RTN","SDAMQ",4,0)
EN ; -- manual entry point
"RTN","SDAMQ",5,0)
 I '$$SWITCH D MES G ENQ
"RTN","SDAMQ",6,0)
 N SDBEG,SDEND,SDAMETH
"RTN","SDAMQ",7,0)
 S (SDBEG,SDEND)="",SDAMETH=2 G ENQ:'$$RANGE(.SDBEG,.SDEND,.SDAMETH)
"RTN","SDAMQ",8,0)
 ;D START G ENQ ; line for testing
"RTN","SDAMQ",9,0)
 S ZTIO="",ZTRTN="START^SDAMQ",ZTDESC="ReCalc Appointment Status"
"RTN","SDAMQ",10,0)
 F X="SDBEG","SDEND","SDAMETH" S ZTSAVE(X)=""
"RTN","SDAMQ",11,0)
 K ZTSK D ^%ZTLOAD W:$D(ZTSK) "  (Task: #",ZTSK,")"
"RTN","SDAMQ",12,0)
ENQ Q
"RTN","SDAMQ",13,0)
 ;
"RTN","SDAMQ",14,0)
START ;
"RTN","SDAMQ",15,0)
 G STARTQ:'$$SWITCH
"RTN","SDAMQ",16,0)
 N SDSTART,SDFIN
"RTN","SDAMQ",17,0)
 K ^TMP("SDSTATS",$J)
"RTN","SDAMQ",18,0)
 S SDSTART=$$NOW^SDAMU D ADD^SDAMQ1
"RTN","SDAMQ",19,0)
 D EN^SDAMQ3(SDBEG,SDEND)  ; appointments
"RTN","SDAMQ",20,0)
 D EN^SDAMQ4(SDBEG,SDEND)  ; add/edits
"RTN","SDAMQ",21,0)
 D EN^SDAMQ5(SDBEG,SDEND)  ; dispositions
"RTN","SDAMQ",22,0)
 S SDFIN=$$NOW^SDAMU D UPD^SDAMQ1(SDBEG,SDEND,SDFIN,.05)
"RTN","SDAMQ",23,0)
 D BULL^SDAMQ1
"RTN","SDAMQ",24,0)
STARTQ K SDBEG,SDEND,SDAMETH,^TMP("SDSTATS",$J) Q
"RTN","SDAMQ",25,0)
 ;
"RTN","SDAMQ",26,0)
AUTO ; -- nightly job entry point
"RTN","SDAMQ",27,0)
 G:'$$SWITCH AUTOQ
"RTN","SDAMQ",28,0)
 ; -- do yesterday's first
"RTN","SDAMQ",29,0)
 S X1=DT,X2=-1 D C^%DTC
"RTN","SDAMQ",30,0)
 S (SDOPCDT,SDBEG)=X,SDEND=X+.2359,SDAMETH=1 D START
"RTN","SDAMQ",31,0)
 ; -- check previous 30 days starting with the day before yesterday
"RTN","SDAMQ",32,0)
 F SDBACK=2:1:31 S X1=DT,X2=-SDBACK D C^%DTC Q:X<$$SWITCH^SDAMU  I '$P($G(^SDD(409.65,+$O(^SDD(409.65,"B",X,0)),0)),U,5) S SDBEG=X,SDEND=X+.2359,SDAMETH=1 D START
"RTN","SDAMQ",33,0)
 ; -- generate opc if desired
"RTN","SDAMQ",34,0)
 D OPC
"RTN","SDAMQ",35,0)
AUTOQ K SDOPCDT,SDBEG,SDEND,SDAMETH,SDBACK,X,X1,X2 Q
"RTN","SDAMQ",36,0)
 ;
"RTN","SDAMQ",37,0)
SWITCH() ;
"RTN","SDAMQ",38,0)
 Q $$SWITCH^SDAMU<DT
"RTN","SDAMQ",39,0)
 ;
"RTN","SDAMQ",40,0)
MES ;
"RTN","SDAMQ",41,0)
 W !!,*7,"The date when all appointemnts must be checked-in to obtain"
"RTN","SDAMQ",42,0)
 W !,"OPC credit is ",$$FDATE^VALM1($$SWITCH^SDAMU),"."
"RTN","SDAMQ",43,0)
 W !!,"It is too soon to run this option."
"RTN","SDAMQ",44,0)
 Q
"RTN","SDAMQ",45,0)
 ;
"RTN","SDAMQ",46,0)
RANGE(SDBEG,SDEND,SDAMETH) ; -- select range
"RTN","SDAMQ",47,0)
 N SDWITCH,SDT,X1,X2,X
"RTN","SDAMQ",48,0)
 S (SDBEG,SDEND)=0,SDT=DT
"RTN","SDAMQ",49,0)
 I $G(SDAMETH)>0 S X1=DT,X2=-1 D C^%DTC S SDT=X
"RTN","SDAMQ",50,0)
 S DIR("B")=$$FDATE^VALM1(SDT),SDWITCH=$$SWITCH^SDAMU
"RTN","SDAMQ",51,0)
 S DIR(0)="DA"_U_SDWITCH_":"_SDT_":EX",DIR("A")="Select Beginning Date: "
"RTN","SDAMQ",52,0)
 S DIR("?",1)="Enter a date between "_$$FDATE^VALM1(SDWITCH)_" to "_$$FDATE^VALM1(SDT)_".",DIR("?")=" "
"RTN","SDAMQ",53,0)
 W ! D ^DIR K DIR G RANGEQ:Y'>0 S SDBEG=Y
"RTN","SDAMQ",54,0)
 S DIR("B")=$$FDATE^VALM1(SDT)
"RTN","SDAMQ",55,0)
 S DIR(0)="DA"_U_SDBEG_":"_SDT_":EX",DIR("A")="Select    Ending Date: "
"RTN","SDAMQ",56,0)
 S DIR("?",1)="Enter a date between "_$$FDATE^VALM1(SDBEG)_" to "_$$FDATE^VALM1(SDT)_".",DIR("?")=" "
"RTN","SDAMQ",57,0)
 D ^DIR K DIR G RANGEQ:Y'>0 S SDEND=Y_".2359"
"RTN","SDAMQ",58,0)
RANGEQ Q SDEND
"RTN","SDAMQ",59,0)
 ;
"RTN","SDAMQ",60,0)
OPC ; -- update opc
"RTN","SDAMQ",61,0)
 ;ALB/JRP - Don't update if past date that the OPC transmission
"RTN","SDAMQ",62,0)
 ;          changed from an internally defined format to HL7 format
"RTN","SDAMQ",63,0)
 Q:($$DATE^SCDXUTL(DT))
"RTN","SDAMQ",64,0)
 ;Update OPC using internal message format
"RTN","SDAMQ",65,0)
 S SDSCLR=^DG(43,1,"SCLR")
"RTN","SDAMQ",66,0)
 I '$P(SDSCLR,U,14) K SDSCLR Q
"RTN","SDAMQ",67,0)
 S SDAPDT=$P(SDSCLR,U,9),SDMTID=$P(SDSCLR,U,11)-.1,SDVLR=$P(SDSCLR,U,10)-.1,(SDBD,SDED)=SDOPCDT
"RTN","SDAMQ",68,0)
 D START^SDOPC
"RTN","SDAMQ",69,0)
 K SDOPCDT Q
"RTN","SDAMQ",70,0)
 ;
"RTN","SDAMQ",71,0)
DIV(SDIV,SDNAME,SDLEN) ; -- find division for clinic
"RTN","SDAMQ",72,0)
 ;  input:   SDIV := clinic ifn
"RTN","SDAMQ",73,0)
 ;          SDLEN := length of name to pass back [optional]
"RTN","SDAMQ",74,0)
 ; output: SDNAME := name of division
"RTN","SDAMQ",75,0)
 ; return:        := division ifn
"RTN","SDAMQ",76,0)
 ;
"RTN","SDAMQ",77,0)
 N X
"RTN","SDAMQ",78,0)
 I '$D(SDLEN) N SDLEN S SDLEN=35
"RTN","SDAMQ",79,0)
 S X=$S('$P($G(^DG(43,1,"GL")),U,2):+$O(^DG(40.8,0)),$D(^DG(40.8,+SDIV,0)):+SDIV,1:+$O(^DG(40.8,0)))
"RTN","SDAMQ",80,0)
 S SDNAME=$E($S($D(^DG(40.8,X,0)):$P(^(0),U),1:"UNKNOWN"),1,SDLEN)
"RTN","SDAMQ",81,0)
 Q X
"RTN","SDAMQ",82,0)
 ;
"RTN","SDAMQ",83,0)
CO(SDOE) ; -- has co process completed
"RTN","SDAMQ",84,0)
 Q $P($G(^SCE(+SDOE,0)),U,7)>0
"RTN","SDAPI")
0^79^B6937568
"RTN","SDAPI",1,0)
SDAPI ;ALB/MJK - Outpatient API ; 22 FEB 1994 11:30 am
"RTN","SDAPI",2,0)
 ;;5.3;Scheduling;**27,44**;08/13/93
"RTN","SDAPI",3,0)
 ;
"RTN","SDAPI",4,0)
EN(DFN,SDT,SDCL,SDEVENT,SDERR,SDVIEN) ; -- main entry point for api
"RTN","SDAPI",5,0)
 N SDROOT,SDMODE,SDRET,SDUZ,SDERROOT
"RTN","SDAPI",6,0)
 ;
"RTN","SDAPI",7,0)
 ; -- set init vars and do basic checks
"RTN","SDAPI",8,0)
 D INIT(DFN,SDT,SDCL,.SDEVENT,.SDROOT,.SDMODE,.SDRET,.SDUZ)
"RTN","SDAPI",9,0)
 IF $$ERRCHK^SDAPIER() G ENQ
"RTN","SDAPI",10,0)
 ;
"RTN","SDAPI",11,0)
 ; -- appointment check out event
"RTN","SDAPI",12,0)
 IF @SDROOT@("EVENT")="CHECK-OUT" D  G ENQ
"RTN","SDAPI",13,0)
 . N SDOE
"RTN","SDAPI",14,0)
 . S SDOE=$$EN^SDAPIAP(DFN,SDT,SDCL,SDUZ,SDMODE,$G(SDVIEN))
"RTN","SDAPI",15,0)
 . ; -- return ien and status if c/o attempted
"RTN","SDAPI",16,0)
 . S SDRET=$S(SDOE:SDOE_U_$P($G(^SD(409.63,+$P($G(^SCE(SDOE,0)),U,12),0)),U),1:"")
"RTN","SDAPI",17,0)
 . I SDOE,'$$CHK^SDCOM(SDOE) D COMDT^SDCODEL(SDOE,0)
"RTN","SDAPI",18,0)
 ;
"RTN","SDAPI",19,0)
 S SDT1=SDT ;this is to record the actual date for SDVSIT
"RTN","SDAPI",20,0)
 ; -- disposition event
"RTN","SDAPI",21,0)
 IF @SDROOT@("EVENT")="DISPOSITION" D  G ENQ
"RTN","SDAPI",22,0)
 . N SDOE
"RTN","SDAPI",23,0)
 . S SDOE=$$EN^SDAPIDP(DFN,SDT,SDCL,SDUZ,SDMODE,$G(SDVIEN))
"RTN","SDAPI",24,0)
 . ; -- return ien and status if c/o attempted
"RTN","SDAPI",25,0)
 . S SDRET=$S(SDOE:SDOE_U_$P($G(^SD(409.63,+$P($G(^SCE(SDOE,0)),U,12),0)),U),1:"")
"RTN","SDAPI",26,0)
 . I SDOE,'$$CHK^SDCOM(SDOE) D COMDT^SDCODEL(SDOE,0)
"RTN","SDAPI",27,0)
 ;
"RTN","SDAPI",28,0)
 ; -- add/edit check out event ; return list of iens
"RTN","SDAPI",29,0)
 IF @SDROOT@("EVENT")="ADD/EDIT CHECK-OUT" D  G ENQ
"RTN","SDAPI",30,0)
 . S SDRET=$$EN^SDAPIAE0(DFN,SDT,SDCL,SDUZ,SDMODE,$G(SDVIEN))
"RTN","SDAPI",31,0)
 ;
"RTN","SDAPI",32,0)
 ; -- delete appointment check out event
"RTN","SDAPI",33,0)
 IF @SDROOT@("EVENT")="CHECK-OUT DELETE" D  G ENQ
"RTN","SDAPI",34,0)
 . N SDOE
"RTN","SDAPI",35,0)
 . S SDOE=$$GETAPT^SDVSIT2(DFN,SDT,SDCL,$G(SDVIEN))
"RTN","SDAPI",36,0)
 . IF $D(^SCE(+SDOE,0)) D EN^SDCODEL(SDOE,SDMODE)
"RTN","SDAPI",37,0)
 ;
"RTN","SDAPI",38,0)
ENQ D HDL
"RTN","SDAPI",39,0)
 Q '$$ERRCHK^SDAPIER()_U_SDRET
"RTN","SDAPI",40,0)
 ;
"RTN","SDAPI",41,0)
INIT(DFN,SDT,SDCL,SDEVENT,SDROOT,SDMODE,SDRET,SDUZ) ; -- initialization of environment
"RTN","SDAPI",42,0)
 S SDMODE="",SDRET=""
"RTN","SDAPI",43,0)
 ; -- set error root
"RTN","SDAPI",44,0)
 S SDERROOT=$S($G(SDERR)]"":SDERR,1:"SDERR")
"RTN","SDAPI",45,0)
 ;
"RTN","SDAPI",46,0)
 ; -- set event root
"RTN","SDAPI",47,0)
 S SDROOT=$S($G(SDEVENT)]"":SDEVENT,1:"SDEVENT")
"RTN","SDAPI",48,0)
 ;
"RTN","SDAPI",49,0)
 ; -- error if no event data
"RTN","SDAPI",50,0)
 I $G(@SDROOT@("EVENT"))="" D ERRFILE^SDAPIER(1)
"RTN","SDAPI",51,0)
 ;
"RTN","SDAPI",52,0)
 ; -- kill evt drv handle
"RTN","SDAPI",53,0)
 D HDL
"RTN","SDAPI",54,0)
 ;
"RTN","SDAPI",55,0)
 ; -- error if no patient
"RTN","SDAPI",56,0)
 I '$D(^DPT(+$G(DFN),0)) D ERRFILE^SDAPIER(2,DFN)
"RTN","SDAPI",57,0)
 ;
"RTN","SDAPI",58,0)
 ; -- error if no user
"RTN","SDAPI",59,0)
 S SDUZ=+$G(@SDROOT@("USER")) I '$D(^VA(200,SDUZ,0)) D ERRFILE^SDAPIER(3,SDUZ)
"RTN","SDAPI",60,0)
 ;
"RTN","SDAPI",61,0)
 ; -- error if not a clinic
"RTN","SDAPI",62,0)
 I @SDROOT@("EVENT")'="DISPOSITION",$P($G(^SC(+$G(SDCL),0)),U,3)'="C" D ERRFILE^SDAPIER(4,SDCL)
"RTN","SDAPI",63,0)
 ;
"RTN","SDAPI",64,0)
 ; -- error if no encounter date
"RTN","SDAPI",65,0)
 I SDT="" D ERRFILE^SDAPIER(5)
"RTN","SDAPI",66,0)
 ;
"RTN","SDAPI",67,0)
INITQ Q
"RTN","SDAPI",68,0)
 ;
"RTN","SDAPI",69,0)
 ;
"RTN","SDAPI",70,0)
HOST(PROTOCOL,MESSAGE) ; -- specify info by protocol
"RTN","SDAPI",71,0)
 Q
"RTN","SDAPI",72,0)
 N SDRESULT
"RTN","SDAPI",73,0)
 S SDRESULT=$$EN(DFN,SDT,SDCL,SDUZ,.SDEVENT)
"RTN","SDAPI",74,0)
 Q
"RTN","SDAPI",75,0)
 ;
"RTN","SDAPI",76,0)
HDL ; -- kill evt drv hanndle
"RTN","SDAPI",77,0)
 I $G(@SDROOT@("KILL HANDLE")) D HDLKILL^SDAMEVT()
"RTN","SDAPI",78,0)
 Q
"RTN","SDAPI",79,0)
 ;
"RTN","SDAPIAE")
0^33^B11667864
"RTN","SDAPIAE",1,0)
SDAPIAE ;ALB/MJK - API - Add/Edit Processing;04 MAR 1993 10:00 am
"RTN","SDAPIAE",2,0)
 ;;5.3;Scheduling;**27,44**;Aug 13, 1993
"RTN","SDAPIAE",3,0)
 ;
"RTN","SDAPIAE",4,0)
SC(SDOEP,SDUZ,SDMODE,SDVIEN) ; -- file stop codes
"RTN","SDAPIAE",5,0)
 IF '$D(@SDROOT@("STOP CODE")),'$D(@SDROOT@("PROCEDURE")) G SCQ
"RTN","SDAPIAE",6,0)
 N SDOEP0,SDCPT,SDC,SDCLINIC,SDIV,SDATE,DFN,SDATYPE,SDCTYPE,AMBVER
"RTN","SDAPIAE",7,0)
 ;
"RTN","SDAPIAE",8,0)
 ; -- set up basic variables
"RTN","SDAPIAE",9,0)
 S SDOEP0=$G(^SCE(SDOEP,0)),SDATE=$P(+SDOEP0,"."),DFN=+$P(SDOEP0,U,2),SDCLINIC=+$P(SDOEP0,U,4)
"RTN","SDAPIAE",10,0)
 S SDATYPE=$P(SDOEP0,U,10),SDIV=+$P($G(^DG(40.8,+$P(SDOEP0,U,11),0)),U,7)
"RTN","SDAPIAE",11,0)
 S SDMSG=0
"RTN","SDAPIAE",12,0)
 IF SDOEP0=""!('SDATE)!('DFN)!('SDCLINIC)!('SDATYPE)!('SDIV) G SCQ
"RTN","SDAPIAE",13,0)
 ;
"RTN","SDAPIAE",14,0)
 ; -- set up stop codes
"RTN","SDAPIAE",15,0)
 S SDC=$$STOPS()
"RTN","SDAPIAE",16,0)
 ;
"RTN","SDAPIAE",17,0)
 S AMBVER=$$DATE^SCDXUTL(+$P(SDOEP0,U,1))
"RTN","SDAPIAE",18,0)
 ;
"RTN","SDAPIAE",19,0)
 ; -- set up cpt array
"RTN","SDAPIAE",20,0)
 D CPTS(DFN,SDATE,SDCLINIC,.SDCPT)
"RTN","SDAPIAE",21,0)
 ;
"RTN","SDAPIAE",22,0)
 ; -- call stop code/cpt backdoor if appropriate
"RTN","SDAPIAE",23,0)
 S SDCTYPE=$$TYPE(.SDC,.SDCPT)
"RTN","SDAPIAE",24,0)
 IF SDCTYPE]"",$$BACKDR($G(SDVIEN)) D ERRFILE^SDAPIER(1074)
"RTN","SDAPIAE",25,0)
 ;
"RTN","SDAPIAE",26,0)
 ; -- delete stops and procs
"RTN","SDAPIAE",27,0)
 D DELETE^SDAPIAE1(DFN,+SDOEP0,+$P(SDOEP0,U,4),SDOEP,SDMODE)
"RTN","SDAPIAE",28,0)
 ;
"RTN","SDAPIAE",29,0)
SCQ Q
"RTN","SDAPIAE",30,0)
 ;
"RTN","SDAPIAE",31,0)
BACKDR(SDVIEN) ; -- do back door
"RTN","SDAPIAE",32,0)
 N SDERR,SDT,SDCL,SDVTIEN
"RTN","SDAPIAE",33,0)
 S:$G(SDVIEN)'="" SDVTIEN=SDVIEN
"RTN","SDAPIAE",34,0)
 D EN3B^SDACS
"RTN","SDAPIAE",35,0)
 Q $G(SDERR)
"RTN","SDAPIAE",36,0)
 ;
"RTN","SDAPIAE",37,0)
TYPE(SDC,SDCPT) ; -- what type of call to SDACS
"RTN","SDAPIAE",38,0)
 N SDCTYPE
"RTN","SDAPIAE",39,0)
 IF SDC]"" S SDCTYPE=$S($O(SDCPT(0)):"B",1:"S")
"RTN","SDAPIAE",40,0)
 IF SDC="" S SDCTYPE=$S($O(SDCPT(0)):"C",1:"")
"RTN","SDAPIAE",41,0)
 Q SDCTYPE
"RTN","SDAPIAE",42,0)
 ;
"RTN","SDAPIAE",43,0)
VA200(NAME,IEN) ; -- find ^VA(200 entry ; not used at this time (3/94)
"RTN","SDAPIAE",44,0)
 N Y
"RTN","SDAPIAE",45,0)
 IF 'IEN S Y=$O(^VA(200,"B",NAME,0)) D
"RTN","SDAPIAE",46,0)
 .IF Y,$O(^VA(200,"B",NAME,Y)) Q
"RTN","SDAPIAE",47,0)
 .S IEN=Y
"RTN","SDAPIAE",48,0)
 IF IEN,$P(^VA(200,IEN,0),U)'=NAME S IEN=0
"RTN","SDAPIAE",49,0)
 Q IEN
"RTN","SDAPIAE",50,0)
 ;
"RTN","SDAPIAE",51,0)
STOPS() ; -- set up stop codes processing
"RTN","SDAPIAE",52,0)
 ;
"RTN","SDAPIAE",53,0)
 ; -- ADD stop code processing
"RTN","SDAPIAE",54,0)
 N SDC,SDCODE
"RTN","SDAPIAE",55,0)
 S (SDCODE,SDC)=""
"RTN","SDAPIAE",56,0)
 F  S SDCODE=$O(@SDROOT@("STOP CODE","ADD",SDCODE)) Q:SDCODE=""  D
"RTN","SDAPIAE",57,0)
 . IF '$D(^DIC(40.7,"C",SDCODE)) D ERRFILE^SDAPIER(1070,SDCODE) Q
"RTN","SDAPIAE",58,0)
 . S SDC=SDC_SDCODE_U
"RTN","SDAPIAE",59,0)
 Q SDC
"RTN","SDAPIAE",60,0)
 ;
"RTN","SDAPIAE",61,0)
CPTS(DFN,SDATE,SDCL,SDCPT) ; -- set up cpt processing
"RTN","SDAPIAE",62,0)
 N DATECHK,I,SDSLOT,SDNUM,SDCNT,SDCPTN
"RTN","SDAPIAE",63,0)
 ;
"RTN","SDAPIAE",64,0)
 ; -- ADD cpt processing
"RTN","SDAPIAE",65,0)
 S SDCPTN="",SDSLOT=0
"RTN","SDAPIAE",66,0)
 ; -- if no cpts then exit
"RTN","SDAPIAE",67,0)
 I '$D(@SDROOT@("PROCEDURE","ADD")) D  Q
"RTN","SDAPIAE",68,0)
 . S SDCPT=""
"RTN","SDAPIAE",69,0)
 ; -- init first slot
"RTN","SDAPIAE",70,0)
 D SLOT(.SDSLOT,SDCL,.SDCPT,.SDCNT)
"RTN","SDAPIAE",71,0)
 ;
"RTN","SDAPIAE",72,0)
 S DATECHK=$G(AMBVER) I '$D(AMBVER) S DATECHK=$S('$D(SDOEP):$$DATE^SCDXUTL(DT),1:$$DATE^SCDXUTL($P(^SCE(SDOEP,0),U,1)))
"RTN","SDAPIAE",73,0)
 F  S SDCPTN=$O(@SDROOT@("PROCEDURE","ADD",SDCPTN)) Q:SDCPTN=""  D  I 'DATECHK Q:SDSLOT>6
"RTN","SDAPIAE",74,0)
 . IF '$O(^ICPT("B",SDCPTN,0)) D ERRFILE^SDAPIER(1072,SDCPTN) Q
"RTN","SDAPIAE",75,0)
 . S SDNUM=@SDROOT@("PROCEDURE","ADD",SDCPTN)
"RTN","SDAPIAE",76,0)
 . F I=1:1:SDNUM D  I 'DATECHK Q:SDSLOT>6  ; quit if all slots are filled
"RTN","SDAPIAE",77,0)
 .. ; -- start new slot if 5 cpts filled in for current slot
"RTN","SDAPIAE",78,0)
 .. IF SDCNT=5 D SLOT(.SDSLOT,SDCL,.SDCPT,.SDCNT) IF 'DATECHK,SDSLOT>6 Q
"RTN","SDAPIAE",79,0)
 .. S SDCNT=SDCNT+1
"RTN","SDAPIAE",80,0)
 .. S $P(SDCPT(SDSLOT),U,SDCNT+2)=SDCPTN
"RTN","SDAPIAE",81,0)
 Q
"RTN","SDAPIAE",82,0)
 ;
"RTN","SDAPIAE",83,0)
SLOT(SDSLOT,SDCL,SDCPT,SDCNT) ; -- init cpt slot
"RTN","SDAPIAE",84,0)
 S SDSLOT=SDSLOT+1,SDCNT=0
"RTN","SDAPIAE",85,0)
 ; -- start new slot
"RTN","SDAPIAE",86,0)
 N DATECHK
"RTN","SDAPIAE",87,0)
 S DATECHK=$G(AMBVER) I '$D(AMBVER) S DATECHK=$S('$D(SDOEP):$$DATE^SCDXUTL(DT),1:$$DATE^SCDXUTL($P(^SCE(SDOEP,0),U,1)))
"RTN","SDAPIAE",88,0)
 IF SDSLOT'>6!(DATECHK) S SDCPT(SDSLOT)="900^"_SDCL
"RTN","SDAPIAE",89,0)
 ;
"RTN","SDAPIAE",90,0)
 ; -- warning if no more slots available
"RTN","SDAPIAE",91,0)
 IF 'DATECHK,SDSLOT>6 D ERRFILE^SDAPIER(1071)
"RTN","SDAPIAE",92,0)
 ;
"RTN","SDAPIAE",93,0)
 Q
"RTN","SDAPIAE",94,0)
 ;
"RTN","SDAPIAE1")
0^71^B13626253
"RTN","SDAPIAE1",1,0)
SDAPIAE1 ;ALB/MJK - API - Add/Edit Processing;04 MAR 1993 10:00 am
"RTN","SDAPIAE1",2,0)
 ;;5.3;Scheduling;**27,44**;08/13/93
"RTN","SDAPIAE1",3,0)
 ;
"RTN","SDAPIAE1",4,0)
DELETE(DFN,SDATE,SDCL,SDOEP,SDMODE) ; 
"RTN","SDAPIAE1",5,0)
 N SDT,SDCODE,SDCS,SDCS0,SDCHG,X,DA,DIK,DIE,DR,SDI,SDCPTN,SDNUM,SDCPTI,SDPR
"RTN","SDAPIAE1",6,0)
 ;
"RTN","SDAPIAE1",7,0)
 ; -- evt drv setup
"RTN","SDAPIAE1",8,0)
 N SDAEHDL S SDAEHDL=$$HANDLE^SDAMEVT(2)
"RTN","SDAPIAE1",9,0)
 D BEFORE^SDAMEVT2(DFN,SDATE,.SDAEHDL)
"RTN","SDAPIAE1",10,0)
 ;
"RTN","SDAPIAE1",11,0)
 S SDCHG=0,(SDCODE,SDCPTN)="",SDT=+$G(^SDV("ADT",DFN,$P(SDATE,".")))
"RTN","SDAPIAE1",12,0)
 ; -- quit if no visit info for patient on date
"RTN","SDAPIAE1",13,0)
 G DELETEQ:'SDT
"RTN","SDAPIAE1",14,0)
 ;
"RTN","SDAPIAE1",15,0)
 ; -- stop codes
"RTN","SDAPIAE1",16,0)
 F  S SDCODE=$O(@SDROOT@("STOP CODE","DELETE",SDCODE)) Q:SDCODE=""  D
"RTN","SDAPIAE1",17,0)
 . IF '$D(^DIC(40.7,"C",SDCODE)) D ERRFILE^SDAPIER(1075,SDCODE) Q
"RTN","SDAPIAE1",18,0)
 . S SDCS=0,SDNUM=1
"RTN","SDAPIAE1",19,0)
 . F  S SDCS=$O(^SDV(SDT,"CS",SDCS)) Q:'SDCS  S SDCS0=^(SDCS,0) D
"RTN","SDAPIAE1",20,0)
 .. ; -- must be same stop code
"RTN","SDAPIAE1",21,0)
 .. IF $P($G(^DIC(40.7,+SDCS0,0)),U,2)'=SDCODE Q
"RTN","SDAPIAE1",22,0)
 .. ; -- must be same clinic and encounter must have same parent
"RTN","SDAPIAE1",23,0)
 .. ;IF SDCL=+$P(SDCS0,U,3),$P(SDCS0,U,8),+$P($G(^SCE($P(SDCS0,U,8),0)),U,6)=+SDOEP S SDCHG=1,SDNUM=0 D KILL(SDT,SDCS,SDMODE)
"RTN","SDAPIAE1",24,0)
 .. IF SDCL=+$P(SDCS0,U,3),$P(SDCS0,U,8) S SDCHG=1,SDNUM=0 D KILL(SDT,SDCS,SDMODE)
"RTN","SDAPIAE1",25,0)
 . ; -- stop code not found
"RTN","SDAPIAE1",26,0)
 . IF SDNUM>0 D ERRFILE^SDAPIER(1077,SDCODE)
"RTN","SDAPIAE1",27,0)
 ;
"RTN","SDAPIAE1",28,0)
 ; -- cpt codes
"RTN","SDAPIAE1",29,0)
 F  S SDCPTN=$O(@SDROOT@("PROCEDURE","DELETE",SDCPTN)) Q:SDCPTN=""  D
"RTN","SDAPIAE1",30,0)
 . S SDCPTI=$O(^ICPT("B",SDCPTN,0))
"RTN","SDAPIAE1",31,0)
 . IF 'SDCPTI D ERRFILE^SDAPIER(1076,SDCPTN) Q
"RTN","SDAPIAE1",32,0)
 . S SDCS=0,SDNUM=+@SDROOT@("PROCEDURE","DELETE",SDCPTN) Q:SDNUM<1
"RTN","SDAPIAE1",33,0)
 . F  S SDCS=$O(^SDV(SDT,"CS",SDCS)) Q:'SDCS  S SDCS0=^(SDCS,0),SDPR=$G(^("PR")) D  Q:SDNUM<1
"RTN","SDAPIAE1",34,0)
 .. ; -- must be 900 with procedures
"RTN","SDAPIAE1",35,0)
 .. IF SDPR=""!($P($G(^DIC(40.7,+SDCS0,0)),U,2)'=900) Q
"RTN","SDAPIAE1",36,0)
 .. ; -- must be same clinic
"RTN","SDAPIAE1",37,0)
 .. IF SDCL'=+$P(SDCS0,U,3) Q
"RTN","SDAPIAE1",38,0)
 .. ; -- if parent passed then must be same
"RTN","SDAPIAE1",39,0)
 .. ;IF SDOEP,+$P($G(^SCE(+$P(SDCS0,U,8),0)),U,6)'=+SDOEP Q
"RTN","SDAPIAE1",40,0)
 ..;
"RTN","SDAPIAE1",41,0)
 ..; -- delete cpt field data
"RTN","SDAPIAE1",42,0)
 ..; F SDI=1:1:5 I $P(SDPR,U,SDI)=SDCPTI S SDCHG=1,DA=SDCS,DA(1)=SDT,DIE="^SDV("_SDT_",""CS"",",DR="2"_SDI_"///@" D ^DIE S SDNUM=SDNUM-1 K DR,DIE,DA Q:SDNUM<1
"RTN","SDAPIAE1",43,0)
 .. F SDI=1:1:5 I $P(SDPR,U,SDI)=SDCPTI S SDCHG=1,$P(^SDV(SDT,"CS",SDCS,"PR"),U,SDI)="",SDNUM=SDNUM-1 Q:SDNUM<1
"RTN","SDAPIAE1",44,0)
 ..;
"RTN","SDAPIAE1",45,0)
 ..; -- delete node if no cpts remain
"RTN","SDAPIAE1",46,0)
 ..; -- (stop for clinic losses credit as well)
"RTN","SDAPIAE1",47,0)
 .. I $TR($G(^SDV(SDT,"CS",SDCS,"PR")),U,"")="" D KILL(SDT,SDCS,SDMODE)
"RTN","SDAPIAE1",48,0)
 . ; -- # of cpts was smaller than on file
"RTN","SDAPIAE1",49,0)
 . IF SDNUM>0 D ERRFILE^SDAPIER(1078,SDCPTN)
"RTN","SDAPIAE1",50,0)
 ;
"RTN","SDAPIAE1",51,0)
 ; -- 
"RTN","SDAPIAE1",52,0)
 I SDCHG D EVT^SDAMEVT2(DFN,SDT,7,SDAEHDL,$G(SDOEP))
"RTN","SDAPIAE1",53,0)
 ;
"RTN","SDAPIAE1",54,0)
DELETEQ ; -- clean-up evt drv info is no change
"RTN","SDAPIAE1",55,0)
 I 'SDCHG D CLEAN^SDAMEVT(+$G(SDAEHDL))
"RTN","SDAPIAE1",56,0)
 Q
"RTN","SDAPIAE1",57,0)
 ;
"RTN","SDAPIAE1",58,0)
KILL(SDT,SDCS,SDMODE) ;
"RTN","SDAPIAE1",59,0)
 N DA,DIK,SDCS0,ENCT
"RTN","SDAPIAE1",60,0)
 L +^SDV(SDT,"CS",SDCS)
"RTN","SDAPIAE1",61,0)
 S SDCS0=$G(^SDV(SDT,"CS",SDCS,0))
"RTN","SDAPIAE1",62,0)
 ;
"RTN","SDAPIAE1",63,0)
 ; -- late activity bulletin
"RTN","SDAPIAE1",64,0)
 D AE^SDAMEVT1(SDT,SDCS,"2^deleted")
"RTN","SDAPIAE1",65,0)
 ;
"RTN","SDAPIAE1",66,0)
 ; -- delete encounter
"RTN","SDAPIAE1",67,0)
 S ENCT=$P(SDCS0,U,8)
"RTN","SDAPIAE1",68,0)
 I ENCT DO
"RTN","SDAPIAE1",69,0)
 .N XREF
"RTN","SDAPIAE1",70,0)
 .S XREF=$P(^SCE(ENCT,0),U,9)
"RTN","SDAPIAE1",71,0)
 .;if there is an extended xref only want to eliminate one entry
"RTN","SDAPIAE1",72,0)
 .I XREF[":" D XTEND(SDCS,XREF,ENCT) I 1
"RTN","SDAPIAE1",73,0)
 .E  D OE^SDCODEL($P(SDCS0,U,8),SDMODE)
"RTN","SDAPIAE1",74,0)
 .Q
"RTN","SDAPIAE1",75,0)
 ;
"RTN","SDAPIAE1",76,0)
 ; -- delete stop code node and entire visit entry if appropriate
"RTN","SDAPIAE1",77,0)
 S DA(1)=SDT,DA=SDCS,DIK="^SDV("_DA(1)_",""CS""," D ^DIK K DA,DIK
"RTN","SDAPIAE1",78,0)
 IF '$O(^SDV(SDT,"CS",0)) S DA=SDT,DIK="^SDV(" D ^DIK K DA,DIK
"RTN","SDAPIAE1",79,0)
 ;
"RTN","SDAPIAE1",80,0)
 L -^SDV(SDT,"CS",SDCS)
"RTN","SDAPIAE1",81,0)
 Q
"RTN","SDAPIAE1",82,0)
 ;
"RTN","SDAPIAE1",83,0)
XTEND(DIEN,XREF,ENCT) ;this call removes a value from the xtended xref that was deleted
"RTN","SDAPIAE1",84,0)
 ;Inputs   -- DIEN the delete node IEN of SDV
"RTN","SDAPIAE1",85,0)
 ;         -- XREF the xtended x ref tha needs changing
"RTN","SDAPIAE1",86,0)
 ;         -- ENCT the encounter that needs updating
"RTN","SDAPIAE1",87,0)
 ;
"RTN","SDAPIAE1",88,0)
 N LP,VAL,NXREF
"RTN","SDAPIAE1",89,0)
 S NXREF=""
"RTN","SDAPIAE1",90,0)
 F LP=1:1 S VAL=$P(XREF,":",LP) Q:'VAL  I VAL'=DIEN S NXREF=NXREF_$S(NXREF]"":":",1:"")_VAL
"RTN","SDAPIAE1",91,0)
 ;
"RTN","SDAPIAE1",92,0)
 I '$D(^SCE(ENCT,0)) Q
"RTN","SDAPIAE1",93,0)
 S $P(^SCE(ENCT,0),U,9)=NXREF
"RTN","SDAPIAE1",94,0)
 Q
"RTN","SDAPICO")
0^34^B11963393
"RTN","SDAPICO",1,0)
SDAPICO ;ALB/MJK - API - Common Check-Out Processing;04 MAR 1993 10:00 am
"RTN","SDAPICO",2,0)
 ;;5.3;Scheduling;**27,44**;Aug 13, 1993
"RTN","SDAPICO",3,0)
 ;
"RTN","SDAPICO",4,0)
FILE(SDOE,SDUZ) ; File Data after checks
"RTN","SDAPICO",5,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDAPICO",6,0)
 ;           SDUZ      User ien to file 200
"RTN","SDAPICO",7,0)
 ; Output -- <none>
"RTN","SDAPICO",8,0)
 ;
"RTN","SDAPICO",9,0)
 N SDOE0,SDORG
"RTN","SDAPICO",10,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDORG=$P(SDOE0,U,8)
"RTN","SDAPICO",11,0)
 ;
"RTN","SDAPICO",12,0)
 ; -- warning if check-out not required (for old appts)
"RTN","SDAPICO",13,0)
 IF $$REQ^SDM1A(+SDOE0)'="CO" D ERRFILE^SDAPIER(1030)
"RTN","SDAPICO",14,0)
 ;
"RTN","SDAPICO",15,0)
 ; -- warning if not appt or not a clinic
"RTN","SDAPICO",16,0)
 IF SDORG=1,'$$CLINIC^SDAMU($P(SDOE0,"^",4)) D ERRFILE^SDAPIER(130,$P(SDOE0,U,4)) G FILEQ
"RTN","SDAPICO",17,0)
 ;
"RTN","SDAPICO",18,0)
 ; -- warning if patient was inpatient at time of appt
"RTN","SDAPICO",19,0)
 IF $$INP^SDAM2(+$P(SDOE0,"^",2),+SDOE0)="I" D ERRFILE^SDAPIER(1031,+SDOE0)
"RTN","SDAPICO",20,0)
 ;
"RTN","SDAPICO",21,0)
 ; -- process data
"RTN","SDAPICO",22,0)
 D CLASS^SDAPICO1(SDOE) I $$ERRCHK^SDAPIER() G FILEQ
"RTN","SDAPICO",23,0)
 D PROV(SDOE) I $$ERRCHK^SDAPIER() G FILEQ
"RTN","SDAPICO",24,0)
 D DX(SDOE) I $$ERRCHK^SDAPIER() G FILEQ
"RTN","SDAPICO",25,0)
 ;
"RTN","SDAPICO",26,0)
FILEQ Q
"RTN","SDAPICO",27,0)
 ;
"RTN","SDAPICO",28,0)
 ;
"RTN","SDAPICO",29,0)
PROV(SDOE) ; -- file providers
"RTN","SDAPICO",30,0)
 D PROVADD(SDOE)
"RTN","SDAPICO",31,0)
 D PROVDEL(SDOE)
"RTN","SDAPICO",32,0)
 Q
"RTN","SDAPICO",33,0)
 ;
"RTN","SDAPICO",34,0)
PROVADD(SDOE) ; -- add provider processing
"RTN","SDAPICO",35,0)
 N SDNPI,SDPRI,TYPE
"RTN","SDAPICO",36,0)
 S SDNPI="" F  S SDNPI=$O(@SDROOT@("PROVIDER","ADD",SDNPI)) Q:'SDNPI  D
"RTN","SDAPICO",37,0)
 . IF '$D(^VA(200,SDNPI,0)) D ERRFILE^SDAPIER(1050,SDNPI) Q
"RTN","SDAPICO",38,0)
 . S TYPE=$O(@SDROOT@("PROVIDER","ADD",SDNPI,""))
"RTN","SDAPICO",39,0)
 . ; -- provider already associated with encounter
"RTN","SDAPICO",40,0)
 . IF '$D(^SDD(409.44,"AO",SDOE,SDNPI)) S SDPRI=$$NEW^SDCO3(SDNPI,SDOE,TYPE)
"RTN","SDAPICO",41,0)
 . E  S SDPRI=$$EDIT^SDCO3(SDNPI,SDOE,TYPE)
"RTN","SDAPICO",42,0)
 Q
"RTN","SDAPICO",43,0)
 ;
"RTN","SDAPICO",44,0)
PROVDEL(SDOE) ; - delete prov processing
"RTN","SDAPICO",45,0)
 N SDNPI,SDPRI
"RTN","SDAPICO",46,0)
 S SDNPI="" F  S SDNPI=$O(@SDROOT@("PROVIDER","DELETE",SDNPI)) Q:'SDNPI  D
"RTN","SDAPICO",47,0)
 . IF '$D(^VA(200,SDNPI,0)) D ERRFILE^SDAPIER(1051,SDNPI) Q
"RTN","SDAPICO",48,0)
 . ; -- can't delete last provider for encounter if required
"RTN","SDAPICO",49,0)
 . ;IF '$$PRDEL^SDCODD(SDOE) D COMDT^SDCODEL(SDOE),ERRFILE^SDAPIER(1052,SDNPI) Q
"RTN","SDAPICO",50,0)
 . D DEL(SDOE,409.44,SDNPI)
"RTN","SDAPICO",51,0)
 Q
"RTN","SDAPICO",52,0)
 ;
"RTN","SDAPICO",53,0)
DEL(SDOE,SDFL,SDVAL) ; -- delete entry in file if match
"RTN","SDAPICO",54,0)
 N DA,DIK,SDI
"RTN","SDAPICO",55,0)
 S SDI=0
"RTN","SDAPICO",56,0)
 F  S SDI=$O(^SDD(SDFL,"AO",+SDOE,+SDVAL,SDI)) Q:'SDI  S DIK="^SDD("_SDFL_",",DA=SDI D ^DIK K DIK,DA
"RTN","SDAPICO",57,0)
 Q
"RTN","SDAPICO",58,0)
 ;
"RTN","SDAPICO",59,0)
DX(SDOE) ; -- file diagnosis
"RTN","SDAPICO",60,0)
 D DXADD(SDOE)
"RTN","SDAPICO",61,0)
 D DXDEL(SDOE)
"RTN","SDAPICO",62,0)
 Q
"RTN","SDAPICO",63,0)
 ;
"RTN","SDAPICO",64,0)
DXADD(SDOE) ; -- add dx processing
"RTN","SDAPICO",65,0)
 N SDICD,SDICDI,SDDXI,RANK,SDDJNK
"RTN","SDAPICO",66,0)
 S SDICD="" F  S SDICD=$O(@SDROOT@("DIAGNOSIS","ADD",SDICD)) Q:SDICD=""  D
"RTN","SDAPICO",67,0)
 . S RANK=$O(@SDROOT@("DIAGNOSIS","ADD",SDICD,""))
"RTN","SDAPICO",68,0)
 . S SDICDI=+$O(^ICD9("BA",SDICD_" ",0))
"RTN","SDAPICO",69,0)
 . IF '$D(^ICD9(SDICDI,0)) D ERRFILE^SDAPIER(1060,SDICD) Q
"RTN","SDAPICO",70,0)
 . ; -- DX already associated with encounter
"RTN","SDAPICO",71,0)
 . IF '$D(^SDD(409.43,"AO",SDOE,SDICDI)) S SDDXI=$$NEW^SDCO4(SDICDI,SDOE,RANK)
"RTN","SDAPICO",72,0)
 . ; -- if dx is there changing ranking
"RTN","SDAPICO",73,0)
 . IF $D(^SDD(409.43,"AO",SDOE,SDICDI)) S SDDJNK=$O(^(SDICDI,"")) D EDIT^SDCO4(SDDJNK,RANK)
"RTN","SDAPICO",74,0)
 Q
"RTN","SDAPICO",75,0)
 ;
"RTN","SDAPICO",76,0)
DXDEL(SDOE) ; -- delete dx processing
"RTN","SDAPICO",77,0)
 N SDICD,SDICDI,SDDXI
"RTN","SDAPICO",78,0)
 S SDICD="" F  S SDICD=$O(@SDROOT@("DIAGNOSIS","DELETE",SDICD)) Q:SDICD=""  D
"RTN","SDAPICO",79,0)
 . S SDICDI=+$O(^ICD9("BA",SDICD_" ",0))
"RTN","SDAPICO",80,0)
 . IF '$D(^ICD9(SDICDI,0)) D ERRFILE^SDAPIER(1061,SDICD) Q
"RTN","SDAPICO",81,0)
 . ; -- can't delete last dx for encounter if required
"RTN","SDAPICO",82,0)
 . ;IF '$$DXDEL^SDCODD(SDOE) D COMDT^SDCODEL(SDOE),ERRFILE^SDAPIER(1062,SDICD) Q
"RTN","SDAPICO",83,0)
 . D DEL(SDOE,409.43,SDICDI)
"RTN","SDAPICO",84,0)
 Q
"RTN","SDCO0")
0^35^B21599579
"RTN","SDCO0",1,0)
SDCO0 ;ALB/RMO - Build List Area - Check Out; 11 FEB 1993 10:00 am
"RTN","SDCO0",2,0)
 ;;5.3;Scheduling;**20,44**;Aug 13, 1993
"RTN","SDCO0",3,0)
 ;
"RTN","SDCO0",4,0)
EN(SDARY,SDOE,SDSTART,SDTOT) ;Entry point Called by Ck Out & Apt Mgr Exp Dis
"RTN","SDCO0",5,0)
 S SDTOT=0
"RTN","SDCO0",6,0)
 D CL(SDARY,SDOE,SDSTART,.SDTOT)
"RTN","SDCO0",7,0)
 D PR(SDARY,SDOE,SDSTART,.SDTOT)
"RTN","SDCO0",8,0)
 D DX(SDARY,SDOE,SDSTART,.SDTOT)
"RTN","SDCO0",9,0)
 I $P($G(^SCE(+SDOE,0)),"^",8)'=2 D SC(SDARY,SDOE,SDSTART,.SDTOT)
"RTN","SDCO0",10,0)
 Q
"RTN","SDCO0",11,0)
 ;
"RTN","SDCO0",12,0)
CL(SDARY,SDOE,SDSTART,SDTOT) ;Build classification (Pg: 1  Row: SDSTART-SDSTART+7  Col: 1-80)
"RTN","SDCO0",13,0)
 N SDCLOEY,SDCNI,SDCNT,SDCTI,SDCTIS,SDCTS,SDEND,SDLINE,SDNA,SDVAL,X
"RTN","SDCO0",14,0)
 S SDLINE=SDSTART,SDEND=SDSTART+7
"RTN","SDCO0",15,0)
 D SET(SDARY,SDLINE," CLASSIFICATION ",5,IORVON,IORVOFF,"","","",.SDTOT)
"RTN","SDCO0",16,0)
 D CLASK^SDCO2(SDOE,.SDCLOEY)
"RTN","SDCO0",17,0)
 D SET(SDARY,SDLINE,"["_$S($D(SDCLOEY):"Required",1:"Not Required")_"]",24,"","","","","",.SDTOT)
"RTN","SDCO0",18,0)
 S SDCNT=0,SDCTIS=$$SEQ^SDCO21
"RTN","SDCO0",19,0)
 F SDCTS=1:1 S SDCTI=+$P(SDCTIS,",",SDCTS) Q:'SDCTI  D
"RTN","SDCO0",20,0)
 .S SDCNT=SDCNT+1,SDLINE=SDLINE+1
"RTN","SDCO0",21,0)
 .S:$D(SDCLOEY(SDCTI)) SDVAL=$$VAL^SDCODD(SDCTI,$P(SDCLOEY(SDCTI),"^",2)),SDNA=+$P(SDCLOEY(SDCTI),"^",3)
"RTN","SDCO0",22,0)
 .S X=$S('$D(SDCLOEY(SDCTI)):"Not Applicable",$$COMDT^SDCOU(SDOE)&(SDVAL=""):"Not Applicable",SDVAL="":"Unanswered",1:SDVAL)
"RTN","SDCO0",23,0)
 .D SET(SDARY,SDLINE,SDCNT_"  "_$J($P($G(^SD(409.41,SDCTI,0)),"^",6)_": ",32)_X,2,"","","CL",SDCNT,+$G(SDCLOEY(SDCTI))_"^"_SDCTI,.SDTOT)
"RTN","SDCO0",24,0)
 F SDLINE=SDLINE+1:1:SDEND D SET(SDARY,SDLINE,"",1,"","","","","",.SDTOT)
"RTN","SDCO0",25,0)
 Q
"RTN","SDCO0",26,0)
 ;
"RTN","SDCO0",27,0)
PR(SDARY,SDOE,SDSTART,SDTOT) ;Build Provider (Pg: 1  Row: SDSTART+8-END  Col: 1-40)
"RTN","SDCO0",28,0)
 N SDCNT,SDLINE,SDNPI,SDPR,SDPRI
"RTN","SDCO0",29,0)
 S SDLINE=SDSTART+8
"RTN","SDCO0",30,0)
 D SET(SDARY,SDLINE," PROVIDER ",5,IORVON,IORVOFF,"","","",.SDTOT)
"RTN","SDCO0",31,0)
 D SET(SDARY,SDLINE,"["_$S($$PRASK^SDCO3(SDOE)=1:"Required",1:"Not Required")_"]",18,"","","","","",.SDTOT)
"RTN","SDCO0",32,0)
 S (SDCNT,SDNPI,SDPRI)=0
"RTN","SDCO0",33,0)
 F  S SDNPI=$O(^SDD(409.44,"AO",SDOE,SDNPI)) Q:'SDNPI  S SDPR(+$O(^(SDNPI,0)))=SDNPI
"RTN","SDCO0",34,0)
 F  S SDPRI=$O(SDPR(SDPRI)) Q:'SDPRI  D
"RTN","SDCO0",35,0)
 .S SDCNT=SDCNT+1,SDLINE=SDLINE+1
"RTN","SDCO0",36,0)
 .D SET(SDARY,SDLINE,SDCNT_"  "_$$PR^SDCO31(SDPR(SDPRI)),2,"","","PR",SDCNT,SDPRI_"^"_SDPR(SDPRI),.SDTOT)
"RTN","SDCO0",37,0)
 Q
"RTN","SDCO0",38,0)
 ;
"RTN","SDCO0",39,0)
DX(SDARY,SDOE,SDSTART,SDTOT) ;Build Diagnosis (Pg: 1  Row: SDSTART+8-END  Col: 42-80)
"RTN","SDCO0",40,0)
 N SDCNT,SDDX,SDDXD,SDDXI,SDICDI,SDLINE
"RTN","SDCO0",41,0)
 S SDLINE=SDSTART+8
"RTN","SDCO0",42,0)
 D SET(SDARY,SDLINE," DIAGNOSIS ",45,IORVON,IORVOFF,"","","",.SDTOT)
"RTN","SDCO0",43,0)
 D SET(SDARY,SDLINE,"["_$S($$DXASK^SDCO4(SDOE)=1:"Required",1:"Not Required")_"]",59,"","","","","",.SDTOT)
"RTN","SDCO0",44,0)
 S (SDCNT,SDDXI,SDICDI)=0
"RTN","SDCO0",45,0)
 F  S SDICDI=$O(^SDD(409.43,"AO",SDOE,SDICDI)) Q:'SDICDI  S SDDX(+$O(^(SDICDI,0)))=SDICDI
"RTN","SDCO0",46,0)
 F  S SDDXI=$O(SDDX(SDDXI)) Q:'SDDXI  D
"RTN","SDCO0",47,0)
 .S SDCNT=SDCNT+1,SDLINE=SDLINE+1
"RTN","SDCO0",48,0)
 .S SDDXD=$$DX^SDCO41(SDDX(SDDXI))
"RTN","SDCO0",49,0)
 .D SET(SDARY,SDLINE,SDCNT_"  "_$P(SDDXD,"^"),42,"","","","","",.SDTOT)
"RTN","SDCO0",50,0)
 .D SET(SDARY,SDLINE,$P(SDDXD,"^",2),55,"","","DX",SDCNT,SDDXI_"^"_SDDX(SDDXI),.SDTOT)
"RTN","SDCO0",51,0)
 Q
"RTN","SDCO0",52,0)
 ;
"RTN","SDCO0",53,0)
SC(SDARY,SDOEP,SDSTART,SDTOT) ;Build Stop Codes (Pg: 2  Row: SDTOT+1  Col: 1-80)
"RTN","SDCO0",54,0)
 N DFN,SDDA,SDLINE,SDOE,SDOE0,SDORG,SDT
"RTN","SDCO0",55,0)
 F SDLINE=SDTOT+1:1:SDSTART+VALM("LINES")+1 D SET(SDARY,SDLINE,"",1,"","","","","",.SDTOT)
"RTN","SDCO0",56,0)
 D SET(SDARY,SDLINE," STOP CODES ",5,IORVON,IORVOFF,"","","",.SDTOT)
"RTN","SDCO0",57,0)
 D SET(SDARY,SDLINE,"[Not Required]",28,"","","","","",.SDTOT)
"RTN","SDCO0",58,0)
 S SDOE=0
"RTN","SDCO0",59,0)
 F  S SDOE=$O(^SCE("APAR",SDOEP,SDOE)) Q:'SDOE  D
"RTN","SDCO0",60,0)
 .S SDOE0=$G(^SCE(+SDOE,0)),SDT=+SDOE0,DFN=+$P(SDOE0,"^",2),SDORG=+$P(SDOE0,"^",8),SDDA=$P(SDOE0,"^",9)
"RTN","SDCO0",61,0)
 .I SDORG=2 D AE(SDT,SDDA,.SDLINE,.SDTOT,DFN)
"RTN","SDCO0",62,0)
 Q
"RTN","SDCO0",63,0)
 ;
"RTN","SDCO0",64,0)
AE(SDT,SDDA,SDLINE,SDTOT,DFN) ; -- add/edits
"RTN","SDCO0",65,0)
 N SD0,SDCNT,SDCPTI,SDNM,SDPR,SDSCD0,SDLP,SDLP1
"RTN","SDCO0",66,0)
 S SDT=$$SDVDT^SCDXUTL($P(SDT,".",1),DFN)
"RTN","SDCO0",67,0)
 Q:'SDT
"RTN","SDCO0",68,0)
 S SD0=$G(^SDV(SDT,"CS",SDDA,0))
"RTN","SDCO0",69,0)
 S SDSCD0=$G(^DIC(40.7,+SD0,0))
"RTN","SDCO0",70,0)
 I $P(SDSCD0,"^",2)=900,$D(^SC(+$P(SD0,"^",3),0)) S SDNM=$P(^(0),"^"),SDSCD0=$G(^DIC(40.7,+$P(^(0),"^",7),0))
"RTN","SDCO0",71,0)
 S SDLINE=SDLINE+1
"RTN","SDCO0",72,0)
 D SET(SDARY,SDLINE,$P(SDSCD0,"^",2)_"  "_$E($P(SDSCD0,"^"),1,20)_$S($G(SDNM)]"":"     (Associated Clinic: "_$E(SDNM,1,20)_")",1:""),5,"","","","","",.SDTOT)
"RTN","SDCO0",73,0)
 ;loop to get multipl cpts
"RTN","SDCO0",74,0)
 F SDLP=1:1 S SDLP1=$P(SDDA,":",SDLP) Q:'SDLP1  DO
"RTN","SDCO0",75,0)
 .I $D(^SDV(SDT,"CS",SDLP1,"PR")) S SDPR=^("PR") F SDCNT=1:1:5 S SDCPTI=$P(SDPR,"^",SDCNT) I $P(SDPR,"^",SDCNT)'="" DO
"RTN","SDCO0",76,0)
 ..S SDLINE=SDLINE+1
"RTN","SDCO0",77,0)
 ..I SDCNT=1,SDLP=1 D SET(SDARY,SDLINE,"Procedure(s):",12,"","","","","",.SDTOT)
"RTN","SDCO0",78,0)
 ..D SET(SDARY,SDLINE,$E($S($D(^ICPT(SDCPTI,0)):$P(^(0),"^")_"  "_$P(^(0),"^",2),1:"Procedure not defined"),1,40),27,"","","","","",.SDTOT)
"RTN","SDCO0",79,0)
 ..Q
"RTN","SDCO0",80,0)
 .Q
"RTN","SDCO0",81,0)
 Q
"RTN","SDCO0",82,0)
 ;
"RTN","SDCO0",83,0)
SET(SDARY,LINE,TEXT,COL,ON,OFF,SDSUB,SDCNT,SDATA,SDTOT) ; -- set display array
"RTN","SDCO0",84,0)
 N X
"RTN","SDCO0",85,0)
 S:LINE>SDTOT SDTOT=LINE
"RTN","SDCO0",86,0)
 S X=$S($D(^TMP(SDARY,$J,LINE,0)):^(0),1:"")
"RTN","SDCO0",87,0)
 S ^TMP(SDARY,$J,LINE,0)=$$SETSTR^VALM1(TEXT,X,COL,$L(TEXT))
"RTN","SDCO0",88,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(LINE,COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","SDCO0",89,0)
 S:$G(SDSUB)]"" ^TMP("SDCOIDX",$J,SDSUB,SDCNT,SDLINE)=SDATA,^TMP("SDCOIDX",$J,SDSUB,0)=SDCNT
"RTN","SDCO0",90,0)
 Q
"RTN","SDCO3")
0^36^B16851759
"RTN","SDCO3",1,0)
SDCO3 ;ALB/RMO - Provider - Check Out;08 DEC 1992 4:05 pm
"RTN","SDCO3",2,0)
 ;;5.3;Scheduling;**28,27,44**;08/13/93
"RTN","SDCO3",3,0)
 ;
"RTN","SDCO3",4,0)
EN ;Entry point for SDCO PROVIDER protocol
"RTN","SDCO3",5,0)
 ; Input  -- SDOE, SDCOHDL
"RTN","SDCO3",6,0)
 N SDCL,SDCOMF,SDI,SDOE0,SDPRDF,SDSELY
"RTN","SDCO3",7,0)
 ;-- if PCE pass control, quit
"RTN","SDCO3",8,0)
 I $$NEW^SDPCE($P($G(^SCE(+SDOE,0)),U)) D  Q
"RTN","SDCO3",9,0)
 . N SDVISIT,SDHL
"RTN","SDCO3",10,0)
 . S SDVISIT=$P($G(^SCE(+SDOE,0)),U,5)
"RTN","SDCO3",11,0)
 . S X=$$INTV^PXAPI("PRV","SD","PIMS",SDVISIT)
"RTN","SDCO3",12,0)
 . D BLD^SDCO S VALMBCK="R"
"RTN","SDCO3",13,0)
 ;
"RTN","SDCO3",14,0)
 S VALMBCK=""
"RTN","SDCO3",15,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDCL=+$P(SDOE0,"^",4)
"RTN","SDCO3",16,0)
 I SDCL S SDPRDF=$$PRDEF^SDCO31(SDCL) D MSG^VALM10("Default Provider: "_$S(SDPRDF="":"None",1:SDPRDF))
"RTN","SDCO3",17,0)
 D EN^SDCOUR(XQORNOD(0),"PR","A","Add",.SDSELY) G Q:$D(SDSELY("^"))!($D(SDSELY("ERR")))
"RTN","SDCO3",18,0)
 D FULL^VALM1
"RTN","SDCO3",19,0)
 I '$D(SDSELY)!($D(SDSELY("Add"))) D PRHLP^SDCO31(SDCL):SDCL,ADD(SDOE,$G(SDPRDF))
"RTN","SDCO3",20,0)
 S SDI=0 F  S SDI=$O(SDSELY(SDI)) Q:'SDI  D
"RTN","SDCO3",21,0)
 .N SDLINE,SDPRI
"RTN","SDCO3",22,0)
 .S SDLINE=+$O(^TMP("SDCOIDX",$J,"PR",SDI,0)),SDPRI=+$G(^(SDLINE))
"RTN","SDCO3",23,0)
 .W !!,$E($G(^TMP("SDCO",$J,SDLINE,0)),1,40)
"RTN","SDCO3",24,0)
 .D EDT(SDPRI)
"RTN","SDCO3",25,0)
 D EN^SDCOM(SDOE,1,SDCOHDL,.SDCOMF)
"RTN","SDCO3",26,0)
 D BLD^SDCO S VALMBCK="R"
"RTN","SDCO3",27,0)
Q S VALMSG="" Q
"RTN","SDCO3",28,0)
 ;
"RTN","SDCO3",29,0)
ASK(SDOE,SDPRHDL,SDCOQUIT) ;Ask Outpatient Providers
"RTN","SDCO3",30,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO3",31,0)
 ;           SDPRHDL   Provider Event Handle  [Optional]
"RTN","SDCO3",32,0)
 ; Output -- SDCOQUIT  User entered '^' or timeout
"RTN","SDCO3",33,0)
 N IOINHI,IOINORM,SDCL,SDCNT,SDEVTF,SDOE0,SDPRDF,SDPRY,SDSEL,X
"RTN","SDCO3",34,0)
 S X="IOINHI;IOINORM" D ENDR^%ZISS
"RTN","SDCO3",35,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDCL=+$P(SDOE0,"^",4)
"RTN","SDCO3",36,0)
 W !!,"--- ",IOINHI,"Provider",IOINORM," --- [",$S($$PRASK^SDCO3(SDOE)=1:IOINHI_"Required"_IOINORM,1:"Not Required"),"]"
"RTN","SDCO3",37,0)
 I '$G(SDPRHDL) N SDATA,SDPRHDL S SDEVTF=1 D EVT^SDCOU1(SDOE,"BEFORE",.SDPRHDL,.SDATA)
"RTN","SDCO3",38,0)
 I SDCL S SDPRDF=$$PRDEF^SDCO31(SDCL)
"RTN","SDCO3",39,0)
 S SDSEL="Add"
"RTN","SDCO3",40,0)
 D SET(SDOE)
"RTN","SDCO3",41,0)
 I $D(SDPRY) D LIST(.SDPRY) S SDSEL=$$ASK^SDCOUR(SDCNT,"A")
"RTN","SDCO3",42,0)
 I SDSEL["^"!(SDSEL["Return") S:SDSEL["^" SDCOQUIT="" G ASKQ
"RTN","SDCO3",43,0)
 I SDSEL="Add" D PRHLP^SDCO31(SDCL):SDCL,ADD(SDOE,$G(SDPRDF))
"RTN","SDCO3",44,0)
 D EDT(+$G(SDPRY(+SDSEL))):SDSEL
"RTN","SDCO3",45,0)
 I $G(SDEVTF) D EVT^SDCOU1(SDOE,"AFTER",SDPRHDL,.SDATA)
"RTN","SDCO3",46,0)
ASKQ Q
"RTN","SDCO3",47,0)
 ;
"RTN","SDCO3",48,0)
PRASK(SDOE) ;Ask Provider on Check Out
"RTN","SDCO3",49,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO3",50,0)
 ; Output -- 0=No, 1=Yes/Required, 2=Yes/Not Required
"RTN","SDCO3",51,0)
 N SDCL,SDOE0,SDORG,Y
"RTN","SDCO3",52,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDCL=+$P(SDOE0,"^",4),SDORG=+$P(SDOE0,"^",8)
"RTN","SDCO3",53,0)
 I $$REQ^SDM1A(+SDOE0)'="CO" G PRASKQ
"RTN","SDCO3",54,0)
 I SDORG=1,'$$CLINIC^SDAMU(SDCL) G PRASKQ
"RTN","SDCO3",55,0)
 I "^1^2^"[("^"_SDORG_"^"),$$INP^SDAM2(+$P(SDOE0,"^",2),+SDOE0)="I" G PRASKQ
"RTN","SDCO3",56,0)
 I SDCL S Y=+$P($G(^SC(SDCL,0)),"^",26) G PRASKQ
"RTN","SDCO3",57,0)
 I SDORG=3 S Y=+$P($G(^DG(43,1,"SCLR")),"^",19)
"RTN","SDCO3",58,0)
PRASKQ Q +$G(Y)
"RTN","SDCO3",59,0)
 ;
"RTN","SDCO3",60,0)
SET(SDOE) ;Set-up Provider Array for Outpatient Encounter
"RTN","SDCO3",61,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO3",62,0)
 ; Output -- SDPRY     Provider Array Subscripted by a Number
"RTN","SDCO3",63,0)
 ;           SDCNT     Number of Array Entries
"RTN","SDCO3",64,0)
 N SDNPI,SDPRI
"RTN","SDCO3",65,0)
 K SDPRY
"RTN","SDCO3",66,0)
 S (SDCNT,SDNPI)=0
"RTN","SDCO3",67,0)
 F  S SDNPI=$O(^SDD(409.44,"AO",SDOE,SDNPI)) Q:'SDNPI  S SDPRI=+$O(^(SDNPI,0)) D
"RTN","SDCO3",68,0)
 .S SDCNT=SDCNT+1
"RTN","SDCO3",69,0)
 .S SDPRY(SDCNT)=SDPRI_"^"_SDNPI
"RTN","SDCO3",70,0)
SETQ Q
"RTN","SDCO3",71,0)
 ;
"RTN","SDCO3",72,0)
LIST(SDPRY) ;List Provider Array
"RTN","SDCO3",73,0)
 ; Input  -- SDPRY     Provider Array Subscripted by a Number
"RTN","SDCO3",74,0)
 ; Output -- List Provider Array
"RTN","SDCO3",75,0)
 N I
"RTN","SDCO3",76,0)
 W !
"RTN","SDCO3",77,0)
 S I=0 F  S I=$O(SDPRY(I)) Q:'I  W !?2,I,"  ",$$PR^SDCO31(+$P(SDPRY(I),"^",2))
"RTN","SDCO3",78,0)
 Q
"RTN","SDCO3",79,0)
 ;
"RTN","SDCO3",80,0)
EDT(SDPRI) ;Edit Outpatient Provider
"RTN","SDCO3",81,0)
 ; Input  -- SDPRI    Outpatient Provider file IEN
"RTN","SDCO3",82,0)
 ; Output -- Edit Outpatient Provider
"RTN","SDCO3",83,0)
 N DA,DIE,DR
"RTN","SDCO3",84,0)
 S DA=SDPRI,DIE="^SDD(409.44,",DR=".01" D ^DIE
"RTN","SDCO3",85,0)
EDTQ Q
"RTN","SDCO3",86,0)
 ;
"RTN","SDCO3",87,0)
ADD(SDOE,SDPRDF) ;Add Outpatient Provider
"RTN","SDCO3",88,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO3",89,0)
 ;           SDPRDF    Default Provider in External format  [Optional]
"RTN","SDCO3",90,0)
 ; Output -- Add Outpatient Provider
"RTN","SDCO3",91,0)
 N DTOUT,DUOUT,SDPRI,X,Y
"RTN","SDCO3",92,0)
NXT S DIC("A")=$S('$G(SDPRI):"Select",1:"Next")_" Provider: "
"RTN","SDCO3",93,0)
 I $G(SDPRDF)]"",'$O(^SDD(409.44,"AO",SDOE,0)) S DIC("B")=SDPRDF
"RTN","SDCO3",94,0)
 S DIC("S")="I $$SCREEN^DGPMDD(Y)"
"RTN","SDCO3",95,0)
 S DIC="^VA(200,",DIC(0)="AEMQ"
"RTN","SDCO3",96,0)
 W:'$G(SDPRI) ! D ^DIC K DIC G ADDQ:Y<0
"RTN","SDCO3",97,0)
 I $D(^SDD(409.44,"AO",SDOE,+Y)) W !!,*7,$P(Y,"^",2)," is already a provider.",! G NXT
"RTN","SDCO3",98,0)
 S SDPRI=$$NEW(+Y,SDOE) G NXT
"RTN","SDCO3",99,0)
ADDQ Q
"RTN","SDCO3",100,0)
 ;
"RTN","SDCO3",101,0)
NEW(SDNPI,SDOE,TYPE) ;Add a New Outpatient Provider
"RTN","SDCO3",102,0)
 ; Input  -- SDNPI    New Person file IEN
"RTN","SDCO3",103,0)
 ;           SDOE     Outpatient Encounter file IEN
"RTN","SDCO3",104,0)
 ;           TYPE     Provider type
"RTN","SDCO3",105,0)
 ; Output -- Outpatient Provider file IEN
"RTN","SDCO3",106,0)
 N DA,DD,DIC,DIK,DINUM,DLAYGO,DO,SDPRI,X,Y
"RTN","SDCO3",107,0)
 S X=SDNPI,(DIC,DIK)="^SDD(409.44,",DIC(0)="L",DLAYGO=409.44
"RTN","SDCO3",108,0)
 D FILE^DICN S SDPRI=+Y
"RTN","SDCO3",109,0)
 I '$D(TYPE) S TYPE=""
"RTN","SDCO3",110,0)
 I TYPE=0 S TYPE=""
"RTN","SDCO3",111,0)
 I SDPRI>0 L +^SDD(409.44,SDPRI) S $P(^SDD(409.44,SDPRI,0),"^",2,3)=SDOE_"^"_TYPE,DA=SDPRI D IX1^DIK L -^SDD(409.44,SDPRI)
"RTN","SDCO3",112,0)
NEWQ Q SDPRI
"RTN","SDCO3",113,0)
 ;
"RTN","SDCO3",114,0)
EDIT(SDNPI,SDOE,TYPE) ;edits the outpatient provider
"RTN","SDCO3",115,0)
 ; Input -- SDNPI   New Person file IEN
"RTN","SDCO3",116,0)
 ;          SDOE    Outpatient Encounter file IEN
"RTN","SDCO3",117,0)
 ;          TYPE    Provider type
"RTN","SDCO3",118,0)
 ; Output -- Outpatient Provider file IEN
"RTN","SDCO3",119,0)
 N DA,DR,DIE
"RTN","SDCO3",120,0)
 S DA=$O(^SDD(409.44,"AO",SDOE,SDNPI,""))
"RTN","SDCO3",121,0)
 G OLDQ:'DA
"RTN","SDCO3",122,0)
 I TYPE=0 S TYPE="@"
"RTN","SDCO3",123,0)
 S DIE="^SDD(409.44,",DR=".03///"_TYPE
"RTN","SDCO3",124,0)
 D ^DIE
"RTN","SDCO3",125,0)
OLDQ Q DA
"RTN","SDCO4")
0^37^B19224412
"RTN","SDCO4",1,0)
SDCO4 ;ALB/RMO - Diagnosis - Check Out;08 DEC 1992 4:05 pm
"RTN","SDCO4",2,0)
 ;;5.3;Scheduling;**32,27,44**;08/13/93
"RTN","SDCO4",3,0)
 ;
"RTN","SDCO4",4,0)
EN ;Entry point for SDCO DIAGNOSIS protocol
"RTN","SDCO4",5,0)
 ; Input  -- SDOE, SDCOHDL
"RTN","SDCO4",6,0)
 N SDCL,SDCOMF,SDI,SDOE0,SDDXDF,SDSELY
"RTN","SDCO4",7,0)
 S VALMBCK=""
"RTN","SDCO4",8,0)
 ;-- if PCE pass control, quit
"RTN","SDCO4",9,0)
 I $$NEW^SDPCE($P($G(^SCE(+SDOE,0)),U)) D  Q
"RTN","SDCO4",10,0)
 . N SDVISIT,SDHL
"RTN","SDCO4",11,0)
 . S SDVISIT=$P($G(^SCE(+SDOE,0)),U,5)
"RTN","SDCO4",12,0)
 . S X=$$INTV^PXAPI("POV","SD","PIMS",SDVISIT)
"RTN","SDCO4",13,0)
 . D BLD^SDCO S VALMBCK="R"
"RTN","SDCO4",14,0)
 ;
"RTN","SDCO4",15,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDCL=+$P(SDOE0,"^",4)
"RTN","SDCO4",16,0)
 I SDCL S SDDXDF=$$DXDEF^SDCO41(SDCL) D MSG^VALM10("Default Diagnosis: "_$S(SDDXDF="":"None",1:$P(SDDXDF,"^")_"  "_$P(SDDXDF,"^",2)))
"RTN","SDCO4",17,0)
 D EN^SDCOUR(XQORNOD(0),"DX","A","Add",.SDSELY) G Q:$D(SDSELY("^"))!($D(SDSELY("ERR")))
"RTN","SDCO4",18,0)
 D FULL^VALM1
"RTN","SDCO4",19,0)
 I '$D(SDSELY)!($D(SDSELY("Add"))) D DXHLP^SDCO41(SDCL):SDCL,ADD(SDOE,$P($G(SDDXDF),"^"))
"RTN","SDCO4",20,0)
 S SDI=0 F  S SDI=$O(SDSELY(SDI)) Q:'SDI  D
"RTN","SDCO4",21,0)
 .N SDLINE,SDDXI
"RTN","SDCO4",22,0)
 .S SDLINE=+$O(^TMP("SDCOIDX",$J,"DX",SDI,0)),SDDXI=+$G(^(SDLINE))
"RTN","SDCO4",23,0)
 .W !!,$E($G(^TMP("SDCO",$J,SDLINE,0)),42,80)
"RTN","SDCO4",24,0)
 .D EDT(SDDXI)
"RTN","SDCO4",25,0)
 D EN^SDCOM(SDOE,1,SDCOHDL,.SDCOMF)
"RTN","SDCO4",26,0)
 D BLD^SDCO S VALMBCK="R"
"RTN","SDCO4",27,0)
Q S VALMSG="" Q
"RTN","SDCO4",28,0)
 ;
"RTN","SDCO4",29,0)
ASK(SDOE,SDDXHDL,SDCOQUIT) ;Ask Outpatient Diagnoses
"RTN","SDCO4",30,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO4",31,0)
 ;           SDDXHDL   Diagnosis Event Handle  [Optional]
"RTN","SDCO4",32,0)
 ; Output -- SDCOQUIT  User entered '^' or timeout
"RTN","SDCO4",33,0)
 N IOINHI,IOINORM,SDCL,SDCNT,SDDXDF,SDDXY,SDEVTF,SDOE0,SDSEL,X
"RTN","SDCO4",34,0)
 S X="IOINHI;IOINORM" D ENDR^%ZISS
"RTN","SDCO4",35,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDCL=+$P(SDOE0,"^",4)
"RTN","SDCO4",36,0)
 W !!,"--- ",IOINHI,"Diagnosis",IOINORM," --- [",$S($$DXASK^SDCO4(SDOE)=1:IOINHI_"Required"_IOINORM,1:"Not Required"),"]"
"RTN","SDCO4",37,0)
 I '$G(SDDXHDL) N SDATA,SDDXHDL S SDEVTF=1 D EVT^SDCOU1(SDOE,"BEFORE",.SDDXHDL,.SDATA)
"RTN","SDCO4",38,0)
 I SDCL S SDDXDF=$$DXDEF^SDCO41(SDCL)
"RTN","SDCO4",39,0)
 S SDSEL="Add"
"RTN","SDCO4",40,0)
 D SET(SDOE)
"RTN","SDCO4",41,0)
 I $D(SDDXY) D LIST(.SDDXY) S SDSEL=$$ASK^SDCOUR(SDCNT,"A")
"RTN","SDCO4",42,0)
 I SDSEL["^"!(SDSEL["Return") S:SDSEL["^" SDCOQUIT="" G ASKQ
"RTN","SDCO4",43,0)
 I SDSEL="Add" D DXHLP^SDCO41(SDCL):SDCL,ADD(SDOE,$G(SDDXDF))
"RTN","SDCO4",44,0)
 D EDT(+$G(SDDXY(+SDSEL))):SDSEL
"RTN","SDCO4",45,0)
 I $G(SDEVTF) D EVT^SDCOU1(SDOE,"AFTER",SDDXHDL,.SDATA)
"RTN","SDCO4",46,0)
ASKQ Q
"RTN","SDCO4",47,0)
 ;
"RTN","SDCO4",48,0)
DXASK(SDOE) ;Ask Diagnosis on Check Out
"RTN","SDCO4",49,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO4",50,0)
 ; Output --  0=No, 1=Yes/Required, 2=Yes/Not Required
"RTN","SDCO4",51,0)
 N SDCL,SDOE0,SDORG,Y
"RTN","SDCO4",52,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDCL=+$P(SDOE0,"^",4),SDORG=+$P(SDOE0,"^",8)
"RTN","SDCO4",53,0)
 I $$REQ^SDM1A(+SDOE0)'="CO" G DXASKQ
"RTN","SDCO4",54,0)
 I $$OCASN(SDOE) G DXASKQ
"RTN","SDCO4",55,0)
 I SDORG=1,'$$CLINIC^SDAMU(SDCL) G DXASKQ
"RTN","SDCO4",56,0)
 I "^1^2^"[("^"_SDORG_"^"),$$INP^SDAM2(+$P(SDOE0,"^",2),+SDOE0)="I" G DXASKQ
"RTN","SDCO4",57,0)
 I SDCL S Y=+$P($G(^SC(SDCL,0)),"^",27) G DXASKQ
"RTN","SDCO4",58,0)
 I SDORG=3 S Y=+$P($G(^DG(43,1,"SCLR")),"^",20)
"RTN","SDCO4",59,0)
DXASKQ Q +$G(Y)
"RTN","SDCO4",60,0)
 ;
"RTN","SDCO4",61,0)
OCASN(SDOE) ;determines if this is an occasion of service.
"RTN","SDCO4",62,0)
 ;  returns a 1 if and occasion 0 if not
"RTN","SDCO4",63,0)
 ;
"RTN","SDCO4",64,0)
 N ARRAY,ANS
"RTN","SDCO4",65,0)
 S ARRAY="PR"
"RTN","SDCO4",66,0)
 D PROC^SCDXUTL0(SDOE,ARRAY)
"RTN","SDCO4",67,0)
 S ANS=$$CHKOCC^SCMSVDG1(ARRAY)
"RTN","SDCO4",68,0)
 K @ARRAY
"RTN","SDCO4",69,0)
 Q +$G(ANS)
"RTN","SDCO4",70,0)
 ;
"RTN","SDCO4",71,0)
SET(SDOE) ;Set-up Diagnosis Array for Outpatient Encounter
"RTN","SDCO4",72,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO4",73,0)
 ; Output -- SDDXY     Diagnosis Array Subscripted by a Number
"RTN","SDCO4",74,0)
 ;           SDCNT     Number of Array Entries
"RTN","SDCO4",75,0)
 N SDDXI,SDICDI
"RTN","SDCO4",76,0)
 K SDDXY
"RTN","SDCO4",77,0)
 S (SDCNT,SDICDI)=0
"RTN","SDCO4",78,0)
 F  S SDICDI=$O(^SDD(409.43,"AO",SDOE,SDICDI)) Q:'SDICDI  S SDDXI=+$O(^(SDICDI,0)) D
"RTN","SDCO4",79,0)
 .S SDCNT=SDCNT+1
"RTN","SDCO4",80,0)
 .S SDDXY(SDCNT)=SDDXI_"^"_SDICDI
"RTN","SDCO4",81,0)
SETQ Q
"RTN","SDCO4",82,0)
 ;
"RTN","SDCO4",83,0)
LIST(SDDXY) ;List Diagnosis Array
"RTN","SDCO4",84,0)
 ; Input  -- SDDXY     Diagnosis Array Subscripted by a Number
"RTN","SDCO4",85,0)
 ; Output -- List Diagnosis Array
"RTN","SDCO4",86,0)
 N I,SDDXD
"RTN","SDCO4",87,0)
 W !
"RTN","SDCO4",88,0)
 S I=0 F  S I=$O(SDDXY(I)) Q:'I  S SDDXD=$$DX^SDCO41(+$P(SDDXY(I),"^",2)) W !?2,I,"  ",$P(SDDXD,"^"),?15,$P(SDDXD,"^",2)
"RTN","SDCO4",89,0)
 Q
"RTN","SDCO4",90,0)
 ;
"RTN","SDCO4",91,0)
EDT(SDDXI) ;Edit Outpatient Diagnosis
"RTN","SDCO4",92,0)
 ; Input  -- SDDXI    Outpatient Diagnosis file IEN
"RTN","SDCO4",93,0)
 ; Output -- Edit Outpatient Diagnosis
"RTN","SDCO4",94,0)
 N DA,DIE,DR,DIDEL
"RTN","SDCO4",95,0)
 S DA=SDDXI,DIE="^SDD(409.43,",DR=".01",DIDEL=409.43 D ^DIE K DIDEL
"RTN","SDCO4",96,0)
EDTQ Q
"RTN","SDCO4",97,0)
 ;
"RTN","SDCO4",98,0)
ADD(SDOE,SDDXDF) ;Add Outpatient Diagnosis
"RTN","SDCO4",99,0)
 ; Input  -- SDOE      Outpatient Encounter IEN
"RTN","SDCO4",100,0)
 ;           SDDXDF    Default Diagnosis  [Optional]
"RTN","SDCO4",101,0)
 ; Output -- Add Outpatient Diagnosis
"RTN","SDCO4",102,0)
 N DTOUT,DUOUT,SDDXI,X,Y
"RTN","SDCO4",103,0)
NXT S DIC("A")=$S('$G(SDDXI):"Select",1:"Next")_" Diagnosis: "
"RTN","SDCO4",104,0)
 I $G(SDDXDF)]"",'$O(^SDD(409.43,"AO",SDOE,0)) S DIC("B")=$P(SDDXDF,"^")
"RTN","SDCO4",105,0)
 S DIC("S")="I '$P(^(0),U,9)"
"RTN","SDCO4",106,0)
 S DIC="^ICD9(",DIC(0)="AEMQ",X=""
"RTN","SDCO4",107,0)
 W:'$G(SDDXI) ! D ^DIC K DIC G ADDQ:Y<0
"RTN","SDCO4",108,0)
 I $D(^SDD(409.43,"AO",SDOE,+Y)) W !!,*7,$P(Y,"^",2)," is already a diagnosis.",! G NXT
"RTN","SDCO4",109,0)
 S SDDXI=$$NEW(+Y,SDOE) G NXT
"RTN","SDCO4",110,0)
ADDQ Q
"RTN","SDCO4",111,0)
 ;
"RTN","SDCO4",112,0)
NEW(SDICDI,SDOE,RANK) ;Add a New Outpatient Diagnosis
"RTN","SDCO4",113,0)
 ; Input  -- SDICDI   ICD Diagnosis file IEN
"RTN","SDCO4",114,0)
 ;           SDOE     Outpatient Encounter file IEN
"RTN","SDCO4",115,0)
 ;           RANK     optional ranking of DX
"RTN","SDCO4",116,0)
 ; Output -- Outpatient Diagnosis file IEN
"RTN","SDCO4",117,0)
 N DA,DD,DIC,DIK,DINUM,DLAYGO,DO,SDDXI,X,Y
"RTN","SDCO4",118,0)
 S X=SDICDI,(DIC,DIK)="^SDD(409.43,",DIC(0)="L",DLAYGO=409.43
"RTN","SDCO4",119,0)
 D FILE^DICN S SDDXI=+Y
"RTN","SDCO4",120,0)
 I SDDXI>0 L +^SDD(409.43,SDDXI) S $P(^SDD(409.43,SDDXI,0),"^",2)=SDOE,$P(^(0),"^",3)=$S($G(RANK):RANK,1:""),DA=SDDXI D IX1^DIK L -^SDD(409.43,SDDXI)
"RTN","SDCO4",121,0)
NEWQ Q SDDXI
"RTN","SDCO4",122,0)
 ;
"RTN","SDCO4",123,0)
EDIT(IEN,RANK) ;edits the ranking of diags already in the file.
"RTN","SDCO4",124,0)
 ;Input -- IEN the internal entry number of the diagnosis
"RTN","SDCO4",125,0)
 ;      -- RANK the ranking of the diagnosis
"RTN","SDCO4",126,0)
 ;
"RTN","SDCO4",127,0)
 I '$D(^SDD(409.43,IEN,0)) G EDITQ
"RTN","SDCO4",128,0)
 S DA=IEN,DIE="^SDD(409.43,",DR=".03///"_$S($G(RANK):RANK,1:"@")
"RTN","SDCO4",129,0)
 D ^DIE
"RTN","SDCO4",130,0)
EDITQ Q
"RTN","SDCODEL")
0^38^B15015454
"RTN","SDCODEL",1,0)
SDCODEL ;ALB/RMO - Delete - Check Out; 27 APR 1993 3:00 pm
"RTN","SDCODEL",2,0)
 ;;5.3;Scheduling;**20,27,44**;Aug 13, 1993
"RTN","SDCODEL",3,0)
 ;
"RTN","SDCODEL",4,0)
EN(SDOE,SDMOD,SDELHDL) ;Delete Check Out
"RTN","SDCODEL",5,0)
 ; Input  -- SDOE     Outpatient Encounter file IEN
"RTN","SDCODEL",6,0)
 ;           SDMOD    1=Interactive and 0=Non-interactive
"RTN","SDCODEL",7,0)
 ;           SDELHDL  Check Out Deletion Handle  [Optional]
"RTN","SDCODEL",8,0)
 ; Output -- Delete Check Out
"RTN","SDCODEL",9,0)
 N DA,DFN,DE,DIE,DR,SDCL,SDDA,SDEVTF,SDOE0,SDOEP,SDORG,SDT,SDVSAV,SDVFLG
"RTN","SDCODEL",10,0)
 D SET(SDOE,.SDOE0,.SDT,.DFN,.SDCL,.SDORG,.SDDA)
"RTN","SDCODEL",11,0)
 S SDVSAV=$P(SDOE0,U,5)
"RTN","SDCODEL",12,0)
 I $$NEW^SDPCE($P($G(^SCE(+SDOE,0)),U)) S X=$$DELVFILE^PXAPI("ALL",$P($G(^SCE(SDOE,0)),U,5),"","","",1),SDVFLG=1
"RTN","SDCODEL",13,0)
 I '$G(SDELHDL) N SDATA,SDELHDL S SDEVTF=1 D EVT^SDCOU1(SDOE,"BEFORE",.SDELHDL,.SDATA)
"RTN","SDCODEL",14,0)
 I $G(SDMOD) W !!,">>> Deleting check out information..."
"RTN","SDCODEL",15,0)
 I "^1^3^"[("^"_SDORG_"^") D CHLD(SDOE,SDMOD)
"RTN","SDCODEL",16,0)
 I SDORG=1 D
"RTN","SDCODEL",17,0)
 .S DA(1)=DFN,DA=SDT,DIE="^DPT("_DFN_",""S"",",DR="21///@" D ^DIE
"RTN","SDCODEL",18,0)
 .I $G(SDMOD) W !?3,"...deleting check out date/time"
"RTN","SDCODEL",19,0)
 .S DR="303///@" D DIE^SDCO1(SDCL,SDT,+SDDA,DR)
"RTN","SDCODEL",20,0)
 I SDORG=2 D
"RTN","SDCODEL",21,0)
 .N LP,LP1,DATE
"RTN","SDCODEL",22,0)
 .S DATE=$$SDVDT^SCDXUTL($P(SDT,".",1),DFN)
"RTN","SDCODEL",23,0)
 .F LP=1:1 S LP1=$P(SDDA,":",LP) Q:'LP1  D
"RTN","SDCODEL",24,0)
 ..S DA(1)=DATE,DA=+SDDA,DIE="^SDV("_DATE_",""CS"",",DR="8///@" D ^DIE
"RTN","SDCODEL",25,0)
 ..Q
"RTN","SDCODEL",26,0)
 I SDORG=3 D
"RTN","SDCODEL",27,0)
 .S DA(1)=DFN,DA=+SDDA,DIE="^DPT("_DFN_",""DIS"",",DR="18///@" D ^DIE
"RTN","SDCODEL",28,0)
 D CO(SDOE,SDMOD)
"RTN","SDCODEL",29,0)
 D OE(SDOE,SDMOD)
"RTN","SDCODEL",30,0)
 I $G(SDMOD) W !,">>> done."
"RTN","SDCODEL",31,0)
 I $G(SDEVTF) D EVT^SDCOU1(SDOE,"AFTER",SDELHDL,.SDATA,SDOE0)
"RTN","SDCODEL",32,0)
 I $G(SDVFLG) D DEAD^PXUTLSTP(SDVSAV)
"RTN","SDCODEL",33,0)
ENQ Q
"RTN","SDCODEL",34,0)
 ;
"RTN","SDCODEL",35,0)
CHLD(SDOEP,SDMOD) ;Delete Children
"RTN","SDCODEL",36,0)
 N DFN,SDCL,SDDA,SDOE0,SDOEC,SDORG,SDT
"RTN","SDCODEL",37,0)
 S SDOEC=0
"RTN","SDCODEL",38,0)
 F  S SDOEC=$O(^SCE("APAR",SDOEP,SDOEC)) Q:'SDOEC  D
"RTN","SDCODEL",39,0)
 .D SET(SDOEC,.SDOE0,.SDT,.DFN,.SDCL,.SDORG,.SDDA)
"RTN","SDCODEL",40,0)
 .I SDORG=2 D AE(DFN,SDT,SDDA,SDOEP,SDMOD)
"RTN","SDCODEL",41,0)
 .D OE(SDOEC,SDMOD)
"RTN","SDCODEL",42,0)
 Q
"RTN","SDCODEL",43,0)
 ;
"RTN","SDCODEL",44,0)
SET(SDOE,SDOE0,SDT,DFN,SDCL,SDORG,SDDA) ;Set Variables
"RTN","SDCODEL",45,0)
 S SDOE0=$G(^SCE(+SDOE,0)),SDT=+SDOE0,DFN=+$P(SDOE0,"^",2),SDCL=+$P(SDOE0,"^",4),SDORG=+$P(SDOE0,"^",8),SDDA=$P(SDOE0,"^",9)
"RTN","SDCODEL",46,0)
 Q
"RTN","SDCODEL",47,0)
 ;
"RTN","SDCODEL",48,0)
AE(DFN,SDT,SDDA,SDOEP,SDMOD) ;Delete Add/Edit
"RTN","SDCODEL",49,0)
 N DA,DIK,SD0,SDSCD
"RTN","SDCODEL",50,0)
 N SDAEHDL S SDAEHDL=$$HANDLE^SDAMEVT(2)
"RTN","SDCODEL",51,0)
 S SDT=$$SDVDT^SCDXUTL($P(SDT,".",1),DFN)
"RTN","SDCODEL",52,0)
 D BEFORE^SDAMEVT2(DFN,SDT,SDAEHDL)
"RTN","SDCODEL",53,0)
 I $G(SDMOD) D
"RTN","SDCODEL",54,0)
 .S SD0=$G(^SDV(SDT,"CS",+SDDA,0))
"RTN","SDCODEL",55,0)
 .S SDSCD=+$P($G(^DIC(40.7,+SD0,0)),"^",2)
"RTN","SDCODEL",56,0)
 .I SDSCD=900 S SDSCD=+$P($G(^DIC(40.7,+$P($G(^SC(+$P(SD0,"^",3),0)),"^",7),0)),"^",2)
"RTN","SDCODEL",57,0)
 .W !?3,"...deleting associated stop code ",SDSCD
"RTN","SDCODEL",58,0)
 D AE^SDAMEVT1(SDT,+SDDA,"2^deleted")
"RTN","SDCODEL",59,0)
 N LP,LP1
"RTN","SDCODEL",60,0)
 F LP=1:1 S LP1=$P(SDDA,":",LP) Q:'LP1  DO
"RTN","SDCODEL",61,0)
 .S DA(1)=SDT,DIK="^SDV("_DA(1)_",""CS"",",DA=LP1 D ^DIK
"RTN","SDCODEL",62,0)
 I $O(^SDV(SDT,"CS",0))'>0 D
"RTN","SDCODEL",63,0)
 .N DA,DIK
"RTN","SDCODEL",64,0)
 .S DA=SDT,DIK="^SDV(" D ^DIK
"RTN","SDCODEL",65,0)
 .I $G(SDMOD) W !?3,"...deleting entire add/edit entry for ",$$FTIME^VALM1(SDT)
"RTN","SDCODEL",66,0)
 D EVT^SDAMEVT2(DFN,SDT,7,SDAEHDL,SDOEP)
"RTN","SDCODEL",67,0)
 Q
"RTN","SDCODEL",68,0)
 ;
"RTN","SDCODEL",69,0)
CO(SDOE,SDMOD) ;Delete Classification, Provider and Diagnosis
"RTN","SDCODEL",70,0)
 N DA,DIK,SDFL,SDI
"RTN","SDCODEL",71,0)
 I $P($G(^SCE(SDOE,0)),"^",6) G COQ
"RTN","SDCODEL",72,0)
 I $O(^SDD(409.42,"AO",SDOE,0))>0 D
"RTN","SDCODEL",73,0)
 .I $G(SDMOD) W !?3,"...deleting classifications"
"RTN","SDCODEL",74,0)
 .D DEL(SDOE,409.42)
"RTN","SDCODEL",75,0)
 I $O(^SDD(409.43,"AO",SDOE,0))>0 D
"RTN","SDCODEL",76,0)
 .I $G(SDMOD) W !?3,"...deleting diagnoses"
"RTN","SDCODEL",77,0)
 .D DEL(SDOE,409.43)
"RTN","SDCODEL",78,0)
 I $O(^SDD(409.44,"AO",SDOE,0))>0 D
"RTN","SDCODEL",79,0)
 .I $G(SDMOD) W !?3,"...deleting providers"
"RTN","SDCODEL",80,0)
 .D DEL(SDOE,409.44)
"RTN","SDCODEL",81,0)
COQ Q
"RTN","SDCODEL",82,0)
 ;
"RTN","SDCODEL",83,0)
DEL(SDOE,SDFL) ;Delete Classification, Provider and Diagnosis
"RTN","SDCODEL",84,0)
 N DA,DIK,SDI
"RTN","SDCODEL",85,0)
 S DIK="^SDD("_SDFL_",",SDI=0
"RTN","SDCODEL",86,0)
 F  S SDI=$O(^SDD(SDFL,"AO",SDOE,SDI)) Q:'SDI  S DA=+$O(^(SDI,0)) D ^DIK
"RTN","SDCODEL",87,0)
 Q
"RTN","SDCODEL",88,0)
 ;
"RTN","SDCODEL",89,0)
OE(SDOE,SDMOD) ;Delete Outpatient Encounter
"RTN","SDCODEL",90,0)
 N DA,DIK,SDVSIT,SDORG
"RTN","SDCODEL",91,0)
 S SDVSIT=$P($G(^SCE(SDOE,0)),U,5),SDORG=$P($G(^SCE(SDOE,0)),U,8)
"RTN","SDCODEL",92,0)
 S DA=SDOE,DIK="^SCE(" D ^DIK
"RTN","SDCODEL",93,0)
 I $$NEW^SDPCE($P($G(^SCE(+SDOE,0)),U)),SDORG=3 S X=$$DELVFILE^PXAPI("ALL",SDVSIT,"","","",1)
"RTN","SDCODEL",94,0)
 Q
"RTN","SDCODEL",95,0)
 ;
"RTN","SDCODEL",96,0)
COMDT(SDOE,SDMOD) ;Delete Check Out Process Completion Date
"RTN","SDCODEL",97,0)
 N DA,DE,DIE,DQ,DR
"RTN","SDCODEL",98,0)
 I $G(SDMOD) W !?3,"...deleting check out process completion date"
"RTN","SDCODEL",99,0)
 S DA=SDOE,DIE="^SCE(",DR=".07///@" D ^DIE
"RTN","SDCODEL",100,0)
 Q
"RTN","SDM")
0^39^B30637215
"RTN","SDM",1,0)
SDM ;SF/GFT,ALB/BOK - MAKE AN APPOINTMENT ; 14 SEP 84  9:38 am
"RTN","SDM",2,0)
 ;;5.3;Scheduling;**5,32,38,41,44**;AUG 13, 1993
"RTN","SDM",3,0)
 ;                                           If defined...
"RTN","SDM",4,0)
 ; appt mgt vars:  SDFN := DFN of patient....will not be asked
"RTN","SDM",5,0)
 ;                SDCLN := ifn of clinic.....will not be asked    
"RTN","SDM",6,0)
 ;              SDAMERR := returned if error occurs
"RTN","SDM",7,0)
 ; 
"RTN","SDM",8,0)
 S:'$D(SDMM) SDMM=0
"RTN","SDM",9,0)
EN1 L  W !! D I^SDUTL I '$D(SDCLN) S DIC="^SC(",DIC(0)="AEMZQ",DIC("A")="Select CLINIC: ",DIC("S")="I $P(^(0),U,3)=""C""" D ^DIC K DIC G:Y<0!'$D(^("SL")) END
"RTN","SDM",10,0)
 K SDAPTYP,SDIN,SDRE,SDXXX S:$D(SDCLN) Y=+SDCLN
"RTN","SDM",11,0)
 I $D(^SC(+Y,"I")) S SDIN=+^("I"),SDRE=+$P(^("I"),U,2)
"RTN","SDM",12,0)
 K SDINA I $D(SDIN),SDIN S SDINA=SDIN K SDIN
"RTN","SDM",13,0)
 I $D(SD),$D(SC),+Y'=+SC K SD
"RTN","SDM",14,0)
 S SL=^SC(+Y,"SL"),X=$P(SL,U,3),STARTDAY=$S(X:X,1:8),SC=Y,SB=STARTDAY-1/100,X=$P(SL,U,6),HSI=$S(X=1:X,X:X,1:4),SI=$S(X="":4,X<3:4,X:X,1:4),STR="#@!$* XXWVUTSRQPONMLKJIHGFEDCBA0123456789jklmnopqrstuvwxyz",SDDIF=$S(HSI<3:8/HSI,1:2) K Y
"RTN","SDM",15,0)
 I $D(^SC(+SC,"SDPROT")),$P(^("SDPROT"),U)="Y",'$D(^SC(+SC,"SDPRIV",DUZ)) W !,*7,"Access to this clinic is prohibited!!",!,"Only users with a special code may access this clinic",*7 S:$D(SDCLN) SDAMERR="" G END:$D(SDCLN),SDM
"RTN","SDM",16,0)
 D CS^SDM1A S SDW="",WY="Y"
"RTN","SDM",17,0)
 I '$D(ORACTION),'$D(SDFN) S (DIC,DIE)="^DPT(",DIC(0)="AQZME" D ^DIC S DFN=+Y G:Y<0 END:$D(SDCLN),^SDM0:X[U,SDM
"RTN","SDM",18,0)
 S:$D(SDFN) DFN=SDFN
"RTN","SDM",19,0)
 I $D(^DPT(DFN,.35)),$P(^(.35),U)]"" W !?10,*7,"PATIENT HAS DIED." S:$D(SDFN) SDAMERR="" G END:$D(SDFN),SDM
"RTN","SDM",20,0)
 D ^SDM4 I $S('$D(COLLAT):1,COLLAT=7:1,1:0) G:$D(SDCLN) END G SDM
"RTN","SDM",21,0)
 K SDXXX D EN G END:$D(SDCLN),SDM
"RTN","SDM",22,0)
EN K SDMLT1 W:$P(VAEL(9),U,2)]"" !!,?15,"MEANS TEST STATUS: ",$P(VAEL(9),U,2),!
"RTN","SDM",23,0)
 S Y=DFN,Y(0)=^DPT(DFN,0) I VADM(7)]"" W !?3,*7,VADM(7)
"RTN","SDM",24,0)
 I $D(^DGS(41.1,"B",DFN)) F I=0:0 S I=$N(^DGS(41.1,"B",DFN,I)) Q:I'>0  I $P(^DGS(41.1,I,0),U,2)'<DT&('$P(^DGS(41.1,I,0),U,13)) W !,"SCHEDULED FOR ADMISSION ON " S Y=$P(^(0),U,2) D DT^SDM0
"RTN","SDM",25,0)
PEND W:$N(^DPT(DFN,"S",DT))'>DT !,"NO PENDING APPOINTMENTS" I $N(^DPT(DFN,"S",DT))>DT R !,"DISPLAY PENDING APPOINTMENTS: NO//",X:DTIME S:X="^" SDMLT1=1 G END:X["^",HELP:"YN"'[X I X["Y" W $P("YES",X,2)
"RTN","SDM",26,0)
 I  F Y=DT:0 S Y=$N(^DPT(DFN,"S",Y)) Q:Y'>0  I "I"[$P(^(Y,0),U,2) D CHKSO W:$X>9 ! W ?11 D DT^SDM0 W ?32 S DA=+SSC W SDLN,$S($D(^SC(DA,0)):$P(^(0),U),1:"DELETED CLINIC "),COV,"  ",SDAT16
"RTN","SDM",27,0)
 ;Prompt for RACE if no value is currently on file
"RTN","SDM",28,0)
 S DA=DFN,DR=$S($P(^DPT(DFN,0),U,6)="":.06,1:"")
"RTN","SDM",29,0)
 I DR]"" S DIE="^DPT(" D ^DIE K DR
"RTN","SDM",30,0)
 S DA=DFN,DR=$S('$D(^DPT(DA,.11)):"[SDM1]",$P(^(.11),U)="":"[SDM1]",1:"")
"RTN","SDM",31,0)
 S DIE="^DPT(" D ^DIE:DR]"" K DR Q:$D(SDXXX)
"RTN","SDM",32,0)
E S Y=$P(SL,U,5)
"RTN","SDM",33,0)
 S SDW="" I $D(^DPT(DFN,.1)) S SDW=^(.1) W !,"NOTE - PATIENT IS NOW IN WARD "_SDW
"RTN","SDM",34,0)
 Q:$D(SDXXX)
"RTN","SDM",35,0)
EN2 F X=0:0 S X=$N(^DPT(DFN,"DE",X)) Q:'$D(^(X,0))  I ^(0)-SC=0!'(^(0)-Y) F XX=0:0 S XX=$N(^DPT(DFN,"DE",X,1,XX)) Q:XX<1  S SDDIS=$P(^(XX,0),U,3),SDPRCL=Y D WRT S Y=SDPRCL K SDPRCL G ^SDM0:'SDDIS
"RTN","SDM",36,0)
 W *7,!?9,"PATIENT NOT ENROLLED IN CLINIC!" S X=$S(VADM(5)["F":"ER",1:"IM") I '$D(^SC(+Y,0)) S Y=+SC
"RTN","SDM",37,0)
 S Y=$P(^SC(Y,0),U)
"RTN","SDM",38,0)
 ; SCRESTA = Array of pt's teams causing restricted consults
"RTN","SDM",39,0)
 N SCRESTA
"RTN","SDM",40,0)
 S SCREST=$$RESTPT^SCAPMCU4(DFN,DT,"SCRESTA")
"RTN","SDM",41,0)
 IF SCREST D
"RTN","SDM",42,0)
 .N SCTM
"RTN","SDM",43,0)
 . S SCCLNM=Y
"RTN","SDM",44,0)
 . W !,?5,"Patient has restricted consults due to team assignment(s):"
"RTN","SDM",45,0)
 .S SCTM=0
"RTN","SDM",46,0)
 .F  S SCTM=$O(SCRESTA(SCTM)) Q:'SCTM  W !,?10,SCRESTA(SCTM)
"RTN","SDM",47,0)
 IF SCREST&'$G(SCOKCONS) D  Q
"RTN","SDM",48,0)
 .W !,?5,"This patient may only be given appointments and enrolled in clinics via"
"RTN","SDM",49,0)
 .W !,?15,"Make Consult Appointment Option, and"
"RTN","SDM",50,0)
 .W !,?15,"Edit Clinic Enrollment Data option"
"RTN","SDM",51,0)
ENR S %="",DTOUT=0 W !?9,"WANT TO ENROLL H"_X_" IN "_Y D YN^DICN I '%,%Y]"" W !,"RESPOND YES (Y) OR NO (N)" G ENR
"RTN","SDM",52,0)
 Q:'DTOUT&(%<0)  G:(%-1) ASKC S SDY=Y
"RTN","SDM",53,0)
GETED D BEFORE^SCMCEV3(DFN)
"RTN","SDM",54,0)
 R !,?9,"DATE OF ENROLLMENT: NOW// ",X:DTIME Q:X["^"  S:X="" X="NOW" S %DT="EXT" D ^%DT G:Y<0 GETED S HEY=Y
"RTN","SDM",55,0)
 S DA=DFN,DR="3///"_SDY,(DIE,DIC)="^DPT(",DP=2,DR(2,2.001)=".01///"_SDY_";1///"_HEY,DR(3,2.011)=".01///"_HEY_";S DIE(""NO^"")="""";1" D ^DIE
"RTN","SDM",56,0)
 D MAIL^SCMCCON(DFN,.SCCLNM,1,DT,"SCRESTA")
"RTN","SDM",57,0)
 N TMPY
"RTN","SDM",58,0)
 I $D(Y) S TMPY=Y
"RTN","SDM",59,0)
 K DR,DP,SCCLNM,SCREST
"RTN","SDM",60,0)
 D AFTER^SCMCEV3(DFN),INVOKE^SCMCEV3(DFN)
"RTN","SDM",61,0)
 I $D(TMPY) S Y=TMPY
"RTN","SDM",62,0)
 I '$D(TMPY) K Y
"RTN","SDM",63,0)
 K TMPY
"RTN","SDM",64,0)
 G ^SDM0:'$D(Y)
"RTN","SDM",65,0)
 Q
"RTN","SDM",66,0)
 ;
"RTN","SDM",67,0)
ASKC S %="" W !,"WANT TO SCHEDULE PATIENT FOR CONSULT" D YN^DICN Q:%<0  I '% W !,"REPLY YES (Y) OR NO (N)" G ASKC
"RTN","SDM",68,0)
 Q:(%-1)  D:$G(SCREST) MAIL^SCMCCON(DFN,.SCCLNM,2,DT,"SCRESTA") K DR,SCREST,SCCLNM G ^SDM0
"RTN","SDM",69,0)
CHKSO S COV=$S($P(^DPT(DFN,"S",Y,0),U,11)=1:" (COLLATERAL)",1:""),HY=Y,SSC=^(0),SDAT16=$S($D(^SD(409.1,+$P(SSC,U,16),0)):$P(^(0),U),1:"")
"RTN","SDM",70,0)
 F SDJ=3,4,5 I $P(^DPT(DFN,"S",HY,0),U,SDJ)]"" S Y=$P(^(0),U,SDJ) W:$X>9 ! W ?10,"*" D DT^SDM0 W ?32,$S(SDJ=3:"LAB",SDJ=4:"XRAY",1:"EKG")
"RTN","SDM",71,0)
 S SDLN="" F J=0:0 S J=$N(^SC(+SSC,"S",HY,1,J)) Q:J<0  I $D(^(J,0)),+^(0)=DFN S SDLN="("_$P(^(0),U,2)_" MINUTES) " Q
"RTN","SDM",72,0)
 S Y=HY Q
"RTN","SDM",73,0)
END D KVAR^VADPT K SDAPTYP,SDSC,%,%DT,ASKC,COV,DA,DIC,DIE,DP,DR,HEY,HSI,HY,J,SB,SC,SDDIF,SDJ,SDLN,SD17,SDMAX,SDU,SDYC,SI,SL,SSC,STARTDAY,STR
"RTN","SDM",74,0)
 K WY,X,XX,Y,S,SD,SDAP16,SDEDT,SDTY,SM,SS,ST,ARG,CCX,CCXN,HX,I,PXR,SDINA,SDW,COLLAT,SDDIS I $D(SDMM) K:'SDMM SDMM
"RTN","SDM",75,0)
 I '$D(SDMLT) K SDMLT1
"RTN","SDM",76,0)
 Q
"RTN","SDM",77,0)
OERR S XQORQUIT=1 Q:'$D(ORVP)  S DFN=+ORVP G SDM
"RTN","SDM",78,0)
HELP W !,"YES - TO DISPLAY FUTURE APPOINTMENTS",!,"NO - FUTURE APPOINTMENTS NOT DISPLAYED" G PEND
"RTN","SDM",79,0)
WRT W !,$S('SDDIS:"CURRENT  ",1:"PREVIOUS "),"ENROLLMENT: ",$S($P(^DPT(DFN,"DE",X,1,XX,0),U,2)["O":"OPT",1:"AC") I SDDIS W ?41,"DISCHARGED FROM CLINIC: " S Y=SDDIS D DT^DIQ
"RTN","SDM",80,0)
 Q
"RTN","SDOPC")
0^40^B19092578
"RTN","SDOPC",1,0)
SDOPC ;ALB/BOK - GENERATE OPC FILE ;1/3/92  18:11
"RTN","SDOPC",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SDOPC",3,0)
 ;
"RTN","SDOPC",4,0)
CONT W !?10,"Do you want to continue" D YN^DICN I '% W !,"REPLY YES (Y) OR NO (N)" G CONT
"RTN","SDOPC",5,0)
 Q
"RTN","SDOPC",6,0)
1 W !!,"This option will generate OPC AMIS data for submission to Austin",!!
"RTN","SDOPC",7,0)
 K ^UTILITY($J) D DT^SDUTL W !,"The OPC AMIS file was last generated on: " S SDSCLR=$S($D(^DG(43,1,"SCLR")):^("SCLR"),1:""),Y=$P(SDSCLR,U,2) D DT^DIQ
"RTN","SDOPC",8,0)
 S SDSCLR=$S($D(^DG(43,1,"SCLR")):^("SCLR"),1:""),SDAPDT=$P(SDSCLR,U,9),SDVLR=$P(SDSCLR,U,10)-.1,SDMTID=$S('+$P(SDSCLR,U,11):2911001,1:$P(SDSCLR,U,11))-.1
"RTN","SDOPC",9,0)
 I '$P(SDSCLR,U,4) W !?19,"Date Range Generated: " S Y=$P(SDSCLR,U,7) D DT^DIQ W " to " S Y=$P(SDSCLR,U,8) D DT^DIQ
"RTN","SDOPC",10,0)
 I $P(SDSCLR,U,4) W !!,*7,"The OPC AMIS file is currently being regenerated from: " S Y=$P(SDSCLR,U,7) D DT^DIQ S Y=$P(SDSCLR,U,8) W !?34,"Generation is up to: " D DT^DIQ S %=2 D CONT I %'=1 D QUIT^SDOPC0 Q
"RTN","SDOPC",11,0)
DATE K %DT D DATE^SDUTL Q:POP
"RTN","SDOPC",12,0)
 I SDBD<SDVLR!(SDED<SDVLR) W !!,*7,"YOU CAN NOT REGENERATE OPC FIXED LENGTH RECORD TIME FRAMES.",!,"START AND END DATES MUST BE AFTER " S Y=SDVLR+.1 D DT^DIQ G DATE
"RTN","SDOPC",13,0)
 I SDED>2871000,SDBD<2871000 W !!,*7,"YOU CAN NOT REGENERATE THE 2-DIGIT OPC DATA!" G DATE
"RTN","SDOPC",14,0)
 S Y=$$FMDATE^SCDXUTL() I SDED'<Y!(SDBD'<Y) X ^DD("DD") W !!,*7,"YOU CAN NOT REGENERATE THE OPC DATA AFTER ",Y,"." G DATE
"RTN","SDOPC",15,0)
 D OPC^SDAMQ2(SDBD,SDED)
"RTN","SDOPC",16,0)
QUE S ION="",DGPGM="START^SDOPC",DGVAR="SDAPDT^SDBD^SDED^DUZ^SDMTID^SDVLR" D QUE^DGUTQ,QUIT^SDOPC0 Q
"RTN","SDOPC",17,0)
START D DT^SDUTL S SD00=$H,$P(^DG(43,1,"SCLR"),U,4)=1,$P(^("SCLR"),U,7)=SDBD,SDCT=0 D PURGE
"RTN","SDOPC",18,0)
 S SDVD=SDBD D SETDAT,CHK^SDAMQ2(SDBD,SDED,5)
"RTN","SDOPC",19,0)
 S (SDCNT,SDERRC)=0 D ^SDOPC1 F SDLOOP=1:1 S X1=SDVD,X2=1 D C^%DTC Q:X>SDED  S SDVD=X D SETDAT,^SDOPC1
"RTN","SDOPC",20,0)
 D BULL,UPD^SDAMQ1(SDBD,SDED,$$NOW^SDAMU,.06),QUIT^SDOPC0 Q
"RTN","SDOPC",21,0)
BULL ; -- send stat bulletin
"RTN","SDOPC",22,0)
 S Y=DT D DTS^SDUTL S ^UTILITY($J,"STAT",1,0)="RUN DATE           : "_Y,Y=SDBD D DTS^SDUTL S ^UTILITY($J,"STAT",2,0)="DATE RANGE SELECTED: "_Y_" - " S Y=$P(SDED,".") D DTS^SDUTL S ^UTILITY($J,"STAT",2,0)=^UTILITY($J,"STAT",2,0)_Y
"RTN","SDOPC",23,0)
 S ^UTILITY($J,"STAT",3,0)=" ",^UTILITY($J,"STAT",4,0)="TOTAL # OF VISITS GENERATED  : "_$J(SDCNT,6,0),^UTILITY($J,"STAT",5,0)="# OF VISITS WITH KNOWN ERRORS: "_$J(SDERRC,6,0)
"RTN","SDOPC",24,0)
 S X1=SD00,X=$H D ETIME^SDUTL S X1=$S(X1:X1,1:1),^UTILITY($J,"STAT",6,0)=" ",^UTILITY($J,"STAT",7,0)="ELAPSED RUN TIME             : "_X_" HRS. "_X1_" MINUTES"
"RTN","SDOPC",25,0)
 S XMSUB="GENERATE OPC FILE STATISTICS SUMMARY",XMDUZ=.5,XMTEXT="^UTILITY($J,""STAT"","
"RTN","SDOPC",26,0)
 D XMY^SDUTL2(+$P($G(^DG(43,1,"SCLR")),U,16)) ; use site specified mg
"RTN","SDOPC",27,0)
 D ^XMD K XMSUB,XMTEXT,XMY,XMDUZ
"RTN","SDOPC",28,0)
 S $P(^DG(43,1,"SCLR"),U,4)="",$P(^("SCLR"),U,2)=DT
"RTN","SDOPC",29,0)
 I $D(^UTILITY("SDBULL")) D ^SDOPC0
"RTN","SDOPC",30,0)
 Q
"RTN","SDOPC",31,0)
SETDAT S $P(^DG(43,1,"SCLR"),U,8)=SDVD Q
"RTN","SDOPC",32,0)
PURGE S SDREL=$S($D(^DG(43,1,"SCLR")):+$P(^("SCLR"),"^",3),1:0)
"RTN","SDOPC",33,0)
 F A=SDBD-.1:0 S A=$O(^SDASF("AVD",A)) Q:A'>0!(A>SDED)  F B=0:0 S B=$O(^SDASF("AVD",A,B)) Q:B'>0  I $D(^SDASF(B,1,A)) D KILL
"RTN","SDOPC",34,0)
 Q
"RTN","SDOPC",35,0)
KILL S SDS=$S('$D(^SDASF(B,1,A,"SUS")):"",1:$P(^("SUS"),"^",2)) I SDS,SDS'>SDREL K ^SDASF("AREL",SDS,B,A)
"RTN","SDOPC",36,0)
 I $S(SDS&(SDS'>SDREL):1,'SDS&('$D(^SDASF(B,1,A,"SUS"))):1,1:0) K ^SDASF(B,1,A),^SDASF("AVD",A,B) S:$D(^SDASF(B,1,0)) $P(^(0),"^",4)=$P(^(0),"^",4)-1 K:$S('$D(^(0)):1,$O(^(0))'>0:1,1:0) ^SDASF(B),^SDASF("B",B,B)
"RTN","SDOPC",37,0)
 I $D(^SDASE(B,"MSG",A,0)) F M=(A-.1):0 S M=$O(^SDASE(B,"MSG",M)) Q:'M!(M>(A+.1))  I $D(^(M,0)) S M1=$P(^(0),U) K ^(0),^SDASE(B,"MSG","B",M1,M)
"RTN","SDOPC",38,0)
 I '$O(^SDASE(B,"MSG",0)) K ^(0)
"RTN","SDOPC",39,0)
 I $O(^SDASE(B,1,0)) F M=0:0 S M=$O(^SDASE(B,1,M)) Q:'M  S A1=$P(^(M,0),U,4) I A1=A S DIK="^SDASE("_B_",1,",DA(1)=B,DA=M D ^DIK K DA,DIC,DIK
"RTN","SDOPC",40,0)
 I $D(^SDASE(B)) I '$O(^SDASE(B,1,0)) D K1 I '$O(^SDASE(B,"MSG",0)) D K2
"RTN","SDOPC",41,0)
 K SDS,M,M1 Q
"RTN","SDOPC",42,0)
K1 K ^SDASF("AVD",A,B) Q
"RTN","SDOPC",43,0)
K2 K ^SDASE(B),^SDASE("B",B) S L=$P(^SDASE(0),"^",4),$P(^SDASE(0),"^",4)=$S(L-1>0:L-1,1:0) K L Q
"RTN","SDOPCDEL")
0^41^B13308686
"RTN","SDOPCDEL",1,0)
SDOPCDEL ;ALBISC/TET - GENERATE/TRANSMIT OPC DELETE CODE SHEET ;7/10/91  11:40
"RTN","SDOPCDEL",2,0)
 ;;5.3;Scheduling;**20,44**;Aug 13, 1993
"RTN","SDOPCDEL",3,0)
 S SDMORE=0
"RTN","SDOPCDEL",4,0)
1 ;visit date read
"RTN","SDOPCDEL",5,0)
 I $$CLOSED^SCDXUTL(DT) S Y=$$CLOSEFM^SCDXUTL() D DD^%DT W !!,*7,"As of ",Y," workload correction information will automatically be sent to",!,"Austin.  There is no need to retransmit deleted information.",! Q
"RTN","SDOPCDEL",6,0)
 S X1=$$FMDATE^SCDXUTL,X2=-1 D C^%DTC
"RTN","SDOPCDEL",7,0)
 S DIR(0)="D^2881101:"_X_":EX",DIR("?")="^D HELP^%DTC",DIR("A")="VISIT DATE" S:SDMORE DIR("B")=SDVD1 D ^DIR K DIR G EXIT:$D(DIRUT) S SDVD=Y D DD^%DT S SDVD1=Y I SDMORE G CONT
"RTN","SDOPCDEL",8,0)
2 ;facility # or facility # and suffix
"RTN","SDOPCDEL",9,0)
 S DIR(0)="P^40.8:EQMZ",DIR("A")="STATION NUMBER" S:SDMORE DIR("B")=SDSTA D ^DIR K DIR G EXIT:$D(DIRUT)!(Y'>0)
"RTN","SDOPCDEL",10,0)
 S SDSTA=$P($$SITE^VASITE(SDVD,+Y),U,3)  I 'SDSTA W !,"Not a valid station number.",! G 2
"RTN","SDOPCDEL",11,0)
 S:$D(SDSTA) SDSTA1=SDSTA S SDSTA=$P(Y(0),U,2)
"RTN","SDOPCDEL",12,0)
 I SDMORE G CONT
"RTN","SDOPCDEL",13,0)
3 ;patient's ssn
"RTN","SDOPCDEL",14,0)
 S DIR(0)="P^2:EMZ",DIR("?")="Enter SSN or Patient's name",DIR("A")="SSN" S:SDMORE DIR("B")=SDSSN_PSEUDO D ^DIR K DIR G EXIT:$D(DIRUT)
"RTN","SDOPCDEL",15,0)
 S SDSSN=$P(Y(0),U,9),PSEUDO=$S($$FY^SDOPC5(SDVD)>94:$S($E(SDSSN,10)="P":$E(SDSSN,10),1:" "),1:"") G:$L(SDSSN)<9 EXIT S SDSSN=$S($L(SDSSN)=9:SDSSN,1:$E(SDSSN,1,9))
"RTN","SDOPCDEL",16,0)
 ;
"RTN","SDOPCDEL",17,0)
CONT ;Display edits and ask for re-edit
"RTN","SDOPCDEL",18,0)
 W !!,"You have entered the following information:",!,SDVD1,"   ",SDSTA_$S($L(SDSTA)=3:"  ",1:"")_"   ",SDSSN_PSEUDO
"RTN","SDOPCDEL",19,0)
 W !! S DIR("A")="Would you like to correct the above data",DIR("B")="NO",DIR(0)="Y" D ^DIR K DIR G EXIT:$D(DTOUT)!($D(DUOUT)),FILE:Y=0
"RTN","SDOPCDEL",20,0)
 S DIR(0)="S^1:VISIT DATE;2:STATION NUMBER;3:SSN;",DIR("A")="EDIT" D ^DIR G EXIT:$D(DIRUT) S SDMORE=1 G @Y
"RTN","SDOPCDEL",21,0)
 ;
"RTN","SDOPCDEL",22,0)
EXIT K PSEUDO,SDATE,SDFY,SDFY1,SDI,SDMORE,SDSP,SDSSN,SDSTA,SDSTA1,SDSTX,SDVD,SDVD1,SP,VAT,VATERR,VATNAME,X,XMDUZ,XMSUB,XMTEXT
"RTN","SDOPCDEL",23,0)
EXIT1 K DTOUT,DUOUT,DIRUT,DIR,Y Q
"RTN","SDOPCDEL",24,0)
MORE W !!!! S DIR("A")="Do you wish to generate another Delete code sheet",DIR("B")="YES",DIR(0)="Y" D ^DIR K DIR G:$D(DTOUT)!($D(DUOUT))!(Y=0) EXIT1 G SDOPCDEL
"RTN","SDOPCDEL",25,0)
FILE ;set up format of string for transmitting code sheet
"RTN","SDOPCDEL",26,0)
 S VATNAME=$S(SDVD<2911001:"OPC",1:"OPA") D ^VATRAN D:'VATERR SET I VATERR W !,"Cannot transmit code sheet!",*7 G EXIT ;actual code
"RTN","SDOPCDEL",27,0)
 ;F VATNAME="OPC","OPA" D ^VATRAN D:'VATERR SET I VATERR W !,"Cannot transmit code sheet!",*7 K VATERR G:VATNAME="OPA" EXIT ;for AUSTIN TESTING
"RTN","SDOPCDEL",28,0)
 D EXIT G MORE
"RTN","SDOPCDEL",29,0)
SET S SDFY=$S($$FY^SDOPC5(SDVD)>94:$$FY^SDOPC5(SDVD),$$FY^SDOPC5(SDVD)=94:"  ",1:""),SDFY1=$$FY93^SDUTL2
"RTN","SDOPCDEL",30,0)
 S SDATE=$E(SDVD,4,7)_$E(SDVD,2,3),SP=$S(VATNAME="OPC":25,SDFY!SDFY1:46,1:31),SDSP="",$P(SDSP," ",SP)=" ",SDSTA=$S($L(SDSTA)=3:SDSTA_"  ",1:SDSTA)
"RTN","SDOPCDEL",31,0)
 S X(1)=SDATE_SDSTA_SDSSN_SDSP_SDFY_$S(SDFY>94:PSEUDO,1:"")_"DEL"_$S(SDFY>94:"      ",1:"")_"$"
"RTN","SDOPCDEL",32,0)
TRANS ;set up mailmssg and send
"RTN","SDOPCDEL",33,0)
 S XMSUB=SDSTA_" OPC DEL Code Sheet",XMDUZ=DUZ,XMY(XMDUZ)="",XMTEXT="X("
"RTN","SDOPCDEL",34,0)
 F SDI=0:0 S SDI=$O(VAT(SDI)) Q:SDI'>0  S XMY(VAT(SDI))=""
"RTN","SDOPCDEL",35,0)
 D ^XMD W !,"OPC Delete Code Sheet queued for transmission."
"RTN","SDOPCDEL",36,0)
 Q
"RTN","SDPCE1")
0^43^B38188904
"RTN","SDPCE1",1,0)
SDPCE1 ;MJK/ALB - Process PCE Event Data (cont) ;01 APR 1993
"RTN","SDPCE1",2,0)
 ;;5.3;Scheduling;**27,44**;08/13/93
"RTN","SDPCE1",3,0)
 ;
"RTN","SDPCE1",4,0)
 ; **** See SDPCE0 for variable definitions ****
"RTN","SDPCE1",5,0)
 ;
"RTN","SDPCE1",6,0)
PRV(SDVSIT,SDEVENT) ; -- set up provider data
"RTN","SDPCE1",7,0)
 N SDPRVI,SDPRVA,SDPRVB
"RTN","SDPCE1",8,0)
 S SDPRVI=0
"RTN","SDPCE1",9,0)
 F  S SDPRVI=$O(^TMP("PXKCO",$J,SDVSIT,"PRV",SDPRVI)) Q:'SDPRVI  D
"RTN","SDPCE1",10,0)
 . S SDPRVA=$G(^TMP("PXKCO",$J,SDVSIT,"PRV",SDPRVI,0,"AFTER")),SDPRVB=$G(^("BEFORE"))
"RTN","SDPCE1",11,0)
 . IF 'SDPRVA,'SDPRVB Q
"RTN","SDPCE1",12,0)
 .; -- gets provider type
"RTN","SDPCE1",13,0)
 .N TYPE
"RTN","SDPCE1",14,0)
 .S TYPE=$S($P(SDPRVA,U,6):$P(SDPRVA,U,6),1:0)
"RTN","SDPCE1",15,0)
 .; -- same provider
"RTN","SDPCE1",16,0)
 . IF +SDPRVA=+SDPRVB S @SDEVENT@("PROVIDER","ADD",+SDPRVA,TYPE)="" Q
"RTN","SDPCE1",17,0)
 .; -- new provider
"RTN","SDPCE1",18,0)
 . IF SDPRVA S @SDEVENT@("PROVIDER","ADD",+SDPRVA,TYPE)=""
"RTN","SDPCE1",19,0)
 .; -- deleted provider
"RTN","SDPCE1",20,0)
 . IF SDPRVB S @SDEVENT@("PROVIDER","DELETE",+SDPRVB)=""
"RTN","SDPCE1",21,0)
 ; -- check for add/delete pairs
"RTN","SDPCE1",22,0)
 D NET("PROVIDER",.SDEVENT)
"RTN","SDPCE1",23,0)
 Q
"RTN","SDPCE1",24,0)
 ;
"RTN","SDPCE1",25,0)
CPT(SDVSIT,SDEVENT) ; -- setup procedure data
"RTN","SDPCE1",26,0)
 N SDCPTI,SDCPTA,SDCPTB
"RTN","SDPCE1",27,0)
 S SDCPTI=0
"RTN","SDPCE1",28,0)
 F  S SDCPTI=$O(^TMP("PXKCO",$J,SDVSIT,"CPT",SDCPTI)) Q:'SDCPTI  D
"RTN","SDPCE1",29,0)
 . S SDCPTA=$G(^TMP("PXKCO",$J,SDVSIT,"CPT",SDCPTI,0,"AFTER")),SDCPTB=$G(^("BEFORE"))
"RTN","SDPCE1",30,0)
 . D CPTSET(SDCPTA,SDCPTB,.SDEVENT)
"RTN","SDPCE1",31,0)
 ; -- get 'level of service' cpt from visit entry
"RTN","SDPCE1",32,0)
 S SDCPTA=$P(SDVSIT("AFTER"),U,17),SDCPTB=$P(SDVSIT("BEFORE"),U,17)
"RTN","SDPCE1",33,0)
 ; -- set number of times to 1
"RTN","SDPCE1",34,0)
 S $P(SDCPTA,U,16)=1,$P(SDCPTB,U,16)=1
"RTN","SDPCE1",35,0)
 D CPTSET(SDCPTA,SDCPTB,.SDEVENT)
"RTN","SDPCE1",36,0)
 ; -- check for add/delete pairs
"RTN","SDPCE1",37,0)
 D NETCPT(.SDEVENT)
"RTN","SDPCE1",38,0)
 D COMPARE(.SDEVENT)
"RTN","SDPCE1",39,0)
 Q
"RTN","SDPCE1",40,0)
 ;
"RTN","SDPCE1",41,0)
CPTSET(SDCPTA,SDCPTB,SDEVENT) ; -- determine type of action(add/delete)
"RTN","SDPCE1",42,0)
 IF 'SDCPTA,'SDCPTB G CPTSETQ
"RTN","SDPCE1",43,0)
 ; -- before/after are the same then skip
"RTN","SDPCE1",44,0)
 IF +SDCPTA=+SDCPTB,+$P(SDCPTA,U,16)=+$P(SDCPTB,U,16) G CPTSETQ
"RTN","SDPCE1",45,0)
 ; -- new cpt count
"RTN","SDPCE1",46,0)
 IF SDCPTA D CPTNODE("ADD",SDCPTA,.SDEVENT)
"RTN","SDPCE1",47,0)
 ; -- deleted cpt count
"RTN","SDPCE1",48,0)
 IF SDCPTB D CPTNODE("DELETE",SDCPTB,.SDEVENT)
"RTN","SDPCE1",49,0)
CPTSETQ Q
"RTN","SDPCE1",50,0)
 ;
"RTN","SDPCE1",51,0)
CPTNODE(ACTION,SDCPT,SDEVENT) ; -- actual node setting
"RTN","SDPCE1",52,0)
 N CODE S CODE=$S($D(^ICPT(+SDCPT,0)):$P(^(0),U),1:"")
"RTN","SDPCE1",53,0)
 ; -- if good code, set to correct #
"RTN","SDPCE1",54,0)
 IF CODE]"" S @SDEVENT@("PROCEDURE",ACTION,CODE)=$G(@SDEVENT@("PROCEDURE",ACTION,CODE))+$P(SDCPT,U,16)
"RTN","SDPCE1",55,0)
 Q
"RTN","SDPCE1",56,0)
 ;
"RTN","SDPCE1",57,0)
POV(SDVSIT,SDEVENT) ; -- setup dx's data
"RTN","SDPCE1",58,0)
 N SDPOVI,SDPOVA,SDPOVB,SDCPTI,SDCPTA,SDCPTB
"RTN","SDPCE1",59,0)
 S SDPOVI=0
"RTN","SDPCE1",60,0)
 F  S SDPOVI=$O(^TMP("PXKCO",$J,SDVSIT,"POV",SDPOVI)) Q:'SDPOVI  D
"RTN","SDPCE1",61,0)
 . S SDPOVA=$G(^TMP("PXKCO",$J,SDVSIT,"POV",SDPOVI,0,"AFTER")),SDPOVB=$G(^("BEFORE"))
"RTN","SDPCE1",62,0)
 . D DXSET(SDPOVA,SDPOVB,.SDEVENT)
"RTN","SDPCE1",63,0)
 ;
"RTN","SDPCE1",64,0)
 ; -- scan pce cpt nodes for dx's
"RTN","SDPCE1",65,0)
 S SDCPTI=0
"RTN","SDPCE1",66,0)
 F  S SDCPTI=$O(^TMP("PXKCO",$J,SDVSIT,"CPT",SDCPTI)) Q:'SDCPTI  D
"RTN","SDPCE1",67,0)
 . S SDCPTA=$G(^TMP("PXKCO",$J,SDVSIT,"CPT",SDCPTI,0,"AFTER")),SDCPTB=$G(^("BEFORE"))
"RTN","SDPCE1",68,0)
 . D DXSET(+$P(SDCPTA,U,5),+$P(SDCPTB,U,5),.SDEVENT)
"RTN","SDPCE1",69,0)
 ; -- check for add/delete pairs
"RTN","SDPCE1",70,0)
 D NET("DIAGNOSIS",.SDEVENT)
"RTN","SDPCE1",71,0)
 Q
"RTN","SDPCE1",72,0)
 ;
"RTN","SDPCE1",73,0)
DXSET(SDPOVA,SDPOVB,SDEVENT) ;
"RTN","SDPCE1",74,0)
 IF 'SDPOVA,'SDPOVB G DXSETQ
"RTN","SDPCE1",75,0)
 ; -- before and after the same
"RTN","SDPCE1",76,0)
 IF +SDPOVA=+SDPOVB D DXNODE("ADD",SDPOVA,.SDEVENT) G DXSETQ
"RTN","SDPCE1",77,0)
 ; -- new dx
"RTN","SDPCE1",78,0)
 IF SDPOVA D DXNODE("ADD",SDPOVA,.SDEVENT)
"RTN","SDPCE1",79,0)
 ; -- deleted dx
"RTN","SDPCE1",80,0)
 IF SDPOVB D DXNODE("DELETE",SDPOVB,.SDEVENT)
"RTN","SDPCE1",81,0)
DXSETQ Q
"RTN","SDPCE1",82,0)
 ;
"RTN","SDPCE1",83,0)
DXNODE(ACTION,SDPOV,SDEVENT) ; -- actual node setting
"RTN","SDPCE1",84,0)
 N CODE S CODE=$S($D(^ICD9(+SDPOV,0)):$P(^(0),U),1:"")
"RTN","SDPCE1",85,0)
 N RANK S RANK=$S($P(SDPOV,U,12)="P":1,1:0)
"RTN","SDPCE1",86,0)
 IF CODE]"" S @SDEVENT@("DIAGNOSIS",ACTION,CODE,RANK)=""
"RTN","SDPCE1",87,0)
 Q
"RTN","SDPCE1",88,0)
 ;
"RTN","SDPCE1",89,0)
NET(VAREA,SDEVENT) ; -- make sure there are no deletes if there's an add
"RTN","SDPCE1",90,0)
 N ITEM S ITEM=""
"RTN","SDPCE1",91,0)
 F  S ITEM=$O(@SDEVENT@(VAREA,"ADD",ITEM)) Q:ITEM=""  K @SDEVENT@(VAREA,"DELETE",ITEM)
"RTN","SDPCE1",92,0)
 Q
"RTN","SDPCE1",93,0)
 ;
"RTN","SDPCE1",94,0)
NETCPT(SDEVENT) ; -- if add and delete:
"RTN","SDPCE1",95,0)
 ;                -> determine difference
"RTN","SDPCE1",96,0)
 ;                -> kill/set appropriate nodes
"RTN","SDPCE1",97,0)
 N CODE S CODE=""
"RTN","SDPCE1",98,0)
 F  S CODE=$O(@SDEVENT@("PROCEDURE","ADD",CODE)) Q:CODE=""  D
"RTN","SDPCE1",99,0)
 . S ADD=+@SDEVENT@("PROCEDURE","ADD",CODE)
"RTN","SDPCE1",100,0)
 . S DEL=+$G(@SDEVENT@("PROCEDURE","DELETE",CODE))
"RTN","SDPCE1",101,0)
 .;
"RTN","SDPCE1",102,0)
 .; -- kill add and delete are the same
"RTN","SDPCE1",103,0)
 . IF ADD=DEL D
"RTN","SDPCE1",104,0)
 .. K @SDEVENT@("PROCEDURE","ADD",CODE)
"RTN","SDPCE1",105,0)
 .. K @SDEVENT@("PROCEDURE","DELETE",CODE)
"RTN","SDPCE1",106,0)
 .;
"RTN","SDPCE1",107,0)
 .; -- keep add and kill delete if more to add then delete
"RTN","SDPCE1",108,0)
 . IF ADD>DEL D
"RTN","SDPCE1",109,0)
 .. S @SDEVENT@("PROCEDURE","ADD",CODE)=(ADD-DEL)
"RTN","SDPCE1",110,0)
 .. K @SDEVENT@("PROCEDURE","DELETE",CODE)
"RTN","SDPCE1",111,0)
 .;
"RTN","SDPCE1",112,0)
 .; -- kill add and keep delete if more to delete than add
"RTN","SDPCE1",113,0)
 . IF ADD<DEL D
"RTN","SDPCE1",114,0)
 .. K @SDEVENT@("PROCEDURE","ADD",CODE)
"RTN","SDPCE1",115,0)
 .. S @SDEVENT@("PROCEDURE","DELETE",CODE)=(DEL-ADD)
"RTN","SDPCE1",116,0)
 Q
"RTN","SDPCE1",117,0)
 ;
"RTN","SDPCE1",118,0)
COMPARE(SDEVENT) ; -- compare PCE with SD data and adjust
"RTN","SDPCE1",119,0)
 N CODE,SDCNT,SDX
"RTN","SDPCE1",120,0)
 S SDCNT=""
"RTN","SDPCE1",121,0)
 ;-- get SD CPT counts
"RTN","SDPCE1",122,0)
 D COUNTS(DFN,SDT,SDCL,.SDCNT)
"RTN","SDPCE1",123,0)
 ;-- compare
"RTN","SDPCE1",124,0)
 S CODE="" F  S CODE=$O(SDCNT(CODE)) Q:'CODE  D
"RTN","SDPCE1",125,0)
 .;-- get cpt total for day from PCE
"RTN","SDPCE1",126,0)
 . S SDX=$$CPTDAY(DFN,SDT,CODE,SDCL)
"RTN","SDPCE1",127,0)
 . S:SDX'>0 SDX=0
"RTN","SDPCE1",128,0)
 .;
"RTN","SDPCE1",129,0)
 .;-- if same quit
"RTN","SDPCE1",130,0)
 . I SDCNT(CODE)=SDX D  Q
"RTN","SDPCE1",131,0)
 .. K @SDEVENT@("PROCEDURE","ADD",CODE)
"RTN","SDPCE1",132,0)
 .. K @SDEVENT@("PROCEDURE","DELETE",CODE)
"RTN","SDPCE1",133,0)
 .;
"RTN","SDPCE1",134,0)
 .;-- if SD count is greater, check/adjust delete node
"RTN","SDPCE1",135,0)
 . I SDCNT(CODE)>SDX,(SDCNT(CODE)-$G(@SDEVENT@("PROCEDURE","DELETE",CODE)))'=SDX D  Q
"RTN","SDPCE1",136,0)
 .. S @SDEVENT@("PROCEDURE","DELETE",CODE)=SDCNT(CODE)-SDX
"RTN","SDPCE1",137,0)
 .. K @SDEVENT@("PROCEDURE","ADD",CODE)
"RTN","SDPCE1",138,0)
 .;
"RTN","SDPCE1",139,0)
 .;-- if SD count is less, then check/adjust add node
"RTN","SDPCE1",140,0)
 . I SDCNT(CODE)<SDX,(SDCNT(CODE)+$G(@SDEVENT@("PROCEDURE","ADD",CODE)))'=SDX D  Q
"RTN","SDPCE1",141,0)
 .. S @SDEVENT@("PROCEDURE","ADD",CODE)=SDX-SDCNT(CODE)
"RTN","SDPCE1",142,0)
 .. K @SDEVENT@("PROCEDURE","DELETE",CODE)
"RTN","SDPCE1",143,0)
 Q
"RTN","SDPCE1",144,0)
 ;
"RTN","SDPCE1",145,0)
COUNTS(DFN,SDATE,SDCL,SDCNT) ; -- do cpt counting
"RTN","SDPCE1",146,0)
 N SDT,SDSC,SDSC0,SDPR,SDCPTN,I
"RTN","SDPCE1",147,0)
 S SDT=+$G(^SDV("ADT",DFN,$P(SDATE,"."))),SDSC=0
"RTN","SDPCE1",148,0)
 F  S SDSC=$O(^SDV(SDT,"CS",SDSC)) Q:'SDSC  S SDSC0=^(SDSC,0),SDPR=$G(^("PR")) D
"RTN","SDPCE1",149,0)
 . IF $P($G(^DIC(40.7,+SDSC0,0)),U,2)=900,$P(SDSC0,U,3)=SDCL D
"RTN","SDPCE1",150,0)
 .. F I=1:1:5 I $D(^ICPT(+$P(SDPR,U,I),0)) S SDCPTN=$P(^(0),U),SDCNT(SDCPTN)=$G(SDCNT(SDCPTN))+1
"RTN","SDPCE1",151,0)
 Q
"RTN","SDPCE1",152,0)
 ;
"RTN","SDPCE1",153,0)
CPTDAY(DFN,SDATE,CPT,CLINIC) ;-- This function will return the total number of
"RTN","SDPCE1",154,0)
 ; times a particular CPT was performed for a day in a
"RTN","SDPCE1",155,0)
 ; particular clinic.
"RTN","SDPCE1",156,0)
 ;
"RTN","SDPCE1",157,0)
 ;
"RTN","SDPCE1",158,0)
 N SDZ
"RTN","SDPCE1",159,0)
 S SDZ=0
"RTN","SDPCE1",160,0)
 ;-- get visit from outpatient encounter
"RTN","SDPCE1",161,0)
 S SDZ=$$CPT^PXAPI(CPT,DFN,SDATE,CLINIC)
"RTN","SDPCE1",162,0)
 Q SDZ
"RTN","SDPCE1",163,0)
 ;
"RTN","SDPCE1",164,0)
PRVAE(SDVSIT,SDEVENT) ; --
"RTN","SDPCE1",165,0)
 ; -- check parent entry for provider data ** only for stand a/e **
"RTN","SDPCE1",166,0)
 ;
"RTN","SDPCE1",167,0)
 N SDPRVI,SDPRVA,SDPRVB
"RTN","SDPCE1",168,0)
 Q:'SDVSIT
"RTN","SDPCE1",169,0)
 S SDPRVI=0
"RTN","SDPCE1",170,0)
 F  S SDPRVI=$O(^TMP("PXKENC",$J,SDVSIT,"PRV",SDPRVI)) Q:'SDPRVI  D
"RTN","SDPCE1",171,0)
 . S SDPRVA=$G(^TMP("PXKENC",$J,SDVSIT,"PRV",SDPRVI,0))
"RTN","SDPCE1",172,0)
 . IF SDPRVA S @SDEVENT@("PROVIDER","ADD",+SDPRVA)=""
"RTN","SDPCE1",173,0)
 ; -- check for add/delete pairs
"RTN","SDPCE1",174,0)
 D NET("PROVIDER",.SDEVENT)
"RTN","SDPCE1",175,0)
 Q
"RTN","SDPCE1",176,0)
 ;
"RTN","SDPCE1",177,0)
POVAE(SDVSIT,SDEVENT) ; --
"RTN","SDPCE1",178,0)
 ; -- check parent entry for dx data ** only for stand alone a/e **
"RTN","SDPCE1",179,0)
 ;
"RTN","SDPCE1",180,0)
 N SDPOVI,SDPOVA,SDPOVB,SDCPTI,SDCPTA,SDCPTB
"RTN","SDPCE1",181,0)
 Q:'SDVSIT
"RTN","SDPCE1",182,0)
 S SDPOVI=0
"RTN","SDPCE1",183,0)
 F  S SDPOVI=$O(^TMP("PXKENC",$J,SDVSIT,"POV",SDPOVI)) Q:'SDPOVI  D
"RTN","SDPCE1",184,0)
 . S SDPOVA=$G(^TMP("PXKENC",$J,SDVSIT,"POV",SDPOVI,0)),SDPOVB=""
"RTN","SDPCE1",185,0)
 . D DXSET(+SDPOVA,+SDPOVB,.SDEVENT)
"RTN","SDPCE1",186,0)
 ;
"RTN","SDPCE1",187,0)
 ; -- check for add/delete pairs
"RTN","SDPCE1",188,0)
 D NET("DIAGNOSIS",.SDEVENT)
"RTN","SDPCE1",189,0)
 Q
"RTN","SDSTP1")
0^69^B12099192
"RTN","SDSTP1",1,0)
SDSTP1 ;ALB/CAW - Add Stop Code & CPT Codes (con't);4/21/93
"RTN","SDSTP1",2,0)
 ;;5.3;Scheduling;**20,44**;Aug 13, 1993
"RTN","SDSTP1",3,0)
 ;
"RTN","SDSTP1",4,0)
MAIL ;
"RTN","SDSTP1",5,0)
 N XMDUZ,XMSUB,XMTEXT
"RTN","SDSTP1",6,0)
 ; use site specified mg and bull is only sent if mg defined
"RTN","SDSTP1",7,0)
 I $P($G(^DG(43,1,"SCLR")),U,21) D
"RTN","SDSTP1",8,0)
 .D XMY^SDUTL2(+$P(^DG(43,1,"SCLR"),U,21),0,1)
"RTN","SDSTP1",9,0)
 .S XMSUB="Stop Code Background Errors"_$$DIV($G(SDIV)),XMTEXT="SDBUL("
"RTN","SDSTP1",10,0)
 .D ^XMD K SDBUL
"RTN","SDSTP1",11,0)
MAILQ Q
"RTN","SDSTP1",12,0)
 ;
"RTN","SDSTP1",13,0)
MSG(SDSCD,SD900,MSG,SDATE,DFN,SDMSG) ;
"RTN","SDSTP1",14,0)
 ;
"RTN","SDSTP1",15,0)
 N I,X,SDC,SDMSG1,SDMSG2,SDCD,SDCL,SDCNT,SDLN,SDSTP,SDBUL1,Y
"RTN","SDSTP1",16,0)
 S SDMSG=$S($D(ZTQUEUED):0,'$D(SDMSG):0,"SCB"'[SDMSG:0,1:SDMSG)
"RTN","SDSTP1",17,0)
 I $D(MSG) D
"RTN","SDSTP1",18,0)
 .D SET("The following are error message(s) related to filing Stop/CPT codes:"),SET("")
"RTN","SDSTP1",19,0)
 .I $D(DFN),$D(SDATE) D SET("Patient: "_$P(^DPT(DFN,0),U)_"               Visit Date: "_$$FTIME(SDATE)),SET("    SSN: "_$P(^DPT(DFN,0),U,9)),SET("")
"RTN","SDSTP1",20,0)
 G:$D(MSG)'>9 SD900
"RTN","SDSTP1",21,0)
 F I="B","C","S" S Y=$S("B"[SDMSG!(I[SDMSG):1,1:0) S SDMSG1=0 F  S SDMSG1=$O(MSG(I,SDMSG1)) Q:'SDMSG1  D
"RTN","SDSTP1",22,0)
 .S SDMSG2=0 F  S SDMSG2=$O(MSG(I,SDMSG1,SDMSG2)) Q:'SDMSG2  S:SDMSG1=14 SDMSG2=$P($G(^ICPT(SDMSG2,0)),U) S X=$P($T(@SDMSG1),";",3),X=SDMSG2_X D SET(X,Y)
"RTN","SDSTP1",23,0)
 .Q:$O(MSG(I,SDMSG1,0))
"RTN","SDSTP1",24,0)
 .S X=$P($T(@SDMSG1),";",3) D SET(X,Y)
"RTN","SDSTP1",25,0)
 D SET("")
"RTN","SDSTP1",26,0)
SD900 I $D(SD900)>9 S (SDCNT,SDCD,SDCL)=0 D
"RTN","SDSTP1",27,0)
 .D SET("The following CPT codes were not filed:"),SET("")
"RTN","SDSTP1",28,0)
 .F  S SDCNT=$O(SD900(SDCNT)) Q:'SDCNT  F  S SDCL=$O(SD900(SDCNT,SDCL)) Q:'SDCL  D
"RTN","SDSTP1",29,0)
 ..D SET("Clinic: "_$P(^SC(SDCL,0),U)) F  S SDCD=$O(SD900(SDCNT,SDCL,SDCD)) Q:'SDCD  D SET("CPT Code: "_$P($G(^ICPT(SDCD,0)),U))
"RTN","SDSTP1",30,0)
 I $D(SDSCD)>9 S SDSTP=0 D
"RTN","SDSTP1",31,0)
 .D SET("The following Stop Codes were not filed:"),SET("")
"RTN","SDSTP1",32,0)
 .F  S SDSTP=$O(SDSCD(SDSTP)) Q:'SDSTP  D SET(SDSTP)
"RTN","SDSTP1",33,0)
 I $D(SDBUL1) S SDLN=0 F  S SDLN=$O(SDBUL1(SDLN)) Q:'SDLN  W !,SDBUL1(SDLN,0)
"RTN","SDSTP1",34,0)
 Q
"RTN","SDSTP1",35,0)
MSGTXT ; Error/message text
"RTN","SDSTP1",36,0)
 ;
"RTN","SDSTP1",37,0)
1 ;;User not defined.
"RTN","SDSTP1",38,0)
 ;
"RTN","SDSTP1",39,0)
2 ;;Division not defined.
"RTN","SDSTP1",40,0)
 ;
"RTN","SDSTP1",41,0)
3 ;;Not a valid division.
"RTN","SDSTP1",42,0)
 ;
"RTN","SDSTP1",43,0)
4 ;;Visit date not defined.
"RTN","SDSTP1",44,0)
 ;
"RTN","SDSTP1",45,0)
5 ;;Stop Codes cannot be entered for future dates.
"RTN","SDSTP1",46,0)
 ;
"RTN","SDSTP1",47,0)
6 ;;Stop Code not defined.
"RTN","SDSTP1",48,0)
 ;
"RTN","SDSTP1",49,0)
7 ;;Patient not defined.
"RTN","SDSTP1",50,0)
 ;
"RTN","SDSTP1",51,0)
8 ;;Not a valid patient.
"RTN","SDSTP1",52,0)
 ;
"RTN","SDSTP1",53,0)
9 ;; is not a valid stop code.
"RTN","SDSTP1",54,0)
 ;
"RTN","SDSTP1",55,0)
10 ;; has already been filed for this date.
"RTN","SDSTP1",56,0)
 ;
"RTN","SDSTP1",57,0)
11 ;;Fifteen Stop Codes have been entered for this date.  No more can be filed.
"RTN","SDSTP1",58,0)
 ;
"RTN","SDSTP1",59,0)
12 ;;A 900 stop code must be entered with CPT codes.
"RTN","SDSTP1",60,0)
 ;
"RTN","SDSTP1",61,0)
13 ;;Associated clinic for this 900 stop code is not valid.
"RTN","SDSTP1",62,0)
 ;
"RTN","SDSTP1",63,0)
14 ;; is not a valid/active CPT code.
"RTN","SDSTP1",64,0)
 ;
"RTN","SDSTP1",65,0)
15 ;;Six 900 Stop Codes have been entered for this date.  No more can be filed.
"RTN","SDSTP1",66,0)
 ;
"RTN","SDSTP1",67,0)
16 ;;900 Stop Code is not in the CLINIC STOP CODE file.
"RTN","SDSTP1",68,0)
 ;
"RTN","SDSTP1",69,0)
17 ;;Another user is editing entry.
"RTN","SDSTP1",70,0)
 ;
"RTN","SDSTP1",71,0)
 ;;$END
"RTN","SDSTP1",72,0)
SET(X,Y) ; -- set text into array
"RTN","SDSTP1",73,0)
 ;        Input:  X = Line of text
"RTN","SDSTP1",74,0)
 ;                Y = If it should be written on the screen
"RTN","SDSTP1",75,0)
 S SDLN=$G(SDLN)+1,SDBUL(SDLN,0)=X
"RTN","SDSTP1",76,0)
 I $G(Y) S SDBUL1(SDLN,0)=X
"RTN","SDSTP1",77,0)
 Q
"RTN","SDSTP1",78,0)
 ;
"RTN","SDSTP1",79,0)
DIV(DIV) ; -- division name
"RTN","SDSTP1",80,0)
 ; input:  DIV := ifn of med ctr div
"RTN","SDSTP1",81,0)
 ;
"RTN","SDSTP1",82,0)
 Q $S('$P($G(^DG(43,1,"GL")),U,2):"",$D(^DG(40.8,+DIV,0)):" ("_$P(^(0),U)_")",1:"")
"RTN","SDSTP1",83,0)
 ;
"RTN","SDSTP1",84,0)
FTIME(Y) ; -- return formatted date/time
"RTN","SDSTP1",85,0)
 ;   input:          Y := internal date/time
"RTN","SDSTP1",86,0)
 ;  output: [returned] := formatted date and time
"RTN","SDSTP1",87,0)
 I 'Y G FTIMEQ
"RTN","SDSTP1",88,0)
 D DD^%DT
"RTN","SDSTP1",89,0)
FTIMEQ Q Y
"RTN","SDSTP2")
0^66^B16941780
"RTN","SDSTP2",1,0)
SDSTP2 ;ALB/CAW - Add Stop Code & CPT Codes (con't);4/21/93
"RTN","SDSTP2",2,0)
 ;;5.3;Scheduling;**17,27,36,44**;Aug 13, 1993
"RTN","SDSTP2",3,0)
 ;
"RTN","SDSTP2",4,0)
 ;
"RTN","SDSTP2",5,0)
CPT(SD900,DFN,SDATE,SDIV,SDAPTYP,SDAPTYPR) ; Check and file CPT codes
"RTN","SDSTP2",6,0)
 ;        Input:  SD900 - CPT array
"RTN","SDSTP2",7,0)
 ;                  DFN - Patient IFN
"RTN","SDSTP2",8,0)
 ;                SDATE - Appointment Date/Time
"RTN","SDSTP2",9,0)
 ;                 SDIV - Division IFN
"RTN","SDSTP2",10,0)
 ;              SDAPTYP - Appointment Type
"RTN","SDSTP2",11,0)
 ;             SDAPTYPR - Appointment Type Reason
"RTN","SDSTP2",12,0)
 ;       Output:  SDERR and MSG array if any errors
"RTN","SDSTP2",13,0)
 ;                SD900 array for any CPT codes not filed.
"RTN","SDSTP2",14,0)
 N SDX,SDPCNT,SDSCNT,SDPR,SDCLN,SDCODE,SDL,SDP,SDPROC,SDI,SDVATE,CNT,SDCNT,SDADD,AMBLMT,OLDP
"RTN","SDSTP2",15,0)
 S AMBLMT=$S($G(AMBVER):999,1:6)
"RTN","SDSTP2",16,0)
 S:$D(^SDV("ADT",DFN,$P(SDATE,"."))) SDATE=^SDV("ADT",DFN,$P(SDATE,"."))
"RTN","SDSTP2",17,0)
 G:$D(SD900)'>9 CPTQ S SDPCNT=0 D BEFORE^SDSTP3(DFN,SDATE) S SDX=0,SDVATE=SDATE
"RTN","SDSTP2",18,0)
 ;Check to see if CPTs can be added to existing entries
"RTN","SDSTP2",19,0)
 ;
"RTN","SDSTP2",20,0)
 F SDSCNT=0:1 S SDX=$O(SDSCD(SDX)) Q:'SDX  D  K CNT
"RTN","SDSTP2",21,0)
 .S SDPR=$G(SDSCD(SDX,"PR")) Q:'SDPR
"RTN","SDSTP2",22,0)
 .F SDI=1:1:5 I $P(SDPR,U,SDI)]"" S CNT=$G(CNT)+1 ;?already 5 CPTs
"RTN","SDSTP2",23,0)
 .Q:CNT=5
"RTN","SDSTP2",24,0)
 .S SDCLN=$P(SDSCD(SDX,0),U,3)
"RTN","SDSTP2",25,0)
 .S OLDP=$P(SDSCD(SDX,0),U,8)
"RTN","SDSTP2",26,0)
 .F SDCNT=1:1:AMBLMT Q:'$D(SD900(SDCNT))  I $D(SD900(SDCNT,+SDCLN)),$$SAMEPAR(OLDP,$G(SDOEP),$G(SDVSIT0)) S SDPROC=0 F  S SDPROC=$O(SD900(SDCNT,SDCLN,SDPROC)) Q:'SDPROC  D
"RTN","SDSTP2",27,0)
 ..S SDCODE=0 F SDL=1:1:5 I $P(SDPR,"^",SDL)="" S SDCODE=$O(SD900(SDCNT,SDCLN,SDPROC,SDCODE)) I SDCODE S $P(SDPR,U,SDL)=SDPROC K SD900(SDCNT,SDCLN,SDPROC,SDCODE)
"RTN","SDSTP2",28,0)
 ..S SDCPT(SDX)="900^"_SDCLN_"^"_SDPR,SDADD=1,SDAPTYP=$P(SDSCD(SDX,0),U,5),SDAPTYPR=$P(SDSCD(SDX,0),U,6) D FILE(DFN,SDATE,.SDCPT,SDAPTYP,SDAPTYPR,SDX) K SDADD ;File with existing entries
"RTN","SDSTP2",29,0)
 I SDSCNT>$S($G(AMBVER):999,1:15) S MSG("B",11)=""
"RTN","SDSTP2",30,0)
 ;
"RTN","SDSTP2",31,0)
 ;File what is left
"RTN","SDSTP2",32,0)
 ;
"RTN","SDSTP2",33,0)
 I $G(AMBVER) S SDPCNT=0,SDSCNT=0
"RTN","SDSTP2",34,0)
 I $D(SD900)&(SDPCNT<6)&(SDSCNT<15) D  K SDJ
"RTN","SDSTP2",35,0)
 .F SDCNT=1:1:AMBLMT Q:'$D(SD900(SDCNT))  S SDX=0 F  S SDX=$O(SD900(SDCNT,SDX)) Q:'SDX!(SDPCNT'<7)  K SDP S SDL=0 D  Q:SDPCNT>5!(SDSCNT>14)!($D(SDNOGO))
"RTN","SDSTP2",36,0)
 ..Q:SDPCNT>5!(SDSCNT>14)!($D(SDNOGO))
"RTN","SDSTP2",37,0)
 ..S SDI=1 F  S SDL=$O(SD900(SDCNT,SDX,SDL)) Q:'SDL!(SDI>5)  D
"RTN","SDSTP2",38,0)
 ...S $P(SDP,"^",SDI)=SDL
"RTN","SDSTP2",39,0)
 ...K SD900(SDCNT,SDX,SDL,$O(SD900(SDCNT,SDX,SDL,0)))
"RTN","SDSTP2",40,0)
 ...S SDI=SDI+1
"RTN","SDSTP2",41,0)
 ...F  Q:'$O(SD900(SDCNT,SDX,SDL,0))  S $P(SDP,"^",SDI)=SDL S SDI=SDI+1 K SD900(SDCNT,SDX,SDL,$O(SD900(SDCNT,SDX,SDL,0)))
"RTN","SDSTP2",42,0)
 ..S SDJ=$G(SDJ)+1 Q:SDJ'<AMBLMT  S SDCPT(SDJ)="900^"_SDX_"^"_SDP
"RTN","SDSTP2",43,0)
 ..I '$D(^SDV("ADT",DFN,$P(SDATE,"."))) D NENTRY^SDSTP3(DFN,SDATE,SDIV)
"RTN","SDSTP2",44,0)
 ..S:$D(^SDV("ADT",DFN,$P(SDATE,"."))) SDATE=^SDV("ADT",DFN,$P(SDATE,".")) D FILE(DFN,SDATE,.SDCPT,SDAPTYP,SDAPTYPR,SDJ)
"RTN","SDSTP2",45,0)
 ..I '$G(AMBVER) S SDPCNT=SDPCNT+1,SDSCNT=SDSCNT+1
"RTN","SDSTP2",46,0)
 I $D(SD900)>9 S MSG("B",11)=""
"RTN","SDSTP2",47,0)
 I $D(SD900)>9&(SDPCNT'<7) S MSG("B",15)="",SDERR=1
"RTN","SDSTP2",48,0)
 I $D(SD900)>9&(SDSCNT'<16)!($D(SDSTP)>9&(SDSCNT'<16)) S MSG("B",11)="",SDERR=1
"RTN","SDSTP2",49,0)
CPTQ K SDNOGO Q
"RTN","SDSTP2",50,0)
 ;
"RTN","SDSTP2",51,0)
FILE(DFN,SDATE,SDCPT,SDAPTYP,SDAPTYPR,SDJ) ;File CPT codes
"RTN","SDSTP2",52,0)
 ;             Input:     DFN - Patient IFN
"RTN","SDSTP2",53,0)
 ;                      SDATE - File entry
"RTN","SDSTP2",54,0)
 ;                      SDCPT - CPT string
"RTN","SDSTP2",55,0)
 ;                    SDAPTYP - Appointment Type
"RTN","SDSTP2",56,0)
 ;                   SDAPTYPR - Appointment Type Reason
"RTN","SDSTP2",57,0)
 ;                        SDJ - SDY (existing entries) or CPT counter
"RTN","SDSTP2",58,0)
 ;            Output:    SDERR and MSG if an error
"RTN","SDSTP2",59,0)
 N SDX,DA,SDY S DA(1)=SDATE
"RTN","SDSTP2",60,0)
 S DIC=40.7,DIC(0)="QMZ",X=900 D ^DIC K DIC I Y'>0 S MSG("C",16)="" G FILEQ
"RTN","SDSTP2",61,0)
 S SD900=+Y
"RTN","SDSTP2",62,0)
 K DR,DO,DD S X=SD900,DIC(0)="LM",(DIC,DIE)="^SDV("_DA(1)_",""CS"","
"RTN","SDSTP2",63,0)
 I '$D(^SDV(DA(1),"CS",0)) S ^SDV(DA(1),"CS",0)="^"_$P(^DD(409.5,10,0),"^",2)_"^^"
"RTN","SDSTP2",64,0)
 I '$D(SDADD) D FILE^DICN S SDY=Y I +Y'>0 S SDNOGO="" G FILEQ
"RTN","SDSTP2",65,0)
 S:$D(SDADD) SDY=SDJ S (DA,SDA1)=DA(1),DR="[SDXACSE]",DIE="^SDV(",SDVNODE=DIE_DA_")"
"RTN","SDSTP2",66,0)
 L +@SDVNODE:2 I $T D  G FILEQ
"RTN","SDSTP2",67,0)
 .D ^DIE L -@SDVNODE K DR,DQ,DE,DIC,X S DA(1)=SDA1,DA=+SDY
"RTN","SDSTP2",68,0)
 .S SDOPE=$$GETAE^SDVSIT2(DA(1),DA,$G(SDOEP),$G(SDVTIEN))
"RTN","SDSTP2",69,0)
 .D EN^SDCOM(SDOPE,0,SDHANDL,.SDCOMF)
"RTN","SDSTP2",70,0)
 .D AE^SDAMEVT1(DA(1),DA,"1^added as a result of activity in another package")
"RTN","SDSTP2",71,0)
 S MSG("B",17)="",SDERR=1
"RTN","SDSTP2",72,0)
FILEQ Q
"RTN","SDSTP2",73,0)
 ;
"RTN","SDSTP2",74,0)
SAMEPAR(OLD1,CUR,VISIT) ;compares the two entries to tell if they are the same
"RTN","SDSTP2",75,0)
 ;parent
"RTN","SDSTP2",76,0)
 ;OLD1  pointer to the outpatient encounter of the other encounters
"RTN","SDSTP2",77,0)
 ;CUR   the parent encounter if there is one
"RTN","SDSTP2",78,0)
 ;VISIT the visit number of the encounter that is taking place
"RTN","SDSTP2",79,0)
 ;
"RTN","SDSTP2",80,0)
 ;it was suggested by mike to put in a second chek of the dates .01
"RTN","SDSTP2",81,0)
 ;of these two to be the same.  I need to think about this further.
"RTN","SDSTP2",82,0)
 N OLD,ANS
"RTN","SDSTP2",83,0)
 I 'OLD1 S ANS=0 G SAMEPARQ
"RTN","SDSTP2",84,0)
 I 'CUR DO  G SAMEPARQ
"RTN","SDSTP2",85,0)
 .I VISIT=$P(^SCE(OLD1,0),U,5) S ANS=1
"RTN","SDSTP2",86,0)
 .E  S ANS=0
"RTN","SDSTP2",87,0)
 .Q
"RTN","SDSTP2",88,0)
 S OLD=$P(^SCE(OLD1,0),U,6)
"RTN","SDSTP2",89,0)
 I 'OLD S OLD=OLD1
"RTN","SDSTP2",90,0)
 I OLD=CUR S ANS=1
"RTN","SDSTP2",91,0)
 I OLD'=CUR S ANS=0
"RTN","SDSTP2",92,0)
SAMEPARQ Q ANS
"RTN","SDSTP3")
0^45^B9142495
"RTN","SDSTP3",1,0)
SDSTP3 ;ALB/CAW - Add Stop Code & CPT Codes ;4/21/93
"RTN","SDSTP3",2,0)
 ;;5.3;Scheduling;**27,36,44**;Aug 13, 1993
"RTN","SDSTP3",3,0)
 ;
"RTN","SDSTP3",4,0)
 ;
"RTN","SDSTP3",5,0)
STP(SDSTP,DFN,SDATE,SDIV,SDAPTYP,SDAPTYPR) ; Check and file stop codes
"RTN","SDSTP3",6,0)
 ;            Input:     SDSTP - Stop Code array
"RTN","SDSTP3",7,0)
 ;                         DFN - Patient IFN
"RTN","SDSTP3",8,0)
 ;                       SDATE - Date of Appointment
"RTN","SDSTP3",9,0)
 ;                        SDIV - Division pointer
"RTN","SDSTP3",10,0)
 ;                     SDAPTYP - Appointment Type
"RTN","SDSTP3",11,0)
 ;                    SDAPTYPR - Appointment Type Reason
"RTN","SDSTP3",12,0)
 ;           Output:     SDERR and message array if any errors
"RTN","SDSTP3",13,0)
 ;                       SDSTP array for any stop codes not filed
"RTN","SDSTP3",14,0)
 N SDX,SDCNT,SDSCN,SDFDT,SDA,SDAX,DA,SDLMT
"RTN","SDSTP3",15,0)
 S:$D(^SDV("ADT",DFN,$P(SDATE,"."))) SDATE=^SDV("ADT",DFN,$P(SDATE,"."))
"RTN","SDSTP3",16,0)
 G:$D(SDSTP)'>9 STPQ D BEFORE(DFN,SDATE)
"RTN","SDSTP3",17,0)
 S SDLMT=$S($G(AMBVER):999,1:15) ;assumes this variable exists
"RTN","SDSTP3",18,0)
 S SDX=0 F SDCNT=1:1 S SDX=$O(SDSCD(SDX)) Q:'SDX  D
"RTN","SDSTP3",19,0)
 .S SDSTP=$P(SDSCD(SDX,0),U)
"RTN","SDSTP3",20,0)
 .S SDSCN=$P($G(^DIC(40.7,+SDSTP,0)),U,2) I $D(SDSTP(SDSCN)) K SDSTP(SDSCN)
"RTN","SDSTP3",21,0)
 I SDCNT>SDLMT S MSG("S",11)="",SDERR=1 Q
"RTN","SDSTP3",22,0)
 Q:$D(SDSTP)'>9
"RTN","SDSTP3",23,0)
 I '$D(^SDV("ADT",DFN,$P(SDATE,"."))) D NENTRY(DFN,SDATE,SDIV) G:$D(SDNOGO) STPQ
"RTN","SDSTP3",24,0)
 S SDFDT=$S($P(SDATE,".",2)]"":SDATE,1:SDATE+.08)
"RTN","SDSTP3",25,0)
 F SDA=0:0 S SDA=$O(SDSTP(SDA)) Q:SDA'>0!(SDCNT>SDLMT)  D
"RTN","SDSTP3",26,0)
 .S SDAX="",DIE="^SDV(",DA=SDFDT,DR="10///"_SDA
"RTN","SDSTP3",27,0)
 .S DR(2,409.51)="2////^S X=$S($D(SDUZ):SDUZ,1:DUZ);S SDDA=DA;5////^S X=SDAPTYP;S:$D(SDNOTCG) Y=""@1"";11////^S X=1"_$S(SDAPTYPR:";6////^S X=SDAPTYPR",1:"")_";@1"
"RTN","SDSTP3",28,0)
 .;-- Use eligibility from Parent Outpatient Encounter IEN (SDOEP)
"RTN","SDSTP3",29,0)
 .S DR(2,409.51)=DR(2,409.51)_$S($D(SDCLINIC):";3////^S X=SDCLINIC",1:"")_$S($G(SDOEP):";4////^S X=$P($G(^SCE(SDOEP,0)),U,13)",1:"")
"RTN","SDSTP3",30,0)
 .D ^DIE K SDSTP(SDA),DIE,DR D
"RTN","SDSTP3",31,0)
 ..S SDCNT=SDCNT+1,SDERR=0
"RTN","SDSTP3",32,0)
 ..S SDOPE=$$GETAE^SDVSIT2(DA,SDDA,$G(SDOEP),$G(SDVTIEN))
"RTN","SDSTP3",33,0)
 ..D EN^SDCOM(SDOPE,0,SDHANDL,.SDCOMF)
"RTN","SDSTP3",34,0)
 ..D:SDAX AE^SDAMEVT1(DA,SDDA,"1^added as a result of activity in another package")
"RTN","SDSTP3",35,0)
 .I $D(SDSTP)>9&(SDCNT>SDLMT) S MSG("S",11)="",SDERR=1
"RTN","SDSTP3",36,0)
STPQ ;
"RTN","SDSTP3",37,0)
 Q
"RTN","SDSTP3",38,0)
 ;
"RTN","SDSTP3",39,0)
BEFORE(DFN,SDATE) ; Get snapshot of ^SDV prior to filing
"RTN","SDSTP3",40,0)
 ;           Input:     DFN - Patient IFN
"RTN","SDSTP3",41,0)
 ;                     SDATE - Date of Appointment
"RTN","SDSTP3",42,0)
 ;          Output: SDSCD(0) - ^SDV(SDATE,0)
"RTN","SDSTP3",43,0)
 ;                SDSCD(#,0) - ^SDV(SDATE,"CS",#,0)
"RTN","SDSTP3",44,0)
 ;             SDSCD(#,"PR") - ^SDV(SDATE,"CS",1,"PR")
"RTN","SDSTP3",45,0)
 ;
"RTN","SDSTP3",46,0)
 N I S I=0
"RTN","SDSTP3",47,0)
 I '$G(^SDV(SDATE,0)) G BEFOREQ
"RTN","SDSTP3",48,0)
 S SDSCD(0)=^SDV(SDATE,0)
"RTN","SDSTP3",49,0)
 ;-- Check for correct DFN
"RTN","SDSTP3",50,0)
 I $P(SDSCD(0),U,2)'=DFN K SDSCD G BEFOREQ
"RTN","SDSTP3",51,0)
 F  S I=$O(^SDV(SDATE,"CS",I)) Q:'I  D
"RTN","SDSTP3",52,0)
 .S SDSCD(I,0)=$G(^SDV(SDATE,"CS",I,0))
"RTN","SDSTP3",53,0)
 .I $G(^SDV(SDATE,"CS",I,"PR")) S SDSCD(I,"PR")=^("PR"),SDPCNT=$G(SDPCNT)+1
"RTN","SDSTP3",54,0)
BEFOREQ Q
"RTN","SDSTP3",55,0)
 ;
"RTN","SDSTP3",56,0)
NENTRY(DFN,SDTE,SDIV) ; New entry into file
"RTN","SDSTP3",57,0)
 ;            Input:     DFN - Patient IFN
"RTN","SDSTP3",58,0)
 ;                     SDATE - Appointment Date/Time
"RTN","SDSTP3",59,0)
 ;                      SDIV - Division pointer
"RTN","SDSTP3",60,0)
 ;           Output:   DA(1) - File entry
"RTN","SDSTP3",61,0)
 ;
"RTN","SDSTP3",62,0)
 N SDFDT,SDX,X,Y S SDFDT=$S($P(SDTE,".",2)]"":SDTE,1:SDTE+.08)
"RTN","SDSTP3",63,0)
LOCK L +^SDV(SDFDT):1 I '$T!$D(^SDV(SDFDT)) L -^SDV(SDFDT) S SDFDT=SDFDT+.00001 G LOCK
"RTN","SDSTP3",64,0)
 K DD,DO S DIC="^SDV(",DIC(0)="L",(DINUM,X)=SDFDT,DIC("DR")="2////"_DFN_";3////"_SDIV D FILE^DICN K DINUM,DIC,DO S (SDATE,DA(1))=+Y S:'+Y SDNOGO=""
"RTN","SDSTP3",65,0)
 L -^SDV(SDFDT)
"RTN","SDSTP3",66,0)
 Q
"RTN","SDTRAN")
0^46^B14774688
"RTN","SDTRAN",1,0)
SDTRAN ;ALB/BOK - TRANSMISSION OF OPC ;11/13/91  10:10
"RTN","SDTRAN",2,0)
 ;;5.3;Scheduling;**44**;Aug 13, 1993
"RTN","SDTRAN",3,0)
 ;
"RTN","SDTRAN",4,0)
CONT W !?10,"Do you want to continue" D YN^DICN I '% W !,"REPLY YES (Y) OR NO (N)" G CONT
"RTN","SDTRAN",5,0)
 Q
"RTN","SDTRAN",6,0)
START I $$CLOSED^SCDXUTL(DT) S Y=$$CLOSEFM^SCDXUTL() D DD^%DT W !!,*7,"As of ",Y," workload information will automatically be sent to Austin.",!,"There is no need to transmit OPC.",!! Q
"RTN","SDTRAN",7,0)
 D DT^SDUTL W !,"The OPC AMIS file was last generated on " S Y=$S($D(^DG(43,1,"SCLR")):$P(^("SCLR"),U,2),1:"") D DT^DIQ
"RTN","SDTRAN",8,0)
 S %=1 W !!,"This option will send OPC AMIS data to Austin" D CONT G QUIT:%'=1
"RTN","SDTRAN",9,0)
 I $D(^DG(43,1,"SCLR")),+$P(^("SCLR"),U,4) W !!,*7,"The OPC AMIS file is currently being regenerated." S %=2 D CONT G QUIT:%'=1
"RTN","SDTRAN",10,0)
 I $D(^SDASE(0)) I +$P(^(0),U,4) W !!,*7,"The OPC Error file contains " D ERRCNT S %=1 D CONT G QUIT:%'=1
"RTN","SDTRAN",11,0)
 S SDSCLR=$S($D(^DG(43,1,"SCLR")):^("SCLR"),1:""),SDVLR=$S(+$P(SDSCLR,U,10):$P(SDSCLR,U,10),1:2881101)-.1,SDMTID=$S('+$P(SDSCLR,U,11):2911001,1:$P(SDSCLR,U,11)),(SDVARY,VAT,VAUTN)=""
"RTN","SDTRAN",12,0)
DT S %DT(0)="-NOW" D DATE^SDUTL G QUIT:POP S SDVARY=$S(SDVLR'>SDBD:1,1:"")
"RTN","SDTRAN",13,0)
 I SDBD<SDMTID,SDED'<SDMTID W !!,"Both Beginning and Ending dates should be before the Means Test Income Date.",*7,! G DT
"RTN","SDTRAN",14,0)
 ;code to stop sending data from 10/1 by OPC
"RTN","SDTRAN",15,0)
 I $$DATE^SCDXUTL(SDBD)!($$DATE^SCDXUTL(SDED)) S Y=$$FMDATE^SCDXUTL() D DD^%DT W !!,*7,"You can not transmit workload data newer than ",Y," using the OPC",!,"functionality.",! G DT
"RTN","SDTRAN",16,0)
 I $$XMIT^SDAMQ2(SDBD,SDED) G DT
"RTN","SDTRAN",17,0)
VADATS S VATNAME=$S(SDBD'<SDMTID:"OPA",1:"OPC") D ^VATRAN G QUIT:VATERR I SDVARY S VAUTNI=2 D PATIENT^VAUTOMA G QUIT:Y<0
"RTN","SDTRAN",18,0)
 S SDMSGL=$S(SDVARY:VAT("V"),1:VAT("F")) I 'SDMSGL W !,"Message length is needed for ",VATNAME," Router.",*7 G QUIT
"RTN","SDTRAN",19,0)
OK W !!,">>> You have selected OPC data...",!?27,"from: " S Y=SDBD D DT^DIQ W !?29,"to: " S Y=SDED D DT^DIQ W !!,">>> OPC Data will be transmitted to..." F I=0:0 S I=$O(VAT(I)) Q:I'>0  W !?27,$P(VAT(I),"@",2)
"RTN","SDTRAN",20,0)
 D OK^SDTRAN3 G QUIT:%=2!(%=-1),OK:%'=1
"RTN","SDTRAN",21,0)
Q S (IO,ION)="",DGPGM="^SDTRAN1",DGVAR="SDVARY^SDMTID^SDBD^SDED^SDMSGL^VATNAME^VAT#^VAUTN#^DUZ" D QUE^DGUTQ
"RTN","SDTRAN",22,0)
QUIT D CLOSE^DGUTQ K %,%DT,%IS,%ZIS,%MT,A,B,BEGDATE,C,DA,DFN,DGPGM,DGVAR,DIC,DIE,DR,ENDDATE,I,J,POP,Q,S,SD88,SDATA,SDBC,SDBD,SDBEG,SDCNT,SDCT,SDCT1,SDDATE,SDDT
"RTN","SDTRAN",23,0)
 K SDED,SDERR,SDFILL,SDGRUP,SDI,SDID,SDIDN,SDINTEG,SDIOF,SDMS,SDMTI,SDMTID,SDPCNT,SDVARY,SDVLR,TP,VAUTNI,VAT,VAUTN,VATERR,VATNAME
"RTN","SDTRAN",24,0)
 K SDERRCT,SDIOSL,SDJ,SDLN,SDMODE,SDMSG,SDMSGL,SDNUM,SDOKTX,SDOPC,SDOS,SDPG,SDPR,SDPRT,SDQ,SDUT,SDR,SDRS,SDSCLR,SDSUS,SDTAPE,SDUZ,SDX,SDXMZ,SDXX,STARS,X,XMDUZ,XMSUB,XMTEXT,XMY,XMZ,Y,Z
"RTN","SDTRAN",25,0)
 K ^UTILITY($J,"STAT")
"RTN","SDTRAN",26,0)
 Q
"RTN","SDTRAN",27,0)
ERRCNT S SDERRCT=0 F Q=0:0 S Q=$O(^SDASE(Q)) Q:'Q  S SDERRCT=SDERRCT+1
"RTN","SDTRAN",28,0)
 W SDERRCT," patient record"_$S('SDERRCT:"",1:"s") Q
"RTN","SDTRAN",29,0)
 ;
"RTN","SDTRANDV")
0^47^B8444249
"RTN","SDTRANDV",1,0)
SDTRANDV ;ALB/CAW - OPC Variable Lenght Output ;4/13/93
"RTN","SDTRANDV",2,0)
 ;;5.3;Scheduling;**20,44**;Aug 13, 1993
"RTN","SDTRANDV",3,0)
 ;
"RTN","SDTRANDV",4,0)
EN I $D(^DG(43,1,"GL")),$P(^("GL"),U,2),'$$DIV G ENQ
"RTN","SDTRANDV",5,0)
 I '$$INIT G ENQ
"RTN","SDTRANDV",6,0)
 I '$$RANGE(.SDBEG,.SDEND) G ENQ
"RTN","SDTRANDV",7,0)
 I '$$PATIENT(.VAUTN) G ENQ
"RTN","SDTRANDV",8,0)
 W !!,$$LINE^SDAMO("Device Selection")
"RTN","SDTRANDV",9,0)
 W !!,"This output requires 132 columns.",!!
"RTN","SDTRANDV",10,0)
 S %ZIS="PMQ" D ^%ZIS I POP G ENQ
"RTN","SDTRANDV",11,0)
 I '$D(IO("Q")) D START^SDTRAND1 G ENQ
"RTN","SDTRANDV",12,0)
 S Y=$$QUE
"RTN","SDTRANDV",13,0)
ENQ D:'$D(ZTQUEUED) ^%ZISC
"RTN","SDTRANDV",14,0)
 K CLN,CNT,DATE,DFN,FAC,HDR,LEG,PAT,SD,SDAMB,SDAP,SDAP1,SDAPH,SDAPN,SDATA
"RTN","SDTRANDV",15,0)
 K SDBD,SDBEG,SDCNT,SDCPT,SDDT,SDED,SDEND,SDFLG,SDFY,SDI,SDIV,SDLN,SDMT,SDMTI,SDPG,SDSTOP
"RTN","SDTRANDV",16,0)
 K SDSTP,SDSTPC,SDTOT,SDX,STPS,STPS1,VAR,VAUTD,VAUTN,X,Y,^TMP("SDVLO",$J)
"RTN","SDTRANDV",17,0)
 Q
"RTN","SDTRANDV",18,0)
 ;
"RTN","SDTRANDV",19,0)
DIV() ; -- get division data
"RTN","SDTRANDV",20,0)
 ;  input: none
"RTN","SDTRANDV",21,0)
 ; output: VAUTD := divs selected (VAUTD=1 for all)
"RTN","SDTRANDV",22,0)
 ; return: was selection made [ 1|yes   0|no]
"RTN","SDTRANDV",23,0)
 ;
"RTN","SDTRANDV",24,0)
 W !!,$$LINE^SDAMO("Division Selection")
"RTN","SDTRANDV",25,0)
 D ASK2^SDDIV I Y<0 K VAUTD
"RTN","SDTRANDV",26,0)
DIVQ Q $D(VAUTD)>0
"RTN","SDTRANDV",27,0)
 ;
"RTN","SDTRANDV",28,0)
INIT() ; Init variables
"RTN","SDTRANDV",29,0)
 ;  input: none
"RTN","SDTRANDV",30,0)
 ; output: initialization variables
"RTN","SDTRANDV",31,0)
 S SDPG=1,$P(SDLN,"=",133)="",(I,DFN,SDTOT,SDFLG)=0
"RTN","SDTRANDV",32,0)
 I '$D(VAUTD) S VAUTD=$O(^DG(40.8,0)),VAUTD(VAUTD)=+$P($G(^DG(40.8,VAUTD,0)),U)
"RTN","SDTRANDV",33,0)
 Q 1
"RTN","SDTRANDV",34,0)
 ;
"RTN","SDTRANDV",35,0)
RANGE(SDBEG,SDEND) ; select date range
"RTN","SDTRANDV",36,0)
 ;  input: none
"RTN","SDTRANDV",37,0)
 ; output: SDBEG := begin date
"RTN","SDTRANDV",38,0)
 ;         SDEND := end date
"RTN","SDTRANDV",39,0)
 ; return: was selection made [ 1|yes   0|no]
"RTN","SDTRANDV",40,0)
 S (SDBEG,SDEND)=0
"RTN","SDTRANDV",41,0)
 W !!,$$LINE^SDAMO("Date Range Selection")
"RTN","SDTRANDV",42,0)
DATE S DIR(0)="D^::EX",DIR("A")="Enter Beginning Date",DIR("?")="^D HELP^%DTC" D ^DIR K DIR G:$D(DIRUT) RANGEQ S SDBEG=Y-.1,SDBD=Y
"RTN","SDTRANDV",43,0)
 ;select ending date
"RTN","SDTRANDV",44,0)
 S DIR(0)="D^::EX",DIR("A")="Enter Ending Date",DIR("?")="^D HELP^%DTC" D ^DIR K DIR G:$D(DIRUT) RANGEQ
"RTN","SDTRANDV",45,0)
 S SDEND=Y+.9,SDED=Y
"RTN","SDTRANDV",46,0)
 I SDEND<SDBEG W !!,"Beginning Date must be prior to Ending Date" G DATE
"RTN","SDTRANDV",47,0)
 S Y=$$FMDATE^SCDXUTL() I SDEND>Y!(SDBEG>Y) X ^DD("DD") W !!,"Beginning Date and Ending Date must be prior to ",Y,"." S (SDBEG,SDEND)=0 G DATE
"RTN","SDTRANDV",48,0)
RANGEQ Q SDEND
"RTN","SDTRANDV",49,0)
 ;
"RTN","SDTRANDV",50,0)
PATIENT(VAUTN) ; Select Patient
"RTN","SDTRANDV",51,0)
 ;          input: none
"RTN","SDTRANDV",52,0)
 ;         output: VAUTN
"RTN","SDTRANDV",53,0)
 ;
"RTN","SDTRANDV",54,0)
 W !!,$$LINE^SDAMO("Patient Selection")
"RTN","SDTRANDV",55,0)
 S VAUTNI=2 D PATIENT^VAUTOMA I 'VAUTN&('$O(VAUTN(0))) K VAUTN
"RTN","SDTRANDV",56,0)
 Q $D(VAUTN)
"RTN","SDTRANDV",57,0)
 ;
"RTN","SDTRANDV",58,0)
QUE() ; -- que job
"RTN","SDTRANDV",59,0)
 ; return: did job que [ 1|yes   0|no ]
"RTN","SDTRANDV",60,0)
 ;
"RTN","SDTRANDV",61,0)
 K ZTSK,IO("Q")
"RTN","SDTRANDV",62,0)
 S ZTDESC="OPC Variable Length Record Date Validation",ZTRTN="START^SDTRAND1"
"RTN","SDTRANDV",63,0)
 F X="VAUTD(","VAUTN(","SDBD","SDBEG","SDED","SDEND","VAUTD","VAUTN","DFN","SDPG","SDLN","SDTOT","SDFLG" S ZTSAVE(X)=""
"RTN","SDTRANDV",64,0)
 D ^%ZTLOAD W:$D(ZTSK) "   (Task: ",ZTSK,")"
"RTN","SDTRANDV",65,0)
 Q $D(ZTSK)
"RTN","SDTRANDV",66,0)
 ;
"RTN","SDVSIT")
0^48^B24896059
"RTN","SDVSIT",1,0)
SDVSIT ;MJK/ALB - Visit Tracking Processing ; 12/1/91
"RTN","SDVSIT",2,0)
 ;;5.3;Scheduling;**27,44**;Aug 13, 1993
"RTN","SDVSIT",3,0)
 ;
"RTN","SDVSIT",4,0)
AE(SDT,SDOEP,SDVIEN) ; -- scan add/edit entry andcreate NEW out pt encounter entry
"RTN","SDVSIT",5,0)
 ; input     SDT := visit date internal format
"RTN","SDVSIT",6,0)
 ;                  also the ien if scheduling visits entry
"RTN","SDVSIT",7,0)
 ;         SDOEP := ien of ^SCE that is the parent encounter[optional]
"RTN","SDVSIT",8,0)
 ;        SDVIEN := Visit file pointer [optional]
"RTN","SDVSIT",9,0)
 ;
"RTN","SDVSIT",10,0)
 N SDAE
"RTN","SDVSIT",11,0)
 ; -- scan multiple
"RTN","SDVSIT",12,0)
 S SDAE=0
"RTN","SDVSIT",13,0)
 F  S SDAE=$O(^SDV(SDT,"CS",SDAE)) Q:'SDAE  D AEUPD(SDT,SDAE,$G(SDOEP),$G(SDVIEN))
"RTN","SDVSIT",14,0)
AEQ Q
"RTN","SDVSIT",15,0)
 ;
"RTN","SDVSIT",16,0)
AEUPD(SDT,SDAE,SDOEP,SDVIEN) ; -- update one entry in multiple
"RTN","SDVSIT",17,0)
 ; input:    SDT := ien of ^SDV
"RTN","SDVSIT",18,0)
 ;          SDAE := ien of "CS" multiple
"RTN","SDVSIT",19,0)
 ;         SDOEP := ien of ^SCE that is the parent encounter[optional]
"RTN","SDVSIT",20,0)
 ;        SDVIEN := Visit file pointer [optional]
"RTN","SDVSIT",21,0)
 ;
"RTN","SDVSIT",22,0)
 N SDOE,DA,DR,DE,DQ,DIE,SD0,SDVSIT
"RTN","SDVSIT",23,0)
 ;
"RTN","SDVSIT",24,0)
 G AEUPDQ:'$G(^SDV(SDT,0)) S X=^(0),SDVSIT("DFN")=$P(X,U,2),SDVSIT("DIV")=$$DIV($P(X,U,3))
"RTN","SDVSIT",25,0)
 I 'SDVSIT("DIV")!('SDVSIT("DFN")) G AEUPDQ
"RTN","SDVSIT",26,0)
 ;
"RTN","SDVSIT",27,0)
 G AEUPDQ:'$D(^SDV(SDT,"CS",SDAE,0)) S SD0=^(0) G AEUPDQ:$P(SD0,U,8)
"RTN","SDVSIT",28,0)
 S SDVSIT("CLN")=+SD0
"RTN","SDVSIT",29,0)
 I $P($G(^DIC(40.7,+SD0,0)),U,2)=900 S SDVSIT("CLN")=+$P($G(^SC(+$P(SD0,U,3),0)),U,7)
"RTN","SDVSIT",30,0)
 I 'SDVSIT("CLN") G AEUPDQ
"RTN","SDVSIT",31,0)
 S:$P(SD0,U,3) SDVSIT("LOC")=$P(SD0,U,3)
"RTN","SDVSIT",32,0)
 S:$P(SD0,U,4) SDVSIT("ELG")=$P(SD0,U,4)
"RTN","SDVSIT",33,0)
 S:$P(SD0,U,5) SDVSIT("TYP")=$P(SD0,U,5)
"RTN","SDVSIT",34,0)
 ; -- call logic to add opt encounter
"RTN","SDVSIT",35,0)
 S SDVSIT("PAR")=$G(SDOEP)
"RTN","SDVSIT",36,0)
 S SDVSIT("ORG")=2,SDVSIT("REF")=SDAE,SDOE=$$SDOEAMB(SDT,SD0,SDAE,.SDVSIT,$G(SDVIEN),$G(SDOEP))
"RTN","SDVSIT",37,0)
 I SDOE S DA=SDAE,DA(1)=SDT,DR="8////"_SDOE,DIE="^SDV("_SDT_",""CS""," D ^DIE
"RTN","SDVSIT",38,0)
AEUPDQ Q
"RTN","SDVSIT",39,0)
 ;
"RTN","SDVSIT",40,0)
APPT(DFN,SDT,SDCL,SDVIEN) ; -- process appt
"RTN","SDVSIT",41,0)
 ; input        DFN = ien of patient file entry
"RTN","SDVSIT",42,0)
 ;              SDT = visit date internal format
"RTN","SDVSIT",43,0)
 ;             SDCL = ien of hospital location file entry
"RTN","SDVSIT",44,0)
 ;           SDVIEN = Visit file pointer [optional]
"RTN","SDVSIT",45,0)
 ;
"RTN","SDVSIT",46,0)
 N SDVSIT,SDOE,DA,DIE,DR,SDPT,SDSC,SDCL0,SDDA
"RTN","SDVSIT",47,0)
 ;
"RTN","SDVSIT",48,0)
 ; -- set node vars
"RTN","SDVSIT",49,0)
 S SDPT=$G(^DPT(DFN,"S",SDT,0))
"RTN","SDVSIT",50,0)
 S SDCL0=$G(^SC(SDCL,0)),SDDA=+$$FIND^SDAM2(DFN,SDT,SDCL)
"RTN","SDVSIT",51,0)
 S SDSC=$G(^SC(SDCL,"S",SDT,1,SDDA,0))
"RTN","SDVSIT",52,0)
 S SDVSIT("CLN")=$P(SDCL0,U,7),SDVSIT("DIV")=$$DIV($P(SDCL0,U,15))
"RTN","SDVSIT",53,0)
 ;
"RTN","SDVSIT",54,0)
 ; -- do checks
"RTN","SDVSIT",55,0)
 I 'SDPT!('SDSC)!($P(SDCL0,U,3)'="C") G APPTQ
"RTN","SDVSIT",56,0)
 I SDCL,+SDPT'=SDCL G APPTQ
"RTN","SDVSIT",57,0)
 I $P(SDPT,U,20) G APPTQ
"RTN","SDVSIT",58,0)
 I 'SDVSIT("CLN")!('SDVSIT("DIV")) G APPTQ
"RTN","SDVSIT",59,0)
 ;
"RTN","SDVSIT",60,0)
 ; -- set the rest
"RTN","SDVSIT",61,0)
 S SDVSIT("DFN")=DFN,SDVSIT("LOC")=SDCL
"RTN","SDVSIT",62,0)
 S:$P(SDSC,U,10) SDVSIT("ELG")=$P(SDSC,U,10)
"RTN","SDVSIT",63,0)
 S:$P(SDPT,U,16) SDVSIT("TYP")=$P(SDPT,U,16)
"RTN","SDVSIT",64,0)
 ;
"RTN","SDVSIT",65,0)
 ; -- call logic to add opt encounter(s)
"RTN","SDVSIT",66,0)
 S SDVSIT("ORG")=1,SDVSIT("REF")=SDDA,SDOE=$$SDOE(SDT,.SDVSIT,$G(SDVIEN))
"RTN","SDVSIT",67,0)
 I SDOE D
"RTN","SDVSIT",68,0)
 .N DA,DIE,DR
"RTN","SDVSIT",69,0)
 .S DA=SDT,DA(1)=DFN,DR="21////"_SDOE,DIE="^DPT("_DFN_",""S""," D ^DIE
"RTN","SDVSIT",70,0)
 ;
"RTN","SDVSIT",71,0)
 ; -- does clinic have a credit stop code
"RTN","SDVSIT",72,0)
 I SDOE,$P(SDCL0,U,18) D
"RTN","SDVSIT",73,0)
 .N X,SDVIENSV
"RTN","SDVSIT",74,0)
 .S X=$G(^DIC(40.7,$P(SDCL0,U,18),0))
"RTN","SDVSIT",75,0)
 .; -- is stop code active?
"RTN","SDVSIT",76,0)
 .I $S('$P(X,U,3):1,1:SDT<$P(X,U,3)) D
"RTN","SDVSIT",77,0)
 ..S SDVSIT("CLN")=$P(SDCL0,U,18),SDVSIT("ORG")=4,SDVSIT("PAR")=SDOE
"RTN","SDVSIT",78,0)
 ..S SDVIENSV=$G(SDVSIT("VST")) K SDVSIT("VST")
"RTN","SDVSIT",79,0)
 ..S X=$$SDOE(SDT,.SDVSIT)
"RTN","SDVSIT",80,0)
 ..; -- restore SDVSIT
"RTN","SDVSIT",81,0)
 ..S SDVSIT("CLN")=$P(SDCL0,U,7),SDVSIT("ORG")=1,SDVSIT("VST")=SDVIENSV K SDVSIT("PAR")
"RTN","SDVSIT",82,0)
 ;
"RTN","SDVSIT",83,0)
APPTQ Q
"RTN","SDVSIT",84,0)
 ;
"RTN","SDVSIT",85,0)
DISP(DFN,SDT,SDVIEN) ; -- process disposition
"RTN","SDVSIT",86,0)
 ; input        DFN = ien of patient file entry
"RTN","SDVSIT",87,0)
 ;              SDT = visit date internal format
"RTN","SDVSIT",88,0)
 ;             SDIV = ien of med ctr file entry
"RTN","SDVSIT",89,0)
 ;           SDVIEN = Visit file pointer [optional]
"RTN","SDVSIT",90,0)
 ;
"RTN","SDVSIT",91,0)
 N SDVSIT,SDOE,DA,DIE,DR,SDIS,SDDA
"RTN","SDVSIT",92,0)
 ;
"RTN","SDVSIT",93,0)
 ; -- set up array and other vars
"RTN","SDVSIT",94,0)
 D ARRAY(.DFN,.SDT,.SDDA,.SDIS,.SDVSIT)
"RTN","SDVSIT",95,0)
 ;
"RTN","SDVSIT",96,0)
 ; -- do checks
"RTN","SDVSIT",97,0)
 I $P(SDIS,U,2)=2!($P(SDIS,U,2)="")!($P(SDIS,U,18)) G DISPQ
"RTN","SDVSIT",98,0)
 I 'SDVSIT("CLN")!('SDVSIT("DIV")) G DISPQ
"RTN","SDVSIT",99,0)
 ;
"RTN","SDVSIT",100,0)
 ; -- call logic to add opt encounter/visit
"RTN","SDVSIT",101,0)
 S SDOE=$$SDOE(SDT,.SDVSIT,$G(SDVIEN))
"RTN","SDVSIT",102,0)
 I SDOE S DA=SDDA,DA(1)=DFN,DR="18////"_SDOE,DIE="^DPT("_DFN_",""DIS""," D ^DIE
"RTN","SDVSIT",103,0)
DISPQ Q
"RTN","SDVSIT",104,0)
 ;
"RTN","SDVSIT",105,0)
ARRAY(DFN,SDT,SDDA,SDIS,SDVSIT) ; -- setup sdvsit for disposition
"RTN","SDVSIT",106,0)
 S SDDA=9999999-SDT,SDIS=$G(^DPT(DFN,"DIS",SDDA,0))
"RTN","SDVSIT",107,0)
 S SDVSIT("CLN")=$O(^DIC(40.7,"C",102,0)),SDVSIT("DIV")=$$DIV(+$P(SDIS,U,4))
"RTN","SDVSIT",108,0)
 S:$P(SDIS,U,13) SDVSIT("ELG")=$P(SDIS,U,13)
"RTN","SDVSIT",109,0)
 S SDVSIT("DFN")=DFN,SDVSIT("ORG")=3,SDVSIT("REF")=SDDA,SDVSIT("VST")="",SDVSIT("TYP")=9
"RTN","SDVSIT",110,0)
 Q
"RTN","SDVSIT",111,0)
 ;
"RTN","SDVSIT",112,0)
DIV(DIV) ; -- determine med div
"RTN","SDVSIT",113,0)
 I $P($G(^DG(43,1,"GL")),U,2),$D(^DG(40.8,+DIV,0)) G DIVQ ; multi-div?
"RTN","SDVSIT",114,0)
 S DIV=+$O(^DG(40.8,0))
"RTN","SDVSIT",115,0)
DIVQ Q DIV
"RTN","SDVSIT",116,0)
 ;
"RTN","SDVSIT",117,0)
 ; -- see bottom of SDVSIT0 for additional doc
"RTN","SDVSIT",118,0)
 ;
"RTN","SDVSIT",119,0)
SDOE(SDT,SDVSIT,SDVIEN,SDOEP) ; -- get visit & encounter
"RTN","SDVSIT",120,0)
 S SDVSIT("VST")=$G(SDVIEN)
"RTN","SDVSIT",121,0)
 ;
"RTN","SDVSIT",122,0)
 ; -- next code line is commented out per SLC request to have
"RTN","SDVSIT",123,0)
 ;    all encounters try to create a visit
"RTN","SDVSIT",124,0)
 ; -- line was left in for future reference
"RTN","SDVSIT",125,0)
 ;IF 'SDVSIT("VST"),$G(SDOEP) S SDVSIT("VST")=$P($G(^SCE(SDOEP,0)),U,5)
"RTN","SDVSIT",126,0)
 ;
"RTN","SDVSIT",127,0)
 IF 'SDVSIT("VST") D VISIT^SDVSIT0(SDT,.SDVSIT)
"RTN","SDVSIT",128,0)
 Q $$NEW^SDVSIT0(SDT,.SDVSIT)
"RTN","SDVSIT",129,0)
 ;
"RTN","SDVSIT",130,0)
SDOEAMB(SDT,SD0,NSDAE,SDVSIT,SDVIEN,SDOEP) ;
"RTN","SDVSIT",131,0)
 ;this subroutine is used to get the outpatient encounter that is
"RTN","SDVSIT",132,0)
 ;associated with the group of procedures.
"RTN","SDVSIT",133,0)
 ;
"RTN","SDVSIT",134,0)
 N SDOE
"RTN","SDVSIT",135,0)
 I $G(AMBVER) DO
"RTN","SDVSIT",136,0)
 .F  S NSDAE=$O(^SDV(SDT,"CS",NSDAE),-1) Q:'NSDAE  DO  Q:$D(SDOE)
"RTN","SDVSIT",137,0)
 ..N NODE,ANS
"RTN","SDVSIT",138,0)
 ..S NODE=^SDV(SDT,"CS",NSDAE,0)
"RTN","SDVSIT",139,0)
 ..Q:$P(NODE,U,3)'=SDVSIT("LOC")  ;not same clinic
"RTN","SDVSIT",140,0)
 ..I $$SAMEPAR^SDSTP2($P(NODE,U,8),$G(SDOEP),$G(SDVSIT0)) DO
"RTN","SDVSIT",141,0)
 ...S SDOE=$P(NODE,U,8)
"RTN","SDVSIT",142,0)
 ...D EXTD(SDOE,.SDVSIT)
"RTN","SDVSIT",143,0)
 ...Q
"RTN","SDVSIT",144,0)
 ..Q
"RTN","SDVSIT",145,0)
 .I '$D(SDOE) DO
"RTN","SDVSIT",146,0)
 ..N PDT
"RTN","SDVSIT",147,0)
 ..I $G(SDOEP) S PDT=+$P(^SCE(SDOEP,0),U,1)
"RTN","SDVSIT",148,0)
 ..E  DO
"RTN","SDVSIT",149,0)
 ...I $D(SDT1) S PDT=SDT1 Q  ;in order to use correct date
"RTN","SDVSIT",150,0)
 ...S PDT=SDT
"RTN","SDVSIT",151,0)
 ...Q
"RTN","SDVSIT",152,0)
 ..S SDOE=$$SDOE(PDT,.SDVSIT,$G(SDVIEN),$G(SDOEP))
"RTN","SDVSIT",153,0)
 .Q
"RTN","SDVSIT",154,0)
 E  S SDOE=$$SDOE(SDT,.SDVSIT,$G(SDVIEN),$G(SDOEP))
"RTN","SDVSIT",155,0)
 Q SDOE
"RTN","SDVSIT",156,0)
 ;
"RTN","SDVSIT",157,0)
EXTD(SDOE,SDVSIT) ;this subroutine builds the dilenated extd. ref.
"RTN","SDVSIT",158,0)
 N JNK
"RTN","SDVSIT",159,0)
 S JNK=":"_SDVSIT("REF")
"RTN","SDVSIT",160,0)
 I SDVSIT("REF")=$P(^SCE(SDOE,0),U,9)!($P(^(0),U,9)[JNK) Q
"RTN","SDVSIT",161,0)
 S $P(^(0),U,9)=$S($P(^SCE(SDOE,0),U,9):$P(^(0),U,9)_":"_SDVSIT("REF"),1:SDVSIT("REF"))
"RTN","SDVSIT",162,0)
 Q
"RTN","SDVSIT2")
0^49^B8771762
"RTN","SDVSIT2",1,0)
SDVSIT2 ;ALB/RMO/MJK - Encounter Utilities;28 DEC 1992 10:00 am
"RTN","SDVSIT2",2,0)
 ;;5.3;Scheduling;**27,44**;08/13/93
"RTN","SDVSIT2",3,0)
 ;; ;
"RTN","SDVSIT2",4,0)
 ;
"RTN","SDVSIT2",5,0)
GETAPT(DFN,SDT,SDCL,SDVIEN) ;Look-up Outpatient Encounter IEN for Appt
"RTN","SDVSIT2",6,0)
 ; Input  -- DFN      Patient file IEN
"RTN","SDVSIT2",7,0)
 ;           SDT      Appointment Date/Time
"RTN","SDVSIT2",8,0)
 ;           SDCL     Hospital Location file IEN for Appt
"RTN","SDVSIT2",9,0)
 ;           SDVIEN   Visit file pointer [optional]
"RTN","SDVSIT2",10,0)
 ; Output -- Outpatient Encounter file IEN
"RTN","SDVSIT2",11,0)
 N Y
"RTN","SDVSIT2",12,0)
 S Y=+$P($G(^DPT(DFN,"S",SDT,0)),"^",20)
"RTN","SDVSIT2",13,0)
 I 'Y D APPT^SDVSIT(DFN,SDT,SDCL,$G(SDVIEN)) S Y=+$P($G(^DPT(DFN,"S",SDT,0)),"^",20)
"RTN","SDVSIT2",14,0)
 IF Y D VIEN(Y,$G(SDVIEN))
"RTN","SDVSIT2",15,0)
 Q +$G(Y)
"RTN","SDVSIT2",16,0)
 ;
"RTN","SDVSIT2",17,0)
GETAE(SDT,SDDA,SDOEP,SDVIEN) ;Look-up Outpatient Encounter IEN for add/edit
"RTN","SDVSIT2",18,0)
 ; Input  -- SDT      Visit Date/Time
"RTN","SDVSIT2",19,0)
 ;           SDDA     Stop Code multiple ien
"RTN","SDVSIT2",20,0)
 ;           SDOEP    Parent encounter ien [optional]
"RTN","SDVSIT2",21,0)
 ;           SDVIEN   Visit file pointer [optional]
"RTN","SDVSIT2",22,0)
 ; Output -- Outpatient Encounter file IEN
"RTN","SDVSIT2",23,0)
 N Y
"RTN","SDVSIT2",24,0)
 S Y=+$P($G(^SDV(SDT,"CS",SDDA,0)),"^",8)
"RTN","SDVSIT2",25,0)
 I 'Y D AEUPD^SDVSIT(SDT,SDDA,$G(SDOEP),$G(SDVIEN)) S Y=+$P($G(^SDV(SDT,"CS",SDDA,0)),"^",8)
"RTN","SDVSIT2",26,0)
 IF Y D VIEN(Y,$G(SDVIEN))
"RTN","SDVSIT2",27,0)
 Q +$G(Y)
"RTN","SDVSIT2",28,0)
 ;
"RTN","SDVSIT2",29,0)
GETDISP(DFN,SDT,SDVIEN) ;Look-up Outpatient Encounter IEN for disposition
"RTN","SDVSIT2",30,0)
 ; Input  -- DFN      Patient file IEN
"RTN","SDVSIT2",31,0)
 ;           SDT      Disposition Date/Time
"RTN","SDVSIT2",32,0)
 ;           SDVIEN   Visit file pointer [optional]
"RTN","SDVSIT2",33,0)
 ; Output -- Outpatient Encounter file IEN
"RTN","SDVSIT2",34,0)
 N Y
"RTN","SDVSIT2",35,0)
 S Y=+$P($G(^DPT(DFN,"DIS",9999999-SDT,0)),"^",18)
"RTN","SDVSIT2",36,0)
 I 'Y D DISP^SDVSIT(DFN,SDT,$G(SDVIEN)) S Y=+$P($G(^DPT(DFN,"DIS",9999999-SDT,0)),"^",18)
"RTN","SDVSIT2",37,0)
 IF Y D VIEN(Y,$G(SDVIEN))
"RTN","SDVSIT2",38,0)
 Q +$G(Y)
"RTN","SDVSIT2",39,0)
 ;
"RTN","SDVSIT2",40,0)
OKAE(SDT,SDDA) ; -- is add/edit ok for credit
"RTN","SDVSIT2",41,0)
 N Y S Y=1
"RTN","SDVSIT2",42,0)
 I $$REQ^SDM1A(SDT)="CO",'$P($G(^SCE(+$P($G(^SDV(SDT,"CS",SDDA,0)),U,8),0)),U,7) S Y=0
"RTN","SDVSIT2",43,0)
 Q Y
"RTN","SDVSIT2",44,0)
 ;
"RTN","SDVSIT2",45,0)
ANC ; -- protocol entry point for adding ancillary a/e's
"RTN","SDVSIT2",46,0)
 N SDOE,SDOE0,SDPT
"RTN","SDVSIT2",47,0)
 G ANCQ:SDAMEVT'=5
"RTN","SDVSIT2",48,0)
 G ANCQ:'$D(^TMP("SDEVT",$J,SDHDL,1,"DPT",0,"AFTER")) S SDPT=^("AFTER")
"RTN","SDVSIT2",49,0)
 S SDOE=+$P(SDPT,U,20),SDOE0=$G(^TMP("SDEVT",$J,SDHDL,1,"SDOE",SDOE,0,"AFTER"))
"RTN","SDVSIT2",50,0)
 I $P($G(^SC(+SDPT,0)),U,17)'="Y",SDPT]"",SDOE0]"" D ANCAE(SDOE0,SDPT)
"RTN","SDVSIT2",51,0)
ANCQ Q
"RTN","SDVSIT2",52,0)
 ;
"RTN","SDVSIT2",53,0)
ANCAE(SDOE0,SDPT) ; -- add a/e's for ancillaries
"RTN","SDVSIT2",54,0)
 Q:$$DATE^SCDXUTL(+$P(SDOE0,U,1))
"RTN","SDVSIT2",55,0)
 N SDC,SDUZ,SDCTYPE,SDMSG,SDATE,SDIV,SDERR,SDCLINIC,SDOE,SDOEP,DFN,SDATYPE
"RTN","SDVSIT2",56,0)
 S SDC=""
"RTN","SDVSIT2",57,0)
 I $P(SDPT,U,3)]"" S SDC=SDC_"108^" ; lab
"RTN","SDVSIT2",58,0)
 I $P(SDPT,U,4)]"" S SDC=SDC_"105^" ; x-ray
"RTN","SDVSIT2",59,0)
 I $P(SDPT,U,5)]"" S SDC=SDC_"107^" ; ekg
"RTN","SDVSIT2",60,0)
 I SDC]"" D
"RTN","SDVSIT2",61,0)
 .S SDUZ=DUZ,SDCTYPE="S",SDMSG=0
"RTN","SDVSIT2",62,0)
 .S SDIV=$P($G(^DG(40.8,+$P(SDOE0,U,11),0)),U,7)
"RTN","SDVSIT2",63,0)
 .S SDATE=$P(+SDOE0,"."),DFN=+$P(SDOE0,U,2)
"RTN","SDVSIT2",64,0)
 .S SDCLINIC=+$P(SDOE0,U,4),SDOEP=+$P(SDPT,U,20),SDATYPE=+$P(SDOE0,U,10)
"RTN","SDVSIT2",65,0)
 .I $$MESSAGE^SDAMEVT4("        ...adding stop codes for ancillary tests")
"RTN","SDVSIT2",66,0)
 .D EN3^SDACS
"RTN","SDVSIT2",67,0)
 Q
"RTN","SDVSIT2",68,0)
 ;
"RTN","SDVSIT2",69,0)
VIEN(SDOE,SDVIEN) ; -- stuff in Visit IEN if not already set
"RTN","SDVSIT2",70,0)
 ;                 -- needed for those sites that don't have
"RTN","SDVSIT2",71,0)
 ;                    scheduling turned on in Visit Tracking
"RTN","SDVSIT2",72,0)
 ; Required input   SDOE = Outpatient Encounter pointer
"RTN","SDVSIT2",73,0)
 ;                SDVIEN = Visit file pointer or null or zero
"RTN","SDVSIT2",74,0)
 ;
"RTN","SDVSIT2",75,0)
 ; -- quit if no vien passed
"RTN","SDVSIT2",76,0)
 G VIENQ:'SDVIEN
"RTN","SDVSIT2",77,0)
 N Y,SDOE0
"RTN","SDVSIT2",78,0)
 S SDOE0=$G(^SCE(+SDOE,0))
"RTN","SDVSIT2",79,0)
 ; -- quit is no encounter
"RTN","SDVSIT2",80,0)
 G VIENQ:SDOE0=""
"RTN","SDVSIT2",81,0)
 ; -- set visit ien if vien not already set
"RTN","SDVSIT2",82,0)
 IF '$P(SDOE0,U,5) D
"RTN","SDVSIT2",83,0)
 . N DIE,DA,DR
"RTN","SDVSIT2",84,0)
 . S DIE="^SCE(",DA=SDOE,DR=".05////"_SDVIEN D ^DIE
"RTN","SDVSIT2",85,0)
 IF '$P(SDOE0,U,4) D
"RTN","SDVSIT2",86,0)
 . N DIE,DA,DR,SDLOC
"RTN","SDVSIT2",87,0)
 . S SDLOC=$P($G(^AUPNVSIT(SDVIEN,0)),U,22)
"RTN","SDVSIT2",88,0)
 . IF SDLOC S DIE="^SCE(",DA=SDOE,DR=".04////"_SDLOC D ^DIE
"RTN","SDVSIT2",89,0)
VIENQ Q
"RTN","SDVSIT2",90,0)
 ;
"SEC","^DD",404.91,404.91,701,9)
"@"
"SEC","^DD",404.91,404.91,704,9)
"@"
"SEC","^DD",404.91,404.91,705,9)
"@"
"SEC","^DD",404.91,404.91,706,9)
"@"
"SEC","^DD",404.91,404.91,707,9)
"@"
"SEC","^DIC",404.91,404.91,0,"DD")
@
"SEC","^DIC",404.91,404.91,0,"DEL")
@
"SEC","^DIC",404.91,404.91,0,"LAYGO")
@
"SEC","^DIC",404.91,404.91,0,"RD")
d
"SEC","^DIC",404.91,404.91,0,"WR")
@
"SEC","^DIC",409.73,409.73,0,"DD")
@
"SEC","^DIC",409.73,409.73,0,"DEL")
@
"SEC","^DIC",409.73,409.73,0,"LAYGO")
@
"SEC","^DIC",409.73,409.73,0,"RD")
d
"SEC","^DIC",409.73,409.73,0,"WR")
@
"SEC","^DIC",409.74,409.74,0,"DD")
@
"SEC","^DIC",409.74,409.74,0,"DEL")
@
"SEC","^DIC",409.74,409.74,0,"LAYGO")
@
"SEC","^DIC",409.74,409.74,0,"RD")
d
"SEC","^DIC",409.74,409.74,0,"WR")
@
"SEC","^DIC",409.75,409.75,0,"DD")
@
"SEC","^DIC",409.75,409.75,0,"DEL")
@
"SEC","^DIC",409.75,409.75,0,"LAYGO")
@
"SEC","^DIC",409.75,409.75,0,"RD")
d
"SEC","^DIC",409.75,409.75,0,"WR")
@
"SEC","^DIC",409.76,409.76,0,"DD")
@
"SEC","^DIC",409.76,409.76,0,"DEL")
@
"SEC","^DIC",409.76,409.76,0,"LAYGO")
@
"SEC","^DIC",409.76,409.76,0,"RD")
d
"SEC","^DIC",409.76,409.76,0,"WR")
@
"VER")
8.0^21.0
"^DD",404.91,404.91,0)
FIELD^^707^14
"^DD",404.91,404.91,0,"DDA")
N
"^DD",404.91,404.91,0,"DT")
2960711
"^DD",404.91,404.91,0,"IX","B",404.91,.01)

"^DD",404.91,404.91,0,"NM","SCHEDULING PARAMETER")

"^DD",404.91,404.91,0,"VRPK")
SD
"^DD",404.91,404.91,.001,0)
ENTRY NUMBER^NJ1,0^^ ^K:+X'=X!(X>1)!(X<1)!(X?.E1"."1N.N) X
"^DD",404.91,404.91,.001,3)
Type a Number between 1 and 1, 0 Decimal Digits
"^DD",404.91,404.91,.001,21,0)
^^3^3^2950606^^
"^DD",404.91,404.91,.001,21,1,0)
This field is the primary key field in the Scheduling Parameter file.
"^DD",404.91,404.91,.001,21,2,0)
 
"^DD",404.91,404.91,.001,21,3,0)
A site has only one scheduling parameter table entry and it must equal 1.
"^DD",404.91,404.91,.001,"DT")
2941123
"^DD",404.91,404.91,.01,0)
ID^RNJ1,0^^0;1^K:+X'=X!(X>1)!(X<1)!(X?.E1"."1N.N) X
"^DD",404.91,404.91,.01,1,0)
^.1
"^DD",404.91,404.91,.01,1,1,0)
404.91^B
"^DD",404.91,404.91,.01,1,1,1)
S ^SD(404.91,"B",$E(X,1,30),DA)=""
"^DD",404.91,404.91,.01,1,1,2)
K ^SD(404.91,"B",$E(X,1,30),DA)
"^DD",404.91,404.91,.01,1,1,"%D",0)
^^1^1^2950606^
"^DD",404.91,404.91,.01,1,1,"%D",1,0)
This cross-reference allows look-up by ID.
"^DD",404.91,404.91,.01,3)
Type a Number between 1 and 1, 0 Decimal Digits
"^DD",404.91,404.91,.01,21,0)
^^4^4^2950606^^
"^DD",404.91,404.91,.01,21,1,0)
Internal entry number of parameter entry.  It must equal 1.
"^DD",404.91,404.91,.01,21,2,0)
 
"^DD",404.91,404.91,.01,21,3,0)
This field is the internal entry number to the parameter file and it must
"^DD",404.91,404.91,.01,21,4,0)
equal 1.  A site has only one scheduling parameter table entry.
"^DD",404.91,404.91,.01,"DT")
2941121
"^DD",404.91,404.91,701,0)
LAST XMIT OUTPAT ENC NUMBER^RNJ15,0I^^AMB;1^K:+X'=X!(X>999999999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",404.91,404.91,701,3)
Type a Number between 1 and 999999999999999, 0 Decimal Digits
"^DD",404.91,404.91,701,21,0)
^^2^2^2960728^^^
"^DD",404.91,404.91,701,21,1,0)
This field contains the last value used for the NUMBER field (#.01) when
"^DD",404.91,404.91,701,21,2,0)
creating entries in the TRANSMITTED OUTPATIENT ENCOUNTER file (#409.73).
"^DD",404.91,404.91,701,"DT")
2960430
"^DD",404.91,404.91,702,0)
AMB CARE HL7 DATE^D^^AMB;2^S %DT="ET" D ^%DT S X=Y K:Y<1 X
"^DD",404.91,404.91,702,21,0)
^^3^3^2960501^
"^DD",404.91,404.91,702,21,1,0)
This is the date when the software is to begin storing and transmitting
"^DD",404.91,404.91,702,21,2,0)
the new data for the Ambulatory Care Reporting project.  In this case this
"^DD",404.91,404.91,702,21,3,0)
date will be 10/1/96
"^DD",404.91,404.91,702,"DT")
2960501
"^DD",404.91,404.91,703,0)
AMB CARE CLOSE OUT^D^^AMB;3^S %DT="ET" D ^%DT S X=Y K:Y<1 X
"^DD",404.91,404.91,703,21,0)
^^2^2^2960522^^
"^DD",404.91,404.91,703,21,1,0)
This field contains the closeout date for the OPC generation and
"^DD",404.91,404.91,703,21,2,0)
transmission.
"^DD",404.91,404.91,703,"DT")
2960514
"^DD",404.91,404.91,704,0)
AMB CARE LAG FOR ACK^NJ3,0^^AMB;4^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",404.91,404.91,704,3)
Type a Number between 1 and 999, 0 Decimal Digits
"^DD",404.91,404.91,704,21,0)
^^2^2^2960522^^
"^DD",404.91,404.91,704,21,1,0)
Number of days to wait for acknowledgments to Ambulatory Care
"^DD",404.91,404.91,704,21,2,0)
transmissions
"^DD",404.91,404.91,704,"DT")
2960522
"^DD",404.91,404.91,705,0)
CLINIC UPDATE QUEUED FOR^DI^^AMB;5^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",404.91,404.91,705,21,0)
^^2^2^2960728^^^
"^DD",404.91,404.91,705,21,1,0)
Date/time updating all clinic entries in Hospital Location file was queued
"^DD",404.91,404.91,705,21,2,0)
to run.  This value is entered during the installation process.
"^DD",404.91,404.91,705,"DT")
2960711
"^DD",404.91,404.91,706,0)
CLINIC UPDATE TASK #^NJ15,0I^^AMB;6^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",404.91,404.91,706,3)
Type a Number between 0 and 999999999999999, 0 Decimal Digits
"^DD",404.91,404.91,706,21,0)
^^3^3^2960728^^
"^DD",404.91,404.91,706,21,1,0)
Task number assigned to background job that will upate all clinic entries
"^DD",404.91,404.91,706,21,2,0)
in Hospital Location file. This value is entered during the installation
"^DD",404.91,404.91,706,21,3,0)
process.
"^DD",404.91,404.91,706,"DT")
2960711
"^DD",404.91,404.91,707,0)
CLINIC UPDATE COMPLETED ON^DI^^AMB;7^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",404.91,404.91,707,21,0)
^^2^2^2960711^
"^DD",404.91,404.91,707,21,1,0)
Date/time updating all clinic entries in Hospital Location file was
"^DD",404.91,404.91,707,21,2,0)
completed.  This value is entered by the background job.
"^DD",404.91,404.91,707,"DT")
2960723
"^DD",404.91,404.91,801,0)
USE USR CLASS FUNCTIONALITY?^SX^1:YES;0:NO;^PCMM;1^D:'$D(^USR)&($G(X)) EN^DDIOL("   TIU's USR Class Files are required","","?5") K:'$D(^USR)&($G(X)) X
"^DD",404.91,404.91,801,3)
If 'YES' is answered, TIU's USR Class functionality will be enforced on Position Assignments.
"^DD",404.91,404.91,801,21,0)
^^4^4^2960329^^
"^DD",404.91,404.91,801,21,1,0)
This tells the PCMM software to use TIU's USR Class functionality that
"^DD",404.91,404.91,801,21,2,0)
tells if a user is a member of a user class.
"^DD",404.91,404.91,801,21,3,0)
If this is unanswered or 'NO', any staff member in the NEW PERSON File (#200)
"^DD",404.91,404.91,801,21,4,0)
will be assignable to team positions.
"^DD",404.91,404.91,801,"DT")
2960313
"^DD",404.91,404.91,802,0)
CHECK PC TEAM AT DISCHARGE?^S^1:YES;0:NO;^PCMM;2^Q
"^DD",404.91,404.91,802,3)
Enter YES if users will be prompted to add a patient to a PC Team, if they are not assigned one.
"^DD",404.91,404.91,802,21,0)
^^3^3^2960402^
"^DD",404.91,404.91,802,21,1,0)
This controls whether the user will be asked if they want to assign the
"^DD",404.91,404.91,802,21,2,0)
patient to a primary care team upon inpatient discharge.
"^DD",404.91,404.91,802,21,3,0)
Edits to discharges will also evoke this functionality.
"^DD",404.91,404.91,802,"DT")
2960402
"^DD",404.91,404.91,803,0)
ENABLE AUTOLINK FUNCTIONALITY?^S^1:YES;0:NO;^PCMM;3^Q
"^DD",404.91,404.91,803,3)
Enter 'YES' if Teams can be Autolinked with Wards, Practitioners, Room-Beds, or Specialities.
"^DD",404.91,404.91,803,21,0)
^^1^1^2960502^
"^DD",404.91,404.91,803,21,1,0)
This should generally be turned on only for sites with CPRS installed.
"^DD",404.91,404.91,803,"DT")
2960502
"^DD",404.91,404.91,901,0)
EARLIEST ENCOUNTER DATE^RD^^CNV;1^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",404.91,404.91,901,.1)
EARLIEST ENCOUNTER CONVERSION DATE
"^DD",404.91,404.91,901,21,0)
^^3^3^2951120^^^^
"^DD",404.91,404.91,901,21,1,0)
This field contains the earliest date to convert encounters.  For example,
"^DD",404.91,404.91,901,21,2,0)
if 10/1/84 is entered in this field, encounters before 10/1/84 cannot
"^DD",404.91,404.91,901,21,3,0)
be converted via the encounter conversion utilities.
"^DD",404.91,404.91,901,"DT")
2951212
"^DD",404.91,404.91,902,0)
ONLY INACTIVE ENCOUNTERS^RS^0:NO;1:YES;^CNV;2^Q
"^DD",404.91,404.91,902,9)
^
"^DD",404.91,404.91,902,21,0)
^^3^3^2951120^
"^DD",404.91,404.91,902,21,1,0)
If this field is set to 'Yes', only inactive ancounters can be converted.
"^DD",404.91,404.91,902,21,2,0)
An inactive encounter is "an encounter which occurred prior to last fiscal
"^DD",404.91,404.91,902,21,3,0)
year."
"^DD",404.91,404.91,902,"DT")
2960509
"^DD",409.43,409.43,.03,0)
DIAGNOSIS RANKING^F^^0;3^K:$L(X)>3!($L(X)<1) X
"^DD",409.43,409.43,.03,3)
Answer must be 1-3 characters in length.
"^DD",409.43,409.43,.03,21,0)
^^2^2^2960503^
"^DD",409.43,409.43,.03,21,1,0)
This field is to hold the ranking of the particular diagnosis related to
"^DD",409.43,409.43,.03,21,2,0)
the encounter.  Currently a number one will indicate the primary diagnosis.
"^DD",409.43,409.43,.03,"DT")
2960503
"^DD",409.44,409.44,.03,0)
PROVIDER TYPE CODE^P8932.1'^USC(8932.1,^0;3^Q
"^DD",409.44,409.44,.03,3)

"^DD",409.44,409.44,.03,21,0)
^^2^2^2960725^
"^DD",409.44,409.44,.03,21,1,0)
This field contains the provider type code associated with the provider at
"^DD",409.44,409.44,.03,21,2,0)
the time of the outpatient encounter.
"^DD",409.44,409.44,.03,"DT")
2960718
"^DD",409.68,409.68,.05,0)
VISIT FILE ENTRY^P9000010^AUPNVSIT(^0;5^Q
"^DD",409.68,409.68,.05,1,0)
^.1
"^DD",409.68,409.68,.05,1,1,0)
409.68^AVSIT
"^DD",409.68,409.68,.05,1,1,1)
S ^SCE("AVSIT",$E(X,1,30),DA)=""
"^DD",409.68,409.68,.05,1,1,2)
K ^SCE("AVSIT",$E(X,1,30),DA)
"^DD",409.68,409.68,.05,1,1,"%D",0)
^^2^2^2930209^
"^DD",409.68,409.68,.05,1,1,"%D",1,0)
This is the standard cross reference set for the Visit Tracking
"^DD",409.68,409.68,.05,1,1,"%D",2,0)
application.
"^DD",409.68,409.68,.05,1,1,"DT")
2930209
"^DD",409.68,409.68,.05,1,2,0)
409.68^AVCNT^MUMPS
"^DD",409.68,409.68,.05,1,2,1)
N SDX S SDX=X,X="VSIT" X ^%ZOSF("TEST") I $T S X=SDX D ADD^VSIT
"^DD",409.68,409.68,.05,1,2,2)
N SDX S SDX=X,X="VSIT" X ^%ZOSF("TEST") I $T S X=SDX D SUB^VSIT
"^DD",409.68,409.68,.05,1,2,"%D",0)
^^2^2^2930511^^^^
"^DD",409.68,409.68,.05,1,2,"%D",1,0)
This cross refernce calls Visit Tracking code to increment and
"^DD",409.68,409.68,.05,1,2,"%D",2,0)
decrement the VISIT file's DEPENDENT ENTRY COUNT field.
"^DD",409.68,409.68,.05,1,2,"DT")
2930511
"^DD",409.68,409.68,.05,1,3,0)
^^TRIGGER^409.68^.2
"^DD",409.68,409.68,.05,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^SCE(D0,0)):^(0),1:"") S X=$P(Y(1),U,20),X=X S DIU=X K Y S X=DIV S X=$$IEN2VID^VSIT(X) X ^DD(409.68,.05,1,3,1.4)
"^DD",409.68,409.68,.05,1,3,1.4)
S DIH=$S($D(^SCE(DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,20)=DIV,DIH=409.68,DIG=.2 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.68,409.68,.05,1,3,2)
Q
"^DD",409.68,409.68,.05,1,3,"%D",0)
^^1^1^2960506^^
"^DD",409.68,409.68,.05,1,3,"%D",1,0)
This trigger is to collect the Unique Visit ID when a Visit IEN is entered.
"^DD",409.68,409.68,.05,1,3,"CREATE VALUE")
S X=$$IEN2VID^VSIT(X)
"^DD",409.68,409.68,.05,1,3,"DELETE VALUE")
NO EFFECT
"^DD",409.68,409.68,.05,1,3,"DT")
2960503
"^DD",409.68,409.68,.05,1,3,"FIELD")
UNIQ
"^DD",409.68,409.68,.05,3)

"^DD",409.68,409.68,.05,21,0)
^^4^4^2930511^
"^DD",409.68,409.68,.05,21,1,0)
This field indicates the VISIT file entry associated with this encounter.
"^DD",409.68,409.68,.05,21,2,0)

"^DD",409.68,409.68,.05,21,3,0)
This field is  optional and will only be filled in if the site is running
"^DD",409.68,409.68,.05,21,4,0)
the Visit Tracking module.
"^DD",409.68,409.68,.05,"DT")
2960503
"^DD",409.68,409.68,.09,0)
EXTENDED REFERENCE^FI^^0;9^K:$L(X)>60!($L(X)<1) X
"^DD",409.68,409.68,.09,3)
Answer must be 1-60 characters in length.
"^DD",409.68,409.68,.09,21,0)
^^16^16^2960501^^
"^DD",409.68,409.68,.09,21,1,0)
This field indicates the internal multiple entry of the originating
"^DD",409.68,409.68,.09,21,2,0)
process that created the encounter.
"^DD",409.68,409.68,.09,21,3,0)

"^DD",409.68,409.68,.09,21,4,0)
The reference mapping is the following:
"^DD",409.68,409.68,.09,21,5,0)
 
"^DD",409.68,409.68,.09,21,6,0)
        Originating Process    Global Reference
"^DD",409.68,409.68,.09,21,7,0)
        -------------------    ----------------
"^DD",409.68,409.68,.09,21,8,0)
        1 - appointments       ^SC(<LOCATION>,"S",<DATE/TIME>,1,<EXTERNAL REF>)
"^DD",409.68,409.68,.09,21,9,0)
        2 - add/edits          ^SDV(<DATE/TIME>,"CS",<EXTERNAL REFERENCE>)
"^DD",409.68,409.68,.09,21,10,0)
                               This will be the format up to 10/1/96.  At
"^DD",409.68,409.68,.09,21,11,0)
                               that point this field will contain the IENs
"^DD",409.68,409.68,.09,21,12,0)
                               but in a #:#:# delineated format.
"^DD",409.68,409.68,.09,21,13,0)
        3 - dispositions       ^DPT(<PATIENT>,"DIS",<EXTERNAL REFERENCE>)
"^DD",409.68,409.68,.09,21,14,0)

"^DD",409.68,409.68,.09,21,15,0)
NOTE: This field will eventually be deleted when the old encounter data 
"^DD",409.68,409.68,.09,21,16,0)
      structures are removed as part of the scheduling re-design.
"^DD",409.68,409.68,.09,"DT")
2960607
"^DD",409.68,409.68,.2,0)
UNIQUE VISIT NUMBER^F^^0;20^K:$L(X)>12!($L(X)<1) X
"^DD",409.68,409.68,.2,3)
Answer must be 1-12 characters in length.
"^DD",409.68,409.68,.2,5,1,0)
409.68^.05^3
"^DD",409.68,409.68,.2,21,0)
^^4^4^2960503^
"^DD",409.68,409.68,.2,21,1,0)
This is the unique visit ID created by PCE.  It is stored for every
"^DD",409.68,409.68,.2,21,2,0)
encounter.  This number will be obtained from a supported call provided
"^DD",409.68,409.68,.2,21,3,0)
by PCE.
"^DD",409.68,409.68,.2,21,4,0)
 
"^DD",409.68,409.68,.2,"DT")
2960503
"^DD",409.73,409.73,0)
FIELD^^20.03^14
"^DD",409.73,409.73,0,"DDA")
N
"^DD",409.73,409.73,0,"DT")
2960429
"^DD",409.73,409.73,0,"IX","AACBID",409.73,13)

"^DD",409.73,409.73,0,"IX","AACLST",409.73,11)

"^DD",409.73,409.73,0,"IX","AACMID",409.73,12)

"^DD",409.73,409.73,0,"IX","AACNA1",409.73,11)

"^DD",409.73,409.73,0,"IX","AACNA2",409.73,14)

"^DD",409.73,409.73,0,"IX","AACXMIT1",409.73,.04)

"^DD",409.73,409.73,0,"IX","AACXMIT2",409.73,.06)

"^DD",409.73,409.73,0,"IX","ADEL",409.73,.03)

"^DD",409.73,409.73,0,"IX","AENC",409.73,.02)

"^DD",409.73,409.73,0,"IX","B",409.73,.01)

"^DD",409.73,409.73,0,"NM","TRANSMITTED OUTPATIENT ENCOUNTER")

"^DD",409.73,409.73,0,"PT",409.75,.01)

"^DD",409.73,409.73,.01,0)
NUMBER^RNJ15,0^^0;1^K:+X'=X!(X>999999999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",409.73,409.73,.01,.1)
Number
"^DD",409.73,409.73,.01,1,0)
^.1
"^DD",409.73,409.73,.01,1,1,0)
409.73^B
"^DD",409.73,409.73,.01,1,1,1)
S ^SD(409.73,"B",$E(X,1,30),DA)=""
"^DD",409.73,409.73,.01,1,1,2)
K ^SD(409.73,"B",$E(X,1,30),DA)
"^DD",409.73,409.73,.01,3)
Type a Number between 1 and 999999999999999, 0 Decimal Digits
"^DD",409.73,409.73,.01,7.5)
I X="+" S X=$$AUTO^SCDXFX01()
"^DD",409.73,409.73,.01,21,0)
^^3^3^2960430^
"^DD",409.73,409.73,.01,21,1,0)
Number to uniquely identify entries in the file.
"^DD",409.73,409.73,.01,21,2,0)
 
"^DD",409.73,409.73,.01,21,3,0)
This number is automatically generated if a value of '+' is entered.
"^DD",409.73,409.73,.01,"DT")
2960429
"^DD",409.73,409.73,.02,0)
OUTPATIENT ENCOUNTER^P409.68'^SCE(^0;2^Q
"^DD",409.73,409.73,.02,.1)
Outpatient Encounter
"^DD",409.73,409.73,.02,1,0)
^.1
"^DD",409.73,409.73,.02,1,1,0)
409.73^AENC
"^DD",409.73,409.73,.02,1,1,1)
S ^SD(409.73,"AENC",$E(X,1,30),DA)=""
"^DD",409.73,409.73,.02,1,1,2)
K ^SD(409.73,"AENC",$E(X,1,30),DA)
"^DD",409.73,409.73,.02,1,1,"%D",0)
^^10^10^2960502^
"^DD",409.73,409.73,.02,1,1,"%D",1,0)
Cross reference for sorting entries that point to the OUTPATIENT
"^DD",409.73,409.73,.02,1,1,"%D",2,0)
ENCOUNTER file (#409.68).
"^DD",409.73,409.73,.02,1,1,"%D",3,0)
 
"^DD",409.73,409.73,.02,1,1,"%D",4,0)
 
"^DD",409.73,409.73,.02,1,1,"%D",5,0)
Resulting node:
"^DD",409.73,409.73,.02,1,1,"%D",6,0)
  ^SD(409.73,"AENC",[.02],DA)
"^DD",409.73,409.73,.02,1,1,"%D",7,0)
 
"^DD",409.73,409.73,.02,1,1,"%D",8,0)
Where:
"^DD",409.73,409.73,.02,1,1,"%D",9,0)
  [.02] = Value contained in OUTPATIENT ENCOUNTER field (#.02)
"^DD",409.73,409.73,.02,1,1,"%D",10,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,.02,1,1,"DT")
2960502
"^DD",409.73,409.73,.02,3)
Enter the entry in the Outpatient Encounter file that requires transmission
"^DD",409.73,409.73,.02,21,0)
^^1^1^2960429^
"^DD",409.73,409.73,.02,21,1,0)
Entry in Outpatient Encounter file that requires transmission.
"^DD",409.73,409.73,.02,"DT")
2960502
"^DD",409.73,409.73,.03,0)
DELETED OUTPATIENT ENCOUNTER^P409.74'^SD(409.74,^0;3^Q
"^DD",409.73,409.73,.03,.1)
Deleted Outpatient Encounter
"^DD",409.73,409.73,.03,1,0)
^.1
"^DD",409.73,409.73,.03,1,1,0)
409.73^ADEL
"^DD",409.73,409.73,.03,1,1,1)
S ^SD(409.73,"ADEL",$E(X,1,30),DA)=""
"^DD",409.73,409.73,.03,1,1,2)
K ^SD(409.73,"ADEL",$E(X,1,30),DA)
"^DD",409.73,409.73,.03,1,1,"%D",0)
^^10^10^2960502^
"^DD",409.73,409.73,.03,1,1,"%D",1,0)
Cross reference for sorting entries that point to the DELETED OUTPATIENT 
"^DD",409.73,409.73,.03,1,1,"%D",2,0)
ENCOUNTER file (#409.74).
"^DD",409.73,409.73,.03,1,1,"%D",3,0)
 
"^DD",409.73,409.73,.03,1,1,"%D",4,0)
 
"^DD",409.73,409.73,.03,1,1,"%D",5,0)
Resulting node:
"^DD",409.73,409.73,.03,1,1,"%D",6,0)
  ^SD(409.73,"ADEL",[.03],DA)
"^DD",409.73,409.73,.03,1,1,"%D",7,0)
 
"^DD",409.73,409.73,.03,1,1,"%D",8,0)
Where:
"^DD",409.73,409.73,.03,1,1,"%D",9,0)
  [.03] = Value contained in DELETED OUTPATIENT ENCOUNTER field (#.03)
"^DD",409.73,409.73,.03,1,1,"%D",10,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,.03,1,1,"DT")
2960502
"^DD",409.73,409.73,.03,3)
Enter the entry in the Deleted Outpatient Encounter file that requires transmission
"^DD",409.73,409.73,.03,21,0)
^^1^1^2960429^
"^DD",409.73,409.73,.03,21,1,0)
Entry in Deleted Outpatient Encounter file that requires transmssion.
"^DD",409.73,409.73,.03,"DT")
2960502
"^DD",409.73,409.73,.04,0)
TRANSMISSION REQUIRED^S^0:NO;1:YES;^0;4^Q
"^DD",409.73,409.73,.04,.1)
Transmission Required
"^DD",409.73,409.73,.04,1,0)
^.1
"^DD",409.73,409.73,.04,1,1,0)
409.73^AACXMIT1^MUMPS
"^DD",409.73,409.73,.04,1,1,1)
D AACXMIT^SCDXFX01(DA,-1)
"^DD",409.73,409.73,.04,1,1,2)
D AACXMIT^SCDXFX01(DA,0)
"^DD",409.73,409.73,.04,1,1,"%D",0)
^^12^12^2960509^^^
"^DD",409.73,409.73,.04,1,1,"%D",1,0)
This cross reference is used to flag entries for transmission to the
"^DD",409.73,409.73,.04,1,1,"%D",2,0)
National Patient Care Database.  The TRANSMISSION EVENT field (#.05) is
"^DD",409.73,409.73,.04,1,1,"%D",3,0)
checked for an add, edit, delete, or retransmit event before setting the
"^DD",409.73,409.73,.04,1,1,"%D",4,0)
cross reference.
"^DD",409.73,409.73,.04,1,1,"%D",5,0)
 
"^DD",409.73,409.73,.04,1,1,"%D",6,0)
 
"^DD",409.73,409.73,.04,1,1,"%D",7,0)
Resulting node:
"^DD",409.73,409.73,.04,1,1,"%D",8,0)
  ^SD(409.73,"AACXMIT",[.06],DA)
"^DD",409.73,409.73,.04,1,1,"%D",9,0)
 
"^DD",409.73,409.73,.04,1,1,"%D",10,0)
Where:
"^DD",409.73,409.73,.04,1,1,"%D",11,0)
  [.06] = Value contained in DATE/TIME OF EVENT field (#.06)
"^DD",409.73,409.73,.04,1,1,"%D",12,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,.04,1,1,"DT")
2960509
"^DD",409.73,409.73,.04,1,2,0)
^^TRIGGER^409.73^11
"^DD",409.73,409.73,.04,1,2,1)
X ^DD(409.73,.04,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^SD(409.73,D0,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(409.73,.04,1,2,1.4)
"^DD",409.73,409.73,.04,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(409.73,.04,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="YES"
"^DD",409.73,409.73,.04,1,2,1.4)
S DIH=$S($D(^SD(409.73,DIV(0),1)):^(1),1:""),DIV=X S $P(^(1),U,1)=DIV,DIH=409.73,DIG=11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.73,409.73,.04,1,2,2)
Q
"^DD",409.73,409.73,.04,1,2,"%D",0)
^^1^1^2960515^
"^DD",409.73,409.73,.04,1,2,"%D",1,0)
Deletes value contained in DATE/TIME OF XMIT TO NPCDB field (#11)
"^DD",409.73,409.73,.04,1,2,"CREATE CONDITION")
TRANSMISSION REQUIRED="YES"
"^DD",409.73,409.73,.04,1,2,"CREATE VALUE")
@
"^DD",409.73,409.73,.04,1,2,"DELETE VALUE")
NO EFFECT
"^DD",409.73,409.73,.04,1,2,"DT")
2960515
"^DD",409.73,409.73,.04,1,2,"FIELD")
DATE/TIME OF XMIT TO NPCDB
"^DD",409.73,409.73,.04,1,3,0)
^^TRIGGER^409.73^12
"^DD",409.73,409.73,.04,1,3,1)
X ^DD(409.73,.04,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^SD(409.73,D0,1)):^(1),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(409.73,.04,1,3,1.4)
"^DD",409.73,409.73,.04,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(409.73,.04,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="YES"
"^DD",409.73,409.73,.04,1,3,1.4)
S DIH=$S($D(^SD(409.73,DIV(0),1)):^(1),1:""),DIV=X S $P(^(1),U,2)=DIV,DIH=409.73,DIG=12 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.73,409.73,.04,1,3,2)
Q
"^DD",409.73,409.73,.04,1,3,"%D",0)
^^1^1^2960515^
"^DD",409.73,409.73,.04,1,3,"%D",1,0)
Deletes value contained in MESSAGE ID OF XMIT TO NPCDB field (#12)
"^DD",409.73,409.73,.04,1,3,"CREATE CONDITION")
TRANSMISSION REQUIRED="YES"
"^DD",409.73,409.73,.04,1,3,"CREATE VALUE")
@
"^DD",409.73,409.73,.04,1,3,"DELETE VALUE")
NO EFFECT
"^DD",409.73,409.73,.04,1,3,"DT")
2960515
"^DD",409.73,409.73,.04,1,3,"FIELD")
MESSAGE ID OF XMIT TO NPCDB
"^DD",409.73,409.73,.04,1,4,0)
^^TRIGGER^409.73^13
"^DD",409.73,409.73,.04,1,4,1)
X ^DD(409.73,.04,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^SD(409.73,D0,1)):^(1),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(409.73,.04,1,4,1.4)
"^DD",409.73,409.73,.04,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(409.73,.04,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="YES"
"^DD",409.73,409.73,.04,1,4,1.4)
S DIH=$S($D(^SD(409.73,DIV(0),1)):^(1),1:""),DIV=X S $P(^(1),U,3)=DIV,DIH=409.73,DIG=13 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.73,409.73,.04,1,4,2)
Q
"^DD",409.73,409.73,.04,1,4,"%D",0)
^^1^1^2960515^
"^DD",409.73,409.73,.04,1,4,"%D",1,0)
Deletes value contained in BATCH ID OF XMIT TO NPCDB field (#13)
"^DD",409.73,409.73,.04,1,4,"CREATE CONDITION")
TRANSMISSION REQUIRED="YES"
"^DD",409.73,409.73,.04,1,4,"CREATE VALUE")
@
"^DD",409.73,409.73,.04,1,4,"DELETE VALUE")
NO EFFECT
"^DD",409.73,409.73,.04,1,4,"DT")
2960515
"^DD",409.73,409.73,.04,1,4,"FIELD")
BATCH ID OF XMIT TO NPCDB
"^DD",409.73,409.73,.04,1,5,0)
^^TRIGGER^409.73^14
"^DD",409.73,409.73,.04,1,5,1)
X ^DD(409.73,.04,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^SD(409.73,D0,1)):^(1),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(409.73,.04,1,5,1.4)
"^DD",409.73,409.73,.04,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(409.73,.04,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="YES"
"^DD",409.73,409.73,.04,1,5,1.4)
S DIH=$S($D(^SD(409.73,DIV(0),1)):^(1),1:""),DIV=X S $P(^(1),U,4)=DIV,DIH=409.73,DIG=14 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.73,409.73,.04,1,5,2)
Q
"^DD",409.73,409.73,.04,1,5,"%D",0)
^^1^1^2960515^
"^DD",409.73,409.73,.04,1,5,"%D",1,0)
Deletes value contained in DATE/TIME OF ACK FROM NPCDB field (#14)
"^DD",409.73,409.73,.04,1,5,"CREATE CONDITION")
TRANSMISSION REQUIRED="YES"
"^DD",409.73,409.73,.04,1,5,"CREATE VALUE")
@
"^DD",409.73,409.73,.04,1,5,"DELETE VALUE")
NO EFFECT
"^DD",409.73,409.73,.04,1,5,"DT")
2960515
"^DD",409.73,409.73,.04,1,5,"FIELD")
DATE/TIME OF ACK FROM NPCDB
"^DD",409.73,409.73,.04,1,6,0)
^^TRIGGER^409.73^15
"^DD",409.73,409.73,.04,1,6,1)
X ^DD(409.73,.04,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^SD(409.73,D0,1)):^(1),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(409.73,.04,1,6,1.4)
"^DD",409.73,409.73,.04,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(409.73,.04,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="YES"
"^DD",409.73,409.73,.04,1,6,1.4)
S DIH=$S($D(^SD(409.73,DIV(0),1)):^(1),1:""),DIV=X S $P(^(1),U,5)=DIV,DIH=409.73,DIG=15 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.73,409.73,.04,1,6,2)
Q
"^DD",409.73,409.73,.04,1,6,"%D",0)
^^1^1^2960515^
"^DD",409.73,409.73,.04,1,6,"%D",1,0)
Deletes value contained in ACK CODE FOR ACK FROM NPCDB field (#15)
"^DD",409.73,409.73,.04,1,6,"CREATE CONDITION")
TRANSMISSION REQUIRED="YES"
"^DD",409.73,409.73,.04,1,6,"CREATE VALUE")
@
"^DD",409.73,409.73,.04,1,6,"DELETE VALUE")
NO EFFECT
"^DD",409.73,409.73,.04,1,6,"DT")
2960515
"^DD",409.73,409.73,.04,1,6,"FIELD")
ACK CODE FOR ACK FROM NPCDB
"^DD",409.73,409.73,.04,3)
Enter 'YES' if the [Deleted] Outpatient Encounter requires transmission
"^DD",409.73,409.73,.04,21,0)
^^2^2^2960429^
"^DD",409.73,409.73,.04,21,1,0)
Flag denoting if transmission of [Deleted] Outpatient Encounter is
"^DD",409.73,409.73,.04,21,2,0)
required.
"^DD",409.73,409.73,.04,"DT")
2960515
"^DD",409.73,409.73,.05,0)
TRANSMISSION EVENT^S^0:RETRANSMIT;1:ADD;2:EDIT;3:DELETE;^0;5^Q
"^DD",409.73,409.73,.05,.1)
Transmission Event
"^DD",409.73,409.73,.05,3)
Enter the action taken on the [Deleted] Outpatient Encounter
"^DD",409.73,409.73,.05,21,0)
^^15^15^2960729^
"^DD",409.73,409.73,.05,21,1,0)
Code denoting action taken on [Deleted] Outpatient Encounter.
"^DD",409.73,409.73,.05,21,2,0)
 
"^DD",409.73,409.73,.05,21,3,0)
Event relates to why the encounter is being transmitted to the
"^DD",409.73,409.73,.05,21,4,0)
National Patient Care Database (NPCDB).
"^DD",409.73,409.73,.05,21,5,0)
 
"^DD",409.73,409.73,.05,21,6,0)
       ADD - Check out complete; add entry to NPCDB
"^DD",409.73,409.73,.05,21,7,0)
      EDIT - Encounter was editted; edit existing entry in NPCDB
"^DD",409.73,409.73,.05,21,8,0)
    DELETE - Encounter was deleted; delete entry from NPCDB
"^DD",409.73,409.73,.05,21,9,0)
RETRANSMIT - Encounter being retransmitted
"^DD",409.73,409.73,.05,21,10,0)
              * Encounter data not acknowledged by NPCDB within
"^DD",409.73,409.73,.05,21,11,0)
                two days is automatically marked for retransmission
"^DD",409.73,409.73,.05,21,12,0)
              * The option 'Retransmit Ambulatory Care Data by
"^DD",409.73,409.73,.05,21,13,0)
                Date Range' marks encounters for retransmission
"^DD",409.73,409.73,.05,21,14,0)
              * The nightly transmission includes encounters that
"^DD",409.73,409.73,.05,21,15,0)
                are marked for retransmission
"^DD",409.73,409.73,.05,"DT")
2960429
"^DD",409.73,409.73,.06,0)
DATE/TIME OF EVENT^D^^0;6^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",409.73,409.73,.06,.1)
Date/time of Event
"^DD",409.73,409.73,.06,1,0)
^.1
"^DD",409.73,409.73,.06,1,1,0)
409.73^AACXMIT2^MUMPS
"^DD",409.73,409.73,.06,1,1,1)
D AACXMIT^SCDXFX01(DA,-1)
"^DD",409.73,409.73,.06,1,1,2)
D AACXMIT^SCDXFX01(DA,0,X)
"^DD",409.73,409.73,.06,1,1,"%D",0)
^^12^12^2960430^^
"^DD",409.73,409.73,.06,1,1,"%D",1,0)
This cross reference is used to flag entries for transmission to the
"^DD",409.73,409.73,.06,1,1,"%D",2,0)
National Patient Care Database.  The TRANSMISSION EVENT field (#.05) is
"^DD",409.73,409.73,.06,1,1,"%D",3,0)
checked for an add, edit, delete, or retransmit event before setting the
"^DD",409.73,409.73,.06,1,1,"%D",4,0)
cross reference.
"^DD",409.73,409.73,.06,1,1,"%D",5,0)
 
"^DD",409.73,409.73,.06,1,1,"%D",6,0)
 
"^DD",409.73,409.73,.06,1,1,"%D",7,0)
Resulting node:
"^DD",409.73,409.73,.06,1,1,"%D",8,0)
  ^SD(409.73,"AACXMIT",[.06],DA)
"^DD",409.73,409.73,.06,1,1,"%D",9,0)
 
"^DD",409.73,409.73,.06,1,1,"%D",10,0)
Where:
"^DD",409.73,409.73,.06,1,1,"%D",11,0)
  [.06] = Value contained in DATE/TIME OF EVENT field (#.06)
"^DD",409.73,409.73,.06,1,1,"%D",12,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,.06,1,1,"DT")
2960430
"^DD",409.73,409.73,.06,3)
Enter when the action was taken on the [Deleted] Outpatient Encounter
"^DD",409.73,409.73,.06,21,0)
^^2^2^2960429^
"^DD",409.73,409.73,.06,21,1,0)
Date and [required] time specified action was taken on the [Deleted]
"^DD",409.73,409.73,.06,21,2,0)
Outpatient Encounter.
"^DD",409.73,409.73,.06,"DT")
2960430
"^DD",409.73,409.73,11,0)
DATE/TIME OF XMIT TO NPCDB^D^^1;1^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",409.73,409.73,11,.1)
Date/time of Xmit to NPCDB
"^DD",409.73,409.73,11,1,0)
^.1
"^DD",409.73,409.73,11,1,1,0)
409.73^AACLST
"^DD",409.73,409.73,11,1,1,1)
S ^SD(409.73,"AACLST",$E(X,1,30),DA)=""
"^DD",409.73,409.73,11,1,1,2)
K ^SD(409.73,"AACLST",$E(X,1,30),DA)
"^DD",409.73,409.73,11,1,1,"%D",0)
^^10^10^2960430^^
"^DD",409.73,409.73,11,1,1,"%D",1,0)
Cross reference used to sort by date/time of last transmission to the
"^DD",409.73,409.73,11,1,1,"%D",2,0)
National Patient Care Database
"^DD",409.73,409.73,11,1,1,"%D",3,0)
 
"^DD",409.73,409.73,11,1,1,"%D",4,0)
 
"^DD",409.73,409.73,11,1,1,"%D",5,0)
Resulting node:
"^DD",409.73,409.73,11,1,1,"%D",6,0)
  ^SD(409.73,"AACLST",[11],DA)
"^DD",409.73,409.73,11,1,1,"%D",7,0)
 
"^DD",409.73,409.73,11,1,1,"%D",8,0)
Where: 
"^DD",409.73,409.73,11,1,1,"%D",9,0)
  [11] = Value contained in DATE/TIME OF XMIT TO NPCDB field (#11)
"^DD",409.73,409.73,11,1,1,"%D",10,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,11,1,1,"DT")
2960429
"^DD",409.73,409.73,11,1,2,0)
409.73^AACNA1^MUMPS
"^DD",409.73,409.73,11,1,2,1)
D AACNA^SCDXFX01(DA,1)
"^DD",409.73,409.73,11,1,2,2)
D AACNA^SCDXFX01(DA,0,X)
"^DD",409.73,409.73,11,1,2,"%D",0)
^^13^13^2960430^^
"^DD",409.73,409.73,11,1,2,"%D",1,0)
This cross reference is used to sort transmissions to the National Patient
"^DD",409.73,409.73,11,1,2,"%D",2,0)
Care Database that have not been acknowledged.  This cross reference is
"^DD",409.73,409.73,11,1,2,"%D",3,0)
set when a value is placed into the MESSAGE ID FOR XMIT TO NPCDB field
"^DD",409.73,409.73,11,1,2,"%D",4,0)
(#12) and the cross reference is killed when a value is placed into the
"^DD",409.73,409.73,11,1,2,"%D",5,0)
DATE/TIME OF ACK FROM NPCDB field (#14).
"^DD",409.73,409.73,11,1,2,"%D",6,0)
 
"^DD",409.73,409.73,11,1,2,"%D",7,0)
 
"^DD",409.73,409.73,11,1,2,"%D",8,0)
Resulting node:
"^DD",409.73,409.73,11,1,2,"%D",9,0)
  ^SD(409.73,"AACNOACK",[11],DA)
"^DD",409.73,409.73,11,1,2,"%D",10,0)
 
"^DD",409.73,409.73,11,1,2,"%D",11,0)
Where:
"^DD",409.73,409.73,11,1,2,"%D",12,0)
  [11] = Value contained in DATE/TIME OF XMIT TO NPCDB field (#11)
"^DD",409.73,409.73,11,1,2,"%D",13,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,11,1,2,"DT")
2960430
"^DD",409.73,409.73,11,3)
Enter when [Deleted] Outpatient Enounter was transmitted to NPCDB
"^DD",409.73,409.73,11,5,1,0)
409.73^.04^2
"^DD",409.73,409.73,11,21,0)
^^2^2^2960429^^
"^DD",409.73,409.73,11,21,1,0)
Date and [optional] time the [Deleted] Outpatient Encounter was last
"^DD",409.73,409.73,11,21,2,0)
transmitted to the National Patient Care Database.
"^DD",409.73,409.73,11,"DT")
2960430
"^DD",409.73,409.73,12,0)
MESSAGE ID OF XMIT TO NPCDB^F^^1;2^K:$L(X)>20!($L(X)<1) X
"^DD",409.73,409.73,12,.1)
Message ID of Xmit to NPCDB
"^DD",409.73,409.73,12,1,0)
^.1
"^DD",409.73,409.73,12,1,1,0)
409.73^AACMID
"^DD",409.73,409.73,12,1,1,1)
S ^SD(409.73,"AACMID",$E(X,1,30),DA)=""
"^DD",409.73,409.73,12,1,1,2)
K ^SD(409.73,"AACMID",$E(X,1,30),DA)
"^DD",409.73,409.73,12,1,1,"%D",0)
^^11^11^2960430^
"^DD",409.73,409.73,12,1,1,"%D",1,0)
Cross referenced used to sort by message control ID of last transmission
"^DD",409.73,409.73,12,1,1,"%D",2,0)
to National Patient Care Database.
"^DD",409.73,409.73,12,1,1,"%D",3,0)
 
"^DD",409.73,409.73,12,1,1,"%D",4,0)
 
"^DD",409.73,409.73,12,1,1,"%D",5,0)
Resulting node:
"^DD",409.73,409.73,12,1,1,"%D",6,0)
  ^SD(409.73,"AACMID",[12],DA)
"^DD",409.73,409.73,12,1,1,"%D",7,0)
 
"^DD",409.73,409.73,12,1,1,"%D",8,0)
 
"^DD",409.73,409.73,12,1,1,"%D",9,0)
Where:
"^DD",409.73,409.73,12,1,1,"%D",10,0)
  [12] = Value contained in MESSAGE ID FOR XMIT TO NPCDB field (#12)
"^DD",409.73,409.73,12,1,1,"%D",11,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,12,1,1,"DT")
2960429
"^DD",409.73,409.73,12,1,2,0)
^^TRIGGER^409.73^14
"^DD",409.73,409.73,12,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^SD(409.73,D0,1)):^(1),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(409.73,12,1,2,1.4)
"^DD",409.73,409.73,12,1,2,1.4)
S DIH=$S($D(^SD(409.73,DIV(0),1)):^(1),1:""),DIV=X S $P(^(1),U,4)=DIV,DIH=409.73,DIG=14 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.73,409.73,12,1,2,2)
Q
"^DD",409.73,409.73,12,1,2,"%D",0)
^^1^1^2960430^^
"^DD",409.73,409.73,12,1,2,"%D",1,0)
Value contained in DATE/TIME OF ACK FROM NPCDB field (#14) is deleted
"^DD",409.73,409.73,12,1,2,"CREATE VALUE")
@
"^DD",409.73,409.73,12,1,2,"DELETE VALUE")
NO EFFECT
"^DD",409.73,409.73,12,1,2,"DT")
2960429
"^DD",409.73,409.73,12,1,2,"FIELD")
DATE/TIME OF ACK FROM NPCDB
"^DD",409.73,409.73,12,1,3,0)
^^TRIGGER^409.73^15
"^DD",409.73,409.73,12,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^SD(409.73,D0,1)):^(1),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(409.73,12,1,3,1.4)
"^DD",409.73,409.73,12,1,3,1.4)
S DIH=$S($D(^SD(409.73,DIV(0),1)):^(1),1:""),DIV=X S $P(^(1),U,5)=DIV,DIH=409.73,DIG=15 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.73,409.73,12,1,3,2)
Q
"^DD",409.73,409.73,12,1,3,"%D",0)
^^1^1^2960429^
"^DD",409.73,409.73,12,1,3,"%D",1,0)
Value contained in ACK CODE FOR ACK FROM NPCDB field (#15) is deleted
"^DD",409.73,409.73,12,1,3,"CREATE VALUE")
@
"^DD",409.73,409.73,12,1,3,"DELETE VALUE")
NO EFFECT
"^DD",409.73,409.73,12,1,3,"DT")
2960429
"^DD",409.73,409.73,12,1,3,"FIELD")
ACK CODE FOR ACK FROM NPCDB
"^DD",409.73,409.73,12,3)
Enter message control ID of transmission to NPCDB
"^DD",409.73,409.73,12,5,1,0)
409.73^.04^3
"^DD",409.73,409.73,12,21,0)
^^1^1^2960429^
"^DD",409.73,409.73,12,21,1,0)
Message control ID of last transmission to National Patient Care Database.
"^DD",409.73,409.73,12,"DT")
2960429
"^DD",409.73,409.73,13,0)
BATCH ID OF XMIT TO NPCDB^F^^1;3^K:$L(X)>20!($L(X)<1) X
"^DD",409.73,409.73,13,.1)
Batch ID of Xmit to NPCDB
"^DD",409.73,409.73,13,1,0)
^.1
"^DD",409.73,409.73,13,1,1,0)
409.73^AACBID
"^DD",409.73,409.73,13,1,1,1)
S ^SD(409.73,"AACBID",$E(X,1,30),DA)=""
"^DD",409.73,409.73,13,1,1,2)
K ^SD(409.73,"AACBID",$E(X,1,30),DA)
"^DD",409.73,409.73,13,1,1,"%D",0)
^^10^10^2960430^^
"^DD",409.73,409.73,13,1,1,"%D",1,0)
Cross referenced used to sort by batch control ID of last transmission to
"^DD",409.73,409.73,13,1,1,"%D",2,0)
National Patient Care Database.
"^DD",409.73,409.73,13,1,1,"%D",3,0)
 
"^DD",409.73,409.73,13,1,1,"%D",4,0)
 
"^DD",409.73,409.73,13,1,1,"%D",5,0)
Resulting node:
"^DD",409.73,409.73,13,1,1,"%D",6,0)
  ^SD(409.73,"AACBID",[13],DA)
"^DD",409.73,409.73,13,1,1,"%D",7,0)
 
"^DD",409.73,409.73,13,1,1,"%D",8,0)
Where:
"^DD",409.73,409.73,13,1,1,"%D",9,0)
  [13] = Value contained in BATCH ID FOR XMIT TO NPCDB field (#13)
"^DD",409.73,409.73,13,1,1,"%D",10,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,13,1,1,"DT")
2960429
"^DD",409.73,409.73,13,3)
Enter batch control ID of transmission to NPCDB
"^DD",409.73,409.73,13,5,1,0)
409.73^.04^4
"^DD",409.73,409.73,13,21,0)
^^1^1^2960429^
"^DD",409.73,409.73,13,21,1,0)
Batch control ID of last transmission to National Patient Care Database.
"^DD",409.73,409.73,13,"DT")
2960429
"^DD",409.73,409.73,14,0)
DATE/TIME OF ACK FROM NPCDB^D^^1;4^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",409.73,409.73,14,.1)
Date/time of Ack from NPCDB
"^DD",409.73,409.73,14,1,0)
^.1
"^DD",409.73,409.73,14,1,1,0)
409.73^AACNA2^MUMPS
"^DD",409.73,409.73,14,1,1,1)
D AACNA^SCDXFX01(DA,0)
"^DD",409.73,409.73,14,1,1,2)
Q
"^DD",409.73,409.73,14,1,1,"%D",0)
^^13^13^2960430^^
"^DD",409.73,409.73,14,1,1,"%D",1,0)
This cross reference is used to sort transmissions to the National Patient
"^DD",409.73,409.73,14,1,1,"%D",2,0)
Care Database that have not been acknowledged.  This cross reference is
"^DD",409.73,409.73,14,1,1,"%D",3,0)
set when a value is placed into the MESSAGE ID FOR XMIT TO NPCDB field
"^DD",409.73,409.73,14,1,1,"%D",4,0)
(#12) and the cross reference is killed when a value is placed into the
"^DD",409.73,409.73,14,1,1,"%D",5,0)
DATE/TIME OF ACK FROM NPCDB field (#14).
"^DD",409.73,409.73,14,1,1,"%D",6,0)
 
"^DD",409.73,409.73,14,1,1,"%D",7,0)
 
"^DD",409.73,409.73,14,1,1,"%D",8,0)
Resulting node:
"^DD",409.73,409.73,14,1,1,"%D",9,0)
  ^SD(409.73,"AACNOACK",[11],DA)
"^DD",409.73,409.73,14,1,1,"%D",10,0)
 
"^DD",409.73,409.73,14,1,1,"%D",11,0)
Where:
"^DD",409.73,409.73,14,1,1,"%D",12,0)
  [11] = Value contained in DATE/TIME OF XMIT TO NPCDB field (#11)
"^DD",409.73,409.73,14,1,1,"%D",13,0)
  DA = Pointer to entry in file
"^DD",409.73,409.73,14,1,1,"DT")
2960430
"^DD",409.73,409.73,14,3)
Enter when acknowledgement was received from NPCDB
"^DD",409.73,409.73,14,5,1,0)
409.73^12^2
"^DD",409.73,409.73,14,5,2,0)
409.73^.04^5
"^DD",409.73,409.73,14,21,0)
^^2^2^2960429^
"^DD",409.73,409.73,14,21,1,0)
Date and [optional] time acknowledgement for last transmission to National
"^DD",409.73,409.73,14,21,2,0)
Patient Care Database was received.
"^DD",409.73,409.73,14,"DT")
2960430
"^DD",409.73,409.73,15,0)
ACK CODE FOR ACK FROM NPCDB^S^A:ACCEPTED;R:REJECTED;E:ERROR;^1;5^Q
"^DD",409.73,409.73,15,.1)
Ack Code for Ack from NPCDB
"^DD",409.73,409.73,15,3)
Enter acknowledgement code received from NPCDB
"^DD",409.73,409.73,15,5,1,0)
409.73^12^3
"^DD",409.73,409.73,15,5,2,0)
409.73^.04^6
"^DD",409.73,409.73,15,21,0)
^^2^2^2960429^
"^DD",409.73,409.73,15,21,1,0)
Code denoting type of acknowledgement received for last transmission to
"^DD",409.73,409.73,15,21,2,0)
National Patient Care Database.
"^DD",409.73,409.73,15,"DT")
2960429
"^DD",409.73,409.73,20.01,0)
PATIENT^CJ20^^ ; ^D PAT^SCDXUTL2(D0)
"^DD",409.73,409.73,20.01,9)
^
"^DD",409.73,409.73,20.01,9.01)

"^DD",409.73,409.73,20.01,9.1)
D PAT^SCDXUTL2(D0)
"^DD",409.73,409.73,20.02,0)
ENCOUNTER DATE^CJ18^^ ; ^D ECDT^SCDXUTL2(D0)
"^DD",409.73,409.73,20.02,9)
^
"^DD",409.73,409.73,20.02,9.01)

"^DD",409.73,409.73,20.02,9.1)
D ECDT^SCDXUTL2(D0)
"^DD",409.73,409.73,20.02,"DT")
2960524
"^DD",409.73,409.73,20.03,0)
HOSPITAL LOCATION^CJ15^^ ; ^D ECLOC^SCDXUTL2(D0)
"^DD",409.73,409.73,20.03,9)
^
"^DD",409.73,409.73,20.03,9.01)

"^DD",409.73,409.73,20.03,9.1)
D ECLOC^SCDXUTL2(D0)
"^DD",409.74,409.74,0)
FIELD^^11^4
"^DD",409.74,409.74,0,"DDA")
N
"^DD",409.74,409.74,0,"DT")
2960503
"^DD",409.74,409.74,0,"ID",.02)
S %I=Y,Y=$S('$D(^(0)):"",$D(^DPT(+$P(^(0),U,2),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(2,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",409.74,409.74,0,"IX","ADEL",409.74,.03)

"^DD",409.74,409.74,0,"IX","B",409.74,.01)

"^DD",409.74,409.74,0,"IX","PAT",409.74,.02)

"^DD",409.74,409.74,0,"NM","DELETED OUTPATIENT ENCOUNTER")

"^DD",409.74,409.74,0,"PT",409.73,.03)

"^DD",409.74,409.74,.01,0)
ENCOUNTER DATE/TIME^RD^^0;1^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",409.74,409.74,.01,.1)
Encounter Date/Time
"^DD",409.74,409.74,.01,1,0)
^.1
"^DD",409.74,409.74,.01,1,1,0)
409.74^B
"^DD",409.74,409.74,.01,1,1,1)
S ^SD(409.74,"B",$E(X,1,30),DA)=""
"^DD",409.74,409.74,.01,1,1,2)
K ^SD(409.74,"B",$E(X,1,30),DA)
"^DD",409.74,409.74,.01,1,2,0)
^^TRIGGER^409.74^.03
"^DD",409.74,409.74,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^SD(409.74,D0,0)):^(0),1:"") S X=$P(Y(1),U,3)="" I X S X=DIV S Y(1)=$S($D(^SD(409.74,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y X ^DD(409.74,.01,1,2,1.1) X ^DD(409.74,.01,1,2,1.4)
"^DD",409.74,409.74,.01,1,2,1.1)
S X=DIV S %=$P($H,",",2),X=DT_(%\60#60/100+(%\3600)+(%#60/10000)/100)
"^DD",409.74,409.74,.01,1,2,1.4)
S DIH=$S($D(^SD(409.74,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,3)=DIV,DIH=409.74,DIG=.03 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",409.74,409.74,.01,1,2,2)
Q
"^DD",409.74,409.74,.01,1,2,"%D",0)
^^2^2^2960430^
"^DD",409.74,409.74,.01,1,2,"%D",1,0)
Current date/time ("NOW") is put into the DELETION DATE/TIME field (#.03).
"^DD",409.74,409.74,.01,1,2,"%D",2,0)
 This is screened so that an existing value is not overwritten.
"^DD",409.74,409.74,.01,1,2,"CREATE CONDITION")
DELETION DATE/TIME=""
"^DD",409.74,409.74,.01,1,2,"CREATE VALUE")
NOW
"^DD",409.74,409.74,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",409.74,409.74,.01,1,2,"DT")
2960430
"^DD",409.74,409.74,.01,1,2,"FIELD")
DELETION DATE/TIME
"^DD",409.74,409.74,.01,3)
Enter the date/time of the encounter that was deleted
"^DD",409.74,409.74,.01,21,0)
^^1^1^2960430^
"^DD",409.74,409.74,.01,21,1,0)
Date/time deleted encounter supposedly took place.
"^DD",409.74,409.74,.01,"DT")
2960430
"^DD",409.74,409.74,.02,0)
PATIENT^RP2'^DPT(^0;2^Q
"^DD",409.74,409.74,.02,.1)
Patient
"^DD",409.74,409.74,.02,1,0)
^.1
"^DD",409.74,409.74,.02,1,1,0)
409.74^PAT
"^DD",409.74,409.74,.02,1,1,1)
S ^SD(409.74,"PAT",$E(X,1,30),DA)=""
"^DD",409.74,409.74,.02,1,1,2)
K ^SD(409.74,"PAT",$E(X,1,30),DA)
"^DD",409.74,409.74,.02,1,1,"%D",0)
^^8^8^2960430^
"^DD",409.74,409.74,.02,1,1,"%D",1,0)
Cross reference to allow look-up using the patient's name.
"^DD",409.74,409.74,.02,1,1,"%D",2,0)
 
"^DD",409.74,409.74,.02,1,1,"%D",3,0)
Resulting node:
"^DD",409.74,409.74,.02,1,1,"%D",4,0)
  ^SD(409.74,"PAT",[.02],DA)
"^DD",409.74,409.74,.02,1,1,"%D",5,0)
 
"^DD",409.74,409.74,.02,1,1,"%D",6,0)
Where:
"^DD",409.74,409.74,.02,1,1,"%D",7,0)
  [.02] = Value contained in PATIENT field (#.02)
"^DD",409.74,409.74,.02,1,1,"%D",8,0)
  DA = Pointer to entry in file
"^DD",409.74,409.74,.02,1,1,"DT")
2960430
"^DD",409.74,409.74,.02,3)
Enter the patient associated with the deleted encounter
"^DD",409.74,409.74,.02,21,0)
^^1^1^2960430^
"^DD",409.74,409.74,.02,21,1,0)
Patient deleted encounter referred to.
"^DD",409.74,409.74,.02,"DT")
2960430
"^DD",409.74,409.74,.03,0)
DELETION DATE/TIME^RD^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",409.74,409.74,.03,.1)
Deletion Date/Time
"^DD",409.74,409.74,.03,1,0)
^.1
"^DD",409.74,409.74,.03,1,1,0)
409.74^ADEL
"^DD",409.74,409.74,.03,1,1,1)
S ^SD(409.74,"ADEL",$E(X,1,30),DA)=""
"^DD",409.74,409.74,.03,1,1,2)
K ^SD(409.74,"ADEL",$E(X,1,30),DA)
"^DD",409.74,409.74,.03,1,1,"%D",0)
^^9^9^2960430^
"^DD",409.74,409.74,.03,1,1,"%D",1,0)
Cross reference to sort entries by their deletion date/time.
"^DD",409.74,409.74,.03,1,1,"%D",2,0)
 
"^DD",409.74,409.74,.03,1,1,"%D",3,0)
 
"^DD",409.74,409.74,.03,1,1,"%D",4,0)
Resulting node:
"^DD",409.74,409.74,.03,1,1,"%D",5,0)
  ^SD(409.74,"ADEL",[.03],DA)
"^DD",409.74,409.74,.03,1,1,"%D",6,0)
 
"^DD",409.74,409.74,.03,1,1,"%D",7,0)
Where:
"^DD",409.74,409.74,.03,1,1,"%D",8,0)
  [.03] = Value contained in DELETION DATE/TIME field (#.03)
"^DD",409.74,409.74,.03,1,1,"%D",9,0)
  DA = Pointer to entry in file
"^DD",409.74,409.74,.03,1,1,"DT")
2960430
"^DD",409.74,409.74,.03,3)
Enter the date/time the encounter was deleted
"^DD",409.74,409.74,.03,5,1,0)
409.74^.01^2
"^DD",409.74,409.74,.03,21,0)
^^1^1^2960430^
"^DD",409.74,409.74,.03,21,1,0)
Date/time encounter was deleted.
"^DD",409.74,409.74,.03,"DT")
2960430
"^DD",409.74,409.74,11,0)
OLD ENCOUNTER ZERO NODE^RF^^1;E1,245^K:$L(X)>245!($L(X)<1) X
"^DD",409.74,409.74,11,.1)
Old Encounter Zero Node
"^DD",409.74,409.74,11,3)
Enter the zero node of the deleted Outpatient Encounter
"^DD",409.74,409.74,11,21,0)
^^2^2^2960503^^
"^DD",409.74,409.74,11,21,1,0)
This field will contain the zero node of the Outpatient Encounter that was
"^DD",409.74,409.74,11,21,2,0)
deleted.
"^DD",409.74,409.74,11,"DT")
2960503
"^DD",409.75,409.75,0)
FIELD^^10.01^3
"^DD",409.75,409.75,0,"DDA")
N
"^DD",409.75,409.75,0,"DT")
2960429
"^DD",409.75,409.75,0,"IX","B",409.75,.01)

"^DD",409.75,409.75,0,"NM","TRANSMITTED OUTPATIENT ENCOUNTER ERROR")

"^DD",409.75,409.75,.01,0)
TRANSMITTED ENCOUNTER^RP409.73'^SD(409.73,^0;1^Q
"^DD",409.75,409.75,.01,.1)
Transmitted Encounter
"^DD",409.75,409.75,.01,1,0)
^.1
"^DD",409.75,409.75,.01,1,1,0)
409.75^B
"^DD",409.75,409.75,.01,1,1,1)
S ^SD(409.75,"B",$E(X,1,30),DA)=""
"^DD",409.75,409.75,.01,1,1,2)
K ^SD(409.75,"B",$E(X,1,30),DA)
"^DD",409.75,409.75,.01,3)
Enter Transmitted Outpatient Encounter that wasn't successfully transmitted
"^DD",409.75,409.75,.01,21,0)
^^2^2^2960429^^
"^DD",409.75,409.75,.01,21,1,0)
Pointer to entry in TRANSMITTED OUTPATIENT ENCOUNTER file that was not
"^DD",409.75,409.75,.01,21,2,0)
successfully transmitted to the National Patient Care Database.
"^DD",409.75,409.75,.01,"DT")
2960429
"^DD",409.75,409.75,.02,0)
ERROR CODE^P409.76'^SD(409.76,^0;2^Q
"^DD",409.75,409.75,.02,3)
Enter reason for unsuccessfull transmission
"^DD",409.75,409.75,.02,21,0)
^^2^2^2960429^
"^DD",409.75,409.75,.02,21,1,0)
Why entry in TRANSMITTED OUTPATIENT ENCOUNTER file was not successfully
"^DD",409.75,409.75,.02,21,2,0)
transmitted.
"^DD",409.75,409.75,.02,"DT")
2960429
"^DD",409.75,409.75,10.01,0)
DATE/TIME OF X-MIT TO NPCDB^CJ18^^ ; ^D XDATE^SCDXUTL2(D0)
"^DD",409.75,409.75,10.01,9)
^
"^DD",409.75,409.75,10.01,9.01)

"^DD",409.75,409.75,10.01,9.1)
D XDATE^SCDXUTL2(D0)
"^DD",409.75,409.75,10.01,"DT")
2960524
"^DD",409.76,409.76,0)
FIELD^^11^2
"^DD",409.76,409.76,0,"DDA")
N
"^DD",409.76,409.76,0,"DT")
2960430
"^DD",409.76,409.76,0,"IX","B",409.76,.01)

"^DD",409.76,409.76,0,"NM","TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE")

"^DD",409.76,409.76,0,"PT",409.75,.02)

"^DD",409.76,409.76,.01,0)
ERROR CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",409.76,409.76,.01,.1)
Error Code
"^DD",409.76,409.76,.01,1,0)
^.1
"^DD",409.76,409.76,.01,1,1,0)
409.76^B
"^DD",409.76,409.76,.01,1,1,1)
S ^SD(409.76,"B",$E(X,1,30),DA)=""
"^DD",409.76,409.76,.01,1,1,2)
K ^SD(409.76,"B",$E(X,1,30),DA)
"^DD",409.76,409.76,.01,3)
Enter an error code to use (1-10 characters)
"^DD",409.76,409.76,.01,21,0)
^^2^2^2960524^^
"^DD",409.76,409.76,.01,21,1,0)
Error code denoting why an entry in the Transmitted Outpatient Encounter
"^DD",409.76,409.76,.01,21,2,0)
file could not be transmitted or successfully processed.
"^DD",409.76,409.76,.01,"DT")
2960430
"^DD",409.76,409.76,11,0)
ERROR CODE DESCRIPTION^F^^1;1^K:$L(X)>80!($L(X)<1) X
"^DD",409.76,409.76,11,.1)
Error Code Description
"^DD",409.76,409.76,11,3)
Enter a description of the error code (1-80 characters)
"^DD",409.76,409.76,11,21,0)
^^1^1^2960524^^
"^DD",409.76,409.76,11,21,1,0)
Free text description of the error code.
"^DD",409.76,409.76,11,"DT")
2960430
"^DIC",404.91,404.91,0)
SCHEDULING PARAMETER^404.91
"^DIC",404.91,404.91,0,"GL")
^SD(404.91,
"^DIC",404.91,404.91,"%D",0)
^^1^1^2960719^^^^
"^DIC",404.91,404.91,"%D",1,0)
This file contains the scheduling parameters.
"^DIC",404.91,"B","SCHEDULING PARAMETER",404.91)

"^DIC",409.73,409.73,0)
TRANSMITTED OUTPATIENT ENCOUNTER^409.73
"^DIC",409.73,409.73,0,"GL")
^SD(409.73,
"^DIC",409.73,409.73,"%D",0)
^^11^11^2960802^^
"^DIC",409.73,409.73,"%D",1,0)
This file will contain the current transmission status of all Outpatient
"^DIC",409.73,409.73,"%D",2,0)
Encounters and Deleted Outpatient Encounters that have been transmitted or
"^DIC",409.73,409.73,"%D",3,0)
require transmission to the National Patient Care Database.
"^DIC",409.73,409.73,"%D",4,0)
 
"^DIC",409.73,409.73,"%D",5,0)
Entries in this file are only created when an existing entry for the
"^DIC",409.73,409.73,"%D",6,0)
specified encounter does not exist.  When an Outpatient Encounter is
"^DIC",409.73,409.73,"%D",7,0)
deleted, the entry in this file that pointed to that Outpatient Encounter
"^DIC",409.73,409.73,"%D",8,0)
is modified so that it points to the Deleted Outpatient Encounter that was
"^DIC",409.73,409.73,"%D",9,0)
created.
"^DIC",409.73,409.73,"%D",10,0)
 
"^DIC",409.73,409.73,"%D",11,0)
This file does not contain the transmission history for an encounter.
"^DIC",409.73,"B","TRANSMITTED OUTPATIENT ENCOUNTER",409.73)

"^DIC",409.74,409.74,0)
DELETED OUTPATIENT ENCOUNTER^409.74D
"^DIC",409.74,409.74,0,"GL")
^SD(409.74,
"^DIC",409.74,409.74,"%D",0)
^^1^1^2960802^
"^DIC",409.74,409.74,"%D",1,0)
This file will contain all encounters that have been deleted.
"^DIC",409.74,"B","DELETED OUTPATIENT ENCOUNTER",409.74)

"^DIC",409.75,409.75,0)
TRANSMITTED OUTPATIENT ENCOUNTER ERROR^409.75P
"^DIC",409.75,409.75,0,"GL")
^SD(409.75,
"^DIC",409.75,409.75,"%D",0)
^^6^6^2960802^
"^DIC",409.75,409.75,"%D",1,0)
This file contains all errors that the National Patient Care Database
"^DIC",409.75,409.75,"%D",2,0)
reported when processing an encounter.
"^DIC",409.75,409.75,"%D",3,0)
 
"^DIC",409.75,409.75,"%D",4,0)
When an encounter is transmitted to the National Patient Care Database,
"^DIC",409.75,409.75,"%D",5,0)
all errors that my have occurred previous to that transmission are
"^DIC",409.75,409.75,"%D",6,0)
deleted.
"^DIC",409.75,"B","TRANSMITTED OUTPATIENT ENCOUNTER ERROR",409.75)

"^DIC",409.76,409.76,0)
TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE^409.76
"^DIC",409.76,409.76,0,"GL")
^SD(409.76,
"^DIC",409.76,409.76,"%D",0)
^^6^6^2960802^
"^DIC",409.76,409.76,"%D",1,0)
This table file contains a list of all error codes that the National
"^DIC",409.76,409.76,"%D",2,0)
Patient Care Database will report when processing an encounter.
"^DIC",409.76,409.76,"%D",3,0)
 
"^DIC",409.76,409.76,"%D",4,0)
If an entry needs to be added, modified or deleted a patch will be issued
"^DIC",409.76,409.76,"%D",5,0)
instructing the site how to make the change.  Otherwise, this table should
"^DIC",409.76,409.76,"%D",6,0)
not be edited in anyway by the site.  
"^DIC",409.76,"B","TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE",409.76)

**INSTALL NAME**
DG*5.3*94
"BLD",47,0)
DG*5.3*94^REGISTRATION^0^2960812^n
"BLD",47,1,0)
^^5^5^2960807^
"BLD",47,1,1,0)
 KIDS distribution of the Registration portion of the Ambulatory Care
"BLD",47,1,2,0)
 Reporting Project.
"BLD",47,1,3,0)
   
"BLD",47,1,4,0)
 The changes included in this patch are described in the description of
"BLD",47,1,5,0)
 patch DG*5.3*94 in the National Patch Module.
"BLD",47,4,0)
^9.64PA^^
"BLD",47,"ABPKG")
n^n
"BLD",47,"KRN",0)
^9.67PA^8994^14
"BLD",47,"KRN",.4,0)
.4
"BLD",47,"KRN",.401,0)
.401
"BLD",47,"KRN",.402,0)
.402
"BLD",47,"KRN",.403,0)
.403
"BLD",47,"KRN",.5,0)
.5
"BLD",47,"KRN",.84,0)
.84
"BLD",47,"KRN",3.6,0)
3.6
"BLD",47,"KRN",9.2,0)
9.2
"BLD",47,"KRN",9.8,0)
9.8
"BLD",47,"KRN",9.8,"NM",0)
^9.68A^13^12
"BLD",47,"KRN",9.8,"NM",1,0)
VAFEDCAP^^0^B9608862
"BLD",47,"KRN",9.8,"NM",2,0)
VAFECAP1^^0^B11441159
"BLD",47,"KRN",9.8,"NM",3,0)
VAFHLPID^^0^B11755319
"BLD",47,"KRN",9.8,"NM",5,0)
VAFHLZIR^^0^B12221388
"BLD",47,"KRN",9.8,"NM",6,0)
VAFHLZPD^^0^B12181821
"BLD",47,"KRN",9.8,"NM",7,0)
VAFHLDG1^^0^B11499735
"BLD",47,"KRN",9.8,"NM",8,0)
VAFHLEVN^^0^B3788847
"BLD",47,"KRN",9.8,"NM",9,0)
VAFHLPR1^^0^B12921852
"BLD",47,"KRN",9.8,"NM",10,0)
VAFHLPV1^^0^B15922923
"BLD",47,"KRN",9.8,"NM",11,0)
VAFHLZCL^^0^B3695882
"BLD",47,"KRN",9.8,"NM",12,0)
VAFHLZSC^^0^B3755727
"BLD",47,"KRN",9.8,"NM",13,0)
VAFHLZSP^^0^B1849036
"BLD",47,"KRN",9.8,"NM","B","VAFECAP1",2)

"BLD",47,"KRN",9.8,"NM","B","VAFEDCAP",1)

"BLD",47,"KRN",9.8,"NM","B","VAFHLDG1",7)

"BLD",47,"KRN",9.8,"NM","B","VAFHLEVN",8)

"BLD",47,"KRN",9.8,"NM","B","VAFHLPID",3)

"BLD",47,"KRN",9.8,"NM","B","VAFHLPR1",9)

"BLD",47,"KRN",9.8,"NM","B","VAFHLPV1",10)

"BLD",47,"KRN",9.8,"NM","B","VAFHLZCL",11)

"BLD",47,"KRN",9.8,"NM","B","VAFHLZIR",5)

"BLD",47,"KRN",9.8,"NM","B","VAFHLZPD",6)

"BLD",47,"KRN",9.8,"NM","B","VAFHLZSC",12)

"BLD",47,"KRN",9.8,"NM","B","VAFHLZSP",13)

"BLD",47,"KRN",19,0)
19
"BLD",47,"KRN",19,"NM",0)
^9.68A^^
"BLD",47,"KRN",19.1,0)
19.1
"BLD",47,"KRN",101,0)
101
"BLD",47,"KRN",409.61,0)
409.61
"BLD",47,"KRN",8994,0)
8994
"BLD",47,"KRN","B",.4,.4)

"BLD",47,"KRN","B",.401,.401)

"BLD",47,"KRN","B",.402,.402)

"BLD",47,"KRN","B",.403,.403)

"BLD",47,"KRN","B",.5,.5)

"BLD",47,"KRN","B",.84,.84)

"BLD",47,"KRN","B",3.6,3.6)

"BLD",47,"KRN","B",9.2,9.2)

"BLD",47,"KRN","B",9.8,9.8)

"BLD",47,"KRN","B",19,19)

"BLD",47,"KRN","B",19.1,19.1)

"BLD",47,"KRN","B",101,101)

"BLD",47,"KRN","B",409.61,409.61)

"BLD",47,"KRN","B",8994,8994)

"BLD",47,"QUES",0)
^9.62^^
"OER",5,0)
5^DG^^M.A.S.^
"OER",5,1,0)
^100.9951PA^21^11
"OER",5,1,10,0)
102
"OER",5,1,10,1,0)
^100.99511PA^1^1
"OER",5,1,10,1,1,0)
101
"OER",5,1,11,0)
104
"OER",5,1,11,1,0)
^100.99511PA^1^1
"OER",5,1,11,1,1,0)
101
"OER",5,1,12,0)
112
"OER",5,1,12,1,0)
^100.99511PA^1^1
"OER",5,1,12,1,1,0)
101
"OER",5,1,13,0)
482
"OER",5,1,13,1,0)
^100.99511PA^1^1
"OER",5,1,13,1,1,0)
457
"OER",5,1,14,0)
565
"OER",5,1,14,1,0)
^100.99511PA^1^1
"OER",5,1,14,1,1,0)
101
"OER",5,1,15,0)
647
"OER",5,1,15,1,0)
^100.99511PA^3^3
"OER",5,1,15,1,1,0)
602
"OER",5,1,15,1,2,0)
594
"OER",5,1,15,1,3,0)
788
"OER",5,1,16,0)
649
"OER",5,1,16,1,0)
^100.99511PA^4^4
"OER",5,1,16,1,1,0)
594
"OER",5,1,16,1,2,0)
602
"OER",5,1,16,1,3,0)
582
"OER",5,1,16,1,4,0)
788
"OER",5,1,17,0)
650
"OER",5,1,17,1,0)
^100.99511PA^4^4
"OER",5,1,17,1,1,0)
582
"OER",5,1,17,1,2,0)
602
"OER",5,1,17,1,3,0)
594
"OER",5,1,17,1,4,0)
788
"OER",5,1,19,0)
781
"OER",5,1,19,1,0)
^100.99511PA^1^1
"OER",5,1,19,1,1,0)
414
"OER",5,1,20,0)
837
"OER",5,1,20,1,0)
^100.99511PA^1^1
"OER",5,1,20,1,1,0)
101
"OER",5,1,21,0)
838
"OER",5,1,21,1,0)
^100.99511PA^1^1
"OER",5,1,21,1,1,0)
414
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
94^2960812
"PKG",5,22,1,"PAH",1,1,0)
^^5^5^2960820
"PKG",5,22,1,"PAH",1,1,1,0)
 KIDS distribution of the Registration portion of the Ambulatory Care
"PKG",5,22,1,"PAH",1,1,2,0)
 Reporting Project.
"PKG",5,22,1,"PAH",1,1,3,0)
   
"PKG",5,22,1,"PAH",1,1,4,0)
 The changes included in this patch are described in the description of
"PKG",5,22,1,"PAH",1,1,5,0)
 patch DG*5.3*94 in the National Patch Module.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
12
"RTN","VAFECAP1")
0^2^B11441159
"RTN","VAFECAP1",1,0)
VAFECAP1 ;ALB/CAW;Capture routine for outpatient (con't);8/5/94
"RTN","VAFECAP1",2,0)
 ;;5.3;Registration;**38,94**;Aug 13, 1993
"RTN","VAFECAP1",3,0)
 ;
"RTN","VAFECAP1",4,0)
GATHER ;This subroutine gathers and sets up a string of the necessary data for
"RTN","VAFECAP1",5,0)
 ;the storage of the out patient data.
"RTN","VAFECAP1",6,0)
 ;
"RTN","VAFECAP1",7,0)
 I VAFEDTYP=2 DO
"RTN","VAFECAP1",8,0)
 .;truncating the date below because of a problem with seconds from PIMS
"RTN","VAFECAP1",9,0)
 .S VAFEDST1=$E(VAFEDEDT,1,12)_"^"_$$FAC(VAFEDEVT,VAFEDEV0,VAFEDEDT)_"^"_$$CLSC(VAFEDEVT)_"^"_$$PROV(SDHDL,VAFEDORG,VAFEDVN,VAFEDEVT)
"RTN","VAFECAP1",10,0)
 .D DIAG(SDHDL,VAFEDORG,VAFEDVN,VAFEDEVT)
"RTN","VAFECAP1",11,0)
 .S VAFEDST2=$$CPT(SDHDL,VAFEDORG,VAFEDEVT)
"RTN","VAFECAP1",12,0)
 I VAFEDTYP=1 DO
"RTN","VAFECAP1",13,0)
 .;truncating the date here as well
"RTN","VAFECAP1",14,0)
 .S VAFEDST1=$E(VAFEDEDT,1,12)_"^"_$$FAC(VAFEDEVT,VAFEDEV0,VAFEDEDT)_"^"_"C"
"RTN","VAFECAP1",15,0)
 .S VAFEDST2=""
"RTN","VAFECAP1",16,0)
 Q
"RTN","VAFECAP1",17,0)
 ;
"RTN","VAFECAP1",18,0)
CLSC(VAFEDEVT) ;gets the clinic stop of the event
"RTN","VAFECAP1",19,0)
 N X
"RTN","VAFECAP1",20,0)
 S X=$P(VAFEDEVT,U,3)
"RTN","VAFECAP1",21,0)
 Q $S(X]"":$P(^DIC(40.7,X,0),U,2),1:"")
"RTN","VAFECAP1",22,0)
 ;
"RTN","VAFECAP1",23,0)
PROV(SDHDL,VAFEDORG,VAFEDVN,VAFEDEVT) ;gets the primary provider for this event.
"RTN","VAFECAP1",24,0)
 N X,VAFEDPRO,VAFEDPRC
"RTN","VAFECAP1",25,0)
 S VAFEDPRO=""
"RTN","VAFECAP1",26,0)
 I $P(VAFEDEVT,U,6)]"" DO
"RTN","VAFECAP1",27,0)
 .S VAFEDVN=$P(VAFEDEVT,U,6)
"RTN","VAFECAP1",28,0)
 .F X=0:0 S X=$O(^SDD(409.44,"OE",VAFEDVN,X)) Q:'X  DO  Q:VAFEDPRO]""
"RTN","VAFECAP1",29,0)
 ..I $D(^SDD(409.44,X,0)) S VAFEDPRO=VAFEDPRO_+^(0)
"RTN","VAFECAP1",30,0)
 ;
"RTN","VAFECAP1",31,0)
 I $P(VAFEDEVT,U,6)']"" DO
"RTN","VAFECAP1",32,0)
 .F X=0:0 S X=$O(^TMP("SDEVT",$J,SDHDL,VAFEDORG,"SDOE",VAFEDVN,"PR",X)) Q:'X  DO  Q:VAFEDPRO]""
"RTN","VAFECAP1",33,0)
 ..I ^(X,0,"AFTER")]"" S VAFEDPRO=VAFEDPRO_+^("AFTER") ;naked from inside for loop on line before.
"RTN","VAFECAP1",34,0)
 Q VAFEDPRO
"RTN","VAFECAP1",35,0)
 ;
"RTN","VAFECAP1",36,0)
DIAG(SDHDL,VAFEDORG,VAFEDVN,VAFEDEVT) ;
"RTN","VAFECAP1",37,0)
 ;this function will collect multiple diagnostic codes.
"RTN","VAFECAP1",38,0)
 ;
"RTN","VAFECAP1",39,0)
 N X,VAFEDDXC,I
"RTN","VAFECAP1",40,0)
 S VAFEDDX(1)="",VAFEDDXC=0,I=1
"RTN","VAFECAP1",41,0)
 ;
"RTN","VAFECAP1",42,0)
 I $P(VAFEDEVT,U,6)]"" DO
"RTN","VAFECAP1",43,0)
 .S VAFEDVN=$P(VAFEDEVT,U,6)
"RTN","VAFECAP1",44,0)
 .F X=0:0 S X=$O(^SDD(409.43,"OE",VAFEDVN,X)) Q:'X  DO
"RTN","VAFECAP1",45,0)
 ..I $D(^SDD(409.43,X,0)) S VAFEDDX(I)=VAFEDDX(I)_"^"_$P(^ICD9(+^(0),0),U,1),VAFEDDXC=VAFEDDXC+1 I ($L(VAFEDDX(I))+15)>245 D
"RTN","VAFECAP1",46,0)
 ...S I=I+1,VAFEDDX(I)=""
"RTN","VAFECAP1",47,0)
 ;
"RTN","VAFECAP1",48,0)
 I $P(VAFEDEVT,U,6)']"" DO
"RTN","VAFECAP1",49,0)
 .F X=0:0 S X=$O(^TMP("SDEVT",$J,SDHDL,VAFEDORG,"SDOE",VAFEDVN,"DX",X)) Q:'X  DO
"RTN","VAFECAP1",50,0)
 ..I ^(X,0,"AFTER")]"" S VAFEDDX(I)=VAFEDDX(I)_"^"_$P(^ICD9(+^("AFTER"),0),U,1),VAFEDDXC=VAFEDDXC+1 I ($L(VAFEDDX(I))+15)>245 D  ;first naked from line before.
"RTN","VAFECAP1",51,0)
 ...S I=I+1,VAFEDDX(I)=""
"RTN","VAFECAP1",52,0)
 S VAFEDDX(1)=VAFEDDXC_"DIAGS"_VAFEDDX(1)
"RTN","VAFECAP1",53,0)
 Q
"RTN","VAFECAP1",54,0)
 ;
"RTN","VAFECAP1",55,0)
CPT(SDHDL,VAFEDORG,VAFEDEVT) ;
"RTN","VAFECAP1",56,0)
 ;this function call will collect CPT codes.
"RTN","VAFECAP1",57,0)
 ;
"RTN","VAFECAP1",58,0)
 N VAFEDCPT,VAFEDEXT,X
"RTN","VAFECAP1",59,0)
 S VAFEDCPT=""
"RTN","VAFECAP1",60,0)
 I $P(VAFEDEVT,U,9)]"",VAFEDORG=2 DO
"RTN","VAFECAP1",61,0)
 .N VAFLP,VAFEN
"RTN","VAFECAP1",62,0)
 .S VAFEDEXT=$P(VAFEDEVT,U,9)
"RTN","VAFECAP1",63,0)
 .;loop to get multiple levels of cpts
"RTN","VAFECAP1",64,0)
 .F VAFLP=1:1 S VAFEN=$P(VAFEDEXT,":",VAFLP) Q:'VAFEN  S VAFEDCPT=VAFEDCPT_$S(($E(VAFEDCPT,$L(VAFEDCPT))'=U&(VAFEDCPT]"")):U,1:"")_$G(^TMP("SDEVT",$J,SDHDL,VAFEDORG,"CS",VAFEN,"PR","AFTER"))
"RTN","VAFECAP1",65,0)
 .Q
"RTN","VAFECAP1",66,0)
 Q VAFEDCPT
"RTN","VAFECAP1",67,0)
 ;
"RTN","VAFECAP1",68,0)
FAC(VAFEDEVT,VAFEDEV0,VAFEDEDT) ;gets the facility ID
"RTN","VAFECAP1",69,0)
 N DIV,VAFEDFAC
"RTN","VAFECAP1",70,0)
 S DIV=$S(VAFEDEVT]"":$P(VAFEDEVT,U,11),1:$P(VAFEDEV0,U,11))
"RTN","VAFECAP1",71,0)
 S VAFEDFAC=$$SITE^VASITE(VAFEDEDT,DIV)
"RTN","VAFECAP1",72,0)
 Q $P(VAFEDFAC,U,3)
"RTN","VAFEDCAP")
0^1^B9608862
"RTN","VAFEDCAP",1,0)
VAFEDCAP ;ALB/JLU/CAW;Capture routine for out patient info;6/18/93 [8/22/95 8:57am]
"RTN","VAFEDCAP",2,0)
 ;;5.3;Registration;**38,65,94**;Aug 13, 1993
"RTN","VAFEDCAP",3,0)
 ;
"RTN","VAFEDCAP",4,0)
EN ;this is the main driver entry point
"RTN","VAFEDCAP",5,0)
 N DFN
"RTN","VAFEDCAP",6,0)
 F VAFEDORG=0:0 S VAFEDORG=$O(^TMP("SDEVT",$J,SDHDL,VAFEDORG)) Q:'VAFEDORG  DO
"RTN","VAFEDCAP",7,0)
 .F VAFEDVN=0:0 S VAFEDVN=$O(^TMP("SDEVT",$J,SDHDL,VAFEDORG,"SDOE",VAFEDVN)) Q:'VAFEDVN  DO
"RTN","VAFEDCAP",8,0)
 ..D INIT(SDHDL)
"RTN","VAFEDCAP",9,0)
 ..S VAFEDTYP=$$CHECK(VAFEDEV0,VAFEDEVT)
"RTN","VAFEDCAP",10,0)
 ..I VAFEDTYP DO
"RTN","VAFEDCAP",11,0)
 ...D GATHER^VAFECAP1
"RTN","VAFEDCAP",12,0)
 ...D STORE
"RTN","VAFEDCAP",13,0)
 ...I $P(VAFEDEVT,U,12)=VAFEDCHK D CHILD(VAFEDVN)
"RTN","VAFEDCAP",14,0)
 ..D EXIT2
"RTN","VAFEDCAP",15,0)
 D EXIT
"RTN","VAFEDCAP",16,0)
 Q
"RTN","VAFEDCAP",17,0)
 ;
"RTN","VAFEDCAP",18,0)
EXIT ;variable cleanup (falls through to exit2)
"RTN","VAFEDCAP",19,0)
 K VAFEDVN,VAFEDORG,VAFEDTYP,VAFEDCHK
"RTN","VAFEDCAP",20,0)
EXIT2 ; kill partial list
"RTN","VAFEDCAP",21,0)
 K VAFEDDAT,VAFEDCPT,VAFEDDX,VAFEDDXC,VAFEDEDT,VAFEDEV0,VAFEDEVT,VAFEDEXT,VAFEDPRC,VAFEDPRO,VAFEDTYP,VAFELIG,VAFEND,X
"RTN","VAFEDCAP",22,0)
 Q
"RTN","VAFEDCAP",23,0)
 ;
"RTN","VAFEDCAP",24,0)
 ;
"RTN","VAFEDCAP",25,0)
INIT(SDHDL) ;this subroutine is used for variable initialization.
"RTN","VAFEDCAP",26,0)
 S VAFEDEVT=^TMP("SDEVT",$J,SDHDL,VAFEDORG,"SDOE",VAFEDVN,0,"AFTER")
"RTN","VAFEDCAP",27,0)
 S VAFEDEV0=^("BEFORE") ;naked from line before
"RTN","VAFEDCAP",28,0)
 S VAFELIG=$S(VAFEDEVT]"":$P(VAFEDEVT,U,13),1:$P(VAFEDEV0,U,13))
"RTN","VAFEDCAP",29,0)
 D NOW^%DTC
"RTN","VAFEDCAP",30,0)
 S VAFEDDAT=X
"RTN","VAFEDCAP",31,0)
 S DFN=$$PAT(VAFEDEVT,VAFEDEV0)
"RTN","VAFEDCAP",32,0)
 S VAFEDEDT=$$DTEVT(VAFEDEVT,VAFEDEV0)
"RTN","VAFEDCAP",33,0)
 S VAFEDCHK=$O(^SD(409.63,"AC","CHECKED OUT",0))
"RTN","VAFEDCAP",34,0)
 Q
"RTN","VAFEDCAP",35,0)
 ;
"RTN","VAFEDCAP",36,0)
 ;
"RTN","VAFEDCAP",37,0)
DTEVT(VAFEDEVT,VAFEDEV0) ;gets the event date
"RTN","VAFEDCAP",38,0)
 Q $S(VAFEDEVT]"":+VAFEDEVT,1:+VAFEDEV0)
"RTN","VAFEDCAP",39,0)
 ;
"RTN","VAFEDCAP",40,0)
CHECK(VAFEDEV0,VAFEDEVT) ;this is a function call to check the type of
"RTN","VAFEDCAP",41,0)
 ;event we are dealing with
"RTN","VAFEDCAP",42,0)
 ;The types of events needed are check outs or deleted checked out events
"RTN","VAFEDCAP",43,0)
 ;this function will returned a
"RTN","VAFEDCAP",44,0)
 ; 1 for deleted events
"RTN","VAFEDCAP",45,0)
 ; 2 for checked out events
"RTN","VAFEDCAP",46,0)
 ; 0 will be returned if fails or not the right event
"RTN","VAFEDCAP",47,0)
 ;
"RTN","VAFEDCAP",48,0)
 N X
"RTN","VAFEDCAP",49,0)
 DO
"RTN","VAFEDCAP",50,0)
 .I VAFEDEVT']"",VAFEDEV0]"" S X=1 Q
"RTN","VAFEDCAP",51,0)
 .I $P(VAFEDEV0,U,12)=VAFEDCHK,$P(VAFEDEVT,U,12)'=VAFEDCHK S X=1 Q
"RTN","VAFEDCAP",52,0)
 .I $P(VAFEDEVT,U,12)=VAFEDCHK S X=2 Q
"RTN","VAFEDCAP",53,0)
 .S X=0
"RTN","VAFEDCAP",54,0)
 .Q
"RTN","VAFEDCAP",55,0)
 Q X
"RTN","VAFEDCAP",56,0)
 ;
"RTN","VAFEDCAP",57,0)
PAT(VAFEDEVT,VAFEDEV0) ;this function gets the patient DFN from the event.
"RTN","VAFEDCAP",58,0)
 ;
"RTN","VAFEDCAP",59,0)
 Q $S(VAFEDEVT]"":$P(VAFEDEVT,U,2),VAFEDEV0]"":$P(VAFEDEV0,U,2),1:0)
"RTN","VAFEDCAP",60,0)
 ;
"RTN","VAFEDCAP",61,0)
CHILD(VAFEDOP0) ;checks and files child events.
"RTN","VAFEDCAP",62,0)
 ;
"RTN","VAFEDCAP",63,0)
 N X,VAFEDTS1,VAFEDTS2,VAFEDVN,DATE
"RTN","VAFEDCAP",64,0)
 F VAFEDVN=0:0 S VAFEDVN=$O(^SCE("APAR",VAFEDOP0,VAFEDVN)) Q:'VAFEDVN  DO
"RTN","VAFEDCAP",65,0)
 .S VAFEDTS1=$G(^SCE(VAFEDVN,0)),VAFELIG=$P(VAFEDTS1,U,13)
"RTN","VAFEDCAP",66,0)
 .I VAFEDTS1="" Q
"RTN","VAFEDCAP",67,0)
 .S DATE=$$SDVDT^SCDXUTL($P(VAFEDTS1,".",1),$P(VAFEDTS1,U,2))
"RTN","VAFEDCAP",68,0)
 .S $P(VAFEDST1,U,1)=DATE
"RTN","VAFEDCAP",69,0)
 .S $P(VAFEDST1,U,3)=$$CLSC^VAFECAP1(VAFEDTS1)
"RTN","VAFEDCAP",70,0)
 .I $P(VAFEDTS1,U,8)=2 DO
"RTN","VAFEDCAP",71,0)
 ..N VAFEN,VAFELP,VAFESTR
"RTN","VAFEDCAP",72,0)
 ..S VAFESTR=$P(VAFEDTS1,U,9),VAFEDST2=""
"RTN","VAFEDCAP",73,0)
 ..F VAFELP=1:1 S VAFEN=$P(VAFESTR,";",VAFELP) Q:'VAFEN  S VAFEDST2=VAFEDST2_$S(($E(VAFEDST2,$L(VAFEDST2))'=U&(VAFEDST2]"")):U,1:"")_$G(^SDV(+VAFEDTS1,"CS",VAFEN,"PR"))
"RTN","VAFEDCAP",74,0)
 ..Q
"RTN","VAFEDCAP",75,0)
 .D STORE
"RTN","VAFEDCAP",76,0)
 Q
"RTN","VAFEDCAP",77,0)
 ;
"RTN","VAFEDCAP",78,0)
STORE ;this subroutine places the data into the correct file.
"RTN","VAFEDCAP",79,0)
 ;
"RTN","VAFEDCAP",80,0)
 N X,DIC,VAFEDEVN
"RTN","VAFEDCAP",81,0)
 S VAFEDEVN=$S(VAFEDTYP=1:99,1:98)
"RTN","VAFEDCAP",82,0)
 D FILE^VAFEDG(VAFEDDAT,DFN,VAFEDVN,VAFEDEVN,VAFEDST1,VAFEDST2,VAFELIG,$G(VAFEADM),.VAFEDDX)
"RTN","VAFEDCAP",83,0)
 Q
"RTN","VAFEDCAP",84,0)
 ;
"RTN","VAFHLDG1")
0^7^B11499735
"RTN","VAFHLDG1",1,0)
VAFHLDG1 ;ALB/CM/ESD HL7 DG1 SEGMENT BUILDING ;05/01/95
"RTN","VAFHLDG1",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLDG1",3,0)
 ;
"RTN","VAFHLDG1",4,0)
 ;This routine will build an HL7 DG1 segment for an inpatient or
"RTN","VAFHLDG1",5,0)
 ;outpatient event depending on the entry point used.
"RTN","VAFHLDG1",6,0)
 ;Use IN for inpatient
"RTN","VAFHLDG1",7,0)
 ;Use OUT for outpatient
"RTN","VAFHLDG1",8,0)
 ;
"RTN","VAFHLDG1",9,0)
IN ;
"RTN","VAFHLDG1",10,0)
 Q
"RTN","VAFHLDG1",11,0)
 ;
"RTN","VAFHLDG1",12,0)
 ;
"RTN","VAFHLDG1",13,0)
OUT(DFN,EVT,EVDTS,VPTR,STRP,NUMP) ;
"RTN","VAFHLDG1",14,0)
 ;DFN - Patient File
"RTN","VAFHLDG1",15,0)
 ;EVT - event number from pivot file
"RTN","VAFHLDG1",16,0)
 ;EVDTS - event date/time FileMan
"RTN","VAFHLDG1",17,0)
 ;VPTR - variable pointer
"RTN","VAFHLDG1",18,0)
 ;STRP - string of fields
"RTN","VAFHLDG1",19,0)
 ;(if null - required fields, if "A" - supported
"RTN","VAFHLDG1",20,0)
 ;fields, or string of fields seperated by commas")
"RTN","VAFHLDG1",21,0)
 ;NUMP - ID # (optional)
"RTN","VAFHLDG1",22,0)
 ;
"RTN","VAFHLDG1",23,0)
 N ERR
"RTN","VAFHLDG1",24,0)
 I '$D(NUMP) S NUMP=1
"RTN","VAFHLDG1",25,0)
 S ERR=$$ODG1^VAFHCDG($G(DFN),$G(EVT),$G(EVDTS),$G(VPTR),$G(STRP),NUMP)
"RTN","VAFHLDG1",26,0)
 Q ERR
"RTN","VAFHLDG1",27,0)
 ;
"RTN","VAFHLDG1",28,0)
 ;
"RTN","VAFHLDG1",29,0)
EN(VAFENC,VAFSTR,VAFHLQ,VAFHLFS,VAFARRY) ; Entry point for Ambulatory Care Database Project
"RTN","VAFHLDG1",30,0)
 ; - Entry point to return the HL7 DG1 segment
"RTN","VAFHLDG1",31,0)
 ;
"RTN","VAFHLDG1",32,0)
 ;   This function will create VA-specific DG1 segment(s) for a 
"RTN","VAFHLDG1",33,0)
 ;   given outpatient encounter.  The DG1 segment is designed to transfer
"RTN","VAFHLDG1",34,0)
 ;   generic information about an outpatient diagnosis or diagnoses.
"RTN","VAFHLDG1",35,0)
 ;
"RTN","VAFHLDG1",36,0)
 ;  Input:   VAFENC - IEN of the Outpatient Encounter (#409.68) file
"RTN","VAFHLDG1",37,0)
 ;           VAFSTR - String of fields requested separated by commas
"RTN","VAFHLDG1",38,0)
 ;           VAFHLQ - Optional HL7 null variable. If not there, use 
"RTN","VAFHLDG1",39,0)
 ;                    default HL7 variable
"RTN","VAFHLDG1",40,0)
 ;          VAFHLFS - Optional HL7 field separator. If not there, use 
"RTN","VAFHLDG1",41,0)
 ;                    default HL7 variable
"RTN","VAFHLDG1",42,0)
 ;          VAFARRY - Optional user-supplied array name to hold the HL7 DG1 segments
"RTN","VAFHLDG1",43,0)
 ;
"RTN","VAFHLDG1",44,0)
 ; Output:  Array of HL7 DG1 segments
"RTN","VAFHLDG1",45,0)
 ;
"RTN","VAFHLDG1",46,0)
 ;
"RTN","VAFHLDG1",47,0)
 N I,VAFDICDE,VAFIDX,VAFNODE,VAFDNODE,VAFY,SDCNT,SDDXY,X
"RTN","VAFHLDG1",48,0)
 S VAFARRY=$G(VAFARRY)
"RTN","VAFHLDG1",49,0)
 ;
"RTN","VAFHLDG1",50,0)
 ; - If VAFARRY not defined, use ^TMP("VAFHL",$J,"DIAGNOSIS")
"RTN","VAFHLDG1",51,0)
 S:(VAFARRY="") VAFARRY="^TMP(""VAFHL"",$J,""DIAGNOSIS"")"
"RTN","VAFHLDG1",52,0)
 ;
"RTN","VAFHLDG1",53,0)
 ; - If VAFHLQ or VAFHLFS aren't passed in, use default HL7 variables
"RTN","VAFHLDG1",54,0)
 S VAFHLQ=$S($D(VAFHLQ):VAFHLQ,1:$G(HLQ)),VAFHLFS=$S($D(VAFHLFS):VAFHLFS,1:$G(HLFS))
"RTN","VAFHLDG1",55,0)
 I '$G(VAFENC)!($G(VAFSTR)']"") S @VAFARRY@(1,0)="DG1"_VAFHLFS_1 G ENQ
"RTN","VAFHLDG1",56,0)
 S VAFIDX=0,VAFSTR=","_VAFSTR_","
"RTN","VAFHLDG1",57,0)
 ;
"RTN","VAFHLDG1",58,0)
 ; - Get all outpatient diagnoses for encounter
"RTN","VAFHLDG1",59,0)
 D SET^SDCO4(VAFENC)
"RTN","VAFHLDG1",60,0)
 ;
"RTN","VAFHLDG1",61,0)
 ; - Set diagnosis array to 0 if no outpatient diagnosis for encounter
"RTN","VAFHLDG1",62,0)
 I '$G(SDCNT) S SDDXY(1)=0
"RTN","VAFHLDG1",63,0)
 ;
"RTN","VAFHLDG1",64,0)
ALL ; - All outpatient diagnoses for encounter
"RTN","VAFHLDG1",65,0)
 F I=0:0 S I=$O(SDDXY(I)) Q:'I  D
"RTN","VAFHLDG1",66,0)
 .;
"RTN","VAFHLDG1",67,0)
 .S VAFNODE=$G(SDDXY(I))
"RTN","VAFHLDG1",68,0)
 .;
"RTN","VAFHLDG1",69,0)
 .; - build array of HL7 (DG1) segments
"RTN","VAFHLDG1",70,0)
 .D BUILD
"RTN","VAFHLDG1",71,0)
 ;
"RTN","VAFHLDG1",72,0)
ENQ Q
"RTN","VAFHLDG1",73,0)
 ;
"RTN","VAFHLDG1",74,0)
 ;
"RTN","VAFHLDG1",75,0)
BUILD ; - Build array of HL7 (DG1) segments
"RTN","VAFHLDG1",76,0)
 S $P(VAFY,VAFHLFS,16)="",VAFIDX=VAFIDX+1
"RTN","VAFHLDG1",77,0)
 S VAFDICDE="I9" ; Diagnosis Coding Method = I9 (ICD-9)
"RTN","VAFHLDG1",78,0)
 ;
"RTN","VAFHLDG1",79,0)
 ; - Sequential number (required field)
"RTN","VAFHLDG1",80,0)
 S $P(VAFY,VAFHLFS,1)=VAFIDX
"RTN","VAFHLDG1",81,0)
 ;
"RTN","VAFHLDG1",82,0)
 I VAFSTR[",2," S $P(VAFY,VAFHLFS,2)=$S($G(VAFDICDE)]"":VAFDICDE,1:VAFHLQ) ; Diagnosis Coding Method = ICD-9
"RTN","VAFHLDG1",83,0)
 I (VAFSTR[",3,")!(VAFSTR[",4,") S VAFDNODE=$G(^ICD9(+$P($G(VAFNODE),"^",2),0)) ; Get node from ICD Diagnosis file
"RTN","VAFHLDG1",84,0)
 I VAFSTR[",3," S X=$P($G(VAFDNODE),"^"),$P(VAFY,VAFHLFS,3)=$S(X]"":X,1:VAFHLQ) ; Diagnosis Code
"RTN","VAFHLDG1",85,0)
 I VAFSTR[",4," S X=$P($G(VAFDNODE),"^",3),$P(VAFY,VAFHLFS,4)=$S(X]"":X,1:VAFHLQ) ; Diagnosis Description
"RTN","VAFHLDG1",86,0)
 I VAFSTR[",5," S X=$$HLDATE^HLFNC($P($G(^SCE(VAFENC,0)),"^")),$P(VAFY,VAFHLFS,5)=$S(X]"":X,1:VAFHLQ) ; Diagnosis Date/Time (Encounter Date/Time)
"RTN","VAFHLDG1",87,0)
 ;
"RTN","VAFHLDG1",88,0)
 ; - Contains 1 if primary diagnosis, blank otherwise
"RTN","VAFHLDG1",89,0)
 I VAFSTR[",15," S X=$P($G(^SDD(409.43,+$P($G(VAFNODE),"^"),0)),"^",3),$P(VAFY,VAFHLFS,15)=$S(X]"":X,1:VAFHLQ) ; Diagnosis Ranking Number
"RTN","VAFHLDG1",90,0)
 ;
"RTN","VAFHLDG1",91,0)
 ; - Set all outpatient diagnoses into array
"RTN","VAFHLDG1",92,0)
 S @VAFARRY@(VAFIDX,0)="DG1"_VAFHLFS_$G(VAFY)
"RTN","VAFHLDG1",93,0)
 Q
"RTN","VAFHLEVN")
0^8^B3788847
"RTN","VAFHLEVN",1,0)
VAFHLEVN ;ALB/CM/ESD HL7 EVN SEGMENT BUILDING ;05/01/95
"RTN","VAFHLEVN",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLEVN",3,0)
 ;
"RTN","VAFHLEVN",4,0)
 ;This routine will build an HL7 EVN segment
"RTN","VAFHLEVN",5,0)
 ;
"RTN","VAFHLEVN",6,0)
EVN(TYPE,FLAG) ;
"RTN","VAFHLEVN",7,0)
 ;
"RTN","VAFHLEVN",8,0)
 ;Input:
"RTN","VAFHLEVN",9,0)
 ;TYPE - the HL7 Event Type
"RTN","VAFHLEVN",10,0)
 ;FLAG - HL7 Event Reason Code
"RTN","VAFHLEVN",11,0)
 ;       The codes will be 04 for update to "old" event
"RTN","VAFHLEVN",12,0)
 ;       or 05 for "new"/"current" event
"RTN","VAFHLEVN",13,0)
 ;
"RTN","VAFHLEVN",14,0)
 N ET,EVN
"RTN","VAFHLEVN",15,0)
 D NOW^%DTC S ET=$$HLDATE^HLFNC(%,"TS") K %,X,%H,%I
"RTN","VAFHLEVN",16,0)
 S EVN="EVN"_HLFS_TYPE_HLFS_ET_HLFS_HLFS_FLAG
"RTN","VAFHLEVN",17,0)
 Q EVN
"RTN","VAFHLEVN",18,0)
 ;
"RTN","VAFHLEVN",19,0)
 ;
"RTN","VAFHLEVN",20,0)
EN(VAFEVTYP,VAFEVDT,VAFSTR,VAFHLQ,VAFHLFS) ;
"RTN","VAFHLEVN",21,0)
 ; Entry point for Ambulatory Care Database Project
"RTN","VAFHLEVN",22,0)
 ;
"RTN","VAFHLEVN",23,0)
 ; Entry point to return the HL7 EVN (Event Type) segment
"RTN","VAFHLEVN",24,0)
 ;
"RTN","VAFHLEVN",25,0)
 ;  Input:  VAFEVTYP - Event Type Code
"RTN","VAFHLEVN",26,0)
 ;            Valid codes:  "A08" - Update Patient Information
"RTN","VAFHLEVN",27,0)
 ;                          "A23" - Delete a Patient Record
"RTN","VAFHLEVN",28,0)
 ;
"RTN","VAFHLEVN",29,0)
 ;          VAFEVDT  - Event Date/Time
"RTN","VAFHLEVN",30,0)
 ;            Date/Time Event Occurred (same as Encounter Date/Time)
"RTN","VAFHLEVN",31,0)
 ;
"RTN","VAFHLEVN",32,0)
 ;          VAFSTR   - String of fields requested separated by commas.
"RTN","VAFHLEVN",33,0)
 ;
"RTN","VAFHLEVN",34,0)
 ;          VAFHLQ   - Optional HL7 null variable. If not there, use 
"RTN","VAFHLEVN",35,0)
 ;                     default HL7 variable.
"RTN","VAFHLEVN",36,0)
 ;
"RTN","VAFHLEVN",37,0)
 ;          VAFHLFS  - Optional HL7 field separator. If not there, use 
"RTN","VAFHLEVN",38,0)
 ;                     default HL7 variable.
"RTN","VAFHLEVN",39,0)
 ;
"RTN","VAFHLEVN",40,0)
 ; Output:  String containing desired components of the EVN segment.
"RTN","VAFHLEVN",41,0)
 ;
"RTN","VAFHLEVN",42,0)
 ;
"RTN","VAFHLEVN",43,0)
 N VAFY,X
"RTN","VAFHLEVN",44,0)
 I ($G(VAFEVTYP)="")!($G(VAFSTR)="") G ENQ
"RTN","VAFHLEVN",45,0)
 S VAFHLQ=$S($D(VAFHLQ):VAFHLQ,1:$G(HLQ)),VAFHLFS=$S($D(VAFHLFS):VAFHLFS,1:$G(HLFS)) ; If VAFHLQ or VAFHLFS aren't passed in, use default HL7 variables
"RTN","VAFHLEVN",46,0)
 S $P(VAFY,VAFHLFS,2)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLEVN",47,0)
 I VAFSTR[",1," S $P(VAFY,VAFHLFS,1)=$S((VAFEVTYP="A08")!(VAFEVTYP="A23"):VAFEVTYP,1:VAFHLQ) ; Event Type Code
"RTN","VAFHLEVN",48,0)
 I VAFSTR[",2," S X=$$HLDATE^HLFNC($G(VAFEVDT)),$P(VAFY,VAFHLFS,2)=$S(X]"":X,1:VAFHLQ) ; Event Date/Time
"RTN","VAFHLEVN",49,0)
 ;
"RTN","VAFHLEVN",50,0)
ENQ ; Return segment
"RTN","VAFHLEVN",51,0)
 Q "EVN"_VAFHLFS_$G(VAFY)
"RTN","VAFHLPID")
0^3^B11755319
"RTN","VAFHLPID",1,0)
VAFHLPID ;ALB/MLI/ESD - Create generic PID segment ; 8 February 93
"RTN","VAFHLPID",2,0)
 ;;5.3;Registration;**68,94**;Aug 13, 1993
"RTN","VAFHLPID",3,0)
 ;
"RTN","VAFHLPID",4,0)
 ; This routine returns the HL7 defined PID segment with its
"RTN","VAFHLPID",5,0)
 ; mappings to DHCP PATIENT file fields.
"RTN","VAFHLPID",6,0)
 ;
"RTN","VAFHLPID",7,0)
EN(DFN,VAFSTR,VAFNUM) ; returns PID segment
"RTN","VAFHLPID",8,0)
 ;     
"RTN","VAFHLPID",9,0)
 ;
"RTN","VAFHLPID",10,0)
 ;  Input - DFN as internal entry number of the PATIENT file
"RTN","VAFHLPID",11,0)
 ;          VAFSTR as string of fields requested separated by commas
"RTN","VAFHLPID",12,0)
 ;          VAFNUM as sequential number for SET ID (default=1)
"RTN","VAFHLPID",13,0)
 ;
"RTN","VAFHLPID",14,0)
 ;      ****Also assumes all HL7 variables returned from****
"RTN","VAFHLPID",15,0)
 ;          INIT^HLTRANS are defined
"RTN","VAFHLPID",16,0)
 ;
"RTN","VAFHLPID",17,0)
 ; Output - String containing the desired components of the PID segment
"RTN","VAFHLPID",18,0)
 ;          VAFPID(1) - if the string is longer than 245, the remaining
"RTN","VAFHLPID",19,0)
 ;                      characters will be returned in VAFPID(1)
"RTN","VAFHLPID",20,0)
 ;          n is a sequential number beginning with 1.  If
"RTN","VAFHLPID",21,0)
 ;          patient name returned as "", patient does not exist
"RTN","VAFHLPID",22,0)
 ;
"RTN","VAFHLPID",23,0)
 ; WARNING: This routine makes external calls to VADPT.  Non-namespaced
"RTN","VAFHLPID",24,0)
 ;          variables may be altered.
"RTN","VAFHLPID",25,0)
 ;
"RTN","VAFHLPID",26,0)
 ;    NOTE: Race and Religious Preference fields were added to this 
"RTN","VAFHLPID",27,0)
 ;          segment as part of the Ambulatory Care Reporting Project.
"RTN","VAFHLPID",28,0)
 ;
"RTN","VAFHLPID",29,0)
 N I,VAFY,VA,VADM,X,X1,Y ; calls VADPT...have to NEW
"RTN","VAFHLPID",30,0)
 S VAFSTR=$G(VAFSTR) ; if not defined, just return required fields
"RTN","VAFHLPID",31,0)
 S DFN=$G(DFN) G:DFN']"" QUIT D DEM^VADPT
"RTN","VAFHLPID",32,0)
 S $P(VAFY,HLFS,19)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLPID",33,0)
 I VAFSTR[",1," S $P(VAFY,HLFS,1)=$S($G(VAFNUM):VAFNUM,1:1) ; set id
"RTN","VAFHLPID",34,0)
 S $P(VAFY,HLFS,3)=$$M10^HLFNC(DFN),X=$$HLNAME^HLFNC(VADM(1)),$P(VAFY,HLFS,5)=$S(X]"":X,1:HLQ) ; required fields
"RTN","VAFHLPID",35,0)
 I VAFSTR[",2," S $P(VAFY,HLFS,2)=$S($G(VA("PID"))]"":$$M10^HLFNC(VA("PID")),1:HLQ) ; Patient ID (external) [Primary Long ID]
"RTN","VAFHLPID",36,0)
 I VAFSTR[",4," S X=$G(VA("BID")),$P(VAFY,HLFS,4)=$S(X]"":X,1:HLQ) ; Alternalte Patient ID [Primary Short ID]
"RTN","VAFHLPID",37,0)
 I VAFSTR[",6," S X=$P($G(^DPT(DFN,.24)),"^",3),$P(VAFY,HLFS,6)=$S(X]"":X,1:HLQ) ; mother's maiden name
"RTN","VAFHLPID",38,0)
 I VAFSTR[",7," S $P(VAFY,HLFS,7)=$$HLDATE^HLFNC($P(VADM(3),"^",1)) ; date of birth (required field)
"RTN","VAFHLPID",39,0)
 I VAFSTR[",8," S $P(VAFY,HLFS,8)=$S("^M^F^"[("^"_$P(VADM(5),"^",1)_"^"):$P(VADM(5),"^",1),1:"U") ; sex
"RTN","VAFHLPID",40,0)
 I VAFSTR[10 S X=$P($G(^DIC(10,+VADM(8),0)),"^",2),$P(VAFY,HLFS,10)=$S(X]"":X,1:7) ; Race (if blank, send 7 (UNKNOWN))
"RTN","VAFHLPID",41,0)
 I VAFSTR[11!(VAFSTR[12) D
"RTN","VAFHLPID",42,0)
 . S X=$G(^DPT(DFN,.11)),X=$$ADDR^VAFHLFNC($P(X,"^",1,5)_"^"_$P(X,"^",12),$P(X,"^",7))
"RTN","VAFHLPID",43,0)
 . I VAFSTR[11 S $P(VAFY,HLFS,11)=$S($P(X,HLFS,1)]"":$P(X,HLFS,1),1:HLQ) ; address
"RTN","VAFHLPID",44,0)
 . I VAFSTR[12 S $P(VAFY,HLFS,12)=$S($P(X,HLFS,2)]"":$P(X,HLFS,2),1:HLQ) ; county
"RTN","VAFHLPID",45,0)
 S X=$G(^DPT(DFN,.13))
"RTN","VAFHLPID",46,0)
 I VAFSTR[13 S X1=$$HLPHONE^HLFNC($P(X,"^",1)),$P(VAFY,HLFS,13)=$S(X1]"":X1,1:HLQ) ; home phone
"RTN","VAFHLPID",47,0)
 I VAFSTR[14 S X1=$$HLPHONE^HLFNC($P(X,"^",2)),$P(VAFY,HLFS,14)=$S(X1]"":X1,1:HLQ) ; work phone
"RTN","VAFHLPID",48,0)
 I VAFSTR[16 S X=$P($G(^DIC(11,+VADM(10),0)),"^",3),$P(VAFY,HLFS,16)=$S(X="N":"S",X="U":"",X="":HLQ,1:X) ; marital status (DHCP N=HL7 S, U="")
"RTN","VAFHLPID",49,0)
 I VAFSTR[17 S X=$P($G(^DIC(13,+VADM(9),0)),"^",4),$P(VAFY,HLFS,17)=$S(X]"":X,1:29) ; Religious preference (if blank send 29 (UNKNOWN))
"RTN","VAFHLPID",50,0)
 I VAFSTR[19 S X=$P(VADM(2),"^",1),$P(VAFY,HLFS,19)=$S(X]"":X,1:HLQ) ; ssn
"RTN","VAFHLPID",51,0)
QUIT D KVA^VADPT
"RTN","VAFHLPID",52,0)
 S X="PID"_HLFS_$G(VAFY) I $L(X)>245 S VAFPID(1)=$E(X,246,999)
"RTN","VAFHLPID",53,0)
 Q $E(X,1,245)
"RTN","VAFHLPR1")
0^9^B12921852
"RTN","VAFHLPR1",1,0)
VAFHLPR1 ;ALB/ESD - Create generic HL7 PR1 Segment ; 06-MAY-1996
"RTN","VAFHLPR1",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLPR1",3,0)
 ;
"RTN","VAFHLPR1",4,0)
 ;  This function will create VA-specific PR1 segment(s) for a 
"RTN","VAFHLPR1",5,0)
 ;  given outpatient encounter. The PR1 segment is designed to transfer
"RTN","VAFHLPR1",6,0)
 ;  information relative to various types of procedures performed during
"RTN","VAFHLPR1",7,0)
 ;  a patient visit.
"RTN","VAFHLPR1",8,0)
 ;
"RTN","VAFHLPR1",9,0)
EN(VAFENC,VAFSTR,VAFHLQ,VAFHLFS,VAFHLECH,VAFARRY) ; Entry point for Ambulatory Care Database Project
"RTN","VAFHLPR1",10,0)
 ; - Entry point to return the HL7 PR1 segment
"RTN","VAFHLPR1",11,0)
 ;
"RTN","VAFHLPR1",12,0)
 ;  Input:   VAFENC - IEN of the Outpatient Encounter (#409.68) file
"RTN","VAFHLPR1",13,0)
 ;           VAFSTR - String of fields requested separated by commas
"RTN","VAFHLPR1",14,0)
 ;           VAFHLQ - Optional HL7 null variable. If not there, use 
"RTN","VAFHLPR1",15,0)
 ;                    default HL7 variable
"RTN","VAFHLPR1",16,0)
 ;          VAFHLFS - Optional HL7 field separator. If not there, use 
"RTN","VAFHLPR1",17,0)
 ;                    default HL7 variable
"RTN","VAFHLPR1",18,0)
 ;         VAFHLECH - HL7 variable containing encoding characters
"RTN","VAFHLPR1",19,0)
 ;          VAFARRY - Optional user-supplied array name which will hold PR1 segments
"RTN","VAFHLPR1",20,0)
 ;
"RTN","VAFHLPR1",21,0)
 ; Output: Array of HL7 PR1 segments
"RTN","VAFHLPR1",22,0)
 ;
"RTN","VAFHLPR1",23,0)
 ;
"RTN","VAFHLPR1",24,0)
 N I,J,VAFCPT,VAFIDX,VAFPR,VAFPROC,VAFPRTYP,VAFY,X
"RTN","VAFHLPR1",25,0)
 S (J,VAFIDX)=0
"RTN","VAFHLPR1",26,0)
 S VAFARRY=$G(VAFARRY)
"RTN","VAFHLPR1",27,0)
 ;
"RTN","VAFHLPR1",28,0)
 ; - If VAFARRY not defined, use ^TMP("VAFHL",$J,"PROCEDURE")
"RTN","VAFHLPR1",29,0)
 S:(VAFARRY="") VAFARRY="^TMP(""VAFHL"",$J,""PROCEDURE"")"
"RTN","VAFHLPR1",30,0)
 ;
"RTN","VAFHLPR1",31,0)
 ; - If VAFHLQ or VAFHLFS aren't passed in, use default HL7 variables
"RTN","VAFHLPR1",32,0)
 S VAFHLQ=$S($D(VAFHLQ):VAFHLQ,1:$G(HLQ)),VAFHLFS=$S($D(VAFHLFS):VAFHLFS,1:$G(HLFS))
"RTN","VAFHLPR1",33,0)
 I '$G(VAFENC)!($G(VAFSTR)']"") S @VAFARRY@(1,J)="PR1"_VAFHLFS_1 G ENQ
"RTN","VAFHLPR1",34,0)
 S VAFSTR=","_VAFSTR_","
"RTN","VAFHLPR1",35,0)
 ;
"RTN","VAFHLPR1",36,0)
 ; - Get procedures for encounter
"RTN","VAFHLPR1",37,0)
 D PROC^SCDXUTL0(VAFENC,"VAFPROC")
"RTN","VAFHLPR1",38,0)
 ;
"RTN","VAFHLPR1",39,0)
 ; - Set procedure array to 0 if no procedures to loop thru once
"RTN","VAFHLPR1",40,0)
 I '$G(VAFPROC(0)) S VAFPROC(1)=0
"RTN","VAFHLPR1",41,0)
 ;
"RTN","VAFHLPR1",42,0)
ALL ; - All procedures for encounter
"RTN","VAFHLPR1",43,0)
 F I=0:0 S I=$O(VAFPROC(I)) Q:'I  D
"RTN","VAFHLPR1",44,0)
 .;
"RTN","VAFHLPR1",45,0)
 .S VAFPR=$G(^ICPT(+$G(^SD(409.71,+$G(VAFPROC(I)),0)),0))
"RTN","VAFHLPR1",46,0)
 .S:($P(VAFPR,"^",1)="") $P(VAFPR,"^",1)=VAFHLQ
"RTN","VAFHLPR1",47,0)
 .S:($P(VAFPR,"^",2)="") $P(VAFPR,"^",2)=VAFHLQ
"RTN","VAFHLPR1",48,0)
 .;
"RTN","VAFHLPR1",49,0)
 .; - build array of HL7 (PR1) segments
"RTN","VAFHLPR1",50,0)
 .D BUILD
"RTN","VAFHLPR1",51,0)
 ;
"RTN","VAFHLPR1",52,0)
ENQ Q
"RTN","VAFHLPR1",53,0)
 ;
"RTN","VAFHLPR1",54,0)
 ;
"RTN","VAFHLPR1",55,0)
BUILD ; - Build array of HL7 (PR1) segments
"RTN","VAFHLPR1",56,0)
 S $P(VAFY,VAFHLFS,14)="",J=0,VAFIDX=VAFIDX+1
"RTN","VAFHLPR1",57,0)
 S VAFCPT="C4" ; Procedure Coding Method = C4 (CPT-4)
"RTN","VAFHLPR1",58,0)
 ;
"RTN","VAFHLPR1",59,0)
 ; - Build HL7 (PR1) segment fields
"RTN","VAFHLPR1",60,0)
 ;
"RTN","VAFHLPR1",61,0)
 ; - Sequential number (required field)
"RTN","VAFHLPR1",62,0)
 S $P(VAFY,VAFHLFS,1)=VAFIDX
"RTN","VAFHLPR1",63,0)
 ;
"RTN","VAFHLPR1",64,0)
 I VAFSTR[",2," S $P(VAFY,VAFHLFS,2)=$S($G(VAFCPT)]"":VAFCPT,1:VAFHLQ) ; Procedure Coding Method = CPT-4
"RTN","VAFHLPR1",65,0)
 I VAFSTR[",3," S $P(VAFY,VAFHLFS,3)=$P(VAFPR,"^",1) ; Procedure Code
"RTN","VAFHLPR1",66,0)
 I VAFSTR[",4," S $P(VAFY,VAFHLFS,4)=$P(VAFPR,"^",2) ; Procedure Description
"RTN","VAFHLPR1",67,0)
 I VAFSTR'[",12," S @VAFARRY@(VAFIDX,J)="PR1"_VAFHLFS_$G(VAFY)
"RTN","VAFHLPR1",68,0)
 I VAFSTR[",12," D PROV(VAFENC,$G(VAFY),VAFARRY,VAFIDX,J,VAFHLFS,$G(VAFHLECH)) ; Provider Types
"RTN","VAFHLPR1",69,0)
 ;
"RTN","VAFHLPR1",70,0)
 Q
"RTN","VAFHLPR1",71,0)
 ;
"RTN","VAFHLPR1",72,0)
 ;
"RTN","VAFHLPR1",73,0)
 ;- Note: Linking of providers with procedures is not currently possible.
"RTN","VAFHLPR1",74,0)
 ;        Due to this constraint, all providers will be included with 
"RTN","VAFHLPR1",75,0)
 ;        each procedure.
"RTN","VAFHLPR1",76,0)
 ;
"RTN","VAFHLPR1",77,0)
PROV(VAFENC,VAFY,VAFARRY,VAFIDX,J,VAFHLFS,VAFHLECH) ; Return all provider types for encounter
"RTN","VAFHLPR1",78,0)
 ;
"RTN","VAFHLPR1",79,0)
 ; If length of provider type data exceeds 245, create new node using 
"RTN","VAFHLPR1",80,0)
 ; J subscript of @VAFARRY@(VAFIDX,J)
"RTN","VAFHLPR1",81,0)
 ;
"RTN","VAFHLPR1",82,0)
 N VAFPRV,X,Z
"RTN","VAFHLPR1",83,0)
 S VAFPRV=0,VAFHLECH=$G(VAFHLECH)
"RTN","VAFHLPR1",84,0)
 I VAFHLECH="" S VAFHLECH="~|\&"
"RTN","VAFHLPR1",85,0)
 S VAFY="PR1"_VAFHLFS_VAFY,VAFY=$E(VAFY,1,$L(VAFY)-2) ;Remove last 2 ^^'s (pieces 13&14)
"RTN","VAFHLPR1",86,0)
 ;
"RTN","VAFHLPR1",87,0)
 ;- Components 1 - 8 of provider practitioner not used
"RTN","VAFHLPR1",88,0)
 F Z=1:1:8 S VAFY=VAFY_$E(VAFHLECH,1)
"RTN","VAFHLPR1",89,0)
 F  S VAFPRV=$O(^SDD(409.44,"OE",VAFENC,VAFPRV)) Q:'VAFPRV  D
"RTN","VAFHLPR1",90,0)
 . S X=0
"RTN","VAFHLPR1",91,0)
 . S X=+$P($G(^SDD(409.44,+VAFPRV,0)),"^",3),X=$$IEN2CODE^XUA4A72(X) I X]"" S X=X_$E(VAFHLECH,2)
"RTN","VAFHLPR1",92,0)
 . I X]"",(($L(VAFY)+($L(X)+1))'>245) S VAFY=VAFY_X Q
"RTN","VAFHLPR1",93,0)
 . I X]"",(($L(VAFY)+($L(X)+1))>245) D
"RTN","VAFHLPR1",94,0)
 .. S @VAFARRY@(VAFIDX,J)=VAFY,J=J+1
"RTN","VAFHLPR1",95,0)
 .. S VAFY="",VAFY=X
"RTN","VAFHLPR1",96,0)
PROVQ I $E(VAFY,$L(VAFY))=$E(VAFHLECH,2) S VAFY=$E(VAFY,1,$L(VAFY)-1) ; Remove last repetition separator
"RTN","VAFHLPR1",97,0)
 S VAFY=VAFY_VAFHLFS_VAFHLFS ;Add last 2 ^^'s to last subscript of ^TMP global
"RTN","VAFHLPR1",98,0)
 S @VAFARRY@(VAFIDX,J)=VAFY
"RTN","VAFHLPR1",99,0)
 Q
"RTN","VAFHLPV1")
0^10^B15922923
"RTN","VAFHLPV1",1,0)
VAFHLPV1 ;ALB/CM/ESD HL7 PV1 SEGMENT BUILDING ;05/01/95
"RTN","VAFHLPV1",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLPV1",3,0)
 ;
"RTN","VAFHLPV1",4,0)
 ;This routine will build an HL7 PV1 segment for an inpatient or
"RTN","VAFHLPV1",5,0)
 ;outpatient event depending on the entry point used.
"RTN","VAFHLPV1",6,0)
 ;Use IN for inpatient
"RTN","VAFHLPV1",7,0)
 ;Use OUT for outpatient
"RTN","VAFHLPV1",8,0)
 ;
"RTN","VAFHLPV1",9,0)
IN(DFN,VAFHDT,VAFSTR,IEN,PIVOT,SETID,VAFDIAG) ;
"RTN","VAFHLPV1",10,0)
 N RESULT
"RTN","VAFHLPV1",11,0)
 S RESULT=$$EN^VAFHAPV1(DFN,VAFHDT,VAFSTR,IEN,PIVOT,SETID,.VAFDIAG)
"RTN","VAFHLPV1",12,0)
 Q $G(RESULT)
"RTN","VAFHLPV1",13,0)
 ;
"RTN","VAFHLPV1",14,0)
OUT(DFN,EVT,EVDTS,VPTR,STRP,NUMP) ;
"RTN","VAFHLPV1",15,0)
 ;DFN - Patient File
"RTN","VAFHLPV1",16,0)
 ;EVT - event number from pivot file
"RTN","VAFHLPV1",17,0)
 ;EVDTS - event date/time in FileMan format
"RTN","VAFHLPV1",18,0)
 ;VPTR - variable pointer
"RTN","VAFHLPV1",19,0)
 ;STRP - string of fields (if null - required fields, if "A" - supported
"RTN","VAFHLPV1",20,0)
 ;fields, or string of fields seperated by commas")
"RTN","VAFHLPV1",21,0)
 ;NUMP - ID # (optional)
"RTN","VAFHLPV1",22,0)
 ;
"RTN","VAFHLPV1",23,0)
 N ERR
"RTN","VAFHLPV1",24,0)
 I '$D(NUMP) S NUMP=1
"RTN","VAFHLPV1",25,0)
 S ERR=$$OPV1^VAFHCPV($G(DFN),$G(EVT),$G(EVDTS),$G(VPTR),$G(STRP),NUMP)
"RTN","VAFHLPV1",26,0)
 Q ERR
"RTN","VAFHLPV1",27,0)
KVAR ;
"RTN","VAFHLPV1",28,0)
 K VAFHLPV1
"RTN","VAFHLPV1",29,0)
 Q
"RTN","VAFHLPV1",30,0)
 ;
"RTN","VAFHLPV1",31,0)
EN(VAFENC,VAFDENC,VAFSTR,VAFNUM,VAFHLQ,VAFHLFS) ;
"RTN","VAFHLPV1",32,0)
 ; Entry point for Ambulatory Care Database Project
"RTN","VAFHLPV1",33,0)
 ;
"RTN","VAFHLPV1",34,0)
 ; Entry point to return the HL7 PV1 (Patient Visit) segment
"RTN","VAFHLPV1",35,0)
 ;
"RTN","VAFHLPV1",36,0)
 ;  Input:    VAFENC - Outpatient Encounter IEN (pointer to Outpatient
"RTN","VAFHLPV1",37,0)
 ;                     Encounter file #409.68)
"RTN","VAFHLPV1",38,0)
 ;                    
"RTN","VAFHLPV1",39,0)
 ;           VAFDENC - Deleted Outpatient Encounter IEN (pointer to
"RTN","VAFHLPV1",40,0)
 ;                     Deleted Outpatient Encounter file #409.74)
"RTN","VAFHLPV1",41,0)
 ;
"RTN","VAFHLPV1",42,0)
 ;            VAFSTR - String of fields requested separated by commas
"RTN","VAFHLPV1",43,0)
 ;
"RTN","VAFHLPV1",44,0)
 ;            VAFNUM - Set ID (sequential number - default=1)
"RTN","VAFHLPV1",45,0)
 ;
"RTN","VAFHLPV1",46,0)
 ;            VAFHLQ - Optional HL7 null variable.  If not there, use 
"RTN","VAFHLPV1",47,0)
 ;                     default HL7 variable.
"RTN","VAFHLPV1",48,0)
 ;
"RTN","VAFHLPV1",49,0)
 ;           VAFHLFS - Optional HL7 field separator.  If not there, use 
"RTN","VAFHLPV1",50,0)
 ;                     default HL7 variable.
"RTN","VAFHLPV1",51,0)
 ;
"RTN","VAFHLPV1",52,0)
 ; Output:   String containing desired components of the PV1 segment
"RTN","VAFHLPV1",53,0)
 ;
"RTN","VAFHLPV1",54,0)
 ; NOTE:   Data for the PV1 segment will be retrieved from either the 
"RTN","VAFHLPV1",55,0)
 ;         Outpatient Encounter file (#409.68) or Deleted Outpatient 
"RTN","VAFHLPV1",56,0)
 ;         Encounter (#409.74) based on the pointer parameter passed in.
"RTN","VAFHLPV1",57,0)
 ;
"RTN","VAFHLPV1",58,0)
 ;
"RTN","VAFHLPV1",59,0)
 N VAFAPTYP,VAFCLIN,VAFDAT,VAFDFN,VAFFLG,VAFNODE,VAFNODE1,VAFORIG,VAFPTCL,VAFY,X
"RTN","VAFHLPV1",60,0)
 I ($G(VAFENC)=""&($G(VAFDENC)=""))!($G(VAFSTR)="") G ENQ
"RTN","VAFHLPV1",61,0)
 S $P(VAFY,VAFHLFS,50)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLPV1",62,0)
 S VAFPTCL="O" ; Patient Class = Outpatient
"RTN","VAFHLPV1",63,0)
 S VAFENC=+$G(VAFENC),VAFDENC=+$G(VAFDENC)
"RTN","VAFHLPV1",64,0)
 ;
"RTN","VAFHLPV1",65,0)
 ; - Set flag to indicate whether Outpatient Encounter ("E") or Deleted 
"RTN","VAFHLPV1",66,0)
 ;   Outpatient Encounter ("D").
"RTN","VAFHLPV1",67,0)
 S VAFFLG=$S(VAFENC:"E",1:"D")
"RTN","VAFHLPV1",68,0)
 ;
"RTN","VAFHLPV1",69,0)
 I VAFFLG="E" S VAFNODE=$G(^SCE(VAFENC,0))
"RTN","VAFHLPV1",70,0)
 ;
"RTN","VAFHLPV1",71,0)
 ; - VAFNODE1 = old encounter zero node for deleted encounter
"RTN","VAFHLPV1",72,0)
 I VAFFLG="D" D
"RTN","VAFHLPV1",73,0)
 . S VAFNODE=$G(^SD(409.74,VAFDENC,0))
"RTN","VAFHLPV1",74,0)
 . S VAFNODE1=$G(^SD(409.74,VAFDENC,1))
"RTN","VAFHLPV1",75,0)
 ;
"RTN","VAFHLPV1",76,0)
 ; - If VAFHLQ or VAFHLFS aren't passed in, use default HL7 variables.
"RTN","VAFHLPV1",77,0)
 S VAFHLQ=$S($D(VAFHLQ):VAFHLQ,1:$G(HLQ)),VAFHLFS=$S($D(VAFHLFS):VAFHLFS,1:$G(HLFS))
"RTN","VAFHLPV1",78,0)
 ;
"RTN","VAFHLPV1",79,0)
 ;- Sequential Number
"RTN","VAFHLPV1",80,0)
 S $P(VAFY,VAFHLFS,1)=$S($G(VAFNUM):VAFNUM,1:1)
"RTN","VAFHLPV1",81,0)
 ;
"RTN","VAFHLPV1",82,0)
 ;- Patient Class
"RTN","VAFHLPV1",83,0)
 I VAFSTR[",2," S $P(VAFY,VAFHLFS,2)=$S($G(VAFPTCL)]"":VAFPTCL,1:VAFHLQ)
"RTN","VAFHLPV1",84,0)
 ;
"RTN","VAFHLPV1",85,0)
 ;- Purpose of Visit
"RTN","VAFHLPV1",86,0)
 I VAFSTR[",4," D
"RTN","VAFHLPV1",87,0)
 . S VAFDAT=$P(VAFNODE,"^"),VAFDFN=$P(VAFNODE,"^",2)
"RTN","VAFHLPV1",88,0)
 . S VAFCLIN=$S(VAFFLG="E":$P(VAFNODE,"^",4),1:$P(VAFNODE1,"^",4))
"RTN","VAFHLPV1",89,0)
 . S VAFAPTYP=$S(VAFFLG="E":$P(VAFNODE,"^",10),1:$P(VAFNODE1,"^",10))
"RTN","VAFHLPV1",90,0)
 . S X=$$POV^SCDXUTL0(VAFDFN,VAFDAT,VAFCLIN,VAFAPTYP)
"RTN","VAFHLPV1",91,0)
 . I X="" D
"RTN","VAFHLPV1",92,0)
 .. S VAFORIG=$S(VAFFLG="E":$P(VAFNODE,"^",8),1:$P(VAFNODE1,"^",8))
"RTN","VAFHLPV1",93,0)
 .. S X=$S(VAFORIG=2:"04"_$S($L(VAFAPTYP)=1:"0"_VAFAPTYP,1:VAFAPTYP),VAFORIG=3:"02"_$S($L(VAFAPTYP)=1:"0"_VAFAPTYP,1:VAFAPTYP),1:"")
"RTN","VAFHLPV1",94,0)
 . S $P(VAFY,VAFHLFS,4)=$S(X]"":X,1:VAFHLQ)
"RTN","VAFHLPV1",95,0)
 ;
"RTN","VAFHLPV1",96,0)
 ;- Location of Visit
"RTN","VAFHLPV1",97,0)
 I VAFSTR[",14," D
"RTN","VAFHLPV1",98,0)
 . S VAFCLIN=$S(VAFFLG="E":$P(VAFNODE,"^",4),1:$P(VAFNODE1,"^",4))
"RTN","VAFHLPV1",99,0)
 . S X=$P($G(^SC(+VAFCLIN,0)),"^",19),X=$S(X="Y":1,X="N":6,1:"")
"RTN","VAFHLPV1",100,0)
 . I X="" S VAFORIG=$S(VAFFLG="E":$P(VAFNODE,"^",8),1:$P(VAFNODE1,"^",8)),X=$S(VAFORIG=2!(VAFORIG=3):1,1:"")
"RTN","VAFHLPV1",101,0)
 . S $P(VAFY,VAFHLFS,14)=$S(X]"":X,1:VAFHLQ)
"RTN","VAFHLPV1",102,0)
 ;
"RTN","VAFHLPV1",103,0)
 ;- Outpatient Encounter IEN (not passed for deleted outpat encounter)
"RTN","VAFHLPV1",104,0)
 I VAFSTR[",19," S $P(VAFY,VAFHLFS,19)=$S(VAFFLG="E":VAFENC,1:VAFHLQ)
"RTN","VAFHLPV1",105,0)
 ;
"RTN","VAFHLPV1",106,0)
 ;- Facility Number and Suffix
"RTN","VAFHLPV1",107,0)
 I VAFSTR[",39," D
"RTN","VAFHLPV1",108,0)
 . S X=$S(VAFFLG="E":$$SITE^VASITE($P(VAFNODE,"^")),1:$$SITE^VASITE($P(VAFNODE1,"^")))
"RTN","VAFHLPV1",109,0)
 . S X=$P(X,"^",3)
"RTN","VAFHLPV1",110,0)
 . S $P(VAFY,VAFHLFS,39)=$S(X]"":X,1:VAFHLQ)
"RTN","VAFHLPV1",111,0)
 ;
"RTN","VAFHLPV1",112,0)
 ;- Encounter Date/Time
"RTN","VAFHLPV1",113,0)
 I VAFSTR[",44," D
"RTN","VAFHLPV1",114,0)
 . S X=$S(VAFFLG="E":$P(VAFNODE,"^"),1:$P(VAFNODE1,"^"))
"RTN","VAFHLPV1",115,0)
 . S X=$$HLDATE^HLFNC(X)
"RTN","VAFHLPV1",116,0)
 . S $P(VAFY,VAFHLFS,44)=$S(X]"":X,1:VAFHLQ)
"RTN","VAFHLPV1",117,0)
 ;
"RTN","VAFHLPV1",118,0)
 ;- Unique Identifier (PCE)
"RTN","VAFHLPV1",119,0)
 I VAFSTR[",50," D
"RTN","VAFHLPV1",120,0)
 . S X=$S(VAFFLG="E":$P(VAFNODE,"^",20),1:$P(VAFNODE1,"^",20))
"RTN","VAFHLPV1",121,0)
 . S $P(VAFY,VAFHLFS,50)=$S(X]"":X,1:VAFHLQ)
"RTN","VAFHLPV1",122,0)
 ;
"RTN","VAFHLPV1",123,0)
ENQ Q "PV1"_VAFHLFS_$G(VAFY)
"RTN","VAFHLZCL")
0^11^B3695882
"RTN","VAFHLZCL",1,0)
VAFHLZCL ;ALB/ESD - Create generic HL7 ZCL Segment ; 02-MAY-1996
"RTN","VAFHLZCL",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLZCL",3,0)
 ;
"RTN","VAFHLZCL",4,0)
 ;  This function will create VA-specific ZCL segment(s) for a 
"RTN","VAFHLZCL",5,0)
 ;  given outpatient encounter.  The ZCL segment is designed to transfer
"RTN","VAFHLZCL",6,0)
 ;  generic information about outpatient classifications.
"RTN","VAFHLZCL",7,0)
 ;
"RTN","VAFHLZCL",8,0)
 ;
"RTN","VAFHLZCL",9,0)
EN(DFN,VAFENC,VAFSTR,VAFHLQ,VAFHLFS,VAFARRY) ; Entry point to return the HL7 ZCL segment
"RTN","VAFHLZCL",10,0)
 ;
"RTN","VAFHLZCL",11,0)
 ;  Input:   VAFENC - IEN of the Outpatient Encounter (#409.68) file
"RTN","VAFHLZCL",12,0)
 ;           VAFSTR - String of fields requested separated by commas
"RTN","VAFHLZCL",13,0)
 ;           VAFHLQ - Optional HL7 null variable. If not there, use 
"RTN","VAFHLZCL",14,0)
 ;                    default HL7 variable
"RTN","VAFHLZCL",15,0)
 ;          VAFHLFS - Optional HL7 field separator. If not there, use 
"RTN","VAFHLZCL",16,0)
 ;                    default HL7 variable
"RTN","VAFHLZCL",17,0)
 ;          VAFARRY - Optional user-supplied array name which will hold ZCL segments
"RTN","VAFHLZCL",18,0)
 ;
"RTN","VAFHLZCL",19,0)
 ; Output:  Array of HL7 ZCL segments
"RTN","VAFHLZCL",20,0)
 ;
"RTN","VAFHLZCL",21,0)
 ;
"RTN","VAFHLZCL",22,0)
 N I,VAFCLASS,VAFIDX,VAFY
"RTN","VAFHLZCL",23,0)
 S VAFARRY=$G(VAFARRY)
"RTN","VAFHLZCL",24,0)
 ;
"RTN","VAFHLZCL",25,0)
 ; - If VAFARRY not defined, use ^TMP("VAFHL",$J,"CLASS")
"RTN","VAFHLZCL",26,0)
 S:(VAFARRY="") VAFARRY="^TMP(""VAFHL"",$J,""CLASS"")"
"RTN","VAFHLZCL",27,0)
 ;
"RTN","VAFHLZCL",28,0)
 ; - If VAFHLQ or VAFHLFS aren't passed in, use default HL7 variables
"RTN","VAFHLZCL",29,0)
 S VAFHLQ=$S($D(VAFHLQ):VAFHLQ,1:$G(HLQ)),VAFHLFS=$S($D(VAFHLFS):VAFHLFS,1:$G(HLFS))
"RTN","VAFHLZCL",30,0)
 I '$G(DFN)!('$G(VAFENC))!($G(VAFSTR)']"") S @VAFARRY@(1,0)="ZCL"_VAFHLFS_1 G ENQ
"RTN","VAFHLZCL",31,0)
 S VAFIDX=0,VAFSTR=","_VAFSTR_","
"RTN","VAFHLZCL",32,0)
 ;
"RTN","VAFHLZCL",33,0)
ALL ; - All active outpatient classifications for encounter
"RTN","VAFHLZCL",34,0)
 S VAFCLASS=$$CHKCLASS^SCDXUTL0(DFN,VAFENC)
"RTN","VAFHLZCL",35,0)
 S VAFCLASS=$G(VAFCLASS)
"RTN","VAFHLZCL",36,0)
 I '$D(VAFCLASS) S @VAFARRY@(1,0)="ZCL"_VAFHLFS_1 G ENQ
"RTN","VAFHLZCL",37,0)
 ;
"RTN","VAFHLZCL",38,0)
 ; - build array of HL7 (ZCL) segments
"RTN","VAFHLZCL",39,0)
 F I=1:1:$L(VAFCLASS,"^") D BUILD
"RTN","VAFHLZCL",40,0)
 ;
"RTN","VAFHLZCL",41,0)
ENQ Q
"RTN","VAFHLZCL",42,0)
 ;
"RTN","VAFHLZCL",43,0)
 ;
"RTN","VAFHLZCL",44,0)
BUILD ; - Build array of HL7 (ZCL) segments
"RTN","VAFHLZCL",45,0)
 S $P(VAFY,VAFHLFS,3)="",VAFIDX=VAFIDX+1
"RTN","VAFHLZCL",46,0)
 ;
"RTN","VAFHLZCL",47,0)
 ; - Sequential number (required field)
"RTN","VAFHLZCL",48,0)
 S $P(VAFY,VAFHLFS,1)=VAFIDX
"RTN","VAFHLZCL",49,0)
 ;
"RTN","VAFHLZCL",50,0)
 ; - Build HL7 (ZCL) segment fields
"RTN","VAFHLZCL",51,0)
 I VAFSTR[",2," S $P(VAFY,VAFHLFS,2)=$S($G(I)]"":I,1:VAFHLQ) ; Outpatient Classification Type
"RTN","VAFHLZCL",52,0)
 I VAFSTR[",3," S $P(VAFY,VAFHLFS,3)=$S($P(VAFCLASS,"^",I)]"":$P(VAFCLASS,"^",I),1:VAFHLQ) ; Value
"RTN","VAFHLZCL",53,0)
 ;
"RTN","VAFHLZCL",54,0)
 ; - Set all outpatient classifications into array
"RTN","VAFHLZCL",55,0)
 S @VAFARRY@(VAFIDX,0)="ZCL"_VAFHLFS_$G(VAFY)
"RTN","VAFHLZCL",56,0)
 Q
"RTN","VAFHLZIR")
0^5^B12221388
"RTN","VAFHLZIR",1,0)
VAFHLZIR ;ALB/SEK - Create generic HL7 ZIR segment ; 9 March 1994
"RTN","VAFHLZIR",2,0)
 ;;5.3;Registration;**33,94**;Aug 13, 1993
"RTN","VAFHLZIR",3,0)
 ;
"RTN","VAFHLZIR",4,0)
 ;
"RTN","VAFHLZIR",5,0)
EN(VAFIEN,VAFSTR,VAFNUM,VAFENC) ; This generic extrinsic function was designed to
"RTN","VAFHLZIR",6,0)
 ;          return the HL7 ZIR segment.  This segment contains
"RTN","VAFHLZIR",7,0)
 ;          VA-specific information pertaining to income relation type
"RTN","VAFHLZIR",8,0)
 ;          data for a veteran and any applicable relations.
"RTN","VAFHLZIR",9,0)
 ;
"RTN","VAFHLZIR",10,0)
 ;  Input - VAFIEN as internal entry number of the INCOME RELATION file.
"RTN","VAFHLZIR",11,0)
 ;          VAFSTR as the string of fields requested seperated by commas.
"RTN","VAFHLZIR",12,0)
 ;          VAFNUM as the number desired for the SET ID (default = 1)
"RTN","VAFHLZIR",13,0)
 ;          VAFENC as Outpatient Encounter IEN (from file #409.68)
"RTN","VAFHLZIR",14,0)
 ;
"RTN","VAFHLZIR",15,0)
 ;  NOTE:   Input variable VAFENC was added as part of the Ambulatory
"RTN","VAFHLZIR",16,0)
 ;          Care Reporting project.
"RTN","VAFHLZIR",17,0)
 ;
"RTN","VAFHLZIR",18,0)
 ;     *****Also assumes all HL7 variables returned from*****
"RTN","VAFHLZIR",19,0)
 ;          INIT^HLTRANS are defined.
"RTN","VAFHLZIR",20,0)
 ;
"RTN","VAFHLZIR",21,0)
 ; Output - String of data forming the ZIR segment.
"RTN","VAFHLZIR",22,0)
 ;
"RTN","VAFHLZIR",23,0)
 ;
"RTN","VAFHLZIR",24,0)
 N VAFDFN,VAFERR,VAFENODE,VAFNODE,VAFY,X
"RTN","VAFHLZIR",25,0)
 I $G(VAFSTR)']"" G QUIT
"RTN","VAFHLZIR",26,0)
 S VAFENC=+$G(VAFENC)
"RTN","VAFHLZIR",27,0)
 I '$G(VAFIEN)&('VAFENC) G QUIT
"RTN","VAFHLZIR",28,0)
 S $P(VAFY,HLFS,13)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLZIR",29,0)
 S VAFNODE=$G(^DGMT(408.22,+$G(VAFIEN),0))
"RTN","VAFHLZIR",30,0)
 I $G(VAFNODE)']""&('VAFENC) G QUIT
"RTN","VAFHLZIR",31,0)
 S $P(VAFY,HLFS,1)=$S($G(VAFNUM):VAFNUM,1:1)
"RTN","VAFHLZIR",32,0)
 I VAFSTR[",2," S $P(VAFY,HLFS,2)=$$YN^VAFHLFNC($P(VAFNODE,"^",5)) ; Married last calendar year
"RTN","VAFHLZIR",33,0)
 I VAFSTR[",3," S $P(VAFY,HLFS,3)=$$YN^VAFHLFNC($P(VAFNODE,"^",6)) ; Lived with patient
"RTN","VAFHLZIR",34,0)
 I VAFSTR[",4," S X=$P(VAFNODE,"^",7),$P(VAFY,HLFS,4)=$S(X]"":X,1:HLQ) ; Amount contributed to spouse
"RTN","VAFHLZIR",35,0)
 I VAFSTR[",5," S $P(VAFY,HLFS,5)=$$YN^VAFHLFNC($P(VAFNODE,"^",8)) ; Dependent children (y/n)
"RTN","VAFHLZIR",36,0)
 I VAFSTR[",6," S $P(VAFY,HLFS,6)=$$YN^VAFHLFNC($P(VAFNODE,"^",9)) ; Incapable of self-support
"RTN","VAFHLZIR",37,0)
 I VAFSTR[",7," S $P(VAFY,HLFS,7)=$$YN^VAFHLFNC($P(VAFNODE,"^",10)) ; Contributed to support
"RTN","VAFHLZIR",38,0)
 I VAFSTR[",8," S $P(VAFY,HLFS,8)=$$YN^VAFHLFNC($P(VAFNODE,"^",11)) ; Child had income
"RTN","VAFHLZIR",39,0)
 I VAFSTR[",9," S $P(VAFY,HLFS,9)=$$YN^VAFHLFNC($P(VAFNODE,"^",12)) ; Income available to you
"RTN","VAFHLZIR",40,0)
 I VAFSTR[",10," S X=$P(VAFNODE,"^",13),$P(VAFY,HLFS,10)=$S(X]"":X,1:HLQ) ; Number of dependent children
"RTN","VAFHLZIR",41,0)
 ;
"RTN","VAFHLZIR",42,0)
 ; ALB/ESD - Data elements 11,12,13 added as part of Ambulatory Care
"RTN","VAFHLZIR",43,0)
 ;           Reporting Project requirements.
"RTN","VAFHLZIR",44,0)
 ;
"RTN","VAFHLZIR",45,0)
 I VAFSTR[",11,"!(VAFSTR[",12,")!(VAFSTR[",13,") D
"RTN","VAFHLZIR",46,0)
 . ;
"RTN","VAFHLZIR",47,0)
 . ;- If no encounter ptr, encounter node or DFN elements 11 - 13 = HLQ
"RTN","VAFHLZIR",48,0)
 . I ('VAFENC) S VAFERR=1 Q
"RTN","VAFHLZIR",49,0)
 . S VAFENODE=$G(^SCE(VAFENC,0)) I VAFENODE']"" S VAFERR=1 Q
"RTN","VAFHLZIR",50,0)
 . S VAFDFN=$P(VAFENODE,"^",2) S:VAFDFN="" VAFERR=1 Q
"RTN","VAFHLZIR",51,0)
 I VAFSTR[",11," S $P(VAFY,HLFS,11)=$S('$G(VAFERR):+$$DEP^VAFMON(VAFDFN,$P(VAFENODE,"^")),1:HLQ) ;Total Dependents
"RTN","VAFHLZIR",52,0)
 I VAFSTR[",12," S $P(VAFY,HLFS,12)=$S('$G(VAFERR):+$$INCOME^VAFMON(VAFDFN,$P(VAFENODE,"^")),1:HLQ) ;Patient Income
"RTN","VAFHLZIR",53,0)
 ;
"RTN","VAFHLZIR",54,0)
 ;- If outpat encounter node exists, get appointment type &
"RTN","VAFHLZIR",55,0)
 ;  eligibility of encounter and make call to get means test indicator
"RTN","VAFHLZIR",56,0)
 I VAFSTR[",13," S $P(VAFY,HLFS,13)=$S('$G(VAFERR):$$MTI^SCDXUTL0(VAFDFN,$P(VAFENODE,"^"),$P(VAFENODE,"^",13),$P(VAFENODE,"^",10),VAFENC),1:HLQ) ;Means Test Indicator
"RTN","VAFHLZIR",57,0)
 ;
"RTN","VAFHLZIR",58,0)
 ;- If MT Indicator not = to Cat A or Cat C, change number of dependents
"RTN","VAFHLZIR",59,0)
 ;  to XX (not applicable)
"RTN","VAFHLZIR",60,0)
 I VAFSTR[",11," I '$G(VAFERR) D
"RTN","VAFHLZIR",61,0)
 . I $P(VAFY,HLFS,13)'="AN"&($P(VAFY,HLFS,13)'="C") S $P(VAFY,HLFS,11)="XX" ;Total Dependents not applicable for MT indicators AS,N,X,U
"RTN","VAFHLZIR",62,0)
 ;
"RTN","VAFHLZIR",63,0)
QUIT Q "ZIR"_HLFS_$G(VAFY)
"RTN","VAFHLZPD")
0^6^B12181821
"RTN","VAFHLZPD",1,0)
VAFHLZPD ;ALB/KCL - Create generic HL7 ZPD segment ; 10 Febuary 1993
"RTN","VAFHLZPD",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLZPD",3,0)
 ;
"RTN","VAFHLZPD",4,0)
 ;
"RTN","VAFHLZPD",5,0)
EN(DFN,VAFSTR) ; This generic extrinsic function was designed to
"RTN","VAFHLZPD",6,0)
 ;          return the HL7 ZPD segment.  This segment contains
"RTN","VAFHLZPD",7,0)
 ;          VA-specific patient information that is not contained
"RTN","VAFHLZPD",8,0)
 ;          in the HL7 PID segment.
"RTN","VAFHLZPD",9,0)
 ;
"RTN","VAFHLZPD",10,0)
 ;  Input - DFN as internal entry number of the PATIENT file.
"RTN","VAFHLZPD",11,0)
 ;          VAFSTR as the string of fields requested seperated by commas.
"RTN","VAFHLZPD",12,0)
 ;
"RTN","VAFHLZPD",13,0)
 ;     *****Also assumes all HL7 variables returned from*****
"RTN","VAFHLZPD",14,0)
 ;          INIT^HLTRANS are defined.
"RTN","VAFHLZPD",15,0)
 ;
"RTN","VAFHLZPD",16,0)
 ; Output - String of data forming the ZPD segment.
"RTN","VAFHLZPD",17,0)
 ;
"RTN","VAFHLZPD",18,0)
 ;
"RTN","VAFHLZPD",19,0)
 N VAFNODE,VAFY,X,X1
"RTN","VAFHLZPD",20,0)
 I '$G(DFN)!($G(VAFSTR)']"") G QUIT
"RTN","VAFHLZPD",21,0)
 S $P(VAFY,HLFS,17)="",VAFSTR=","_VAFSTR_","
"RTN","VAFHLZPD",22,0)
 S VAFNODE=$G(^DPT(DFN,0)),$P(VAFY,HLFS,1)=1 ; Always one (Required field)
"RTN","VAFHLZPD",23,0)
 D OPD^VADPT ; Other patient data from VADPT.
"RTN","VAFHLZPD",24,0)
 I VAFSTR[",2," S $P(VAFY,HLFS,2)=$S($P(VAFNODE,"^",10)]"":$P(VAFNODE,"^",10),1:HLQ) ; Remarks
"RTN","VAFHLZPD",25,0)
 I VAFSTR[",3," S $P(VAFY,HLFS,3)=$S(VAPD(1)]"":VAPD(1),1:HLQ) ; Place of birth (city)
"RTN","VAFHLZPD",26,0)
 I VAFSTR[",4," S X1=$P($G(^DIC(5,$P(+VAPD(2),"^",1),0)),"^",2),$P(VAFY,HLFS,4)=$S(X1]"":X1,1:HLQ) ; Place of birth (State abbrv.)
"RTN","VAFHLZPD",27,0)
 I VAFSTR[",5," S X=$P(VAFNODE,"^",14),X1=$P($G(^DG(408.32,+X,0)),"^",2),$P(VAFY,HLFS,5)=$S(X1]"":X1,1:HLQ) ; Current means test status
"RTN","VAFHLZPD",28,0)
 I VAFSTR[",6," S $P(VAFY,HLFS,6)=$S(VAPD(3)]"":VAPD(3),1:HLQ) ; Fathers name
"RTN","VAFHLZPD",29,0)
 I VAFSTR[",7," S $P(VAFY,HLFS,7)=$S(VAPD(4)]"":VAPD(4),1:HLQ) ; Mothers name
"RTN","VAFHLZPD",30,0)
 I VAFSTR[",8," S X1=$$YN^VAFHLFNC($P($G(^DPT(DFN,.29)),"^",12)),$P(VAFY,HLFS,8)=$S(X1]"":X1,1:HLQ) ; Rated incompetent
"RTN","VAFHLZPD",31,0)
 I VAFSTR[",9," S X=$P($G(^DPT(DFN,.35)),"^",1),X1=$$HLDATE^HLFNC(X),$P(VAFY,HLFS,9)=$S(X1]"":X1,1:HLQ) ; Date of Death
"RTN","VAFHLZPD",32,0)
 I VAFSTR[10 D
"RTN","VAFHLZPD",33,0)
 .S X=$P($G(^DPT(DFN,.36)),"^",11)
"RTN","VAFHLZPD",34,0)
 .S X1=$P($G(^DPT(+X,0)),"^",1),$P(VAFY,HLFS,10)=$S(X1]"":X1,1:HLQ) ; Collateral sponser name
"RTN","VAFHLZPD",35,0)
 I VAFSTR[11 S X=$$INS^VAFHLFNC(DFN),X1=$$YN^VAFHLFNC(X),$P(VAFY,HLFS,11)=$S(X1]"":X1,1:HLQ) ; Active Health Insurance?
"RTN","VAFHLZPD",36,0)
 I VAFSTR[12!(VAFSTR[13) D
"RTN","VAFHLZPD",37,0)
 .S X=$G(^DPT(DFN,.38))
"RTN","VAFHLZPD",38,0)
 .I VAFSTR[12 S X1=$$YN^VAFHLFNC($P(X,"^",1)),$P(VAFY,HLFS,12)=$S(X1]"":X1,1:HLQ) ; Eligible for Medicaid
"RTN","VAFHLZPD",39,0)
 .I VAFSTR[13 S X1=$$HLDATE^HLFNC($P(X,"^",2)),$P(VAFY,HLFS,13)=$S(X1]"":X1,1:HLQ) ; Date Medicaid last asked
"RTN","VAFHLZPD",40,0)
 I VAFSTR[14 S X=$P(VAFNODE,"^",6) S X1=$P($G(^DIC(10,+X,0)),"^",2),$P(VAFY,HLFS,14)=$S(X1]"":X1,1:HLQ) ; Race
"RTN","VAFHLZPD",41,0)
 I VAFSTR[15 S X=$P(VAFNODE,"^",8) S X1=$P($G(^DIC(13,+X,0)),"^",4),$P(VAFY,HLFS,15)=$S(X1]"":X1,1:HLQ) ; Religious Preference
"RTN","VAFHLZPD",42,0)
 I VAFSTR[16 S X=$T(HOMELESS^SOWKHIRM) S $P(VAFY,HLFS,16)=$S(X]"":$$HOMELESS^SOWKHIRM(DFN),1:HLQ) ;Homeless Indicator
"RTN","VAFHLZPD",43,0)
 I VAFSTR[17 S X=$P($G(^DPT(DFN,.52)),"^",5),$P(VAFY,HLFS,17)=$S(X]"":X,1:HLQ) ; POW Status Indicated?
"RTN","VAFHLZPD",44,0)
 I VAFSTR[18 S X=+$$INSTYP^IBCNS1(DFN),$P(VAFY,HLFS,18)=$S(X]"":X,1:HLQ) ; Insurance Type
"RTN","VAFHLZPD",45,0)
 ;
"RTN","VAFHLZPD",46,0)
QUIT ; cleanup
"RTN","VAFHLZPD",47,0)
 D KVA^VADPT
"RTN","VAFHLZPD",48,0)
 Q "ZPD"_HLFS_$G(VAFY)
"RTN","VAFHLZSC")
0^12^B3755727
"RTN","VAFHLZSC",1,0)
VAFHLZSC ;ALB/ESD - Create generic HL7 ZSC Segment ; 06-MAY-1996
"RTN","VAFHLZSC",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLZSC",3,0)
 ;
"RTN","VAFHLZSC",4,0)
 ;  This function will create VA-specific ZSC segment(s) for a 
"RTN","VAFHLZSC",5,0)
 ;  given outpatient encounter.  The ZSC segment is designed to transfer
"RTN","VAFHLZSC",6,0)
 ;  service indicator (stop code) information pertaining to a patient 
"RTN","VAFHLZSC",7,0)
 ;  visit.
"RTN","VAFHLZSC",8,0)
 ;
"RTN","VAFHLZSC",9,0)
EN(VAFENC,VAFSTR,VAFHLQ,VAFHLFS,VAFARRY) ; Entry point to return the HL7 ZSC segment
"RTN","VAFHLZSC",10,0)
 ;
"RTN","VAFHLZSC",11,0)
 ;  Input:   VAFENC - IEN of the Outpatient Encounter (#409.68) file.
"RTN","VAFHLZSC",12,0)
 ;           VAFSTR - String of fields requested separated by commas.
"RTN","VAFHLZSC",13,0)
 ;           VAFHLQ - Optional HL7 null variable. If not there, use 
"RTN","VAFHLZSC",14,0)
 ;                    default HL7 variable.
"RTN","VAFHLZSC",15,0)
 ;          VAFHLFS - Optional HL7 field separator. If not there, use 
"RTN","VAFHLZSC",16,0)
 ;                    default HL7 variable.
"RTN","VAFHLZSC",17,0)
 ;          VAFARRY - Optional user-supplied array name which will hold HL7 ZSC segments
"RTN","VAFHLZSC",18,0)
 ;
"RTN","VAFHLZSC",19,0)
 ; Output: Array of HL7 ZSC segments
"RTN","VAFHLZSC",20,0)
 ;
"RTN","VAFHLZSC",21,0)
 ;
"RTN","VAFHLZSC",22,0)
 N I,VAFIDX,VAFNODE,VAFSCODE,VAFY
"RTN","VAFHLZSC",23,0)
 S VAFARRY=$G(VAFARRY)
"RTN","VAFHLZSC",24,0)
 ;
"RTN","VAFHLZSC",25,0)
 ; - If VAFARRY not defined, use ^TMP("VAFHL",$J,"STOPCODE")
"RTN","VAFHLZSC",26,0)
 S:(VAFARRY="") VAFARRY="^TMP(""VAFHL"",$J,""STOPCODE"")"
"RTN","VAFHLZSC",27,0)
 ;
"RTN","VAFHLZSC",28,0)
 ; - If VAFHLQ or VAFHLFS aren't passed in, use default HL7 variables
"RTN","VAFHLZSC",29,0)
 S VAFHLQ=$S($D(VAFHLQ):VAFHLQ,1:$G(HLQ)),VAFHLFS=$S($D(VAFHLFS):VAFHLFS,1:$G(HLFS))
"RTN","VAFHLZSC",30,0)
 I '$G(VAFENC)!($G(VAFSTR)']"") S @VAFARRY@(1,0)="ZSC"_VAFHLFS_1 G ENQ
"RTN","VAFHLZSC",31,0)
 S VAFIDX=0,VAFSTR=","_VAFSTR_","
"RTN","VAFHLZSC",32,0)
 ;
"RTN","VAFHLZSC",33,0)
 ; - Get stop codes for encounter
"RTN","VAFHLZSC",34,0)
 D SCODE^SCDXUTL0(VAFENC,"VAFSCODE")
"RTN","VAFHLZSC",35,0)
 ;
"RTN","VAFHLZSC",36,0)
 ; - Set stop code array to 0 if no stop codes to loop thru once
"RTN","VAFHLZSC",37,0)
 I '$G(VAFSCODE(0)) S VAFSCODE(1)=0
"RTN","VAFHLZSC",38,0)
 ;
"RTN","VAFHLZSC",39,0)
ALL ; - All stop codes for encounter
"RTN","VAFHLZSC",40,0)
 F I=0:0 S I=$O(VAFSCODE(I)) Q:I=""  D
"RTN","VAFHLZSC",41,0)
 .;
"RTN","VAFHLZSC",42,0)
 .S VAFNODE=$G(^DIC(40.7,+VAFSCODE(I),0))
"RTN","VAFHLZSC",43,0)
 .S:($P(VAFNODE,"^",1)="") $P(VAFNODE,"^",1)=VAFHLQ
"RTN","VAFHLZSC",44,0)
 .S:($P(VAFNODE,"^",2)="") $P(VAFNODE,"^",2)=VAFHLQ
"RTN","VAFHLZSC",45,0)
 .;
"RTN","VAFHLZSC",46,0)
 .; - build array of HL7 (ZSC) segments
"RTN","VAFHLZSC",47,0)
 .D BUILD
"RTN","VAFHLZSC",48,0)
 ;
"RTN","VAFHLZSC",49,0)
ENQ Q
"RTN","VAFHLZSC",50,0)
 ;
"RTN","VAFHLZSC",51,0)
 ;
"RTN","VAFHLZSC",52,0)
BUILD ; - Build array of HL7 (ZSC) segments
"RTN","VAFHLZSC",53,0)
 S $P(VAFY,VAFHLFS,3)="",VAFIDX=VAFIDX+1
"RTN","VAFHLZSC",54,0)
 ;
"RTN","VAFHLZSC",55,0)
 ; - Sequential number (required field)
"RTN","VAFHLZSC",56,0)
 S $P(VAFY,VAFHLFS,1)=VAFIDX
"RTN","VAFHLZSC",57,0)
 ;
"RTN","VAFHLZSC",58,0)
 ; - Build HL7 (ZSC) segment fields
"RTN","VAFHLZSC",59,0)
 I VAFSTR[",2," S $P(VAFY,VAFHLFS,2)=$P(VAFNODE,"^",2) ; Stop Code
"RTN","VAFHLZSC",60,0)
 I VAFSTR[",3," S $P(VAFY,VAFHLFS,3)=$P(VAFNODE,"^",1) ; Name
"RTN","VAFHLZSC",61,0)
 ;
"RTN","VAFHLZSC",62,0)
 ; - Set all stop codes into array
"RTN","VAFHLZSC",63,0)
 S @VAFARRY@(VAFIDX,0)="ZSC"_VAFHLFS_$G(VAFY)
"RTN","VAFHLZSC",64,0)
 Q
"RTN","VAFHLZSP")
0^13^B1849036
"RTN","VAFHLZSP",1,0)
VAFHLZSP ;ALB/RJS - ZSP SEGMENT - 3/18/96
"RTN","VAFHLZSP",2,0)
 ;;5.3;Registration;**94**;Aug 13, 1993
"RTN","VAFHLZSP",3,0)
EN(DFN,VAFNUM,VAFAMB) ;
"RTN","VAFHLZSP",4,0)
 N VAROOT,VAFHROOT,VIETSRV,SERVCONN,PERCENT,POS,RETURN
"RTN","VAFHLZSP",5,0)
 S VAROOT="VAFHROOT"
"RTN","VAFHLZSP",6,0)
 D ELIG^VADPT
"RTN","VAFHLZSP",7,0)
 ;- ALB/ESD - Added VAFNUM as part of Ambulatory Care Reporting Project
"RTN","VAFHLZSP",8,0)
 ;            requirements.
"RTN","VAFHLZSP",9,0)
 S VAFNUM=$S($G(VAFNUM):VAFNUM,1:1)
"RTN","VAFHLZSP",10,0)
 I $P(VAFHROOT(3),U,1)=1 S SERVCONN="Y",PERCENT=$P(VAFHROOT(3),U,2)
"RTN","VAFHLZSP",11,0)
 I $P(VAFHROOT(3),U,1)=0 S SERVCONN="N"
"RTN","VAFHLZSP",12,0)
 I VAFHROOT(2)'="" S POS=$P($G(^DIC(21,+VAFHROOT(2),0)),U,3)
"RTN","VAFHLZSP",13,0)
 I '$D(SERVCONN) S SERVCONN=""""""
"RTN","VAFHLZSP",14,0)
 I '$D(PERCENT) S PERCENT=""""""
"RTN","VAFHLZSP",15,0)
 I '$D(POS) S POS=""""""
"RTN","VAFHLZSP",16,0)
 ;
"RTN","VAFHLZSP",17,0)
 ;- Convert Y/N to 1/0 (HL7 Table VA01)
"RTN","VAFHLZSP",18,0)
 I $D(SERVCONN) S SERVCONN=$$YN^VAFHLFNC(SERVCONN)
"RTN","VAFHLZSP",19,0)
 S RETURN="ZSP"_HLFS_VAFNUM_HLFS_SERVCONN_HLFS_PERCENT_HLFS_POS
"RTN","VAFHLZSP",20,0)
 ;- ALB/ESD - Get 'Vietnam Service Indicated?' field from PATIENT file
"RTN","VAFHLZSP",21,0)
 ;            (required by Ambulatory Care Reporting Project).
"RTN","VAFHLZSP",22,0)
 I +$G(VAFAMB)=1 D
"RTN","VAFHLZSP",23,0)
 . ;
"RTN","VAFHLZSP",24,0)
 . ;- 'Vietnam Service Indicated?' field = Y, N, or U (UNKNOWN)
"RTN","VAFHLZSP",25,0)
 . S VIETSRV=$P($G(^DPT(DFN,.321)),"^")
"RTN","VAFHLZSP",26,0)
 . I '$D(VIETSRV) S VIETSRV=""""""
"RTN","VAFHLZSP",27,0)
 . S RETURN=RETURN_HLFS_VIETSRV
"RTN","VAFHLZSP",28,0)
 D KVAR^VADPT
"RTN","VAFHLZSP",29,0)
 Q RETURN
"VER")
8.0^21.0
**END**
**END**
