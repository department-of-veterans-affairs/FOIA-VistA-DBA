Released IB*2*323 SEQ #304
Extracted from mail message
**KIDS**:IB*2.0*323^

**INSTALL NAME**
IB*2.0*323
"BLD",5861,0)
IB*2.0*323^INTEGRATED BILLING^0^3060309^y
"BLD",5861,1,0)
^^3^3^3060209^
"BLD",5861,1,1,0)
THIS PATCH WILL ADDRESS SEVERAL BUGS RELATED TO E-MRA.
"BLD",5861,1,2,0)
THESE BUGS ARE INCLUDED IN THE PATCH DESCRIPTION WITH THEIR RESPECTIVE
"BLD",5861,1,3,0)
REMEDY TICKETS.
"BLD",5861,4,0)
^9.64PA^364.7^2
"BLD",5861,4,364.5,0)
364.5
"BLD",5861,4,364.5,222)
n^n^f^^y^^y^o^n
"BLD",5861,4,364.5,224)
I $F(".177.258.319.","."_+Y_".")
"BLD",5861,4,364.7,0)
364.7
"BLD",5861,4,364.7,222)
n^n^f^^y^^y^o^n
"BLD",5861,4,364.7,224)
I $F(".5.22.55.128.146.151.187.188.358.390.457.472.799.965.1032.","."_+Y_".")
"BLD",5861,4,"B",364.5,364.5)

"BLD",5861,4,"B",364.7,364.7)

"BLD",5861,"ABPKG")
n
"BLD",5861,"INI")
IBY323PR
"BLD",5861,"INID")
^^y
"BLD",5861,"KRN",0)
^9.67PA^8989.52^19
"BLD",5861,"KRN",.4,0)
.4
"BLD",5861,"KRN",.401,0)
.401
"BLD",5861,"KRN",.402,0)
.402
"BLD",5861,"KRN",.403,0)
.403
"BLD",5861,"KRN",.5,0)
.5
"BLD",5861,"KRN",.84,0)
.84
"BLD",5861,"KRN",3.6,0)
3.6
"BLD",5861,"KRN",3.8,0)
3.8
"BLD",5861,"KRN",9.2,0)
9.2
"BLD",5861,"KRN",9.8,0)
9.8
"BLD",5861,"KRN",9.8,"NM",0)
^9.68A^7^6
"BLD",5861,"KRN",9.8,"NM",1,0)
IBCEMQC^^0^B29766412
"BLD",5861,"KRN",9.8,"NM",2,0)
IBCEMRAA^^0^B61799153
"BLD",5861,"KRN",9.8,"NM",3,0)
IBCEMRAB^^0^B52079518
"BLD",5861,"KRN",9.8,"NM",4,0)
IBCEU3^^0^B42203561
"BLD",5861,"KRN",9.8,"NM",6,0)
IBCU^^0^B37317111
"BLD",5861,"KRN",9.8,"NM",7,0)
IBCCCB^^0^B57002902
"BLD",5861,"KRN",9.8,"NM","B","IBCCCB",7)

"BLD",5861,"KRN",9.8,"NM","B","IBCEMQC",1)

"BLD",5861,"KRN",9.8,"NM","B","IBCEMRAA",2)

"BLD",5861,"KRN",9.8,"NM","B","IBCEMRAB",3)

"BLD",5861,"KRN",9.8,"NM","B","IBCEU3",4)

"BLD",5861,"KRN",9.8,"NM","B","IBCU",6)

"BLD",5861,"KRN",19,0)
19
"BLD",5861,"KRN",19,"NM",0)
^9.68A^^
"BLD",5861,"KRN",19.1,0)
19.1
"BLD",5861,"KRN",101,0)
101
"BLD",5861,"KRN",409.61,0)
409.61
"BLD",5861,"KRN",771,0)
771
"BLD",5861,"KRN",870,0)
870
"BLD",5861,"KRN",8989.51,0)
8989.51
"BLD",5861,"KRN",8989.52,0)
8989.52
"BLD",5861,"KRN",8994,0)
8994
"BLD",5861,"KRN","B",.4,.4)

"BLD",5861,"KRN","B",.401,.401)

"BLD",5861,"KRN","B",.402,.402)

"BLD",5861,"KRN","B",.403,.403)

"BLD",5861,"KRN","B",.5,.5)

"BLD",5861,"KRN","B",.84,.84)

"BLD",5861,"KRN","B",3.6,3.6)

"BLD",5861,"KRN","B",3.8,3.8)

"BLD",5861,"KRN","B",9.2,9.2)

"BLD",5861,"KRN","B",9.8,9.8)

"BLD",5861,"KRN","B",19,19)

"BLD",5861,"KRN","B",19.1,19.1)

"BLD",5861,"KRN","B",101,101)

"BLD",5861,"KRN","B",409.61,409.61)

"BLD",5861,"KRN","B",771,771)

"BLD",5861,"KRN","B",870,870)

"BLD",5861,"KRN","B",8989.51,8989.51)

"BLD",5861,"KRN","B",8989.52,8989.52)

"BLD",5861,"KRN","B",8994,8994)

"BLD",5861,"QUES",0)
^9.62^^
"BLD",5861,"REQB",0)
^9.611^1^1
"BLD",5861,"REQB",1,0)
IB*2.0*155^2
"BLD",5861,"REQB","B","IB*2.0*155",1)

"DATA",364.5,177,0)
N-HCFA BOX 24K FREE TEXT^N^E^G^399^^^
"DATA",364.5,177,1)
N M,S D:'$D(IBXSAVE("BOX24")) B24^IBCEF3(.IBXSAVE,IBXIEN) S M=$$WNRBILL^IBEFUNC(IBXIEN),S="" S:M S=$$MCRSPEC^IBCEU4(IBXIEN,1),IBXSAVE("Q")=$S(S'="":"V"_S_$P($$SITE^VASITE,U,3),1:"") D TEXT24^IBCEU3("K",.IBXSAVE,.IBXDATA) K IBXSAVE("Q")
"DATA",364.5,177,3,0)
^364.53^8^8^3000823^^^^
"DATA",364.5,177,3,1,0)
Data element relies on the data previously extracted in array
"DATA",364.5,177,3,2,0)
IBXSAVE("BOX24") from HCFA 1500 SERVICES PRINT.  Returns the array of
"DATA",364.5,177,3,3,0)
HCFA 1500 Box 24 data for each procedure being billed in IBXDATA(n).
"DATA",364.5,177,3,4,0)
Since each procedure has 2 lines of data, if there is a text line present
"DATA",364.5,177,3,5,0)
for a procedure (IBXSAVE("BOX24",n,"TEXT") is defined), the data is
"DATA",364.5,177,3,6,0)
returned on the upper line and the characters 71-80 of the text are
"DATA",364.5,177,3,7,0)
returned on the bottom line.  If there is no text, the upper line is
"DATA",364.5,177,3,8,0)
returned as null and the data extracted is returned on the second line.
"DATA",364.5,258,0)
N-MEDICARE GROUP NUMBER^N^E^I^399^^^
"DATA",364.5,258,1)
S IBXDATA="VA0"_$P($$SITE^VASITE,U,3)
"DATA",364.5,258,3,0)
^^2^2^2990901^^
"DATA",364.5,258,3,1,0)
The default group number for MEDICARE to be used in block 33 on the HCFA
"DATA",364.5,258,3,2,0)
1500.
"DATA",364.5,319,0)
N-STATION NUMBER^N^E^I^399^^^
"DATA",364.5,319,1)
S IBXDATA=$P($$SITE^VASITE,U,3)
"DATA",364.5,319,3,0)
^364.53^1^1^3051212^^
"DATA",364.5,319,3,1,0)
This is the 3-digit number that identifies the site.
"DATA",364.7,5,0)
7^N^5^^^^N
"DATA",364.7,5,1)
S IBXDATA=$TR($P($G(IBXSAVE("IADR")),U,2),"-/.,()'","  ") I IBXDATA="" D PTSELF^IBCEF73 I $G(IBXDATA)="18" S IBXDATA=$TR($$PTADDR^IBCEF(IBXIEN,4),"-/.,()'","  ")
"DATA",364.7,5,3,0)
2^364.73^2^2^3030911^^^^
"DATA",364.7,5,3,1,0)
Retrieves insured city data from IBXSAVE array previously extracted.  If
"DATA",364.7,5,3,2,0)
data element's value is null, do not output.
"DATA",364.7,22,0)
15^N^5^^^^N
"DATA",364.7,22,1)
S IBXDATA=$P($G(IBXSAVE("EMP")),U,2),IBXDATA=$TR(IBXDATA,"-/.,()'","  ")
"DATA",364.7,22,3,0)
^^2^2^3000107^^^^
"DATA",364.7,22,3,1,0)
Retrieves insured employment info from IBXSAVE array previously extracted.
"DATA",364.7,22,3,2,0)
If data element's value is null, do not output.
"DATA",364.7,55,0)
35^N^61^^^^N
"DATA",364.7,55,1)
I $G(IBXDATA)'="" S IBXDATA=$TR(IBXDATA,"-/.,()'","  ")
"DATA",364.7,55,3,0)
^^1^1^2960815^^^^
"DATA",364.7,55,3,1,0)
If data element's value is null, do not output.
"DATA",364.7,128,0)
109^N^5^^^^N
"DATA",364.7,128,1)
K IBXDATA N Z F Z=1,2 I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$P($G(IBXSAVE("OIEMP",Z)),U,2)'="" S IBXDATA(Z)=$TR($P(IBXSAVE("OIEMP",Z),U,2),"-/.,()'","  ")
"DATA",364.7,128,3,0)
^^3^3^2991006^^^
"DATA",364.7,128,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,128,3,2,0)
possible for the data element in the previously extract IBXSAVE array.  If
"DATA",364.7,128,3,3,0)
any other insurance employer data is found, the data is output.
"DATA",364.7,146,0)
181^N^105^^^^N
"DATA",364.7,146,1)
K:$D(^TMP("IBHDR",$J)) IBXDATA S:'$D(IBXDATA) IBXNOREQ=1 I $D(IBXDATA) S IBXDATA=$TR(IBXDATA,"-/.,()'","  ")
"DATA",364.7,146,3,0)
^^4^4^2960815^^^^
"DATA",364.7,146,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR",$J) will
"DATA",364.7,146,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,146,3,3,0)
element so there is no output.  Also don't output data element if its
"DATA",364.7,146,3,4,0)
value is null.
"DATA",364.7,151,0)
186^N^5^^^^N
"DATA",364.7,151,1)
I $P($G(IBXSAVE("CADR")),U,4)'="" S IBXDATA=$TR($P(IBXSAVE("CADR"),U,4),"-/.,()'","  ")
"DATA",364.7,151,3,0)
^364.73^6^6^3030926^^^^
"DATA",364.7,151,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,151,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,151,3,3,0)
element so there is no output.  Also don't output data element if its
"DATA",364.7,151,3,4,0)
value is null.
"DATA",364.7,151,3,5,0)
This data relies on the presence of the IBXSAVE("CADR") array that should
"DATA",364.7,151,3,6,0)
have been set in a previous data field.
"DATA",364.7,187,0)
184^N^127^^^^N
"DATA",364.7,187,1)
S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA) K:$D(^TMP("IBHDR1",$J)) IBXDATA I $D(IBXDATA),$$FT^IBCEF(IBXIEN)=2 N IBZ S IBZ=$$WNRBILL^IBEFUNC(IBXIEN,+$$COBN^IBCEF(IBXIEN)) S:IBZ IBXDATA="VA0"_$P($$SITE^VASITE,U,3)
"DATA",364.7,187,3,0)
^^3^3^3030720^^^^
"DATA",364.7,187,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,187,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,187,3,3,0)
element so there is no output.
"DATA",364.7,188,0)
195^N^128^^^^N
"DATA",364.7,188,1)
N Z,IBZ M IBZ=IBXDATA K IBXDATA F Z=1,2 I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$G(IBZ(Z))'="" S IBXDATA(Z)=$S(($$MCRONBIL^IBEFUNC(IBXIEN)&($$FT^IBCEF(IBXIEN)=2)):"VA0"_$P($$SITE^VASITE,U,3),1:$$NOPUNCT^IBCEF(IBZ(Z)))
"DATA",364.7,188,3,0)
^^3^3^2990412^^^^
"DATA",364.7,188,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,188,3,2,0)
possible for the data element in the IBXDATA array.  If any other insurance
"DATA",364.7,188,3,3,0)
provider # data is found, the data is output.
"DATA",364.7,358,0)
1075^N^5^^^^N^0
"DATA",364.7,358,1)
N Z D ELMADDR^IBCEF7(IBXIEN,3,.IBXDATA) S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  S IBXDATA(Z)=$TR(IBXDATA(Z),"-/.,()'","  ")
"DATA",364.7,358,3,0)
^364.73^2^2^3030926^^^^
"DATA",364.7,358,3,1,0)
Extracted from the array IBXSAVE("ARRAY") from the 364.5 file OTHER INSURED FULL ADDRESS when Line 1 is
"DATA",364.7,358,3,2,0)
DONE FIRST.
"DATA",364.7,390,0)
172^N^5^^^^N
"DATA",364.7,390,1)
K:'$G(IBXSAVE("IBFAC"))&'$P($G(IBXSAVE("IBFAC")),U,3) IBXDATA I $D(IBXDATA) S IBXDATA=$$GETFAC^IBCEP8(+IBXSAVE("IBFAC"),+$P(IBXSAVE("IBFAC"),U,2),"3C"),IBXDATA=$TR(IBXDATA,"-/.,()'","  ")
"DATA",364.7,390,3,0)
^^3^3^3040901^
"DATA",364.7,390,3,1,0)
Extract the city for the rendering facility.  Relies on the
"DATA",364.7,390,3,2,0)
existence of the array IBXSAVE("IBFAC") extracted previously by the
"DATA",364.7,390,3,3,0)
rendering facility name field.
"DATA",364.7,457,0)
1291^N^5^^^^N
"DATA",364.7,457,1)
N Z D ELMADD2^IBCEF7(IBXIEN,3,.IBXDATA) S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  S IBXDATA(Z)=$TR(IBXDATA(Z),"-/.,()'","  ")
"DATA",364.7,472,0)
488^N^319^^^^N
"DATA",364.7,472,1)
K:$D(^TMP("IBHDR",$J)) IBXDATA S:'$D(IBXDATA) IBXNOREQ=1
"DATA",364.7,472,3,0)
3^^3^3^2990610^^^^
"DATA",364.7,472,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR",$J) will
"DATA",364.7,472,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,472,3,3,0)
element so there is no output.
"DATA",364.7,799,0)
788^N^127^^^^N
"DATA",364.7,799,1)
N IBZ S IBZ=$$WNRBILL^IBEFUNC(IBXIEN,+$$COBN^IBCEF(IBXIEN)) S:IBZ IBXDATA="VA0"_$P($$SITE^VASITE,U,3)
"DATA",364.7,799,3,0)
^364.73^2^2^3000509^^^^
"DATA",364.7,799,3,1,0)
If MRA is needed, use default of VA0 and the site #.  For other than MRA,
"DATA",364.7,799,3,2,0)
use the provider number assigned to the site by the insurance co.
"DATA",364.7,965,0)
876^N^5^^^^N
"DATA",364.7,965,1)
N S,N K IBXDATA S S=12 D COBOUT^IBCEU1(.IBXSAVE,.IBXDATA,S) S N=0 F  S N=$O(IBXDATA(N)) Q:'N  S:$G(IBXDATA(N)) IBXDATA(N)=$FN(IBXDATA(N),"",0)
"DATA",364.7,965,3,0)
^^4^4^2990902^^
"DATA",364.7,965,3,1,0)
This data element assumes the existence of the IBXSAVE array for each line
"DATA",364.7,965,3,2,0)
item (LCOB) that was previously extracted.  If the line has COB data
"DATA",364.7,965,3,3,0)
associated with it, output the paid units for each COB sequence found for
"DATA",364.7,965,3,4,0)
the line.
"DATA",364.7,1032,0)
1316^N^127^^^^N
"DATA",364.7,1032,1)
S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA) I $D(IBXDATA),$$FT^IBCEF(IBXIEN)=2 N IBZ S IBZ=$$WNRBILL^IBEFUNC(IBXIEN,+$$COBN^IBCEF(IBXIEN)) S:IBZ IBXDATA="VA0"_$P($$SITE^VASITE,U,3)
"DATA",364.7,1032,3,0)
^364.73^1^1^3031210^^^^
"DATA",364.7,1032,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will already exist.  Don't want to extract this field again, so kill data element so there is no output.
"FIA",364.5)
IB DATA ELEMENT DEFINITION
"FIA",364.5,0)
^IBA(364.5,
"FIA",364.5,0,0)
364.5I
"FIA",364.5,0,1)
n^n^f^^y^^y^o^n
"FIA",364.5,0,10)

"FIA",364.5,0,11)
I $F(".177.258.319.","."_+Y_".")
"FIA",364.5,0,"RLRO")

"FIA",364.5,0,"VR")
2.0^IB
"FIA",364.5,364.5)
0
"FIA",364.5,364.53)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
n^n^f^^y^^y^o^n
"FIA",364.7,0,10)

"FIA",364.7,0,11)
I $F(".5.22.55.128.146.151.187.188.358.390.457.472.799.965.1032.","."_+Y_".")
"FIA",364.7,0,"RLRO")

"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"INI")
IBY323PR
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"MBREQ")
0
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^2^1
"PKG",200,20,2,0)
2^^IBAXDR
"PKG",200,20,2,1)

"PKG",200,20,"B",2,2)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321
"PKG",200,22,1,"PAH",1,0)
323^3060309
"PKG",200,22,1,"PAH",1,1,0)
^^3^3^3060309
"PKG",200,22,1,"PAH",1,1,1,0)
THIS PATCH WILL ADDRESS SEVERAL BUGS RELATED TO E-MRA.
"PKG",200,22,1,"PAH",1,1,2,0)
THESE BUGS ARE INCLUDED IN THE PATCH DESCRIPTION WITH THEIR RESPECTIVE
"PKG",200,22,1,"PAH",1,1,3,0)
REMEDY TICKETS.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","IBCCCB")
0^7^B57002902^B57071055
"RTN","IBCCCB",1,0)
IBCCCB ;ALB/ARH - COPY BILL FOR COB ; 2/13/06 10:46am
"RTN","IBCCCB",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,51,151,137,182,155,323**;21-MAR-94
"RTN","IBCCCB",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCCCB",4,0)
 ;
"RTN","IBCCCB",5,0)
 ; Copy bill for COB w/out cancelling, update some flds
"RTN","IBCCCB",6,0)
 ; Primary->Secondary->Tertiary
"RTN","IBCCCB",7,0)
ASK ;
"RTN","IBCCCB",8,0)
 S IBCBCOPY=1 ; flag that copy function entered thru Copy COB option
"RTN","IBCCCB",9,0)
 ;
"RTN","IBCCCB",10,0)
 D KVAR S IBCAN=2,IBU="UNSPECIFIED"
"RTN","IBCCCB",11,0)
 ;
"RTN","IBCCCB",12,0)
 S IBX=$$PB^IBJTU2 S:+IBX=2 IBIFN=$P(IBX,U,2) I +IBX=1 S DFN=$P(IBX,U,2),IBV=1,IBAC=5 D DATE^IBCB
"RTN","IBCCCB",13,0)
 I '$G(IBIFN) G EXIT
"RTN","IBCCCB",14,0)
 ;
"RTN","IBCCCB",15,0)
 ; Restrict access to this process for REQUEST MRA bills in 2 Cases:
"RTN","IBCCCB",16,0)
 ; 1. No MRA EOB's on File for bill
"RTN","IBCCCB",17,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2,'$$CHK^IBCEMU1(IBIFN) D  G ASK
"RTN","IBCCCB",18,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it has No MRA EOB's"
"RTN","IBCCCB",19,0)
 . W !?4,"on file.  Access to this bill is restricted."
"RTN","IBCCCB",20,0)
 ;
"RTN","IBCCCB",21,0)
 ; 2. At least one MRA EOB appears on the MRA management worklist
"RTN","IBCCCB",22,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2,$$MRAWL^IBCEMU2(IBIFN) D  G ASK
"RTN","IBCCCB",23,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it does appear on the"
"RTN","IBCCCB",24,0)
 . W !?4,"MRA Management Work List.  Please use the 'MRA Management Menu' options"
"RTN","IBCCCB",25,0)
 . W !?4,"for all processing related to this bill."
"RTN","IBCCCB",26,0)
 . Q
"RTN","IBCCCB",27,0)
 ;
"RTN","IBCCCB",28,0)
 ; If MRA is Activated and bill is in Entered/Not Reviewed status and current insurance Co. is WNR -->
"RTN","IBCCCB",29,0)
 ; ask if user wants to continue
"RTN","IBCCCB",30,0)
 I $$EDIACTV^IBCEF4(2),$P($G(^DGCR(399,IBIFN,0)),U,13)=1,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) D  I 'Y G ASK
"RTN","IBCCCB",31,0)
 . W !!?4,"This bill is in a status of ENTERED/NOT REVIEWED and current payer is "
"RTN","IBCCCB",32,0)
 . W !?4,"MEDICARE (WNR). No MRA has been requested for this bill."
"RTN","IBCCCB",33,0)
 . S DIR(0)="YA",DIR("B")="NO",DIR("A")="    Are you sure you want to continue to process this bill?: "
"RTN","IBCCCB",34,0)
 . D ^DIR K DIR
"RTN","IBCCCB",35,0)
 ;
"RTN","IBCCCB",36,0)
 ; Display related bills
"RTN","IBCCCB",37,0)
 D DSPRB^IBCCCB0(IBIFN)
"RTN","IBCCCB",38,0)
 ;
"RTN","IBCCCB",39,0)
CHKB ; Entrypoint-COB processing via EDI's COB Mgmt
"RTN","IBCCCB",40,0)
 ; Ask if final EOB was received for previous bill
"RTN","IBCCCB",41,0)
 I '$$FINALEOB^IBCCCB0(IBIFN) S IBSECHK=1
"RTN","IBCCCB",42,0)
 I $G(IBSECHK)=1,$$MCRONBIL^IBEFUNC(IBIFN) G EXIT
"RTN","IBCCCB",43,0)
 ;
"RTN","IBCCCB",44,0)
 ; Warn if previous bill not at least authorized
"RTN","IBCCCB",45,0)
 I '$$MCRONBIL^IBEFUNC(IBIFN) I '$$COBOK^IBCCCB0(IBIFN) G EXIT
"RTN","IBCCCB",46,0)
 ;
"RTN","IBCCCB",47,0)
CHKB1 ; Entry point for Automatic/Silent COB Processing.
"RTN","IBCCCB",48,0)
 ; No writes or reads can occur from this point forward if variable
"RTN","IBCCCB",49,0)
 ; IBSILENT=1.  Any and all error messages should be processed with
"RTN","IBCCCB",50,0)
 ; the ERROR procedure below.
"RTN","IBCCCB",51,0)
 ;
"RTN","IBCCCB",52,0)
 S IBX=$G(^DGCR(399,+IBIFN,0)),DFN=$P(IBX,U,2),IBDT=$P(IBX,U,3)\1,IBER=""
"RTN","IBCCCB",53,0)
 I IBCAN>1 D NOPTF^IBCB2 I 'IBAC1 D NOPTF1^IBCB2 G ASK1
"RTN","IBCCCB",54,0)
 ;
"RTN","IBCCCB",55,0)
 F IBI=0,"S","U1","M","MP","M1" S IB(IBI)=$G(^DGCR(399,IBIFN,IBI))
"RTN","IBCCCB",56,0)
 I IB(0)="" S IBER="Invalid Bill Number" D ERROR G ASK1
"RTN","IBCCCB",57,0)
 ;
"RTN","IBCCCB",58,0)
 ; check to see if the bill has been cancelled
"RTN","IBCCCB",59,0)
 I $P(IB("S"),U,16),$P(IB("S"),U,17) D  G ASK1
"RTN","IBCCCB",60,0)
 . N WHO
"RTN","IBCCCB",61,0)
 . S IBER="This bill was cancelled on "
"RTN","IBCCCB",62,0)
 . S IBER=IBER_$$FMTE^XLFDT($P(IB("S"),U,17),"1Z")_" by "
"RTN","IBCCCB",63,0)
 . S WHO="UNSPECIFIED"
"RTN","IBCCCB",64,0)
 . I $P(IB("S"),U,18) S WHO=$P($G(^VA(200,$P(IB("S"),U,18),0)),U,1)
"RTN","IBCCCB",65,0)
 . S IBER=IBER_WHO_"."
"RTN","IBCCCB",66,0)
 . D ERROR
"RTN","IBCCCB",67,0)
 . Q
"RTN","IBCCCB",68,0)
 ;
"RTN","IBCCCB",69,0)
 S IBCOB=$$COB^IBCEF(IBIFN),IBCOBN=$TR(IBCOB,"PSTA","12")
"RTN","IBCCCB",70,0)
 S IBMRAIO=+$$CURR^IBCEF2(IBIFN),IBMRAO=$$MCRWNR^IBEFUNC(IBMRAIO)
"RTN","IBCCCB",71,0)
 S IBNMOLD=$S(IBCOB="P":"Primary",IBCOB="S":"Secondary",IBCOB="T":"Tertiary",IBCOB="A":"Patient",1:"")_$S(IBMRAO:"-MRA Only",1:"")
"RTN","IBCCCB",72,0)
 S IBINSOLD=$G(^DIC(36,$S(IB("MP"):+IB("MP"),IBMRAO:IBMRAIO,1:0),0))
"RTN","IBCCCB",73,0)
 ;
"RTN","IBCCCB",74,0)
NEXTP ; If current bill=MEDICARE WNR and valid 'next payer', use same
"RTN","IBCCCB",75,0)
 ;  bill for new payer
"RTN","IBCCCB",76,0)
 ; If next valid 'payer' is ins co or MEDICARE WNR, create new bill
"RTN","IBCCCB",77,0)
 S IBCOBN=IBCOBN+1,IBNM=$S(IBCOBN=2:"Secondary Payer",IBCOBN=3:"Tertiary Payer",1:"")
"RTN","IBCCCB",78,0)
 ;
"RTN","IBCCCB",79,0)
 I IBNM="" S IBER=$P(IB(0),U,1)_" is a "_IBNMOLD_" bill, there is no next bill in the series." D ERROR G ASK1
"RTN","IBCCCB",80,0)
 ;
"RTN","IBCCCB",81,0)
 S IBX=+$P(IB("M1"),U,(4+IBCOBN)),IBY=$G(^DGCR(399,+IBX,0)),IBCOBIL(+IBIFN)=""
"RTN","IBCCCB",82,0)
 ;
"RTN","IBCCCB",83,0)
 I $P(IBY,U,13)=7 S IBER="The "_$P(IBNM," ",1)_" bill "_$P(IBY,U,1)_" has been cancelled." D ERROR S IBX=""
"RTN","IBCCCB",84,0)
 ;
"RTN","IBCCCB",85,0)
 I +IBX,$D(IBCOBIL(+IBX)) S IBER="Next bill in series can not be determined." D ERROR G ASK1
"RTN","IBCCCB",86,0)
 I +IBX S IBER=$P(IBNM," ",1)_" bill already defined for this series: "_$P(IBY,U,1) D ERROR S IBIFN=IBX G ASK1
"RTN","IBCCCB",87,0)
 ;
"RTN","IBCCCB",88,0)
 S IBINSN=$P(IB("M"),U,IBCOBN) I 'IBINSN S IBER="There is no "_IBNM_" for "_$P(IB(0),U,1)_"." D ERROR G ASK1
"RTN","IBCCCB",89,0)
 S IBINS=$G(^DIC(36,+IBINSN,0)) I IBINS="" S IBER="The "_IBNM_" for "_$P(IB(0),U,1)_" is not a valid Insurance Co." D ERROR G ASK1
"RTN","IBCCCB",90,0)
 ;
"RTN","IBCCCB",91,0)
 S IBMRA=0
"RTN","IBCCCB",92,0)
 I $P(IBINS,U,2)="N" S IBQ=0 D  G:IBQ NEXTP
"RTN","IBCCCB",93,0)
 . I $$MCRWNR^IBEFUNC(IBINSN) D  Q
"RTN","IBCCCB",94,0)
 .. ; Check if a valid tert ins if MCR WNR secondary
"RTN","IBCCCB",95,0)
 .. I IBCOBN'>2 D
"RTN","IBCCCB",96,0)
 ... N Z
"RTN","IBCCCB",97,0)
 ... S Z=+$P(IB("M"),U,IBCOBN+1)
"RTN","IBCCCB",98,0)
 ... I Z,$D(^DIC(36,Z,0)),$P(^(0),U,2)'="N" S IBMRA=1,IBNM=$P(IBNM," ")_"-MRA.Only"
"RTN","IBCCCB",99,0)
 .. I 'IBMRA S IBER="MEDICARE will not reimburse and no further valid insurance for bill" D ERROR S IBQ=1
"RTN","IBCCCB",100,0)
 . S IBER=$P(IB(0),U,1)_" "_IBNM_", "_$P(IBINS,U,1)_", will not Reimburse" D ERROR S IBQ=1
"RTN","IBCCCB",101,0)
 ;
"RTN","IBCCCB",102,0)
 ; If processing in silent mode, skip over the following reads
"RTN","IBCCCB",103,0)
 I $G(IBSILENT) G SKIP
"RTN","IBCCCB",104,0)
 ;
"RTN","IBCCCB",105,0)
 W !!
"RTN","IBCCCB",106,0)
 S DIR("?")="Enter Yes to "_$S('$G(IBMRAO):"create a new bill in the bill series for this care.  The new bill will be the "_$P(IBNM," ")_" bill ",1:"enter the MRA information and change the payer to the "_$P($P(IBNM,"-")," ")_" payer ")
"RTN","IBCCCB",107,0)
 S DIR("?")=DIR("?")_$S('IBMRA:"with the "_IBNM_" responsible for payment.",1:"and will request an MRA from MEDICARE.")
"RTN","IBCCCB",108,0)
 S DIR(0)="YO",DIR("A")=$S('$G(IBMRAO):"Copy "_$P(IB(0),U,1)_" for a bill to the ",1:"Change payer on bill "_$P(IB(0),U,1)_" to ")_IBNM_", "_$P(IBINS,U,1) D ^DIR K DIR I Y'=1 S IBSECHK=1 G ASK1
"RTN","IBCCCB",109,0)
 ;
"RTN","IBCCCB",110,0)
 W !
"RTN","IBCCCB",111,0)
 S IBQ=0
"RTN","IBCCCB",112,0)
 I '$G(IBMRAO) D  G:IBQ ASK1
"RTN","IBCCCB",113,0)
 . N Z
"RTN","IBCCCB",114,0)
 . S DIR("?")="Enter the amount of the payment from the payer of the "_IBNMOLD_" bill."
"RTN","IBCCCB",115,0)
 . S DIR("?")=DIR("?")_"  This will be added to the new bill as a prior payment and subtracted from the charges due for the new bill."
"RTN","IBCCCB",116,0)
 . S DIR("A")="Prior Payment from "_$P(IB(0),U,1)_" "_IBNMOLD_" Payer, "_$P(IBINSOLD,U,1)_": "
"RTN","IBCCCB",117,0)
 . S Z=$$EOBTOT^IBCEU1(IBIFN,$$COBN^IBCEF(IBIFN))
"RTN","IBCCCB",118,0)
 . S:Z DIR("B")=Z
"RTN","IBCCCB",119,0)
 . S DIR(0)="NOA^0:99999999:2"
"RTN","IBCCCB",120,0)
 . D ^DIR K DIR I Y=""!$D(DIRUT) S IBQ=1
"RTN","IBCCCB",121,0)
 . K IBCOB
"RTN","IBCCCB",122,0)
 . S IBCOB("U2",IBCOBN+2)=Y
"RTN","IBCCCB",123,0)
 . Q
"RTN","IBCCCB",124,0)
 ;
"RTN","IBCCCB",125,0)
SKIP ; Jump here if skipping over the preceeding reads
"RTN","IBCCCB",126,0)
 ;
"RTN","IBCCCB",127,0)
 ; If payer is Medicare (WNR) update payer sequence and quit
"RTN","IBCCCB",128,0)
 I IBMRAO D  G END
"RTN","IBCCCB",129,0)
 . N IBPRTOT,IBTOTCHG,IBPTRESP
"RTN","IBCCCB",130,0)
 . S IBTOTCHG=0
"RTN","IBCCCB",131,0)
 . ; Get Total Charges from BILLS/CLAIMS (#399) file
"RTN","IBCCCB",132,0)
 . S IBTOTCHG=$P($G(^DGCR(399,IBIFN,"U1")),U,1)
"RTN","IBCCCB",133,0)
 . ; Calculate Patient Responsibility for Bill
"RTN","IBCCCB",134,0)
 . S IBPTRESP=$$PREOBTOT^IBCEU0(IBIFN)
"RTN","IBCCCB",135,0)
 . ; Calculate Patient Primary/Secondary Prior Payment (field 218 or 219 of File 399)
"RTN","IBCCCB",136,0)
 . ; These fields are stored in DGCR(399,IBIFN,"U2") pieces 4 and 5 respectively
"RTN","IBCCCB",137,0)
 . ; Calculate: Prior Payment= Total Submitted Charges - Patient Responsibility
"RTN","IBCCCB",138,0)
 . S IBPRTOT=IBTOTCHG-IBPTRESP
"RTN","IBCCCB",139,0)
 . I IBPRTOT<0 S IBPRTOT=0      ; don't allow negative prior payment or offset
"RTN","IBCCCB",140,0)
 . S IBCOB("U2",IBCOBN+2)=IBPRTOT
"RTN","IBCCCB",141,0)
 . D COBCHG^IBCCC2(IBIFN,IBMRAIO,.IBCOB)
"RTN","IBCCCB",142,0)
 . D STAT^IBCEMU2(IBIFN,1.5,1)     ; mra eob status update
"RTN","IBCCCB",143,0)
 . I $G(IBSILENT) S IBERRMSG=""
"RTN","IBCCCB",144,0)
 . Q
"RTN","IBCCCB",145,0)
 ;
"RTN","IBCCCB",146,0)
 ; We should NOT get to here in silent mode .... just in case
"RTN","IBCCCB",147,0)
 I $G(IBSILENT) G END    ; currently only MCRWNR in silent mode
"RTN","IBCCCB",148,0)
 ;
"RTN","IBCCCB",149,0)
 ; Payer is not Medicare (WNR) - Perform additional steps
"RTN","IBCCCB",150,0)
 S IBCOB(0,15)=""
"RTN","IBCCCB",151,0)
 S IBCOB(0,21)=$S(IBCOBN=2:"S",IBCOBN=3:"T",1:"")
"RTN","IBCCCB",152,0)
 I IBCOB(0,21)="" G END
"RTN","IBCCCB",153,0)
 S IBCOB("M1",IBCOBN+3)=IBIFN
"RTN","IBCCCB",154,0)
 S IBIDS(.15)=IBIFN
"RTN","IBCCCB",155,0)
 D KVAR
"RTN","IBCCCB",156,0)
 G STEP2^IBCCC
"RTN","IBCCCB",157,0)
 ;
"RTN","IBCCCB",158,0)
END ;
"RTN","IBCCCB",159,0)
 Q
"RTN","IBCCCB",160,0)
 ;
"RTN","IBCCCB",161,0)
 ;
"RTN","IBCCCB",162,0)
ASK1 ; If entering thru EDI COB processing, don't ask for new bill, quit
"RTN","IBCCCB",163,0)
 I $G(IBCBASK) G EXIT
"RTN","IBCCCB",164,0)
 G ASK
"RTN","IBCCCB",165,0)
 ;
"RTN","IBCCCB",166,0)
ERROR ; Display/Save error message
"RTN","IBCCCB",167,0)
 I '$G(IBSILENT) W !,IBER,!
"RTN","IBCCCB",168,0)
 E  S IBERRMSG=IBER
"RTN","IBCCCB",169,0)
 S IBER=""
"RTN","IBCCCB",170,0)
 I $D(IBSECHK) S IBSECHK=1
"RTN","IBCCCB",171,0)
 Q
"RTN","IBCCCB",172,0)
 ;
"RTN","IBCCCB",173,0)
EXIT K IBCAN,IBCOB,IBU
"RTN","IBCCCB",174,0)
KVAR K IBX,IBY,IBI,IBIFN,DFN,IBDT,IB,IBCOBN,IBNMOLD,IBINSOLD,IBNM,IBINSN,IBINS,IBER,DIR,IBAC,IBAC1,IBV,X,Y,IBDATA,IBT,IBND0,DIRUT,IBCOBIL,IBMRA,IBMRAI,IBMRAO,IBMRAIO,IBCBCOPY
"RTN","IBCCCB",175,0)
 K ^UTILITY($J)
"RTN","IBCCCB",176,0)
 Q
"RTN","IBCCCB",177,0)
 ;
"RTN","IBCCCB",178,0)
DSPRB(IBIFN) ; display related bills
"RTN","IBCCCB",179,0)
 ;
"RTN","IBCCCB",180,0)
 D DSPRB^IBCCCB0(IBIFN) ; Code moved for size too big
"RTN","IBCCCB",181,0)
 Q
"RTN","IBCCCB",182,0)
 ;
"RTN","IBCCCB",183,0)
 ; ==============
"RTN","IBCCCB",184,0)
 ; 
"RTN","IBCCCB",185,0)
 ; Copy a bill for Reasonable Charges without cancelling it, update certain fields
"RTN","IBCCCB",186,0)
 ;
"RTN","IBCCCB",187,0)
 ; there is always both inpt inst (created first) and prof charges, always need both bills
"RTN","IBCCCB",188,0)
 ; there may be both outpt inst (created first) and prof charges, may not need both bills
"RTN","IBCCCB",189,0)
 ; if billing by episode rather than by day (current standard) then may need multiple prof bills per day
"RTN","IBCCCB",190,0)
 ; 
"RTN","IBCCCB",191,0)
 ; Inst bills are copied to create prof Bills automatically
"RTN","IBCCCB",192,0)
 ; Subsequent prof bills may be created if the user wants them
"RTN","IBCCCB",193,0)
 ;
"RTN","IBCCCB",194,0)
 ; Only the first bill in the COB series of bills should be copied for the next prof bill
"RTN","IBCCCB",195,0)
 ; The primary inst bill should be copied to get the secondary inst bill
"RTN","IBCCCB",196,0)
 ; The primary prof bill should be copied to get the secondary prof bill
"RTN","IBCCCB",197,0)
 ;
"RTN","IBCCCB",198,0)
CTCOPY(IBIFN,IBMRA) ; based on the type of bill, copy without cancelling
"RTN","IBCCCB",199,0)
 ; IBMRA = 1 if an MRA bill and copy for prof components is desired
"RTN","IBCCCB",200,0)
 ;
"RTN","IBCCCB",201,0)
 D CTCOPY^IBCCCB0(IBIFN,$G(IBMRA)) ;Moved due to routine size
"RTN","IBCCCB",202,0)
 Q
"RTN","IBCCCB",203,0)
 ;
"RTN","IBCEMQC")
0^1^B29766412^B29727908
"RTN","IBCEMQC",1,0)
IBCEMQC ;ALB/ESG - MRA EOB CRITERIA FOR AUTO-AUTHORIZE ; 3/1/06 9:23am
"RTN","IBCEMQC",2,0)
 ;;2.0;INTEGRATED BILLING;**155,323**;21-MAR-94
"RTN","IBCEMQC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEMQC",4,0)
 ;
"RTN","IBCEMQC",5,0)
 Q   ; must be called at proper entry point
"RTN","IBCEMQC",6,0)
 ;
"RTN","IBCEMQC",7,0)
CRIT(IBEOB) ; Function to determine if EOB entry meets the criteria for
"RTN","IBCEMQC",8,0)
 ; auto-authorization and secondary claim submission
"RTN","IBCEMQC",9,0)
 ;
"RTN","IBCEMQC",10,0)
 ; Input:  IBEOB - internal entry number for an entry in 361.1
"RTN","IBCEMQC",11,0)
 ;
"RTN","IBCEMQC",12,0)
 ; Output:  This function returns a pieced string
"RTN","IBCEMQC",13,0)
 ;          [1] 0 or 1, EOB meets criteria
"RTN","IBCEMQC",14,0)
 ;          [2] error message if the first piece is 0
"RTN","IBCEMQC",15,0)
 ;
"RTN","IBCEMQC",16,0)
 NEW IBM,IBM3,IBM5,IBIFN,PCE,REMC,Z,OK,REASON,STOP,IBPTRESP
"RTN","IBCEMQC",17,0)
 ;
"RTN","IBCEMQC",18,0)
 S OK=0,REASON="Unknown",IBEOB=+$G(IBEOB)
"RTN","IBCEMQC",19,0)
 ;
"RTN","IBCEMQC",20,0)
 S IBM=$G(^IBM(361.1,IBEOB,0)) I IBM="" S REASON="No EOB Data Found" G CRITX
"RTN","IBCEMQC",21,0)
 I $D(^IBM(361.1,IBEOB,"ERR")) S REASON="Filing Errors" G CRITX
"RTN","IBCEMQC",22,0)
 I $P(IBM,U,13)'=1 S REASON="Claim Status is "_$$GET1^DIQ(361.1,IBEOB_",",.13)_".  It must be PROCESSED." G CRITX
"RTN","IBCEMQC",23,0)
 ;
"RTN","IBCEMQC",24,0)
 I $P(IBM,U,4)'=1 S REASON="The EOB Type is not Medicare MRA" G CRITX
"RTN","IBCEMQC",25,0)
 ;
"RTN","IBCEMQC",26,0)
 ; If any other MRA's on file for this bill failed the auto-generation
"RTN","IBCEMQC",27,0)
 ; check, then this MRA must also fail the check
"RTN","IBCEMQC",28,0)
 S IBIFN=+IBM,Z=0,STOP=0
"RTN","IBCEMQC",29,0)
 F  S Z=$O(^IBM(361.1,"B",IBIFN,Z)) Q:'Z  D  Q:STOP
"RTN","IBCEMQC",30,0)
 . I Z=IBEOB Q             ; check different EOB records if they exist
"RTN","IBCEMQC",31,0)
 . I $P($G(^IBM(361.1,Z,0)),U,4)'=1 Q     ; must be an MRA
"RTN","IBCEMQC",32,0)
 . I $P($G(^IBM(361.1,Z,30)),U,1)="" Q    ; no problems recorded
"RTN","IBCEMQC",33,0)
 . S REASON="Another MRA for this bill (ien="_Z_") failed the auto-generation criteria check."
"RTN","IBCEMQC",34,0)
 . S STOP=1
"RTN","IBCEMQC",35,0)
 . Q
"RTN","IBCEMQC",36,0)
 I STOP G CRITX
"RTN","IBCEMQC",37,0)
 ;
"RTN","IBCEMQC",38,0)
 ; If this EOB is a split EOB, then don't allow it
"RTN","IBCEMQC",39,0)
 I $$SPLIT^IBCEMU1(IBEOB) S REASON="Claim level remark code MA15 received.  Multiple MRA's" G CRITX
"RTN","IBCEMQC",40,0)
 ;
"RTN","IBCEMQC",41,0)
 ; Call the function that checks the claim level and/or line level
"RTN","IBCEMQC",42,0)
 ; adjustments for this EOB
"RTN","IBCEMQC",43,0)
 I '$$CAS(IBEOB,"B",.REASON) G CRITX      ; "B" for both
"RTN","IBCEMQC",44,0)
 ;
"RTN","IBCEMQC",45,0)
 ; Make sure the patient responsibility amount for this MRA is greater than $0
"RTN","IBCEMQC",46,0)
 S IBPTRESP=$P($G(^IBM(361.1,IBEOB,1)),U,2)      ; Pt Resp Amt 1.02 field
"RTN","IBCEMQC",47,0)
 I $$FT^IBCEF(IBIFN)=3 S IBPTRESP=$$PTRESPI^IBCECOB1(IBEOB)
"RTN","IBCEMQC",48,0)
 I IBPTRESP'>0 S REASON="Patient responsibility dollar amount is less than or equal to $0" G CRITX
"RTN","IBCEMQC",49,0)
 ;
"RTN","IBCEMQC",50,0)
 ; Check the parameter values last of all
"RTN","IBCEMQC",51,0)
 I '$P($G(^IBE(350.9,1,8)),U,11) S REASON="Automatic MRA Processing parameter is turned off.  File 350.9, Field 8.11." G CRITX
"RTN","IBCEMQC",52,0)
 I '$P($G(^IBE(350.9,1,8)),U,12) S REASON="Allow MRA Processing parameter is turned off.  File 350.9, Field 8.12." G CRITX
"RTN","IBCEMQC",53,0)
 ;
"RTN","IBCEMQC",54,0)
 ; At this point, we're OK
"RTN","IBCEMQC",55,0)
 S OK=1,REASON=""
"RTN","IBCEMQC",56,0)
 ;
"RTN","IBCEMQC",57,0)
CRITX ;
"RTN","IBCEMQC",58,0)
 Q OK_U_REASON
"RTN","IBCEMQC",59,0)
 ;
"RTN","IBCEMQC",60,0)
 ;
"RTN","IBCEMQC",61,0)
CAS(IBEOB,ADJFLAG,REASON) ; This function determines if the EOB
"RTN","IBCEMQC",62,0)
 ; adjustment group codes and reason codes from file 361.1 (either
"RTN","IBCEMQC",63,0)
 ; claim level or line level or both) meet the criteria for auto-
"RTN","IBCEMQC",64,0)
 ; authorization and secondary claim submission.
"RTN","IBCEMQC",65,0)
 ;
"RTN","IBCEMQC",66,0)
 ; Input Parameters
"RTN","IBCEMQC",67,0)
 ;        IBEOB    - ien of entry in file 361.1
"RTN","IBCEMQC",68,0)
 ;      ADJFLAG    - adjustment flag
"RTN","IBCEMQC",69,0)
 ;                   "C" - look at claim level adjustments only
"RTN","IBCEMQC",70,0)
 ;                   "L" - look at line level adjustments only
"RTN","IBCEMQC",71,0)
 ;                   "B" - look at both claim and line level adjustments
"RTN","IBCEMQC",72,0)
 ; Output Parameter
"RTN","IBCEMQC",73,0)
 ;       REASON    - error message describing why it failed
"RTN","IBCEMQC",74,0)
 ;
"RTN","IBCEMQC",75,0)
 ; Function Value is either 0 or 1, indicating if it passed the criteria
"RTN","IBCEMQC",76,0)
 ;
"RTN","IBCEMQC",77,0)
 NEW EOBADJ,OK,OKCOMBO,PATRESP,STOP,LNIEN
"RTN","IBCEMQC",78,0)
 ;
"RTN","IBCEMQC",79,0)
 S IBEOB=+$G(IBEOB)
"RTN","IBCEMQC",80,0)
 S ADJFLAG=$G(ADJFLAG,"B")     ; default is "B" if not passed in
"RTN","IBCEMQC",81,0)
 D BUILD           ; build the array of OK group/reason combinations
"RTN","IBCEMQC",82,0)
 S PATRESP=0       ; patient responsibility flag (default false)
"RTN","IBCEMQC",83,0)
 S STOP=0          ; Stop flag
"RTN","IBCEMQC",84,0)
 S OK=0            ; OK flag (function value)
"RTN","IBCEMQC",85,0)
 S REASON=""       ; error reason text
"RTN","IBCEMQC",86,0)
 ;
"RTN","IBCEMQC",87,0)
 ; claim level adjustments
"RTN","IBCEMQC",88,0)
 I $F(".C.B.","."_ADJFLAG_".") D
"RTN","IBCEMQC",89,0)
 . KILL EOBADJ
"RTN","IBCEMQC",90,0)
 . M EOBADJ=^IBM(361.1,IBEOB,10)
"RTN","IBCEMQC",91,0)
 . D ADJCHK
"RTN","IBCEMQC",92,0)
 . Q
"RTN","IBCEMQC",93,0)
 ;
"RTN","IBCEMQC",94,0)
 ; Get out if the claim level adjustments failed
"RTN","IBCEMQC",95,0)
 I STOP G CASX
"RTN","IBCEMQC",96,0)
 ;
"RTN","IBCEMQC",97,0)
 ; line level adjustments
"RTN","IBCEMQC",98,0)
 I $F(".L.B.","."_ADJFLAG_".") D
"RTN","IBCEMQC",99,0)
 . S LNIEN=0
"RTN","IBCEMQC",100,0)
 . F  S LNIEN=$O(^IBM(361.1,IBEOB,15,LNIEN)) Q:'LNIEN  D  Q:STOP
"RTN","IBCEMQC",101,0)
 .. KILL EOBADJ
"RTN","IBCEMQC",102,0)
 .. M EOBADJ=^IBM(361.1,IBEOB,15,LNIEN,1)
"RTN","IBCEMQC",103,0)
 .. D ADJCHK
"RTN","IBCEMQC",104,0)
 .. Q
"RTN","IBCEMQC",105,0)
 . Q
"RTN","IBCEMQC",106,0)
 ;
"RTN","IBCEMQC",107,0)
 ; Get out if the line level adjustments failed
"RTN","IBCEMQC",108,0)
 I STOP G CASX
"RTN","IBCEMQC",109,0)
 ;
"RTN","IBCEMQC",110,0)
 ; Get out if there was no patient responsibility adjustments found
"RTN","IBCEMQC",111,0)
 I 'PATRESP S REASON="No Patient Responsibility Adjustments found" G CASX
"RTN","IBCEMQC",112,0)
 ;
"RTN","IBCEMQC",113,0)
 ; At this point, we're OK
"RTN","IBCEMQC",114,0)
 S OK=1,REASON=""
"RTN","IBCEMQC",115,0)
CASX ;
"RTN","IBCEMQC",116,0)
 Q OK
"RTN","IBCEMQC",117,0)
 ;
"RTN","IBCEMQC",118,0)
 ;
"RTN","IBCEMQC",119,0)
ADJCHK ; This procedure checks the adjustments for this EOB.  The group codes
"RTN","IBCEMQC",120,0)
 ; and reason codes are in the EOBADJ array structures from file 361.1.
"RTN","IBCEMQC",121,0)
 ;
"RTN","IBCEMQC",122,0)
 ;   Variables STOP and REASON will be returned on an error
"RTN","IBCEMQC",123,0)
 ;   Variable PATRESP will be returned if a valid PR adjustment found
"RTN","IBCEMQC",124,0)
 ;
"RTN","IBCEMQC",125,0)
 NEW ADJIEN,GROUP,RSNIEN,RSNCODE
"RTN","IBCEMQC",126,0)
 S ADJIEN=0
"RTN","IBCEMQC",127,0)
 F  S ADJIEN=$O(EOBADJ(ADJIEN)) Q:'ADJIEN  D  Q:STOP
"RTN","IBCEMQC",128,0)
 . S GROUP=$P($G(EOBADJ(ADJIEN,0)),U,1)
"RTN","IBCEMQC",129,0)
 . I GROUP="LQ" Q      ; line level remark code kludge: 42 rec [3]
"RTN","IBCEMQC",130,0)
 . I GROUP="" S GROUP="<Undefined>"
"RTN","IBCEMQC",131,0)
 . I '$D(OKCOMBO(GROUP)) S STOP=1,REASON="Unacceptable Claim Adjustment Group Code: "_GROUP Q
"RTN","IBCEMQC",132,0)
 . S RSNIEN=0
"RTN","IBCEMQC",133,0)
 . F  S RSNIEN=$O(EOBADJ(ADJIEN,1,RSNIEN)) Q:'RSNIEN  D  Q:STOP
"RTN","IBCEMQC",134,0)
 .. S RSNCODE=$P($G(EOBADJ(ADJIEN,1,RSNIEN,0)),U,1)
"RTN","IBCEMQC",135,0)
 .. ;
"RTN","IBCEMQC",136,0)
 .. ; Ignore some special adjustment data that is filed with the MRA
"RTN","IBCEMQC",137,0)
 .. I GROUP="PR",RSNCODE="AAA" Q    ; Allowed Amount: 41 rec [3]
"RTN","IBCEMQC",138,0)
 .. I GROUP="OA",RSNCODE="AB3" Q    ; Covered Amount: 15 rec [3]
"RTN","IBCEMQC",139,0)
 .. ;
"RTN","IBCEMQC",140,0)
 .. I RSNCODE="" S RSNCODE="<Undefined>"
"RTN","IBCEMQC",141,0)
 .. I '$D(OKCOMBO(GROUP,RSNCODE)) S STOP=1,REASON="Unacceptable Reason Code ("_RSNCODE_") for Claim Adjustment Group Code ("_GROUP_")" Q
"RTN","IBCEMQC",142,0)
 .. ;
"RTN","IBCEMQC",143,0)
 .. ; Set the flag if the group is PR
"RTN","IBCEMQC",144,0)
 .. I GROUP="PR" S PATRESP=1
"RTN","IBCEMQC",145,0)
 .. Q
"RTN","IBCEMQC",146,0)
 . Q
"RTN","IBCEMQC",147,0)
ADJCHKX ;
"RTN","IBCEMQC",148,0)
 Q
"RTN","IBCEMQC",149,0)
 ;
"RTN","IBCEMQC",150,0)
 ;
"RTN","IBCEMQC",151,0)
BUILD ; This procedure builds the OKCOMBO array which identifies which
"RTN","IBCEMQC",152,0)
 ; combinations of group codes and reason codes are acceptable
"RTN","IBCEMQC",153,0)
 ;
"RTN","IBCEMQC",154,0)
 NEW LN,LINE,GROUP,RSNLST,R,RSN
"RTN","IBCEMQC",155,0)
 KILL OKCOMBO
"RTN","IBCEMQC",156,0)
 F LN=1:1 D  Q:$P(LINE,";",4)=""&$D(OKCOMBO)
"RTN","IBCEMQC",157,0)
 . S LINE=$T(OKCOMBO+LN)
"RTN","IBCEMQC",158,0)
 . S GROUP=$P(LINE,";",3) Q:GROUP=""
"RTN","IBCEMQC",159,0)
 . S RSNLST=$P(LINE,";",4) Q:RSNLST=""
"RTN","IBCEMQC",160,0)
 . F R=1:1:$L(RSNLST,",") D
"RTN","IBCEMQC",161,0)
 .. S RSN=$P(RSNLST,",",R) Q:RSN=""
"RTN","IBCEMQC",162,0)
 .. S OKCOMBO(GROUP,RSN)=""
"RTN","IBCEMQC",163,0)
 .. Q
"RTN","IBCEMQC",164,0)
 . Q
"RTN","IBCEMQC",165,0)
BUILDX ;
"RTN","IBCEMQC",166,0)
 Q
"RTN","IBCEMQC",167,0)
 ;
"RTN","IBCEMQC",168,0)
 ;
"RTN","IBCEMQC",169,0)
OKCOMBO ; This section lists OK combinations of adjustment category group codes
"RTN","IBCEMQC",170,0)
 ; and associated reason codes.
"RTN","IBCEMQC",171,0)
 ; The format is as follows - semi-colon delimiter
"RTN","IBCEMQC",172,0)
 ;     [3] Adjustment category (group code)
"RTN","IBCEMQC",173,0)
 ;     [4] List of acceptable reason codes - comma delimiter
"RTN","IBCEMQC",174,0)
 ;
"RTN","IBCEMQC",175,0)
 ; PR-AAA is created by VistA for the Allowed Amount
"RTN","IBCEMQC",176,0)
 ; OA-AB3 is created by VistA for the Covered Amount
"RTN","IBCEMQC",177,0)
 ; LQ-zzz is created by VistA for the Line Level remark
"RTN","IBCEMQC",178,0)
 ;
"RTN","IBCEMQC",179,0)
 ;;CO;A2,B6,42,45
"RTN","IBCEMQC",180,0)
 ;;PR;1,2,66,122,AAA
"RTN","IBCEMQC",181,0)
 ;;OA;AB3
"RTN","IBCEMQC",182,0)
 ;
"RTN","IBCEMRAA")
0^2^B61799153^B61733871
"RTN","IBCEMRAA",1,0)
IBCEMRAA ;ALB/DSM - MEDICARE REMITTANCE ADVICE DETAIL-PART A ; 12/29/05 9:57am
"RTN","IBCEMRAA",2,0)
 ;;2.0;INTEGRATED BILLING;**155,323**;21-MAR-94
"RTN","IBCEMRAA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEMRAA",4,0)
 ;
"RTN","IBCEMRAA",5,0)
 Q  ; must call an entry point
"RTN","IBCEMRAA",6,0)
 ;
"RTN","IBCEMRAA",7,0)
 ;  This routine prints MRA Report for UB92 (Part A) Form Type
"RTN","IBCEMRAA",8,0)
 ;
"RTN","IBCEMRAA",9,0)
MRA(IBIFN) ;;Module - Entry point to print ALL MRA reports, for a given IBIFN.
"RTN","IBCEMRAA",10,0)
 ; This entry point doesn't ask for a Bill Number, it must pass IBIFN as Input.
"RTN","IBCEMRAA",11,0)
 ; It will prompt the user for a device.
"RTN","IBCEMRAA",12,0)
 ;
"RTN","IBCEMRAA",13,0)
 ; Input   IBIFN  = ien of Bill Number (required)
"RTN","IBCEMRAA",14,0)
 ;
"RTN","IBCEMRAA",15,0)
 N IBQUIT,IBPGN S IBQUIT=0
"RTN","IBCEMRAA",16,0)
 D ENT1
"RTN","IBCEMRAA",17,0)
 Q  ;MRA
"RTN","IBCEMRAA",18,0)
 ;
"RTN","IBCEMRAA",19,0)
ENT ; Menu Option Entry Point
"RTN","IBCEMRAA",20,0)
 N IBQUIT,IBEOB,IBIFN,FRMTYP,IBPGN
"RTN","IBCEMRAA",21,0)
 S IBQUIT=0
"RTN","IBCEMRAA",22,0)
 D GETBIL I IBQUIT Q   ;ENT
"RTN","IBCEMRAA",23,0)
 ;
"RTN","IBCEMRAA",24,0)
ENT1 ; Prompt for a print device and print MRA Reports
"RTN","IBCEMRAA",25,0)
 D DEV^IBCEMRAX(IBIFN) I IBQUIT Q    ; device handling  ENT1
"RTN","IBCEMRAA",26,0)
 ;
"RTN","IBCEMRAA",27,0)
PROC ; This section must have IBIFN defined
"RTN","IBCEMRAA",28,0)
 ; This section is called as both a foreground and a background process,
"RTN","IBCEMRAA",29,0)
 ; so all write stmts need to consider printing in both cases.
"RTN","IBCEMRAA",30,0)
 N FRMTYP,IEN,IBZDATA,INPAT
"RTN","IBCEMRAA",31,0)
 S IBQUIT=$G(IBQUIT)
"RTN","IBCEMRAA",32,0)
 S FRMTYP=$$FT^IBCEF(IBIFN)    ;Form Type
"RTN","IBCEMRAA",33,0)
 S INPAT=$$INPAT^IBCEF(IBIFN)  ;Inpatient Flag
"RTN","IBCEMRAA",34,0)
 ;
"RTN","IBCEMRAA",35,0)
 ; Get Service Line Level Data from 837 Extract - Make the appropriate call
"RTN","IBCEMRAA",36,0)
 ; based on the Bill's Form Type 3=UB92  ; 2=HCFA 1500
"RTN","IBCEMRAA",37,0)
 D  ;
"RTN","IBCEMRAA",38,0)
 . I FRMTYP=2 D F^IBCEF("N-HCFA 1500 SERVICE LINE (EDI)","IBZDATA",,IBIFN) Q
"RTN","IBCEMRAA",39,0)
 . D F^IBCEF("N-UB92 SERVICE LINE (EDI)","IBZDATA",,IBIFN)
"RTN","IBCEMRAA",40,0)
 ;
"RTN","IBCEMRAA",41,0)
 ; For a given IBIFN, print all MRA's on file for that Bill
"RTN","IBCEMRAA",42,0)
 S IEN=0
"RTN","IBCEMRAA",43,0)
 F  S IEN=$O(^IBM(361.1,"B",IBIFN,IEN)) Q:'IEN  D  I IBQUIT Q
"RTN","IBCEMRAA",44,0)
 . I $P($G(^IBM(361.1,IEN,0)),U,4)'=1 Q  ;not an MRA
"RTN","IBCEMRAA",45,0)
 . D PRNTMRA  ; print an MRA
"RTN","IBCEMRAA",46,0)
 ;
"RTN","IBCEMRAA",47,0)
 ; Force a form feed at end of a printer report
"RTN","IBCEMRAA",48,0)
 I $E(IOST,1,2)'["C-" W @IOF
"RTN","IBCEMRAA",49,0)
 ; Pause on screen before exiting
"RTN","IBCEMRAA",50,0)
 I 'IBQUIT,$E(IOST,1,2)["C-" W ! S DIR("A")="Press RETURN to continue: ",DIR(0)="EA" D ^DIR K DIR
"RTN","IBCEMRAA",51,0)
 ;
"RTN","IBCEMRAA",52,0)
 ; Quit if called from a background process (ZTQUEUED defined)
"RTN","IBCEMRAA",53,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q  ;PROC
"RTN","IBCEMRAA",54,0)
 D ^%ZISC     ; handle device closing before exiting
"RTN","IBCEMRAA",55,0)
 Q   ;PROC
"RTN","IBCEMRAA",56,0)
 ;
"RTN","IBCEMRAA",57,0)
PRNTMRA ; Print a single MRA
"RTN","IBCEMRAA",58,0)
 ; Input IEN - the ien# of EOB file (361.1); Required
"RTN","IBCEMRAA",59,0)
 S IBPGN=0
"RTN","IBCEMRAA",60,0)
 ; Print Part B - HCFA 1500
"RTN","IBCEMRAA",61,0)
 I FRMTYP=2 D PRNT^IBCEMRAB Q  ;PRNTMRA
"RTN","IBCEMRAA",62,0)
 ;
"RTN","IBCEMRAA",63,0)
 ; Print Part A - Institutional next
"RTN","IBCEMRAA",64,0)
 ; Claim Level
"RTN","IBCEMRAA",65,0)
 N RSNCD,NCVRCHRG,IBILL,IBILLU,IBCOINS,IBCTADJ,IBEOB,RMKS,IBFD,IBTD,IBDED,CLMADJ
"RTN","IBCEMRAA",66,0)
 I IBPGN>1 D PAUSE^IBCEMRAX I IBQUIT Q  ;pause between EOB reports
"RTN","IBCEMRAA",67,0)
 D CLMDATA,CLMHDR I IBQUIT Q
"RTN","IBCEMRAA",68,0)
 D CLMPRNT
"RTN","IBCEMRAA",69,0)
 ;
"RTN","IBCEMRAA",70,0)
 ; Print Service Line Level Adjustments - check if exist
"RTN","IBCEMRAA",71,0)
 I $D(^IBM(361.1,IEN,15)) D  I IBQUIT Q
"RTN","IBCEMRAA",72,0)
 . I ($Y+4)>IOSL D PAUSE^IBCEMRAX Q:IBQUIT  W @IOF D CLMHDR
"RTN","IBCEMRAA",73,0)
 . D SRVHDR^IBCEMRAX,SRVDATA^IBCEMRAX
"RTN","IBCEMRAA",74,0)
 ;
"RTN","IBCEMRAA",75,0)
 ; Print Disclaimer
"RTN","IBCEMRAA",76,0)
 D DSCLMR^IBCEMRAX
"RTN","IBCEMRAA",77,0)
 Q  ;PRTMRA
"RTN","IBCEMRAA",78,0)
 ;
"RTN","IBCEMRAA",79,0)
GETBIL ; Prompt the user for a Bill#. Get INIFN and IBEOB.
"RTN","IBCEMRAA",80,0)
 ;
"RTN","IBCEMRAA",81,0)
 N DIC,Y W !
"RTN","IBCEMRAA",82,0)
 ; Access Explanation Of Benefits File #361.1
"RTN","IBCEMRAA",83,0)
 ; Screen: only allow access to EOB's of Type = 1 (Medicare MRA)
"RTN","IBCEMRAA",84,0)
 S DIC="^IBM(361.1,",DIC(0)="AEMQ",DIC("S")="I $P(^(0),U,4)=1"
"RTN","IBCEMRAA",85,0)
 S DIC("W")="D EOBLST^IBCEMU1(Y)"   ; modify generic lister
"RTN","IBCEMRAA",86,0)
 D ^DIC
"RTN","IBCEMRAA",87,0)
 I Y<1!$D(DTOUT)!$D(DUOUT) S IBQUIT=1 Q  ; GETBIL
"RTN","IBCEMRAA",88,0)
 S IBIFN=+$P(Y,U,2)   ; get index to Bill file (#399)
"RTN","IBCEMRAA",89,0)
 Q  ;GETBIL
"RTN","IBCEMRAA",90,0)
 ;
"RTN","IBCEMRAA",91,0)
CLMDATA ; Get MRA Claim Level data of EOB file (#361.1)
"RTN","IBCEMRAA",92,0)
 N I,RCNT,GRPCD,GLVL,GLVLD,RLVL,RLVLD,RCDED,RCOINS,RCTADJ,RCNCVR,RCLMADJ,CLMLVL
"RTN","IBCEMRAA",93,0)
 F I=1:1:5 S @($P($T(TABLE+I),";",3))=$P($T(TABLE+I),";",4)
"RTN","IBCEMRAA",94,0)
 ;
"RTN","IBCEMRAA",95,0)
 ; Get Top Levels of EOB file (#361.1)
"RTN","IBCEMRAA",96,0)
 F I=0,1,3:1:6 S IBEOB(I)=$G(^IBM(361.1,IEN,I))
"RTN","IBCEMRAA",97,0)
 ;
"RTN","IBCEMRAA",98,0)
 ; Get Claim Level Remarks Code from appropriate levels of 361.1 based on
"RTN","IBCEMRAA",99,0)
 ; whether Bill is Outpatient or Inpatient.
"RTN","IBCEMRAA",100,0)
 D  ;
"RTN","IBCEMRAA",101,0)
 . I INPAT S RMKS=IBEOB(5) Q   ; Inpatient remarks code
"RTN","IBCEMRAA",102,0)
 . S RMKS=$P(IBEOB(3),U,3,7)   ; Outpatient remarks code
"RTN","IBCEMRAA",103,0)
 ;
"RTN","IBCEMRAA",104,0)
 ; Get Group Level Data
"RTN","IBCEMRAA",105,0)
 ; RLVLD=reason_code^amount^quantity^reason text
"RTN","IBCEMRAA",106,0)
 ; CLMLVL=Claim Level Flag indicating where the displayed data is coming from
"RTN","IBCEMRAA",107,0)
 ; 1=Claim Level; 0=Line Level
"RTN","IBCEMRAA",108,0)
 ;
"RTN","IBCEMRAA",109,0)
 S (GLVL,RLVL,RCNT,NCVRCHRG,IBDED,IBCOINS,IBCTADJ,CLMADJ,CLMLVL)=0
"RTN","IBCEMRAA",110,0)
 F  S GLVL=$O(^IBM(361.1,IEN,10,GLVL)) Q:'GLVL  S GLVLD=^(GLVL,0) D  ;
"RTN","IBCEMRAA",111,0)
 . S GRPCD=$P(GLVLD,U),RLVL=0
"RTN","IBCEMRAA",112,0)
 . F  S RLVL=$O(^IBM(361.1,IEN,10,GLVL,1,RLVL)) Q:'RLVL  S RLVLD=^(RLVL,0) D  ;
"RTN","IBCEMRAA",113,0)
 . . S RSNCD=$P(RLVLD,U)
"RTN","IBCEMRAA",114,0)
 . . I GRPCD="PR",RSNCD="AAA" Q   ;exception
"RTN","IBCEMRAA",115,0)
 . . I GRPCD="OA",RSNCD="AB3" Q   ;exception
"RTN","IBCEMRAA",116,0)
 . . I GRPCD="LQ" Q               ;exception
"RTN","IBCEMRAA",117,0)
 . . S RCNT=RCNT+1,RSNCD(RCNT)=RSNCD ;display
"RTN","IBCEMRAA",118,0)
 . . I RCLMADJ[(","_RSNCD_",") S CLMADJ=CLMADJ+$P(RLVLD,U,2),CLMLVL=1 ;Claim Adjustment
"RTN","IBCEMRAA",119,0)
 . . ; Get data from Claim Level: calculate Coinsurance, Contractual Adjustment,
"RTN","IBCEMRAA",120,0)
 . . ; Noncovered Charges and Deductible amounts
"RTN","IBCEMRAA",121,0)
 . . I GRPCD="PR",RCOINS[(","_RSNCD_",") S IBCOINS=$P(RLVLD,U,2),CLMLVL=1 Q
"RTN","IBCEMRAA",122,0)
 . . I GRPCD="PR",RCDED[(","_RSNCD_",") S IBDED=IBDED+$P(RLVLD,U,2),CLMLVL=1 Q
"RTN","IBCEMRAA",123,0)
 . . I GRPCD="CO" D  ;
"RTN","IBCEMRAA",124,0)
 . . . I RCTADJ[(","_RSNCD_",") S IBCTADJ=IBCTADJ+$P(RLVLD,U,2),CLMLVL=1
"RTN","IBCEMRAA",125,0)
 . . . I RCNCVR'[(","_RSNCD_",") S NCVRCHRG=NCVRCHRG+$P(RLVLD,U,2),CLMLVL=1
"RTN","IBCEMRAA",126,0)
 ;
"RTN","IBCEMRAA",127,0)
 ; If no data was found at Claim Level, get data from Line Level
"RTN","IBCEMRAA",128,0)
 I 'CLMLVL D LINELVL^IBCEMRAX
"RTN","IBCEMRAA",129,0)
 S IBILL=$G(^DGCR(399,$P(IBEOB(0),U),0)),IBILLU=$G(^DGCR(399,$P(IBEOB(0),U),"U"))
"RTN","IBCEMRAA",130,0)
 S IBFD=$$FMTE^XLFDT($P(IBILLU,U),5),IBTD=$$FMTE^XLFDT($P(IBILLU,U,2),5)
"RTN","IBCEMRAA",131,0)
 ;
"RTN","IBCEMRAA",132,0)
 Q  ;CLMDATA
"RTN","IBCEMRAA",133,0)
 ;
"RTN","IBCEMRAA",134,0)
CLMHDR ; Print Claim Level Header
"RTN","IBCEMRAA",135,0)
 S IBPGN=IBPGN+1
"RTN","IBCEMRAA",136,0)
 I IBPGN=1,$E(IOST,1,2)["C-" W @IOF  ; refresh terminal screen on 1st hdr
"RTN","IBCEMRAA",137,0)
 ;
"RTN","IBCEMRAA",138,0)
 ; Rows 1 to 3
"RTN","IBCEMRAA",139,0)
 W !,?108,"Medicare-equivalent",!?110,"Remittance Advice",!
"RTN","IBCEMRAA",140,0)
 N PRVDR,LVL,STATE
"RTN","IBCEMRAA",141,0)
 ; Retrieve the Provider data from IB Site Parameters file - ^IBE(350.9)
"RTN","IBCEMRAA",142,0)
 S PRVDR=$G(^IBE(350.9,1,2))
"RTN","IBCEMRAA",143,0)
 ; ProviderName^AgentCashierAddress^City^State^Zip
"RTN","IBCEMRAA",144,0)
 ;
"RTN","IBCEMRAA",145,0)
 F LVL=1:1:5 S PRVDR(LVL)=$P(PRVDR,U,LVL)
"RTN","IBCEMRAA",146,0)
 ; PRVDR(1)  Provider Name (Agent Cashier Mail Symbol)
"RTN","IBCEMRAA",147,0)
 ; PRVDR(2)  Agent Cashier Street Address
"RTN","IBCEMRAA",148,0)
 ; PRVDR(3)  Agent Cashier City
"RTN","IBCEMRAA",149,0)
 ; PRVDR(4)  Agent Cashier State
"RTN","IBCEMRAA",150,0)
 ; PRVDR(5)  Agent Cashier Zip
"RTN","IBCEMRAA",151,0)
 ;
"RTN","IBCEMRAA",152,0)
 ; resolve the State File Pointer in PRVDR(4) & get State Abbreviation
"RTN","IBCEMRAA",153,0)
 S STATE=$S(PRVDR(4)'="":$P($G(^DIC(5,PRVDR(4),0)),U,2),1:"")
"RTN","IBCEMRAA",154,0)
 ; Row 4 to 15
"RTN","IBCEMRAA",155,0)
 W !!!,"DEPT OF VETERANS AFFAIRS"
"RTN","IBCEMRAA",156,0)
 W !,PRVDR(2),?103,"PROVIDER #:",?117,$P($G(^IBE(350.9,1,1)),U,5) ;Tax ID
"RTN","IBCEMRAA",157,0)
 W !,PRVDR(1),?103,"PAGE #:",?117,$J(IBPGN,3)
"RTN","IBCEMRAA",158,0)
 W !,PRVDR(3),", ",STATE," ",PRVDR(5),?103,"DATE: ",?117,$$FMTE^XLFDT($P(IBEOB(0),U,6),5)
"RTN","IBCEMRAA",159,0)
 W !!,"PATIENT NAME",?24,"PATIENT CNTRL NUMBER",?48,"RC",?52,"REM",?58,"DRG#",?72,"DRG OUT AMT"
"RTN","IBCEMRAA",160,0)
 W ?86,"COINSURANCE",?100,"PAT REFUND",?115,"CONTRACT ADJ"
"RTN","IBCEMRAA",161,0)
 W !,"HIC NUMBER",?24,"ICN NUMBER",?48,"RC",?52,"REM",?58,"OUTCD CAPCD",?72,"DRG CAP AMT"
"RTN","IBCEMRAA",162,0)
 W ?86,"COVD CHGS",?100,"ESRD NET ADJ",?115,"PER DIEM RTE"
"RTN","IBCEMRAA",163,0)
 W !,"FROM DT    THRU DT",?24,"NACHG  HICHG  TOB",?48,"RC",?52,"REM",?58,"PROF COMP",?72,"MSP PAYMT"
"RTN","IBCEMRAA",164,0)
 W ?86,"NCOVD CHGS",?100,"INTEREST",?115,"PROC CD AMT"
"RTN","IBCEMRAA",165,0)
 W !,"CLM STATUS",?24,"COST  COVDY  NCOVDY",?48,"RC",?52,"REM",?58,"DRG AMT",?72,"DEDUCTIBLES"
"RTN","IBCEMRAA",166,0)
 W ?86,"DENIED CHGS",?100,"CLAIM ADJ",?115,"NET REIMB",!
"RTN","IBCEMRAA",167,0)
 Q  ;CLMHDR
"RTN","IBCEMRAA",168,0)
 ;
"RTN","IBCEMRAA",169,0)
CLMPRNT ; - Print Claim Level part of the Report
"RTN","IBCEMRAA",170,0)
 N PTNM,PTLEN,HIC
"RTN","IBCEMRAA",171,0)
 ; ROW 16
"RTN","IBCEMRAA",172,0)
 ; format and standardize patient name for display
"RTN","IBCEMRAA",173,0)
 S PTNM("FILE")=2,PTNM("IENS")=$P(IBILL,U,2),PTNM("FIELD")=.01,PTLEN=23
"RTN","IBCEMRAA",174,0)
 S PTNM=$$BLDNAME^XLFNAME(.PTNM,PTLEN)
"RTN","IBCEMRAA",175,0)
 I $P(IBEOB(6),U,1)'="" S PTNM=$E($P(IBEOB(6),U,1),1,PTLEN)
"RTN","IBCEMRAA",176,0)
 W !,PTNM
"RTN","IBCEMRAA",177,0)
 ; Account # (Bill #)
"RTN","IBCEMRAA",178,0)
 W ?24,$P($$SITE^VASITE,U,3),"-",$P(IBILL,U)
"RTN","IBCEMRAA",179,0)
 ; Reason Code,Remarks Code 1
"RTN","IBCEMRAA",180,0)
 W ?48,$G(RSNCD(1)),?52,$P(RMKS,U,1)
"RTN","IBCEMRAA",181,0)
 ; DRG Code Used
"RTN","IBCEMRAA",182,0)
 W ?58,$P(IBEOB(0),U,10)
"RTN","IBCEMRAA",183,0)
 ; Coinsurance, Contract Adjustment
"RTN","IBCEMRAA",184,0)
 W ?86,$J($G(IBCOINS),11,2),?115,$J($G(IBCTADJ),11,2)
"RTN","IBCEMRAA",185,0)
 ; ROW 17
"RTN","IBCEMRAA",186,0)
 ; HIC & ICN
"RTN","IBCEMRAA",187,0)
 S HIC=$S($P(IBEOB(6),U,2)'="":$P(IBEOB(6),U,2),$$WNRBILL^IBEFUNC(IBIFN,1):$P($G(^DGCR(399,$P(IBEOB(0),U),"I1")),U,2),1:$P($G(^DGCR(399,$P(IBEOB(0),U),"I2")),U,2))
"RTN","IBCEMRAA",188,0)
 W !,HIC,?24,$P(IBEOB(0),U,14)
"RTN","IBCEMRAA",189,0)
 ; Reason Code, Remarks Code 2
"RTN","IBCEMRAA",190,0)
 W ?48,$G(RSNCD(2)),?52,$P(RMKS,U,2)
"RTN","IBCEMRAA",191,0)
 ; covered charges
"RTN","IBCEMRAA",192,0)
 W ?86,$J($P(IBEOB(1),U,3),11,2)
"RTN","IBCEMRAA",193,0)
 ; Outpatient Reimbursement Rate
"RTN","IBCEMRAA",194,0)
 I 'INPAT W ?115,$J($P(IBEOB(3),U,1),11,2)
"RTN","IBCEMRAA",195,0)
 ; ROW 18
"RTN","IBCEMRAA",196,0)
 W !,IBFD,?12,IBTD
"RTN","IBCEMRAA",197,0)
 ; Type of Bill (=Location of Care_Bill Clasification_Frequency)
"RTN","IBCEMRAA",198,0)
 W ?38,$P(IBILL,U,24)_$P($G(^DGCR(399.1,$P(IBILL,U,25),0)),U,2)_$P(IBILL,U,26)
"RTN","IBCEMRAA",199,0)
 ; Reason Code,Remarks Code 3
"RTN","IBCEMRAA",200,0)
 W ?48,$G(RSNCD(3)),?52,$P(RMKS,U,3)
"RTN","IBCEMRAA",201,0)
 ; non-covered amount (Pt Responsibility)
"RTN","IBCEMRAA",202,0)
 W ?86,$J(NCVRCHRG,11,2)
"RTN","IBCEMRAA",203,0)
 ; Interest Amount
"RTN","IBCEMRAA",204,0)
 I $P(IBEOB(1),U,7) W ?100,$J($P(IBEOB(1),U,7),11,2)
"RTN","IBCEMRAA",205,0)
 ; Procedure code amount
"RTN","IBCEMRAA",206,0)
 W ?115,$J($P(IBEOB(3),U,2),11,2)
"RTN","IBCEMRAA",207,0)
 ; ROW 19
"RTN","IBCEMRAA",208,0)
 ; claim status
"RTN","IBCEMRAA",209,0)
 W !?6,$E($P(IBEOB(0),U,21),1,2)
"RTN","IBCEMRAA",210,0)
 ; M-Care Inp Cost Report Day Ct
"RTN","IBCEMRAA",211,0)
 W ?24,$P(IBEOB(4),U,14)
"RTN","IBCEMRAA",212,0)
 ; M-Care Inp Cov. Days/Visit Ct
"RTN","IBCEMRAA",213,0)
 W ?30,$P(IBEOB(4),U,1)
"RTN","IBCEMRAA",214,0)
 ; Medicare Non-Covered Days
"RTN","IBCEMRAA",215,0)
 W ?38,$P(IBEOB(4),U,19)
"RTN","IBCEMRAA",216,0)
 ; Reason Code,Remarks Code 4
"RTN","IBCEMRAA",217,0)
 W ?48,$G(RSNCD(4)),?52,$P(RMKS,U,4)
"RTN","IBCEMRAA",218,0)
 ; M-Care Inp Claim Drg Amt
"RTN","IBCEMRAA",219,0)
 W ?58,$J($P(IBEOB(4),U,3),11,2)
"RTN","IBCEMRAA",220,0)
 ; if Group Code is PR, print the sum of Reason Codes 1 and 66
"RTN","IBCEMRAA",221,0)
 W ?72,$J($G(IBDED),11,2)
"RTN","IBCEMRAA",222,0)
 ; Claim Adjustments
"RTN","IBCEMRAA",223,0)
 W ?100,$J($G(CLMADJ),10,2)
"RTN","IBCEMRAA",224,0)
 ; net reimburse
"RTN","IBCEMRAA",225,0)
 W ?115,$J($P(IBEOB(1),U,1),11,2)
"RTN","IBCEMRAA",226,0)
 ; Row 20
"RTN","IBCEMRAA",227,0)
 ; Reason Code,Remarks Code 5
"RTN","IBCEMRAA",228,0)
 W !?48,$G(RSNCD(5)),?52,$P(RMKS,U,5)
"RTN","IBCEMRAA",229,0)
 ;
"RTN","IBCEMRAA",230,0)
 Q  ; CLMPRNT
"RTN","IBCEMRAA",231,0)
TABLE ;;variable;list of Reason Codes w/leading & trailing commas; description;
"RTN","IBCEMRAA",232,0)
 ;;RCDED;,1,66,;reason code to calc deductible amount;
"RTN","IBCEMRAA",233,0)
 ;;RCOINS;,2,;reason code to calc coinsurance amount;
"RTN","IBCEMRAA",234,0)
 ;;RCTADJ;,A2,;reason codes to calc contract adjustment amount;
"RTN","IBCEMRAA",235,0)
 ;;RCNCVR;,1,2,23,42,45,66,70,71,89,94,97,118,A1,A2,B3,B6,;reason codes excluded from calc of noncovered charges amount;
"RTN","IBCEMRAA",236,0)
 ;;RCLMADJ;,42,45,70,94,97,122,A1,;reason codes to calc claim adj
"RTN","IBCEMRAA",237,0)
 ;
"RTN","IBCEMRAB")
0^3^B52079518^B51933708
"RTN","IBCEMRAB",1,0)
IBCEMRAB ;ALB/DSM - MEDICARE REMITTANCE ADVICE DETAIL-PART B ; 12/29/05 9:58am
"RTN","IBCEMRAB",2,0)
 ;;2.0;INTEGRATED BILLING;**155,323**;21-MAR-94
"RTN","IBCEMRAB",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEMRAB",4,0)
 ;
"RTN","IBCEMRAB",5,0)
 Q  ; this routine must be called at an entry point
"RTN","IBCEMRAB",6,0)
 ;
"RTN","IBCEMRAB",7,0)
 ;  This routine prints MRA Report for HCFA 1500 (Part B) Form Type
"RTN","IBCEMRAB",8,0)
PRNT ;
"RTN","IBCEMRAB",9,0)
 ; Claim Level Adjustments
"RTN","IBCEMRAB",10,0)
 N DIC,Y,IBEOB,IBILL,IBILLU,IBTD,IBFD,TOT,PRFRMID
"RTN","IBCEMRAB",11,0)
 D GDATA,HDR
"RTN","IBCEMRAB",12,0)
 ;
"RTN","IBCEMRAB",13,0)
 ; Initialize Totals
"RTN","IBCEMRAB",14,0)
 S (TOT("ALWD"),TOT("SRVDED"),TOT("SRVCOIN"),TOT("SRVADJ"),TOT("PAID"))=0
"RTN","IBCEMRAB",15,0)
 ;
"RTN","IBCEMRAB",16,0)
 ; Service Line Level Adjustments
"RTN","IBCEMRAB",17,0)
 I $D(^IBM(361.1,IEN,15)) D SRVPRNT I IBQUIT Q
"RTN","IBCEMRAB",18,0)
 ;
"RTN","IBCEMRAB",19,0)
 ; Print Totals Line
"RTN","IBCEMRAB",20,0)
 D TOTAL
"RTN","IBCEMRAB",21,0)
 ;
"RTN","IBCEMRAB",22,0)
 ; Print Disclaimer
"RTN","IBCEMRAB",23,0)
 D DSCLMR^IBCEMRAX
"RTN","IBCEMRAB",24,0)
 ;
"RTN","IBCEMRAB",25,0)
 Q  ;PRNT
"RTN","IBCEMRAB",26,0)
 ;
"RTN","IBCEMRAB",27,0)
GDATA ; Get MRA data
"RTN","IBCEMRAB",28,0)
 ;
"RTN","IBCEMRAB",29,0)
 N I
"RTN","IBCEMRAB",30,0)
 F I=0,1,2,3,6 S IBEOB(I)=$G(^IBM(361.1,IEN,I))
"RTN","IBCEMRAB",31,0)
 S IBILL=$G(^DGCR(399,$P(IBEOB(0),U),0)),IBILLU=$G(^DGCR(399,$P(IBEOB(0),U),"U"))
"RTN","IBCEMRAB",32,0)
 S IBTD=$$FMTE^XLFDT($P(IBILLU,U),5),IBFD=$$FMTE^XLFDT($P(IBILLU,U,2),5)
"RTN","IBCEMRAB",33,0)
 Q  ;GDATA
"RTN","IBCEMRAB",34,0)
 ;
"RTN","IBCEMRAB",35,0)
HDR ; Print Header
"RTN","IBCEMRAB",36,0)
 I $E(IOST,1,2)["C-" W @IOF
"RTN","IBCEMRAB",37,0)
 S IBPGN=IBPGN+1
"RTN","IBCEMRAB",38,0)
 ;
"RTN","IBCEMRAB",39,0)
 ; Row 1,2,3
"RTN","IBCEMRAB",40,0)
 W !,?102,"Medicare-equivalent",!?104,"Remittance Advice",!
"RTN","IBCEMRAB",41,0)
 ; Row 7
"RTN","IBCEMRAB",42,0)
 W !!!!,"DEPT OF VETERANS AFFAIRS"
"RTN","IBCEMRAB",43,0)
 ;
"RTN","IBCEMRAB",44,0)
 N PRVDR,LVL,STATE,LINE,PTNM,PTLEN,RMKS,HIC
"RTN","IBCEMRAB",45,0)
 ; Retrieve the Provider data from IB Site Parameters file - ^IBE(350.9)
"RTN","IBCEMRAB",46,0)
 S PRVDR=$G(^IBE(350.9,1,2))
"RTN","IBCEMRAB",47,0)
 ; ProviderName^AgentCashierAddress^City^State^Zip
"RTN","IBCEMRAB",48,0)
 ;
"RTN","IBCEMRAB",49,0)
 F LVL=1:1:5 S PRVDR(LVL)=$P(PRVDR,U,LVL)
"RTN","IBCEMRAB",50,0)
 ; PRVDR(1)  Provider Name (Agent Cashier Mail Symbol)
"RTN","IBCEMRAB",51,0)
 ; PRVDR(2)  Agent Cashier Street Address
"RTN","IBCEMRAB",52,0)
 ; PRVDR(3)  Agent Cashier City
"RTN","IBCEMRAB",53,0)
 ; PRVDR(4)  Agent Cashier State
"RTN","IBCEMRAB",54,0)
 ; PRVDR(5)  Agent Cashier Zip
"RTN","IBCEMRAB",55,0)
 ;
"RTN","IBCEMRAB",56,0)
 ; resolve the State File Pointer in PRVDR(4) & get State Abbreviation
"RTN","IBCEMRAB",57,0)
 S STATE=$S(PRVDR(4)'="":$P($G(^DIC(5,PRVDR(4),0)),U,2),1:"")
"RTN","IBCEMRAB",58,0)
 ;
"RTN","IBCEMRAB",59,0)
 ; Row 8
"RTN","IBCEMRAB",60,0)
 W !,PRVDR(2),?97,"PROVIDER #:",?111,"VA0"_$P($$SITE^VASITE,U,3)
"RTN","IBCEMRAB",61,0)
 ; Row 9
"RTN","IBCEMRAB",62,0)
 W !,PRVDR(1),?97,"PAGE #:",?111,$J(IBPGN,3)
"RTN","IBCEMRAB",63,0)
 ; Row 10
"RTN","IBCEMRAB",64,0)
 W !,PRVDR(3),", ",STATE," ",PRVDR(5),?97,"DATE:",?111,$$FMTE^XLFDT($P(IBEOB(0),U,6),5)
"RTN","IBCEMRAB",65,0)
 ; Row 14
"RTN","IBCEMRAB",66,0)
 W !!!!,"PERF PROV",?12,"SERV DATE",?25,"POS",?29,"NOS",?34,"PROC",?40,"MODS",?53,"BILLED",?63,"ALLOWED",?75,"DEDUCT"
"RTN","IBCEMRAB",67,0)
 W ?87,"COINS",?93,"GRP-RC",?107,"AMT",?114,"PROV PD"
"RTN","IBCEMRAB",68,0)
 ; Row 15
"RTN","IBCEMRAB",69,0)
 S $P(LINE,"-",122)="" W !,LINE
"RTN","IBCEMRAB",70,0)
 ;
"RTN","IBCEMRAB",71,0)
 ; format and standardize patient name for display
"RTN","IBCEMRAB",72,0)
 S PTNM("FILE")=2,PTNM("IENS")=$P(IBILL,U,2),PTNM("FIELD")=.01,PTLEN=23
"RTN","IBCEMRAB",73,0)
 S PTNM=$$BLDNAME^XLFNAME(.PTNM,PTLEN)
"RTN","IBCEMRAB",74,0)
 I $P(IBEOB(6),U,1)'="" S PTNM=$E($P(IBEOB(6),U,1),1,PTLEN)
"RTN","IBCEMRAB",75,0)
 ;
"RTN","IBCEMRAB",76,0)
 S HIC=$S($P(IBEOB(6),U,2)'="":$P(IBEOB(6),U,2),$$WNRBILL^IBEFUNC(IBIFN,1):$P($G(^DGCR(399,$P(IBEOB(0),U),"I1")),U,2),1:$P($G(^DGCR(399,$P(IBEOB(0),U),"I2")),U,2))
"RTN","IBCEMRAB",77,0)
 ; Row 17
"RTN","IBCEMRAB",78,0)
 ; Patient Name, HIC, ACNT, ICN, ASG
"RTN","IBCEMRAB",79,0)
 W !!,"NAME",?7,PTNM,?31,"HIC",?35,HIC
"RTN","IBCEMRAB",80,0)
 W ?49,"ACNT",?54,$P($$SITE^VASITE,U,3),"-",$P(IBILL,U),?76,"ICN",?80,$P(IBEOB(0),U,14)
"RTN","IBCEMRAB",81,0)
 W ?97,"ASG",?101,$S($P(IBILLU,U,6):"Y",1:"N")
"RTN","IBCEMRAB",82,0)
 ;
"RTN","IBCEMRAB",83,0)
 ; MOA: Medicare Outpatient Remarks Code
"RTN","IBCEMRAB",84,0)
 S RMKS=$P(IBEOB(3),U,3,7) I RMKS="" S RMKS="^^^^"
"RTN","IBCEMRAB",85,0)
 W ?104,"MOA   " I RMKS'?1."^" W $P(RMKS,U,1)," ",$P(RMKS,U,2)
"RTN","IBCEMRAB",86,0)
 I $P(RMKS,U,3,5)'?1."^" S RMKS=$TR(RMKS,U," ") W !,RMKS
"RTN","IBCEMRAB",87,0)
 ; Secondary Performing Provider ID
"RTN","IBCEMRAB",88,0)
 ; On HCFA 1500 Form Type reports, If Medicare WNR is Primary or Secondary, then set Performing Provider ID
"RTN","IBCEMRAB",89,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1)!$$WNRBILL^IBEFUNC(IBIFN,2) S PRFRMID="V"_$$MCRSPEC^IBCEU4(IBIFN,1)_$P($$SITE^VASITE,U,3)
"RTN","IBCEMRAB",90,0)
 Q  ;HDR
"RTN","IBCEMRAB",91,0)
 ;
"RTN","IBCEMRAB",92,0)
SRVPRNT ; Print Service Level Data of EOB file (#361.1 Level 15)
"RTN","IBCEMRAB",93,0)
 ;
"RTN","IBCEMRAB",94,0)
 N LNLVL,RLVL,RLVLD,LNLVLD,SRVFDT,SRVTDT,UNIT,PRCD,MOD,I
"RTN","IBCEMRAB",95,0)
 N ALWD,GLVL,GLVLD,GRPCD,OPRCD,PAID,RCNT,SRMKS,SRVCOIN
"RTN","IBCEMRAB",96,0)
 N SRVDED,SRVADJ,SRVCHRG,SRVDT,CLMLN,Z
"RTN","IBCEMRAB",97,0)
 ;
"RTN","IBCEMRAB",98,0)
 ; RLVLD=reason_code^amount^quantity^reason text
"RTN","IBCEMRAB",99,0)
 S LNLVL=0
"RTN","IBCEMRAB",100,0)
 F  S LNLVL=$O(^IBM(361.1,IEN,15,LNLVL)) Q:'LNLVL  S LNLVLD=^(LNLVL,0) D  I IBQUIT Q
"RTN","IBCEMRAB",101,0)
 . I ($Y+4)>IOSL D  I IBQUIT Q
"RTN","IBCEMRAB",102,0)
 . . D PAUSE^IBCEMRAX I IBQUIT Q
"RTN","IBCEMRAB",103,0)
 . . W @IOF D HDR
"RTN","IBCEMRAB",104,0)
 . ; From Service Date, To Service Date
"RTN","IBCEMRAB",105,0)
 . S SRVFDT=$P(LNLVLD,U,16),SRVTDT=$P(LNLVLD,U,17)
"RTN","IBCEMRAB",106,0)
 . S SRVFDT=$$FMTE^XLFDT(SRVFDT,5),SRVTDT=$$FMTE^XLFDT(SRVTDT,5)
"RTN","IBCEMRAB",107,0)
 . ; Get Units, Procedure Code, Original Procedure Code
"RTN","IBCEMRAB",108,0)
 . S UNIT=$P(LNLVLD,U,11),PRCD=$P(LNLVLD,U,4),OPRCD=$P(LNLVLD,U,15)
"RTN","IBCEMRAB",109,0)
 . S PAID=$P(LNLVLD,U,3),TOT("PAID")=TOT("PAID")+PAID    ; Provider Paid Amount
"RTN","IBCEMRAB",110,0)
 . S ALWD=$P(LNLVLD,U,13),TOT("ALWD")=TOT("ALWD")+ALWD   ; Allowed Amount
"RTN","IBCEMRAB",111,0)
 . ; Handle Multiple Paid Modifiers from the Service Line Level - string together
"RTN","IBCEMRAB",112,0)
 . K MOD M MOD=^IBM(361.1,IEN,15,LNLVL,2) S MOD="" F I=1:1:4 Q:'$D(MOD(I))  S MOD=MOD_MOD(I,0)
"RTN","IBCEMRAB",113,0)
 . ; Calculate Submitted Service Line Charge
"RTN","IBCEMRAB",114,0)
 . S CLMLN=$P(LNLVLD,U,12)   ; use to match EOB line # to VistA Bill line#
"RTN","IBCEMRAB",115,0)
 . S SRVCHRG=$P($G(IBZDATA(CLMLN)),U,8)*$P($G(IBZDATA(CLMLN)),U,9)
"RTN","IBCEMRAB",116,0)
 . ; Service Line Level Remarks Codes
"RTN","IBCEMRAB",117,0)
 . S Z=0 F  S Z=$O(^IBM(361.1,IEN,15,LNLVL,4,Z)) Q:'Z  I $G(^(Z,0))'="" S SRMKS(Z)=$P(^(0),U,2)
"RTN","IBCEMRAB",118,0)
 . ; Get Service Level Group Code/Reason Code Data
"RTN","IBCEMRAB",119,0)
 . S (SRVDED,GLVL,RCNT,SRVCOIN)=0 K RSNCD
"RTN","IBCEMRAB",120,0)
 . F  S GLVL=$O(^IBM(361.1,IEN,15,LNLVL,1,GLVL)) Q:'GLVL  S GLVLD=^(GLVL,0) D  ;
"RTN","IBCEMRAB",121,0)
 . . S GRPCD=$P(GLVLD,U),RLVL=0
"RTN","IBCEMRAB",122,0)
 . . F  S RLVL=$O(^IBM(361.1,IEN,15,LNLVL,1,GLVL,1,RLVL)) Q:'RLVL  S RLVLD=^(RLVL,0),RSNCD=$P(RLVLD,U) D  ;
"RTN","IBCEMRAB",123,0)
 . . . I GRPCD="PR",RSNCD="AAA" Q  ;exception
"RTN","IBCEMRAB",124,0)
 . . . I GRPCD="OA",RSNCD="AB3" Q  ;exception
"RTN","IBCEMRAB",125,0)
 . . . I GRPCD="LQ" Q              ;exception
"RTN","IBCEMRAB",126,0)
 . . . I GRPCD="PR",RSNCD=1 S SRVDED=SRVDED+$P(RLVLD,U,2),TOT("SRVDED")=TOT("SRVDED")+SRVDED Q  ;deductible
"RTN","IBCEMRAB",127,0)
 . . . I GRPCD="PR",RSNCD=2 S SRVCOIN=$P(RLVLD,U,2),TOT("SRVCOIN")=TOT("SRVCOIN")+SRVCOIN Q  ;coinsurance
"RTN","IBCEMRAB",128,0)
 . . . S SRVADJ=$P(RLVLD,U,2),TOT("SRVADJ")=TOT("SRVADJ")+SRVADJ  ;adjustment
"RTN","IBCEMRAB",129,0)
 . . . S RCNT=RCNT+1,RSNCD(RCNT)=GRPCD_"-"_RSNCD_U_SRVADJ
"RTN","IBCEMRAB",130,0)
 . ; Performing Provider ID
"RTN","IBCEMRAB",131,0)
 . W !,$G(PRFRMID)
"RTN","IBCEMRAB",132,0)
 . ; From Date in MMDD (w/leading zero) format
"RTN","IBCEMRAB",133,0)
 . I SRVFDT'="" S SRVDT=$E("00",1,2-$L(+SRVFDT))_+SRVFDT_$E("00",1,2-$L($P(SRVFDT,"/",2)))_$P(SRVFDT,"/",2) W ?12,SRVDT
"RTN","IBCEMRAB",134,0)
 . ; To Date in MMDDYY (w/leading zero) format
"RTN","IBCEMRAB",135,0)
 . I SRVTDT'="" W ?17,$E("00",1,2-$L(+SRVTDT)),+SRVTDT,$E("00",1,2-$L($P(SRVTDT,"/",2))),$P(SRVTDT,"/",2),$E($P(SRVTDT,"/",3),3,4)
"RTN","IBCEMRAB",136,0)
 . ; If To Date is Null, Print From Date with year (if not Null)
"RTN","IBCEMRAB",137,0)
 . I SRVTDT="",SRVFDT'="" W ?17,SRVDT,$E($P(SRVFDT,"/",3),3,4)
"RTN","IBCEMRAB",138,0)
 . ; Place of Service - from 837 Extract from HCFA Service Line Level
"RTN","IBCEMRAB",139,0)
 . W ?25,$P($G(IBZDATA(CLMLN)),U,3)
"RTN","IBCEMRAB",140,0)
 . ; Print Units, Procedure Code Paid, Modifiers, Submitted Line Charge, Allowed Amt, Deductable, Coinsurance
"RTN","IBCEMRAB",141,0)
 . W ?28,UNIT,?34,PRCD,?40,MOD,?49,$J(SRVCHRG,10,2),?60,$J(ALWD,10,2),?71,$J(SRVDED,10,2),?82,$J(SRVCOIN,10,2)
"RTN","IBCEMRAB",142,0)
 . ; Print 1st Line of Group Code-Reason Code, Adjustment Amount, Paid Amount
"RTN","IBCEMRAB",143,0)
 . W ?93,$P($G(RSNCD(1)),U),?100,$J($P($G(RSNCD(1)),U,2),10,2),?111,$J(PAID,10,2)
"RTN","IBCEMRAB",144,0)
 . ; print PRCD Submitted, Remarks if any
"RTN","IBCEMRAB",145,0)
 . I OPRCD'=""!$O(SRMKS(0)) W ! D  ;
"RTN","IBCEMRAB",146,0)
 . . I OPRCD'="" W ?33,"(",OPRCD,")"
"RTN","IBCEMRAB",147,0)
 . . I $O(SRMKS(0)) W ?44,"REM: " S Z=0 F  S Z=$O(SRMKS(Z)) Q:'Z  W SRMKS(Z),$S($O(SRMKS(Z)):",",1:"")
"RTN","IBCEMRAB",148,0)
 . ; Print the rest of Group Code-Reason Code, Reason Code Amount
"RTN","IBCEMRAB",149,0)
 . F I=2:1:RCNT W !?93,$P(RSNCD(I),U),?100,$J($P(RSNCD(I),U,2),10,2)
"RTN","IBCEMRAB",150,0)
 Q  ;SRVPRNT
"RTN","IBCEMRAB",151,0)
 ;
"RTN","IBCEMRAB",152,0)
TOTAL ; Print Totals
"RTN","IBCEMRAB",153,0)
 W !!,"PT RESP ",$J($P($G(IBEOB(1)),U,2),10,2)  ;Patient Responsibility
"RTN","IBCEMRAB",154,0)
 ; Billed Amount, Allowed Amount, Deductable Amount
"RTN","IBCEMRAB",155,0)
 W ?35,"CLAIM TOTAL",?49,$J($P($G(IBEOB(2)),U,4),10,2),?60,$J(TOT("ALWD"),10,2),?71,$J(TOT("SRVDED"),10,2)
"RTN","IBCEMRAB",156,0)
 ; Coinsurance Amount, Adjustment Amount, Paid Amount
"RTN","IBCEMRAB",157,0)
 W ?82,$J(TOT("SRVCOIN"),10,2),?100,$J(TOT("SRVADJ"),10,2),?111,$J(TOT("PAID"),10,2)
"RTN","IBCEMRAB",158,0)
 Q  ;TOTAL
"RTN","IBCEMRAB",159,0)
 ;
"RTN","IBCEU3")
0^4^B42203561^B42120644
"RTN","IBCEU3",1,0)
IBCEU3 ;ALB/TMP - EDI UTILITIES FOR HCFA 1500 ; 12/29/05 9:58am
"RTN","IBCEU3",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,323**;21-MAR-94
"RTN","IBCEU3",3,0)
 ;
"RTN","IBCEU3",4,0)
BOX19(IBIFN) ; Returns the text that should print in box 19 of the HCFA 1500
"RTN","IBCEU3",5,0)
 ;   for bill ien IBIFN
"RTN","IBCEU3",6,0)
 ; Data is derived from a combo of data throughout
"RTN","IBCEU3",7,0)
 ; the system and is limited to 80 characters.  The hierarchy for
"RTN","IBCEU3",8,0)
 ; including data is as follows (until 80 characters have been used):
"RTN","IBCEU3",9,0)
 ;   DATE LAST SEEN and REFERRING PHYSICIAN ID# (physical therapy)
"RTN","IBCEU3",10,0)
 ;                      specialty codes = 025,065,073,067,048
"RTN","IBCEU3",11,0)
 ;   LAST X-RAY DATE (chiropractic) specialty code = 35
"RTN","IBCEU3",12,0)
 ;   HOMEBOUND INDICATOR (independent lab renders an EKG or obtains
"RTN","IBCEU3",13,0)
 ;                        a specimen from a homebound patient)
"RTN","IBCEU3",14,0)
 ;   NO ASSIGNMENT OF BENEFITS (if no assignment of benefits indicated)
"RTN","IBCEU3",15,0)
 ;   Hearing aid testing (if applicable)
"RTN","IBCEU3",16,0)
 ;   ATTENDING PHYSICIAN NOT HOSPICE EMPLOYEE (if applicable)
"RTN","IBCEU3",17,0)
 ;   SPECIAL PROGRAM indicator if Medicare demonstration project for
"RTN","IBCEU3",18,0)
 ;                   lung volume reduction surgery study is set
"RTN","IBCEU3",19,0)
 ;   COMMENTS FOUND IN BOX 19 DATA FIELD FOR THE CLAIM
"RTN","IBCEU3",20,0)
 ;   REMARKS FOUND IN BILL COMMENT FOR THE CLAIM, INCLUDING PROSTHETICS
"RTN","IBCEU3",21,0)
 ;     DETAIL
"RTN","IBCEU3",22,0)
 ;
"RTN","IBCEU3",23,0)
 N IBGO,IBHOSP,IBID,IBLSDT,IBXDATA,IB19,IBHAID,IBXRAY,IBSPEC,Z,Z0,IBSUB,IBPRT,IBREM
"RTN","IBCEU3",24,0)
 S IB19="",IBGO=1
"RTN","IBCEU3",25,0)
 S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT")
"RTN","IBCEU3",26,0)
 I $D(IBXSAVE(IBSUB)) N IBXSAVE
"RTN","IBCEU3",27,0)
 S IBPRT=(IBSUB["24")
"RTN","IBCEU3",28,0)
 ;
"RTN","IBCEU3",29,0)
 S IBSPEC=$$BILLSPEC(IBIFN)
"RTN","IBCEU3",30,0)
 G:'IBPRT NPRT
"RTN","IBCEU3",31,0)
 I "^25^65^73^67^48^"[(U_IBSPEC_U) D
"RTN","IBCEU3",32,0)
 . K IBXDATA D F^IBCEF("N-DATE LAST SEEN",,,IBIFN)
"RTN","IBCEU3",33,0)
 . I IBXDATA'="" S IBID="",IBLSDT=$$DATE^IBCF2(IBXDATA,0,1) D  I IBLSDT'="" S IBGO=$$LENOK("Date Last Seen:"_IBLSDT_IBID,.IB19)
"RTN","IBCEU3",34,0)
 .. ; Only print if specialty is OT or PT or proc for routine foot care
"RTN","IBCEU3",35,0)
 .. D F^IBCEF("N-REFERRING PROVIDER ID",,,IBIFN) I IBXDATA'="" S IBID=" By:"_IBXDATA
"RTN","IBCEU3",36,0)
 ;
"RTN","IBCEU3",37,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",38,0)
 K IBXDATA D F^IBCEF("N-HOMEBOUND",,,IBIFN)
"RTN","IBCEU3",39,0)
 I IBXDATA G:'$$LENOK("Homebound",.IB19) BOX19Q
"RTN","IBCEU3",40,0)
 ;
"RTN","IBCEU3",41,0)
 K IBXDATA D F^IBCEF("N-ASSIGN OF BENEFITS INDICATOR",,,IBIFN)
"RTN","IBCEU3",42,0)
 I "Nn0"[IBXDATA&(IBXDATA'="") G:'$$LENOK("Patient refuses to assign benefits",.IB19) BOX19Q
"RTN","IBCEU3",43,0)
 ;
"RTN","IBCEU3",44,0)
 I '$D(IBXSAVE(IBSUB)) D B24^IBCEF3(.IBXSAVE,IBIFN,$S($G(IBNOSHOW)=0:0,1:1))
"RTN","IBCEU3",45,0)
 ;
"RTN","IBCEU3",46,0)
 S (IBHAID,IBHOSP,IBXRAY)=0
"RTN","IBCEU3",47,0)
 ;
"RTN","IBCEU3",48,0)
 S Z=0 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D  G:'IBGO BOX19Q
"RTN","IBCEU3",49,0)
 . I $D(IBXSAVE(IBSUB,Z,"RX")),$P(IBXSAVE(IBSUB,Z,"RX"),U,3)="" S IBGO=$$LENOK("NOC Drug:"_$P(IBXSAVE(IBSUB,Z,"RX"),U,2)_" Units:"_+$P(IBXSAVE(IBSUB,Z,"RX"),U,6),.IB19)
"RTN","IBCEU3",50,0)
 . ;
"RTN","IBCEU3",51,0)
 . Q:'IBGO
"RTN","IBCEU3",52,0)
 . I 'IBHAID,$P(IBXSAVE(IBSUB,Z),U,5)="V5010",$$COBCT^IBCEF(IBIFN)>1 D  Q
"RTN","IBCEU3",53,0)
 .. S IBHAID=1,IBGO=$$LENOK("Testing for hearing aid",.IB19) Q
"RTN","IBCEU3",54,0)
 . ;
"RTN","IBCEU3",55,0)
 . Q:'IBGO
"RTN","IBCEU3",56,0)
 . I 'IBHOSP,$P($G(IBXSAVE(IBSUB,Z,"AUX")),U,3) D  Q
"RTN","IBCEU3",57,0)
 .. S IBHOSP=1,IBGO=$$LENOK("Attending physician,not hospice employee",.IB19)
"RTN","IBCEU3",58,0)
 . ;
"RTN","IBCEU3",59,0)
 . Q:'IBGO
"RTN","IBCEU3",60,0)
 . I 'IBXRAY,IBSPEC=35,$G(IBXSAVE(IBSUB,Z,"AUX"))'="" D  Q
"RTN","IBCEU3",61,0)
 .. ; Check for chiropratic services in claim type or specialty
"RTN","IBCEU3",62,0)
 .. S IBXRAY=1
"RTN","IBCEU3",63,0)
 .. S IBGO=$$LENOK($S($P(IBXSAVE(IBSUB,Z,"AUX"),U,2):"Last Xray:"_$$DATE^IBCF2($P(IBXSAVE(IBSUB,Z,"AUX"),U,2),0,1)_" ",1:"")_$S($P(IBXSAVE(IBSUB,Z,"AUX"),U,4)'="":"Level of Sublux:"_$P(IBXSAVE(IBSUB,Z,"AUX"),U,4),1:""),.IB19)
"RTN","IBCEU3",64,0)
 ;
"RTN","IBCEU3",65,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",66,0)
 K IBXDATA D F^IBCEF("N-SPECIAL PROGRAM",,,IBIFN)
"RTN","IBCEU3",67,0)
 I IBXDATA=30 G:'$$LENOK("Medicare demonstration project for lung volume reduction surgery study",.IB19) BOX19Q
"RTN","IBCEU3",68,0)
 ;
"RTN","IBCEU3",69,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",70,0)
NPRT K IBXDATA D F^IBCEF("N-HCFA 1500 BOX 19 RAW DATA",,,IBIFN)
"RTN","IBCEU3",71,0)
 S IBREM=0
"RTN","IBCEU3",72,0)
 I IBXDATA'="" G:'$$LENOK("Remarks:"_IBXDATA,.IB19) BOX19Q S IBREM=1
"RTN","IBCEU3",73,0)
 K IBXDATA D F^IBCEF("N-BILL REMARKS",,,IBIFN)
"RTN","IBCEU3",74,0)
 I IBXDATA'="" G:'$$LENOK($S('IBREM:"Remarks:",1:"")_IBXDATA,.IB19) BOX19Q
"RTN","IBCEU3",75,0)
 ;
"RTN","IBCEU3",76,0)
BOX19Q Q IB19
"RTN","IBCEU3",77,0)
 ;
"RTN","IBCEU3",78,0)
LENOK(IBDATA,IB19) ; Add text IBDATA to box 19 string (IB19 passed by ref)
"RTN","IBCEU3",79,0)
 ; Check length of box 19 data - truncate at 96 (max length)
"RTN","IBCEU3",80,0)
 ; Returns 0 if max length reached or exceeded, otherwise, 1
"RTN","IBCEU3",81,0)
 N OK
"RTN","IBCEU3",82,0)
 S OK=1
"RTN","IBCEU3",83,0)
 S IB19=IB19_$S(IB19'="":" ",1:"")_$G(IBDATA)
"RTN","IBCEU3",84,0)
 I $L(IB19)'<96 S OK=0,IB19=$E(IB19,1,96) G LENOKQ
"RTN","IBCEU3",85,0)
LENOKQ Q OK
"RTN","IBCEU3",86,0)
 ;
"RTN","IBCEU3",87,0)
ASK19(IBIFN) ; Ask to display HCFA 1500 box 19 data for current IBIFN
"RTN","IBCEU3",88,0)
 N DIR,DIC,X,Y,DIE,DR,Z
"RTN","IBCEU3",89,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("A")="DISPLAY THE FULL HCFA 1500 BOX 19?: "
"RTN","IBCEU3",90,0)
 D ^DIR
"RTN","IBCEU3",91,0)
 I Y=1 S Z=$$BOX19(IBIFN) W !!,?4,"19",?20,$E(Z,1,32) W:$L(Z)>32 !,?4,$E(Z,33,80),!
"RTN","IBCEU3",92,0)
 Q
"RTN","IBCEU3",93,0)
 ;
"RTN","IBCEU3",94,0)
ONLAB(IBIFN) ; Functions returns 1 if the bill IBIFN is outside non-lab
"RTN","IBCEU3",95,0)
 N IBP,IBPUR
"RTN","IBCEU3",96,0)
 S IBP=0
"RTN","IBCEU3",97,0)
 S IBPUR=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU3",98,0)
 I IBPUR,"13"[IBPUR S IBP=1
"RTN","IBCEU3",99,0)
 Q IBP
"RTN","IBCEU3",100,0)
 ;
"RTN","IBCEU3",101,0)
TEXT24(FLD,IBXSAVE,IBXDATA,IBSUB) ; Format the text line of box 24 by fld
"RTN","IBCEU3",102,0)
 ; INPUT:
"RTN","IBCEU3",103,0)
 ;   FLD = the letter of the field in box 24 (A-K)
"RTN","IBCEU3",104,0)
 ;   IBXSAVE = passed by reference = extracted data for the box 24 lines
"RTN","IBCEU3",105,0)
 ;   IBSUB = the subscript of the IBXSAVE array to use.
"RTN","IBCEU3",106,0)
 ;           If null, use "BOX24"
"RTN","IBCEU3",107,0)
 ; OUTPUT:
"RTN","IBCEU3",108,0)
 ;   IBXDATA = passed by reference, set to the correct part of the
"RTN","IBCEU3",109,0)
 ;             text that will print in the field's positions
"RTN","IBCEU3",110,0)
 ;
"RTN","IBCEU3",111,0)
 N Z,IBLINE,IBVAL,IBS,IBE,IBTEXT,IBAUX,IBDAT,IBZ
"RTN","IBCEU3",112,0)
 K IBXDATA
"RTN","IBCEU3",113,0)
 S (IBLINE,Z)=0 S:$G(IBSUB)="" IBSUB="BOX24"
"RTN","IBCEU3",114,0)
 ;
"RTN","IBCEU3",115,0)
 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D
"RTN","IBCEU3",116,0)
 . S IBDAT=$G(IBXSAVE(IBSUB,Z))
"RTN","IBCEU3",117,0)
 . S IBAUX=$G(IBXSAVE(IBSUB,Z,"AUX"))
"RTN","IBCEU3",118,0)
 . S IBTEXT=$G(IBXSAVE(IBSUB,Z,"TEXT"))
"RTN","IBCEU3",119,0)
 . I $S($G(IBAC)=4:$S($D(IBXSAVE(IBSUB,Z,"ARX")):1,1:$D(IBXSAVE(IBSUB,Z,"A"))),$D(IBXSAVE(IBSUB,Z,"RX")):0,1:$G(IBNOSHOW)) S IBTEXT=""
"RTN","IBCEU3",120,0)
 . I FLD="AF" S IBVAL=$P(IBDAT,U),IBS=1,IBE=9
"RTN","IBCEU3",121,0)
 . I FLD="AT" S IBVAL=$S($P(IBDAT,U,2):$P(IBDAT,U,2),1:$P(IBDAT,U)),IBS=10,IBE=18
"RTN","IBCEU3",122,0)
 . I FLD="B" S IBVAL=$P(IBDAT,U,3),IBS=19,IBE=21
"RTN","IBCEU3",123,0)
 . I FLD="C" S IBVAL=$P(IBDAT,U,4),IBS=22,IBE=24
"RTN","IBCEU3",124,0)
 . I FLD="D" S IBVAL=$P(IBDAT,U,5),IBS=25,IBE=41
"RTN","IBCEU3",125,0)
 . I FLD="D1" S IBVAL=$P($$MODLST^IBEFUNC($P(IBDAT,U,10)),",",1,4),IBS=0,IBE=0 ;Text for this area is handled by procedure field
"RTN","IBCEU3",126,0)
 . I FLD="E" S IBVAL=$P(IBDAT,U,7),IBS=42,IBE=48
"RTN","IBCEU3",127,0)
 . I FLD="F" S IBVAL=$P(IBDAT,U,8)*$P(IBDAT,U,9),IBS=49,IBE=58
"RTN","IBCEU3",128,0)
 . I FLD="G" S IBVAL=$S($P(IBDAT,U,4)'=7:$P(IBDAT,U,9),1:$P(IBDAT,U,12)),IBS=59,IBE=61
"RTN","IBCEU3",129,0)
 . I FLD="H" S IBVAL=$P(IBAUX,U,7),IBS=62,IBE=64
"RTN","IBCEU3",130,0)
 . I FLD="I" S IBVAL=$S($P(IBDAT,U,13)=1:"Y",1:""),IBS=65,IBE=67
"RTN","IBCEU3",131,0)
 . I FLD="J" S IBVAL="",IBS=68,IBE=70
"RTN","IBCEU3",132,0)
 . I FLD="K" S IBVAL=$S($G(IBXSAVE("Q"))'="":IBXSAVE("Q"),1:$P(IBAUX,U)),IBS=71,IBE=80
"RTN","IBCEU3",133,0)
 . I IBTEXT'="" D
"RTN","IBCEU3",134,0)
 .. S IBLINE=IBLINE+1,IBXDATA(IBLINE)=IBVAL
"RTN","IBCEU3",135,0)
 .. S IBLINE=IBLINE+1,IBXDATA(IBLINE)=$E(IBTEXT,IBS,IBE),IBXDATA(IBLINE,"T")=1
"RTN","IBCEU3",136,0)
 . E  D
"RTN","IBCEU3",137,0)
 .. S IBLINE=IBLINE+1,IBXDATA(IBLINE)=""
"RTN","IBCEU3",138,0)
 .. S IBLINE=IBLINE+1,IBXDATA(IBLINE)=IBVAL
"RTN","IBCEU3",139,0)
 Q
"RTN","IBCEU3",140,0)
 ;
"RTN","IBCEU3",141,0)
BILLSPEC(IBIFN,IBPRV) ;  Returns the specialty of the provider on bill IBIFN
"RTN","IBCEU3",142,0)
 ; If IBPRV is supplied, returns the data for that provider, otherwise,
"RTN","IBCEU3",143,0)
 ;  returns the specialty of the 'main/required' provider on the bill.
"RTN","IBCEU3",144,0)
 ;  Default = 99 if no valid code found
"RTN","IBCEU3",145,0)
 ; IBPRV = vp of provider (file 200 or 355.93)
"RTN","IBCEU3",146,0)
 N Z,IBSPEC,IBINS,IBDT
"RTN","IBCEU3",147,0)
 S IBSPEC="",IBPRV=$G(IBPRV)
"RTN","IBCEU3",148,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",149,0)
 ;
"RTN","IBCEU3",150,0)
 I $G(IBPRV) D  G SPECQ
"RTN","IBCEU3",151,0)
 . S IBSPEC=$$SPEC^IBCEU(IBPRV,IBDT)
"RTN","IBCEU3",152,0)
 ;
"RTN","IBCEU3",153,0)
 ;Get rendering for professional, attending for institutional,
"RTN","IBCEU3",154,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",155,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",156,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",157,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",158,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) Q:IBSPEC'=""
"RTN","IBCEU3",159,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",160,0)
 . I Z0,$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8)'="" S IBSPEC=$P(^(0),U,8)
"RTN","IBCEU3",161,0)
 ;
"RTN","IBCEU3",162,0)
SPECQ I IBSPEC="" S IBSPEC="99"
"RTN","IBCEU3",163,0)
 Q IBSPEC
"RTN","IBCEU3",164,0)
 ;
"RTN","IBCEU3",165,0)
CHAMPVA(IBIFN) ; Returns 1 if the bill IBIFN has a CHAMPVA rate type
"RTN","IBCEU3",166,0)
 Q $E($P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U),1,7)="CHAMPVA"
"RTN","IBCEU3",167,0)
 ;
"RTN","IBCEU3",168,0)
FAC(IBIFN) ; Is facility always to print in box 32 for bill ien IBIFN?
"RTN","IBCEU3",169,0)
 ;  Returns 1 if yes, 0 if no
"RTN","IBCEU3",170,0)
 Q $S($P($G(^DGCR(399,IBIFN,"UF2")),U,2):1,1:$P($G(^IBE(350.9,1,2)),U,12))
"RTN","IBCEU3",171,0)
 ;
"RTN","IBCEU3",172,0)
MCR24K(IBIFN) ;Function returns MEDICARE id# for professional (HCFA 1500) box 24k for bill IBIFN if appropriate
"RTN","IBCEU3",173,0)
 Q $S($$FT^IBCEF(IBIFN)=2&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1)_$P($$SITE^VASITE,U,3),1:"")
"RTN","IBCU")
0^6^B37317111^B36886371
"RTN","IBCU",1,0)
IBCU ;ALB/MRL - BILLING UTILITY ROUTINE ; 1/17/06 2:38pm
"RTN","IBCU",2,0)
 ;;2.0;INTEGRATED BILLING;**52,106,51,191,232,323**;21-MAR-94
"RTN","IBCU",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCU",4,0)
 ;
"RTN","IBCU",5,0)
 ;MAP TO DGCRU
"RTN","IBCU",6,0)
 ;
"RTN","IBCU",7,0)
ARSTAT ;find status of bill in file 430.3 (ar) return status number
"RTN","IBCU",8,0)
 S IBARST=$$STA^PRCAFN(IBIFN)
"RTN","IBCU",9,0)
 Q
"RTN","IBCU",10,0)
 ;
"RTN","IBCU",11,0)
ARCAT ;Trigger logic to set who's responsible in 399.3 from AR Category
"RTN","IBCU",12,0)
 S X=$P($$CATN^PRCAFN($P(^DGCR(399.3,DA,0),"^",6)),"^",3)
"RTN","IBCU",13,0)
 S:X'="" X=$S("PC"[X:"p",X="N":"o",X="T":"i",1:"")
"RTN","IBCU",14,0)
 Q
"RTN","IBCU",15,0)
 ;
"RTN","IBCU",16,0)
PTF ;Screen for appropriate PTF records
"RTN","IBCU",17,0)
 K IBDD1 S DFN=+$P(^DGCR(399,+DA,0),"^",2) Q:'$D(^DPT(+DFN,0))  S IB05=$P(^(0),"^",1),IB03=$P(^DGCR(399,+DA,0),"^",3)
"RTN","IBCU",18,0)
 S IB01="",IB02=0 F IB02=0:0 S IB01=$O(^DD(45,0,"ID",IB01)) Q:'IB01  S IB02=IB02+1,IBDD(IB02)=^(IB01)
"RTN","IBCU",19,0)
 F IB01=0:0 S IB01=$O(^DGPT("B",+DFN,IB01)) Q:'IB01  I $D(^DGPT(+IB01,0)) S IB04=$P(^(0),"^",2),Y=+IB01 I $P(IB03,".",1)=$P(IB04,".",1) S IBDD1(+Y)="" I $S('$D(X):0,X["?":1,1:0) D PTFW
"RTN","IBCU",20,0)
 G PTFQ:X'["?" I '$O(IBDD1(0)) W !,"Patient has no ACTIVE PTF RECORDS for this event date.",!,"A 'PTF NUMBER' is required for inpatient billing records."
"RTN","IBCU",21,0)
 E  W !!,"Select the appropriate billing record from the above listing by number."
"RTN","IBCU",22,0)
PTFQ W ! K IB01,IB02,IB03,IB04,IB05,IBDD Q
"RTN","IBCU",23,0)
PTFW W !,Y,?15,IB05 F IB02=0:0 S IB02=$O(IBDD(IB02)) Q:'IB02  X IBDD(IB02)
"RTN","IBCU",24,0)
 Q
"RTN","IBCU",25,0)
 ;
"RTN","IBCU",26,0)
AGE ;Input Transform for Condition Code 17
"RTN","IBCU",27,0)
 I X=18 G SEX
"RTN","IBCU",28,0)
 I X=17 S IBC=X,DFN=$P(^DGCR(399,D0,0),"^",2) D DEM^VADPT I VADM(4)<100 W !!,"This patient is only ",VADM(4)," years old!!",!! K IBC Q
"RTN","IBCU",29,0)
 I $D(IBC) S X=IBC
"RTN","IBCU",30,0)
 Q
"RTN","IBCU",31,0)
 ;
"RTN","IBCU",32,0)
SEX ;Input Transform for Condition Code 18
"RTN","IBCU",33,0)
 I X=18 S IBC=X,DFN=$P(^DGCR(399,D0,0),"^",2) D DEM^VADPT I $E(VADM(5))="M" W !!,"This patient is a MALE!! Condition code 18 applies only to FEMALES!!",!! K IBC,X
"RTN","IBCU",34,0)
 I $D(IBC) S X=IBC
"RTN","IBCU",35,0)
 Q
"RTN","IBCU",36,0)
 ;
"RTN","IBCU",37,0)
REV ;Input Transform for Revenue Code
"RTN","IBCU",38,0)
 I X=-1 W !!,"Choose only ACTIVE Revenue Codes!!",!! S D="AC" ;S X="" S X=$O(^DGCR(399.2,"AC",X)) Q:X=""  W !,$P(^DGCR(399.2,X,0),"^",1),?30,$P(^(0),"^",2) K X Q
"RTN","IBCU",39,0)
 I '$D(IBC) I $D(^DGCR(399.2,X,0)) I '$P(^DGCR(399.2,X,0),"^",3) W !!,"Only ACTIVE Revenue Codes may be selected!!",!! K X Q
"RTN","IBCU",40,0)
 Q
"RTN","IBCU",41,0)
 ;
"RTN","IBCU",42,0)
YN S X=$E(X),X=$S(X=1:X,X=0:X,X="Y":1,X="y":1,X="n":0,X="N":0,1:2) I X'=2 W "  (",$S(X:"YES",1:"NO"),")" Q
"RTN","IBCU",43,0)
 W !?4,"NOT A VALID CHOICE!",*7 K X Q
"RTN","IBCU",44,0)
 Q
"RTN","IBCU",45,0)
 ;
"RTN","IBCU",46,0)
NOPTF ; Input transform for file 399, field 159.5 (NON-VA ADMIT TIME)
"RTN","IBCU",47,0)
 N %DT
"RTN","IBCU",48,0)
 I X>24 K:X'=99 X Q
"RTN","IBCU",49,0)
 I $P($G(^DGCR(399,DA,0)),U,8) K X Q  ; PTF pointer exists 
"RTN","IBCU",50,0)
 S X=$TR(X,"M ") S:X=0 X="12A" S:X<12 X=$TR(X,"A")
"RTN","IBCU",51,0)
 S:X?1N.N&($L(X)<3) Y="."_$E("0",$L(X))_X S:X'?1.2N %DT="TPR",X=DT_"@"_X D:$L(X)>2 ^%DT S X=$E($P(Y,".",2)_"00",1,2)#24 K:Y=-1 X
"RTN","IBCU",52,0)
 Q
"RTN","IBCU",53,0)
 ;
"RTN","IBCU",54,0)
DIS ;Determine Billing Discharge status from PTF
"RTN","IBCU",55,0)
 ;Called from triggers on fields .08 and 161
"RTN","IBCU",56,0)
 N A
"RTN","IBCU",57,0)
 I '$D(^DGCR(399,DA,0)) S X="" G DISQ
"RTN","IBCU",58,0)
 S X=$P(^DGCR(399,DA,0),"^",6) I X=2!(X=3) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",59,0)
 S X=$P(^DGCR(399,DA,0),"^",8) I $S(X="":1,'$D(^DGPT(X)):1,1:0) S X="" G DISQ
"RTN","IBCU",60,0)
 I '+$G(^DGPT(X,70)) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",61,0)
 S A=$P($G(^DGCR(399,DA,"U")),"^",2) I A,(A+.24)<+$G(^DGPT(X,70)) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",62,0)
 S X=+$P($G(^DGPT(X,70)),"^",3)
"RTN","IBCU",63,0)
 I X=1 S X=$O(^DGCR(399.1,"B",$E("DISCHARGED TO HOME OR SELF CARE",1,30),0)) G DISQ
"RTN","IBCU",64,0)
 I X=4 S X=$O(^DGCR(399.1,"B",$E("LEFT AGAINST MEDICAL ADVICE",1,30),0)) G DISQ
"RTN","IBCU",65,0)
 I X=6!(X=7) S X=$O(^DGCR(399.1,"B","EXPIRED",0)) G DISQ
"RTN","IBCU",66,0)
 I X=5!(X=2) S X=$O(^DGCR(399.1,"B",$E("DISCHARGED TO ANOTHER SHORT-TERM GENERAL HOSPITAL",1,30),0)) G DISQ
"RTN","IBCU",67,0)
 S X=""
"RTN","IBCU",68,0)
DISQ Q
"RTN","IBCU",69,0)
 ;
"RTN","IBCU",70,0)
INST ;Ask Institutution address info
"RTN","IBCU",71,0)
 S DIC("DR")="1.01;1.02;1.03;.02;1.04" I $D(^XUSEC("IB SUPERVISOR",DUZ)) S DLAYGO=4
"RTN","IBCU",72,0)
 Q
"RTN","IBCU",73,0)
 ;
"RTN","IBCU",74,0)
PTADD(DFN,MAXL) ; outputs patient address for the trigger on Patient Short Address (399,110)
"RTN","IBCU",75,0)
 N IBX,IBY,IBI,IBDPT S (IBX,IBDPT)="" I $G(MAXL)="PSA" S MAXL=47
"RTN","IBCU",76,0)
 I +$G(DFN) S IBDPT=$G(^DPT(DFN,.11)) F IBI=1:1:4 S IBY=$P(IBDPT,U,IBI) I IBY'="" S IBX=IBX_IBY_","
"RTN","IBCU",77,0)
 I +$P(IBDPT,U,5) S IBY=$P($G(^DIC(5,+$P(IBDPT,U,5),0)),U,2),IBX=IBX_IBY
"RTN","IBCU",78,0)
 I $P(IBDPT,U,12)'="" S IBX=IBX_" "_$P(IBDPT,U,12)
"RTN","IBCU",79,0)
 I +$G(MAXL),$L(IBX)>+MAXL S IBX=""
"RTN","IBCU",80,0)
 Q IBX
"RTN","IBCU",81,0)
 ;
"RTN","IBCU",82,0)
SM ;Flag for printing medicare statment on UB-82
"RTN","IBCU",83,0)
 ;DGSM=0 means figure out which statement, DGSM=1 means no statements
"RTN","IBCU",84,0)
 S DGSM=0 Q
"RTN","IBCU",85,0)
 ;IBCU
"RTN","IBCU",86,0)
 ;
"RTN","IBCU",87,0)
CHGTYP(IBIFN,ARR) ; sets up array of all charge types defined on a bill:  ARR(TYPE, COMPONENT)=""
"RTN","IBCU",88,0)
 N IBI,IBX,IBT K ARR
"RTN","IBCU",89,0)
 I +$O(^DGCR(399,+$G(IBIFN),"RC",0)) S IBI=0 F  S IBI=$O(^DGCR(399,+IBIFN,"RC",IBI))  Q:'IBI  D
"RTN","IBCU",90,0)
 . S IBX=$G(^DGCR(399,+IBIFN,"RC",IBI,0)),IBT=$P(IBX,U,10) I +IBT S ARR(IBT,+$P(IBX,U,12))=""
"RTN","IBCU",91,0)
 Q
"RTN","IBCU",92,0)
 ;
"RTN","IBCU",93,0)
CHGTYPE(IBIFN) ; returns list of charge types on a bill: TYPE ^ TYPE ^ ... ; EXTERNAL TYPE , EXTERNAL TYPE , ...
"RTN","IBCU",94,0)
 N IBAR,IBY,IBS,IBI,IBC,IBJ,IBX
"RTN","IBCU",95,0)
 D CHGTYP($G(IBIFN),.IBAR)
"RTN","IBCU",96,0)
 S (IBX,IBY,IBS)="",IBI=0 F  S IBI=$O(IBAR(IBI)) Q:'IBI  D
"RTN","IBCU",97,0)
 . S IBX=IBX_IBI_U
"RTN","IBCU",98,0)
 . S IBC="INPT" I IBI=1 S IBJ=$O(IBAR(IBI,0)),IBC=$S(IBJ=1:"INST",IBJ=2:"PF",1:"INPT") I +$O(IBAR(IBI,IBJ)) S IBC="INPT"
"RTN","IBCU",99,0)
 . S IBY=IBY_IBS_$S(IBI=1:IBC,IBI=2:"VST",IBI=3:"RX",IBI=4:"CPT",IBI=5:"PI",IBI=6:"DRG",IBI=9:"UN",1:""),IBS=","
"RTN","IBCU",100,0)
 S IBY=IBX_";"_IBY
"RTN","IBCU",101,0)
 Q IBY
"RTN","IBCU",102,0)
 ;
"RTN","IBCU",103,0)
BCHGTYPE(IBIFN) ; returns type of bill and charges: (CLASS (.05): TYPE, TYPE, ...)
"RTN","IBCU",104,0)
 N IBCLASS,IBTYPE,IBY S IBY=""
"RTN","IBCU",105,0)
 S IBCLASS=$P($G(^DGCR(399,+$G(IBIFN),0)),U,5)
"RTN","IBCU",106,0)
 S IBTYPE=$P($$CHGTYPE(+$G(IBIFN)),";",2) I IBTYPE="INPT" S IBTYPE=""
"RTN","IBCU",107,0)
 I +IBCLASS S IBY=$S(IBCLASS<3:"Inpt",1:"Opt") I IBTYPE'="" S IBY=IBY_" ("_IBTYPE_")"
"RTN","IBCU",108,0)
 Q IBY
"RTN","IBCU",109,0)
 ;
"RTN","IBCU",110,0)
CLNSCRN(IBDT,CLIFN) ; screen for a Procedures Associated Clinic  (399, 304, 6), returns true if clinic can be used
"RTN","IBCU",111,0)
 ; clinic must be defined as a 'Clinic' and it must be active on date of procedure
"RTN","IBCU",112,0)
 ;
"RTN","IBCU",113,0)
 N IBCL0,IBCLI,IBX S IBX=0
"RTN","IBCU",114,0)
 S IBCL0=$G(^SC(+$G(CLIFN),0)),IBCLI=$G(^SC(+$G(CLIFN),"I"))
"RTN","IBCU",115,0)
 S IBX=$S($P(IBCL0,U,3)'="C":0,'$G(IBDT):0,'IBCLI:1,+IBCLI>+IBDT:1,'$P(IBCLI,U,2):0,1:$P(IBCLI,U,2)'>IBDT)
"RTN","IBCU",116,0)
 Q IBX
"RTN","IBCU",117,0)
 ;
"RTN","IBCU",118,0)
PRVNUM(IBIFN,IBINS,COB) ; Trigger code for Bill Primary/Secondary/Tertiary Provider # (399, 122, 123, 124)
"RTN","IBCU",119,0)
 ; on Primary Secondary/Tertiary Carrier (399, 101, 102, 103)
"RTN","IBCU",120,0)
 ; returns the Provider Number for the Insurance Company
"RTN","IBCU",121,0)
 ;         Hospital Provider Number for prov id in file 355.92
"RTN","IBCU",122,0)
 ;         or Medicare A provider Number (psych/non-psych) if Medicare A
"RTN","IBCU",123,0)
 ;
"RTN","IBCU",124,0)
 ; Input   IBIFN - bill ifn
"RTN","IBCU",125,0)
 ;         IBINS - insurance company ifn (opt)
"RTN","IBCU",126,0)
 ;         COB   - 1 for primary, 2 for secondary, 3 for tertiary
"RTN","IBCU",127,0)
 ;
"RTN","IBCU",128,0)
 N IBX,IBB0,IBBF,IBFT,Z,Z0
"RTN","IBCU",129,0)
 S:'$G(COB) COB=1
"RTN","IBCU",130,0)
 S IBX=$P($G(^DGCR(399,+$G(IBIFN),"M1")),U,COB+1),IBB0=$G(^DGCR(399,+$G(IBIFN),0))
"RTN","IBCU",131,0)
 I $G(IBINS)="" S IBINS=+$G(^DGCR(399,+$G(IBIFN),"I"_COB))
"RTN","IBCU",132,0)
 G:'IBINS PRVNQ
"RTN","IBCU",133,0)
 ;
"RTN","IBCU",134,0)
 ; OEC - 12/21/05 - If an MRA is being processed into an MRA secondary
"RTN","IBCU",135,0)
 ; claim and the billing provider # already exists, then leave it
"RTN","IBCU",136,0)
 I $G(IBPRCOB),IBX'="" G PRVNQ
"RTN","IBCU",137,0)
 ;
"RTN","IBCU",138,0)
 I +$G(IBIFN),COB N DA S DA=IBIFN I $$MCRACK^IBCBB3(+IBIFN,$P($G(^DGCR(399,+IBIFN,"TX")),U,5),+COB) S IBX=$$MCRANUM^IBCBB3(+IBIFN) G PRVNQ
"RTN","IBCU",139,0)
 ;
"RTN","IBCU",140,0)
 S IBX=$$FACNUM^IBCEP2B(IBIFN,COB)
"RTN","IBCU",141,0)
 I IBX="" S IBX=$P($G(^DIC(36,IBINS,0)),U,$S($$FT^IBCEF(IBIFN)=3:11,1:17))
"RTN","IBCU",142,0)
 ;
"RTN","IBCU",143,0)
PRVNQ Q IBX
"RTN","IBCU",144,0)
 ;
"RTN","IBCU",145,0)
BF() ; Returns ien of billing fac primary id type
"RTN","IBCU",146,0)
 N Z,IBX
"RTN","IBCU",147,0)
 S IBX="",Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,1)),U,9) S IBX=Z Q
"RTN","IBCU",148,0)
 Q IBX
"RTN","IBCU",149,0)
 ;
"RTN","IBCU",150,0)
BILLPNS(IBIFN) ; Trigger Code that sets all Bill Primary/Secondary/Tertiary Provider # (399,.122, 123, 124)
"RTN","IBCU",151,0)
 ; on Bill Form Type (399, .19)
"RTN","IBCU",152,0)
 N IBDR
"RTN","IBCU",153,0)
 ;
"RTN","IBCU",154,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I1")) S IBDR(399,IBIFN_",",122)=$$PRVNUM(IBIFN,"",1)
"RTN","IBCU",155,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I2")) S IBDR(399,IBIFN_",",123)=$$PRVNUM(IBIFN,"",2)
"RTN","IBCU",156,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I3")) S IBDR(399,IBIFN_",",124)=$$PRVNUM(IBIFN,"",3)
"RTN","IBCU",157,0)
 ;
"RTN","IBCU",158,0)
 I $O(IBDR(0)) D FILE^DIE("","IBDR")
"RTN","IBCU",159,0)
 Q
"RTN","IBY323PR")
0^^B330612
"RTN","IBY323PR",1,0)
IBY323PR ;ALB/OEC - IB*2*323 PRE-INSTALL ; 3/1/06 9:23am
"RTN","IBY323PR",2,0)
 ;;2.0;INTEGRATED BILLING;**323**;21-MAR-94
"RTN","IBY323PR",3,0)
 ;
"RTN","IBY323PR",4,0)
DELENT ; Delete entries in file 364.7 to be included in build
"RTN","IBY323PR",5,0)
 ;
"RTN","IBY323PR",6,0)
 D BMES^XPDUTL("Deleting entries in file 364.7 included in build IB*2.0*323...")
"RTN","IBY323PR",7,0)
 ;
"RTN","IBY323PR",8,0)
 S DIK="^IBA(364.7,",DA=472 D ^DIK
"RTN","IBY323PR",9,0)
 Q
"RTN","IBY323PR",10,0)
 ;
"VER")
8.0^22.0
"^DD",364.5,364.5,0)
FIELD^^3^11
"^DD",364.5,364.5,0,"DDA")
N
"^DD",364.5,364.5,0,"DT")
2960311
"^DD",364.5,364.5,0,"ID",.05)
S %I=Y,Y=$S('$D(^(0)):"",$D(^DIC(+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(1,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.5,364.5,0,"IX","B",364.5,.01)

"^DD",364.5,364.5,0,"NM","IB DATA ELEMENT DEFINITION")

"^DD",364.5,364.5,0,"PT",364.7,.03)

"^DD",364.5,364.5,0,"VRPK")
IB
"^DD",364.5,364.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",364.5,364.5,.01,1,0)
^.1
"^DD",364.5,364.5,.01,1,1,0)
364.5^B
"^DD",364.5,364.5,.01,1,1,1)
S ^IBA(364.5,"B",$E(X,1,30),DA)=""
"^DD",364.5,364.5,.01,1,1,2)
K ^IBA(364.5,"B",$E(X,1,30),DA)
"^DD",364.5,364.5,.01,3)
Answer must be 3-30 characters in length.
"^DD",364.5,364.5,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.01,21,1,0)
The name to be used to uniquely identify this data element.
"^DD",364.5,364.5,.01,"DT")
2951219
"^DD",364.5,364.5,.02,0)
SECURITY LEVEL^RS^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.5,364.5,.02,21,0)
^^2^2^2960215^^^^
"^DD",364.5,364.5,.02,21,1,0)
If this field is set to N (NATIONAL,NO EDIT), this is a secured data
"^DD",364.5,364.5,.02,21,2,0)
element and will not be allowed to be edited or deleted.
"^DD",364.5,364.5,.02,"DT")
2960215
"^DD",364.5,364.5,.03,0)
TYPE OF ELEMENT^RS^F:NON-MULTIPLE FILEMAN FIELD;E:EXTRACTED VIA CODE;C:CONSTANT VALUE;^0;3^Q
"^DD",364.5,364.5,.03,1,0)
^.1
"^DD",364.5,364.5,.03,1,1,0)
^^TRIGGER^364.5^.04
"^DD",364.5,364.5,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X="FC",Y(1)=X S X=Y(0),X=X S Y=X,X=Y(1),X=X S X=X[Y I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="I" X ^DD(364.5,.03,1,1,1.4)
"^DD",364.5,364.5,.03,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.5,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,1,2)
Q
"^DD",364.5,364.5,.03,1,1,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,1,"%D",0)
^^1^1^2960215^
"^DD",364.5,364.5,.03,1,1,"%D",1,0)
If TYPE OF ELEMENT is 'F' or 'C' then ELEMENT CATEGORY must be 'I'. 
"^DD",364.5,364.5,.03,1,1,"CREATE CONDITION")
"FC"[INTERNAL(TYPE OF ELEMENT)
"^DD",364.5,364.5,.03,1,1,"CREATE VALUE")
S X="I"
"^DD",364.5,364.5,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,1,"DT")
2960215
"^DD",364.5,364.5,.03,1,1,"FIELD")
ELEMENT CATEGORY
"^DD",364.5,364.5,.03,1,2,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.03,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="F" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,2,1.4)
"^DD",364.5,364.5,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,2,2)
Q
"^DD",364.5,364.5,.03,1,2,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,2,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,2,"%D",1,0)
This triggers the FILEMAN FIELD REFERENCE field to null if the element type
"^DD",364.5,364.5,.03,1,2,"%D",2,0)
is not FILEMAN field type of element.
"^DD",364.5,364.5,.03,1,2,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="F"
"^DD",364.5,364.5,.03,1,2,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,2,"DT")
2960215
"^DD",364.5,364.5,.03,1,2,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.03,1,3,0)
^^TRIGGER^364.5^.08
"^DD",364.5,364.5,.03,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="C" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,3,1.4)
"^DD",364.5,364.5,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.5,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,3,2)
Q
"^DD",364.5,364.5,.03,1,3,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,3,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,3,"%D",1,0)
This triggers the CONSTANT VALUE field to null if the element type is not
"^DD",364.5,364.5,.03,1,3,"%D",2,0)
CONSTANT type of element.
"^DD",364.5,364.5,.03,1,3,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="C"
"^DD",364.5,364.5,.03,1,3,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,3,"DT")
2960215
"^DD",364.5,364.5,.03,1,3,"FIELD")
CONSTANT VALUE
"^DD",364.5,364.5,.03,1,4,0)
^^TRIGGER^364.5^1
"^DD",364.5,364.5,.03,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="E" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,1)):^(1),1:"") S X=$E(Y(1),1,245),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,4,1.4)
"^DD",364.5,364.5,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),1)):^(1),1:""),DIV=X S DE=0-$L(DIH),DIU=$E(DIH,1,245),Y=$E(DIH,246,999),^(1)=$J("",$S(DE>0:DE,1:0))_DIV_$S(Y?." ":"",1:$J("",245-$L(DIV))_Y),DIH=364.5,DIG=1 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,4,2)
Q
"^DD",364.5,364.5,.03,1,4,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,4,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,4,"%D",1,0)
This triggers the EXTRACT CODE field to null if the element type is not an
"^DD",364.5,364.5,.03,1,4,"%D",2,0)
EXTRACTED VIA CODE type of element.
"^DD",364.5,364.5,.03,1,4,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="E"
"^DD",364.5,364.5,.03,1,4,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,4,"DT")
2960215
"^DD",364.5,364.5,.03,1,4,"FIELD")
EXTRACT CODE
"^DD",364.5,364.5,.03,21,0)
^^3^3^2951207^^
"^DD",364.5,364.5,.03,21,1,0)
The type of data element being defined as needed by one or more forms.  This
"^DD",364.5,364.5,.03,21,2,0)
field determines the type of retrieval needed to get the actual data element's
"^DD",364.5,364.5,.03,21,3,0)
value for a given bill.
"^DD",364.5,364.5,.03,"DT")
2960215
"^DD",364.5,364.5,.04,0)
ELEMENT CATEGORY^RSX^I:INDIVIDUAL ELEMENT;G:GROUP ELEMENT;^0;4^I $P($G(^IBA(364.5,DA,0)),U,3)="F",$G(X)="G" K X
"^DD",364.5,364.5,.04,1,0)
^.1
"^DD",364.5,364.5,.04,1,1,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="G" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.04,1,1,1.4)
"^DD",364.5,364.5,.04,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.04,1,1,2)
Q
"^DD",364.5,364.5,.04,1,1,"CREATE CONDITION")
INTERNAL(ELEMENT CATEGORY)="G"
"^DD",364.5,364.5,.04,1,1,"CREATE VALUE")
""
"^DD",364.5,364.5,.04,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.04,1,1,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.04,3)
This indicates an INDIVIDUAL or GROUP of elements will be returned.  Group is not valid for Fileman type elements.
"^DD",364.5,364.5,.04,5,1,0)
364.5^.03^1
"^DD",364.5,364.5,.04,21,0)
^^3^3^2951205^
"^DD",364.5,364.5,.04,21,1,0)
This defines whether the data element to be extracted is a single piece of data
"^DD",364.5,364.5,.04,21,2,0)
or is a string of related data.  Fileman field references must be designated as
"^DD",364.5,364.5,.04,21,3,0)
individual elements.
"^DD",364.5,364.5,.04,"DT")
2960215
"^DD",364.5,364.5,.05,0)
BASE FILE^P1'^DIC(^0;5^Q
"^DD",364.5,364.5,.05,3)
Enter the Fileman file to be used as a 'base' to extract the data from.
"^DD",364.5,364.5,.05,21,0)
^^2^2^2960311^
"^DD",364.5,364.5,.05,21,1,0)
This is the number of the Fileman file to be used as a 'base' to extract
"^DD",364.5,364.5,.05,21,2,0)
data for this field.
"^DD",364.5,364.5,.05,"DT")
2960311
"^DD",364.5,364.5,.06,0)
FILEMAN FIELD REFERENCE^FX^^0;6^K:$L(X)>65!($L(X)<1) X I $D(X),$P($G(^IBA(364.5,DA,0)),U,4)="G" K X
"^DD",364.5,364.5,.06,1,0)
^.1
"^DD",364.5,364.5,.06,1,1,0)
^^TRIGGER^364.5^.07
"^DD",364.5,364.5,.06,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)="" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,1.4)
"^DD",364.5,364.5,.06,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,2.4)
"^DD",364.5,364.5,.06,1,1,2.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,"CREATE CONDITION")
FILEMAN FIELD REFERENCE=""
"^DD",364.5,364.5,.06,1,1,"CREATE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"DELETE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"FIELD")
#.07
"^DD",364.5,364.5,.06,3)
Must be a valid Fileman reference and ELEMENT CATEGORY must not be GROUP.
"^DD",364.5,364.5,.06,5,1,0)
364.5^.04^1
"^DD",364.5,364.5,.06,5,2,0)
364.5^.03^2
"^DD",364.5,364.5,.06,21,0)
^^6^6^2951221^^^
"^DD",364.5,364.5,.06,21,1,0)
The valid Fileman field reference or simple Fileman navigation to be used
"^DD",364.5,364.5,.06,21,2,0)
to extract using the $$GET^DIQ utility. Note this will not return true
"^DD",364.5,364.5,.06,21,3,0)
multiple entries.  Word-processing type fields are able to be retrieved,
"^DD",364.5,364.5,.06,21,4,0)
however.  No syntax check is made on this field so the user must be careful
"^DD",364.5,364.5,.06,21,5,0)
to type a valid Fileman expression.  This must be designated as an
"^DD",364.5,364.5,.06,21,6,0)
INDIVIDUAL element, not a group element.
"^DD",364.5,364.5,.06,"DT")
2951221
"^DD",364.5,364.5,.07,0)
FILEMAN RETURN FORMAT^S^I:INTERNAL;E:EXTERNAL;^0;7^Q
"^DD",364.5,364.5,.07,5,1,0)
364.5^.06^1
"^DD",364.5,364.5,.07,21,0)
^^5^5^2951205^
"^DD",364.5,364.5,.07,21,1,0)
This is the format for the retrieved data for Fileman-type data elements.  It
"^DD",364.5,364.5,.07,21,2,0)
is recommended to use Internal format whenever possible to keep the data
"^DD",364.5,364.5,.07,21,3,0)
element definitions in this file as generic as possible to avoid duplication.  
"^DD",364.5,364.5,.07,21,4,0)
The format capabilities of the forms generator should be used to interpret and
"^DD",364.5,364.5,.07,21,5,0)
reformat the data element when needed.
"^DD",364.5,364.5,.07,"DT")
2951205
"^DD",364.5,364.5,.08,0)
CONSTANT VALUE^F^^0;8^K:$L(X)>80!($L(X)<1) X
"^DD",364.5,364.5,.08,3)
Answer must be 1-80 characters in length.
"^DD",364.5,364.5,.08,5,1,0)
364.5^.03^3
"^DD",364.5,364.5,.08,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.08,21,1,0)
The specific value that this data element should return for this data element.
"^DD",364.5,364.5,.08,"DT")
2951205
"^DD",364.5,364.5,1,0)
EXTRACT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.5,364.5,1,3)
This is Standard MUMPS code.
"^DD",364.5,364.5,1,5,1,0)
364.5^.03^4
"^DD",364.5,364.5,1,9)
@
"^DD",364.5,364.5,1,21,0)
^^7^7^2951207^^^
"^DD",364.5,364.5,1,21,1,0)
The code to be executed by the forms generator to return the value(s) of the
"^DD",364.5,364.5,1,21,2,0)
data element.  If no ARRAY ROOT field is completed for this data element, the
"^DD",364.5,364.5,1,21,3,0)
code should set the variable IBXDATA or the array IBXDATA(1) through IBXDATA(n)
"^DD",364.5,364.5,1,21,4,0)
where n=the total # of iterations of the data element retrieved.  If the ARRAY 
"^DD",364.5,364.5,1,21,5,0)
ROOT field has been completed for this data element, this code should set the
"^DD",364.5,364.5,1,21,6,0)
variable referenced there.  IBXIEN is assumed to be the internal entry number
"^DD",364.5,364.5,1,21,7,0)
of the  file (referenced by the variable IBXFILE) entry.
"^DD",364.5,364.5,1,"DT")
2951205
"^DD",364.5,364.5,2,0)
ARRAY ROOT^F^^2;E1,50^K:$L(X)>50!($L(X)<1) X
"^DD",364.5,364.5,2,3)
Answer must be a valid array root name.
"^DD",364.5,364.5,2,21,0)
^^3^3^2960117^^
"^DD",364.5,364.5,2,21,1,0)
 The local or global base root where multiple-valued output or word processing
"^DD",364.5,364.5,2,21,2,0)
data is to be stored for this data element.  IBXDATA is the default if there
"^DD",364.5,364.5,2,21,3,0)
is no data in this field.  Example of a global array: ^TMP($J)
"^DD",364.5,364.5,2,"DT")
2960117
"^DD",364.5,364.5,3,0)
DESCRIPTION^364.53^^3;0
"^DD",364.5,364.53,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.5,364.53,0,"DT")
2951205
"^DD",364.5,364.53,0,"NM","DESCRIPTION")

"^DD",364.5,364.53,0,"UP")
364.5
"^DD",364.5,364.53,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",364.5,364.53,.01,3)
Enter a description of the data element being defined.
"^DD",364.5,364.53,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.53,.01,21,1,0)
This is a free text description of the data that this data element represents.
"^DD",364.5,364.53,.01,"DT")
2951205
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)

"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)

"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)

"^DD",364.7,364.7,0,"IX","B",364.7,.01)

"^DD",364.7,364.7,0,"IX","C",364.7,.03)

"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DIC",364.5,364.5,0)
IB DATA ELEMENT DEFINITION^364.5
"^DIC",364.5,364.5,0,"GL")
^IBA(364.5,
"^DIC",364.5,364.5,"%D",0)
^^8^8^2970606^^^^
"^DIC",364.5,364.5,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.5,364.5,"%D",2,0)
 
"^DIC",364.5,364.5,"%D",3,0)
This file contains the definition of all data elements that are needed for
"^DIC",364.5,364.5,"%D",4,0)
various forms throughout the MCCR DHCP system.  It contains the 'blueprint'
"^DIC",364.5,364.5,"%D",5,0)
for how to extract the data for each data element entry.
"^DIC",364.5,364.5,"%D",6,0)
 
"^DIC",364.5,364.5,"%D",7,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.5,364.5,"%D",8,0)
NATIONAL should not be deleted or edited.
"^DIC",364.5,"B","IB DATA ELEMENT DEFINITION",364.5)

"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)

"BLD",5861,6)
^304
**END**
**END**
