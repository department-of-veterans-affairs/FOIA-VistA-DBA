Released IB*2*300 SEQ #297
Extracted from mail message
**KIDS**:IB*2.0*300^

**INSTALL NAME**
IB*2.0*300
"BLD",5553,0)
IB*2.0*300^INTEGRATED BILLING^0^3051214^y
"BLD",5553,1,0)
^^6^6^3051108^
"BLD",5553,1,1,0)
The main purpose of this build is to restructure the way the HL7 messages
"BLD",5553,1,2,0)
are created for IIV.  In addition to encoding and decoding of HL7
"BLD",5553,1,3,0)
delimiters, asterisks will be removed from the data prior to transmission
"BLD",5553,1,4,0)
of the HL7 messages since asterisks are X12 delimiters.  The build also
"BLD",5553,1,5,0)
removes the application dependency of the IIV interface on the IP address
"BLD",5553,1,6,0)
and port number for routing.  Thus, making DBIA #4241 obsolete.
"BLD",5553,4,0)
^9.64PA^365^1
"BLD",5553,4,365,0)
365
"BLD",5553,4,365,2,0)
^9.641^365^1
"BLD",5553,4,365,2,365,0)
IIV RESPONSE  (File-top level)
"BLD",5553,4,365,2,365,1,0)
^9.6411^1.2^2
"BLD",5553,4,365,2,365,1,1.19,0)
PAYER UPDATED POLICY
"BLD",5553,4,365,2,365,1,1.2,0)
POLICY NUMBER
"BLD",5553,4,365,222)
y^y^p^^^^n^^n
"BLD",5553,4,365,224)

"BLD",5553,4,"APDD",365,365)

"BLD",5553,4,"APDD",365,365,1.19)

"BLD",5553,4,"APDD",365,365,1.2)

"BLD",5553,4,"B",365,365)

"BLD",5553,"INID")
^y
"BLD",5553,"INIT")
IBY300PS
"BLD",5553,"KRN",0)
^9.67PA^8989.52^19
"BLD",5553,"KRN",.4,0)
.4
"BLD",5553,"KRN",.401,0)
.401
"BLD",5553,"KRN",.402,0)
.402
"BLD",5553,"KRN",.403,0)
.403
"BLD",5553,"KRN",.5,0)
.5
"BLD",5553,"KRN",.84,0)
.84
"BLD",5553,"KRN",3.6,0)
3.6
"BLD",5553,"KRN",3.8,0)
3.8
"BLD",5553,"KRN",9.2,0)
9.2
"BLD",5553,"KRN",9.8,0)
9.8
"BLD",5553,"KRN",9.8,"NM",0)
^9.68A^24^21
"BLD",5553,"KRN",9.8,"NM",1,0)
IBCNEHLM^^0^B21111301
"BLD",5553,"KRN",9.8,"NM",2,0)
IBCNEHL1^^0^B32619299
"BLD",5553,"KRN",9.8,"NM",3,0)
IBCNEHL2^^0^B48954965
"BLD",5553,"KRN",9.8,"NM",4,0)
IBCNEHL3^^0^B72666983
"BLD",5553,"KRN",9.8,"NM",5,0)
IBCNEHL4^^0^B25894966
"BLD",5553,"KRN",9.8,"NM",6,0)
IBCNEHLQ^^0^B41231894
"BLD",5553,"KRN",9.8,"NM",9,0)
IBCNEHLK^^0^B906841
"BLD",5553,"KRN",9.8,"NM",10,0)
IBCNEHLT^^0^B69606344
"BLD",5553,"KRN",9.8,"NM",11,0)
IBCNEHLD^^0^B4191710
"BLD",5553,"KRN",9.8,"NM",13,0)
IBCNEHLS^^1^
"BLD",5553,"KRN",9.8,"NM",14,0)
IBCNEHLR^^1^
"BLD",5553,"KRN",9.8,"NM",15,0)
IBCNEHLP^^1^
"BLD",5553,"KRN",9.8,"NM",16,0)
IBCNEDE^^0^B21001833
"BLD",5553,"KRN",9.8,"NM",17,0)
IBCNEDEP^^0^B95024002
"BLD",5553,"KRN",9.8,"NM",18,0)
IBCNEDEQ^^0^B27345351
"BLD",5553,"KRN",9.8,"NM",19,0)
IBCNEHLU^^0^B16427486
"BLD",5553,"KRN",9.8,"NM",20,0)
IBCNERP4^^0^B61874953
"BLD",5553,"KRN",9.8,"NM",21,0)
IBCNERP5^^0^B48772624
"BLD",5553,"KRN",9.8,"NM",22,0)
IBCNEHLI^^0^B8071384
"BLD",5553,"KRN",9.8,"NM",23,0)
IBCNERPE^^0^B68650966
"BLD",5553,"KRN",9.8,"NM",24,0)
IBCNEHLO^^0^B523295
"BLD",5553,"KRN",9.8,"NM","B","IBCNEDE",16)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEDEP",17)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEDEQ",18)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHL1",2)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHL2",3)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHL3",4)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHL4",5)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLD",11)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLI",22)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLK",9)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLM",1)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLO",24)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLP",15)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLQ",6)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLR",14)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLS",13)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLT",10)

"BLD",5553,"KRN",9.8,"NM","B","IBCNEHLU",19)

"BLD",5553,"KRN",9.8,"NM","B","IBCNERP4",20)

"BLD",5553,"KRN",9.8,"NM","B","IBCNERP5",21)

"BLD",5553,"KRN",9.8,"NM","B","IBCNERPE",23)

"BLD",5553,"KRN",19,0)
19
"BLD",5553,"KRN",19,"NM",0)
^9.68A^3^3
"BLD",5553,"KRN",19,"NM",1,0)
IBCNE PAYER MAINTENANCE MENU^^3
"BLD",5553,"KRN",19,"NM",2,0)
IBCNE PAYER EDIT^^0^
"BLD",5553,"KRN",19,"NM",3,0)
IBCNE PAYER LINK^^0^
"BLD",5553,"KRN",19,"NM","B","IBCNE PAYER EDIT",2)

"BLD",5553,"KRN",19,"NM","B","IBCNE PAYER LINK",3)

"BLD",5553,"KRN",19,"NM","B","IBCNE PAYER MAINTENANCE MENU",1)

"BLD",5553,"KRN",19.1,0)
19.1
"BLD",5553,"KRN",101,0)
101
"BLD",5553,"KRN",101,"NM",0)
^9.68A^^
"BLD",5553,"KRN",409.61,0)
409.61
"BLD",5553,"KRN",771,0)
771
"BLD",5553,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",5553,"KRN",771,"NM",1,0)
IIV EC^^0
"BLD",5553,"KRN",771,"NM",2,0)
IIV VISTA^^0
"BLD",5553,"KRN",771,"NM","B","IIV EC",1)

"BLD",5553,"KRN",771,"NM","B","IIV VISTA",2)

"BLD",5553,"KRN",870,0)
870
"BLD",5553,"KRN",870,"NM",0)
^9.68A^1^1
"BLD",5553,"KRN",870,"NM",1,0)
IIV SERVER^^1^
"BLD",5553,"KRN",870,"NM","B","IIV SERVER",1)

"BLD",5553,"KRN",8989.51,0)
8989.51
"BLD",5553,"KRN",8989.52,0)
8989.52
"BLD",5553,"KRN",8994,0)
8994
"BLD",5553,"KRN","B",.4,.4)

"BLD",5553,"KRN","B",.401,.401)

"BLD",5553,"KRN","B",.402,.402)

"BLD",5553,"KRN","B",.403,.403)

"BLD",5553,"KRN","B",.5,.5)

"BLD",5553,"KRN","B",.84,.84)

"BLD",5553,"KRN","B",3.6,3.6)

"BLD",5553,"KRN","B",3.8,3.8)

"BLD",5553,"KRN","B",9.2,9.2)

"BLD",5553,"KRN","B",9.8,9.8)

"BLD",5553,"KRN","B",19,19)

"BLD",5553,"KRN","B",19.1,19.1)

"BLD",5553,"KRN","B",101,101)

"BLD",5553,"KRN","B",409.61,409.61)

"BLD",5553,"KRN","B",771,771)

"BLD",5553,"KRN","B",870,870)

"BLD",5553,"KRN","B",8989.51,8989.51)

"BLD",5553,"KRN","B",8989.52,8989.52)

"BLD",5553,"KRN","B",8994,8994)

"BLD",5553,"QUES",0)
^9.62^^
"BLD",5553,"REQB",0)
^9.611^3^3
"BLD",5553,"REQB",1,0)
IB*2.0*184^2
"BLD",5553,"REQB",2,0)
IB*2.0*251^2
"BLD",5553,"REQB",3,0)
IB*2.0*271^2
"BLD",5553,"REQB","B","IB*2.0*184",1)

"BLD",5553,"REQB","B","IB*2.0*251",2)

"BLD",5553,"REQB","B","IB*2.0*271",3)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^y^p^^^^n^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
1
"FIA",365,365,1.19)

"FIA",365,365,1.2)

"INIT")
IBY300PS
"KRN",19,2937714,-1)
0^2
"KRN",19,2937714,0)
IBCNE PAYER EDIT^Payer Edit (Activate/Inactivate)^^R^^IB INSURANCE SUPERVISOR^^^^^^
"KRN",19,2937714,1,0)
^19.06^2^2^3030703^^^
"KRN",19,2937714,1,1,0)
Option to allow users to update the Local Active flag for Payers and 
"KRN",19,2937714,1,2,0)
Payer applications.
"KRN",19,2937714,25)
EN^IBCNEPY
"KRN",19,2937714,"U")
PAYER EDIT (ACTIVATE/INACTIVAT
"KRN",19,2937716,-1)
0^3
"KRN",19,2937716,0)
IBCNE PAYER LINK^Link Insurance Companies to Payers^^R^^IB INSURANCE SUPERVISOR^^^^^^INTEGRATED BILLING
"KRN",19,2937716,1,0)
^19.06^3^3^3030703^^
"KRN",19,2937716,1,1,0)
This option allows the user to see payers added during a date
"KRN",19,2937716,1,2,0)
range entered by the user.  They will then be able to link these
"KRN",19,2937716,1,3,0)
payers to selected insurance companies.
"KRN",19,2937716,25)
EN^IBCNEPM2
"KRN",19,2937716,"U")
LINK INSURANCE COMPANIES TO PA
"KRN",19,2937719,-1)
3^1
"KRN",19,2937719,0)
IBCNE PAYER MAINTENANCE MENU^Payer Maintenance Menu^^M^^IB INSURANCE SUPERVISOR^^^^^^INTEGRATED BILLING
"KRN",19,2937719,1,0)
^^2^2^3030703^
"KRN",19,2937719,1,1,0)
This menu contains options related to maintaining the Payer file 
"KRN",19,2937719,1,2,0)
(#365.12).
"KRN",19,2937719,10,0)
^19.01IP^2^2
"KRN",19,2937719,10,1,0)
2937714^PE
"KRN",19,2937719,10,1,"^")
IBCNE PAYER EDIT
"KRN",19,2937719,10,2,0)
2937716^LI
"KRN",19,2937719,10,2,"^")
IBCNE PAYER LINK
"KRN",19,2937719,99)
60207,49226
"KRN",19,2937719,"U")
PAYER MAINTENANCE MENU
"KRN",771,105,-1)
0^2
"KRN",771,105,0)
IIV VISTA^a^^IBCNE IIV MESSAGE^^^USA
"KRN",771,105,"EC")
^~\&
"KRN",771,105,"FS")
|
"KRN",771,106,-1)
0^1
"KRN",771,106,0)
IIV EC^a^^IBCNE IIV MESSAGE^^^USA
"KRN",771,106,"EC")
^~\&
"KRN",771,106,"FS")
|
"KRN",870,230,-1)
1^1
"KRN",870,230,0)
IIV SERVER
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",13,870)
870;13;1;;HLLL^XPDTA1;;HLLLE^XPDIA1;;;HLLLDEL^XPDIA1(%)
"ORD",13,870,0)
HL LOGICAL LINK
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",179,-1)
1^1
"PKG",179,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",179,20,0)
^9.402P^1^1
"PKG",179,20,1,0)
2^^IBAXDR
"PKG",179,20,1,1)

"PKG",179,20,"B",2,1)

"PKG",179,22,0)
^9.49I^1^1
"PKG",179,22,1,0)
2.0^2940321^2940528
"PKG",179,22,1,"PAH",1,0)
300^3051214
"PKG",179,22,1,"PAH",1,1,0)
^^6^6^3051214
"PKG",179,22,1,"PAH",1,1,1,0)
The main purpose of this build is to restructure the way the HL7 messages
"PKG",179,22,1,"PAH",1,1,2,0)
are created for IIV.  In addition to encoding and decoding of HL7
"PKG",179,22,1,"PAH",1,1,3,0)
delimiters, asterisks will be removed from the data prior to transmission
"PKG",179,22,1,"PAH",1,1,4,0)
of the HL7 messages since asterisks are X12 delimiters.  The build also
"PKG",179,22,1,"PAH",1,1,5,0)
removes the application dependency of the IIV interface on the IP address
"PKG",179,22,1,"PAH",1,1,6,0)
and port number for routing.  Thus, making DBIA #4241 obsolete.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
22
"RTN","IBCNEDE")
0^16^B21001833
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - IIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300**;21-MAR-94
"RTN","IBCNEDE",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the Insurance Identification and Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the IIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the IIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 N $ES,$ET
"RTN","IBCNEDE",25,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",26,0)
 ; Check lock
"RTN","IBCNEDE",27,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",28,0)
 . I '$D(ZTSK) W !!,"The IIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",29,0)
 ; Reset reg ack flag
"RTN","IBCNEDE",30,0)
 S $P(^IBE(350.9,1,51),U,22)=""
"RTN","IBCNEDE",31,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",32,0)
 ;  the existing utility
"RTN","IBCNEDE",33,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",34,0)
 ;
"RTN","IBCNEDE",35,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",36,0)
 ; before the extract is run
"RTN","IBCNEDE",37,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",38,0)
 ;
"RTN","IBCNEDE",39,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",40,0)
 ;
"RTN","IBCNEDE",41,0)
 ; Run All 4 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",42,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",43,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",44,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",45,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",46,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",47,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",48,0)
 D EN^IBCNEDE3 ; Non Verified Extract
"RTN","IBCNEDE",49,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",50,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",51,0)
 D EN^IBCNEDE4 ; No Insurance Extract
"RTN","IBCNEDE",52,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",53,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",54,0)
 ; Send enrollment message
"RTN","IBCNEDE",55,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",56,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",57,0)
 I '$G(QFL) D
"RTN","IBCNEDE",58,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",59,0)
 . D WAIT  Q:'+QFL
"RTN","IBCNEDE",60,0)
 . KILL QFL
"RTN","IBCNEDE",61,0)
 . ;
"RTN","IBCNEDE",62,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",63,0)
 ;
"RTN","IBCNEDE",64,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",65,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",66,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",67,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",68,0)
 ;  eligible to be purged
"RTN","IBCNEDE",69,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",70,0)
 ;
"RTN","IBCNEDE",71,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",72,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",73,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",74,0)
 Q
"RTN","IBCNEDE",75,0)
 ;
"RTN","IBCNEDE",76,0)
TBLCHK() ;
"RTN","IBCNEDE",77,0)
 ; Confirm that at least one IIV payer and that all X12 tables
"RTN","IBCNEDE",78,0)
 ; have been loaded
"RTN","IBCNEDE",79,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",80,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",81,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",82,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",83,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",84,0)
 I PAYOK D
"RTN","IBCNEDE",85,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",86,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",87,0)
 ;
"RTN","IBCNEDE",88,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",89,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",90,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",91,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",92,0)
 F  D  Q:QFL'=""!(CT>360)
"RTN","IBCNEDE",93,0)
 . S QFL=$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",94,0)
 . Q:QFL'=""
"RTN","IBCNEDE",95,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",96,0)
 KILL CT
"RTN","IBCNEDE",97,0)
 Q
"RTN","IBCNEDE",98,0)
 ;
"RTN","IBCNEDE",99,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",100,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",101,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",102,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",103,0)
 N STALEDT
"RTN","IBCNEDE",104,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",105,0)
 Q STALEDT
"RTN","IBCNEDE",106,0)
 ;
"RTN","IBCNEDE",107,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",108,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",109,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",110,0)
 ; defined this appropriately in the IIV site parameters.
"RTN","IBCNEDE",111,0)
 ;
"RTN","IBCNEDE",112,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",113,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",114,0)
 ;
"RTN","IBCNEDE",115,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",116,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",117,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",118,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",119,0)
 ;
"RTN","IBCNEDE",120,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",121,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",122,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",123,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",124,0)
 ;
"RTN","IBCNEDE",125,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",126,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",127,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",128,0)
 ;
"RTN","IBCNEDE",129,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",130,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",131,0)
 ;
"RTN","IBCNEDE",132,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",133,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",134,0)
 S ZTDESC="IIV Daily Statistics E-Mail"
"RTN","IBCNEDE",135,0)
 S ZTIO=""
"RTN","IBCNEDE",136,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",137,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",138,0)
 ;
"RTN","IBCNEDE",139,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",140,0)
 S MSG(1)="TaskManager could not schedule the daily IIV MailMan message"
"RTN","IBCNEDE",141,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",142,0)
 S MSG(3)="This is defined in the IIV Site Parameters option."
"RTN","IBCNEDE",143,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",144,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",145,0)
 D MSG^IBCNEUT5(MGRP,"IIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",146,0)
 ;
"RTN","IBCNEDE",147,0)
MMQX ;
"RTN","IBCNEDE",148,0)
 Q
"RTN","IBCNEDE",149,0)
 ;
"RTN","IBCNEDE",150,0)
ER ; Unlock the IIV Nightly Task and return to log error
"RTN","IBCNEDE",151,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",152,0)
 D ^%ZTER
"RTN","IBCNEDE",153,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",154,0)
 Q
"RTN","IBCNEDE",155,0)
 ;
"RTN","IBCNEDEP")
0^17^B95024002
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;17-JUN-2002
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300**;21-MAR-94
"RTN","IBCNEDEP",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;  This program finds records needing HL7 msg creation
"RTN","IBCNEDEP",6,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",7,0)
 ;
"RTN","IBCNEDEP",8,0)
 ;  Variables
"RTN","IBCNEDEP",9,0)
 ;    RETR = # retries allowed
"RTN","IBCNEDEP",10,0)
 ;    HLMAX = Maximum # of HL7 msgs
"RTN","IBCNEDEP",11,0)
 ;    MGRP = Msg Mailgroup
"RTN","IBCNEDEP",12,0)
 ;    FAIL = # of days before failure
"RTN","IBCNEDEP",13,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",14,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",15,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",16,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",17,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",18,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",19,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",20,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",21,0)
 ;    NRETR = # of retries accomplished
"RTN","IBCNEDEP",22,0)
 ;    IHCNT = Count of successful HL7 msgs
"RTN","IBCNEDEP",23,0)
 ;    QUERY = Type of msg
"RTN","IBCNEDEP",24,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",25,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",26,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",27,0)
 ;    NTRAN = # of transmissions accomplished
"RTN","IBCNEDEP",28,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",29,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",30,0)
 ;
"RTN","IBCNEDEP",31,0)
EN ;  Entry point
"RTN","IBCNEDEP",32,0)
 ;
"RTN","IBCNEDEP",33,0)
 ;  Start processing of data
"RTN","IBCNEDEP",34,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",35,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",36,0)
 S IBCNETOT=0
"RTN","IBCNEDEP",37,0)
 ;
"RTN","IBCNEDEP",38,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",39,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",40,0)
 S RETR=+$P(IBCNEP,U,6),HLMAX=$P(IBCNEP,U,15),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",41,0)
 S:HLMAX="" HLMAX=99999999
"RTN","IBCNEDEP",42,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",43,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",44,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",45,0)
 ; Statuses
"RTN","IBCNEDEP",46,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",47,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",48,0)
 ;   4 = Hold
"RTN","IBCNEDEP",49,0)
 ;   6 = Retry
"RTN","IBCNEDEP",50,0)
 ;
"RTN","IBCNEDEP",51,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",52,0)
 S IEN=""
"RTN","IBCNEDEP",53,0)
 F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",54,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",55,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",56,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",57,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",58,0)
 . ;
"RTN","IBCNEDEP",59,0)
 . S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",60,0)
 . ;
"RTN","IBCNEDEP",61,0)
 . ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",62,0)
 . ;  DON'T clear future transmission date. (Need date to see if this is the first
"RTN","IBCNEDEP",63,0)
 . ;  time that the payer asked us to resubmit this inquiry.)
"RTN","IBCNEDEP",64,0)
 . I FUTDT'>DT D SST^IBCNEUT2(IEN,6) ;D
"RTN","IBCNEDEP",65,0)
 . ;. NEW DA,DIE,DR
"RTN","IBCNEDEP",66,0)
 . ;. S DA=IEN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEDEP",67,0)
 ;
"RTN","IBCNEDEP",68,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",69,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",70,0)
 ;
"RTN","IBCNEDEP",71,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",72,0)
 ;  'Comm Failure'
"RTN","IBCNEDEP",73,0)
 S IEN=""
"RTN","IBCNEDEP",74,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",75,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",76,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",77,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",78,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",79,0)
 . ;
"RTN","IBCNEDEP",80,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB,VERID
"RTN","IBCNEDEP",81,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",82,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",83,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",84,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",85,0)
 . ;
"RTN","IBCNEDEP",86,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",87,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",88,0)
 . ;
"RTN","IBCNEDEP",89,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",90,0)
 . I RETR>0 D  Q
"RTN","IBCNEDEP",91,0)
 .. ;
"RTN","IBCNEDEP",92,0)
 .. ;  Send timeout mail msg
"RTN","IBCNEDEP",93,0)
 .. I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D TMRR^IBCNEDEQ
"RTN","IBCNEDEP",94,0)
 .. D SST^IBCNEUT2(IEN,6)
"RTN","IBCNEDEP",95,0)
 . ;
"RTN","IBCNEDEP",96,0)
 . ; If no retries defined, set to fail
"RTN","IBCNEDEP",97,0)
 . D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",98,0)
 . ;
"RTN","IBCNEDEP",99,0)
 . ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",100,0)
 . ; 'Comm Failure'
"RTN","IBCNEDEP",101,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",102,0)
 . ;
"RTN","IBCNEDEP",103,0)
 . ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",104,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",105,0)
 . ;
"RTN","IBCNEDEP",106,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",107,0)
 . ;
"RTN","IBCNEDEP",108,0)
 . ; Issue comm fail MailMan msg only for ver'ns
"RTN","IBCNEDEP",109,0)
 . I VERID="V" D CERR^IBCNEDEQ
"RTN","IBCNEDEP",110,0)
 ;
"RTN","IBCNEDEP",111,0)
 ; Exit for stop request
"RTN","IBCNEDEP",112,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",113,0)
 ;
"RTN","IBCNEDEP",114,0)
RET ;  If status is 'Retry'
"RTN","IBCNEDEP",115,0)
 S IEN=""
"RTN","IBCNEDEP",116,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",117,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",118,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",119,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",120,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",121,0)
 . ;
"RTN","IBCNEDEP",122,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB,VERID
"RTN","IBCNEDEP",123,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",124,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",125,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",126,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",127,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",128,0)
 . ;
"RTN","IBCNEDEP",129,0)
 . ;  If retries are finished, set to fail
"RTN","IBCNEDEP",130,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",131,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",132,0)
 .. ;
"RTN","IBCNEDEP",133,0)
 .. ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",134,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",135,0)
 .. ;
"RTN","IBCNEDEP",136,0)
 .. ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",137,0)
 .. ; 'Comm Failure'
"RTN","IBCNEDEP",138,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",139,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",140,0)
 .. ;
"RTN","IBCNEDEP",141,0)
 .. I VERID="V" D CERE^IBCNEDEQ
"RTN","IBCNEDEP",142,0)
 . ; If generating retry, set IIV status to comm failure (5) for
"RTN","IBCNEDEP",143,0)
 . ; remaining related responses
"RTN","IBCNEDEP",144,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",145,0)
 ;
"RTN","IBCNEDEP",146,0)
 ; Exit for stop request
"RTN","IBCNEDEP",147,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",148,0)
 ;
"RTN","IBCNEDEP",149,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",150,0)
 ;
"RTN","IBCNEDEP",151,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",152,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",153,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",154,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",155,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",156,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",157,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",158,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",159,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",160,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",161,0)
 ... S VNUM=4
"RTN","IBCNEDEP",162,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",163,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",164,0)
 ... S VNUM=1
"RTN","IBCNEDEP",165,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",166,0)
 ;
"RTN","IBCNEDEP",167,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",168,0)
 ;  or identifications
"RTN","IBCNEDEP",169,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",170,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)!$G(QFL)=1
"RTN","IBCNEDEP",171,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",172,0)
 . D ID
"RTN","IBCNEDEP",173,0)
 ;
"RTN","IBCNEDEP",174,0)
EXIT ;  Finish
"RTN","IBCNEDEP",175,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",176,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",177,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",178,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",179,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",180,0)
 K ZMID,IHCNT,HLMAX,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",181,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA
"RTN","IBCNEDEP",182,0)
 Q
"RTN","IBCNEDEP",183,0)
 ;
"RTN","IBCNEDEP",184,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",185,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",186,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",187,0)
 ;
"RTN","IBCNEDEP",188,0)
 S DFN=""
"RTN","IBCNEDEP",189,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)
"RTN","IBCNEDEP",190,0)
 . ;
"RTN","IBCNEDEP",191,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",192,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",193,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",194,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",195,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",196,0)
 .. ;
"RTN","IBCNEDEP",197,0)
 .. ;  If the total # of "bundled" verifications is
"RTN","IBCNEDEP",198,0)
 .. ;  greater than the maximum # of HL7 allowed, quit
"RTN","IBCNEDEP",199,0)
 .. I (TOT+IHCNT)>HLMAX S QFL=1 Q
"RTN","IBCNEDEP",200,0)
 . ;
"RTN","IBCNEDEP",201,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",202,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)
"RTN","IBCNEDEP",203,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",204,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",205,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",206,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",207,0)
 .. ;
"RTN","IBCNEDEP",208,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",209,0)
 .. ;
"RTN","IBCNEDEP",210,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",211,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",212,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",213,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",214,0)
 .. ;
"RTN","IBCNEDEP",215,0)
 .. ;  If not successful
"RTN","IBCNEDEP",216,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",217,0)
 .. ;  If successful
"RTN","IBCNEDEP",218,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",219,0)
 .. I BNDL D
"RTN","IBCNEDEP",220,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",221,0)
 ;
"RTN","IBCNEDEP",222,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",223,0)
 ;
"RTN","IBCNEDEP",224,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",225,0)
 I $G(ZTSTOP) Q
"RTN","IBCNEDEP",226,0)
 ;
"RTN","IBCNEDEP",227,0)
 ;  If the # of HL7 msgs generate equals the
"RTN","IBCNEDEP",228,0)
 ;  maximum # of HL7 msgs allowed, quit
"RTN","IBCNEDEP",229,0)
 I IHCNT=HLMAX Q
"RTN","IBCNEDEP",230,0)
 ;
"RTN","IBCNEDEP",231,0)
 Q
"RTN","IBCNEDEP",232,0)
 ;
"RTN","IBCNEDEP",233,0)
ID ;  Send Identification Msgs
"RTN","IBCNEDEP",234,0)
 ;
"RTN","IBCNEDEP",235,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",236,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",237,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",238,0)
 ;
"RTN","IBCNEDEP",239,0)
 S DFN=""
"RTN","IBCNEDEP",240,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",241,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",242,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",243,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",244,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",245,0)
 . ;
"RTN","IBCNEDEP",246,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",247,0)
 . ;
"RTN","IBCNEDEP",248,0)
 . ;  Get the total # of identification msgs for a patient
"RTN","IBCNEDEP",249,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",250,0)
 . ;
"RTN","IBCNEDEP",251,0)
 . ;  If the total # of identification msgs for this
"RTN","IBCNEDEP",252,0)
 . ;  patient is greater than the maximum # of allowed
"RTN","IBCNEDEP",253,0)
 . ;  HL7 msgs, stop processing until the next night
"RTN","IBCNEDEP",254,0)
 . I (TOT+IHCNT)>HLMAX S QFL=1 Q
"RTN","IBCNEDEP",255,0)
 . ;
"RTN","IBCNEDEP",256,0)
 . ;  For each identification transaction generate an HL7 msg
"RTN","IBCNEDEP",257,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:IHCNT=HLMAX
"RTN","IBCNEDEP",258,0)
 .. D PROC
"RTN","IBCNEDEP",259,0)
 .. ;
"RTN","IBCNEDEP",260,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",261,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",262,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",263,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",264,0)
 .. ;
"RTN","IBCNEDEP",265,0)
 .. ;  If not successful
"RTN","IBCNEDEP",266,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",267,0)
 .. ;
"RTN","IBCNEDEP",268,0)
 .. ;  If successful
"RTN","IBCNEDEP",269,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",270,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",271,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",272,0)
 ;
"RTN","IBCNEDEP",273,0)
 Q
"RTN","IBCNEDEP",274,0)
 ;
"RTN","IBCNEDEP",275,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",276,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",277,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",278,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",279,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",280,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",281,0)
 S FRDT=$P(TRANSR,U,17)
"RTN","IBCNEDEP",282,0)
 ;
"RTN","IBCNEDEP",283,0)
 ;  Build the HL7 msg
"RTN","IBCNEDEP",284,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)="PRD|NA"
"RTN","IBCNEDEP",285,0)
 D PID^IBCNEHLQ I PID=""!(PID?."*") Q
"RTN","IBCNEDEP",286,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(PID,"*","")
"RTN","IBCNEDEP",287,0)
 D GT1^IBCNEHLQ I GT1'="",GT1'?."*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(GT1,"*","")
"RTN","IBCNEDEP",288,0)
 D IN1^IBCNEHLQ I IN1'="",IN1'?."*" D
"RTN","IBCNEDEP",289,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",290,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",291,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",292,0)
 . S CNT=CNT+1
"RTN","IBCNEDEP",293,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",294,0)
 . S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","")
"RTN","IBCNEDEP",295,0)
 Q
"RTN","IBCNEDEQ")
0^18^B27345351
"RTN","IBCNEDEQ",1,0)
IBCNEDEQ ;DAOU/ALA - Process Transactions continued ;21-AUG-2002
"RTN","IBCNEDEQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300**;21-MAR-94
"RTN","IBCNEDEQ",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDEQ",4,0)
 ;
"RTN","IBCNEDEQ",5,0)
 ;**Program Description**
"RTN","IBCNEDEQ",6,0)
 ;  This program contains some subroutines for processing a transmission
"RTN","IBCNEDEQ",7,0)
 ;
"RTN","IBCNEDEQ",8,0)
HLER ;  HL7 Creation error message
"RTN","IBCNEDEQ",9,0)
 ;
"RTN","IBCNEDEQ",10,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",11,0)
 ;
"RTN","IBCNEDEQ",12,0)
 ;  Parameters
"RTN","IBCNEDEQ",13,0)
 ;    HLRESLT = Error from GENERATE^HLMA call
"RTN","IBCNEDEQ",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",15,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",16,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",17,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",18,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",19,0)
 ;
"RTN","IBCNEDEQ",20,0)
 S HLRESLT="Error - "_$P(HLRESLT,U,2,99)
"RTN","IBCNEDEQ",21,0)
 S MSG(1)=HLRESLT
"RTN","IBCNEDEQ",22,0)
 S MSG(2)="occurred when trying to create the outgoing HL7 message for"
"RTN","IBCNEDEQ",23,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)_"."
"RTN","IBCNEDEQ",24,0)
 S MSG(4)="Please log a NOIS for this problem."
"RTN","IBCNEDEQ",25,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",26,0)
 S XMSUB="IIV HL7 Creation Error"
"RTN","IBCNEDEQ",27,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",28,0)
 K XMSUB,MSG,HLRESLT
"RTN","IBCNEDEQ",29,0)
 Q
"RTN","IBCNEDEQ",30,0)
 ;
"RTN","IBCNEDEQ",31,0)
CERR ;  Communication Error Mail Message - No Retries defined
"RTN","IBCNEDEQ",32,0)
 ;
"RTN","IBCNEDEQ",33,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",34,0)
 ;
"RTN","IBCNEDEQ",35,0)
 ;  Parameters
"RTN","IBCNEDEQ",36,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",37,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",38,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",39,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",40,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",41,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",42,0)
 ;
"RTN","IBCNEDEQ",43,0)
 I 'FMSG G CERRQ
"RTN","IBCNEDEQ",44,0)
 S XMSUB="IIV Communication Error"
"RTN","IBCNEDEQ",45,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",46,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",47,0)
 S MSG(3)="A single attempt was made to electronically confirm the insurance"
"RTN","IBCNEDEQ",48,0)
 S MSG(4)="with this payer."
"RTN","IBCNEDEQ",49,0)
 ;
"RTN","IBCNEDEQ",50,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",51,0)
 ;
"RTN","IBCNEDEQ",52,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",53,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",54,0)
CERRQ Q
"RTN","IBCNEDEQ",55,0)
 ;
"RTN","IBCNEDEQ",56,0)
CERE ;  Communication Error Mail Message - Exceeds Retries
"RTN","IBCNEDEQ",57,0)
 ;
"RTN","IBCNEDEQ",58,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",59,0)
 ;
"RTN","IBCNEDEQ",60,0)
 ;  Parameters
"RTN","IBCNEDEQ",61,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",62,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",63,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",64,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",65,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",66,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",67,0)
 ;
"RTN","IBCNEDEQ",68,0)
 I 'FMSG G CEREQ
"RTN","IBCNEDEQ",69,0)
 S XMSUB="IIV Communication Error"
"RTN","IBCNEDEQ",70,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",71,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",72,0)
 ;
"RTN","IBCNEDEQ",73,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",74,0)
 ;
"RTN","IBCNEDEQ",75,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",76,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",77,0)
CEREQ Q
"RTN","IBCNEDEQ",78,0)
 ;
"RTN","IBCNEDEQ",79,0)
SUB ;  Create HL7 subrecord in TQ file
"RTN","IBCNEDEQ",80,0)
 ;
"RTN","IBCNEDEQ",81,0)
 ;  Called from tag SCC within this routine
"RTN","IBCNEDEQ",82,0)
 ;
"RTN","IBCNEDEQ",83,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",84,0)
 ;    IEN = the transmission IEN
"RTN","IBCNEDEQ",85,0)
 ;    RSIEN = the response IEN
"RTN","IBCNEDEQ",86,0)
 ;    MDTM = the date/time message was created
"RTN","IBCNEDEQ",87,0)
 ;    MSGID = the HL7 message ID
"RTN","IBCNEDEQ",88,0)
 ;
"RTN","IBCNEDEQ",89,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y
"RTN","IBCNEDEQ",90,0)
 S DIC="^IBCN(365.1,"_IEN_",2,",DIE=DIC,X=MDTM,DA(1)=IEN
"RTN","IBCNEDEQ",91,0)
 S DLAYGO=365.16,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",92,0)
 I '$D(^IBCN(365.1,IEN,2,0)) S ^IBCN(365.1,IEN,2,0)="^365.16D^^"
"RTN","IBCNEDEQ",93,0)
 K DD,DO
"RTN","IBCNEDEQ",94,0)
 D FILE^DICN
"RTN","IBCNEDEQ",95,0)
 K DO
"RTN","IBCNEDEQ",96,0)
 S HIEN=+Y
"RTN","IBCNEDEQ",97,0)
 S DR=".02////^S X=MSGID;.03////^S X=RSIEN" D ^DIE
"RTN","IBCNEDEQ",98,0)
 S DA=HIEN D ^DIE
"RTN","IBCNEDEQ",99,0)
 ;
"RTN","IBCNEDEQ",100,0)
 K HIEN,RSIEN,DR,MDTM
"RTN","IBCNEDEQ",101,0)
 Q
"RTN","IBCNEDEQ",102,0)
 ;
"RTN","IBCNEDEQ",103,0)
RESP ;  Create Response Record
"RTN","IBCNEDEQ",104,0)
 ;
"RTN","IBCNEDEQ",105,0)
 ;  Called from IBCNEHL3 tag SCC within this routine
"RTN","IBCNEDEQ",106,0)
 ;
"RTN","IBCNEDEQ",107,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",108,0)
 ;    MSGID = Message Control ID (required)
"RTN","IBCNEDEQ",109,0)
 ;    MDTM = Message date/time created (optional)
"RTN","IBCNEDEQ",110,0)
 ;    DFN = Patient IEN (optional)
"RTN","IBCNEDEQ",111,0)
 ;    PAYR = Payer IEN (optional)
"RTN","IBCNEDEQ",112,0)
 ;    BUFF = Buffer IEN (optional)
"RTN","IBCNEDEQ",113,0)
 ;    IEN = Transmission IEN (optional)
"RTN","IBCNEDEQ",114,0)
 ;    RSTYPE = Response Type (O=Original, U=Unsolicited)
"RTN","IBCNEDEQ",115,0)
 ;
"RTN","IBCNEDEQ",116,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,RARRAY
"RTN","IBCNEDEQ",117,0)
 S DIC="^IBCN(365,",X=MSGID,DLAYGO=365,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",118,0)
 K DD,DO
"RTN","IBCNEDEQ",119,0)
 D FILE^DICN
"RTN","IBCNEDEQ",120,0)
 K DO
"RTN","IBCNEDEQ",121,0)
 S RSIEN=+Y
"RTN","IBCNEDEQ",122,0)
 S RARRAY(365,RSIEN_",",.02)=$G(DFN),RARRAY(365,RSIEN_",",.03)=$G(PAYR)
"RTN","IBCNEDEQ",123,0)
 I $G(IEN)'="" D
"RTN","IBCNEDEQ",124,0)
 . I $P(^IBCN(365.1,IEN,0),U,18)=1 S RARRAY(365,RSIEN_",",.04)=$G(BUFF)
"RTN","IBCNEDEQ",125,0)
 S RARRAY(365,RSIEN_",",.05)=$G(IEN)
"RTN","IBCNEDEQ",126,0)
 S RARRAY(365,RSIEN_",",.06)=2,RARRAY(365,RSIEN_",",.08)=$G(MDTM)
"RTN","IBCNEDEQ",127,0)
 ;
"RTN","IBCNEDEQ",128,0)
 I $G(RSTYPE)="" S RSTYPE="U"
"RTN","IBCNEDEQ",129,0)
 S RARRAY(365,RSIEN_",",.1)=RSTYPE
"RTN","IBCNEDEQ",130,0)
 ;
"RTN","IBCNEDEQ",131,0)
 D FILE^DIE("I","RARRAY","ERR")
"RTN","IBCNEDEQ",132,0)
 I $D(ERR) D
"RTN","IBCNEDEQ",133,0)
 . S ERFLG=1,MCT=0,VEN=0
"RTN","IBCNEDEQ",134,0)
 . F  S VEN=$O(ERR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEDEQ",135,0)
 .. S MCT=MCT+1,MSG(MCT)=ERR("DIERR",VEN,"TEXT",1)
"RTN","IBCNEDEQ",136,0)
 . ;
"RTN","IBCNEDEQ",137,0)
 . S MCT=MCT+1,MSG(MCT)="Please log a NOIS for this problem."
"RTN","IBCNEDEQ",138,0)
 . S XMSUB="Error creating Response"
"RTN","IBCNEDEQ",139,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",140,0)
 . K ERR,VEN,MCT
"RTN","IBCNEDEQ",141,0)
 Q
"RTN","IBCNEDEQ",142,0)
 ;
"RTN","IBCNEDEQ",143,0)
TMRR ;  Communication Timeout message
"RTN","IBCNEDEQ",144,0)
 I 'TMSG Q
"RTN","IBCNEDEQ",145,0)
 S XMSUB="IIV Communication Timeout"
"RTN","IBCNEDEQ",146,0)
 S MSG(1)="No Response has been received within the defined failure days of "_FAIL_" for "
"RTN","IBCNEDEQ",147,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",148,0)
 ;
"RTN","IBCNEDEQ",149,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",150,0)
 ;
"RTN","IBCNEDEQ",151,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",152,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",153,0)
 Q
"RTN","IBCNEDEQ",154,0)
 ;
"RTN","IBCNEDEQ",155,0)
SSN(DFN) ; Retrieve patient's ssn and return last 4 digits
"RTN","IBCNEDEQ",156,0)
 ; Subsequently added Date of Birth to display as well
"RTN","IBCNEDEQ",157,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDEQ",158,0)
 N SSN,DOB
"RTN","IBCNEDEQ",159,0)
 S SSN=$$GETSSN^IBCNEDE5(DFN)
"RTN","IBCNEDEQ",160,0)
 S DOB=$$GETDOB(DFN)
"RTN","IBCNEDEQ",161,0)
 I SSN="",DOB="" Q ""
"RTN","IBCNEDEQ",162,0)
 I SSN="" Q " (DOB: "_DOB_")"
"RTN","IBCNEDEQ",163,0)
 S SSN=" (SSN: xxx-xx-"_$E(SSN,6,9)
"RTN","IBCNEDEQ",164,0)
 I DOB'="" S DOB="  DOB: "_DOB
"RTN","IBCNEDEQ",165,0)
 Q SSN_DOB_")"
"RTN","IBCNEDEQ",166,0)
 ;
"RTN","IBCNEDEQ",167,0)
GETDOB(DFN) ;
"RTN","IBCNEDEQ",168,0)
 Q:'$G(DFN) "Unknown"
"RTN","IBCNEDEQ",169,0)
 N DOB
"RTN","IBCNEDEQ",170,0)
 S DOB=$P($G(^DPT(DFN,0)),U,3)
"RTN","IBCNEDEQ",171,0)
 S DOB=$S('DOB:"Unknown",1:$$FMTE^XLFDT(DOB,"5Z"))
"RTN","IBCNEDEQ",172,0)
 Q DOB
"RTN","IBCNEDEQ",173,0)
 ;
"RTN","IBCNEDEQ",174,0)
SCC ;  If successfully creates an HL7 msg
"RTN","IBCNEDEQ",175,0)
 S MSGID=$P(HLRESLT,U,1),NTRAN=NTRAN+1,MDTM=$$NOW^XLFDT(),IHCNT=IHCNT+1
"RTN","IBCNEDEQ",176,0)
 I NTRAN>1 S NRETR=NRETR+1
"RTN","IBCNEDEQ",177,0)
 D SST^IBCNEUT2(IEN,2)
"RTN","IBCNEDEQ",178,0)
 S DA=IEN,DIE="^IBCN(365.1,",DR=".07////^S X=NTRAN;.08////^S X=NRETR"
"RTN","IBCNEDEQ",179,0)
 D ^DIE
"RTN","IBCNEDEQ",180,0)
 ;
"RTN","IBCNEDEQ",181,0)
 ;  Create Response Record
"RTN","IBCNEDEQ",182,0)
 S RSTYPE="O" D RESP
"RTN","IBCNEDEQ",183,0)
 ;
"RTN","IBCNEDEQ",184,0)
 ;  Create HL7 subrecord
"RTN","IBCNEDEQ",185,0)
 D SUB
"RTN","IBCNEDEQ",186,0)
 ;
"RTN","IBCNEDEQ",187,0)
 ; If a buffer entry exists, set the buffer symbol to a '?'
"RTN","IBCNEDEQ",188,0)
 I BUFF'="" D BUFF^IBCNEUT2(BUFF,10)
"RTN","IBCNEDEQ",189,0)
 Q
"RTN","IBCNEHL1")
0^2^B32619299
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002  ; Compiled December 16, 2004 15:29:01
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300**;21-MAR-94
"RTN","IBCNEHL1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;  
"RTN","IBCNEHL1",11,0)
 ;  This routine is based on IBCNEHLR which was introduced with patch 184, and subsequently
"RTN","IBCNEHL1",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLR is obsolete and deleted with patch 300.
"RTN","IBCNEHL1",13,0)
 ;
"RTN","IBCNEHL1",14,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHL1",15,0)
 ;  DAOU/BHS     10/04/2002  Added logic to update the service date in
"RTN","IBCNEHL1",16,0)
 ;                           the TQ entry so long as the Error Action is
"RTN","IBCNEHL1",17,0)
 ;                           not Please submit original transaction.
"RTN","IBCNEHL1",18,0)
 ;  DAOU/DB      03/11/2004  Added logic to utilize new status flag
"RTN","IBCNEHL1",19,0)
 ;                           transmitted to VistA from EC (IIVSTAT)
"RTN","IBCNEHL1",20,0)
 ;               03/15/2004  Update other retries to comm failure (if
"RTN","IBCNEHL1",21,0)
 ;                           not response rcvd)
"RTN","IBCNEHL1",22,0)
 ;  DAOU/BEE     07/14/2004  Cleaned up routine - Made more readable
"RTN","IBCNEHL1",23,0)
 ;                           Cleaned up variables
"RTN","IBCNEHL1",24,0)
 ;
"RTN","IBCNEHL1",25,0)
 ;  Variables
"RTN","IBCNEHL1",26,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHL1",27,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHL1",28,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",29,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHL1",30,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL1",31,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL1",32,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL1",33,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL1",34,0)
 ;    IIVSTAT = EC generated flag interpreting status of response
"RTN","IBCNEHL1",35,0)
 ;              1 = +
"RTN","IBCNEHL1",36,0)
 ;              6 = -
"RTN","IBCNEHL1",37,0)
 ;              V = #
"RTN","IBCNEHL1",38,0)
 ;    MAP = Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",39,0)
 ;
"RTN","IBCNEHL1",40,0)
EN ; Entry Point
"RTN","IBCNEHL1",41,0)
 N EBDA,ERFLG,ERROR,HCT,IIVSTAT,IRIEN,MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP,ACK
"RTN","IBCNEHL1",42,0)
 S ERFLG=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",43,0)
 ;
"RTN","IBCNEHL1",44,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",45,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",46,0)
 ;
"RTN","IBCNEHL1",47,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",48,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",49,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHL1",50,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",51,0)
 . ;
"RTN","IBCNEHL1",52,0)
 . I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q:ERFLG
"RTN","IBCNEHL1",53,0)
 . ;
"RTN","IBCNEHL1",54,0)
 . ;  Contact Segment
"RTN","IBCNEHL1",55,0)
 . I SEG="CTD" D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",56,0)
 . ;
"RTN","IBCNEHL1",57,0)
 . ;  Patient Segment
"RTN","IBCNEHL1",58,0)
 . I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",59,0)
 . ;
"RTN","IBCNEHL1",60,0)
 . ;  Guarantor Segment
"RTN","IBCNEHL1",61,0)
 . I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID)
"RTN","IBCNEHL1",62,0)
 . ;
"RTN","IBCNEHL1",63,0)
 . ;  Insurance Segment
"RTN","IBCNEHL1",64,0)
 . I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID)
"RTN","IBCNEHL1",65,0)
 . ;
"RTN","IBCNEHL1",66,0)
 . ;  Addt'l Insurance Segment
"RTN","IBCNEHL1",67,0)
 . ;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",68,0)
 . ;
"RTN","IBCNEHL1",69,0)
 . ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",70,0)
 . I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",71,0)
 . ;
"RTN","IBCNEHL1",72,0)
 . ;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",73,0)
 . I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",74,0)
 . ;
"RTN","IBCNEHL1",75,0)
 . ;  Notes Segment
"RTN","IBCNEHL1",76,0)
 . I SEG="NTE" D NTE^IBCNEHL2(EBDA,.IBSEG,RIEN)
"RTN","IBCNEHL1",77,0)
 ;
"RTN","IBCNEHL1",78,0)
 D FIL
"RTN","IBCNEHL1",79,0)
 Q
"RTN","IBCNEHL1",80,0)
 ;
"RTN","IBCNEHL1",81,0)
 ; =================================================================
"RTN","IBCNEHL1",82,0)
FIL ;  Finish processing the response message
"RTN","IBCNEHL1",83,0)
 ;
"RTN","IBCNEHL1",84,0)
 ; Input Variables
"RTN","IBCNEHL1",85,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",86,0)
 ;
"RTN","IBCNEHL1",87,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",88,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",89,0)
 ;
"RTN","IBCNEHL1",90,0)
 N BUFF,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",91,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",92,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",93,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",94,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",95,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",96,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",97,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",98,0)
 ;
"RTN","IBCNEHL1",99,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",100,0)
 ; send a warning email message
"RTN","IBCNEHL1",101,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",102,0)
 I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT
"RTN","IBCNEHL1",103,0)
 ;
"RTN","IBCNEHL1",104,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",105,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",106,0)
 ;
"RTN","IBCNEHL1",107,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",108,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",109,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",110,0)
 ;
"RTN","IBCNEHL1",111,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",112,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",113,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",114,0)
 ;
"RTN","IBCNEHL1",115,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",116,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",117,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",118,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",119,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",120,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",121,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",122,0)
 ;
"RTN","IBCNEHL1",123,0)
 ;  Check for error action
"RTN","IBCNEHL1",124,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",125,0)
 ;
"RTN","IBCNEHL1",126,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",127,0)
 S FILEIT=1
"RTN","IBCNEHL1",128,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",129,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",130,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",131,0)
 . S FILEIT=0
"RTN","IBCNEHL1",132,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",133,0)
 ;
"RTN","IBCNEHL1",134,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",135,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",136,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",137,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",138,0)
 I BUFF'="",(($P(^IBA(355.33,BUFF,0),U,4)'="E")!$$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",139,0)
 ;
"RTN","IBCNEHL1",140,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",141,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",142,0)
 ;
"RTN","IBCNEHL1",143,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",144,0)
 ;  response data
"RTN","IBCNEHL1",145,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",146,0)
 ;
"RTN","IBCNEHL1",147,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",148,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",149,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",150,0)
 ;
"RTN","IBCNEHL1",151,0)
 ;  Set IIV Processed Date to now
"RTN","IBCNEHL1",152,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",153,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",154,0)
FILX ;
"RTN","IBCNEHL1",155,0)
 Q
"RTN","IBCNEHL1",156,0)
 ;
"RTN","IBCNEHL1",157,0)
 ; =================================================================
"RTN","IBCNEHL1",158,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL1",159,0)
 ;
"RTN","IBCNEHL1",160,0)
 ; Input Variables
"RTN","IBCNEHL1",161,0)
 ; ERROR, TRACE
"RTN","IBCNEHL1",162,0)
 ;
"RTN","IBCNEHL1",163,0)
 ; Output Variables
"RTN","IBCNEHL1",164,0)
 ; ERFLG=1
"RTN","IBCNEHL1",165,0)
 ;
"RTN","IBCNEHL1",166,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL1",167,0)
 S VEN=0,MCT=8,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL1",168,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL1",169,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL1",170,0)
 S MSG(3)="*** IRM *** Please log a NOIS because the"
"RTN","IBCNEHL1",171,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL1",172,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL1",173,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL1",174,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL1",175,0)
 S MSG(8)="please review the response with the IIV Response Report by Trace      #."
"RTN","IBCNEHL1",176,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL1",177,0)
 . F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  D
"RTN","IBCNEHL1",178,0)
 . . S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL1",179,0)
 . S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL1",180,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL1",181,0)
 Q
"RTN","IBCNEHL1",182,0)
 ;
"RTN","IBCNEHL1",183,0)
 ; =================================================================
"RTN","IBCNEHL1",184,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL1",185,0)
 ; encountered problem filing date
"RTN","IBCNEHL1",186,0)
 ;
"RTN","IBCNEHL1",187,0)
 ; Input Variables
"RTN","IBCNEHL1",188,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL1",189,0)
 ;
"RTN","IBCNEHL1",190,0)
 ; Output Variables
"RTN","IBCNEHL1",191,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL1",192,0)
 ;
"RTN","IBCNEHL1",193,0)
 N DFN,SYMBOL
"RTN","IBCNEHL1",194,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL1",195,0)
 ;
"RTN","IBCNEHL1",196,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL1",197,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL1",198,0)
 ;
"RTN","IBCNEHL1",199,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",200,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",201,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",202,0)
 ;
"RTN","IBCNEHL1",203,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL1",204,0)
 ; create buffer entry
"RTN","IBCNEHL1",205,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL1",206,0)
 ;
"RTN","IBCNEHL1",207,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL1",208,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL1",209,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL1",210,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL1",211,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL1",212,0)
 ;
"RTN","IBCNEHL1",213,0)
 ;Update buffer symbol
"RTN","IBCNEHL1",214,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL1",215,0)
 ;
"RTN","IBCNEHL1",216,0)
 Q
"RTN","IBCNEHL2")
0^3^B48954965
"RTN","IBCNEHL2",1,0)
IBCNEHL2 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:29:37
"RTN","IBCNEHL2",2,0)
 ;;2.0;INTEGRATED BILLING;**300**;21-MAR-94
"RTN","IBCNEHL2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHL2",4,0)
 ;
"RTN","IBCNEHL2",5,0)
 ;**Program Description**
"RTN","IBCNEHL2",6,0)
 ;  This pgm will process the indiv segments of the
"RTN","IBCNEHL2",7,0)
 ;  incoming IIV response msgs.
"RTN","IBCNEHL2",8,0)
 ;
"RTN","IBCNEHL2",9,0)
 ; * Each of these tags are called by IBCNEHL1.
"RTN","IBCNEHL2",10,0)
 ; 
"RTN","IBCNEHL2",11,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL2",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL2",13,0)
 ;
"RTN","IBCNEHL2",14,0)
 ;  Variables
"RTN","IBCNEHL2",15,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL2",16,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL2",17,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL2",18,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL2",19,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL2",20,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL2",21,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL2",22,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL2",23,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL2",24,0)
 ;
"RTN","IBCNEHL2",25,0)
 Q  ; No direct calls
"RTN","IBCNEHL2",26,0)
 ;
"RTN","IBCNEHL2",27,0)
MSA(ERACT,ERCON,ERROR,ERTXT,IBSEG,MGRP,RIEN,TRACE) ;  Process the MSA seg
"RTN","IBCNEHL2",28,0)
 ;
"RTN","IBCNEHL2",29,0)
 ;  Input:
"RTN","IBCNEHL2",30,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL2",31,0)
 ;
"RTN","IBCNEHL2",32,0)
 ;  Output:
"RTN","IBCNEHL2",33,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL2",34,0)
 ;
"RTN","IBCNEHL2",35,0)
 D MSA^IBCNEHL4
"RTN","IBCNEHL2",36,0)
 Q
"RTN","IBCNEHL2",37,0)
 ;
"RTN","IBCNEHL2",38,0)
CTD(ERROR,IBSEG,RIEN) ; Process the CTD seg
"RTN","IBCNEHL2",39,0)
 ;
"RTN","IBCNEHL2",40,0)
 ; Input:
"RTN","IBCNEHL2",41,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",42,0)
 ;
"RTN","IBCNEHL2",43,0)
 ; Output:
"RTN","IBCNEHL2",44,0)
 ; ERROR
"RTN","IBCNEHL2",45,0)
 ;
"RTN","IBCNEHL2",46,0)
 N CTNAME,CTQUAL,CTNUM,CTQIEN,D1,DA,DATA,DIC,DILN,DISYS,DLAYGO,FFL,FLD,IENS,II,RSUPDT,X,Y
"RTN","IBCNEHL2",47,0)
 ;
"RTN","IBCNEHL2",48,0)
 ;  Parse out data from seg
"RTN","IBCNEHL2",49,0)
 S CTNAME=$G(IBSEG(3)),CTQUAL=$P($G(IBSEG(6)),$E(HLECH),9),CTNUM=$P($G(IBSEG(6)),$E(HLECH))
"RTN","IBCNEHL2",50,0)
 I $TR(CTNAME," ")="" S CTNAME="NOT SPECIFIED"
"RTN","IBCNEHL2",51,0)
 S CTQIEN=$$FIND1^DIC(365.021,"","X",CTQUAL)
"RTN","IBCNEHL2",52,0)
 I CTNAME[$E(HLECH) S CTNAME=$$DECHL7($$FMNAME^HLFNC(CTNAME,HLECH))
"RTN","IBCNEHL2",53,0)
 S CTNAME=$E(CTNAME,1,32)
"RTN","IBCNEHL2",54,0)
 ;
"RTN","IBCNEHL2",55,0)
 ;  Look up contact person
"RTN","IBCNEHL2",56,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",3,",DIC(0)="LZ",DLAYGO=365.03
"RTN","IBCNEHL2",57,0)
 I '$D(^IBCN(365,DA(1),3,0)) S ^IBCN(365,DA(1),3,0)="^365.03^^"
"RTN","IBCNEHL2",58,0)
 S X=CTNAME D ^DIC
"RTN","IBCNEHL2",59,0)
 S DA=+Y,DATA=^IBCN(365,DA(1),3,DA,0),FLD=2,FFL=0
"RTN","IBCNEHL2",60,0)
 ;
"RTN","IBCNEHL2",61,0)
 ;  Check if contact already has this communication qualifier on file
"RTN","IBCNEHL2",62,0)
 F II=2,4,6 I $P(DATA,U,II)=CTQIEN S FLD=II,FFL=1 Q
"RTN","IBCNEHL2",63,0)
 I 'FFL F II=2,4,6 I $P(DATA,U,II)="" S FLD=II Q
"RTN","IBCNEHL2",64,0)
 ;
"RTN","IBCNEHL2",65,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",66,0)
 S RSUPDT(365.03,IENS,".0"_(FLD+1))=CTNUM
"RTN","IBCNEHL2",67,0)
 S RSUPDT(365.03,IENS,".0"_FLD)=CTQIEN
"RTN","IBCNEHL2",68,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",69,0)
CTDX ;
"RTN","IBCNEHL2",70,0)
 Q
"RTN","IBCNEHL2",71,0)
 ;
"RTN","IBCNEHL2",72,0)
PID(ERFLG,ERROR,IBSEG,RIEN) ;  Process the PID seg
"RTN","IBCNEHL2",73,0)
 ;
"RTN","IBCNEHL2",74,0)
 ; Input:
"RTN","IBCNEHL2",75,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",76,0)
 ;
"RTN","IBCNEHL2",77,0)
 ; Output:
"RTN","IBCNEHL2",78,0)
 ; ERFLG,ERROR
"RTN","IBCNEHL2",79,0)
 ;
"RTN","IBCNEHL2",80,0)
 D PID^IBCNEHL4
"RTN","IBCNEHL2",81,0)
 Q
"RTN","IBCNEHL2",82,0)
 ;
"RTN","IBCNEHL2",83,0)
GT1(ERROR,IBSEG,RIEN,SUBID) ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL2",84,0)
 ;
"RTN","IBCNEHL2",85,0)
 ; Input:
"RTN","IBCNEHL2",86,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",87,0)
 ;
"RTN","IBCNEHL2",88,0)
 ; Output:
"RTN","IBCNEHL2",89,0)
 ; ERROR,SUBID
"RTN","IBCNEHL2",90,0)
 ;
"RTN","IBCNEHL2",91,0)
 D GT1^IBCNEHL4
"RTN","IBCNEHL2",92,0)
 Q
"RTN","IBCNEHL2",93,0)
 ;
"RTN","IBCNEHL2",94,0)
IN1(ERROR,IBSEG,RIEN,SUBID) ;  Process the IN1 Insurance seg
"RTN","IBCNEHL2",95,0)
 ;
"RTN","IBCNEHL2",96,0)
 ; Input:
"RTN","IBCNEHL2",97,0)
 ; IBSEG,RIEN,SUBID,ACK
"RTN","IBCNEHL2",98,0)
 ;
"RTN","IBCNEHL2",99,0)
 ; Output:
"RTN","IBCNEHL2",100,0)
 ; ERROR
"RTN","IBCNEHL2",101,0)
 ;
"RTN","IBCNEHL2",102,0)
 N COB,EFFDT,EXPDT,GNAME,GNUMB,MBRID,PAYRID,PYRNM,RSUPDT,SRVDT
"RTN","IBCNEHL2",103,0)
 N PYLEDT,CERDT,RELTN,POLICY
"RTN","IBCNEHL2",104,0)
 ;
"RTN","IBCNEHL2",105,0)
 ; Austin sending responses with an error indicator will populate IBSEG(3) w/ 
"RTN","IBCNEHL2",106,0)
 ;9 zeros in order to send the HL7 required field when the payer does not 
"RTN","IBCNEHL2",107,0)
 ;send a value for this field
"RTN","IBCNEHL2",108,0)
 S MBRID=$$DECHL7($G(IBSEG(3))) I ACK="AE",($TR(MBRID,0)="") S MBRID=""
"RTN","IBCNEHL2",109,0)
 S PAYRID=$G(IBSEG(4)),PYRNM=$G(IBSEG(5))
"RTN","IBCNEHL2",110,0)
 S GNAME=$$DECHL7($G(IBSEG(10))),GNUMB=$$DECHL7($G(IBSEG(9)))
"RTN","IBCNEHL2",111,0)
 S EFFDT=$G(IBSEG(13)),EXPDT=$G(IBSEG(14))
"RTN","IBCNEHL2",112,0)
 S COB=$G(IBSEG(23)),SRVDT=$G(IBSEG(27))
"RTN","IBCNEHL2",113,0)
 S PYLEDT=$G(IBSEG(30)),RELTN=$G(IBSEG(18))
"RTN","IBCNEHL2",114,0)
 S POLICY=$$DECHL7($G(IBSEG(37)))
"RTN","IBCNEHL2",115,0)
 ;
"RTN","IBCNEHL2",116,0)
 ; Relationship codes sent through the HL7 msg are X12 codes
"RTN","IBCNEHL2",117,0)
 ; X12 codes from the interface "01"=spouse, "18"=self "21"=unknown, "34"=other adult
"RTN","IBCNEHL2",118,0)
 S RELTN=$S(RELTN="01":"02",RELTN="18":"01",RELTN="21":"09",1:"")
"RTN","IBCNEHL2",119,0)
 S EFFDT=$$FMDATE^HLFNC(EFFDT),EXPDT=$$FMDATE^HLFNC(EXPDT)
"RTN","IBCNEHL2",120,0)
 S SRVDT=$$FMDATE^HLFNC(SRVDT),PYLEDT=$$FMDATE^HLFNC(PYLEDT)
"RTN","IBCNEHL2",121,0)
 ;
"RTN","IBCNEHL2",122,0)
 S RSUPDT(365,RIEN_",",1.05)=$S($G(SUBID)'="":SUBID,1:MBRID)
"RTN","IBCNEHL2",123,0)
 S RSUPDT(365,RIEN_",",1.07)=GNUMB
"RTN","IBCNEHL2",124,0)
 S RSUPDT(365,RIEN_",",1.06)=GNAME,RSUPDT(365,RIEN_",",1.11)=EFFDT
"RTN","IBCNEHL2",125,0)
 S RSUPDT(365,RIEN_",",1.12)=EXPDT,RSUPDT(365,RIEN_",",1.1)=SRVDT
"RTN","IBCNEHL2",126,0)
 S RSUPDT(365,RIEN_",",1.19)=PYLEDT
"RTN","IBCNEHL2",127,0)
 S RSUPDT(365,RIEN_",",1.13)=COB,RSUPDT(365,RIEN_",",1.18)=MBRID
"RTN","IBCNEHL2",128,0)
 S RSUPDT(365,RIEN_",",1.09)=RELTN,RSUPDT(365,RIEN_",",1.2)=POLICY
"RTN","IBCNEHL2",129,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",130,0)
IN1X ;
"RTN","IBCNEHL2",131,0)
 Q
"RTN","IBCNEHL2",132,0)
 ;
"RTN","IBCNEHL2",133,0)
IN3(ERROR,IBSEG,RIEN) ;  Process IN3 Addt'l Insurance - Cert Seg
"RTN","IBCNEHL2",134,0)
 ;
"RTN","IBCNEHL2",135,0)
 ; Input:
"RTN","IBCNEHL2",136,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",137,0)
 ;
"RTN","IBCNEHL2",138,0)
 ; Output:
"RTN","IBCNEHL2",139,0)
 ; ERROR
"RTN","IBCNEHL2",140,0)
 ;
"RTN","IBCNEHL2",141,0)
 N CRDT,RSUPDT
"RTN","IBCNEHL2",142,0)
 ;
"RTN","IBCNEHL2",143,0)
 S CRDT=$G(IBSEG(7))
"RTN","IBCNEHL2",144,0)
 S CRDT=$$FMDATE^HLFNC(CRDT)
"RTN","IBCNEHL2",145,0)
 S RSUPDT(365,RIEN_",",1.17)=CRDT
"RTN","IBCNEHL2",146,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",147,0)
IN3X ;
"RTN","IBCNEHL2",148,0)
 Q
"RTN","IBCNEHL2",149,0)
 ;
"RTN","IBCNEHL2",150,0)
ZEB(EBDA,ERROR,IBSEG,RIEN) ;  Process the ZEB Elig/Benefit seg
"RTN","IBCNEHL2",151,0)
 ;
"RTN","IBCNEHL2",152,0)
 ; Input:
"RTN","IBCNEHL2",153,0)
 ; IBSEG,IIVSTAT,RIEN
"RTN","IBCNEHL2",154,0)
 ;
"RTN","IBCNEHL2",155,0)
 ; Output:
"RTN","IBCNEHL2",156,0)
 ; EBDA,ERROR
"RTN","IBCNEHL2",157,0)
 ;
"RTN","IBCNEHL2",158,0)
 N D1,DA,DIC,DILN,DISYS,DLAYGO,EBN,IENS,II,MSG,RSUPDT,SUBJECT,X,XMY,Y,MA
"RTN","IBCNEHL2",159,0)
 ;
"RTN","IBCNEHL2",160,0)
 ; Set a default IIV Status value of # ("V")
"RTN","IBCNEHL2",161,0)
 I IIVSTAT="" D
"RTN","IBCNEHL2",162,0)
 .   I IBSEG(7)'="IIV Eligibility Determination" S IIVSTAT="V" Q
"RTN","IBCNEHL2",163,0)
 .   I $F("_1_6_V_","_"_IBSEG(3)_"_") S IIVSTAT=IBSEG(3) Q
"RTN","IBCNEHL2",164,0)
 .   ; Unknown code received from the EC
"RTN","IBCNEHL2",165,0)
 .   S SUBJECT="IIV: Invalid Eligibility Status flag"
"RTN","IBCNEHL2",166,0)
 .   S MSG(1)="An invalid Eligibility Status flag '"_$G(IBSEG(3))_"' was received for site "_$P($$SITE^VASITE,"^",3)_","
"RTN","IBCNEHL2",167,0)
 .   S MSG(2)="trace number "_$G(TRACE,"unknown")_" and message control id "_$G(MSGID,"unknown")_"."
"RTN","IBCNEHL2",168,0)
 .   S MSG(3)="It has been interpreted as an ambiguous response in VistA."
"RTN","IBCNEHL2",169,0)
 .   S XMY("FSCECADMIN@mail.va.gov")=""
"RTN","IBCNEHL2",170,0)
 .   D MSG^IBCNEUT5("",SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEHL2",171,0)
 .   S IIVSTAT="V"
"RTN","IBCNEHL2",172,0)
 ;
"RTN","IBCNEHL2",173,0)
 ; Process the ZEB
"RTN","IBCNEHL2",174,0)
 S EBN=$G(IBSEG(2))
"RTN","IBCNEHL2",175,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",2,",DIC(0)="L",DLAYGO=365.02
"RTN","IBCNEHL2",176,0)
 I '$D(^IBCN(365,DA(1),2,0)) S ^IBCN(365,DA(1),2,0)="^365.02^^"
"RTN","IBCNEHL2",177,0)
 S X=EBN D ^DIC
"RTN","IBCNEHL2",178,0)
 S DA=+Y,EBDA=DA
"RTN","IBCNEHL2",179,0)
 ;
"RTN","IBCNEHL2",180,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",181,0)
 ;
"RTN","IBCNEHL2",182,0)
 F II=2:1:7 S RSUPDT(365.02,IENS,".0"_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",183,0)
 S MA=$G(IBSEG(9)) I $TR(MA," ","")'="" S MA=$J(MA,0,2)
"RTN","IBCNEHL2",184,0)
 S RSUPDT(365.02,IENS,".08")=MA                     ; Monetary amt
"RTN","IBCNEHL2",185,0)
 S RSUPDT(365.02,IENS,".09")=$G(IBSEG(10))          ; Percent
"RTN","IBCNEHL2",186,0)
 S RSUPDT(365.02,IENS,".1")=$G(IBSEG(11))           ; Quantity Qual.
"RTN","IBCNEHL2",187,0)
 F II=11:1:13 S RSUPDT(365.02,IENS,"."_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",188,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL2",189,0)
ZEBX ;
"RTN","IBCNEHL2",190,0)
 Q
"RTN","IBCNEHL2",191,0)
 ;
"RTN","IBCNEHL2",192,0)
NTE(EBDA,IBSEG,RIEN) ; Process NTE Notes seg
"RTN","IBCNEHL2",193,0)
 ;
"RTN","IBCNEHL2",194,0)
 ; Input:
"RTN","IBCNEHL2",195,0)
 ; EBDA,IBSEG,RIEN
"RTN","IBCNEHL2",196,0)
 ;
"RTN","IBCNEHL2",197,0)
 ; Output:
"RTN","IBCNEHL2",198,0)
 ; ERROR
"RTN","IBCNEHL2",199,0)
 ;
"RTN","IBCNEHL2",200,0)
 N DA,IENS,NOTES
"RTN","IBCNEHL2",201,0)
 I $G(EBDA)="" Q
"RTN","IBCNEHL2",202,0)
 S NOTES(1)=$$DECHL7($G(IBSEG(4)))
"RTN","IBCNEHL2",203,0)
 S DA(1)=RIEN,DA=EBDA
"RTN","IBCNEHL2",204,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",205,0)
 D WP^DIE(365.02,IENS,2,"A","NOTES","ERROR")
"RTN","IBCNEHL2",206,0)
NTEX ;
"RTN","IBCNEHL2",207,0)
 Q
"RTN","IBCNEHL2",208,0)
 ;
"RTN","IBCNEHL2",209,0)
DECHL7(STR,HLSEP,ECHARS) ; Decode HL7 escape seqs in data fields
"RTN","IBCNEHL2",210,0)
 ;
"RTN","IBCNEHL2",211,0)
 ; Input:
"RTN","IBCNEHL2",212,0)
 ; STR = Field data possible containing HL7 escape seqs for encoding chars
"RTN","IBCNEHL2",213,0)
 ; HLSEP (opt) = HL7 Field sep. char - assumes HLFS if not passed
"RTN","IBCNEHL2",214,0)
 ; ECHARS (opt) = HL7 encoding chars being used, assumes HL("ECH") if not passed
"RTN","IBCNEHL2",215,0)
 ;
"RTN","IBCNEHL2",216,0)
 ; Output Values
"RTN","IBCNEHL2",217,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHL2",218,0)
 ;
"RTN","IBCNEHL2",219,0)
 N ESC,PAT,REPL,ECODE,PCE
"RTN","IBCNEHL2",220,0)
 ; Initialize opt. params.
"RTN","IBCNEHL2",221,0)
 I $G(HLSEP)="" S HLSEP=HLFS
"RTN","IBCNEHL2",222,0)
 I $G(ECHARS)="" S ECHARS=HL("ECH")
"RTN","IBCNEHL2",223,0)
 ;
"RTN","IBCNEHL2",224,0)
 S ESC=$E(ECHARS,3) ; Escape char.
"RTN","IBCNEHL2",225,0)
 ; Check for escape seqs, quit if not
"RTN","IBCNEHL2",226,0)
 I STR'[ESC G DECHL7X
"RTN","IBCNEHL2",227,0)
 ; Replace ^ w/{sp} (if any) to prevent filing problems
"RTN","IBCNEHL2",228,0)
 S ECHARS=$TR(ECHARS,"^"," ")
"RTN","IBCNEHL2",229,0)
 ;
"RTN","IBCNEHL2",230,0)
 ; Array of rep. chars
"RTN","IBCNEHL2",231,0)
 S REPL("F")=$TR(HLSEP,"^"," ") ;Field Sep
"RTN","IBCNEHL2",232,0)
 S REPL("S")=$E(ECHARS)     ;Comp Sep
"RTN","IBCNEHL2",233,0)
 S REPL("R")=$E(ECHARS,2)   ;Rep. sep
"RTN","IBCNEHL2",234,0)
 ; Temp. replace w/ASC 26, until after other ESC are stripped
"RTN","IBCNEHL2",235,0)
 S REPL("E")=$C(26)  ;Esc. sep
"RTN","IBCNEHL2",236,0)
 S REPL("T")=$E(ECHARS,4)   ;Subcomp. sep
"RTN","IBCNEHL2",237,0)
 ;
"RTN","IBCNEHL2",238,0)
 ; Translate out escape seqs left->right
"RTN","IBCNEHL2",239,0)
 F PCE=1:1:($L(STR,ESC)-1)\2 D
"RTN","IBCNEHL2",240,0)
 . ; Ignore empty esc. or unrec. esc. seq.
"RTN","IBCNEHL2",241,0)
 . S ECODE=$P(STR,ESC,2) I ECODE="" S ECODE="XXXX"
"RTN","IBCNEHL2",242,0)
 . I $D(REPL(ECODE))'>0 S STR=$P(STR,ESC)_$C(26)_$P(STR,ESC,2)_$C(26)_$P(STR,ESC,3,99999) Q
"RTN","IBCNEHL2",243,0)
 . ; Else, replace esc. seq. w/ char.
"RTN","IBCNEHL2",244,0)
 . S STR=$P(STR,ESC)_$G(REPL(ECODE))_$P(STR,ESC,3,99999)
"RTN","IBCNEHL2",245,0)
 ;
"RTN","IBCNEHL2",246,0)
 ;Replace the decoded ESC chars that were actually sent
"RTN","IBCNEHL2",247,0)
 S STR=$TR(STR,$C(26),ESC)
"RTN","IBCNEHL2",248,0)
 ;
"RTN","IBCNEHL2",249,0)
DECHL7X ; Exit w/return values
"RTN","IBCNEHL2",250,0)
 Q STR
"RTN","IBCNEHL3")
0^4^B72666983
"RTN","IBCNEHL3",1,0)
IBCNEHL3 ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002  ; Compiled June 2, 2005 14:20:19
"RTN","IBCNEHL3",2,0)
 ;;2.0;INTEGRATED BILLING;**300**;21-MAR-94
"RTN","IBCNEHL3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHL3",4,0)
 ;
"RTN","IBCNEHL3",5,0)
 ;**Program Description**
"RTN","IBCNEHL3",6,0)
 ;  This is a continuation of IBCNEHL1 which processes an incoming
"RTN","IBCNEHL3",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHL3",8,0)
 ;  
"RTN","IBCNEHL3",9,0)
 ;  This routine is based on IBCNEHLS which was introduced with patch 184, and subsequently
"RTN","IBCNEHL3",10,0)
 ;  patched with patch 271.  IBCNEHLS is obsolete and deleted with patch 300.
"RTN","IBCNEHL3",11,0)
 ;
"RTN","IBCNEHL3",12,0)
 Q   ; no direct calls allow
"RTN","IBCNEHL3",13,0)
 ;
"RTN","IBCNEHL3",14,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHL3",15,0)
 ; Input:  TQN - IEN for IIV Transmission Queue (#365.1), required
"RTN","IBCNEHL3",16,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHL3",17,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHL3",18,0)
 ;         TRCN - Trace # from IIV Response (#365)
"RTN","IBCNEHL3",19,0)
 ;
"RTN","IBCNEHL3",20,0)
 ;         IIVSTAT - IIV status transmitted by EC
"RTN","IBCNEHL3",21,0)
 ;                   Note: MAP(IIVSTAT) = IIV STATUS IEN
"RTN","IBCNEHL3",22,0)
 N MSG,ERDESC,ERIEN,XMY,DA,DIE,DR
"RTN","IBCNEHL3",23,0)
 ;
"RTN","IBCNEHL3",24,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHL3",25,0)
 ;
"RTN","IBCNEHL3",26,0)
 ; Scenarios:
"RTN","IBCNEHL3",27,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHL3",28,0)
 ;  Original Transaction" - set TQ
"RTN","IBCNEHL3",29,0)
 ;  Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHL3",30,0)
 I ERACT="R"!(ERACT="P") D  G ERRORX
"RTN","IBCNEHL3",31,0)
 . I $P($G(^IBCN(365.1,TQN,0)),U,9)="" D  Q    ; first time payer asked us to resubmit
"RTN","IBCNEHL3",32,0)
 . . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHL3",33,0)
 . . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHL3",34,0)
 . . ;
"RTN","IBCNEHL3",35,0)
 . ; payer asked us to resubmit for the 2nd time for this inquiry
"RTN","IBCNEHL3",36,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",37,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",38,0)
 . ; clear future transmission date so it won't display in the buffer
"RTN","IBCNEHL3",39,0)
 . S DA=TQN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEHL3",40,0)
 ;
"RTN","IBCNEHL3",41,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",42,0)
 ;  Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHL3",43,0)
 I ERACT="W" D  G ERRORX
"RTN","IBCNEHL3",44,0)
 . ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHL3",45,0)
 . D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHL3",46,0)
 ;
"RTN","IBCNEHL3",47,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",48,0)
 ;  Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHL3",49,0)
 I ERACT="X" D  G ERRORX
"RTN","IBCNEHL3",50,0)
 . ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHL3",51,0)
 . D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHL3",52,0)
 ;
"RTN","IBCNEHL3",53,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHL3",54,0)
 ;  "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHL3",55,0)
 ;  - set TQ Status to "Response Received"
"RTN","IBCNEHL3",56,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHL3",57,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",58,0)
 I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D  G ERRORX
"RTN","IBCNEHL3",59,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",60,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",61,0)
 ;
"RTN","IBCNEHL3",62,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHL3",63,0)
 ; *** Currently processed in IBCNEHL1 ***
"RTN","IBCNEHL3",64,0)
 ;
"RTN","IBCNEHL3",65,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHL3",66,0)
 Q
"RTN","IBCNEHL3",67,0)
 ;
"RTN","IBCNEHL3",68,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ;  Update Transmission Queue (#365.1)
"RTN","IBCNEHL3",69,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHL3",70,0)
 ; * If unsolicited error or negative Verification response do not
"RTN","IBCNEHL3",71,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHL3",72,0)
 ; Input Variables
"RTN","IBCNEHL3",73,0)
 ; ERACT,ERCON,IIVSTAT,TDAYS,TQN,TSTS
"RTN","IBCNEHL3",74,0)
 ;
"RTN","IBCNEHL3",75,0)
 ; Output Variables
"RTN","IBCNEHL3",76,0)
 ; IIVSTAT (updated)
"RTN","IBCNEHL3",77,0)
 ;
"RTN","IBCNEHL3",78,0)
 ; Init optional param
"RTN","IBCNEHL3",79,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHL3",80,0)
 ;
"RTN","IBCNEHL3",81,0)
 ; Init vars
"RTN","IBCNEHL3",82,0)
 N D,D0,DA,DFN,DI,DIC,DIE,DQ,DR,FTDT,IBDATA,IBIEN,IBQFL,IBSTS,IBSYM
"RTN","IBCNEHL3",83,0)
 N INSIEN,RSTYPE,SYMBOL,TQDATA,X
"RTN","IBCNEHL3",84,0)
 ;
"RTN","IBCNEHL3",85,0)
 ; If no ZEB segment received, set IIVSTAT to "V"
"RTN","IBCNEHL3",86,0)
 I $TR(IIVSTAT," ")="" S IIVSTAT="V"
"RTN","IBCNEHL3",87,0)
 ;
"RTN","IBCNEHL3",88,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL3",89,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHL3",90,0)
 ;
"RTN","IBCNEHL3",91,0)
 ; Ins Buffer IEN
"RTN","IBCNEHL3",92,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHL3",93,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL3",94,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHL3",95,0)
 ;
"RTN","IBCNEHL3",96,0)
 ; If unsolicited error or negative Identification response DON'T
"RTN","IBCNEHL3",97,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHL3",98,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHL3",99,0)
 ;
"RTN","IBCNEHL3",100,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHL3",101,0)
 ;
"RTN","IBCNEHL3",102,0)
 ; Ins Buffer processing
"RTN","IBCNEHL3",103,0)
 I IBIEN'="" D
"RTN","IBCNEHL3",104,0)
 . ; Ins Buf data
"RTN","IBCNEHL3",105,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHL3",106,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHL3",107,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHL3",108,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHL3",109,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHL3",110,0)
 . ;  Resp Rec'd (3) and DON'T update the Ins Buffer symbol
"RTN","IBCNEHL3",111,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHL3",112,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHL3",113,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHL3",114,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error
"RTN","IBCNEHL3",115,0)
 . ; Action Codes ('N','Y','S') & Action Codes ('P','R', if 2nd time payer sent that code)
"RTN","IBCNEHL3",116,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C")!(ERACT="P")!(ERACT="R")) D  Q
"RTN","IBCNEHL3",117,0)
 .. S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL3",118,0)
 .. D BUFF^IBCNEUT2(IBIEN,SYMBOL) ; Set buffer symbol to EC value
"RTN","IBCNEHL3",119,0)
 .. D IIVPROC(IBIEN)   ; Set IIV process date & IIV status
"RTN","IBCNEHL3",120,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHL3",121,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,22) Q
"RTN","IBCNEHL3",122,0)
 ;
"RTN","IBCNEHL3",123,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHL3",124,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHL3",125,0)
 . ; Determine Patient DFN
"RTN","IBCNEHL3",126,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHL3",127,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHL3",128,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHL3",129,0)
 . ; If ERACT="C" symbol is passed by EC
"RTN","IBCNEHL3",130,0)
 . I ERACT="C" S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",131,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHL3",132,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S") S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",133,0)
 . ; An unknown error action - generate a '#'
"RTN","IBCNEHL3",134,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=22 D BUF Q
"RTN","IBCNEHL3",135,0)
 ;
"RTN","IBCNEHL3",136,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHL3",137,0)
 ;
"RTN","IBCNEHL3",138,0)
 ; Update TQ record - Status
"RTN","IBCNEHL3",139,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHL3",140,0)
 ;
"RTN","IBCNEHL3",141,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHL3",142,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHL3",143,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHL3",144,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09///^S X=FTDT"
"RTN","IBCNEHL3",145,0)
 . D ^DIE
"RTN","IBCNEHL3",146,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHL3",147,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08///0"
"RTN","IBCNEHL3",148,0)
 . D ^DIE
"RTN","IBCNEHL3",149,0)
 ;
"RTN","IBCNEHL3",150,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHL3",151,0)
 Q
"RTN","IBCNEHL3",152,0)
 ;
"RTN","IBCNEHL3",153,0)
PCK ; Payer Check
"RTN","IBCNEHL3",154,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHL3",155,0)
 ;
"RTN","IBCNEHL3",156,0)
 ; Input Variables
"RTN","IBCNEHL3",157,0)
 ; MSGID
"RTN","IBCNEHL3",158,0)
 ;
"RTN","IBCNEHL3",159,0)
 ; Output Variables
"RTN","IBCNEHL3",160,0)
 ; RIEN,ERFLG
"RTN","IBCNEHL3",161,0)
 ;
"RTN","IBCNEHL3",162,0)
 N BUFF,DA,DFN,DIE,DR,IEN,IERN,IN1DATA,MDTM,QFL,PAYR,PIEN,PP
"RTN","IBCNEHL3",163,0)
 N PRDATA,PRIEN,RSIEN,X
"RTN","IBCNEHL3",164,0)
 N NOPAYER,TQIEN
"RTN","IBCNEHL3",165,0)
 ;
"RTN","IBCNEHL3",166,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHL3",167,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHL3",168,0)
 ;
"RTN","IBCNEHL3",169,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHL3",170,0)
 S NOPAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER"),TQIEN=$O(^IBCN(365.1,"C",MSGID,""))
"RTN","IBCNEHL3",171,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHL3",172,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHL3",173,0)
 . ;
"RTN","IBCNEHL3",174,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHL3",175,0)
 . ;  Get payer IEN from TQ as original response shell will change for
"RTN","IBCNEHL3",176,0)
 . ;  ~NO PAYER if a payer response is received
"RTN","IBCNEHL3",177,0)
 . S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",178,0)
 . I IN1DATA="",PRIEN'="",TQIEN'="" D
"RTN","IBCNEHL3",179,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365.1,TQIEN,0),U,3)
"RTN","IBCNEHL3",180,0)
 . ;
"RTN","IBCNEHL3",181,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHL3",182,0)
 . ;
"RTN","IBCNEHL3",183,0)
 . ; If message id/payer found & Response (#365) status is NOT
"RTN","IBCNEHL3",184,0)
 . ; 'Response Received' update the existing response entry (set RIEN)
"RTN","IBCNEHL3",185,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHL3",186,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",187,0)
 ..;
"RTN","IBCNEHL3",188,0)
 ..; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHL3",189,0)
 . ; 'Response Received', RIEN is still null so that this tag knows
"RTN","IBCNEHL3",190,0)
 . ; to create a new unsolicited response entry
"RTN","IBCNEHL3",191,0)
 . ; 
"RTN","IBCNEHL3",192,0)
 . ; If payer response received to ~NO PAYER, update IIV Response file
"RTN","IBCNEHL3",193,0)
 . ; w/ responding payer
"RTN","IBCNEHL3",194,0)
 . I RIEN="" S PRDATA=$G(^IBCN(365,PRIEN,0)) I $P(PRDATA,U,3)=NOPAYER,$P(PRDATA,U,6)'=3,$P(PRDATA,U,10)="O" D  Q
"RTN","IBCNEHL3",195,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",196,0)
 .. S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",197,0)
 ;
"RTN","IBCNEHL3",198,0)
 ;  If message id/payer not found or unsolicited response, create new response entry
"RTN","IBCNEHL3",199,0)
 I RIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",200,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHL3",201,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHL3",202,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHL3",203,0)
 . ;
"RTN","IBCNEHL3",204,0)
 . I PIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",205,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",206,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S PIEN="",QFL=1
"RTN","IBCNEHL3",207,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHL3",208,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHL3",209,0)
 . S RIEN=RSIEN
"RTN","IBCNEHL3",210,0)
 ;
"RTN","IBCNEHL3",211,0)
 ; If no payer in response file, set it
"RTN","IBCNEHL3",212,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,PIEN,0)),U,3)="" D
"RTN","IBCNEHL3",213,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",214,0)
 Q
"RTN","IBCNEHL3",215,0)
 ;
"RTN","IBCNEHL3",216,0)
BUF ; Create Buffer Record if Doesn't Exist
"RTN","IBCNEHL3",217,0)
 ;
"RTN","IBCNEHL3",218,0)
 ; Input Variables
"RTN","IBCNEHL3",219,0)
 ; RIEN,RSTYPE,TQN
"RTN","IBCNEHL3",220,0)
 ;
"RTN","IBCNEHL3",221,0)
 ; Output Variables
"RTN","IBCNEHL3",222,0)
 ; ERROR,SYMBOL is killed,TQIEN and IRIEN may be reset
"RTN","IBCNEHL3",223,0)
 ;
"RTN","IBCNEHL3",224,0)
 N BUFF,IBFDA,UP
"RTN","IBCNEHL3",225,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHL3",226,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHL3",227,0)
 S BUFF=+IBFDA
"RTN","IBCNEHL3",228,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHL3",229,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHL3",230,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",231,0)
 K SYMBOL
"RTN","IBCNEHL3",232,0)
 Q
"RTN","IBCNEHL3",233,0)
 ;
"RTN","IBCNEHL3",234,0)
IIVPROC(BUFF) ; Set IIV Processed Date to current dt/tm & IIV stat (aka SYMBOL)
"RTN","IBCNEHL3",235,0)
 ; Input Variables
"RTN","IBCNEHL3",236,0)
 ; BUFF
"RTN","IBCNEHL3",237,0)
 ;
"RTN","IBCNEHL3",238,0)
 ; Output Variables
"RTN","IBCNEHL3",239,0)
 ; SYMBOL
"RTN","IBCNEHL3",240,0)
 ;
"RTN","IBCNEHL3",241,0)
 N IDUZ,UP
"RTN","IBCNEHL3",242,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL3",243,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHL3",244,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEHL3",245,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",246,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHL3",247,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHL3",248,0)
 Q
"RTN","IBCNEHL3",249,0)
 ;
"RTN","IBCNEHL3",250,0)
PFN(IN1DATA) ;  Find Payer from HL7 msg
"RTN","IBCNEHL3",251,0)
 ;
"RTN","IBCNEHL3",252,0)
 ; Input Variables
"RTN","IBCNEHL3",253,0)
 ; IN1DATA, TRACE
"RTN","IBCNEHL3",254,0)
 ;
"RTN","IBCNEHL3",255,0)
 ; Output Variables
"RTN","IBCNEHL3",256,0)
 ; ERFLG,ERROR,PIEN
"RTN","IBCNEHL3",257,0)
 ;
"RTN","IBCNEHL3",258,0)
 N IERN,PAYRID
"RTN","IBCNEHL3",259,0)
 S PAYRID=$$CLNSTR^IBCNEHLU($P($P(IN1DATA,HLFS,4),$E(HL("ECH"))),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHL3",260,0)
 S PIEN=+$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHL3",261,0)
 I PIEN=0 D  Q
"RTN","IBCNEHL3",262,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL3",263,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHL3",264,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHL3",265,0)
 Q
"RTN","IBCNEHL3",266,0)
 ;
"RTN","IBCNEHL3",267,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHL3",268,0)
 ;
"RTN","IBCNEHL3",269,0)
 ; Input Variables
"RTN","IBCNEHL3",270,0)
 ; HCT
"RTN","IBCNEHL3",271,0)
 ;
"RTN","IBCNEHL3",272,0)
 ; Returns value of SEGMT
"RTN","IBCNEHL3",273,0)
 ;
"RTN","IBCNEHL3",274,0)
 N IPCT,SEGMT
"RTN","IBCNEHL3",275,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHL3",276,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHL3",277,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHL3",278,0)
 Q SEGMT
"RTN","IBCNEHL4")
0^5^B25894966
"RTN","IBCNEHL4",1,0)
IBCNEHL4 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:35:46
"RTN","IBCNEHL4",2,0)
 ;;2.0;INTEGRATED BILLING;**300**;21-MAR-94
"RTN","IBCNEHL4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHL4",4,0)
 ;
"RTN","IBCNEHL4",5,0)
 ;**Program Description**
"RTN","IBCNEHL4",6,0)
 ;  This pgm will process the non-repeating segments of the
"RTN","IBCNEHL4",7,0)
 ;  incoming IIV response msgs.
"RTN","IBCNEHL4",8,0)
 ;  It was separated out from IBCNEHL2 to conserve space.
"RTN","IBCNEHL4",9,0)
 ;  
"RTN","IBCNEHL4",10,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL4",11,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL4",12,0)
 ;
"RTN","IBCNEHL4",13,0)
 ; * Each of these tags are called by IBCNEHL2.
"RTN","IBCNEHL4",14,0)
 ;
"RTN","IBCNEHL4",15,0)
 ;  Variables
"RTN","IBCNEHL4",16,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL4",17,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL4",18,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL4",19,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL4",20,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL4",21,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL4",22,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL4",23,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL4",24,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL4",25,0)
 ;
"RTN","IBCNEHL4",26,0)
 Q  ; No direct calls
"RTN","IBCNEHL4",27,0)
 ;
"RTN","IBCNEHL4",28,0)
MSA ;  Process the MSA seg
"RTN","IBCNEHL4",29,0)
 ;
"RTN","IBCNEHL4",30,0)
 ;  Input:
"RTN","IBCNEHL4",31,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL4",32,0)
 ;
"RTN","IBCNEHL4",33,0)
 ;  Output:
"RTN","IBCNEHL4",34,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL4",35,0)
 ;
"RTN","IBCNEHL4",36,0)
 N MSGID,RSUPDT,VRFDT
"RTN","IBCNEHL4",37,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(4))
"RTN","IBCNEHL4",38,0)
 S ERTXT=$$DECHL7^IBCNEHL2($P($G(IBSEG(7)),$E(HLECH),2)),ERACT=$G(IBSEG(6)),ERCON=$P($G(IBSEG(7)),$E(HLECH),1)
"RTN","IBCNEHL4",39,0)
 ;
"RTN","IBCNEHL4",40,0)
 ; If no Control Id, send Mailman error msg
"RTN","IBCNEHL4",41,0)
 I MSGID="" D ERRMSA(TRACE,MGRP) S ERFLG=1 G MSAX
"RTN","IBCNEHL4",42,0)
 ;
"RTN","IBCNEHL4",43,0)
 ; Check for msg id/payer combination and get response IEN
"RTN","IBCNEHL4",44,0)
 D PCK^IBCNEHL3
"RTN","IBCNEHL4",45,0)
 ;
"RTN","IBCNEHL4",46,0)
 ; If no record IEN, quit
"RTN","IBCNEHL4",47,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHL4",48,0)
 ;
"RTN","IBCNEHL4",49,0)
 ; Update record w/info
"RTN","IBCNEHL4",50,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHL4",51,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHL4",52,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHL4",53,0)
 ;
"RTN","IBCNEHL4",54,0)
 ; Update w/internal values
"RTN","IBCNEHL4",55,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",56,0)
 ;
"RTN","IBCNEHL4",57,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHL4",58,0)
 ;
"RTN","IBCNEHL4",59,0)
 ; Update w/external values
"RTN","IBCNEHL4",60,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL4",61,0)
MSAX ;
"RTN","IBCNEHL4",62,0)
 Q
"RTN","IBCNEHL4",63,0)
 ;
"RTN","IBCNEHL4",64,0)
ERRMSA(TRACE,MGRP) ; Msg Control Id is blank -  Send Mailman error msg
"RTN","IBCNEHL4",65,0)
 ;
"RTN","IBCNEHL4",66,0)
 N HCT,ICN,MSG,MSGCT,NAME,XMSUB
"RTN","IBCNEHL4",67,0)
 ;
"RTN","IBCNEHL4",68,0)
 ;1st find the PID seg to extract ICN and patient name
"RTN","IBCNEHL4",69,0)
 D GTICNM^IBCNEHLU(.ICN,.NAME)
"RTN","IBCNEHL4",70,0)
 ;
"RTN","IBCNEHL4",71,0)
 ;Send the Mailman error msg
"RTN","IBCNEHL4",72,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHL4",73,0)
 S MSG(1)="A response was received w/a blank Message Control Id"
"RTN","IBCNEHL4",74,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHL4",75,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHL4",76,0)
 I TRACE="" D
"RTN","IBCNEHL4",77,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHL4",78,0)
 S MSG(MSGCT)="This response cannot be processed.  Please log a NOIS."
"RTN","IBCNEHL4",79,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHL4",80,0)
 Q
"RTN","IBCNEHL4",81,0)
 ;
"RTN","IBCNEHL4",82,0)
PID ;  Process the PID seg
"RTN","IBCNEHL4",83,0)
 N DFN,DOB,DOD,ICN,LFAC,LUPDT,NAME,RSUPDT,SEX,SSN,XDFN,IDLIST
"RTN","IBCNEHL4",84,0)
 N SUBCNT,SUBC,SUBCID,SUBCDATA,IERN
"RTN","IBCNEHL4",85,0)
 ;
"RTN","IBCNEHL4",86,0)
 S ERFLG=0
"RTN","IBCNEHL4",87,0)
 S DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHL4",88,0)
 S NAME=$G(IBSEG(6))
"RTN","IBCNEHL4",89,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHL4",90,0)
 ;
"RTN","IBCNEHL4",91,0)
 ; Parse Repeating ID field to fill in other identifiers
"RTN","IBCNEHL4",92,0)
 S (ICN,SSN,DFN)=""
"RTN","IBCNEHL4",93,0)
 S IDLIST=$G(IBSEG(4))
"RTN","IBCNEHL4",94,0)
 F SUBCNT=1:1:$L(IDLIST,$E(HLECH,2,2)) D
"RTN","IBCNEHL4",95,0)
 . S SUBC=$P(IDLIST,$E(HLECH,2,2),SUBCNT)
"RTN","IBCNEHL4",96,0)
 . S SUBCID=$P(SUBC,$E(HLECH),5)    ; Identifier Type Code
"RTN","IBCNEHL4",97,0)
 . S SUBCDATA=$P(SUBC,$E(HLECH),1) ; Data Value
"RTN","IBCNEHL4",98,0)
 . I SUBCID="PI" S DFN=SUBCDATA
"RTN","IBCNEHL4",99,0)
 . I SUBCID="SS" S SSN=SUBCDATA
"RTN","IBCNEHL4",100,0)
 . I SUBCID="NI" S ICN=SUBCDATA
"RTN","IBCNEHL4",101,0)
 ;
"RTN","IBCNEHL4",102,0)
 ;  Convert data from HL7 format to VistA format
"RTN","IBCNEHL4",103,0)
 S NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",104,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHL4",105,0)
 ;
"RTN","IBCNEHL4",106,0)
 ; Use ICN to find the patients DFN at this site
"RTN","IBCNEHL4",107,0)
 I ICN'="" S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",108,0)
 I +$G(XDFN)'>0,+$G(ICN)>0 D  Q
"RTN","IBCNEHL4",109,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL4",110,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Unable to determine the patient's DFN value for this site."
"RTN","IBCNEHL4",111,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" The ICN for the patient in this response is ICN: "_ICN
"RTN","IBCNEHL4",112,0)
 . S ERROR("DIERR",IERN,"TEXT",3)=" eIIV was unable to file the response information."
"RTN","IBCNEHL4",113,0)
 ;
"RTN","IBCNEHL4",114,0)
 I +ICN>0 S DFN=XDFN
"RTN","IBCNEHL4",115,0)
 ;
"RTN","IBCNEHL4",116,0)
 ;  Perform date of death check
"RTN","IBCNEHL4",117,0)
 I DOD'="" D DODCK^IBCNEHLU(DFN,DOD,MGRP,NAME,RIEN,SSN)
"RTN","IBCNEHL4",118,0)
 ;
"RTN","IBCNEHL4",119,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,RIEN_",",.02)=DFN
"RTN","IBCNEHL4",120,0)
 S RSUPDT(365,RIEN_",",1.02)=DOB,RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHL4",121,0)
 S RSUPDT(365,RIEN_",",1.03)=SSN,RSUPDT(365,RIEN_",",1.16)=DOD
"RTN","IBCNEHL4",122,0)
 S RSUPDT(365,RIEN_",",1.01)=NAME,RSUPDT(365,RIEN_",",1.08)="v"
"RTN","IBCNEHL4",123,0)
 S RSUPDT(365,RIEN_",",1.09)="01"
"RTN","IBCNEHL4",124,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",125,0)
PIDX ;
"RTN","IBCNEHL4",126,0)
 Q
"RTN","IBCNEHL4",127,0)
 ;
"RTN","IBCNEHL4",128,0)
GT1 ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL4",129,0)
 ;
"RTN","IBCNEHL4",130,0)
 ; Input:
"RTN","IBCNEHL4",131,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL4",132,0)
 ;
"RTN","IBCNEHL4",133,0)
 ; Output:
"RTN","IBCNEHL4",134,0)
 ; ERROR,SUBID
"RTN","IBCNEHL4",135,0)
 ;
"RTN","IBCNEHL4",136,0)
 N DOB,NAME,RSUPDT,SEX,SSN,SUBIDC
"RTN","IBCNEHL4",137,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHL4",138,0)
 S SSN=$G(IBSEG(13))
"RTN","IBCNEHL4",139,0)
 ; 
"RTN","IBCNEHL4",140,0)
 S SUBIDC=$G(IBSEG(3))  ; Raw field with sub-comp.
"RTN","IBCNEHL4",141,0)
 S SUBID=$P(SUBIDC,$E(HLECH),1)
"RTN","IBCNEHL4",142,0)
 S SUBID=$$DECHL7^IBCNEHL2(SUBID)
"RTN","IBCNEHL4",143,0)
 ;
"RTN","IBCNEHL4",144,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",145,0)
 ;
"RTN","IBCNEHL4",146,0)
 S RSUPDT(365,RIEN_",",1.01)=NAME,RSUPDT(365,RIEN_",",1.08)=""
"RTN","IBCNEHL4",147,0)
 S RSUPDT(365,RIEN_",",1.02)=DOB,RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHL4",148,0)
 S RSUPDT(365,RIEN_",",1.03)=SSN
"RTN","IBCNEHL4",149,0)
 S RSUPDT(365,RIEN_",",1.18)=SUBID
"RTN","IBCNEHL4",150,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",151,0)
GT1X ;
"RTN","IBCNEHL4",152,0)
 Q
"RTN","IBCNEHLD")
0^11^B4191710
"RTN","IBCNEHLD",1,0)
IBCNEHLD ;DAOU/ALA - IIV Deactivate MFN Message ;02-AUG-2002
"RTN","IBCNEHLD",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300**;21-MAR-94
"RTN","IBCNEHLD",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLD",4,0)
 ;
"RTN","IBCNEHLD",5,0)
 ;**Program Description**
"RTN","IBCNEHLD",6,0)
 ;  This program will process deactivate registration MFN message
"RTN","IBCNEHLD",7,0)
 ;
"RTN","IBCNEHLD",8,0)
 ;*** WARNING-This program should only be executed by the integration team ***
"RTN","IBCNEHLD",9,0)
 ;
"RTN","IBCNEHLD",10,0)
 Q
"RTN","IBCNEHLD",11,0)
 ;
"RTN","IBCNEHLD",12,0)
 ;  Variables
"RTN","IBCNEHLD",13,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLD",14,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLD",15,0)
 ;    APP = Application
"RTN","IBCNEHLD",16,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLD",17,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLD",18,0)
 ;
"RTN","IBCNEHLD",19,0)
DEAC ;  Deactivation message for when a site consolidates with another site
"RTN","IBCNEHLD",20,0)
 NEW MGRP,APP,EVENT,CODE,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX
"RTN","IBCNEHLD",21,0)
 NEW HLEID,HLCS,HLINST,HLN,HLPARAM,HLDOM,HLHDR,HLSAN
"RTN","IBCNEHLD",22,0)
 NEW HLTYPE,HLQ,HLRESLT,ID,DA,DISYS,MFE,RESP,ZMID
"RTN","IBCNEHLD",23,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLD",24,0)
 ;
"RTN","IBCNEHLD",25,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLD",26,0)
 ;
"RTN","IBCNEHLD",27,0)
HL ;  When a site deactivates, the enrollment should be an
"RTN","IBCNEHLD",28,0)
 ;  "MDC" (delete) record
"RTN","IBCNEHLD",29,0)
 S MFE(1)="MDC"
"RTN","IBCNEHLD",30,0)
 ;
"RTN","IBCNEHLD",31,0)
 ;  Initialize the HL7
"RTN","IBCNEHLD",32,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLD",33,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLD",34,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLD",35,0)
 ;
"RTN","IBCNEHLD",36,0)
 ;   Set the MFI segment
"RTN","IBCNEHLD",37,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="AL"
"RTN","IBCNEHLD",38,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLD",39,0)
 ;
"RTN","IBCNEHLD",40,0)
 ;  Set the MFE segment
"RTN","IBCNEHLD",41,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLD",42,0)
 S CODE=""
"RTN","IBCNEHLD",43,0)
 S ^TMP("HLS",$J,2)=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)_HLFS_"CE"
"RTN","IBCNEHLD",44,0)
 ;
"RTN","IBCNEHLD",45,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLD",46,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLD",47,0)
 . S MSG(1)="IIV Deactivation Message not created."
"RTN","IBCNEHLD",48,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLD",49,0)
 . S MSG(3)="Please log a NOIS for this problem."
"RTN","IBCNEHLD",50,0)
 . D MLMN
"RTN","IBCNEHLD",51,0)
 K ^TMP("HLS",$J),%H,%I,X,EDT
"RTN","IBCNEHLD",52,0)
 Q
"RTN","IBCNEHLD",53,0)
 ;
"RTN","IBCNEHLD",54,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLD",55,0)
 S XMSUB="IIV Deactivation Failure"
"RTN","IBCNEHLD",56,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLD",57,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLD",58,0)
 Q
"RTN","IBCNEHLI")
0^22^B8071384
"RTN","IBCNEHLI",1,0)
IBCNEHLI ;DAOU/ALA - Incoming HL7 messages ;16-JUN-2002
"RTN","IBCNEHLI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,251,271,300**;21-MAR-94
"RTN","IBCNEHLI",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLI",4,0)
 ;
"RTN","IBCNEHLI",5,0)
 ;**Program Description**
"RTN","IBCNEHLI",6,0)
 ;  This program parses each incoming HL7 message.
"RTN","IBCNEHLI",7,0)
 ;
"RTN","IBCNEHLI",8,0)
EN ;  Starting point - put message into a TMP global
"RTN","IBCNEHLI",9,0)
 ;
"RTN","IBCNEHLI",10,0)
 N ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HLECH,HLEID
"RTN","IBCNEHLI",11,0)
 N HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",12,0)
 N SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN,CNT
"RTN","IBCNEHLI",13,0)
 N ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",14,0)
 N DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL,IBIEN,TQDATA,IBQFL
"RTN","IBCNEHLI",15,0)
 N DATAMFK,EPHARM
"RTN","IBCNEHLI",16,0)
 ;
"RTN","IBCNEHLI",17,0)
 K ^TMP($J,"IBCNEHLI")
"RTN","IBCNEHLI",18,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IBCNEHLI",19,0)
 . S CNT=0
"RTN","IBCNEHLI",20,0)
 . S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE
"RTN","IBCNEHLI",21,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IBCNEHLI",22,0)
 .. S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE(CNT)
"RTN","IBCNEHLI",23,0)
 ;
"RTN","IBCNEHLI",24,0)
 ;  Get the IIV user
"RTN","IBCNEHLI",25,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEHLI",26,0)
 ;   Determine which protocol to use
"RTN","IBCNEHLI",27,0)
 S SEGMT=$G(^TMP($J,"IBCNEHLI",1,0))
"RTN","IBCNEHLI",28,0)
 I $E(SEGMT,1,3)'="MSH" D  D ERR Q
"RTN","IBCNEHLI",29,0)
 . S MSG(1)="MSH Segment is not the first segment found"
"RTN","IBCNEHLI",30,0)
 . S MSG(2)="Please log a NOIS for this problem."
"RTN","IBCNEHLI",31,0)
 S HLFS=$E(SEGMT,4)
"RTN","IBCNEHLI",32,0)
 S EVENT=$P(SEGMT,HLFS,9),IBPRTCL=""
"RTN","IBCNEHLI",33,0)
 ;
"RTN","IBCNEHLI",34,0)
 ;  The event type determines protocol
"RTN","IBCNEHLI",35,0)
 I EVENT="MFN^M01" S TAG="TBL",IBPRTCL="IBCNE IIV MFN IN"
"RTN","IBCNEHLI",36,0)
 I EVENT="RPI^I01" S TAG="RSP",IBPRTCL="IBCNE IIV IN" I '$$HL7VAL G XIT
"RTN","IBCNEHLI",37,0)
 I EVENT="MFK^M01" S TAG="ACK",IBPRTCL="IBCNE IIV REGISTER"
"RTN","IBCNEHLI",38,0)
 I IBPRTCL="" S MSG(1)="Unable to find a protocol for Event = "_EVENT D ERR G XIT
"RTN","IBCNEHLI",39,0)
 ; S HLEID=$$HLP^IBCNEHLU(IBPRTCL)
"RTN","IBCNEHLI",40,0)
 ;
"RTN","IBCNEHLI",41,0)
 ;  Initialize the HL7 variables
"RTN","IBCNEHLI",42,0)
 D INIT^HLFNC2(IBPRTCL,.HL)
"RTN","IBCNEHLI",43,0)
 ; S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","IBCNEHLI",44,0)
 ;
"RTN","IBCNEHLI",45,0)
 ;  Call the event tag
"RTN","IBCNEHLI",46,0)
 D @TAG
"RTN","IBCNEHLI",47,0)
 ;
"RTN","IBCNEHLI",48,0)
XIT K ^TMP($J,"IBCNEHLI"),HL,HLNEXT,HLNODE,HLQUIT,SEGCNT
"RTN","IBCNEHLI",49,0)
 Q
"RTN","IBCNEHLI",50,0)
 ;
"RTN","IBCNEHLI",51,0)
TBL ;  Table Update Processing
"RTN","IBCNEHLI",52,0)
 D ^IBCNEHLT
"RTN","IBCNEHLI",53,0)
 ;
"RTN","IBCNEHLI",54,0)
 I ERFLG D ERR
"RTN","IBCNEHLI",55,0)
 K ERFLG
"RTN","IBCNEHLI",56,0)
 ;
"RTN","IBCNEHLI",57,0)
 ; Send MFK Message (Application Acknowledgement)?
"RTN","IBCNEHLI",58,0)
 I HL("APAT")="AL",$G(EPHARM) D ^IBCNRMFK
"RTN","IBCNEHLI",59,0)
 Q
"RTN","IBCNEHLI",60,0)
 ;
"RTN","IBCNEHLI",61,0)
RSP ;  Response Processing
"RTN","IBCNEHLI",62,0)
 D ^IBCNEHL1
"RTN","IBCNEHLI",63,0)
 ;
"RTN","IBCNEHLI",64,0)
 K ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HL,HLECH,HLEID
"RTN","IBCNEHLI",65,0)
 K HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",66,0)
 K SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN
"RTN","IBCNEHLI",67,0)
 K ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",68,0)
 K DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL
"RTN","IBCNEHLI",69,0)
 Q
"RTN","IBCNEHLI",70,0)
 ;
"RTN","IBCNEHLI",71,0)
ACK ;  Acknowledgement Processing
"RTN","IBCNEHLI",72,0)
 D ^IBCNEHLK
"RTN","IBCNEHLI",73,0)
 ;
"RTN","IBCNEHLI",74,0)
 Q
"RTN","IBCNEHLI",75,0)
 ;
"RTN","IBCNEHLI",76,0)
ERR ; Process an error
"RTN","IBCNEHLI",77,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLI",78,0)
 D MSG^IBCNEUT5(MGRP,"INCOMING IIV HL7 PROBLEM","MSG(")
"RTN","IBCNEHLI",79,0)
 K MSG,MGRP
"RTN","IBCNEHLI",80,0)
 Q
"RTN","IBCNEHLI",81,0)
 ; 
"RTN","IBCNEHLI",82,0)
HL7VAL() ; Check for valid post 300 response
"RTN","IBCNEHLI",83,0)
 N X,HCT
"RTN","IBCNEHLI",84,0)
 S X=0,HCT=0
"RTN","IBCNEHLI",85,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="PRD" S X=1 Q
"RTN","IBCNEHLI",86,0)
 Q X
"RTN","IBCNEHLK")
0^9^B906841
"RTN","IBCNEHLK",1,0)
IBCNEHLK ;DAOU/ALA - HL7 Acknowledgement Messages ;08-OCT-2002
"RTN","IBCNEHLK",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300**;21-MAR-94
"RTN","IBCNEHLK",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLK",4,0)
 ;
"RTN","IBCNEHLK",5,0)
MFK ;  MFN Acknowledgement
"RTN","IBCNEHLK",6,0)
 S HCT=1
"RTN","IBCNEHLK",7,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHLK",8,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D
"RTN","IBCNEHLK",9,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLK",10,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLK",11,0)
 . ;
"RTN","IBCNEHLK",12,0)
 . I SEG="MSA" D
"RTN","IBCNEHLK",13,0)
 .. S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3))
"RTN","IBCNEHLK",14,0)
 .. ;
"RTN","IBCNEHLK",15,0)
 .. I ACK="AE" S VMFN(350.9,"1,",51.22)=0
"RTN","IBCNEHLK",16,0)
 .. I ACK="AA" S VMFN(350.9,"1,",51.22)=1
"RTN","IBCNEHLK",17,0)
 ;
"RTN","IBCNEHLK",18,0)
 D FILE^DIE("I","VMFN")
"RTN","IBCNEHLK",19,0)
 ;
"RTN","IBCNEHLK",20,0)
 K IBSEG,SEG,HCT,ACK,EVENT,HL,IBPRTCL,IDUZ,MSGID,SEGMT,TAG,VMFN
"RTN","IBCNEHLK",21,0)
 Q
"RTN","IBCNEHLM")
0^1^B21111301
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;10-JUN-2002
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,300**;21-MAR-94
"RTN","IBCNEHLM",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    CNTC = Contact IEN
"RTN","IBCNEHLM",19,0)
 ;    APP = Application
"RTN","IBCNEHLM",20,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",21,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",22,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",23,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",24,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",25,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",26,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",27,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",28,0)
 ;    IVER = Interface Version
"RTN","IBCNEHLM",29,0)
 ;
"RTN","IBCNEHLM",30,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",31,0)
 NEW TAXID,CNTCPH,CNTCEM,CNTCNM,IBCNE,FRSH,MGRP,INACT,IHLP,MFE,HLSAN
"RTN","IBCNEHLM",32,0)
 NEW IHLT,CNTC,APP,EVENT,CODE,EDT,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX,ID
"RTN","IBCNEHLM",33,0)
 NEW HLEID,IPP,IPA,IBCNEDAT,HLCS,HLINST,HLN,RESP,HLHDR
"RTN","IBCNEHLM",34,0)
 NEW HLTYPE,HLQ,HLRESLT,IHLS,HLCDOM,HLCINS,HLCSTCP,HLIP,%I,ZMID
"RTN","IBCNEHLM",35,0)
 NEW VMFE,IVER
"RTN","IBCNEHLM",36,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",37,0)
 ;
"RTN","IBCNEHLM",38,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",39,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",40,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",41,0)
 S FRSH=$P(IBCNE,U,1)
"RTN","IBCNEHLM",42,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",43,0)
 S INACT=$E($$GET1^DIQ(350.9,"1,",51.08,"E"))
"RTN","IBCNEHLM",44,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14),CNTC=$P(IBCNE,U,16)
"RTN","IBCNEHLM",45,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",46,0)
 S IVER="3"
"RTN","IBCNEHLM",47,0)
 ;
"RTN","IBCNEHLM",48,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",49,0)
 ;
"RTN","IBCNEHLM",50,0)
 ;  Get contact specific information
"RTN","IBCNEHLM",51,0)
 I CNTC'="" D
"RTN","IBCNEHLM",52,0)
 . S CNTCNM=$P($G(^VA(200,CNTC,0)),U,1)
"RTN","IBCNEHLM",53,0)
 . S CNTCPH=$P($G(^VA(200,CNTC,.13)),U,2)
"RTN","IBCNEHLM",54,0)
 . S CNTCEM=$P($G(^VA(200,CNTC,.15)),U,1)
"RTN","IBCNEHLM",55,0)
 ;
"RTN","IBCNEHLM",56,0)
 ;  Email if any missing data
"RTN","IBCNEHLM",57,0)
 I CNTC="" S MCT=MCT+1,MSG(MCT)="The Contact Person is not defined in the IIV Site Parameters.  ",QFL=1
"RTN","IBCNEHLM",58,0)
 I CNTC'="",CNTCPH="" S MCT=MCT+1,MSG(MCT)="The office phone number of the IIV Contact Person is not defined  (File 200, Field .132).  ",QFL=1
"RTN","IBCNEHLM",59,0)
 I CNTC'="",CNTCEM="" S MCT=MCT+1,MSG(MCT)="The email address of the IIV Contact Person is not defined  (File 200, Field .151).  ",QFL=1
"RTN","IBCNEHLM",60,0)
 ;
"RTN","IBCNEHLM",61,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",62,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",63,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",64,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",65,0)
 ;
"RTN","IBCNEHLM",66,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",67,0)
 . S MCT=MCT+1,MSG(MCT)="The following IIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",68,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic reverification checks"" is blank.  "
"RTN","IBCNEHLM",69,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",70,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",71,0)
 . Q
"RTN","IBCNEHLM",72,0)
 ;
"RTN","IBCNEHLM",73,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",74,0)
 I QFL=1 Q
"RTN","IBCNEHLM",75,0)
 ;
"RTN","IBCNEHLM",76,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",77,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",78,0)
 N VZRR
"RTN","IBCNEHLM",79,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",80,0)
 ;
"RTN","IBCNEHLM",81,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",82,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",83,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLM",84,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",85,0)
 ;
"RTN","IBCNEHLM",86,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",87,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",88,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",89,0)
 ;
"RTN","IBCNEHLM",90,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",91,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",92,0)
 S CODE=$P($$SITE^VASITE,U,3)_$E(HLECH)
"RTN","IBCNEHLM",93,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",94,0)
 S $P(VMFE,U,11)=$S($P(VMFE,U,11)="YES":"Y",1:"N")
"RTN","IBCNEHLM",95,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",96,0)
 ;
"RTN","IBCNEHLM",97,0)
 ;  Set the ZRR segment
"RTN","IBCNEHLM",98,0)
 S VZRR="ZRR"_HLFS_"1"_HLFS_TAXID_HLFS_HLFS_$$HLNAME^HLFNC(CNTCNM,$E(HLECH))_"^C"_HLFS
"RTN","IBCNEHLM",99,0)
 S VZRR=VZRR_CNTCPH_$E(HLECH)_$E(HLECH)_$E(HLECH)_CNTCEM_HLFS_FRSH_HLFS_IHLP_HLFS_IHLT_$E(HLECH)_IHLS_HLFS_INACT_HLFS_IVER
"RTN","IBCNEHLM",100,0)
 S ^TMP("HLS",$J,3)=VZRR
"RTN","IBCNEHLM",101,0)
 ;
"RTN","IBCNEHLM",102,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",103,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",104,0)
 . S MSG(1)="HL7 IIV Registration Message not created."
"RTN","IBCNEHLM",105,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",106,0)
 . D MLMN
"RTN","IBCNEHLM",107,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",108,0)
 Q
"RTN","IBCNEHLM",109,0)
 ;
"RTN","IBCNEHLM",110,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",111,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",112,0)
 S XMSUB="IIV Registration Failure"
"RTN","IBCNEHLM",113,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",114,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",115,0)
 Q
"RTN","IBCNEHLO")
0^24^B523295
"RTN","IBCNEHLO",1,0)
IBCNEHLO ;DAOU/ALA - Outgoing HL7 messages ;17-JUN-2002
"RTN","IBCNEHLO",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300**;21-MAR-94
"RTN","IBCNEHLO",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLO",4,0)
 ;
"RTN","IBCNEHLO",5,0)
 ;**Program Description**
"RTN","IBCNEHLO",6,0)
 ;  This program passes the HL7 protocol (variable IBCNHLP - defined by
"RTN","IBCNEHLO",7,0)
 ;  the calling routine) to INIT^HLFNC2, which loads protocol specific
"RTN","IBCNEHLO",8,0)
 ;  variables needed to generate an HL7 message into the HL array.
"RTN","IBCNEHLO",9,0)
 ;  In addition, the protocol IEN is set using the extrinsic function,
"RTN","IBCNEHLO",10,0)
 ;  $$HLP^IBCNEHLU.
"RTN","IBCNEHLO",11,0)
 ;
"RTN","IBCNEHLO",12,0)
 ;  Input Parameters
"RTN","IBCNEHLO",13,0)
 ;    IBCNHLP = Protocol Name
"RTN","IBCNEHLO",14,0)
 ;
"RTN","IBCNEHLO",15,0)
 ;
"RTN","IBCNEHLO",16,0)
INIT ;  Initialization for HL7
"RTN","IBCNEHLO",17,0)
 D INIT^HLFNC2(IBCNHLP,.HL)
"RTN","IBCNEHLO",18,0)
 S HLFS=HL("FS"),HLECH=$E(HL("ECH"),1),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLO",19,0)
 ; S HLEID=$$HLP^IBCNEHLU(IBCNHLP)
"RTN","IBCNEHLO",20,0)
 Q
"RTN","IBCNEHLO",21,0)
 ;
"RTN","IBCNEHLP")
1^15
"RTN","IBCNEHLQ")
0^6^B41231894
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300**;21-MAR-94
"RTN","IBCNEHLQ",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an IIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;  DAOU/DB      03/19/2004  Stripped dashes from SSN (PID, GT1)
"RTN","IBCNEHLQ",12,0)
 ;
"RTN","IBCNEHLQ",13,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",14,0)
 ;  Variables
"RTN","IBCNEHLQ",15,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",18,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",19,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",20,0)
 ;
"RTN","IBCNEHLQ",21,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",22,0)
 NEW VAERR,VAFSTR,VADM,VA,ICN,SNDSSN,NM,I
"RTN","IBCNEHLQ",23,0)
 S SNDSSN=$$SNDSSN^IBCNEUT5(PAYR,"IIV")
"RTN","IBCNEHLQ",24,0)
 D DEM^VADPT
"RTN","IBCNEHLQ",25,0)
 S VAFSTR=",1,7,8,11,"
"RTN","IBCNEHLQ",26,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",27,0)
 ; Encode special characters into Name and address pieces
"RTN","IBCNEHLQ",28,0)
 ; **NOTE: If $$EN^VAFHLPID should, in the future, return more than 11 pieces than the lines below may
"RTN","IBCNEHLQ",29,0)
 ;         need to be modified as they currently expect 11 pieces to be returned.
"RTN","IBCNEHLQ",30,0)
 S DFN=$G(DFN) I DFN]"" D
"RTN","IBCNEHLQ",31,0)
 . S NM("FILE")=2,NM("IENS")=DFN,NM("FIELD")=.01
"RTN","IBCNEHLQ",32,0)
 . S NM=$$HLNAME^XLFNAME(.NM,"",$E(HLECH)),NM=$S(NM]"":NM,1:HLQ)
"RTN","IBCNEHLQ",33,0)
 . S I=$L(NM,"|"),NM=$$ENCHL7(NM),$P(PID,"|",6,5+I)=NM
"RTN","IBCNEHLQ",34,0)
 S $P(PID,"|",12,99)=$$ENCHL7($P(PID,"|",12,99))
"RTN","IBCNEHLQ",35,0)
 ;
"RTN","IBCNEHLQ",36,0)
 S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",37,0)
 S $P(PID,HLFS,4)=ICN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"NI"_HLECH
"RTN","IBCNEHLQ",38,0)
 I DFN S $P(PID,HLFS,4)=$P(PID,HLFS,4)_"~"_DFN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"PI"_HLECH_$P($$SITE^VASITE,U,3)_HLECH
"RTN","IBCNEHLQ",39,0)
 I SNDSSN S $P(PID,HLFS,4)=$P(PID,HLFS,4)_"~"_$TR(VA("PID"),"-")_HLECH_HLECH_HLECH_"USSSA"_HLECH_"SS"_HLECH_"USSSA"
"RTN","IBCNEHLQ",40,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",41,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",42,0)
 Q
"RTN","IBCNEHLQ",43,0)
 ;
"RTN","IBCNEHLQ",44,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",45,0)
 NEW WHO,NM,IDOB,ISSN,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",46,0)
 NEW SNDSSN
"RTN","IBCNEHLQ",47,0)
 ;
"RTN","IBCNEHLQ",48,0)
 S SNDSSN=$$SNDSSN^IBCNEUT5(PAYR,"IIV")
"RTN","IBCNEHLQ",49,0)
 ;
"RTN","IBCNEHLQ",50,0)
 S GT1=""
"RTN","IBCNEHLQ",51,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",52,0)
 ;
"RTN","IBCNEHLQ",53,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",54,0)
 I EXT=1 D
"RTN","IBCNEHLQ",55,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",56,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",57,0)
 . S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",58,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",59,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",60,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",61,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",62,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",63,0)
 . S $P(GT1,HLFS,2)=$$ENCHL7($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",64,0)
 . I SNDSSN S $P(GT1,HLFS,12)=$TR($P($G(^IBA(355.33,BUFF,60)),U,9),"-")
"RTN","IBCNEHLQ",65,0)
 ;
"RTN","IBCNEHLQ",66,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",67,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",68,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",69,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",70,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",71,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEHLQ",72,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",73,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",74,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",75,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",76,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",77,0)
 . S $P(GT1,HLFS,2)=$$ENCHL7($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",78,0)
 . ;
"RTN","IBCNEHLQ",79,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",80,0)
 . ;
"RTN","IBCNEHLQ",81,0)
 . S ISSN=$P(IBSDATA,U,5)
"RTN","IBCNEHLQ",82,0)
 . I SNDSSN S $P(GT1,HLFS,12)=$TR(ISSN,"-")
"RTN","IBCNEHLQ",83,0)
 . ;
"RTN","IBCNEHLQ",84,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,12))
"RTN","IBCNEHLQ",85,0)
 . S $P(GT1,HLFS,5)=$$ENCHL7(IBADDR)
"RTN","IBCNEHLQ",86,0)
 . ;
"RTN","IBCNEHLQ",87,0)
 . D CHK
"RTN","IBCNEHLQ",88,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",89,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",90,0)
 . I SNDSSN,$P(GT1,HLFS,12)=""&(ISSN'="") S $P(GT1,HLFS,12)=$TR(ISSN,"-")
"RTN","IBCNEHLQ",91,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",92,0)
 .. S SEX=$P(^DPT(DFN,0),U,2)
"RTN","IBCNEHLQ",93,0)
 .. S $P(GT1,HLFS,9)=$S(SEX="M":"F",1:"M")
"RTN","IBCNEHLQ",94,0)
 ;
"RTN","IBCNEHLQ",95,0)
 I GT1="" Q
"RTN","IBCNEHLQ",96,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",97,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",98,0)
 Q
"RTN","IBCNEHLQ",99,0)
 ;
"RTN","IBCNEHLQ",100,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",101,0)
 NEW EFFDT,EXPDT,WHO,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",102,0)
 S IN1="",SRVDT=$$HLDATE^HLFNC(SRVDT)
"RTN","IBCNEHLQ",103,0)
 ;
"RTN","IBCNEHLQ",104,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",105,0)
 I EXT=1 D
"RTN","IBCNEHLQ",106,0)
 . S $P(IN1,HLFS,2)=$$ENCHL7($G(SUBID))
"RTN","IBCNEHLQ",107,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",108,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",109,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",110,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,3))
"RTN","IBCNEHLQ",111,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,2))
"RTN","IBCNEHLQ",112,0)
 . S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",113,0)
 . S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",114,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",115,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",116,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",117,0)
 . S $P(IN1,HLFS,17)=$S(WHO="v":18,WHO="":18,WHO="s":"01",1:34)
"RTN","IBCNEHLQ",118,0)
 ;
"RTN","IBCNEHLQ",119,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",120,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",121,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",122,0)
 . I $G(SUBID)'=$P($G(^DPT(DFN,.312,IRIEN,0)),U,2) Q
"RTN","IBCNEHLQ",123,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",124,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",125,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",126,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",127,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6) I WHO="" Q
"RTN","IBCNEHLQ",128,0)
 . S $P(IN1,HLFS,17)=$S(WHO="v":18,WHO="":18,WHO="s":"01",1:34)
"RTN","IBCNEHLQ",129,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",130,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($$GET1^DIQ(2.312,IENS,21,"E"))
"RTN","IBCNEHLQ",131,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($$GET1^DIQ(2.312,IENS,20,"E"))
"RTN","IBCNEHLQ",132,0)
 ;
"RTN","IBCNEHLQ",133,0)
 ;  If it's an inquire with 'No Payer', don't send payer info
"RTN","IBCNEHLQ",134,0)
 I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",135,0)
 . S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",136,0)
 . S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",137,0)
 . S $P(IN1,HLFS,2)=$$ENCHL7($G(SUBID))
"RTN","IBCNEHLQ",138,0)
 ;
"RTN","IBCNEHLQ",139,0)
 I IN1="" Q
"RTN","IBCNEHLQ",140,0)
 ;
"RTN","IBCNEHLQ",141,0)
 I $G(QUERY)="I",$P(IN1,HLFS,17)'=18 S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",142,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",143,0)
 ;
"RTN","IBCNEHLQ",144,0)
 ;  Set the admission date if patient currently admitted
"RTN","IBCNEHLQ",145,0)
 S ADMN=$P($G(^DPT(DFN,.105)),U,1) I ADMN'="" D
"RTN","IBCNEHLQ",146,0)
 . S ADMDT=$P(^DGPM(ADMN,0),U,1),ADMDT=$$HLDATE^HLFNC(ADMDT)
"RTN","IBCNEHLQ",147,0)
 . S $P(IN1,HLFS,24)=ADMDT
"RTN","IBCNEHLQ",148,0)
 ;
"RTN","IBCNEHLQ",149,0)
 ;  Set the service date
"RTN","IBCNEHLQ",150,0)
 S $P(IN1,HLFS,26)=SRVDT
"RTN","IBCNEHLQ",151,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",152,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",153,0)
 Q
"RTN","IBCNEHLQ",154,0)
 ;
"RTN","IBCNEHLQ",155,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",156,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",157,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",158,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",159,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",160,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",161,0)
 . ;
"RTN","IBCNEHLQ",162,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",163,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",164,0)
 . ;
"RTN","IBCNEHLQ",165,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",166,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",167,0)
 . ;
"RTN","IBCNEHLQ",168,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",169,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",170,0)
 ;
"RTN","IBCNEHLQ",171,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",172,0)
 ;
"RTN","IBCNEHLQ",173,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",174,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",175,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",176,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",177,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",178,0)
 S RDATA=$G(^DGPR(408.13,PLIEN,0))
"RTN","IBCNEHLQ",179,0)
 S ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3),ISSN=$P(RDATA,U,9)
"RTN","IBCNEHLQ",180,0)
 I $P(RDATA,U,4)'="" D
"RTN","IBCNEHLQ",181,0)
 . NEW DFN
"RTN","IBCNEHLQ",182,0)
 . S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",183,0)
 . S ISSN=$P(^DPT(DFN,0),U,9)
"RTN","IBCNEHLQ",184,0)
 Q
"RTN","IBCNEHLQ",185,0)
 ;
"RTN","IBCNEHLQ",186,0)
ENCHL7(STR) ; Encode HL7 escape seqs in data fields
"RTN","IBCNEHLQ",187,0)
 ;
"RTN","IBCNEHLQ",188,0)
 ; Input:
"RTN","IBCNEHLQ",189,0)
 ; STR = Field data possible containing HL7 encoding chars
"RTN","IBCNEHLQ",190,0)
 ;
"RTN","IBCNEHLQ",191,0)
 ; Output Values
"RTN","IBCNEHLQ",192,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHLQ",193,0)
 ;
"RTN","IBCNEHLQ",194,0)
 N CHR,NEW,RPLC,CNT,LOOP
"RTN","IBCNEHLQ",195,0)
 ;
"RTN","IBCNEHLQ",196,0)
 ; Replace "\" "&" "~" "|" with \F\ \R\ \E\ \T\ respectively
"RTN","IBCNEHLQ",197,0)
 F CHR="\","&","~","|" S CNT=$L(STR,CHR) I CNT>1 D
"RTN","IBCNEHLQ",198,0)
 . S NEW=$P(STR,CHR)
"RTN","IBCNEHLQ",199,0)
 . S RPLC="\"_$TR(CHR,"|~\&","FRET")_"\"
"RTN","IBCNEHLQ",200,0)
 . F LOOP=2:1:CNT S NEW=NEW_RPLC_$P(STR,CHR,LOOP)
"RTN","IBCNEHLQ",201,0)
 . S STR=NEW
"RTN","IBCNEHLQ",202,0)
 ;
"RTN","IBCNEHLQ",203,0)
 Q STR
"RTN","IBCNEHLR")
1^14
"RTN","IBCNEHLS")
1^13
"RTN","IBCNEHLT")
0^10^B69606344
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ; 09 Dec 2005  3:30 PM
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,271,300**;21-MAR-94
"RTN","IBCNEHLT",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,USSN,REQSUB,NAFLG,NPFLG
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 NEW BPSIEN,CMIEN,DATA,DATAAP,DATABPS,DATACM,DATE,ERROR,FIELDNO,FILENO
"RTN","IBCNEHLT",14,0)
 NEW IBSEG,MSG,BUFF
"RTN","IBCNEHLT",15,0)
 NEW X12TABLE,BADFMT
"RTN","IBCNEHLT",16,0)
 ;
"RTN","IBCNEHLT",17,0)
 ; BADFMT is true if a site with patch 300 receives an IIV message in the previous HL7 interface structure (pre-300)
"RTN","IBCNEHLT",18,0)
 ;
"RTN","IBCNEHLT",19,0)
 ; Build local table of file numbers to determine if response is IIV or ePHARM
"RTN","IBCNEHLT",20,0)
 F D=11:1:18,21 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",21,0)
 ;
"RTN","IBCNEHLT",22,0)
 ; Decide if message belongs to "E-Pharm" or "IIV"
"RTN","IBCNEHLT",23,0)
 S APP=""
"RTN","IBCNEHLT",24,0)
 S HCT=0,ERFLG=0
"RTN","IBCNEHLT",25,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="MFI" S FILE=$G(IBSEG(2)),FLN=$P(FILE,$E(HLECH,1),1) Q
"RTN","IBCNEHLT",26,0)
 I ",366.01,366.02,366.03,365.12,355.3,"[(","_FLN_",") S APP="E-PHARM"
"RTN","IBCNEHLT",27,0)
 I FLN=365.12 D
"RTN","IBCNEHLT",28,0)
 . S HCT=0,BADFMT=0
"RTN","IBCNEHLT",29,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:(APP="IIV")!BADFMT
"RTN","IBCNEHLT",30,0)
 .. D SPAR^IBCNEHLU
"RTN","IBCNEHLT",31,0)
 .. I $G(IBSEG(1))="MFE",$P($G(IBSEG(5)),$E(HLECH,1),3)'="" D  Q
"RTN","IBCNEHLT",32,0)
 ... S BADFMT=1,APP=""
"RTN","IBCNEHLT",33,0)
 ... S MSG(1)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",34,0)
 ... S MSG(2)="Please include in the Remedy Ticket that the IIV payer tables may be out"
"RTN","IBCNEHLT",35,0)
 ... S MSG(3)="of sync with the master list and will need a new copy of the payer table"
"RTN","IBCNEHLT",36,0)
 ... S MSG(4)="from Austin."
"RTN","IBCNEHLT",37,0)
 ... D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"IIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",38,0)
 .. I $G(IBSEG(1))="ZPA" S APP="IIV"
"RTN","IBCNEHLT",39,0)
 I $D(X12TABLE(FLN)) S APP="IIV"
"RTN","IBCNEHLT",40,0)
 ; If neither IIV or ePHARM then quit
"RTN","IBCNEHLT",41,0)
 I APP="" Q
"RTN","IBCNEHLT",42,0)
 ;
"RTN","IBCNEHLT",43,0)
 S HCT=1,NAFLG=0,NPFLG=0,D=""
"RTN","IBCNEHLT",44,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",45,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLT",46,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",47,0)
 . ;
"RTN","IBCNEHLT",48,0)
 . I APP="E-PHARM" D
"RTN","IBCNEHLT",49,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",50,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",51,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",52,0)
 ... ;
"RTN","IBCNEHLT",53,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",54,0)
 ... ; Master File Identifier
"RTN","IBCNEHLT",55,0)
 ... S DATAMFK("MFI-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",56,0)
 ... ;
"RTN","IBCNEHLT",57,0)
 ... ; File-Level Event Code
"RTN","IBCNEHLT",58,0)
 ... S DATAMFK("MFI-3")=$G(IBSEG(4))
"RTN","IBCNEHLT",59,0)
 .. ;
"RTN","IBCNEHLT",60,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",61,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",62,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",63,0)
 ... ;
"RTN","IBCNEHLT",64,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",65,0)
 ... ; Record-Level Event Code
"RTN","IBCNEHLT",66,0)
 ... S DATAMFK("MFE-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",67,0)
 ... ;
"RTN","IBCNEHLT",68,0)
 ... ; Primary Key Value
"RTN","IBCNEHLT",69,0)
 ... S DATAMFK("MFE-4")=$G(IBSEG(5))
"RTN","IBCNEHLT",70,0)
 ... ;
"RTN","IBCNEHLT",71,0)
 ... ; Primary Key Value Type
"RTN","IBCNEHLT",72,0)
 ... S DATAMFK("MFE-5")=$G(IBSEG(6))
"RTN","IBCNEHLT",73,0)
 ... ;
"RTN","IBCNEHLT",74,0)
 ... ; Transfer control to e-Pharmacy
"RTN","IBCNEHLT",75,0)
 ... D ^IBCNRHLT Q
"RTN","IBCNEHLT",76,0)
 .. ;
"RTN","IBCNEHLT",77,0)
 .. ; Transfer control on other segments
"RTN","IBCNEHLT",78,0)
 .. I ",ZCM,ZP0,ZPB,ZPL,ZPT,ZRX,"[(","_SEG_",") D ^IBCNRHLT
"RTN","IBCNEHLT",79,0)
 . ;
"RTN","IBCNEHLT",80,0)
 . ;
"RTN","IBCNEHLT",81,0)
 . I APP="IIV" D
"RTN","IBCNEHLT",82,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",83,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",84,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",85,0)
 .. ;
"RTN","IBCNEHLT",86,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",87,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",88,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",89,0)
 ... ;
"RTN","IBCNEHLT",90,0)
 ... I FLN'=365.12 D  Q
"RTN","IBCNEHLT",91,0)
 .... S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",92,0)
 .... S ID=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),1)),DESC=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),2))
"RTN","IBCNEHLT",93,0)
 .... D TFIL
"RTN","IBCNEHLT",94,0)
 ... ;
"RTN","IBCNEHLT",95,0)
 ... ; Pull the action code
"RTN","IBCNEHLT",96,0)
 ... S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",97,0)
 ... ; Effective Date
"RTN","IBCNEHLT",98,0)
 ... S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",99,0)
 .. ;
"RTN","IBCNEHLT",100,0)
 .. I SEG="ZP0" D
"RTN","IBCNEHLT",101,0)
 ... S ID=$$DECHL7^IBCNEHL2(IBSEG(3)),NEWID=$$DECHL7^IBCNEHL2(IBSEG(4))
"RTN","IBCNEHLT",102,0)
 ... S DESC=$$DECHL7^IBCNEHL2(IBSEG(5)),HEDI=$$DECHL7^IBCNEHL2(IBSEG(6)),PEDI=$$DECHL7^IBCNEHL2(IBSEG(7))
"RTN","IBCNEHLT",103,0)
 .. ;
"RTN","IBCNEHLT",104,0)
 .. I SEG="ZPA" D
"RTN","IBCNEHLT",105,0)
 ... S STAT=IBSEG(4),STAT=$S(STAT="Y":"Active",1:"Not Active")
"RTN","IBCNEHLT",106,0)
 ... S TSSN=IBSEG(5),USSN=IBSEG(6),REQSUB=IBSEG(7)
"RTN","IBCNEHLT",107,0)
 ... S FSVDY=IBSEG(8),PSVDY=IBSEG(9)
"RTN","IBCNEHLT",108,0)
 ... D PFIL
"RTN","IBCNEHLT",109,0)
 Q
"RTN","IBCNEHLT",110,0)
 ;
"RTN","IBCNEHLT",111,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",112,0)
 ;  Set the action:
"RTN","IBCNEHLT",113,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",114,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",115,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",116,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",117,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR
"RTN","IBCNEHLT",118,0)
 S IBNOK=0,IBAPP=($TR(APP," ")="")
"RTN","IBCNEHLT",119,0)
 I IBCNACT="MAD" D  I IBNOK G PFILX
"RTN","IBCNEHLT",120,0)
 . ; Check certain required fields: Application, VA National & Payer Name
"RTN","IBCNEHLT",121,0)
 . ; If not populated, send MailMan message.
"RTN","IBCNEHLT",122,0)
 . S IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")="")
"RTN","IBCNEHLT",123,0)
 . S IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",124,0)
 . I 'IBNOK D MAD(DESC) Q
"RTN","IBCNEHLT",125,0)
 . S IBSTR="" I IBAPP S IBSTR="Application"
"RTN","IBCNEHLT",126,0)
 . I IBID S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"VA National"
"RTN","IBCNEHLT",127,0)
 . I IBDESC S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"Payer Name"
"RTN","IBCNEHLT",128,0)
 . S MSG(1)="MAD action received.  "_IBSTR_" unknown."
"RTN","IBCNEHLT",129,0)
 I IBCNACT'="MAD" D FND
"RTN","IBCNEHLT",130,0)
 N IBCNTYPE
"RTN","IBCNEHLT",131,0)
 I IEN<1!IBAPP D  G PFILX
"RTN","IBCNEHLT",132,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",133,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",134,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",135,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",136,0)
 . S MSG(4)="Payer Name  : "_DESC
"RTN","IBCNEHLT",137,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",138,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",139,0)
 . S MSG(7)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",140,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",141,0)
 . S MSG(9)="Please include in the Remedy Ticket that VISTA did not receive the required"
"RTN","IBCNEHLT",142,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",143,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"IIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",144,0)
 ;
"RTN","IBCNEHLT",145,0)
 S DESC=$E(DESC,1,80)    ;restriction of the field in the DD
"RTN","IBCNEHLT",146,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",147,0)
 S DR=".01///^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",148,0)
 ;
"RTN","IBCNEHLT",149,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",150,0)
 I NPFLG S DR=DR_";.04///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",151,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",152,0)
 ;
"RTN","IBCNEHLT",153,0)
 ;  Check for application
"RTN","IBCNEHLT",154,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",155,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",156,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",157,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",158,0)
 . K DD,DO
"RTN","IBCNEHLT",159,0)
 . D FILE^DICN
"RTN","IBCNEHLT",160,0)
 . K DO
"RTN","IBCNEHLT",161,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",162,0)
 ;
"RTN","IBCNEHLT",163,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",164,0)
 I APIEN="" D
"RTN","IBCNEHLT",165,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",166,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",167,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",168,0)
 . K DD,DO
"RTN","IBCNEHLT",169,0)
 . D FILE^DICN
"RTN","IBCNEHLT",170,0)
 . K DO
"RTN","IBCNEHLT",171,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",172,0)
 ;
"RTN","IBCNEHLT",173,0)
 I $G(STAT)="" S STAT=$P(^IBE(365.12,IEN,1,APIEN,0),U,2)
"RTN","IBCNEHLT",174,0)
 ;
"RTN","IBCNEHLT",175,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",176,0)
 ;
"RTN","IBCNEHLT",177,0)
 I IBCNACT="MDC" S DR=DR_".11///^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",178,0)
 I IBCNACT="MAC" S DR=DR_".11///^S X=0;.12///@;"
"RTN","IBCNEHLT",179,0)
 S DR=DR_".02///^S X=STAT;.06///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",180,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.09///^S X=USSN;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",181,0)
 ;
"RTN","IBCNEHLT",182,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",183,0)
 I NAFLG S DR=DR_";.13///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",184,0)
 ;
"RTN","IBCNEHLT",185,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",186,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",187,0)
PFILX ;
"RTN","IBCNEHLT",188,0)
 Q
"RTN","IBCNEHLT",189,0)
 ;
"RTN","IBCNEHLT",190,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",191,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR,IEN
"RTN","IBCNEHLT",192,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",193,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",194,0)
 ;
"RTN","IBCNEHLT",195,0)
 S DESC=$E(DESC,1,80)    ;restriction of the field in the DD
"RTN","IBCNEHLT",196,0)
 ;
"RTN","IBCNEHLT",197,0)
 ;  If no matching entry found, add it to table
"RTN","IBCNEHLT",198,0)
 I IEN<1 D
"RTN","IBCNEHLT",199,0)
 . S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",200,0)
 . K DD,DO
"RTN","IBCNEHLT",201,0)
 . D FILE^DICN S IEN=+Y
"RTN","IBCNEHLT",202,0)
 . K DO
"RTN","IBCNEHLT",203,0)
 ;
"RTN","IBCNEHLT",204,0)
 S DR=".02///^S X=DESC",DA=IEN,DIE=DIC D ^DIE
"RTN","IBCNEHLT",205,0)
 Q
"RTN","IBCNEHLT",206,0)
 ;
"RTN","IBCNEHLT",207,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",208,0)
 D FND
"RTN","IBCNEHLT",209,0)
 I IEN>0 G MADX
"RTN","IBCNEHLT",210,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",211,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",212,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",213,0)
 K DD,DO
"RTN","IBCNEHLT",214,0)
 D FILE^DICN
"RTN","IBCNEHLT",215,0)
 K DO
"RTN","IBCNEHLT",216,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",217,0)
MADX ;
"RTN","IBCNEHLT",218,0)
 Q
"RTN","IBCNEHLT",219,0)
 ;
"RTN","IBCNEHLT",220,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",221,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",222,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",223,0)
 ;
"RTN","IBCNEHLT",224,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",225,0)
 D IX^DIC
"RTN","IBCNEHLT",226,0)
 S IEN=+Y
"RTN","IBCNEHLT",227,0)
 Q
"RTN","IBCNEHLT",228,0)
 ;
"RTN","IBCNEHLT",229,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",230,0)
 NEW STA,HIEN,RIEN,TQIEN
"RTN","IBCNEHLT",231,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",232,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",233,0)
 .. ;
"RTN","IBCNEHLT",234,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",235,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",236,0)
 .. ;
"RTN","IBCNEHLT",237,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",238,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",239,0)
 .. ;
"RTN","IBCNEHLT",240,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",241,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",242,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",243,0)
 .. ;
"RTN","IBCNEHLT",244,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",245,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",246,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",247,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",248,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",249,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",250,0)
 Q
"RTN","IBCNEHLU")
0^19^B16427486
"RTN","IBCNEHLU",1,0)
IBCNEHLU ;DAOU/ALA - HL7 Utilities ;10-JUN-2002  ; Compiled December 16, 2004 15:36:12
"RTN","IBCNEHLU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300**;21-MAR-94
"RTN","IBCNEHLU",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLU",4,0)
 ;
"RTN","IBCNEHLU",5,0)
HLP(PROTOCOL) ;  Find the Protocol IEN
"RTN","IBCNEHLU",6,0)
 Q +$O(^ORD(101,"B",PROTOCOL,0))
"RTN","IBCNEHLU",7,0)
 ;
"RTN","IBCNEHLU",8,0)
NAME(NM) ;  Convert a name that isn't in standard VISTA format -
"RTN","IBCNEHLU",9,0)
 NEW LNM,FNM,MI
"RTN","IBCNEHLU",10,0)
 ;
"RTN","IBCNEHLU",11,0)
 I NM?." " Q NM
"RTN","IBCNEHLU",12,0)
 ;  LastName,FirstName MI
"RTN","IBCNEHLU",13,0)
 I NM["," Q NM
"RTN","IBCNEHLU",14,0)
 ;
"RTN","IBCNEHLU",15,0)
 ; Remove double-spaces from name
"RTN","IBCNEHLU",16,0)
 F  Q:$L(NM,"  ")<2  S NM=$P(NM,"  ",1)_" "_$P(NM,"  ",2,9999)
"RTN","IBCNEHLU",17,0)
 ;
"RTN","IBCNEHLU",18,0)
 ; Trim leading/trailing spaces
"RTN","IBCNEHLU",19,0)
 S NM=$$TRIM^XLFSTR(NM)
"RTN","IBCNEHLU",20,0)
 ;
"RTN","IBCNEHLU",21,0)
 ; Find number of spaces in name
"RTN","IBCNEHLU",22,0)
 S II=$L(NM," ")
"RTN","IBCNEHLU",23,0)
 ;
"RTN","IBCNEHLU",24,0)
 I II>3 Q NM
"RTN","IBCNEHLU",25,0)
 I II=3 S FNM=$P(NM," ",1),MI=" "_$P(NM," ",2),LNM=$P(NM," ",3)
"RTN","IBCNEHLU",26,0)
 I II=2 S FNM=$P(NM," ",1),LNM=$P(NM," ",2),MI=""
"RTN","IBCNEHLU",27,0)
 I II<2 Q NM
"RTN","IBCNEHLU",28,0)
 Q LNM_","_FNM_MI
"RTN","IBCNEHLU",29,0)
 ;
"RTN","IBCNEHLU",30,0)
DODCK(DFN,DOD,MGRP,NAME,RIEN,SSN) ;  Date of death check
"RTN","IBCNEHLU",31,0)
 ;
"RTN","IBCNEHLU",32,0)
 ; Input Variables
"RTN","IBCNEHLU",33,0)
 ; DFN, DOD, MGRP, NAME, RIEN, SSN
"RTN","IBCNEHLU",34,0)
 ;
"RTN","IBCNEHLU",35,0)
 N CDOD,CIDDSP,IDDSP,IDSSN,MSG,XMSUB
"RTN","IBCNEHLU",36,0)
 S CDOD=$P($G(^DPT(DFN,.35)),U,1),CIDDSP=$$FMTE^XLFDT(CDOD,"5Z")
"RTN","IBCNEHLU",37,0)
 S IDDSP=$$FMTE^XLFDT(DOD,"5Z")
"RTN","IBCNEHLU",38,0)
 S IDSSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","IBCNEHLU",39,0)
 ;
"RTN","IBCNEHLU",40,0)
 ; If the two dates of death are the same, quit
"RTN","IBCNEHLU",41,0)
 I CDOD=DOD G DODCKX
"RTN","IBCNEHLU",42,0)
 ;
"RTN","IBCNEHLU",43,0)
 ;  If no current date of death but payer sent one
"RTN","IBCNEHLU",44,0)
 I CDOD="" D  G DODCKX
"RTN","IBCNEHLU",45,0)
 . ;  Send an email message
"RTN","IBCNEHLU",46,0)
 . S XMSUB="Date of Death Received"
"RTN","IBCNEHLU",47,0)
 . S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from"
"RTN","IBCNEHLU",48,0)
 . S MSG(2)="payer "_$$GET1^DIQ(365,RIEN,.03,"E")_".  There is no current Date of Death on file for "
"RTN","IBCNEHLU",49,0)
 . S MSG(3)="this patient."
"RTN","IBCNEHLU",50,0)
 . D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",51,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",52,0)
 ;
"RTN","IBCNEHLU",53,0)
 S XMSUB="Variant Date of Death"
"RTN","IBCNEHLU",54,0)
 S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from payer "_$$GET1^DIQ(365,RIEN,.03,"E")_"."
"RTN","IBCNEHLU",55,0)
 S MSG(2)="This Date of Death does not currently match the Date of Death ("_CIDDSP_") on file for this patient. "
"RTN","IBCNEHLU",56,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",57,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",58,0)
DODCKX   ;
"RTN","IBCNEHLU",59,0)
 Q
"RTN","IBCNEHLU",60,0)
 ;
"RTN","IBCNEHLU",61,0)
SPAR     ;  Segment Parsing
"RTN","IBCNEHLU",62,0)
 ;
"RTN","IBCNEHLU",63,0)
 ; This tag will parse the current segment referenced by the HCT index
"RTN","IBCNEHLU",64,0)
 ; and place the results in the IBSEG array.
"RTN","IBCNEHLU",65,0)
 ;
"RTN","IBCNEHLU",66,0)
 ; Input Variables
"RTN","IBCNEHLU",67,0)
 ; HCT
"RTN","IBCNEHLU",68,0)
 ;
"RTN","IBCNEHLU",69,0)
 ; Output Variables
"RTN","IBCNEHLU",70,0)
 ; IBSEG (ARRAY of fields in segment)
"RTN","IBCNEHLU",71,0)
 ;
"RTN","IBCNEHLU",72,0)
 N II,IJ,IK,IM,IS,ISBEG,ISCT,ISDATA,ISEND,ISPEC,LSDATA,NPC
"RTN","IBCNEHLU",73,0)
 ;
"RTN","IBCNEHLU",74,0)
 ;Reset IBSEG
"RTN","IBCNEHLU",75,0)
 K IBSEG
"RTN","IBCNEHLU",76,0)
 ;
"RTN","IBCNEHLU",77,0)
 S ISCT="",II=0,IS=0
"RTN","IBCNEHLU",78,0)
 F  S ISCT=$O(^TMP($J,"IBCNEHLI",HCT,ISCT)) Q:ISCT=""  D
"RTN","IBCNEHLU",79,0)
 . S IS=IS+1
"RTN","IBCNEHLU",80,0)
 . S ISDATA(IS)=$G(^TMP($J,"IBCNEHLI",HCT,ISCT))
"RTN","IBCNEHLU",81,0)
 . I $O(^TMP($J,"IBCNEHLI",HCT,ISCT))="" S ISDATA(IS)=ISDATA(IS)_HLFS
"RTN","IBCNEHLU",82,0)
 . S ISPEC(IS)=$L(ISDATA(IS),HLFS)
"RTN","IBCNEHLU",83,0)
 ;
"RTN","IBCNEHLU",84,0)
 S IM=0,LSDATA=""
"RTN","IBCNEHLU",85,0)
LP S IM=IM+1 Q:IM>IS
"RTN","IBCNEHLU",86,0)
 S LSDATA=LSDATA_ISDATA(IM),NPC=ISPEC(IM)
"RTN","IBCNEHLU",87,0)
 F IJ=1:1:NPC-1 D
"RTN","IBCNEHLU",88,0)
 . S II=II+1,IBSEG(II)=$$CLNSTR($P(LSDATA,HLFS,IJ),$E(HL("ECH"),1,2)_$E(HL("ECH"),4),$E(HL("ECH")))
"RTN","IBCNEHLU",89,0)
 S LSDATA=$P(LSDATA,HLFS,NPC)
"RTN","IBCNEHLU",90,0)
 G LP
"RTN","IBCNEHLU",91,0)
CLNSTR(STRING,CHARS,SUBSEP)      ; Remove extra trailing components and subcomponents in the HL7 seg
"RTN","IBCNEHLU",92,0)
 ;
"RTN","IBCNEHLU",93,0)
 N NUMPEC,PEC,RTSTRING
"RTN","IBCNEHLU",94,0)
 ;
"RTN","IBCNEHLU",95,0)
 S RTSTRING=$$RTRIMCH(STRING,CHARS)
"RTN","IBCNEHLU",96,0)
 ; Now we have string w/o trailing chars, remove from subs
"RTN","IBCNEHLU",97,0)
 S NUMPEC=$L(RTSTRING,SUBSEP)
"RTN","IBCNEHLU",98,0)
 F PEC=1:1:NUMPEC S $P(RTSTRING,SUBSEP,PEC)=$$RTRIMCH($P(RTSTRING,SUBSEP,PEC),CHARS)
"RTN","IBCNEHLU",99,0)
 Q RTSTRING
"RTN","IBCNEHLU",100,0)
 ;
"RTN","IBCNEHLU",101,0)
RTRIMCH(STR,CHRS) ; Remove the trailing chars from string
"RTN","IBCNEHLU",102,0)
 ;
"RTN","IBCNEHLU",103,0)
 N R,L
"RTN","IBCNEHLU",104,0)
 ;
"RTN","IBCNEHLU",105,0)
 S L=1,CHRS=$G(CHRS," ")
"RTN","IBCNEHLU",106,0)
 F R=$L(STR):-1:1 Q:CHRS'[$E(STR,R)
"RTN","IBCNEHLU",107,0)
 I L=R,(CHRS[$E(STR)) S STR=""
"RTN","IBCNEHLU",108,0)
 Q $E(STR,L,R)
"RTN","IBCNEHLU",109,0)
 ;
"RTN","IBCNEHLU",110,0)
 ;
"RTN","IBCNEHLU",111,0)
GTICNM(ICN,NAME) ; Retrieve PID segment and set ICN and patient name
"RTN","IBCNEHLU",112,0)
 ;
"RTN","IBCNEHLU",113,0)
 N HCT,ERFLG,SEG,IBSEG
"RTN","IBCNEHLU",114,0)
 S (HCT,ICN,NAME)="",ERFLG=0
"RTN","IBCNEHLU",115,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLU",116,0)
 .  D SPAR
"RTN","IBCNEHLU",117,0)
 .  S SEG=$G(IBSEG(1)) Q:SEG'="PID"
"RTN","IBCNEHLU",118,0)
 .  S ICN=$G(IBSEG(4)),NAME=$G(IBSEG(6)),ERFLG=1
"RTN","IBCNEHLU",119,0)
 Q
"RTN","IBCNERP4")
0^20^B61874953
"RTN","IBCNERP4",1,0)
IBCNERP4 ;DAOU/BHS - IBCNE USER INTERFACE IIV PAYER REPORT ;03-JUN-2002
"RTN","IBCNERP4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300**;21-MAR-94
"RTN","IBCNERP4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP4",4,0)
 ;
"RTN","IBCNERP4",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP4",6,0)
 ;
"RTN","IBCNERP4",7,0)
 ; Input parameter: N/A
"RTN","IBCNERP4",8,0)
 ; Other relevant variables:
"RTN","IBCNERP4",9,0)
 ;   IBCNERTN = "IBCNERP4" (current routine name for queueing the 
"RTN","IBCNERP4",10,0)
 ;                          COMPILE process)
"RTN","IBCNERP4",11,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERP4",12,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERP4",13,0)
 ;   IBCNESPC("PYR") = payer ien for report, if = "", then include all
"RTN","IBCNERP4",14,0)
 ;   IBCNESPC("SORT") = 1 - Payer name OR 2 - Total Inqs (PAYER)
"RTN","IBCNERP4",15,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO  Include Rejection Detail in
"RTN","IBCNERP4",16,0)
 ;                     report output - rejections broken down by code
"RTN","IBCNERP4",17,0)
 ;
"RTN","IBCNERP4",18,0)
 ; Enter only from EN tag
"RTN","IBCNERP4",19,0)
 ; 
"RTN","IBCNERP4",20,0)
 ; Added tag DATA as split out from program IBCNERP5 for size restrictions
"RTN","IBCNERP4",21,0)
 QUIT
"RTN","IBCNERP4",22,0)
 ;
"RTN","IBCNERP4",23,0)
 ; Entry point
"RTN","IBCNERP4",24,0)
EN ;
"RTN","IBCNERP4",25,0)
 ; Initialize variables
"RTN","IBCNERP4",26,0)
 NEW STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP4",27,0)
 ;
"RTN","IBCNERP4",28,0)
 S STOP=0
"RTN","IBCNERP4",29,0)
 S IBCNERTN="IBCNERP4"
"RTN","IBCNERP4",30,0)
 W @IOF
"RTN","IBCNERP4",31,0)
 W !,"IIV Payer Report",!
"RTN","IBCNERP4",32,0)
 W !,"Insurance identification and verification inquiries are created daily."
"RTN","IBCNERP4",33,0)
 W !,"Select a date range in which inquiries were created by the eIIV extracts."
"RTN","IBCNERP4",34,0)
 ;
"RTN","IBCNERP4",35,0)
 ; Prompts for Payer Report
"RTN","IBCNERP4",36,0)
 ; Date Range parameters
"RTN","IBCNERP4",37,0)
P10 D DTRANGE I STOP G EXIT
"RTN","IBCNERP4",38,0)
 ; Payer Selection parameter
"RTN","IBCNERP4",39,0)
P20 D PYRSEL^IBCNERP1 I STOP G:$$STOP^IBCNERP1 EXIT G P10
"RTN","IBCNERP4",40,0)
 ; Include Rejection Detail in Payer report
"RTN","IBCNERP4",41,0)
P30 D REJDTL I STOP G:$$STOP^IBCNERP1 EXIT G P20
"RTN","IBCNERP4",42,0)
 ; Sort by parameter - Payer or Total Inquiries
"RTN","IBCNERP4",43,0)
P40 D SORT I STOP G:$$STOP^IBCNERP1 EXIT G P30
"RTN","IBCNERP4",44,0)
 ; Select the output device
"RTN","IBCNERP4",45,0)
P100 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC) I STOP G:$$STOP^IBCNERP1 EXIT G P40
"RTN","IBCNERP4",46,0)
 ;
"RTN","IBCNERP4",47,0)
EXIT ; Quit this routine
"RTN","IBCNERP4",48,0)
 QUIT
"RTN","IBCNERP4",49,0)
 ;
"RTN","IBCNERP4",50,0)
 ;
"RTN","IBCNERP4",51,0)
SORT ; Prompt to allow users to sort the report
"RTN","IBCNERP4",52,0)
 ;  by Payer(default) OR Total Inquiries, then Payer
"RTN","IBCNERP4",53,0)
 ; Initialize variables
"RTN","IBCNERP4",54,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",55,0)
 ;
"RTN","IBCNERP4",56,0)
 S DIR(0)="S^1:Payer Name;2:Total Inquiries"
"RTN","IBCNERP4",57,0)
 S DIR("A")=" Select the primary sort field"
"RTN","IBCNERP4",58,0)
 S DIR("B")=1
"RTN","IBCNERP4",59,0)
 S DIR("?",1)="  1 - Payer Name is the only sort. (Default)"
"RTN","IBCNERP4",60,0)
 S DIR("?",2)="  2 - Total Inquiries is the primary sort, Payer Name is"
"RTN","IBCNERP4",61,0)
 S DIR("?")="      the secondary sort."
"RTN","IBCNERP4",62,0)
 D ^DIR K DIR
"RTN","IBCNERP4",63,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP4",64,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP4",65,0)
 ;
"RTN","IBCNERP4",66,0)
SORTX ; SORT exit point
"RTN","IBCNERP4",67,0)
 QUIT
"RTN","IBCNERP4",68,0)
 ;
"RTN","IBCNERP4",69,0)
 ;
"RTN","IBCNERP4",70,0)
REJDTL ; Prompt to allow users to include the Rejection Detail in the report
"RTN","IBCNERP4",71,0)
 ; Initialize variables
"RTN","IBCNERP4",72,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",73,0)
 ;
"RTN","IBCNERP4",74,0)
 S DIR(0)="Y"
"RTN","IBCNERP4",75,0)
 S DIR("A")="      Include Rejection Detail"
"RTN","IBCNERP4",76,0)
 S DIR("B")="NO"
"RTN","IBCNERP4",77,0)
 S DIR("?",1)="  N - No, exclude Rejection Detail totals from report. (Default)"
"RTN","IBCNERP4",78,0)
 S DIR("?")="  Y - Yes, include Rejection Detail totals in report."
"RTN","IBCNERP4",79,0)
 D ^DIR K DIR
"RTN","IBCNERP4",80,0)
 I $D(DIRUT) S STOP=1 G REJDTLX
"RTN","IBCNERP4",81,0)
 S IBCNESPC("DTL")=Y
"RTN","IBCNERP4",82,0)
 ;
"RTN","IBCNERP4",83,0)
REJDTLX ; REJDTL exit point
"RTN","IBCNERP4",84,0)
 QUIT
"RTN","IBCNERP4",85,0)
 ;
"RTN","IBCNERP4",86,0)
 ;
"RTN","IBCNERP4",87,0)
DTRANGE ; Determine the start and end dates for the date range parameter
"RTN","IBCNERP4",88,0)
 ; Initialize variables
"RTN","IBCNERP4",89,0)
 NEW X,Y,DIRUT
"RTN","IBCNERP4",90,0)
 ;
"RTN","IBCNERP4",91,0)
 W !
"RTN","IBCNERP4",92,0)
 ;
"RTN","IBCNERP4",93,0)
 S DIR(0)="D^::EX"
"RTN","IBCNERP4",94,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP4",95,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Inquiry"
"RTN","IBCNERP4",96,0)
 S DIR("?")="   would have been created."
"RTN","IBCNERP4",97,0)
 D ^DIR K DIR
"RTN","IBCNERP4",98,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",99,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP4",100,0)
 ; End date
"RTN","IBCNERP4",101,0)
DTRANG1 S DIR(0)="D^::EX"
"RTN","IBCNERP4",102,0)
 S DIR("A")="  End DATE"
"RTN","IBCNERP4",103,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Inquiry"
"RTN","IBCNERP4",104,0)
 S DIR("?",2)="   would have been created.  This date must not precede"
"RTN","IBCNERP4",105,0)
 S DIR("?")="   the Start Date."
"RTN","IBCNERP4",106,0)
 D ^DIR K DIR
"RTN","IBCNERP4",107,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",108,0)
 I Y<IBCNESPC("BEGDT") D  G DTRANG1
"RTN","IBCNERP4",109,0)
 . W !,"     End Date must not precede the Start Date."
"RTN","IBCNERP4",110,0)
 . W !,"     Please reenter."
"RTN","IBCNERP4",111,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP4",112,0)
 ;
"RTN","IBCNERP4",113,0)
DTRANGX ; DTRANGE exit point
"RTN","IBCNERP4",114,0)
 QUIT
"RTN","IBCNERP4",115,0)
 ;
"RTN","IBCNERP4",116,0)
 ;
"RTN","IBCNERP4",117,0)
 ; called from IBCNERP5
"RTN","IBCNERP4",118,0)
 ; Loop through the IIV Response File (#365) 
"RTN","IBCNERP4",119,0)
 ;  By DATE/TIME RECEIVED & PAYER & PATIENT Cross-Reference ("AE")
"RTN","IBCNERP4",120,0)
 ;  
"RTN","IBCNERP4",121,0)
DATA N RDATA,RDATA1,TQDATA,IBCNEDT,IBCNEPTR,IBCNEPAT,RPYRIEN,RPYNM,PYRIEN,IBPNM,ERRCON
"RTN","IBCNERP4",122,0)
 N IBPIEN,PC,ERR,ERRTXT,PYRNM,APIEN,IBCNEPTD,TQIEN
"RTN","IBCNERP4",123,0)
 S IBCNEDT=$O(^IBCN(365,"AD",IBCNEDT1),-1)
"RTN","IBCNERP4",124,0)
 F  S IBCNEDT=$O(^IBCN(365,"AD",IBCNEDT)) Q:IBCNEDT=""!($P(IBCNEDT,".",1)>IBCNEDT2)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",125,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP4",126,0)
 . S IBCNEPAT=0
"RTN","IBCNERP4",127,0)
 . F  S IBCNEPAT=$O(^IBCN(365,"AD",IBCNEDT,IBCNEPAT)) Q:'IBCNEPAT  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",128,0)
 .. S IBCNEPTD=0
"RTN","IBCNERP4",129,0)
 .. F  S IBCNEPTD=$O(^IBCN(365,"AD",IBCNEDT,IBCNEPAT,IBCNEPTD)) Q:'IBCNEPTD  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",130,0)
 ... S IBCNEPTR=0
"RTN","IBCNERP4",131,0)
 ... F  S IBCNEPTR=$O(^IBCN(365,"AD",IBCNEDT,IBCNEPAT,IBCNEPTD,IBCNEPTR)) Q:'IBCNEPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",132,0)
 .... ; Get data from Resp File
"RTN","IBCNERP4",133,0)
 .... S RDATA=$G(^IBCN(365,IBCNEPTR,0))
"RTN","IBCNERP4",134,0)
 .... I RDATA="" Q
"RTN","IBCNERP4",135,0)
 .... ; ONLY select Transmission status 3
"RTN","IBCNERP4",136,0)
 .... I $P($G(RDATA),U,6)'=3 Q
"RTN","IBCNERP4",137,0)
 .... ; Determine Payer name from Payer File (#365.12)
"RTN","IBCNERP4",138,0)
 .... S RPYRIEN=$P($G(RDATA),U,3)
"RTN","IBCNERP4",139,0)
 .... I 'RPYRIEN Q
"RTN","IBCNERP4",140,0)
 .... ; Check payer filter
"RTN","IBCNERP4",141,0)
 .... I IBCNEPY'="",RPYRIEN'=IBCNEPY Q
"RTN","IBCNERP4",142,0)
 .... S RPYNM=$P($G(^IBE(365.12,RPYRIEN,0)),U)
"RTN","IBCNERP4",143,0)
 .... I RPYNM="" Q
"RTN","IBCNERP4",144,0)
 .... ; link to TQ file
"RTN","IBCNERP4",145,0)
 .... S TQIEN=$P($G(RDATA),U,5)
"RTN","IBCNERP4",146,0)
 .... I TQIEN="" Q
"RTN","IBCNERP4",147,0)
 .... ; Get data from TQ file (365.1)
"RTN","IBCNERP4",148,0)
 .... S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNERP4",149,0)
 .... I TQDATA="" Q
"RTN","IBCNERP4",150,0)
 .... ; Get TQ Payer from (365.1) File
"RTN","IBCNERP4",151,0)
 .... S PYRIEN=$P($G(TQDATA),U,3)
"RTN","IBCNERP4",152,0)
 .... S PYRNM=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP4",153,0)
 .... ;  Cancelled (7) - Payer deactivated
"RTN","IBCNERP4",154,0)
 .... I $P($G(TQDATA),U,4)=7 Q
"RTN","IBCNERP4",155,0)
 .... ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP4",156,0)
 .... I RPYNM'="~NO PAYER" D
"RTN","IBCNERP4",157,0)
 ..... S APIEN=$$PYRAPP^IBCNEUT5("IIV",RPYRIEN)
"RTN","IBCNERP4",158,0)
 ..... I APIEN,$P($G(^IBE(365.12,RPYRIEN,1,APIEN,0)),U,11) S $P(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*"),U,11)=$P($G(^IBE(365.12,RPYRIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP4",159,0)
 .... ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP4",160,0)
 .... I PYRNM'="~NO PAYER",PYRIEN'=RPYRIEN D
"RTN","IBCNERP4",161,0)
 ..... S APIEN=$$PYRAPP^IBCNEUT5("IIV",PYRIEN)
"RTN","IBCNERP4",162,0)
 ..... I APIEN,$P($G(^IBE(365.12,PYRIEN,1,APIEN,0)),U,11) S $P(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*"),U,11)=$P($G(^IBE(365.12,PYRIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP4",163,0)
 .... ; Get error text
"RTN","IBCNERP4",164,0)
 .... S ERRTXT=$G(^IBCN(365,IBCNEPTR,4))
"RTN","IBCNERP4",165,0)
 .... ; Now get the data from Response file for the report
"RTN","IBCNERP4",166,0)
 .... S RDATA1=$G(^IBCN(365,IBCNEPTR,1)),ERRCON=$P($G(RDATA1),U,14)
"RTN","IBCNERP4",167,0)
 .... ; Increment for non-error (GOOD) response and quit
"RTN","IBCNERP4",168,0)
 .... I ERRCON="",ERRTXT="" D  Q
"RTN","IBCNERP4",169,0)
 ..... S $P(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*"),U,6)=$P($G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*")),U,6)+1
"RTN","IBCNERP4",170,0)
 ..... ; if TQ payer was ~NO PAYER then also increment ~NO PAYER good count
"RTN","IBCNERP4",171,0)
 ..... I IBCNEPY="",(RPYRIEN'=PYRIEN),(PYRNM="~NO PAYER") S $P(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*"),U,6)=$P($G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*")),U,6)+1
"RTN","IBCNERP4",172,0)
 .... ; Rejection is defined as having a value in the Error Condition field or Error Text field
"RTN","IBCNERP4",173,0)
 .... ; Increment for error response
"RTN","IBCNERP4",174,0)
 .... S $P(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*"),U,7)=$P($G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*")),U,7)+1
"RTN","IBCNERP4",175,0)
 .... ; if TQ payer was ~NO PAYER then also increment ~NO PAYER error count
"RTN","IBCNERP4",176,0)
 .... I IBCNEPY="",(RPYRIEN'=PYRIEN),(PYRNM="~NO PAYER") S $P(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*"),U,7)=$P($G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*")),U,7)+1
"RTN","IBCNERP4",177,0)
 .... ; Store rejection detail only if user requested it
"RTN","IBCNERP4",178,0)
 .... I 'IBCNEDTL Q
"RTN","IBCNERP4",179,0)
 .... I ERRCON S ^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",ERRCON)=$G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",ERRCON))+1
"RTN","IBCNERP4",180,0)
 .... I 'ERRCON,ERRTXT'="" S ^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",0_U_ERRTXT)=$G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",0_U_ERRTXT))+1
"RTN","IBCNERP4",181,0)
 .... I IBCNEPY="",(RPYRIEN'=PYRIEN),(PYRNM="~NO PAYER") D
"RTN","IBCNERP4",182,0)
 .... . I ERRCON S ^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",ERRCON)=$G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",ERRCON))+1
"RTN","IBCNERP4",183,0)
 .... . I 'ERRCON,ERRTXT'="" S ^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",0_U_ERRTXT)=$G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",0_U_ERRTXT))+1
"RTN","IBCNERP4",184,0)
 Q
"RTN","IBCNERP5")
0^21^B48772624
"RTN","IBCNERP5",1,0)
IBCNERP5 ;DAOU/BHS - IBCNE IIV PAYER REPORT COMPILE ;03-JUN-2002
"RTN","IBCNERP5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300**;21-MAR-94
"RTN","IBCNERP5",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP5",4,0)
 ;
"RTN","IBCNERP5",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP5",6,0)
 ;
"RTN","IBCNERP5",7,0)
 ; Input variables from IBCNERP4:
"RTN","IBCNERP5",8,0)
 ;   IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",9,0)
 ;   IBCNESPC("BEGDT") = Start Date for date range
"RTN","IBCNERP5",10,0)
 ;   IBCNESPC("ENDDT") = End Date for date range
"RTN","IBCNERP5",11,0)
 ;   IBCNESPC("PYR") = Payer IEN for report, if = "", then include all
"RTN","IBCNERP5",12,0)
 ;   IBCNESPC("SORT") = 1 - Payer OR 2 - Total Inquiries
"RTN","IBCNERP5",13,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO - include Rejection Detail?
"RTN","IBCNERP5",14,0)
 ; Output variables passed to IBCNERP6:
"RTN","IBCNERP5",15,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=InqCreatedCount^InqCancelledCt^
"RTN","IBCNERP5",16,0)
 ;                                       InqQueuedCt^1stTransCount^
"RTN","IBCNERP5",17,0)
 ;                                       RetryTransCt^Non-ErrorRespCt^
"RTN","IBCNERP5",18,0)
 ;                                       ErrorRespCount^TotRespTime-days^
"RTN","IBCNERP5",19,0)
 ;                                       CommFailRespCount^PendRespCount^
"RTN","IBCNERP5",20,0)
 ;                                       eIIVDeactivatedDt
"RTN","IBCNERP5",21,0)
 ;        IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",22,0)
 ;        SORT1 = PayerName (SORT=1) or -InquiryCount(SORT=2)
"RTN","IBCNERP5",23,0)
 ;        SORT2 = PayerIEN (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP5",24,0)
 ;        SORT3 = "*" (SORT=1) or PayerIEN (SORT=2)
"RTN","IBCNERP5",25,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3,ERRCD)=RespCount
"RTN","IBCNERP5",26,0)
 ;        (see above)
"RTN","IBCNERP5",27,0)
 ;        ERRCD = Error Condition code (ptr to 365.018) or Error Text
"RTN","IBCNERP5",28,0)
 ;                from the Eligibility Communicator (4.01)
"RTN","IBCNERP5",29,0)
 ;
"RTN","IBCNERP5",30,0)
 ; Must call at EN tag
"RTN","IBCNERP5",31,0)
 Q
"RTN","IBCNERP5",32,0)
 ;
"RTN","IBCNERP5",33,0)
EN(IBCNERTN,IBCNESPC) ; Entry point
"RTN","IBCNERP5",34,0)
 ;
"RTN","IBCNERP5",35,0)
 ; Initialize variables
"RTN","IBCNERP5",36,0)
 NEW IBCNEDT,IBCNEDT1,IBCNEDT2,IBCNEPY,IBCNEPYR,IBCNEPTR
"RTN","IBCNERP5",37,0)
 NEW IBCNETOT,IBCNESRT,IBCNEDTL,RPTDATA,PYRIEN,INQS,IEN
"RTN","IBCNERP5",38,0)
 NEW IBPNM,IBPIEN,ERR,PC,PYR
"RTN","IBCNERP5",39,0)
 ;
"RTN","IBCNERP5",40,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP5",41,0)
 ;
"RTN","IBCNERP5",42,0)
 ; Total responses selected
"RTN","IBCNERP5",43,0)
 S IBCNETOT=0
"RTN","IBCNERP5",44,0)
 ;
"RTN","IBCNERP5",45,0)
 ; Kill scratch globals
"RTN","IBCNERP5",46,0)
 KILL ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",47,0)
 ;
"RTN","IBCNERP5",48,0)
 ; Initialize looping variables
"RTN","IBCNERP5",49,0)
 S IBCNEDT2=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERP5",50,0)
 S IBCNEDT1=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERP5",51,0)
 S IBCNEPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERP5",52,0)
 S IBCNESRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERP5",53,0)
 S IBCNEDTL=$G(IBCNESPC("DTL"))
"RTN","IBCNERP5",54,0)
 ;
"RTN","IBCNERP5",55,0)
 ; Loop through the IIV Transmission Queue File (#365.1) 
"RTN","IBCNERP5",56,0)
 ;  by Date/Time Created Cross-Reference
"RTN","IBCNERP5",57,0)
 S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT1),-1)
"RTN","IBCNERP5",58,0)
 F  S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT)) Q:IBCNEDT=""!($P(IBCNEDT,".",1)>IBCNEDT2)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",59,0)
 . S IBCNEPTR=0
"RTN","IBCNERP5",60,0)
 . F  S IBCNEPTR=$O(^IBCN(365.1,"AE",IBCNEDT,IBCNEPTR)) Q:'IBCNEPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",61,0)
 . . ; Update selected count
"RTN","IBCNERP5",62,0)
 . . S IBCNETOT=IBCNETOT+1
"RTN","IBCNERP5",63,0)
 . . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP5",64,0)
 . . ; Determine Payer name from Payer File (#365.12)
"RTN","IBCNERP5",65,0)
 . . S PYRIEN=$P($G(^IBCN(365.1,IBCNEPTR,0)),U,3)
"RTN","IBCNERP5",66,0)
 . . I 'PYRIEN Q
"RTN","IBCNERP5",67,0)
 . . ; Check payer filter
"RTN","IBCNERP5",68,0)
 . . I IBCNEPY'="",PYRIEN'=IBCNEPY Q
"RTN","IBCNERP5",69,0)
 . . S IBCNEPYR=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP5",70,0)
 . . I IBCNEPYR="" Q
"RTN","IBCNERP5",71,0)
 . . ; Now get the data for the report - build RPTDATA
"RTN","IBCNERP5",72,0)
 . . KILL RPTDATA
"RTN","IBCNERP5",73,0)
 . . D GETDATA(IBCNEPTR,.RPTDATA,IBCNEDTL,IBCNEPYR,PYRIEN,IBCNEPY)
"RTN","IBCNERP5",74,0)
 . . ; Loop through results by Payer Name, Payer IEN
"RTN","IBCNERP5",75,0)
 . . S IBPNM=""
"RTN","IBCNERP5",76,0)
 . . F  S IBPNM=$O(RPTDATA(IBPNM)) Q:IBPNM=""  D
"RTN","IBCNERP5",77,0)
 . . . S IBPIEN=0
"RTN","IBCNERP5",78,0)
 . . . F  S IBPIEN=$O(RPTDATA(IBPNM,IBPIEN)) Q:'IBPIEN  D
"RTN","IBCNERP5",79,0)
 . . . . ; Store totals in global
"RTN","IBCNERP5",80,0)
 . . . . F PC=1:1:10 S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,PC)=$P($G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*")),U,PC)+$P(RPTDATA(IBPNM,IBPIEN),U,PC)
"RTN","IBCNERP5",81,0)
 . . . . ; Store deactivation date/time
"RTN","IBCNERP5",82,0)
 . . . . S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,11)=$P(RPTDATA(IBPNM,IBPIEN),U,11)
"RTN","IBCNERP5",83,0)
 . . . . I 'IBCNEDTL Q
"RTN","IBCNERP5",84,0)
 . . . . ; Store rejection detail
"RTN","IBCNERP5",85,0)
 . . . . S ERR=""
"RTN","IBCNERP5",86,0)
 . . . . F  S ERR=$O(RPTDATA(IBPNM,IBPIEN,ERR)) Q:ERR=""  D
"RTN","IBCNERP5",87,0)
 . . . . .  S ^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR)=$G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR))+$G(RPTDATA(IBPNM,IBPIEN,ERR))
"RTN","IBCNERP5",88,0)
 . . Q
"RTN","IBCNERP5",89,0)
 . Q
"RTN","IBCNERP5",90,0)
 ;
"RTN","IBCNERP5",91,0)
 ; Call tag to find good/bad/rejection detail data from response file
"RTN","IBCNERP5",92,0)
 D DATA^IBCNERP4
"RTN","IBCNERP5",93,0)
 ;
"RTN","IBCNERP5",94,0)
 I $G(ZTSTOP)!(IBCNESRT=1) G EXIT
"RTN","IBCNERP5",95,0)
 ;
"RTN","IBCNERP5",96,0)
 ; Resort if sorted by Total Inquiries
"RTN","IBCNERP5",97,0)
 ; M ^TMP($J,IBCNERTN_"X")=^TMP($J,IBCNERTN)
"RTN","IBCNERP5",98,0)
 N %X,%Y,SUB2
"RTN","IBCNERP5",99,0)
 S SUB2=IBCNERTN_"X"
"RTN","IBCNERP5",100,0)
 S %X="^TMP($J,IBCNERTN,"
"RTN","IBCNERP5",101,0)
 S %Y="^TMP($J,SUB2,"
"RTN","IBCNERP5",102,0)
 I $D(^TMP($J,IBCNERTN))#10=1 S ^TMP($J,SUB2)=^TMP($J,IBCNERTN)
"RTN","IBCNERP5",103,0)
 D %XY^%RCR K %X,%Y,SUB2
"RTN","IBCNERP5",104,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP5",105,0)
 S PYR=""
"RTN","IBCNERP5",106,0)
 F  S PYR=$O(^TMP($J,IBCNERTN_"X",PYR)) Q:PYR=""  D
"RTN","IBCNERP5",107,0)
 .  S IEN=0
"RTN","IBCNERP5",108,0)
 .  F  S IEN=$O(^TMP($J,IBCNERTN_"X",PYR,IEN)) Q:'IEN  D
"RTN","IBCNERP5",109,0)
 .  .  S INQS=-$G(^TMP($J,IBCNERTN_"X",PYR,IEN,"*"))
"RTN","IBCNERP5",110,0)
 .  .  ;M ^TMP($J,IBCNERTN,INQS,PYR,IEN)=^TMP($J,IBCNERTN_"X",PYR,IEN,"*")
"RTN","IBCNERP5",111,0)
 .  .  N %X,%Y,SUB2
"RTN","IBCNERP5",112,0)
 .  .  S SUB2=IBCNERTN_"X"
"RTN","IBCNERP5",113,0)
 .  .  S %X="^TMP($J,SUB2,PYR,IEN,""*"","
"RTN","IBCNERP5",114,0)
 .  .  S %Y="^TMP($J,IBCNERTN,INQS,PYR,IEN,"
"RTN","IBCNERP5",115,0)
 .  .  I $D(^TMP($J,SUB2,PYR,IEN,"*"))#10=1 S ^TMP($J,IBCNERTN,INQS,PYR,IEN)=^TMP($J,SUB2,PYR,IEN,"*")
"RTN","IBCNERP5",116,0)
 .  .  D %XY^%RCR K %X,%Y,SUB2
"RTN","IBCNERP5",117,0)
 .  .  QUIT
"RTN","IBCNERP5",118,0)
 .  QUIT
"RTN","IBCNERP5",119,0)
 ; KILL temporary report global - used to resort
"RTN","IBCNERP5",120,0)
 KILL ^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",121,0)
 ;
"RTN","IBCNERP5",122,0)
EXIT ; EN Exit point
"RTN","IBCNERP5",123,0)
 Q
"RTN","IBCNERP5",124,0)
 ;
"RTN","IBCNERP5",125,0)
 ;
"RTN","IBCNERP5",126,0)
GETDATA(IEN,RPTDATA,DTL,PYNM,PYIEN,PYR) ; Retrieve data for this inquiry and response(s)
"RTN","IBCNERP5",127,0)
 ; Output: 
"RTN","IBCNERP5",128,0)
 ;  RPTDATA(PayerName,PayerIEN) = Created(1)^Cancelled(0/1)^Queued(0/1)^
"RTN","IBCNERP5",129,0)
 ;   #1stTrans^#Retries^#Non-ErrorResponses^#ErrorResponses^
"RTN","IBCNERP5",130,0)
 ;   #ofDaysforResponses^#Timeouts^#Pending^DeactivationDTM
"RTN","IBCNERP5",131,0)
 ;  RPTDATA(PayerName,PayerIEN,ErrCond OR ErrText) = #ErrorResps subtotal
"RTN","IBCNERP5",132,0)
 ; Initialize variables
"RTN","IBCNERP5",133,0)
 NEW HLIEN,HLID,RIEN,RDATA0,RPYIEN,RPYNM,RDATA1,ERRTXT,X1,X2,FIRST,APIEN
"RTN","IBCNERP5",134,0)
 ;
"RTN","IBCNERP5",135,0)
 S RPTDATA(PYNM,PYIEN)=1
"RTN","IBCNERP5",136,0)
 ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP5",137,0)
 S APIEN=$$PYRAPP^IBCNEUT5("IIV",PYIEN)
"RTN","IBCNERP5",138,0)
 I APIEN,$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(PYNM,PYIEN),U,11)=$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",139,0)
 ; Logic by Transmission Status
"RTN","IBCNERP5",140,0)
 ;  Cancelled (7) - Payer deactivated
"RTN","IBCNERP5",141,0)
 I $P($G(^IBCN(365.1,IEN,0)),U,4)=7 S $P(RPTDATA(PYNM,PYIEN),U,2)=1 Q
"RTN","IBCNERP5",142,0)
 ;  Queued - no HL7 messages (# Transmissions = 0) - no multiples exist
"RTN","IBCNERP5",143,0)
 I '$P($G(^IBCN(365.1,IEN,2,0)),U,3) S $P(RPTDATA(PYNM,PYIEN),U,3)=1 Q
"RTN","IBCNERP5",144,0)
 ;  Sent processing - HL7 messages associated (# Transmissions > 0)
"RTN","IBCNERP5",145,0)
 S HLIEN=0,FIRST=1
"RTN","IBCNERP5",146,0)
 F  S HLIEN=$O(^IBCN(365.1,IEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNERP5",147,0)
 .  I 'FIRST S $P(RPTDATA(PYNM,PYIEN),U,5)=$P(RPTDATA(PYNM,PYIEN),U,5)+1
"RTN","IBCNERP5",148,0)
 .  I FIRST S $P(RPTDATA(PYNM,PYIEN),U,4)=$P(RPTDATA(PYNM,PYIEN),U,4)+1,FIRST=0
"RTN","IBCNERP5",149,0)
 .  ; Process response based on HL7 Message ID
"RTN","IBCNERP5",150,0)
 .  S HLID=$P($G(^IBCN(365.1,IEN,2,HLIEN,0)),U,2) I HLID="" Q
"RTN","IBCNERP5",151,0)
 .  ; Lookup responses by HL7 Message ID
"RTN","IBCNERP5",152,0)
 .  S RIEN=0
"RTN","IBCNERP5",153,0)
 .  F  S RIEN=$O(^IBCN(365,"B",HLID,RIEN)) Q:'RIEN  D
"RTN","IBCNERP5",154,0)
 .  .  S RDATA0=$G(^IBCN(365,RIEN,0))
"RTN","IBCNERP5",155,0)
 .  .  S RPYIEN=$P(RDATA0,U,3) I RPYIEN="" Q
"RTN","IBCNERP5",156,0)
 .  .  S RPYNM=$P($G(^IBE(365.12,RPYIEN,0)),U,1) I RPYNM="" Q
"RTN","IBCNERP5",157,0)
 .  .  ; Apply payer filter here, too!
"RTN","IBCNERP5",158,0)
 .  .  ; If there is a Payer filter, check against the IEN
"RTN","IBCNERP5",159,0)
 .  .  I PYR'="",RPYIEN'=PYR Q
"RTN","IBCNERP5",160,0)
 .  .  ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP5",161,0)
 .  .  S APIEN=$$PYRAPP^IBCNEUT5("IIV",RPYIEN)
"RTN","IBCNERP5",162,0)
 .  .  I APIEN,$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(RPYNM,RPYIEN),U,11)=$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",163,0)
 .  .  S RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNERP5",164,0)
 .  .  S ERRTXT=$G(^IBCN(365,RIEN,4))
"RTN","IBCNERP5",165,0)
 .  .  ; Transmitted (Pending)
"RTN","IBCNERP5",166,0)
 .  .  I $P(RDATA0,U,6)=2 D  Q
"RTN","IBCNERP5",167,0)
 .  .  . ; Increment for response pending 
"RTN","IBCNERP5",168,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,10)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,10)+1
"RTN","IBCNERP5",169,0)
 .  .  ; Timeout (Communication Failure)
"RTN","IBCNERP5",170,0)
 .  .  I $P(RDATA0,U,6)=5 D  Q
"RTN","IBCNERP5",171,0)
 .  .  . ; Increment for response timeout 
"RTN","IBCNERP5",172,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,9)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,9)+1
"RTN","IBCNERP5",173,0)
 .  .  ; Response Received - gather additional information
"RTN","IBCNERP5",174,0)
 .  .  I $P(RDATA0,U,6)=3 D  Q
"RTN","IBCNERP5",175,0)
 .  .  . ; Determine response time (in days) as difference between 
"RTN","IBCNERP5",176,0)
 .  .  . ;  IIV Response File - Date/Time Response Received and
"RTN","IBCNERP5",177,0)
 .  .  . ;                      Date/Time Response Created (based on HL7)
"RTN","IBCNERP5",178,0)
 .  .  . S X1=$P(RDATA0,U,8)
"RTN","IBCNERP5",179,0)
 .  .  . S X2=$P(RDATA0,U,7)
"RTN","IBCNERP5",180,0)
 .  .  . ; Determine date difference in days
"RTN","IBCNERP5",181,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,8)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,8)+$$FMDIFF^XLFDT(X2,X1,1)
"RTN","IBCNERP5",182,0)
 ;
"RTN","IBCNERP5",183,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERP5",184,0)
 Q
"RTN","IBCNERP5",185,0)
 ;
"RTN","IBCNERP5",186,0)
 ;
"RTN","IBCNERPE")
0^23^B68650966
"RTN","IBCNERPE",1,0)
IBCNERPE ;DAOU/BHS - IBCNE IIV RESPONSE REPORT (cont'd);03-JUN-2002
"RTN","IBCNERPE",2,0)
 ;;2.0;INTEGRATED BILLING;**271,300**;21-MAR-94
"RTN","IBCNERPE",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPE",4,0)
 ;
"RTN","IBCNERPE",5,0)
 ; Must call at tag
"RTN","IBCNERPE",6,0)
 Q
"RTN","IBCNERPE",7,0)
 ;
"RTN","IBCNERPE",8,0)
 ; This tag is only called from IBCNERP2
"RTN","IBCNERPE",9,0)
 ;
"RTN","IBCNERPE",10,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERPE",11,0)
 ; Init
"RTN","IBCNERPE",12,0)
 N EBCT,NOTECT,EBPTR,PC,CNCT,CNPTR,NWNTCT,IBNOTES,IBERR
"RTN","IBCNERPE",13,0)
 N %,DIW,DIWI,DIWT,DIWTC,DIWX,DN,I,Z,ERRTEXT,II,FUTDT,TQIEN
"RTN","IBCNERPE",14,0)
 N FRST,IIVSTR,IIVSTAT
"RTN","IBCNERPE",15,0)
 ;
"RTN","IBCNERPE",16,0)
 ; Insured Info from IIV Response #365
"RTN","IBCNERPE",17,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERPE",18,0)
 ; Trans dates to ext format
"RTN","IBCNERPE",19,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERPE",20,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERPE",21,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERPE",22,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IEN_",",1.08,"E")   ; Whose Ins
"RTN","IBCNERPE",23,0)
 S $P(RPTDATA(1),U,9)=$$GET1^DIQ(365,IEN_",",1.09,"E")   ; Pt Rel to Sub
"RTN","IBCNERPE",24,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IEN_",",1.13,"E")  ; COB
"RTN","IBCNERPE",25,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERPE",26,0)
 S $P(RPTDATA(1),U,14)=$$X12^IBCNERP2(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERPE",27,0)
 S $P(RPTDATA(1),U,15)=$$X12^IBCNERP2(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERPE",28,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERPE",29,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERPE",30,0)
 ;
"RTN","IBCNERPE",31,0)
 ; Loop thru mult Elig/Ben segs
"RTN","IBCNERPE",32,0)
 S EBCT=0,IIVSTAT=""
"RTN","IBCNERPE",33,0)
 ; Check to see if the IIV STATUS flag was passed
"RTN","IBCNERPE",34,0)
 ; If so, set IIVSTAT to its value and update RPTDATA
"RTN","IBCNERPE",35,0)
 S FRST=$O(^IBCN(365,IEN,2,0))
"RTN","IBCNERPE",36,0)
 I FRST D
"RTN","IBCNERPE",37,0)
 . S IIVSTR=$G(^IBCN(365,IEN,2,FRST,0))
"RTN","IBCNERPE",38,0)
 . I $P(IIVSTR,U,6)="IIV Eligibility Determination" D
"RTN","IBCNERPE",39,0)
 ..  S EBCT=FRST,IIVSTAT=$P(IIVSTR,U)
"RTN","IBCNERPE",40,0)
 ..  ; Convert IEN to X12 code
"RTN","IBCNERPE",41,0)
 ..  S IIVSTAT=$$GET1^DIQ(365.02,EBCT_","_IEN_",","ELIGIBILITY/BENEFIT INFO:CODE")
"RTN","IBCNERPE",42,0)
 ..  S IIVSTAT=$S(IIVSTAT=1:"Active",IIVSTAT=6:"Inactive",1:"U")
"RTN","IBCNERPE",43,0)
 ..  S RPTDATA(2,0)=IIVSTAT,RPTDATA(2,EBCT)=""
"RTN","IBCNERPE",44,0)
 ; Error action/condition shd be flagged as Undetermined - no EC flg sent
"RTN","IBCNERPE",45,0)
 I IIVSTAT="",$P(RPTDATA(1),U,14)]""!($P(RPTDATA(1),U,15)]"") S (IIVSTAT,RPTDATA(2,0))="U"
"RTN","IBCNERPE",46,0)
 F  S EBCT=$O(^IBCN(365,IEN,2,EBCT)) Q:'EBCT  D
"RTN","IBCNERPE",47,0)
 .  S RPTDATA(2,EBCT)=$G(^IBCN(365,IEN,2,EBCT,0))
"RTN","IBCNERPE",48,0)
 .  ; Elig/Ben Info (ptr to EB01 table)
"RTN","IBCNERPE",49,0)
 .  S $P(RPTDATA(2,EBCT),U,2)=$$X12^IBCNERP2(365.011,$P(RPTDATA(2,EBCT),U,2))
"RTN","IBCNERPE",50,0)
 .  ; Cov Lvl Code (ptr to EB02 table)
"RTN","IBCNERPE",51,0)
 .  S $P(RPTDATA(2,EBCT),U,3)=$$X12^IBCNERP2(365.012,$P(RPTDATA(2,EBCT),U,3))
"RTN","IBCNERPE",52,0)
 .  ; Svc Type Code (ptr to EB03 table)
"RTN","IBCNERPE",53,0)
 .  S $P(RPTDATA(2,EBCT),U,4)=$$X12^IBCNERP2(365.013,$P(RPTDATA(2,EBCT),U,4))
"RTN","IBCNERPE",54,0)
 .  ; Ins Type Code (ptr to EB04 table)
"RTN","IBCNERPE",55,0)
 .  S $P(RPTDATA(2,EBCT),U,5)=$$X12^IBCNERP2(365.014,$P(RPTDATA(2,EBCT),U,5))
"RTN","IBCNERPE",56,0)
 .  ; Plan Cov Desc - free text
"RTN","IBCNERPE",57,0)
 .  ; Time Pd Qual (ptr to EB06 table)
"RTN","IBCNERPE",58,0)
 .  S $P(RPTDATA(2,EBCT),U,7)=$$X12^IBCNERP2(365.015,$P(RPTDATA(2,EBCT),U,7))
"RTN","IBCNERPE",59,0)
 .  ; Monetary Amt
"RTN","IBCNERPE",60,0)
 .  I $P(RPTDATA(2,EBCT),U,8)'="" S $P(RPTDATA(2,EBCT),U,8)="$"_$FN(+$P(RPTDATA(2,EBCT),U,8),",",2)
"RTN","IBCNERPE",61,0)
 .  ; Percent
"RTN","IBCNERPE",62,0)
 .  I $P(RPTDATA(2,EBCT),U,9)'="" S $P(RPTDATA(2,EBCT),U,9)=$S($P(RPTDATA(2,EBCT),U,9)<1:$P(RPTDATA(2,EBCT),U,9)*100,1:$P(RPTDATA(2,EBCT),U,9))_"%"
"RTN","IBCNERPE",63,0)
 .  ; Qty Qual (ptr to EB09)
"RTN","IBCNERPE",64,0)
 .  S $P(RPTDATA(2,EBCT),U,10)=$$X12^IBCNERP2(365.016,$P(RPTDATA(2,EBCT),U,10))
"RTN","IBCNERPE",65,0)
 .  ; Qty
"RTN","IBCNERPE",66,0)
 .  I $P(RPTDATA(2,EBCT),U,11)'="" S $P(RPTDATA(2,EBCT),U,10)=$P(RPTDATA(2,EBCT),U,11)_" "_$P(RPTDATA(2,EBCT),U,10),$P(RPTDATA(2,EBCT),U,11)=""
"RTN","IBCNERPE",67,0)
 .  ; Auth/Cert Ind (Y/N/U)
"RTN","IBCNERPE",68,0)
 .  I $P(RPTDATA(2,EBCT),U,12)'="" S $P(RPTDATA(2,EBCT),U,12)=$$GET1^DIQ(365.02,EBCT_","_IEN_",",.12,"E")
"RTN","IBCNERPE",69,0)
 .  ; In-Plan Network Ind (Y/N/U)
"RTN","IBCNERPE",70,0)
 .  I $P(RPTDATA(2,EBCT),U,13)'="" S $P(RPTDATA(2,EBCT),U,13)=$$GET1^DIQ(365.02,EBCT_","_IEN_",",.13,"E")
"RTN","IBCNERPE",71,0)
 .  ; Loop thru Notes (wp) - format to 70 chars
"RTN","IBCNERPE",72,0)
 .  S (NOTECT,NWNTCT)=0
"RTN","IBCNERPE",73,0)
 .  F  S NOTECT=$O(^IBCN(365,IEN,2,EBCT,2,NOTECT)) Q:'NOTECT  D
"RTN","IBCNERPE",74,0)
 .  .  D FSTRNG^IBJU1($G(^IBCN(365,IEN,2,EBCT,2,NOTECT,0)),70,.IBNOTES)
"RTN","IBCNERPE",75,0)
 .  .  ; Loop thru text (70 chars wide)
"RTN","IBCNERPE",76,0)
 .  .  S II=0
"RTN","IBCNERPE",77,0)
 .  .  F  S II=$O(IBNOTES(II)) Q:'II  I $G(IBNOTES(II))'="" D
"RTN","IBCNERPE",78,0)
 .  .  .  S NWNTCT=NWNTCT+1
"RTN","IBCNERPE",79,0)
 .  .  .  S RPTDATA(2,EBCT,NWNTCT)=$G(IBNOTES(II))
"RTN","IBCNERPE",80,0)
 ;
"RTN","IBCNERPE",81,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERPE",82,0)
 S CNCT=0
"RTN","IBCNERPE",83,0)
 F  S CNCT=$O(^IBCN(365,IEN,3,CNCT)) Q:'CNCT  D
"RTN","IBCNERPE",84,0)
 .  S RPTDATA(3,CNCT)=$G(^IBCN(365,IEN,3,CNCT,0))
"RTN","IBCNERPE",85,0)
 .  ; Disp. blank if NOT SPECIFIED
"RTN","IBCNERPE",86,0)
 .  I $P(RPTDATA(3,CNCT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CNCT),U)=""
"RTN","IBCNERPE",87,0)
 .  ; Comm Qual #1-3
"RTN","IBCNERPE",88,0)
 .  F II=1:1:3 D
"RTN","IBCNERPE",89,0)
 .  . S CNPTR=$$X12^IBCNERP2(365.021,$P(RPTDATA(3,CNCT),U,II*2))
"RTN","IBCNERPE",90,0)
 .  . I CNPTR'="" S $P(RPTDATA(3,CNCT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CNCT),U,II*2+1),$P(RPTDATA(3,CNCT),U,II*2+1)=""
"RTN","IBCNERPE",91,0)
 ;
"RTN","IBCNERPE",92,0)
 ; Error Txt
"RTN","IBCNERPE",93,0)
 S ERRTEXT=$G(^IBCN(365,IEN,4))
"RTN","IBCNERPE",94,0)
 ; Error text shd be flagged as Undetermined - no EC flg sent
"RTN","IBCNERPE",95,0)
 I IIVSTAT="" S (IIVSTAT,RPTDATA(2,0))="U"
"RTN","IBCNERPE",96,0)
 I ERRTEXT="" G FUTDT
"RTN","IBCNERPE",97,0)
 D FSTRNG^IBJU1(ERRTEXT,60,.IBERR)
"RTN","IBCNERPE",98,0)
 ; Loop thru text (60 chars)
"RTN","IBCNERPE",99,0)
 S II=0
"RTN","IBCNERPE",100,0)
 F  S II=$O(IBERR(II)) Q:'II  I $G(IBERR(II))'="" D
"RTN","IBCNERPE",101,0)
 .  S RPTDATA(4,II)=$G(IBERR(II))
"RTN","IBCNERPE",102,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERPE",103,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERPE",104,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERPE",105,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERPE",106,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERPE",107,0)
 ; 
"RTN","IBCNERPE",108,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERPE",109,0)
 Q
"RTN","IBCNERPE",110,0)
 ;
"RTN","IBCNERPE",111,0)
 ; This tag is only called from IBCNERP3
"RTN","IBCNERPE",112,0)
 ;
"RTN","IBCNERPE",113,0)
DATA(DISPDATA)  ;  Build disp lines
"RTN","IBCNERPE",114,0)
 N LCT,EBCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA
"RTN","IBCNERPE",115,0)
 ; Merge into local array
"RTN","IBCNERPE",116,0)
 ;M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",117,0)
 N %X,%Y
"RTN","IBCNERPE",118,0)
 S %X="^TMP($J,RTN,SORT1,SORT2,CNT,"
"RTN","IBCNERPE",119,0)
 S %Y="RPTDATA("
"RTN","IBCNERPE",120,0)
 I $D(^TMP($J,RTN,SORT1,SORT2,CNT))#10=1 S RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",121,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERPE",122,0)
 ; Build
"RTN","IBCNERPE",123,0)
 S LCT=1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.01),17,"R")_$P(RPTDATA(1),U,1)
"RTN","IBCNERPE",124,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.05),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,5),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),22,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERPE",125,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERPE",126,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.06),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,6),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.07),22,"R")_$P(RPTDATA(1),U,7)
"RTN","IBCNERPE",127,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.09),22,"R")_$P(RPTDATA(1),U,9)
"RTN","IBCNERPE",128,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERPE",129,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERPE",130,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERPE",131,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERPE",132,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERPE",133,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.2),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,20),20)
"RTN","IBCNERPE",134,0)
 S LCT=LCT+1
"RTN","IBCNERPE",135,0)
 ; Elig/Ben - added sorted EB notes to DISPDATA and update LCT (line ct)
"RTN","IBCNERPE",136,0)
 D EBDISP^IBCNERPA(.RPTDATA,.DISPDATA,.LCT)
"RTN","IBCNERPE",137,0)
 ;
"RTN","IBCNERPE",138,0)
 ; Contacts
"RTN","IBCNERPE",139,0)
CONT S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERPE",140,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Contact Information:",LCT=LCT+1
"RTN","IBCNERPE",141,0)
 ; Build
"RTN","IBCNERPE",142,0)
 F CT=1:1:CNCT D
"RTN","IBCNERPE",143,0)
 . S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",144,0)
 . S SEGCT=$L(RPTDATA(3,CT),U)
"RTN","IBCNERPE",145,0)
 . F CT2=1:1:SEGCT S ITEM=$P(RPTDATA(3,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPE",146,0)
 . . I $L(ITEM)+$L(DISPDATA(LCT))>74 S LCT=LCT+1,DISPDATA(LCT)=" "_ITEM Q
"RTN","IBCNERPE",147,0)
 . . I DISPDATA(LCT)'=" " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERPE",148,0)
 . . S DISPDATA(LCT)=" "_ITEM
"RTN","IBCNERPE",149,0)
 . S LCT=LCT+1
"RTN","IBCNERPE",150,0)
 ; Err Info
"RTN","IBCNERPE",151,0)
ERR I $P(RPTDATA(1),U,14)="",$P(RPTDATA(1),U,15)="",'$O(RPTDATA(4,""),-1) G DATAX
"RTN","IBCNERPE",152,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",153,0)
 S DISPDATA(LCT)="Error Information:",LCT=LCT+1
"RTN","IBCNERPE",154,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",155,0)
 I $P(RPTDATA(1),U,14)'="" D
"RTN","IBCNERPE",156,0)
 . ; Split text, if necessary
"RTN","IBCNERPE",157,0)
 . N IBERR,IBTOT,IBCT
"RTN","IBCNERPE",158,0)
 . D FSTRNG^IBJU1($P(RPTDATA(1),U,14),60,.IBERR)
"RTN","IBCNERPE",159,0)
 . S IBTOT=$O(IBERR(""),-1)
"RTN","IBCNERPE",160,0)
 . F IBCT=1:1:IBTOT S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($S(IBCT=1:$$LBL^IBCNERP2(365,1.14),1:" "),17,"R")_$G(IBERR(IBCT)),LCT=LCT+1
"RTN","IBCNERPE",161,0)
 I $P(RPTDATA(1),U,15)'="" D
"RTN","IBCNERPE",162,0)
 . ; Split text, if necessary
"RTN","IBCNERPE",163,0)
 . N IBERR,IBTOT,IBCT
"RTN","IBCNERPE",164,0)
 . D FSTRNG^IBJU1($P(RPTDATA(1),U,15),60,.IBERR)
"RTN","IBCNERPE",165,0)
 . S IBTOT=$O(IBERR(""),-1)
"RTN","IBCNERPE",166,0)
 . F IBCT=1:1:IBTOT S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($S(IBCT=1:$$LBL^IBCNERP2(365,1.15),1:" "),17,"R")_$G(IBERR(IBCT)),LCT=LCT+1
"RTN","IBCNERPE",167,0)
 ; Disp Err Txt
"RTN","IBCNERPE",168,0)
 F CT=1:1:+$O(RPTDATA(4,""),-1) D
"RTN","IBCNERPE",169,0)
 . I CT=1 S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,4.01),17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1 Q
"RTN","IBCNERPE",170,0)
 . S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1
"RTN","IBCNERPE",171,0)
DATAX ;
"RTN","IBCNERPE",172,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERPE",173,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERPE",174,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERPE",175,0)
 .. S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT)),LCT=LCT+1
"RTN","IBCNERPE",176,0)
 ;
"RTN","IBCNERPE",177,0)
 Q
"RTN","IBY300PS")
0^^B389194
"RTN","IBY300PS",1,0)
IBY300PS ;;DAOU/DJW - Post Installation Program ;21-JUNE-2005
"RTN","IBY300PS",2,0)
 ;;2.0;INTEGRATED BILLING;**300**;21-MAR-94
"RTN","IBY300PS",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBY300PS",4,0)
 ;
"RTN","IBY300PS",5,0)
 ;
"RTN","IBY300PS",6,0)
 ;Program Description: This is the post install routine for IB*2.0*300
"RTN","IBY300PS",7,0)
 ;
"RTN","IBY300PS",8,0)
 ; Send IIV registration message to tell the receiving end that this site is 
"RTN","IBY300PS",9,0)
 ; to receive the IIV HL7 message format compatible with this patch. 
"RTN","IBY300PS",10,0)
 ;  (Registration message with Version number 3.)
"RTN","IBY300PS",11,0)
 D ^IBCNEHLM
"RTN","IBY300PS",12,0)
 ;
"RTN","IBY300PS",13,0)
 Q
"VER")
8.0^22.0
"^DD",365,365,1.19,0)
PAYER UPDATED POLICY^D^^1;19^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",365,365,1.19,.1)
Payer Updated Policy
"^DD",365,365,1.19,3)
Enter the date the payer updated their record of this policy.
"^DD",365,365,1.19,21,0)
^.001^3^3^3051007^^
"^DD",365,365,1.19,21,1,0)
The date/time that the payer indicated they had updated their record of 
"^DD",365,365,1.19,21,2,0)
this policy.  This date/time was received by IIV from the Eligibility
"^DD",365,365,1.19,21,3,0)
Communicator.
"^DD",365,365,1.19,"DT")
3050720
"^DD",365,365,1.2,0)
POLICY NUMBER^F^^1;20^K:$L(X)>30!($L(X)<1) X
"^DD",365,365,1.2,.1)
Policy Number
"^DD",365,365,1.2,3)
Answer must be 1-30 characters in length.
"^DD",365,365,1.2,21,0)
^^2^2^3051007^
"^DD",365,365,1.2,21,1,0)
This field may be returned by the payer.  It is the policy number of the 
"^DD",365,365,1.2,21,2,0)
insured person.
"^DD",365,365,1.2,"DT")
3051007
"BLD",5553,6)
^297
**END**
**END**
