EMERGENCY Released PRS*4*102 SEQ #92
Extracted from mail message
**KIDS**:PRS*4.0*102^

**INSTALL NAME**
PRS*4.0*102
"BLD",6507,0)
PRS*4.0*102^PAID^0^3060209^y
"BLD",6507,1,0)
^^1^1^3051130^
"BLD",6507,1,1,0)
See patch description on Forum for complete details of this patch.
"BLD",6507,4,0)
^9.64PA^455.1^2
"BLD",6507,4,455.1,0)
455.1
"BLD",6507,4,455.1,222)
n^n^f^^n^^y^r^n
"BLD",6507,4,455.1,223)

"BLD",6507,4,455.1,224)
I $P($G(^PRST(455.1,Y,0)),"^",1)=143
"BLD",6507,4,457.5,0)
457.5
"BLD",6507,4,457.5,222)
n^n^f^^n^^y^o^n
"BLD",6507,4,457.5,224)

"BLD",6507,4,"B",455.1,455.1)

"BLD",6507,4,"B",457.5,457.5)

"BLD",6507,"KRN",0)
^9.67PA^8989.52^19
"BLD",6507,"KRN",.4,0)
.4
"BLD",6507,"KRN",.4,"NM",0)
^9.68A^^
"BLD",6507,"KRN",.401,0)
.401
"BLD",6507,"KRN",.402,0)
.402
"BLD",6507,"KRN",.403,0)
.403
"BLD",6507,"KRN",.5,0)
.5
"BLD",6507,"KRN",.84,0)
.84
"BLD",6507,"KRN",3.6,0)
3.6
"BLD",6507,"KRN",3.8,0)
3.8
"BLD",6507,"KRN",9.2,0)
9.2
"BLD",6507,"KRN",9.8,0)
9.8
"BLD",6507,"KRN",9.8,"NM",0)
^9.68A^16^16
"BLD",6507,"KRN",9.8,"NM",1,0)
PRSATP^^0^B19887527
"BLD",6507,"KRN",9.8,"NM",2,0)
PRSATP3^^0^B18838641
"BLD",6507,"KRN",9.8,"NM",3,0)
PRSATP4^^0^B2434017
"BLD",6507,"KRN",9.8,"NM",4,0)
PRSATP5^^0^B28158534
"BLD",6507,"KRN",9.8,"NM",5,0)
PRSATP6^^0^B5009394
"BLD",6507,"KRN",9.8,"NM",6,0)
PRSATP7^^0^B4880229
"BLD",6507,"KRN",9.8,"NM",7,0)
PRS8OTFF^^0^B12536879
"BLD",6507,"KRN",9.8,"NM",8,0)
PRSATPE^^0^B24687644
"BLD",6507,"KRN",9.8,"NM",9,0)
PRSATP8^^0^B23114322
"BLD",6507,"KRN",9.8,"NM",10,0)
PRS8HR^^0^B41812105
"BLD",6507,"KRN",9.8,"NM",11,0)
PRS8HROT^^0^B3467629
"BLD",6507,"KRN",9.8,"NM",12,0)
PRS8HRSV^^0^B37540189
"BLD",6507,"KRN",9.8,"NM",13,0)
PRS8MT^^0^B24828322
"BLD",6507,"KRN",9.8,"NM",14,0)
PRS8ST^^0^B26297736
"BLD",6507,"KRN",9.8,"NM",15,0)
PRSACED3^^0^B12520973
"BLD",6507,"KRN",9.8,"NM",16,0)
PRSACED5^^0^B6094695
"BLD",6507,"KRN",9.8,"NM","B","PRS8HR",10)

"BLD",6507,"KRN",9.8,"NM","B","PRS8HROT",11)

"BLD",6507,"KRN",9.8,"NM","B","PRS8HRSV",12)

"BLD",6507,"KRN",9.8,"NM","B","PRS8MT",13)

"BLD",6507,"KRN",9.8,"NM","B","PRS8OTFF",7)

"BLD",6507,"KRN",9.8,"NM","B","PRS8ST",14)

"BLD",6507,"KRN",9.8,"NM","B","PRSACED3",15)

"BLD",6507,"KRN",9.8,"NM","B","PRSACED5",16)

"BLD",6507,"KRN",9.8,"NM","B","PRSATP",1)

"BLD",6507,"KRN",9.8,"NM","B","PRSATP3",2)

"BLD",6507,"KRN",9.8,"NM","B","PRSATP4",3)

"BLD",6507,"KRN",9.8,"NM","B","PRSATP5",4)

"BLD",6507,"KRN",9.8,"NM","B","PRSATP6",5)

"BLD",6507,"KRN",9.8,"NM","B","PRSATP7",6)

"BLD",6507,"KRN",9.8,"NM","B","PRSATP8",9)

"BLD",6507,"KRN",9.8,"NM","B","PRSATPE",8)

"BLD",6507,"KRN",19,0)
19
"BLD",6507,"KRN",19.1,0)
19.1
"BLD",6507,"KRN",101,0)
101
"BLD",6507,"KRN",409.61,0)
409.61
"BLD",6507,"KRN",771,0)
771
"BLD",6507,"KRN",870,0)
870
"BLD",6507,"KRN",8989.51,0)
8989.51
"BLD",6507,"KRN",8989.52,0)
8989.52
"BLD",6507,"KRN",8994,0)
8994
"BLD",6507,"KRN","B",.4,.4)

"BLD",6507,"KRN","B",.401,.401)

"BLD",6507,"KRN","B",.402,.402)

"BLD",6507,"KRN","B",.403,.403)

"BLD",6507,"KRN","B",.5,.5)

"BLD",6507,"KRN","B",.84,.84)

"BLD",6507,"KRN","B",3.6,3.6)

"BLD",6507,"KRN","B",3.8,3.8)

"BLD",6507,"KRN","B",9.2,9.2)

"BLD",6507,"KRN","B",9.8,9.8)

"BLD",6507,"KRN","B",19,19)

"BLD",6507,"KRN","B",19.1,19.1)

"BLD",6507,"KRN","B",101,101)

"BLD",6507,"KRN","B",409.61,409.61)

"BLD",6507,"KRN","B",771,771)

"BLD",6507,"KRN","B",870,870)

"BLD",6507,"KRN","B",8989.51,8989.51)

"BLD",6507,"KRN","B",8989.52,8989.52)

"BLD",6507,"KRN","B",8994,8994)

"BLD",6507,"QUES",0)
^9.62^^
"BLD",6507,"REQB",0)
^9.611^4^4
"BLD",6507,"REQB",1,0)
PRS*4.0*54^1
"BLD",6507,"REQB",2,0)
PRS*4.0*69^1
"BLD",6507,"REQB",3,0)
PRS*4.0*96^1
"BLD",6507,"REQB",4,0)
PRS*4.0*92^1
"BLD",6507,"REQB","B","PRS*4.0*54",1)

"BLD",6507,"REQB","B","PRS*4.0*69",2)

"BLD",6507,"REQB","B","PRS*4.0*92",4)

"BLD",6507,"REQB","B","PRS*4.0*96",3)

"DATA",455.1,143,0)
143
"DATA",455.1,143,"E",0)
^^1^1^3060209^
"DATA",455.1,143,"E",1,0)
With DA or DE, Pay Plan must be 0-9, A, G, K, M, N or U
"DATA",457.5,1,0)
0 1 E^01E
"DATA",457.5,1,1)
H00111101111110100100111000101101111100
"DATA",457.5,6,0)
0 1 N^01N
"DATA",457.5,6,1)
H00001101111110101111111000101101111100
"DATA",457.5,7,0)
0 2 E^02E
"DATA",457.5,7,1)
HH0111100001110100100111000101101111100
"DATA",457.5,12,0)
0 2 N^02N
"DATA",457.5,12,1)
HH0001100001110101111111000101101111100
"DATA",457.5,13,0)
0 3 N^03N
"DATA",457.5,13,1)
0H0000000001110100111000000000000000100
"DATA",457.5,14,0)
0 3 E^03E
"DATA",457.5,14,1)
0H0110000001110100100000000000000000100
"DATA",457.5,15,0)
A 1 E^A1E
"DATA",457.5,15,1)
H00001001001001000100100000101101111100
"DATA",457.5,16,0)
A 1 N PPI=X^A1NX
"DATA",457.5,16,1)
H00001001001001001100100010101101111100
"DATA",457.5,17,0)
A 1 E PPI=X^A1EX
"DATA",457.5,17,1)
H00001001001001000100100010101101111100
"DATA",457.5,18,0)
A 1 E PPI=E,F^A1EE
"DATA",457.5,18,1)
H00001011001001000100100110101101111100
"DATA",457.5,19,0)
A 1 N PPI=Y^A1NY
"DATA",457.5,19,1)
H00000000001001001100000001111101111100
"DATA",457.5,20,0)
A 1 N PPI=W^A1NW
"DATA",457.5,20,1)
H00001001001001011100100011111101111100
"DATA",457.5,21,0)
A 1 N NH>80^A1N*
"DATA",457.5,21,1)
H00000000001001001100000000101101111101
"DATA",457.5,22,0)
A 1 N^A1N
"DATA",457.5,22,1)
H00001001001001001100100000101101111100
"DATA",457.5,23,0)
A 2 E PPI=E,F^A2EE
"DATA",457.5,23,1)
HH0001011001001000100100110101101111100
"DATA",457.5,24,0)
A 2 E^A2E
"DATA",457.5,24,1)
HH0001000001001000100100000101101111100
"DATA",457.5,25,0)
A 2 E PPI=X^A2EX
"DATA",457.5,25,1)
HH0001000001001000100100010101101111100
"DATA",457.5,26,0)
A 2 N PPI=X^A2NX
"DATA",457.5,26,1)
HH0001000001001001100100010101101111100
"DATA",457.5,27,0)
A 2 N PPI=W^A2NW
"DATA",457.5,27,1)
HH0001000001001011100100011111101111100
"DATA",457.5,28,0)
A 2 N PPI=Y^A2NY
"DATA",457.5,28,1)
HH0000000001001001100100001111101111100
"DATA",457.5,29,0)
A 2 N^A2N
"DATA",457.5,29,1)
HH0001000001001001100100000101101111100
"DATA",457.5,30,0)
A 3 E PPI=E,F^A3EE
"DATA",457.5,30,1)
0H0001011001001000100100110000000000100
"DATA",457.5,31,0)
A 3 E^A3E
"DATA",457.5,31,1)
0H0000000001001000100000000000000000100
"DATA",457.5,32,0)
A 3 N^A3N
"DATA",457.5,32,1)
0H0000000001001000100000000000000000100
"DATA",457.5,36,0)
E 1 E^E1E
"DATA",457.5,36,1)
H00000000000000000000000000001101111100
"DATA",457.5,37,0)
E 2 E^E2E
"DATA",457.5,37,1)
HH0000000000000000000000000001101111100
"DATA",457.5,38,0)
E 3 E^E3E
"DATA",457.5,38,1)
0H0000000000000000000000000000000000100
"DATA",457.5,39,0)
G 1 N^G1N
"DATA",457.5,39,1)
H00001001001001001100100000001101011100
"DATA",457.5,40,0)
G 2 N^G2N
"DATA",457.5,40,1)
HH0001000001001001100100000001101011100
"DATA",457.5,41,0)
G 3 N TYP-APPT=8^G3N8
"DATA",457.5,41,1)
0H0000000001000100111000000000000000100
"DATA",457.5,42,0)
G 3 N^G3N
"DATA",457.5,42,1)
0H0000000001001000100000000000000000100
"DATA",457.5,43,0)
J 1 E^J1E
"DATA",457.5,43,1)
D00000000000000000000000000001101111100
"DATA",457.5,44,0)
K 1 E^K1E
"DATA",457.5,44,1)
H00001011001000000100100110101101111100
"DATA",457.5,45,0)
K 1 E NH=48^K1EB
"DATA",457.5,45,1)
H00001000001000000000100100101101111100
"DATA",457.5,46,0)
L 1 E LVG=5^L1E*
"DATA",457.5,46,1)
D00000000000000000000000000001111011100
"DATA",457.5,47,0)
L 1 E^L1E
"DATA",457.5,47,1)
D00000000000000000000000000001101111100
"DATA",457.5,48,0)
L 2 E PAY BASIS=0^L2E*
"DATA",457.5,48,1)
0D0000000000000000000000000000000000100
"DATA",457.5,49,0)
L 2 E^L2E
"DATA",457.5,49,1)
HH0000000000000000000000000001101111100
"DATA",457.5,50,0)
L 3 E^L3E
"DATA",457.5,50,1)
0H0000000000000000000000000000000000100
"DATA",457.5,51,0)
M 1 E^M1E
"DATA",457.5,51,1)
H00001011001000000100100110101101111100
"DATA",457.5,52,0)
M 1 E NH=48^M1EB
"DATA",457.5,52,1)
H00001000001000000000100100101101111100
"DATA",457.5,53,0)
M 1 E OCC=Trainee^M1ET
"DATA",457.5,53,1)
H00000000000000000000000000001101011100
"DATA",457.5,54,0)
M 2 E^M2E
"DATA",457.5,54,1)
HH0001011001000000100100110101101111100
"DATA",457.5,55,0)
M 2 E OCC=Trainee^M2ET
"DATA",457.5,55,1)
HH0000000000000000000000000001101011100
"DATA",457.5,56,0)
M 3 E^M3E
"DATA",457.5,56,1)
0H0001011001000000100100110000000000100
"DATA",457.5,57,0)
M 3 E OCC=Trainee^M3ET
"DATA",457.5,57,1)
0H0000000000000000000000000000000000100
"DATA",457.5,58,0)
N 1 E^N1E
"DATA",457.5,58,1)
H00001001001001000100100000101101111100
"DATA",457.5,59,0)
N 1 N^N1N
"DATA",457.5,59,1)
H00001001001001000100100000101101111100
"DATA",457.5,60,0)
N 1 N ASSGN=TR-Tn-An^N1NT
"DATA",457.5,60,1)
H00000000000000000000000000001101011100
"DATA",457.5,61,0)
N 2 N ASSGN=TR-Tn-An^N2NT
"DATA",457.5,61,1)
HH0000000000000000000000000001101011100
"DATA",457.5,62,0)
N 2 E^N2E
"DATA",457.5,62,1)
HH0001000001001000100100000101101111100
"DATA",457.5,63,0)
N 2 N^N2N
"DATA",457.5,63,1)
HH0001000001001000100100000101101111100
"DATA",457.5,64,0)
N 3 E PAY BASIS=$^N3E$
"DATA",457.5,64,1)
000000000000000000000000000000000000100
"DATA",457.5,65,0)
N 3 N ASSGN=TR-Tn-An^N3NT
"DATA",457.5,65,1)
0H0000000000000000000000000000000000100
"DATA",457.5,66,0)
N 3 E^N3E
"DATA",457.5,66,1)
0H0000000001001000100000000000000000100
"DATA",457.5,67,0)
N 3 N^N3N
"DATA",457.5,67,1)
0H0000000001001000100000000000000000100
"DATA",457.5,68,0)
P 1 E^P1E
"DATA",457.5,68,1)
D00000000000000000000000000001101111100
"DATA",457.5,69,0)
Q 1 E^Q1E
"DATA",457.5,69,1)
D00000000000000000000000000001101111100
"DATA",457.5,70,0)
Q 2 E^Q2E
"DATA",457.5,70,1)
HH0000000000000000000000000001101111100
"DATA",457.5,71,0)
Q 2 E PAY BASIS=0^Q2E0
"DATA",457.5,71,1)
0D0000000000000000000000000000000000100
"DATA",457.5,72,0)
Q 3 E^Q3E
"DATA",457.5,72,1)
0H0000000000000000000000000000000000100
"DATA",457.5,73,0)
R 1 E^R1E
"DATA",457.5,73,1)
H00000000000000000000000000001101011100
"DATA",457.5,74,0)
R 2 E^R2E
"DATA",457.5,74,1)
HH0000000000000000000000000001101011100
"DATA",457.5,75,0)
R 3 E^R3E
"DATA",457.5,75,1)
0H0000000000000000000000000000000000100
"DATA",457.5,76,0)
S 1 E^S1E
"DATA",457.5,76,1)
000000000000000000000000000000000000000
"DATA",457.5,77,0)
T 1 E^T1E
"DATA",457.5,77,1)
H00000000000000000000000000001101011100
"DATA",457.5,78,0)
T 2 E^T2E
"DATA",457.5,78,1)
HH0000000000000000000000000001101011100
"DATA",457.5,79,0)
T 3 E PAY BASIS=9^T3E9
"DATA",457.5,79,1)
0D0000000000000000000000000000000000100
"DATA",457.5,80,0)
T 3 E^T3E
"DATA",457.5,80,1)
0H0000000000000000000000000000000000100
"DATA",457.5,81,0)
U 1 E PAY BASIS=H13^U1E
"DATA",457.5,81,1)
H00001001001000000100100000101101111100
"DATA",457.5,82,0)
U 1 N PAY BASIS=ETX27^U1N
"DATA",457.5,82,1)
H00001101111110001111111000101101111100
"DATA",457.5,83,0)
U 1 N PAY BASIS=P^U1NP
"DATA",457.5,83,1)
H00000000000000000000000000001101111110
"DATA",457.5,85,0)
U 2 E PAY BASIS=H13^U2E
"DATA",457.5,85,1)
HH0001000001000000100100000101101111100
"DATA",457.5,87,0)
U 2 N PAY BASIS=P^U2NP
"DATA",457.5,87,1)
HH0000000000000000000000000001101111110
"DATA",457.5,88,0)
U 2 N PAY BASIS=ETX27^U2N
"DATA",457.5,88,1)
HH0001100001110001111111000101101111100
"DATA",457.5,89,0)
U 3 E PAY BASIS=H13^U3E
"DATA",457.5,89,1)
0H0000000001000000100000000000000000100
"DATA",457.5,90,0)
U 3 N PAY BASIS=P^U3NP
"DATA",457.5,90,1)
0H0000000000000000000000000000000000110
"DATA",457.5,91,0)
U 3 N PAY BASIS=ETX27^U3N
"DATA",457.5,91,1)
0H0001000001110000111000000000000000100
"DATA",457.5,92,0)
W 1 E^W1E
"DATA",457.5,92,1)
H00000000000000000000000000001101111100
"DATA",457.5,93,0)
X 1 E^X1E
"DATA",457.5,93,1)
H00000000000000000000000000001101111100
"DATA",457.5,94,0)
X 1 E NH=00^X1E0
"DATA",457.5,94,1)
D00000000000000000000000000001101111100
"DATA",457.5,95,0)
Y 1 E^Y1E
"DATA",457.5,95,1)
D00000000000000000000000000001101111100
"DATA",457.5,96,0)
A 1 E NH>80^A1E*
"DATA",457.5,96,1)
H00000000001001000000000000101101111101
"DATA",457.5,97,0)
A 1 E PPI=Y^A1EY
"DATA",457.5,97,1)
H00000000001001000100000001111101111100
"DATA",457.5,98,0)
A 1 E PPI=W^A1EW
"DATA",457.5,98,1)
H00001001001001010100100011111101111100
"DATA",457.5,99,0)
A 2 E PPI=Y^A2EY
"DATA",457.5,99,1)
HH0000000001001000100100001111101111100
"DATA",457.5,100,0)
A 2 E PPI=W^A2EW
"DATA",457.5,100,1)
HH0001000001001010100100011111101111100
"DATA",457.5,101,0)
M 2 E PAY BASIS=0^M2E0
"DATA",457.5,101,1)
0D0000000000000000000000000000000000100
"DATA",457.5,102,0)
N 2 E PAY BASIS=0^N2E0
"DATA",457.5,102,1)
0D0000000000000000000000000000000000100
"DATA",457.5,103,0)
N 1 E ASSGN=TR-Tn-An^N1ET
"DATA",457.5,103,1)
H00000000000000000000000000001101011100
"DATA",457.5,104,0)
N 2 E ASSGN=TR-Tn-An^N2ET
"DATA",457.5,104,1)
HH0000000000000000000000000001101011100
"DATA",457.5,105,0)
N 3 E ASSGN=TR-Tn-An^N3ET
"DATA",457.5,105,1)
0H0000000000000000000000000000000000100
"DATA",457.5,106,0)
N 3 N PAY BASIS=$^N3N$
"DATA",457.5,106,1)
000000000000000000000000000000000000100
"DATA",457.5,107,0)
M 3 E PB=2^M3E2
"DATA",457.5,107,1)
0H0000000000000000000000000000000000100
"DATA",457.5,108,0)
L 3 E RESIDENT^L3E*
"DATA",457.5,108,1)
0D0000000000000000000000000000000000100
"DATA",457.5,109,0)
F 3 E^F3E
"DATA",457.5,109,1)
000000000000000000000000000000000000100
"DATA",457.5,110,0)
A Q E PPI=O^A1EO
"DATA",457.5,110,1)
H01000000001000000000000000101101111101
"DATA",457.5,111,0)
A 1 E PPI=R^A1ER
"DATA",457.5,111,1)
HH1000000001000000000000000101101111101
"DATA",457.5,112,0)
A 1 N PPI=R^A1NR
"DATA",457.5,112,1)
HH1000000001000001000000000101101111101
"DATA",457.5,113,0)
A 1 E PPI=C^A1EC
"DATA",457.5,113,1)
HH1000000001000000000000000101101111101
"DATA",457.5,114,0)
A 1 N PPI=C^A1NC
"DATA",457.5,114,1)
HH1000000001000001000000000101101111101
"DATA",457.5,115,0)
A 1 E PPI=S^A1ES
"DATA",457.5,115,1)
H00001011001001000100100000101101111100
"DATA",457.5,116,0)
A 1 E PPI=V^A1EV
"DATA",457.5,116,1)
H00001011001001010100100011111101111100
"DATA",457.5,117,0)
A 1 E PPI=T^A1ET
"DATA",457.5,117,1)
H00001011001001000100100010101101111100
"DATA",457.5,118,0)
A 1 E PPI=U^A1EU
"DATA",457.5,118,1)
H00000010001001000100000001111101111100
"DATA",457.5,119,0)
A 1 N PPI=S^A1NS
"DATA",457.5,119,1)
H00001011001001001100100000101101111100
"DATA",457.5,120,0)
A 1 N PPI=V^A1NV
"DATA",457.5,120,1)
H00001011001001011100100011111101111100
"DATA",457.5,121,0)
A 1 N PPI=T^A1NT
"DATA",457.5,121,1)
H00001011001001001100100010101101111100
"DATA",457.5,122,0)
A 1 N PPI=U^A1NU
"DATA",457.5,122,1)
H00000010001001001100000001111101111100
"DATA",457.5,123,0)
A 2 E PPI=S^A2ES
"DATA",457.5,123,1)
HH0001011001001000100100000101101111100
"DATA",457.5,124,0)
A 2 E PPI=V^A2EV
"DATA",457.5,124,1)
HH0001011001001010100100011111101111100
"DATA",457.5,125,0)
A 2 E PPI=T^A2ET
"DATA",457.5,125,1)
HH0001011001001000100100010101101111100
"DATA",457.5,126,0)
A 2 E PPI=U^A2EU
"DATA",457.5,126,1)
HH0000010001001000100100001111101111100
"DATA",457.5,127,0)
A 2 N PPI=S^A2NS
"DATA",457.5,127,1)
HH0001011001001001100100000101101111100
"DATA",457.5,128,0)
A 2 N PPI=V^A2NV
"DATA",457.5,128,1)
HH0001011001001011100100011111101111100
"DATA",457.5,129,0)
A 2 N PPI=T^A2NT
"DATA",457.5,129,1)
HH0001011001001001100100010101101111100
"DATA",457.5,130,0)
A 2 N PPI=U^A2NU
"DATA",457.5,130,1)
HH0000010001001001100100001111101111100
"DATA",457.5,131,0)
N 1 E PPI=S^N1ES
"DATA",457.5,131,1)
H00001011001001000100100000101101111100
"DATA",457.5,132,0)
N 1 N PPI=S^N1NS
"DATA",457.5,132,1)
H00001011001001000100100000101101111100
"DATA",457.5,133,0)
N 2 E PPI=S^N2ES
"DATA",457.5,133,1)
HH0001011001001000100100000101101111100
"DATA",457.5,134,0)
N 2 N PPI=S^N2NS
"DATA",457.5,134,1)
HH1001011001001000000100000101101111100
"DATA",457.5,135,0)
N 3 E PPI=S^N3ES
"DATA",457.5,135,1)
0H0000011001001000100000000000000000100
"DATA",457.5,136,0)
N 3 N PPI=S^N3NS
"DATA",457.5,136,1)
0H0000011001001000100000000000000000100
"DATA",457.5,137,0)
A 3 E PPI=S^A3ES
"DATA",457.5,137,1)
0H0000011001001000100000000000000000100
"DATA",457.5,138,0)
A 3 N PPI=S^A3NS
"DATA",457.5,138,1)
0H0000011001001000100000000000000000100
"FIA",455.1)
8B ERROR MESSAGE
"FIA",455.1,0)
^PRST(455.1,
"FIA",455.1,0,0)
455.1
"FIA",455.1,0,1)
n^n^f^^n^^y^r^n
"FIA",455.1,0,10)

"FIA",455.1,0,11)
I $P($G(^PRST(455.1,Y,0)),"^",1)=143
"FIA",455.1,0,"RLRO")

"FIA",455.1,0,"VR")
4.0^PRS
"FIA",455.1,455.1)
0
"FIA",455.1,455.11)
0
"FIA",457.5)
PAY ENTITLEMENT
"FIA",457.5,0)
^PRST(457.5,
"FIA",457.5,0,0)
457.5
"FIA",457.5,0,1)
n^n^f^^n^^y^o^n
"FIA",457.5,0,10)

"FIA",457.5,0,11)

"FIA",457.5,0,"RLRO")

"FIA",457.5,0,"VR")
4.0^PRS
"FIA",457.5,457.5)
0
"MBREQ")
0
"PKG",408,-1)
1^1
"PKG",408,0)
PAID^PRS^PAID
"PKG",408,20,0)
^9.402P^^
"PKG",408,22,0)
^9.49I^1^1
"PKG",408,22,1,0)
4.0^2950912^2960130
"PKG",408,22,1,"PAH",1,0)
102^3060209
"PKG",408,22,1,"PAH",1,1,0)
^^1^1^3060209
"PKG",408,22,1,"PAH",1,1,1,0)
See patch description on Forum for complete details of this patch.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","PRS8HR")
0^10^B41812105^B42037579
"RTN","PRS8HR",1,0)
PRS8HR ;HISC/MRL,WCIOFO/JAH-DECOMPOSITION, HOURS ;02/01/06
"RTN","PRS8HR",2,0)
 ;;4.0;PAID;**2,22,29,42,52,102**;Sep 21, 1995
"RTN","PRS8HR",3,0)
 ;
"RTN","PRS8HR",4,0)
 ;This routine is called by ^PRS8PP (premium pay calculator)
"RTN","PRS8HR",5,0)
 ;=====================================================================
"RTN","PRS8HR",6,0)
 ; ** indicates incompleted comments
"RTN","PRS8HR",7,0)
 ;
"RTN","PRS8HR",8,0)
 ;VARIABLE DEFINITION
"RTN","PRS8HR",9,0)
 ;
"RTN","PRS8HR",10,0)
 ; TYP   =  contains codes representing type of employee.
"RTN","PRS8HR",11,0)
 ;          It's a composite code string w/ characters that
"RTN","PRS8HR",12,0)
 ;          represent pay plan, duty basis, & normal hours.
"RTN","PRS8HR",13,0)
 ;    CODE  REPRESENTS      CODE   REPRESENTS
"RTN","PRS8HR",14,0)
 ;     D     daily            f     firefighter
"RTN","PRS8HR",15,0)
 ;     W     wagegrade        P     part-time
"RTN","PRS8HR",16,0)
 ;     N     nurse            d     doctor
"RTN","PRS8HR",17,0)
 ;     B     baylor plan      dR    doctor/resident or intern
"RTN","PRS8HR",18,0)
 ;     H     Nurse Hybrid     ""    *
"RTN","PRS8HR",19,0)
 ;     I     intermittent
"RTN","PRS8HR",20,0)
 ; VAL   =  Single char code represents employee's work status for
"RTN","PRS8HR",21,0)
 ;          current 15 min increment.
"RTN","PRS8HR",22,0)
 ; FLX   =  Flex tour indicator.
"RTN","PRS8HR",23,0)
 ; TH(W) =  Tour Hours for week 1, TH(1) & week 2, TH(2)
"RTN","PRS8HR",24,0)
 ; TH    =  Tour Hours
"RTN","PRS8HR",25,0)
 ; HTP   =  PAYABLE hours worked today.
"RTN","PRS8HR",26,0)
 ; HT    =  Hours worked today.
"RTN","PRS8HR",27,0)
 ; AV    =  String w/ most normal types of time (see bottom of PRS8EX)
"RTN","PRS8HR",28,0)
 ;          does NOT contain premium times or unscheduled time (OoEes4)
"RTN","PRS8HR",29,0)
 ;====================================================================
"RTN","PRS8HR",30,0)
 ;
"RTN","PRS8HR",31,0)
 S AV="1235nHMLSWNARUXYVJFGD"
"RTN","PRS8HR",32,0)
 ;
"RTN","PRS8HR",33,0)
 ;   Loop thru each quarter hour segment of day.
"RTN","PRS8HR",34,0)
 ;   Check for times in AV array.
"RTN","PRS8HR",35,0)
 ;   Proceed w/ calculation if Overtime worked on Holiday.
"RTN","PRS8HR",36,0)
 ;
"RTN","PRS8HR",37,0)
 F M=1:1:96 D
"RTN","PRS8HR",38,0)
 .  S VAL=$E(D,M)
"RTN","PRS8HR",39,0)
 .;
"RTN","PRS8HR",40,0)
 .;    If non premium type of time or (overtime on holiday)
"RTN","PRS8HR",41,0)
 .;
"RTN","PRS8HR",42,0)
 .  I AV[VAL!(VAL="O"&($E(DAY(DAY,"HOL"),M)=2)) D CALC
"RTN","PRS8HR",43,0)
 Q
"RTN","PRS8HR",44,0)
 ;
"RTN","PRS8HR",45,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HR",46,0)
 ;
"RTN","PRS8HR",47,0)
CALC ; --- Entry point for calculating placement of time
"RTN","PRS8HR",48,0)
 ;
"RTN","PRS8HR",49,0)
 ;     Set up variables for calculations and comparisons in this routine
"RTN","PRS8HR",50,0)
 ;
"RTN","PRS8HR",51,0)
 N HOLWKD,HOLEX,HOLWKEX
"RTN","PRS8HR",52,0)
 D ^PRS8HRSV
"RTN","PRS8HR",53,0)
 ;
"RTN","PRS8HR",54,0)
 ;     IF intermittent employee on continuation of pay OR overtime on 
"RTN","PRS8HR",55,0)
 ;     holiday THEN increment Pay Period tour hours and current weeks 
"RTN","PRS8HR",56,0)
 ;     tour hours.
"RTN","PRS8HR",57,0)
 ;
"RTN","PRS8HR",58,0)
 I TYP["I",VAL["V"!(VAL="O"&(HOLWKD)) S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HR",59,0)
 ;
"RTN","PRS8HR",60,0)
 ;     IF part time doctor & total hours = 80 & type of
"RTN","PRS8HR",61,0)
 ;     time is unscheduled, overtime, comptime THEN quit
"RTN","PRS8HR",62,0)
 ;
"RTN","PRS8HR",63,0)
 I TYP["d",TYP["P",TH=320,"4OosEe"[VAL Q
"RTN","PRS8HR",64,0)
 ;
"RTN","PRS8HR",65,0)
 ;     IF type of time is anything but (leave w/out pay, comp time) 
"RTN","PRS8HR",66,0)
 ;     THEN increment total hrs(HT) & increment HTP if type of 
"RTN","PRS8HR",67,0)
 ;     time not non pay or leave w/out pay.
"RTN","PRS8HR",68,0)
 ;
"RTN","PRS8HR",69,0)
 ; Update daily counter - *102 added non-pay back into daily count
"RTN","PRS8HR",70,0)
 ;
"RTN","PRS8HR",71,0)
 S HT=HT+1,HTP=HTP+1
"RTN","PRS8HR",72,0)
 ;
"RTN","PRS8HR",73,0)
 ;---------------------------------------------------------
"RTN","PRS8HR",74,0)
 ;     IF entitled to VCS commission sales & normal time(1) ??(2,3)
"RTN","PRS8HR",75,0)
 ;     & holiday excused set X to type of time=Piece Worker Hol excused.
"RTN","PRS8HR",76,0)
 ;     Then IF part time set X to part time hours code.
"RTN","PRS8HR",77,0)
 ;
"RTN","PRS8HR",78,0)
 I $E(ENT,38),"123"[VAL,HOLEX S X=36 D CHK^PRS8HRSV D  Q:X
"RTN","PRS8HR",79,0)
 .  I TYP["P" S X=32 D CHK^PRS8HRSV
"RTN","PRS8HR",80,0)
 ;
"RTN","PRS8HR",81,0)
 ;---------------------------------------------------------------
"RTN","PRS8HR",82,0)
 ;
"RTN","PRS8HR",83,0)
 ;     Don't mess w/ fire fighters
"RTN","PRS8HR",84,0)
 ;
"RTN","PRS8HR",85,0)
 Q:"Ff"[TYP
"RTN","PRS8HR",86,0)
 ;
"RTN","PRS8HR",87,0)
 S GO=0
"RTN","PRS8HR",88,0)
 ;     IF compressed tour & parttime & tour hours are over 80
"RTN","PRS8HR",89,0)
 ;     OR tour hours = 80 & it's overtime, comptime, or unscheduled reg.
"RTN","PRS8HR",90,0)
 ;
"RTN","PRS8HR",91,0)
 ; Checks for pay period
"RTN","PRS8HR",92,0)
 I (TH>320&("OoseE4"[VAL))!(TH=320&("OoseE4"[VAL)) S GO=1
"RTN","PRS8HR",93,0)
 ;
"RTN","PRS8HR",94,0)
 ; Check for week
"RTN","PRS8HR",95,0)
 I (TH(W)>160&("OoseE4"[VAL))!(TH(W)=160&("OosEe4"[VAL)) S GO=1
"RTN","PRS8HR",96,0)
 ;
"RTN","PRS8HR",97,0)
 ; Check for day
"RTN","PRS8HR",98,0)
 I HT>32,"OoseE4"[VAL S GO=1
"RTN","PRS8HR",99,0)
 ;
"RTN","PRS8HR",100,0)
 ;     Following segment is concerned w/ variations of part time
"RTN","PRS8HR",101,0)
 ;     employees (TYP["P"), & 1 baylor (TYP["B").
"RTN","PRS8HR",102,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",103,0)
 ;
"RTN","PRS8HR",104,0)
 ;     Doctor over 8 hours
"RTN","PRS8HR",105,0)
 ;
"RTN","PRS8HR",106,0)
 I TYP["Pd",HT>32 S GO=0 ; part-time doctors PT + PH must = NH
"RTN","PRS8HR",107,0)
 ;
"RTN","PRS8HR",108,0)
 ;     Worked holiday
"RTN","PRS8HR",109,0)
 ;
"RTN","PRS8HR",110,0)
 I TYP["P",HOLWKD S GO=0
"RTN","PRS8HR",111,0)
 ;
"RTN","PRS8HR",112,0)
 ;     Baylor plan & ct/ot/s
"RTN","PRS8HR",113,0)
 ;
"RTN","PRS8HR",114,0)
 I TYP["B","EeOos"[VAL S GO=1
"RTN","PRS8HR",115,0)
 ;
"RTN","PRS8HR",116,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",117,0)
 ;     GO set in cases where employee maybe eligible for OT
"RTN","PRS8HR",118,0)
 ;     due to over > 8/day OR > 40/week.
"RTN","PRS8HR",119,0)
 ;
"RTN","PRS8HR",120,0)
 S X=0 I GO D TH^PRS8HRSV D OVER840^PRS8HROT Q
"RTN","PRS8HR",121,0)
 ;
"RTN","PRS8HR",122,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",123,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",124,0)
 ;     GO not set for compressed schedule of at least 80 hrs.
"RTN","PRS8HR",125,0)
 ;     GO not set for non compressed schedule of over 40 hrs.
"RTN","PRS8HR",126,0)
 ;     IF GO is set and we are evaluating normal hours or
"RTN","PRS8HR",127,0)
 ;     HOLIDAY OVERTIME use NORMHRS to increment TIME
"RTN","PRS8HR",128,0)
 ;     in week array.  THEN QUIT.
"RTN","PRS8HR",129,0)
 ;
"RTN","PRS8HR",130,0)
 S GO=1
"RTN","PRS8HR",131,0)
 I FLX="C",NH>319 S GO=0
"RTN","PRS8HR",132,0)
 I FLX'="C",NH(WK)>160,TYP'["Pd" S GO=0 ;IF pt-doctor don't set GO=0
"RTN","PRS8HR",133,0)
 I GO,"1235nHMLSWNARUXYVJFGD"[VAL!(VAL="O"&(HOLWKD)) D NORMHRS^PRS8HROT Q
"RTN","PRS8HR",134,0)
 ;
"RTN","PRS8HR",135,0)
 ;--------------------------------------------------------------------
"RTN","PRS8HR",136,0)
 ;   Check employees with Normal hours less than 80.
"RTN","PRS8HR",137,0)
 ;
"RTN","PRS8HR",138,0)
 I NH'>319 D TH^PRS8HRSV D  Q
"RTN","PRS8HR",139,0)
 .I FLX="C" D  Q:X
"RTN","PRS8HR",140,0)
 ..;
"RTN","PRS8HR",141,0)
 ..;  for non PT employees TIME gets part time hours or unscheduled regular or overtime.
"RTN","PRS8HR",142,0)
 ..I TYP'["P" S X=$S("OosEe4"'[VAL:32,TYP["P"&(TH'>320):9,"Ee"'[VAL:TOUR+19,1:7) D CHK^PRS8HRSV Q:X
"RTN","PRS8HR",143,0)
 ..;
"RTN","PRS8HR",144,0)
 ..; For PT employees review hours worked to determine X
"RTN","PRS8HR",145,0)
 ..I TYP["P" D  Q:X
"RTN","PRS8HR",146,0)
 ...I "OosEe4"'[VAL S X=32 ; All tour time = PT/PH
"RTN","PRS8HR",147,0)
 ...;
"RTN","PRS8HR",148,0)
 ...; Checks for CT
"RTN","PRS8HR",149,0)
 ...I "Ee"[VAL D
"RTN","PRS8HR",150,0)
 ....; <8/DAY & <40/WK & <80/PP = UN/US
"RTN","PRS8HR",151,0)
 ....I HT'>32,TH(W)'>160,TH'>320 S X=9 Q
"RTN","PRS8HR",152,0)
 ....S X=7 ; CE/CT
"RTN","PRS8HR",153,0)
 ...;
"RTN","PRS8HR",154,0)
 ...; Checks for all other types of time
"RTN","PRS8HR",155,0)
 ...I "Oos4"[VAL D
"RTN","PRS8HR",156,0)
 ....I TH>320!(TH(W)>160) S X=TOUR+19 Q  ; OA/OE
"RTN","PRS8HR",157,0)
 ....I HT>32 S X=TOUR+15 Q  ; DA/DE
"RTN","PRS8HR",158,0)
 ....S X=9 ; UN/US
"RTN","PRS8HR",159,0)
 ...D CHK^PRS8HRSV
"RTN","PRS8HR",160,0)
 .;
"RTN","PRS8HR",161,0)
 .;     Under 8/day, 40/week, and not coded as overtime or comptime
"RTN","PRS8HR",162,0)
 .;     or overtime on holiday.
"RTN","PRS8HR",163,0)
 .;
"RTN","PRS8HR",164,0)
 .; Checks for non-compressed employees
"RTN","PRS8HR",165,0)
 .I HT'>32,TH(W)'>160,TH'>320,"OoseE"'[VAL!(VAL="O"&(HOLWKD)) S X=0 D  Q:X
"RTN","PRS8HR",166,0)
 ..;
"RTN","PRS8HR",167,0)
 ..;    Not intermittent, normal hours and not unscheduled reg. 
"RTN","PRS8HR",168,0)
 ..;    TIME gets parttime hours.
"RTN","PRS8HR",169,0)
 ..;
"RTN","PRS8HR",170,0)
 ..I TYP'["I",AV[VAL,VAL'=4 S X=32 D CHK^PRS8HRSV Q
"RTN","PRS8HR",171,0)
 ..;
"RTN","PRS8HR",172,0)
 ..;    All else fails - TIME gets unscheduled regular.
"RTN","PRS8HR",173,0)
 ..;
"RTN","PRS8HR",174,0)
 ..S X=9 D CHK^PRS8HRSV Q
"RTN","PRS8HR",175,0)
 .;
"RTN","PRS8HR",176,0)
 .;     Part time doctor w/ unscheduled reg. TIME gets unscheduled reg.
"RTN","PRS8HR",177,0)
 .; 
"RTN","PRS8HR",178,0)
 .I TYP["P",TYP["d",VAL=4 S X=9 D CHK^PRS8HRSV Q
"RTN","PRS8HR",179,0)
 .;
"RTN","PRS8HR",180,0)
 .;     Over 8/day
"RTN","PRS8HR",181,0)
 .;
"RTN","PRS8HR",182,0)
 .; ### THE FOLLOWING CODE WAS SPLIT UP TO MAKE IT MORE LEGIBLE
"RTN","PRS8HR",183,0)
 .;I HT>32 D G8^PRS8HRSV Q:"^16^17^18^"[("^"_X_"^")  I X!((HTP'>32)&(TH(WK)'<160)) S X=$S(VAL=4!("oseE"[VAL)!(VAL="O"&('HOLWKD)):9,1:32) D CHK^PRS8HRSV Q
"RTN","PRS8HR",184,0)
 .I HT>32 D G8^PRS8HRSV Q:X
"RTN","PRS8HR",185,0)
 .; ### REVIEW THE CHECK FOR PT HOURS.  WE MAY BE ABLE TO REMOVE
"RTN","PRS8HR",186,0)
 .;Q:"^16^17^18^"[("^"_X_"^")
"RTN","PRS8HR",187,0)
 .;I X!((TH'<320)&(TH(WK)'<160)) D
"RTN","PRS8HR",188,0)
 .;. S X=$S(VAL=4!("oseE"[VAL)!(VAL="O"&('HOLWKD)):9,1:32)
"RTN","PRS8HR",189,0)
 .;. D CHK^PRS8HRSV
"RTN","PRS8HR",190,0)
 .; ### SHOULD WE REPLACE RA/RE W/ SOMETHING ELSE
"RTN","PRS8HR",191,0)
 .;I TYP["P",TH(W)'>160,VAL="s" S:HT>32&($E(ENT,3)=1) X=TOUR+25 D CHK^PRS8HRSV S X=9 D CHK^PRS8HRSV Q
"RTN","PRS8HR",192,0)
 .;
"RTN","PRS8HR",193,0)
 .;     For all time left except comptime set TIME to appropriate OT
"RTN","PRS8HR",194,0)
 .;     unless comptime has been worked earlier in the week making
"RTN","PRS8HR",195,0)
 .;     the total hours less than 40, then TIME gets unscheduled reg.
"RTN","PRS8HR",196,0)
 .;     COMPTIME OVER 8/DAY WILL BE CREDITED HERE
"RTN","PRS8HR",197,0)
 .;
"RTN","PRS8HR",198,0)
 .S X=$S("Ee"'[VAL:TOUR+19,(TH'>320)&(TH(W)'>160)&(HT'>32):9,1:7)
"RTN","PRS8HR",199,0)
 .I TYP["P",VAL[4,TH'>320,TH(W)'>160,HT'>32 S X=9
"RTN","PRS8HR",200,0)
 .D CHK^PRS8HRSV
"RTN","PRS8HR",201,0)
 Q
"RTN","PRS8HR",202,0)
 ;
"RTN","PRS8HR",203,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HR",204,0)
 ; ### DELETE UNLESS EARLIER CHECK WAS RESTORED
"RTN","PRS8HR",205,0)
CT2DAY() ;Determine if comptime eligible including 2 day tour.
"RTN","PRS8HR",206,0)
 ;
"RTN","PRS8HR",207,0)
 N TOUREC,TWODAY
"RTN","PRS8HR",208,0)
 S (RTN,TWODAY)=0
"RTN","PRS8HR",209,0)
 ;
"RTN","PRS8HR",210,0)
 ;      IF time segment contains Scheduled or unscheduled comptime 
"RTN","PRS8HR",211,0)
 ;      or overtime and there is some time in tour hours worked THEN
"RTN","PRS8HR",212,0)
 ;      check if it's a 2 day tour. For 2 day tours some of time worked
"RTN","PRS8HR",213,0)
 ;      won't be in HT variable since it occured on other day of two
"RTN","PRS8HR",214,0)
 ;      day tour, it's not valid to simply check the HT variable for
"RTN","PRS8HR",215,0)
 ;      8 hours of work. (patch PRS*4*22)
"RTN","PRS8HR",216,0)
 ;
"RTN","PRS8HR",217,0)
 I "OosEe4"[VAL,(HT>0),(NH>319) D
"RTN","PRS8HR",218,0)
 .S TOUREC=$P($G(DAY(DAY,0)),"^",2)
"RTN","PRS8HR",219,0)
 .I TOUREC>0 S TWODAY=$P($G(^PRST(457.1,TOUREC,0)),"^",5)
"RTN","PRS8HR",220,0)
 .I TWODAY="Y" S RTN=1
"RTN","PRS8HR",221,0)
 Q RTN
"RTN","PRS8HROT")
0^11^B3467629^B14293499
"RTN","PRS8HROT",1,0)
PRS8HROT ;JAH/WCIOFO-Calc time over 8/day &/or 40/week ;02/03/06
"RTN","PRS8HROT",2,0)
 ;;4.0;PAID;**29,42,52,102**;Sep 21, 1995
"RTN","PRS8HROT",3,0)
 ;
"RTN","PRS8HROT",4,0)
OVER840 ;
"RTN","PRS8HROT",5,0)
 ;     If overtime coded & either holiday worked or holiday excused
"RTN","PRS8HROT",6,0)
 ;     Then set type of time to Holiday Hrs (shift Day, 2 or 3).
"RTN","PRS8HROT",7,0)
 ;
"RTN","PRS8HROT",8,0)
 I VAL="O",HOLWKEX S X=TOUR+28 D CHK^PRS8HRSV Q:X
"RTN","PRS8HROT",9,0)
 ;
"RTN","PRS8HROT",10,0)
 ;     If > 8 hrs & not compressed ** results of G8
"RTN","PRS8HROT",11,0)
 ;
"RTN","PRS8HROT",12,0)
 I HT>32 D G8^PRS8HRSV Q:X
"RTN","PRS8HROT",13,0)
 ;
"RTN","PRS8HROT",14,0)
 I "1235nHMLSWNARUXYVJFGD"[VAL,NH>319 Q
"RTN","PRS8HROT",15,0)
 ;
"RTN","PRS8HROT",16,0)
 ;     If Baylor Plan
"RTN","PRS8HROT",17,0)
 ;
"RTN","PRS8HROT",18,0)
 I TYP["B" D  Q:X
"RTN","PRS8HROT",19,0)
 .;
"RTN","PRS8HROT",20,0)
 .;     IF weeks hours greater than 8 & TIME not coded as comp-time
"RTN","PRS8HROT",21,0)
 .;     THEN set TIME to OT-Total Hrs (shift Day, 2 or 3)
"RTN","PRS8HROT",22,0)
 .;
"RTN","PRS8HROT",23,0)
 .I HT>32 S X=$S("Ee"'[VAL:TOUR+19,1:7) D CHK^PRS8HRSV Q:X
"RTN","PRS8HROT",24,0)
 .;
"RTN","PRS8HROT",25,0)
 .;     IF Total Hours for the current week are <= 40 
"RTN","PRS8HROT",26,0)
 .;     THEN TIME gets unscheduled regular.
"RTN","PRS8HROT",27,0)
 .;
"RTN","PRS8HROT",28,0)
 .I TH(W)'>160 S X=9 D CHK^PRS8HRSV Q:X
"RTN","PRS8HROT",29,0)
 .;
"RTN","PRS8HROT",30,0)
 .;     IF Total Hours for the current week ARE > 40
"RTN","PRS8HROT",31,0)
 .;       AND total hours for today are <= 8
"RTN","PRS8HROT",32,0)
 .;         AND Time is not comp-time
"RTN","PRS8HROT",33,0)
 .;         THEN Time gets Unscheduled regular.
"RTN","PRS8HROT",34,0)
 .;
"RTN","PRS8HROT",35,0)
 .I TH(W)>160,HT<33,"Ee"'[VAL S X=9 D CHK^PRS8HRSV Q:X
"RTN","PRS8HROT",36,0)
 ;
"RTN","PRS8HROT",37,0)
 ;     IF not comp-time THEN Time = Overtime, otherwise
"RTN","PRS8HROT",38,0)
 ;     part timers get unscheduled reg until 8/day, 40/week
"RTN","PRS8HROT",39,0)
 ;     UNSCHEDULED REGULAR WILL BE CODED AS OT for over 8/day
"RTN","PRS8HROT",40,0)
 ;
"RTN","PRS8HROT",41,0)
 S X=$S("Ee"'[VAL:TOUR+19,1:7)
"RTN","PRS8HROT",42,0)
 D CHK^PRS8HRSV
"RTN","PRS8HROT",43,0)
 ;
"RTN","PRS8HROT",44,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HROT",45,0)
 Q
"RTN","PRS8HROT",46,0)
NORMHRS ;
"RTN","PRS8HROT",47,0)
 ; IF part-time employee AND time is LWOP or Non-Pay AND employee has OT
"RTN","PRS8HROT",48,0)
 ; THEN decrement OT and try to post time as Unscheduled Regular (UN/US).
"RTN","PRS8HROT",49,0)
 ;
"RTN","PRS8HROT",50,0)
 I FLX="C" S X=32 D CHK^PRS8HRSV Q:X
"RTN","PRS8HROT",51,0)
 ;
"RTN","PRS8HROT",52,0)
 I HT'>32 S X=32 D CHK^PRS8HRSV Q:X
"RTN","PRS8HROT",53,0)
 ;
"RTN","PRS8HROT",54,0)
 ; if pt-doctor don't do G8
"RTN","PRS8HROT",55,0)
 I HT>32,TYP'["Pd" D G8^PRS8HRSV Q:"^16^17^18^"[("^"_X_"^")
"RTN","PRS8HROT",56,0)
 ;
"RTN","PRS8HROT",57,0)
 S X=32 D CHK^PRS8HRSV
"RTN","PRS8HROT",58,0)
 Q
"RTN","PRS8HRSV")
0^12^B37540189^B41325666
"RTN","PRS8HRSV",1,0)
PRS8HRSV ;WCIOFO/JAH-HOLIDAY FLAG, TIME CHECKER, WK() SET; 12/21/05
"RTN","PRS8HRSV",2,0)
 ;;4.0;PAID;**29,52,102**;Sep 21, 1995
"RTN","PRS8HRSV",3,0)
 ;  Set up variable for holiday worked or holiday exused
"RTN","PRS8HRSV",4,0)
 ;  Holiday worked coded 2 in DAY array
"RTN","PRS8HRSV",5,0)
 ;  Holiday exused coded 1 in DAY array
"RTN","PRS8HRSV",6,0)
 ;  A NON holiday is coded as all zero's in day array.
"RTN","PRS8HRSV",7,0)
 ;
"RTN","PRS8HRSV",8,0)
 ;  HOLIDAY WORKED
"RTN","PRS8HRSV",9,0)
 S HOLWKD=$E(DAY(DAY,"HOL"),M)=2
"RTN","PRS8HRSV",10,0)
 ;
"RTN","PRS8HRSV",11,0)
 ;  HOLIDAY EXCUSED
"RTN","PRS8HRSV",12,0)
 S HOLEX=$E(DAY(DAY,"HOL"),M)=1
"RTN","PRS8HRSV",13,0)
 ;
"RTN","PRS8HRSV",14,0)
 ;  HOLIDAY EXCUSED OR HOLIDAY WORKED
"RTN","PRS8HRSV",15,0)
 S HOLWKEX=$E(DAY(DAY,"HOL"),M)
"RTN","PRS8HRSV",16,0)
 Q
"RTN","PRS8HRSV",17,0)
 ;
"RTN","PRS8HRSV",18,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",19,0)
 ;
"RTN","PRS8HRSV",20,0)
CHK ; --- Check ENT for acceptable X value
"RTN","PRS8HRSV",21,0)
 ;    Pieces of Y have values in locations corresponding to premium
"RTN","PRS8HRSV",22,0)
 ;    times in value of X.  Values in Y string are locations
"RTN","PRS8HRSV",23,0)
 ;    in entitlement string where associated time in X is
"RTN","PRS8HRSV",24,0)
 ;    located.
"RTN","PRS8HRSV",25,0)
 ;   --------------------------------------------------
"RTN","PRS8HRSV",26,0)
 ;                 | Fixed      |  Premium
"RTN","PRS8HRSV",27,0)
 ;     Piece       | Position in|  Type Of Time
"RTN","PRS8HRSV",28,0)
 ;    Of Y-String  | Entitlement|
"RTN","PRS8HRSV",29,0)
 ;    & **WK()     | String     |
"RTN","PRS8HRSV",30,0)
 ;    -----------  | -----------|  --------------------
"RTN","PRS8HRSV",31,0)
 ;        7        |    28      |  comp earned
"RTN","PRS8HRSV",32,0)
 ;        9        |     2      |  unscheduled regular
"RTN","PRS8HRSV",33,0)
 ;       16        |    19      |  hrs excess 8-d
"RTN","PRS8HRSV",34,0)
 ;       17        |    20      |  hrs excess 8-d2
"RTN","PRS8HRSV",35,0)
 ;       18        |    21      |  hrs excess 8 d3
"RTN","PRS8HRSV",36,0)
 ;       20        |    12      |  OT total hrs d
"RTN","PRS8HRSV",37,0)
 ;       21        |    13      |  OT total hrs d2
"RTN","PRS8HRSV",38,0)
 ;       22        |    14      |  OT total hrs d3
"RTN","PRS8HRSV",39,0)
 ;   ---------------------------------------------------
"RTN","PRS8HRSV",40,0)
 ;
"RTN","PRS8HRSV",41,0)
 N ZZ S Y="^^^^^^28^^2^^^^^^^19^20^21^^12^13^14^^^^3^4^^^^"
"RTN","PRS8HRSV",42,0)
 ;
"RTN","PRS8HRSV",43,0)
 ;   Set Y to a premium time in Y string, based on X 
"RTN","PRS8HRSV",44,0)
 ;   OR set Y to zero if X is a non premium time or parttime hours.
"RTN","PRS8HRSV",45,0)
 ;
"RTN","PRS8HRSV",46,0)
 I X'=32 S Y=+$P(Y,"^",X)
"RTN","PRS8HRSV",47,0)
 ;
"RTN","PRS8HRSV",48,0)
 ;   IF Y is premium time & not Unscheduled regular but employee not
"RTN","PRS8HRSV",49,0)
 ;   ENTITLED to that type of time THEN set X to zero.
"RTN","PRS8HRSV",50,0)
 ;
"RTN","PRS8HRSV",51,0)
 I +Y,Y'=2,'$E(ENT,+Y) S X=0
"RTN","PRS8HRSV",52,0)
 ;
"RTN","PRS8HRSV",53,0)
 ;   Overtime & Not entitled set X & Y to unscheduled regular
"RTN","PRS8HRSV",54,0)
 ;
"RTN","PRS8HRSV",55,0)
 I "^12^13^14^"[("^"_Y_"^"),'X S X=9,Y=2
"RTN","PRS8HRSV",56,0)
 ;
"RTN","PRS8HRSV",57,0)
 ;   IF regular unscheduled (Y=2) & not hourly for regular unscheduled
"RTN","PRS8HRSV",58,0)
 ;   THEN set X=0, unless Baylor then X gets regular unscheduled.
"RTN","PRS8HRSV",59,0)
 ;
"RTN","PRS8HRSV",60,0)
 I X,Y=2,$E(ENT,+Y)'="H" S X=$S(TYP'["B":0,1:9)
"RTN","PRS8HRSV",61,0)
 ;
"RTN","PRS8HRSV",62,0)
 ;   If X is hours in excess of 8/day & > 40/week & type of time
"RTN","PRS8HRSV",63,0)
 ;   is compensatory time X = 0
"RTN","PRS8HRSV",64,0)
 ;
"RTN","PRS8HRSV",65,0)
 I "^16^17^18^"[("^"_X_"^"),TH(WK)>160!(TH>320),"Ee"[VAL S X=0
"RTN","PRS8HRSV",66,0)
 ;
"RTN","PRS8HRSV",67,0)
 ;   ** Significance of checking "X" now as opposed to Y.
"RTN","PRS8HRSV",68,0)
 ;
"RTN","PRS8HRSV",69,0)
 K Y Q:'X
"RTN","PRS8HRSV",70,0)
 ;
"RTN","PRS8HRSV",71,0)
 ;   (Hours excess 8/day, OT hours, Reg hours @ OT rate, Holiday hours, 
"RTN","PRS8HRSV",72,0)
 ;   part time hours) OR unscheduled regular & Nurse or Nurse Hybrid.
"RTN","PRS8HRSV",73,0)
 ; ### DO WE NEED TO ADD !HYBRID TO THIS CHECK ???
"RTN","PRS8HRSV",74,0)
 I "^16^17^18^20^21^22^29^30^31^32^"[("^"_X_"^")!(X=9&(TYP["N"!(TYP["H"))) D
"RTN","PRS8HRSV",75,0)
 .;
"RTN","PRS8HRSV",76,0)
 .;     If today holiday or holiday benefit day for employee
"RTN","PRS8HRSV",77,0)
 .;
"RTN","PRS8HRSV",78,0)
 .I $$HOLIDAY^PRS8UT(PY,DFN,DAY) D  Q:'X
"RTN","PRS8HRSV",79,0)
 ..;
"RTN","PRS8HRSV",80,0)
 ..;     If part time hours & entitled to (Holiday [Shift day, 2 or 3])
"RTN","PRS8HRSV",81,0)
 ..;
"RTN","PRS8HRSV",82,0)
 ..I X=32,$E(ENT,TOUR+21),HOLWKD S ZZ=X,X=$S($G(DAY(DAY,"OFF"))'=1:TOUR+28,1:9) D SET S X=$S(TYP'["I":ZZ,1:9) Q
"RTN","PRS8HRSV",83,0)
 ..;
"RTN","PRS8HRSV",84,0)
 ..;     IF not part time hours & intermittent employee & employee
"RTN","PRS8HRSV",85,0)
 ..;     entitled to holiday overtime & holiday worked THEN set TIME 
"RTN","PRS8HRSV",86,0)
 ..;     to OT on Holiday and credit that TIME in SET.
"RTN","PRS8HRSV",87,0)
 ..;
"RTN","PRS8HRSV",88,0)
 ..I X'=32,TYP["I",$E(ENT,25),HOLWKD S ZZ=X,X=24 D SET S X=0
"RTN","PRS8HRSV",89,0)
 ..;
"RTN","PRS8HRSV",90,0)
 ..;     IF conditions same as above except employee is NOT entitled
"RTN","PRS8HRSV",91,0)
 ..;     to Holiday OT THEN use X as coded to credit TIME.
"RTN","PRS8HRSV",92,0)
 ..;
"RTN","PRS8HRSV",93,0)
 ..I X'=32,TYP["I",'$E(ENT,25),HOLWKD S ZZ=0 D SET S X=9
"RTN","PRS8HRSV",94,0)
 ..;
"RTN","PRS8HRSV",95,0)
 ..;     IF not part time hours & emp. is entitled to Holiday OT But
"RTN","PRS8HRSV",96,0)
 ..;     they did not work the holiday THEN if emp. is part time or
"RTN","PRS8HRSV",97,0)
 ..;     intermittent set type of time to Regular hrs @ OT rate 3
"RTN","PRS8HRSV",98,0)
 ..;     otherwise OT @ Holiday rate & IF the original coded TIME
"RTN","PRS8HRSV",99,0)
 ..;     NOT = reg hrs @ OT rate(shift D,2,3) THEN credit TIME at 
"RTN","PRS8HRSV",100,0)
 ..;     OT on holiday or Reg hours @ OT rate.  THEN also credit time 
"RTN","PRS8HRSV",101,0)
 ..;     as unscheduled regular.  ** why code time twice?
"RTN","PRS8HRSV",102,0)
 ..;
"RTN","PRS8HRSV",103,0)
 ..I X'=32,$E(ENT,25),'HOLWKD D
"RTN","PRS8HRSV",104,0)
 ...S ZZ=X
"RTN","PRS8HRSV",105,0)
 ...S X=$S(TYP["P"!(TYP["I"):TOUR+28,1:24) D SET
"RTN","PRS8HRSV",106,0)
 ...I TYP["P"!(TYP["I") S X=9 D SET
"RTN","PRS8HRSV",107,0)
 ...S X=0
"RTN","PRS8HRSV",108,0)
 .;
"RTN","PRS8HRSV",109,0)
 .;     IF type of time is part time hours for intermittent employee
"RTN","PRS8HRSV",110,0)
 .;     THEN set TIME = unscheduled regular.
"RTN","PRS8HRSV",111,0)
 .;
"RTN","PRS8HRSV",112,0)
 .I X=32,TYP["I" S X=9
"RTN","PRS8HRSV",113,0)
 .;
"RTN","PRS8HRSV",114,0)
 .;    Part time hours or unscheduled regular.
"RTN","PRS8HRSV",115,0)
 .;
"RTN","PRS8HRSV",116,0)
 .Q:X=32!(X=9)
"RTN","PRS8HRSV",117,0)
 .;
"RTN","PRS8HRSV",118,0)
 .;     IF employee worked holiday THEN set TIME to zero & if original
"RTN","PRS8HRSV",119,0)
 .;     coded type of time is NOT regular hours @ OT rate DO
"RTN","PRS8HRSV",120,0)
 .;
"RTN","PRS8HRSV",121,0)
 .I HOLWKD S ZZ=X,X=0 D
"RTN","PRS8HRSV",122,0)
 ..;
"RTN","PRS8HRSV",123,0)
 ..;     IF entitled to Holiday pay for this shift THEN set TIME
"RTN","PRS8HRSV",124,0)
 ..;     to Holiday HRS (shift d, 2 or 3)
"RTN","PRS8HRSV",125,0)
 ..;
"RTN","PRS8HRSV",126,0)
 ..I $E(ENT,TOUR+21) S X=TOUR+28
"RTN","PRS8HRSV",127,0)
 ;
"RTN","PRS8HRSV",128,0)
 ;     IF employee is part time & either a nurse or nurse hybrid 
"RTN","PRS8HRSV",129,0)
 ;     & they worked the holiday
"RTN","PRS8HRSV",130,0)
 ; ### SHOULD HYBRID BE ADDED TO THIS CHECK  HOW SHOULD THESE HYBRIDS
"RTN","PRS8HRSV",131,0)
 ; ### TREATED ON A HOLIDAY
"RTN","PRS8HRSV",132,0)
 I TYP["P",TYP["N"!(TYP["H"),HOLWKD,X=32 D
"RTN","PRS8HRSV",133,0)
 .;
"RTN","PRS8HRSV",134,0)
 .;     J gets start & stop times for employee's holiday tour.
"RTN","PRS8HRSV",135,0)
 .;     Start/stop times are represented w/ natural numbers
"RTN","PRS8HRSV",136,0)
 .;     from 0-96.  Each 15 minute segment of the 24 hour period
"RTN","PRS8HRSV",137,0)
 .;     beginning & ending at midnight can be represented w/
"RTN","PRS8HRSV",138,0)
 .;     a positive integer.  I.e.  1 = mid-12:15am,
"RTN","PRS8HRSV",139,0)
 .;     2 = 12:15-12:30a ... 96 = 11:45pm-mid.
"RTN","PRS8HRSV",140,0)
 .;
"RTN","PRS8HRSV",141,0)
 .;     Loop thru each set of start & stop times.  IF the single
"RTN","PRS8HRSV",142,0)
 .;     1/4 hr segment we're working w/ falls w/in any of the nurses 
"RTN","PRS8HRSV",143,0)
 .;     start & stop times THEN set TIME to Holiday Hours Day.
"RTN","PRS8HRSV",144,0)
 .;
"RTN","PRS8HRSV",145,0)
 .N I,J S J=$G(^TMP($J,"PRS8",DAY,"HWK")),ZZ=X
"RTN","PRS8HRSV",146,0)
 .;
"RTN","PRS8HRSV",147,0)
 .F I=1:2 Q:$P(J,U,I)=""  I M'<$P(J,U,I),M'>$P(J,U,I+1) S X=29
"RTN","PRS8HRSV",148,0)
 .;
"RTN","PRS8HRSV",149,0)
 .;     Holiday hrs-Day. reset X if 2 day tour.  Otherwise X = 0.
"RTN","PRS8HRSV",150,0)
 .;
"RTN","PRS8HRSV",151,0)
 .I X=29 D SET S X=$S($P(^PRST(457.1,$P(DAY(DAY-1,0),U,2),0),U,5)="Y":ZZ,1:0)
"RTN","PRS8HRSV",152,0)
 ;
"RTN","PRS8HRSV",153,0)
 ;
"RTN","PRS8HRSV",154,0)
SET ; --- Set value into WK array
"RTN","PRS8HRSV",155,0)
 ;
"RTN","PRS8HRSV",156,0)
 ;     Full time employee & part time hours & normal hours WK1 + WK2
"RTN","PRS8HRSV",157,0)
 ;     = biweekly normal hours.
"RTN","PRS8HRSV",158,0)
 ;
"RTN","PRS8HRSV",159,0)
 I $P(C0,"^",10)=1,X=32,NH(1)+NH(2)=NH Q
"RTN","PRS8HRSV",160,0)
 ;
"RTN","PRS8HRSV",161,0)
 ;     For all types of TIME, increment the WK array.
"RTN","PRS8HRSV",162,0)
 ;
"RTN","PRS8HRSV",163,0)
 I +X D  Q
"RTN","PRS8HRSV",164,0)
 . S $P(WK(W),"^",+X)=$P(WK(W),"^",+X)+1
"RTN","PRS8HRSV",165,0)
 ;
"RTN","PRS8HRSV",166,0)
 ;     When X is zero, reset to originally coded time.
"RTN","PRS8HRSV",167,0)
 ;
"RTN","PRS8HRSV",168,0)
 I 'X S X=ZZ Q
"RTN","PRS8HRSV",169,0)
 Q
"RTN","PRS8HRSV",170,0)
 ;
"RTN","PRS8HRSV",171,0)
 ;
"RTN","PRS8HRSV",172,0)
TH ; --- increment total hours & compensatory time hours.
"RTN","PRS8HRSV",173,0)
 ; Posted RG/OT/CT that is >8/day but < 40/week and < 80/pp will not be
"RTN","PRS8HRSV",174,0)
 ; counted in TH or TH(W)
"RTN","PRS8HRSV",175,0)
 ; 
"RTN","PRS8HRSV",176,0)
 ; I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",177,0)
 ;
"RTN","PRS8HRSV",178,0)
 I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) D
"RTN","PRS8HRSV",179,0)
 . Q:(HT>32)&(TH(W)<160)&(TH<320)
"RTN","PRS8HRSV",180,0)
 . S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",181,0)
 Q
"RTN","PRS8HRSV",182,0)
 ;
"RTN","PRS8HRSV",183,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",184,0)
 ;
"RTN","PRS8HRSV",185,0)
G8 ; --- Check for greater than 8 hours in day
"RTN","PRS8HRSV",186,0)
 ;
"RTN","PRS8HRSV",187,0)
 Q:HTP'>32!(VAL="E")
"RTN","PRS8HRSV",188,0)
 ;
"RTN","PRS8HRSV",189,0)
 ; Existing checks for FT and INT employees
"RTN","PRS8HRSV",190,0)
 I TYP["I",TYP'["B",TH(W)>160 S X=TOUR+19 D CHK^PRS8HRSV Q:X
"RTN","PRS8HRSV",191,0)
 ;
"RTN","PRS8HRSV",192,0)
 ; New checks for PT employees.  Check for OT Total Hours (OA/OE)
"RTN","PRS8HRSV",193,0)
 I TYP["P",TYP'["B" D  Q:X
"RTN","PRS8HRSV",194,0)
 . ;
"RTN","PRS8HRSV",195,0)
 . ; Checks for pay period
"RTN","PRS8HRSV",196,0)
 . I TH>320 S X=TOUR+19 D CHK^PRS8HRSV Q:X
"RTN","PRS8HRSV",197,0)
 . ;
"RTN","PRS8HRSV",198,0)
 . ; Checks for week
"RTN","PRS8HRSV",199,0)
 . I TH(W)>160 S X=TOUR+19 D CHK^PRS8HRSV Q:X
"RTN","PRS8HRSV",200,0)
 ;
"RTN","PRS8HRSV",201,0)
 ; Checks for Hours Excess 8/day (DA/DE)
"RTN","PRS8HRSV",202,0)
 S X=TOUR+15 D CHK^PRS8HRSV
"RTN","PRS8HRSV",203,0)
 I X,NH<320,CYA2806>0 S CYA2806=CYA2806-1
"RTN","PRS8HRSV",204,0)
 Q
"RTN","PRS8HRSV",205,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8MT")
0^13^B24828322^B24808382
"RTN","PRS8MT",1,0)
PRS8MT ;HISC/MRL-DECOMPOSITION, MEALTIME ;12/12/05
"RTN","PRS8MT",2,0)
 ;;4.0;PAID;**2,40,69,102**;Sep 21, 1995
"RTN","PRS8MT",3,0)
 ;
"RTN","PRS8MT",4,0)
 ;This routine is used to determine placement of mealtime where
"RTN","PRS8MT",5,0)
 ;necessary.
"RTN","PRS8MT",6,0)
 ;
"RTN","PRS8MT",7,0)
 ;Called by Routines:  PRS8ST
"RTN","PRS8MT",8,0)
 ;
"RTN","PRS8MT",9,0)
MULT ; --- checking 1 node
"RTN","PRS8MT",10,0)
 I $$HOLIDAY^PRS8UT(PY,DFN,MDY),$G(^PRST(458,PY,"E",DFN,"D",MDY,2))["MID^MID^ON" Q  ;don't add meal if mid-mid on-call on a holiday, quit routine
"RTN","PRS8MT",11,0)
 S TWO=DAY(MDY,"TWO")
"RTN","PRS8MT",12,0)
 S S=1 D SET D:'Q  I TWO S S=2 D SET D:'Q
"RTN","PRS8MT",13,0)
 .S D1="",$P(D1,"0",193)="",V(1)=97,V(2)=0
"RTN","PRS8MT",14,0)
 .F I=1:3:28 S V=$P(N,"^",I,I+2) Q:$P(V,"^",1)=""  D
"RTN","PRS8MT",15,0)
 ..S X=$P(V,"^",3) I "^^6^7^3^8^"'[("^"_X_"^") Q  ;quit if not NH
"RTN","PRS8MT",16,0)
 ..F M=$P(V,"^"):1:$P(V,"^",2) D  ; build up tour
"RTN","PRS8MT",17,0)
 ...S D1=$E(D1,1,M-1)_$S(X=""!(X=3):1,X=6:2,1:3)_$E(D1,M+1,192)
"RTN","PRS8MT",18,0)
 ...I V(1)>M S V(1)=M
"RTN","PRS8MT",19,0)
 ...I V(2)<M S V(2)=M
"RTN","PRS8MT",20,0)
 ..Q
"RTN","PRS8MT",21,0)
 .D:V(2) GETY
"RTN","PRS8MT",22,0)
 .F I="N","W" F J=MDY,MDY+1 S X=$G(DAY(J,I)) D
"RTN","PRS8MT",23,0)
 ..I X'="" S ^TMP($J,"PRS8",J,I)=X
"RTN","PRS8MT",24,0)
 ..Q
"RTN","PRS8MT",25,0)
 .Q
"RTN","PRS8MT",26,0)
 ;
"RTN","PRS8MT",27,0)
END ; --- all done here
"RTN","PRS8MT",28,0)
 K A,B,C,D,DIF,DIF1,J,L,M,M1,MID,MT,N,PM,T,SPL,SPLX,USE,V(1),V(2),VT,X,X1,X2,Y
"RTN","PRS8MT",29,0)
 Q
"RTN","PRS8MT",30,0)
 ;
"RTN","PRS8MT",31,0)
GETY ; --- this is where Y (placement of mealtime) is defined
"RTN","PRS8MT",32,0)
 S X=$E(D,V(1),V(2)),D1=$E(D1,V(1),V(2))
"RTN","PRS8MT",33,0)
 S MID=V(2)-V(1)+1-MT\2,MID=MID+V(1) ;middle of tour
"RTN","PRS8MT",34,0)
 S PM=+$P($G(^PRST(457.1,+$P(DAY(MDY,0),"^",$S(S=1:2,1:13)),0)),"^",7) ;0=non=prem meal/1=prem. meal
"RTN","PRS8MT",35,0)
 S X1=$E(X),Q=1
"RTN","PRS8MT",36,0)
 F M=1:1:$L(X) D  Q:'Q
"RTN","PRS8MT",37,0)
 .S Y=$E(X,M)
"RTN","PRS8MT",38,0)
 .I "1235C"[Y,"1235C"[X1 Q  ; scheduled work time
"RTN","PRS8MT",39,0)
 .I Y'="O",Y'=X1 S Q=0 Q  ; not same type of time, and non-OT
"RTN","PRS8MT",40,0)
 .I Y="O",($E(DAY($S(V(1)+M-1<97:MDY,1:MDY+1),"HOL"),$S(V(1)+M-1<97:V(1)+M-1,1:V(1)+M-1-96))'=2) S Q=0 Q  ; OT indicatin' non-holiday worked gets no meal
"RTN","PRS8MT",41,0)
 .I Y="O",($E(DAY($S(V(1)+M-1<97:MDY,1:MDY+1),"HOL"),$S(V(1)+M-1<97:V(1)+M-1,1:V(1)+M-1-96))=2),"123C"[X1 S Q=0 Q  ; OT indicatin holiday worked and Excused.
"RTN","PRS8MT",42,0)
 .Q
"RTN","PRS8MT",43,0)
 I X["0" D
"RTN","PRS8MT",44,0)
 .S SPL=$TR(X,"1235"),SPLX=$TR(X,SPL,$TR($J("",$L(SPL))," "))
"RTN","PRS8MT",45,0)
 .I SPLX="" S Q=1
"RTN","PRS8MT",46,0)
 ; --- one activity for entire tour
"RTN","PRS8MT",47,0)
 K M I Q S Q=0 D  F M=1:1:MT S M(M)=Y+M-1
"RTN","PRS8MT",48,0)
 .I V(1)>24,V(2)<73 S Y=MID Q  ;no premium time involved/ meal in middle
"RTN","PRS8MT",49,0)
 .S Q=0 D  ;check for all premium
"RTN","PRS8MT",50,0)
 ..I V(1)<25,V(2)<25 S Q=1 Q  ;all hours before 6am
"RTN","PRS8MT",51,0)
 ..I V(1)>72,V(2)>72,V(2)'>120 S Q=1 Q  ;all hours after 6pm
"RTN","PRS8MT",52,0)
 .I Q S Y=MID Q  ; all time premium time/ meal in middle
"RTN","PRS8MT",53,0)
 .I PM S Y=0 D
"RTN","PRS8MT",54,0)
 ..I V(2)>72 S Y=73-$S(V(2)-73>MT&(V(1)'>73):0,V(1)<25!(V(2)'<121):73,1:MT-(V(2)-73))
"RTN","PRS8MT",55,0)
 ..I 'Y,V(1)<25 S Y=$S(25-V(1)>MT:25-MT,1:V(1))
"RTN","PRS8MT",56,0)
 ..I 'Y S Y=$S(121-V(1)>MT:121-MT,1:V(1))
"RTN","PRS8MT",57,0)
 .E  S Y=0 D
"RTN","PRS8MT",58,0)
 ..I V(2)>72 S Y=$S(73-MT>V(1):73-MT,V(1)<25!(V(2)'<121):0,1:V(1))
"RTN","PRS8MT",59,0)
 ..I 'Y,V(1)<25 S Y=$S(V(2)-MT>24:25,1:V(2)-MT+1)
"RTN","PRS8MT",60,0)
 ..I 'Y S Y=$S(V(2)-MT>120:121,1:V(2)-MT+1)
"RTN","PRS8MT",61,0)
 .I 'Y S Y=MID
"RTN","PRS8MT",62,0)
 .Q
"RTN","PRS8MT",63,0)
 ; --- multiple activities per tour
"RTN","PRS8MT",64,0)
 E  D
"RTN","PRS8MT",65,0)
 .  S Z=$TR(X,"1235"),X=$TR(X,Z,$TR($J("",$L(Z))," ","0"))
"RTN","PRS8MT",66,0)
 .  S ZRIK=$TR(Z,"HC") I MT>0,$L(ZRIK)'<(($P(DAY(DAY,0),"^",8)*4)+MT) S X="",$P(X,"1",$L(ZRIK)+1)="" ;if leave posted > or = to tour length + mt (ie didn't post around lunch) it was resulting in OT (ZRIK strips HOL & OC)
"RTN","PRS8MT",67,0)
 .  Q:X?1"0"."0"
"RTN","PRS8MT",68,0)
 .  S M=0 F A=1,2 Q:M=MT  F B=MID,MID+1,MID-1:-1:V(1),MID+2:1:V(2) D  Q:M=MT
"RTN","PRS8MT",69,0)
 .  .  Q:'$E(X,B-V(1)+1)
"RTN","PRS8MT",70,0)
 .  .  I A=1,PM,B<25!(B>72&(B<121)) S M=M+1,M(M)=B
"RTN","PRS8MT",71,0)
 .  .  I A=1,'PM,B>24&(B<73)!(B>120) S M=M+1,M(M)=B
"RTN","PRS8MT",72,0)
 .  .  I A=2 S M=M+1,M(M)=B
"RTN","PRS8MT",73,0)
 .  .  Q
"RTN","PRS8MT",74,0)
 .  Q
"RTN","PRS8MT",75,0)
 Q:'$O(M(0))
"RTN","PRS8MT",76,0)
Y ; --- this is where meals get placed in string
"RTN","PRS8MT",77,0)
 F Y=0:0 S Y=$O(M(Y)) Q:Y'>0  D
"RTN","PRS8MT",78,0)
 .  S M=M(Y),X=$E(D,M),X=$S(X="J":"A",X=5:$E(DAY(MDY,"P"),M),1:X),D=$E(D,0,M-1)_"m"_$E(D,M+1,999)
"RTN","PRS8MT",79,0)
 .  S X=$S(X'="M":$F("LSWnAR*U************************V********YXFGD",X)-1,1:5)
"RTN","PRS8MT",80,0)
 .  I "Ff"[TYP,NH'=480!(NH(1)'=NH(2)) S X=32
"RTN","PRS8MT",81,0)
 .  ;I X'=4,CYA2806>0 S CYA2806=CYA2806-1 ; << ADDED-> DROP LUNCH FROM CY ALSO>>
"RTN","PRS8MT",82,0)
 .  Q:X'>0
"RTN","PRS8MT",83,0)
 .  Q:MDY=0&(M(Y)<96)!(MDY=14&(M(Y)>97))
"RTN","PRS8MT",84,0)
 .  S W=$S(MDY<8:1,1:2) I MDY=7&(M(Y)>96) S W=2
"RTN","PRS8MT",85,0)
 .  I $P(WK(W),"^",+X)>0 S $P(WK(W),"^",+X)=$P(WK(W),"^",+X)-1 ;subtract
"RTN","PRS8MT",86,0)
 .  ; If Military Leave subtract the mealtime out of the WK(3) array.
"RTN","PRS8MT",87,0)
 .  I X=5,$P(WK(3),U,11)>0 S $P(WK(3),U,11)=$P(WK(3),U,11)-1
"RTN","PRS8MT",88,0)
 .  ;I WPCYA>0 S WPCYA=WPCYA-1 ;lunch from total << AND FROM CA TOTAL >>
"RTN","PRS8MT",89,0)
 . ; PRS*4*40 added 8 (U), 44 (F), 45 (G), 46 (D) to following line
"RTN","PRS8MT",90,0)
 . ; because PRS8AC also increments LU for those types of time
"RTN","PRS8MT",91,0)
 .  I +X,"^1^2^6^8^44^45^46^"[("^"_+X_"^") S LU=LU-1 ;reduce leave used
"RTN","PRS8MT",92,0)
 .  I +X,"^3^"[("^"_+X_"^"),"P"[TYP S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8MT",93,0)
 .   Q
"RTN","PRS8MT",94,0)
 S DAY(MDY,"W")=$E(D,1,96)
"RTN","PRS8MT",95,0)
 S X=$E(D,97,999) I $L(X) D
"RTN","PRS8MT",96,0)
 .I $D(DAY(MDY+1,"W")) S DAY(MDY+1,"W")=X_$E(DAY(MDY+1,"W"),$L(X)+1,999)
"RTN","PRS8MT",97,0)
 .S DAY(MDY,"N")=X
"RTN","PRS8MT",98,0)
 Q
"RTN","PRS8MT",99,0)
 ;
"RTN","PRS8MT",100,0)
SET ; --- set up for processing
"RTN","PRS8MT",101,0)
 K A,B S (A,B,Q,Y)=0
"RTN","PRS8MT",102,0)
 S MT=$G(DAY(MDY,"MT"_S)) I MT'>0 S Q=1 Q  ; mealtime for tour?
"RTN","PRS8MT",103,0)
 S D=DAY(MDY,"W")_$G(DAY(MDY,"N")) ; get daily activity
"RTN","PRS8MT",104,0)
 S N=DAY(MDY,S*S) ; get tour
"RTN","PRS8MT",105,0)
 Q
"RTN","PRS8OTFF")
0^7^B12536879^B11924315
"RTN","PRS8OTFF",1,0)
PRS8OTFF ;WIRMFO/MGD-OVERTIME/UNSCH FOR CODE R,C FIREFIGHTERS ;10/24/2005
"RTN","PRS8OTFF",2,0)
 ;;4.0;PAID;**45,54,102**;Sep 21, 1995
"RTN","PRS8OTFF",3,0)
 ;
"RTN","PRS8OTFF",4,0)
 ;  routine called from PRS8ST when a premium pay indicator for
"RTN","PRS8OTFF",5,0)
 ;  a firefighter is R or C.
"RTN","PRS8OTFF",6,0)
 ;
"RTN","PRS8OTFF",7,0)
FFOTUN ;CALCULATE CODE R AND C FIREFIGHTERS OVERTIME AND UNSCHEDULED REGULAR
"RTN","PRS8OTFF",8,0)
 ;
"RTN","PRS8OTFF",9,0)
 N SCHWRK,XTRAWRK
"RTN","PRS8OTFF",10,0)
 ;
"RTN","PRS8OTFF",11,0)
 ;Count up scheduled and unscheduled work for week 1 and 2
"RTN","PRS8OTFF",12,0)
 ;
"RTN","PRS8OTFF",13,0)
 D WORKCNT(.SCHWRK,.XTRAWRK,.XWRK)
"RTN","PRS8OTFF",14,0)
 ;
"RTN","PRS8OTFF",15,0)
 ; Determine overtime and unscheduled based on 53/106 hour rule
"RTN","PRS8OTFF",16,0)
 ; and update the week array with OA/OE, RA/RE and UN/US.
"RTN","PRS8OTFF",17,0)
 ; Code C and R firefighters overtime calculation is the same
"RTN","PRS8OTFF",18,0)
 ; whether on compressed tour or not.
"RTN","PRS8OTFF",19,0)
 ;
"RTN","PRS8OTFF",20,0)
 D CALCOT(.SCHWRK,.XTRAWRK,.XWRK)
"RTN","PRS8OTFF",21,0)
 ;
"RTN","PRS8OTFF",22,0)
 Q
"RTN","PRS8OTFF",23,0)
 ;
"RTN","PRS8OTFF",24,0)
 ;==============================================================
"RTN","PRS8OTFF",25,0)
 ;
"RTN","PRS8OTFF",26,0)
WORKCNT(SCHWRK,XTRAWRK,XWRK) ;
"RTN","PRS8OTFF",27,0)
 ;
"RTN","PRS8OTFF",28,0)
 ;VARIABLE LIST
"RTN","PRS8OTFF",29,0)
 ; DAY: current day of pay period--1 through 14 and 1st day of next (15)
"RTN","PRS8OTFF",30,0)
 ; WEEK: Week 1 or 2 of pay period--days 1-7 are week 1, 8-14 week 2.
"RTN","PRS8OTFF",31,0)
 ; QHRCNT: Counter for a single Quarter Hour segment of day.  There are
"RTN","PRS8OTFF",32,0)
 ;         96 quarter hours in a 24 hour day.
"RTN","PRS8OTFF",33,0)
 ; EXCSTR: 96 char day string with exceptions
"RTN","PRS8OTFF",34,0)
 ; WRKSTR: 96 char string with work codes.
"RTN","PRS8OTFF",35,0)
 ; AFFSTR: 96 char string with additional fire fighter hour segments
"RTN","PRS8OTFF",36,0)
 ;         coded with 1's.
"RTN","PRS8OTFF",37,0)
 ; XWRK: string of extra work time
"RTN","PRS8OTFF",38,0)
 ; QHTCODE: Time code for a single quarter hour segment. 
"RTN","PRS8OTFF",39,0)
 ;    1:scheduled work        A:annual leave      S:sick leave, 
"RTN","PRS8OTFF",40,0)
 ;    W:leave without pay     n:non pay status    U:comp used, 
"RTN","PRS8OTFF",41,0)
 ;    E:comp earned           M:military leave    X:training, 
"RTN","PRS8OTFF",42,0)
 ;    Y:travel                O:overtime          4:unscheduled,
"RTN","PRS8OTFF",43,0)
 ;    T:ot in travel          B:standby           C:on call,
"RTN","PRS8OTFF",44,0)
 ;    N:non pay annual lv     h:holiday worked    F:Care and Bereavement
"RTN","PRS8OTFF",45,0)
 ;    G:adoption              D:donor leave       R:restored annual leave
"RTN","PRS8OTFF",46,0)
 ;    M:military leave        J:jury duty         n:non pay time
"RTN","PRS8OTFF",47,0)
 ;    V:continuation of pay   e:sched comp earn   s:scheduled OT
"RTN","PRS8OTFF",48,0)
 ;     Note:  T:overtime for travel  is counted elsewhere so it can not
"RTN","PRS8OTFF",49,0)
 ;            also be recounted as overtime here.
"RTN","PRS8OTFF",50,0)
 ;
"RTN","PRS8OTFF",51,0)
 N DAY,WEEK,QHRCNT,QHRSEG,WRKSTR,QHTCODE,HOLIDAY
"RTN","PRS8OTFF",52,0)
 ;
"RTN","PRS8OTFF",53,0)
 ;Initialize scheduled work and xtra work counters
"RTN","PRS8OTFF",54,0)
 ;
"RTN","PRS8OTFF",55,0)
 F WEEK=1:1:2 S (SCHWRK(WEEK),XTRAWRK(WEEK))=0,XWRK(WEEK)=""
"RTN","PRS8OTFF",56,0)
 ;
"RTN","PRS8OTFF",57,0)
 ;Loop through Each day of the pay period
"RTN","PRS8OTFF",58,0)
 ;
"RTN","PRS8OTFF",59,0)
 F DAY=1:1:14 D
"RTN","PRS8OTFF",60,0)
 .S WEEK=$S(DAY>7:2,1:1)
"RTN","PRS8OTFF",61,0)
 .S WRKSTR=$G(^TMP($J,"PRS8",DAY,"W")) ; work node includes addt ff hrs.
"RTN","PRS8OTFF",62,0)
 .;
"RTN","PRS8OTFF",63,0)
 .; loop through each 15 min increment of the current day 
"RTN","PRS8OTFF",64,0)
 .; totaling scheduled and unscheduled work
"RTN","PRS8OTFF",65,0)
 .;
"RTN","PRS8OTFF",66,0)
 .F QHRCNT=1:1:96 S QHTCODE=$E(WRKSTR,QHRCNT) Q:'$L(QHTCODE)  D
"RTN","PRS8OTFF",67,0)
 . . ;
"RTN","PRS8OTFF",68,0)
 . . ; SET HOLIDAY TO 0,1,2 FOR NO HOLIDAY, HOL EXUSED, OR HOLIDAY WORKED
"RTN","PRS8OTFF",69,0)
 . . ;
"RTN","PRS8OTFF",70,0)
 . . S HOLIDAY=$$HOLIDAY(QHRCNT,DAY)
"RTN","PRS8OTFF",71,0)
 . . ;
"RTN","PRS8OTFF",72,0)
 . . ; INCREMENT SCHEDULED WORK IF ACCOUNTED FOR WITH APPROPRIATE CODE.
"RTN","PRS8OTFF",73,0)
 . . I "1SLWAUXYBCFGDJRMVn"[QHTCODE!(QHTCODE="O"&(HOLIDAY=2)) D
"RTN","PRS8OTFF",74,0)
 . . . S SCHWRK(WEEK)=SCHWRK(WEEK)+1
"RTN","PRS8OTFF",75,0)
 . . ;
"RTN","PRS8OTFF",76,0)
 . . ; Increment any unscheduled work or unscheduled CT or OT
"RTN","PRS8OTFF",77,0)
 . . I "4EeOs"[QHTCODE&(HOLIDAY<1) D
"RTN","PRS8OTFF",78,0)
 . . . S XTRAWRK(WEEK)=XTRAWRK(WEEK)+1
"RTN","PRS8OTFF",79,0)
 . . . S XWRK(WEEK)=XWRK(WEEK)_QHTCODE
"RTN","PRS8OTFF",80,0)
 ;
"RTN","PRS8OTFF",81,0)
 Q
"RTN","PRS8OTFF",82,0)
 ;
"RTN","PRS8OTFF",83,0)
 ;==============================================================
"RTN","PRS8OTFF",84,0)
 ;
"RTN","PRS8OTFF",85,0)
CALCOT(SW,XW,XWS) ;
"RTN","PRS8OTFF",86,0)
 ; Update the week array with overtime
"RTN","PRS8OTFF",87,0)
 ;
"RTN","PRS8OTFF",88,0)
 ;Possible permutations of Scheduled and Unscheduled
"RTN","PRS8OTFF",89,0)
 ;                          |
"RTN","PRS8OTFF",90,0)
 ;                        53|HRS
"RTN","PRS8OTFF",91,0)
 ;                          |
"RTN","PRS8OTFF",92,0)
 ; 1.  SSSSSSSSSSSSSSSSSSSSS|SSSSSSSSS
"RTN","PRS8OTFF",93,0)
 ; 2.  SSSSSSSSSSSSSSSSSSSSS|SSSSSUUUUUUUUUUUU
"RTN","PRS8OTFF",94,0)
 ; 3.  SSSSSSSSSSSSSSSSSSSSS|UUUUUUUUUUUUU
"RTN","PRS8OTFF",95,0)
 ; 4.  SSSSSSSSSSSSSSSSUUUUU|UUUUUUUUUUU
"RTN","PRS8OTFF",96,0)
 ; 5.  SSSSSSSSSSSSSSSSSS   |
"RTN","PRS8OTFF",97,0)
 ; 6.  SSSSSSSSSSSSUUU      |
"RTN","PRS8OTFF",98,0)
 ;
"RTN","PRS8OTFF",99,0)
 ; |------------------------------------------|
"RTN","PRS8OTFF",100,0)
 ; |  After Patch 85          |<= 212 |> 212  |
"RTN","PRS8OTFF",101,0)
 ; |------------------------------------------|
"RTN","PRS8OTFF",102,0)
 ; |Code|    Type of Time     | Piece | Piece |
"RTN","PRS8OTFF",103,0)
 ; |------------------------------------------|
"RTN","PRS8OTFF",104,0)
 ; | ** |All Scheduled Time   |       |  26   |
"RTN","PRS8OTFF",105,0)
 ; | 4  |Unscheduled Regular  |   9   |  20   |
"RTN","PRS8OTFF",106,0)
 ; | E  |Comp Time Earned     |   9   |   7   |
"RTN","PRS8OTFF",107,0)
 ; | e  |Scheduled Comp Time  |   9   |  20   |
"RTN","PRS8OTFF",108,0)
 ; | O  |Overtime             |   9   |  20   |
"RTN","PRS8OTFF",109,0)
 ; | s  |Scheduled Overtime   |   9   |  20   |
"RTN","PRS8OTFF",110,0)
 ; |------------------------------------------|
"RTN","PRS8OTFF",111,0)
 ;
"RTN","PRS8OTFF",112,0)
 N I,P,WEEK,Y,Z
"RTN","PRS8OTFF",113,0)
 F WEEK=1:1:2 D
"RTN","PRS8OTFF",114,0)
 . ;
"RTN","PRS8OTFF",115,0)
 . ; Post Regular Scheduled Hours In Excess of 53 as RA/RE
"RTN","PRS8OTFF",116,0)
 . ; Scenarios 1 & 2
"RTN","PRS8OTFF",117,0)
 . I SW(WEEK)>212 D
"RTN","PRS8OTFF",118,0)
 . . S Y=SW(WEEK)-212,P=26 D SET
"RTN","PRS8OTFF",119,0)
 . ;
"RTN","PRS8OTFF",120,0)
 . ; Post Extra Hours per chart.  Scenarios 2,3,4 & 6
"RTN","PRS8OTFF",121,0)
 . I $L(XWS(WEEK))>0 D
"RTN","PRS8OTFF",122,0)
 . . S Y=1
"RTN","PRS8OTFF",123,0)
 . . ;
"RTN","PRS8OTFF",124,0)
 . . ; step thru extra time segments
"RTN","PRS8OTFF",125,0)
 . . F I=1:1:$L(XWS(WEEK)) D
"RTN","PRS8OTFF",126,0)
 . . . S Z=$E(XWS(WEEK),I)
"RTN","PRS8OTFF",127,0)
 . . . S P=$S(SW(WEEK)+I'>212:9,Z="E":7,Z="e":20,Z="s":20,1:20)
"RTN","PRS8OTFF",128,0)
 . . . D SET
"RTN","PRS8OTFF",129,0)
 . . . ;
"RTN","PRS8OTFF",130,0)
 . . . ; If Scheduled OT or CT after 53 hours, also count as Unscheduled Regular
"RTN","PRS8OTFF",131,0)
 . . . I P=26 S P=9 D SET
"RTN","PRS8OTFF",132,0)
 Q
"RTN","PRS8OTFF",133,0)
 ;
"RTN","PRS8OTFF",134,0)
 ;==============================================================
"RTN","PRS8OTFF",135,0)
 ;
"RTN","PRS8OTFF",136,0)
SET ; Set sleep time into WK array
"RTN","PRS8OTFF",137,0)
 S $P(WK(WEEK),"^",P)=$P(WK(WEEK),"^",P)+Y
"RTN","PRS8OTFF",138,0)
 Q
"RTN","PRS8OTFF",139,0)
 ;
"RTN","PRS8OTFF",140,0)
 ;==============================================================
"RTN","PRS8OTFF",141,0)
 ;
"RTN","PRS8OTFF",142,0)
HOLIDAY(TIMESEG,DAY) ;
"RTN","PRS8OTFF",143,0)
 ;INPUT:
"RTN","PRS8OTFF",144,0)
 ; DAY--day of pay period 1 through 14 or 15 for 1st day of next pp
"RTN","PRS8OTFF",145,0)
 ; TIMESEG--position in 96 character day string (1 to 96)
"RTN","PRS8OTFF",146,0)
 ;OUTPUT:
"RTN","PRS8OTFF",147,0)
 ;  code for holiday worked, holiday exused or neither from the
"RTN","PRS8OTFF",148,0)
 ;  ^TMP($J,"PRS8",DAY,"HOL") global
"RTN","PRS8OTFF",149,0)
 ;      holiday worked coded: 2 
"RTN","PRS8OTFF",150,0)
 ;      holiday exused coded: 1
"RTN","PRS8OTFF",151,0)
 ;      neither coded: 0
"RTN","PRS8OTFF",152,0)
 ;
"RTN","PRS8OTFF",153,0)
 Q $E($G(^TMP($J,"PRS8",DAY,"HOL")),TIMESEG)
"RTN","PRS8ST")
0^14^B26297736^B23489648
"RTN","PRS8ST",1,0)
PRS8ST ;HISC/MGD-DECOMPOSITION, START-UP ;12/12/05
"RTN","PRS8ST",2,0)
 ;;4.0;PAID;**45,92,102**;Sep 21, 1995
"RTN","PRS8ST",3,0)
 ;
"RTN","PRS8ST",4,0)
 ;This routine is the one which actually gets everything moving.
"RTN","PRS8ST",5,0)
 ;It moves the information from the ^TMP global into a local array
"RTN","PRS8ST",6,0)
 ;[DAY(DAY)] for the three day period it's working with.  It then
"RTN","PRS8ST",7,0)
 ;processes that information internally and, where necessary, by
"RTN","PRS8ST",8,0)
 ;calling certain external processes.
"RTN","PRS8ST",9,0)
 ;
"RTN","PRS8ST",10,0)
 ;Called by Routines:  PRS8SU
"RTN","PRS8ST",11,0)
 ;
"RTN","PRS8ST",12,0)
 K SBY F DAY=1:1:14 D
"RTN","PRS8ST",13,0)
 .K DAY(DAY-2)
"RTN","PRS8ST",14,0)
 .S LP=$S(DAY=1:"0,1,2",1:(DAY+1)),JURY=0
"RTN","PRS8ST",15,0)
 .F II=1:1 S DY=$P(LP,",",II) Q:DY=""  D
"RTN","PRS8ST",16,0)
 ..F J=0,1,2,4,10,"CP","DH1","DH2","HOL","ML","MT1","MT2","OFF","P","TOUR","TWO","W" D
"RTN","PRS8ST",17,0)
 ...S DAY(DY,J)=$G(^TMP($J,"PRS8",DY,J))
"RTN","PRS8ST",18,0)
 ...;
"RTN","PRS8ST",19,0)
 ...;P 45 INITIALIZE THE "F" NODE HERE BY SIMPLY COPYING THE 
"RTN","PRS8ST",20,0)
 ...;THE "W" NODE FROM TEMP--FOR TESTING PURPOSES.
"RTN","PRS8ST",21,0)
 ...;THE NODE SHOULD BE INITIALIZED BY COPYING THE "F" NODE
"RTN","PRS8ST",22,0)
 ...;FROM THE TEMP GLOBAL.
"RTN","PRS8ST",23,0)
 ...S DAY(DY,"F")=$G(^TMP($J,"PRS8",DY,"W"))
"RTN","PRS8ST",24,0)
 .F II=1:1 S DY=$P(LP,",",II) Q:DY=""  D
"RTN","PRS8ST",25,0)
 ..S WK=$S(DY<8:1,1:2)
"RTN","PRS8ST",26,0)
 ..S TOUR=$S(TYP'["W":1,+DAY(DY,"TOUR"):+DAY(DY,"TOUR"),1:+TOUR(WK))
"RTN","PRS8ST",27,0)
 ..D MOVE^PRS8AC S N=DAY(DY,2),WK=$S(DY<8:1,1:2) ;exception node/week
"RTN","PRS8ST",28,0)
 ..I N["UN" S X1="UN" D 2 ;unavailable
"RTN","PRS8ST",29,0)
 ..I N["HX" S X1="HX" D 2 ;holiday excused
"RTN","PRS8ST",30,0)
 ..I N["ON" S X1="ON" D 2 ;on-call
"RTN","PRS8ST",31,0)
 ..I N["SB" S X1="SB" D 2 ;standby
"RTN","PRS8ST",32,0)
 ..S N=DAY(DY,1),DH=DAY(DY,"DH1"),NN=1 D  I DAY(DY,"TWO") S N=DAY(DY,4),DH=DAY(DY,"DH2"),NN=4 D
"RTN","PRS8ST",33,0)
 ...S QT=0 F PRS8=1:3 S V=$P(N,"^",PRS8,PRS8+2) Q:QT  D
"RTN","PRS8ST",34,0)
 ....N PRS8AFFH S PRS8AFFH=0 ;fire fighter additional hours flag
"RTN","PRS8ST",35,0)
 ....S X=$P(DAY(DY,NN),"^",PRS8,999)
"RTN","PRS8ST",36,0)
 ....I X="" S QT=1 Q  ;nothing left to check
"RTN","PRS8ST",37,0)
 ....I X?1"^"."^" S QT=1 Q  ;only ^ left
"RTN","PRS8ST",38,0)
 ....;
"RTN","PRS8ST",39,0)
 ....; X = 9 is special tour CODE FOR FF ADDTL HRS.
"RTN","PRS8ST",40,0)
 ....; It gets converted to 'f'
"RTN","PRS8ST",41,0)
 ....S X=$P(V,"^",3),VAR=1 I X S VAR=$E("se1BC235f",+X) I '+VAR D ENT Q:Q
"RTN","PRS8ST",42,0)
 ....;if this segment is addt ff hrs then save a variable to signify
"RTN","PRS8ST",43,0)
 ....;that, but convert the time back to a 1 to use in the W node.
"RTN","PRS8ST",44,0)
 ....I "Ff"[TYP,VAR="f" S (PRS8AFFH,VAR)=1
"RTN","PRS8ST",45,0)
 ....;
"RTN","PRS8ST",46,0)
 ....I VAR,TYP'["W" S VAR=$S(VAR=5:5,1:1) ;only wg need shifts
"RTN","PRS8ST",47,0)
 ....S JURY=$G(^TMP($J,"PRS8",DY,2)) I JURY'="" D
"RTN","PRS8ST",48,0)
 .....F J=4,8,12,16,20,24,28 S:$P(JURY,"^",J)=6 JURY=1 Q
"RTN","PRS8ST",49,0)
 ....D ^PRS8AC ;build "W" node
"RTN","PRS8ST",50,0)
 ..S N=DAY(DY,2),WK=$S(DY<8:1,1:2) ;exception node/week
"RTN","PRS8ST",51,0)
 ..S QT=0 F PRS8=1:4:25 S V=$P(N,"^",PRS8,PRS8+3) Q:QT  D
"RTN","PRS8ST",52,0)
 ...I TYP["D",$P(V,"^",3)="" S QT=1 Q  ;doctor
"RTN","PRS8ST",53,0)
 ...I TYP'["D",'+V,$P(V,"^",3)="" S QT=1 Q  ;all others
"RTN","PRS8ST",54,0)
 ...S X=$P(V,"^",3) I "^UN^ON^SB^HX^"'[("^"_X_"^") D ^PRS8EX
"RTN","PRS8ST",55,0)
 ..S ^TMP($J,"PRS8",DY,"W")=DAY(DY,"W") ;save in ^TMP
"RTN","PRS8ST",56,0)
 ..S ^TMP($J,"PRS8",DY,"P")=DAY(DY,"P") ;save non-prem ot in ^TMP
"RTN","PRS8ST",57,0)
 ..S ^TMP($J,"PRS8",DY,"HOL")=DAY(DY,"HOL") ;holiday
"RTN","PRS8ST",58,0)
 .S WK=$S(DAY<8:1,1:2),OFF=+DAY(DAY,"OFF") ;week/day off
"RTN","PRS8ST",59,0)
 .S TOUR=$S(TYP'["W":1,+DAY(DAY,"TOUR"):+DAY(DAY,"TOUR"),1:+TOUR(WK))
"RTN","PRS8ST",60,0)
 .I TYP["I",DAY>0,DAY<15,$G(DAY(DAY,"DWK")) D  ;days worked
"RTN","PRS8ST",61,0)
 ..S DWK=DWK+1 ;count days worked
"RTN","PRS8ST",62,0)
 ..I CYA,DAY'<CYA S CAMISC=CAMISC+1 ;calendar year adjustment (CA)
"RTN","PRS8ST",63,0)
 .S MDY=+DAY D ^PRS8MT I +DAY=1 S MDY=0 D ^PRS8MT
"RTN","PRS8ST",64,0)
 .Q
"RTN","PRS8ST",65,0)
 ;
"RTN","PRS8ST",66,0)
 F DAY=1:1:14 D
"RTN","PRS8ST",67,0)
 .;make DAY array available for prior, current, and next day
"RTN","PRS8ST",68,0)
 .K DAY(DAY-2)
"RTN","PRS8ST",69,0)
 .S LP=$S(DAY=1:"0,1,2",1:(DAY+1))
"RTN","PRS8ST",70,0)
 .F II=1:1 S DY=$P(LP,",",II) Q:DY=""  D
"RTN","PRS8ST",71,0)
 ..F J=0,1,2,4,10,"CP","DH1","DH2","HOL","ML","MT1","MT2","OFF","P","TOUR","TWO","W","F" S DAY(DY,J)=$G(^TMP($J,"PRS8",DY,J))
"RTN","PRS8ST",72,0)
 .;
"RTN","PRS8ST",73,0)
 .S WK=$S(DAY<8:1,1:2),OFF=+DAY(DAY,"OFF") ;week/day off
"RTN","PRS8ST",74,0)
 .S TOUR=$S(TYP'["W":1,+DAY(DAY,"TOUR"):+DAY(DAY,"TOUR"),1:+TOUR(WK))
"RTN","PRS8ST",75,0)
 .;
"RTN","PRS8ST",76,0)
 .I ((TYP["I")!(TYP["P")),DAY>0,DAY<15 D  ;FOR CY
"RTN","PRS8ST",77,0)
 ..I $S('CYA:1,DAY<CYA:1,1:0) Q  ;quit if no calander year adjustment
"RTN","PRS8ST",78,0)
 ..S IIX=0 I $E(ENT,2)'="D" F II=1:1:$L(DAY(DAY,"W")) D
"RTN","PRS8ST",79,0)
 ...I "4E"[$E(DAY(DAY,"W"),II) S IIX=IIX+1
"RTN","PRS8ST",80,0)
 ...S CYA2806=CYA2806+("ALSUMRVW1235OscXYFGD"[$E(DAY(DAY,"W"),II)) S:(IIX<33)&(FLX'="C"&(TH(WK)+IIX<163))!(FLX="C"&(TH+IIX<323)) CYA2806=CYA2806+("4E"[$E(DAY(DAY,"W"),II))
"RTN","PRS8ST",81,0)
 ...;SF2806 adjustment (CY) (163 & 323 because mt subtracted)
"RTN","PRS8ST",82,0)
 .;
"RTN","PRS8ST",83,0)
 .I CYA,DAY'<CYA,DAY(DAY,"W")["W" D  ;count wop in hours for CA
"RTN","PRS8ST",84,0)
 ..F II=1:1:$L(DAY(DAY,"W")) S WPCYA=WPCYA+("W"=$E(DAY(DAY,"W"),II))
"RTN","PRS8ST",85,0)
 .;
"RTN","PRS8ST",86,0)
 .I TYP'["D",DAY(DAY,"W")'?1"0"."0" D ^PRS8PP ;nightdiff/shift premiums
"RTN","PRS8ST",87,0)
 .;
"RTN","PRS8ST",88,0)
 .F T=1:1:96 S VAR1=$E(DAY(DAY,"W"),T) S OK=0 D
"RTN","PRS8ST",89,0)
 ..I "BbCct"[VAR1 D  ; process on-call/standby
"RTN","PRS8ST",90,0)
 ...I T=96!("BbCct"'[$E(DAY(DAY,"W"),T+1)) S OK=T
"RTN","PRS8ST",91,0)
 ...I DOUB D ^PRS8OC,^PRS8SB Q  ;Prem. Pay of "W" or "V"
"RTN","PRS8ST",92,0)
 ...I VAR1'=""&("Cct"[VAR1) D ^PRS8OC Q  ;compte on-call/2hr minimum
"RTN","PRS8ST",93,0)
 ...I "Bb"[VAR1 D ^PRS8SB ;standby
"RTN","PRS8ST",94,0)
 .I $G(SBY) D UP^PRS8SB
"RTN","PRS8ST",95,0)
 .;
"RTN","PRS8ST",96,0)
 .Q
"RTN","PRS8ST",97,0)
 ;
"RTN","PRS8ST",98,0)
 ;P 45 CODE O firefighters use PRS8MISC to calculated overtime
"RTN","PRS8ST",99,0)
 ;but code R and C firefighters use routine PRS8OTFF.
"RTN","PRS8ST",100,0)
 ;
"RTN","PRS8ST",101,0)
 I "Ff"[TYP&("RC"[PMP) D
"RTN","PRS8ST",102,0)
 .  D ^PRS8OTFF
"RTN","PRS8ST",103,0)
 E  D
"RTN","PRS8ST",104,0)
 .  D ^PRS8MISC
"RTN","PRS8ST",105,0)
 K DH,DY,I,J,JURY,K,K1,LP,N,NN,OFF,PRS8L,TOUR,V,VAR,WG,X,Y,Y1
"RTN","PRS8ST",106,0)
 D ^PRS8WE ;Weekend premiums
"RTN","PRS8ST",107,0)
 D ^PRS8UP ;finish up Misc and non-time related activities
"RTN","PRS8ST",108,0)
 Q
"RTN","PRS8ST",109,0)
 ;
"RTN","PRS8ST",110,0)
ENT ; --- check entitlement to activity for 1 node non-norm hrs
"RTN","PRS8ST",111,0)
 S Q=0
"RTN","PRS8ST",112,0)
 I '$E(ENT,$P("12^28^^29^26^^^29","^",+X)) S Q=1 ;entitlement string
"RTN","PRS8ST",113,0)
 ;PATCH 45: ADD CHECK FOR FIRE FIGHTER ADDITIONAL HOURS
"RTN","PRS8ST",114,0)
 ;SINCE THIS TYPE OF TIME IS NOT IN THE ENTITLMENT TABLE
"RTN","PRS8ST",115,0)
 ;IT IS SET UP WITH TOUR IND. WITH CODE 9
"RTN","PRS8ST",116,0)
 I "Ff"[TYP,X=9 S Q=0
"RTN","PRS8ST",117,0)
 Q:X'=12  I TYP["W",TOUR>1,$E(ENT,11+TOUR) S Q=0
"RTN","PRS8ST",118,0)
 Q
"RTN","PRS8ST",119,0)
 ;
"RTN","PRS8ST",120,0)
2 ; --- get 2 node unavailable/oncall and standby
"RTN","PRS8ST",121,0)
 F PRS8=1:4:25 S V=$P(N,"^",PRS8,PRS8+2) Q:$P(V,"^",1)=""  D
"RTN","PRS8ST",122,0)
 .S X=$P(V,"^",3) I X=X1 D ^PRS8EX
"RTN","PRS8ST",123,0)
 K PRS8,X,V Q
"RTN","PRSACED3")
0^15^B12520973^B13311294
"RTN","PRSACED3",1,0)
PRSACED3 ;HISC/MGD-T&A Edits ;02/03/06
"RTN","PRSACED3",2,0)
 ;;4.0;PAID;**35,45,75,92,96,102**;Sep 21, 1995
"RTN","PRSACED3",3,0)
 S E(1)=0
"RTN","PRSACED3",4,0)
 F K=24,25,33,43:1:45 S X=$P(C0,"^",K) I X'="" S LAB=$P(T0," ",K-12) D @LAB
"RTN","PRSACED3",5,0)
 F K=6,7,15,25:1:27,42,45,47:1:57 S X=$P(C1,"^",K) I X'="" S LAB=$P(T1," ",K) D @LAB
"RTN","PRSACED3",6,0)
 I E(1)>$S(NOR>1:NOR*10,1:140),DUT=1 S ERR=69 D ERR^PRSACED
"RTN","PRSACED3",7,0)
 G ^PRSACED4
"RTN","PRSACED3",8,0)
PA ;
"RTN","PRSACED3",9,0)
PB S E(1)=E(1)+X
"RTN","PRSACED3",10,0)
 I DUT=2,LAB="PA",X>$P(C0,"^",42) S ERR=70 D ERR^PRSACED
"RTN","PRSACED3",11,0)
 I DUT=2,LAB="PB",X>$P(C1,"^",24) S ERR=70 D ERR^PRSACED
"RTN","PRSACED3",12,0)
 I DUT=3,X>400 S ERR=71 D ERR^PRSACED
"RTN","PRSACED3",13,0)
 I '$P(C1,"^",41) S ERR=72 D ERR^PRSACED
"RTN","PRSACED3",14,0)
 Q
"RTN","PRSACED3",15,0)
ON ;
"RTN","PRSACED3",16,0)
CL I PAY'="A"!("^U^V^W^Y^"'[(U_PMP_U)) S ERR=73 D ERR^PRSACED
"RTN","PRSACED3",17,0)
 I X>1280 S ERR=74 D ERR^PRSACED
"RTN","PRSACED3",18,0)
 Q
"RTN","PRSACED3",19,0)
VC I $P(C1,"^",27)="" S ERR=75 D ERR^PRSACED
"RTN","PRSACED3",20,0)
VS I LAB="VS",$P(C0,"^",45)="" S ERR=75 D ERR^PRSACED
"RTN","PRSACED3",21,0)
 I PAY'="U" S ERR=77 D ERR^PRSACED
"RTN","PRSACED3",22,0)
 Q
"RTN","PRSACED3",23,0)
YA Q
"RTN","PRSACED3",24,0)
YD Q
"RTN","PRSACED3",25,0)
YE Q
"RTN","PRSACED3",26,0)
DT ;Validate lump sum expiration date and report format errors.
"RTN","PRSACED3",27,0)
 ; REQUIRED VARIABLES:  X = date to be checked, format mmddyy.
"RTN","PRSACED3",28,0)
 ;                      PPI = current pay period IEN.
"RTN","PRSACED3",29,0)
 ;
"RTN","PRSACED3",30,0)
 ;1. Check month.  2. Check days aren't > than corresponding month.
"RTN","PRSACED3",31,0)
 ;3. To check that year is in range: current year to next year:
"RTN","PRSACED3",32,0)
 ;     Get 1st day of pp for date being checked.
"RTN","PRSACED3",33,0)
 ;     Get 4 digit year from PP^PRSAPPU.
"RTN","PRSACED3",34,0)
 ;     Add 1 to the 4 digit year and check year range.
"RTN","PRSACED3",35,0)
 ;
"RTN","PRSACED3",36,0)
 ;  Month
"RTN","PRSACED3",37,0)
 I $E(X,1,2)<1!($E(X,1,2)>12) D
"RTN","PRSACED3",38,0)
 .  S ERR=138 D ERR^PRSACED
"RTN","PRSACED3",39,0)
 ;
"RTN","PRSACED3",40,0)
 ;  Days
"RTN","PRSACED3",41,0)
 S X1=+$E(X,3,4)
"RTN","PRSACED3",42,0)
 I X1<1!(X1>$P("31 29 31 30 31 30 31 31 30 31 30 31"," ",+$E(X,1,2))) D
"RTN","PRSACED3",43,0)
 .  S ERR=138 D ERR^PRSACED
"RTN","PRSACED3",44,0)
 ;
"RTN","PRSACED3",45,0)
 ;  Year
"RTN","PRSACED3",46,0)
 N PPE,PP4Y,D1,NXTYR,DAY
"RTN","PRSACED3",47,0)
 S D1=$P($G(^PRST(458,PPI,1)),"^")
"RTN","PRSACED3",48,0)
 D PP^PRSAPPU
"RTN","PRSACED3",49,0)
 S YEAR=$E(+PP4Y,3,4),NXTYR=$E(+PP4Y+1,3,4),X1=$E(X,5,6)
"RTN","PRSACED3",50,0)
 I '((X1=YEAR)!(X1=NXTYR)) D
"RTN","PRSACED3",51,0)
 .  S ERR=138 D ERR^PRSACED
"RTN","PRSACED3",52,0)
 ;
"RTN","PRSACED3",53,0)
 ; Firefighters can't use lump sum date
"RTN","PRSACED3",54,0)
 I NOR>80 S ERR=173 D ERR^PRSACED
"RTN","PRSACED3",55,0)
 Q
"RTN","PRSACED3",56,0)
YH Q
"RTN","PRSACED3",57,0)
SP ; saturday premium pay
"RTN","PRSACED3",58,0)
SQ N HYBRID
"RTN","PRSACED3",59,0)
 S HYBRID=$S(+$G(DFN)'="":$$HYBRID^PRSAENT1(DFN),1:0)
"RTN","PRSACED3",60,0)
 S MX=$S("ABCKMN"[PAY:400,HYBRID:400,1:320) I X>MX S ERR=140 D ERR^PRSACED
"RTN","PRSACED3",61,0)
 I "ABCKMN"'[PAY S ERR=141 D ERR^PRSACED
"RTN","PRSACED3",62,0)
 I "ABCN"[PAY,PMP="",'HYBRID S ERR=149 D ERR^PRSACED
"RTN","PRSACED3",63,0)
 Q
"RTN","PRSACED3",64,0)
TF ; travel ot flsa
"RTN","PRSACED3",65,0)
TG I FLSA'="N" S ERR=142 D ERR^PRSACED
"RTN","PRSACED3",66,0)
 Q
"RTN","PRSACED3",67,0)
DA ; hrs excess 8 (day)
"RTN","PRSACED3",68,0)
DE I "0123456789AGKMNU"'[PAY S ERR=143 D ERR^PRSACED
"RTN","PRSACED3",69,0)
 Q
"RTN","PRSACED3",70,0)
DB ; hrs excess 8 (two)
"RTN","PRSACED3",71,0)
DF I "0123456789BGU"'[PAY S ERR=145 D ERR^PRSACED
"RTN","PRSACED3",72,0)
 Q
"RTN","PRSACED3",73,0)
DC ; hrs excess 8 (three)
"RTN","PRSACED3",74,0)
DG I "0123456789GU"'[PAY S ERR=147 D ERR^PRSACED
"RTN","PRSACED3",75,0)
 Q
"RTN","PRSACED3",76,0)
TA ; travel
"RTN","PRSACED3",77,0)
 I NOR>0,DUT=1,(X+($P(C1,"^",54)))>(NOR*10) S ERR=95 D ERR^PRSACED
"RTN","PRSACED3",78,0)
 I "23"[DUT,X>($P(C0,"^",42)+($P(C0,"^",21))) S ERR=94 D ERR^PRSACED
"RTN","PRSACED3",79,0)
 I DUT=1,"45"[LVG,+X>70 S ERR=91 D ERR^PRSACED
"RTN","PRSACED3",80,0)
 I NOR>80,$P(C0,"^",42),X>$P(C0,"^",42) S ERR=92 D ERR^PRSACED
"RTN","PRSACED3",81,0)
 Q
"RTN","PRSACED3",82,0)
TB ;
"RTN","PRSACED3",83,0)
 I NOR>0,DUT=1,($P(C1,"^",15)+X)>(NOR*10) S ERR=95 D ERR^PRSACED
"RTN","PRSACED3",84,0)
 I "23"[DUT,X>($P(C1,"^",24)+($P(C1,"^",3))) S ERR=94 D ERR^PRSACED
"RTN","PRSACED3",85,0)
 I DUT=1,"45"[LVG,+X>70 S ERR=91 D ERR^PRSACED
"RTN","PRSACED3",86,0)
 I NOR>80,$P(C1,"^",24),X>$P(C1,"^",24) S ERR=92 D ERR^PRSACED
"RTN","PRSACED3",87,0)
 Q
"RTN","PRSACED3",88,0)
TC ; training
"RTN","PRSACED3",89,0)
 I NOR>0,DUT=1,(X+($P(C1,"^",57)))>(NOR*10) S ERR=98 D ERR^PRSACED
"RTN","PRSACED3",90,0)
 I "23"[DUT,X>($P(C0,"^",42)+($P(C0,"^",21))) S ERR=97 D ERR^PRSACED
"RTN","PRSACED3",91,0)
 I DUT=1,"45"[LVG,+X>70 S ERR=91 D ERR^PRSACED
"RTN","PRSACED3",92,0)
 I NOR>80,$P(C0,"^",42),X>$P(C0,"^",42) S ERR=92 D ERR^PRSACED
"RTN","PRSACED3",93,0)
 Q
"RTN","PRSACED3",94,0)
TD ;
"RTN","PRSACED3",95,0)
 I NOR>0,DUT=1,($P(C1,"^",42)+X)>(NOR*10) S ERR=98 D ERR^PRSACED
"RTN","PRSACED3",96,0)
 I "23"[DUT,X>($P(C1,"^",24)+($P(C1,"^",3))) S ERR=97 D ERR^PRSACED
"RTN","PRSACED3",97,0)
 I DUT=1,"45"[LVG,+X>70 S ERR=91 D ERR^PRSACED
"RTN","PRSACED3",98,0)
 I NOR>80,$P(C1,"^",24),X>$P(C1,"^",24) S ERR=92 D ERR^PRSACED
"RTN","PRSACED3",99,0)
 Q
"RTN","PRSACED5")
0^16^B6094695^B6236995
"RTN","PRSACED5",1,0)
PRSACED5 ; HISC/REL/FPT-T&A Cross-Edits ;02/07/06  12:53
"RTN","PRSACED5",2,0)
 ;;4.0;PAID;**102**;Sep 21, 1995
"RTN","PRSACED5",3,0)
 G D1:DUT=1,D2:DUT=2,D3:DUT=3 Q
"RTN","PRSACED5",4,0)
D1 G:+NOR N1
"RTN","PRSACED5",5,0)
 I "045"'[LVG S ERR=151 D ERR^PRSACED
"RTN","PRSACED5",6,0)
 I "LJXWPQY"'[PAY S ERR=152 D ERR^PRSACED
"RTN","PRSACED5",7,0)
 Q:"45"'[LVG
"RTN","PRSACED5",8,0)
 S E(1)=0 F K=13:1:18 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",9,0)
 S E(2)=0 F K=48:1:53 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",10,0)
 I E(1)>7!(E(2)>7) S ERR=159 D ERR^PRSACED
"RTN","PRSACED5",11,0)
 I LVG=5 I E(1)+E(2)+$P(C1,"^",30)>14 S ERR=160 D ERR^PRSACED
"RTN","PRSACED5",12,0)
 Q
"RTN","PRSACED5",13,0)
N1 I '(NOR=48&("KM"[PAY)),NOR<80 S ERR=153 D ERR^PRSACED
"RTN","PRSACED5",14,0)
 I '(PAY="W"&(LVG=0)),"123"'[LVG S ERR=154 D ERR^PRSACED
"RTN","PRSACED5",15,0)
 S E(1)=0 F K=13:1:18,20,43 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",16,0)
 S E(2)=0 F K=48:1:53 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",17,0)
 F K=2,25 S X=$P(C1,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",18,0)
 G:NOR=80 N2
"RTN","PRSACED5",19,0)
 I $P(C0,"^",42)+$P(C1,"^",24)=0 S MX=NOR/2 I E(1)>MX!(E(2)>MX) S ERR=161 D ERR^PRSACED
"RTN","PRSACED5",20,0)
 S X=$P(C0,"^",42) I X S X=$E(X,1,2)+($E(X,3)*.25) I E(1)>X S ERR=163 D ERR^PRSACED
"RTN","PRSACED5",21,0)
 S X=$P(C1,"^",24) I X S X=$E(X,1,2)+($E(X,3)*.25) I E(2)>X S ERR=163 D ERR^PRSACED
"RTN","PRSACED5",22,0)
 Q
"RTN","PRSACED5",23,0)
N2 I CWK'="C",E(1)>45!(E(2)>45) S ERR=165 D ERR^PRSACED
"RTN","PRSACED5",24,0)
 I CWK="C",E(1)+E(2)>80 S ERR=166 D ERR^PRSACED
"RTN","PRSACED5",25,0)
 Q
"RTN","PRSACED5",26,0)
D2 I NOR<1!(NOR>79) S ERR=155 D ERR^PRSACED
"RTN","PRSACED5",27,0)
 I "0123"'[LVG S ERR=156 D ERR^PRSACED
"RTN","PRSACED5",28,0)
 I "ABCGLMNRU0123456789PQT"'[PAY S ERR=157 D ERR^PRSACED
"RTN","PRSACED5",29,0)
 Q:"123"'[LVG
"RTN","PRSACED5",30,0)
 S E(1)=0 F K=13:1:18,20,43 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",31,0)
 S E(2)=0 F K=48:1:53 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",32,0)
 F K=2,25 S X=$P(C1,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",33,0)
 S X=$P(C0,"^",42),X=$E(X,1,2)+($E(X,3)*.25) I E(1)>X S ERR=164 D ERR^PRSACED
"RTN","PRSACED5",34,0)
 S X=$P(C1,"^",24),X=$E(X,1,2)+($E(X,3)*.25) I E(2)>X S ERR=164 D ERR^PRSACED
"RTN","PRSACED5",35,0)
 Q:CWK'="C"
"RTN","PRSACED5",36,0)
 S E(1)=0 F K=29,30,31 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",37,0)
 F K=11,12,13 S X=$P(C1,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",38,0)
 S E(2)=0 F K=21,42 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",39,0)
 F K=16,51 S X=$P(C0,"^",K),E(2)=E(2)-$E(X,1,2)-($E(X,3)*.25)
"RTN","PRSACED5",40,0)
 F K=3,24 S X=$P(C1,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",41,0)
 ; The following line was commented out for DFAS Release #1 per Angela Curtiss instructions.
"RTN","PRSACED5",42,0)
 ; I E(1),E(2)<80 S ERR=170 D ERR^PRSACED - 
"RTN","PRSACED5",43,0)
 Q
"RTN","PRSACED5",44,0)
D3 I +NOR!LVG S ERR=158 D ERR^PRSACED
"RTN","PRSACED5",45,0)
 Q
"RTN","PRSATP")
0^1^B19887527^B18733186
"RTN","PRSATP",1,0)
PRSATP ;HISC/REL,WIRMFO/MGD-Timekeeper Post Time ;02/26/04
"RTN","PRSATP",2,0)
 ;;4.0;PAID;**22,57,69,92,102**;Sep 21, 1995
"RTN","PRSATP",3,0)
 N GLOB ; global reference for employee's time & attendance record.
"RTN","PRSATP",4,0)
 S PRSTLV=2 D ^PRSAUTL G:TLI<1 EX S %DT="X",X="T+3" D ^%DT
"RTN","PRSATP",5,0)
 S %DT="AEPX",%DT("A")="Posting Date: ",%DT("B")="T-1",%DT(0)=-Y W ! D ^%DT
"RTN","PRSATP",6,0)
 G:Y<1 EX S D1=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1),DAY=$P(Y,"^",2)
"RTN","PRSATP",7,0)
 I PPI="" W !!,$C(7),"Pay Period is Not Open Yet!" G EX
"RTN","PRSATP",8,0)
 S PPE=$P($G(^PRST(458,PPI,0)),"^",1),DTE=$P($G(^PRST(458,PPI,2)),"^",DAY),DTI=$P($G(^(1)),"^",DAY)
"RTN","PRSATP",9,0)
D2 W !!,"Would you like to edit the T & A RECORDs in alphabetical order" S %=1 D YN^DICN I % S LP=% G EX:%=-1,LOOP:%=1,NME
"RTN","PRSATP",10,0)
 W !!,"Answer YES if you want all RECORDs brought up for which no data"
"RTN","PRSATP",11,0)
 W !,"has been entered." G D2
"RTN","PRSATP",12,0)
 ;
"RTN","PRSATP",13,0)
 ;
"RTN","PRSATP",14,0)
LOOP ;
"RTN","PRSATP",15,0)
 S LP=1,NN=""
"RTN","PRSATP",16,0)
 F  S NN=$O(^PRSPC("ATL"_TLE,NN)) Q:NN=""  F DFN=0:0 S DFN=$O(^PRSPC("ATL"_TLE,NN,DFN)) Q:DFN<1  S GLOB="" D POST D:GLOB]"" UNLOCK^PRSLIB00(GLOB) I 'LP G EX
"RTN","PRSATP",17,0)
 G EX
"RTN","PRSATP",18,0)
NME K DIC S DIC("A")="Select EMPLOYEE: ",DIC("S")="I $P(^(0),""^"",8)=TLE,$D(^PRST(458,PPI,""E"",+Y))",DIC(0)="AEQM",DIC="^PRSPC(",D="ATL"_TLE W ! D IX^DIC S DFN=+Y K DIC
"RTN","PRSATP",19,0)
 G:DFN<1 EX S GLOB="" D POST D:GLOB]"" UNLOCK^PRSLIB00(GLOB) G NME
"RTN","PRSATP",20,0)
POST S TC=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2),TC2=$P($G(^(0)),"^",13)
"RTN","PRSATP",21,0)
 I 'TC Q:LP'=2  W !!?5,"This Employee has no tour entered for this date." Q
"RTN","PRSATP",22,0)
 I "T"'[$P($G(^PRST(458,PPI,"E",DFN,0)),"^",2) W:LP=2 $C(7),!!,"This Employee has already been sent to Payroll." Q
"RTN","PRSATP",23,0)
 S STAT=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,10)),"^",1)
"RTN","PRSATP",24,0)
 I LP=1,"1 3 4"[TC!(STAT'="") Q
"RTN","PRSATP",25,0)
 ; lock employee record for editing by timekeeper
"RTN","PRSATP",26,0)
 I '$$AVAILREC^PRSLIB00("TK",.GLOB,.STOP) S:LP=1&$G(STOP) LP=0 Q
"RTN","PRSATP",27,0)
 D ^PRSADP1,LP,^PRSATP2,^PRSAENT
"RTN","PRSATP",28,0)
 G P0:TC>4,P0:TC=2,P0:TC=3,P3:TC=4,P1
"RTN","PRSATP",29,0)
P0 R !!,"Did Employee Only Work Scheduled Tour? ",X:DTIME S:'$T X="^^" S:X["^^" LP=0 Q:X["^"  S X=$TR(X,"yesnor","YESNOR")
"RTN","PRSATP",30,0)
 S:X="" X="*" I $P("YES",X,1)'="",$P("NO",X,1)'="",X'="R" W $C(7),!?5," Answer YES or NO or R for Normal Posting with Remarks" G P0
"RTN","PRSATP",31,0)
 S X=$E(X,1) I "YR"'[X G P1
"RTN","PRSATP",32,0)
 S PTY=1 I STAT'="" K ^PRST(458,PPI,"E",DFN,"D",DAY,2),^(3)
"RTN","PRSATP",33,0)
 I TC=3 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,2),"^",3)="RG",STAT="T"
"RTN","PRSATP",34,0)
 I STAT'="",$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12) D NOW^%DTC S NOW=%,TT="HW" D S0^PRSAPPH
"RTN","PRSATP",35,0)
 S LV="" D A2^PRSATP0:X="R" G UPD
"RTN","PRSATP",36,0)
P1 R !!,"Was Employee Absent the Entire Tour? ",X:DTIME S:'$T X="^" Q:X["^"  S X=$TR(X,"yesno","YESNO")
"RTN","PRSATP",37,0)
 S:X="" X="*" I $P("YES",X,1)'="",$P("NO",X,1)'="" W $C(7)," Answer YES or NO" G P1
"RTN","PRSATP",38,0)
 I X?1"Y".E D ^PRSATP0 Q:X["^"  G UPD
"RTN","PRSATP",39,0)
 I $E(ENT,1,2)["D" K ^PRST(458,PPI,"E",DFN,"D",DAY,2),^(3),^(10) Q
"RTN","PRSATP",40,0)
P3 S ZENT=$S($E(ENT,2)="H":"RG ",$E(ENT,1,2)="00":"RG ",1:"")
"RTN","PRSATP",41,0)
 I TC=1 D OT S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)&(AC="M2E") ZENT=ZENT_"HW " S ZENT=ZENT_"NP CP " G P31
"RTN","PRSATP",42,0)
 I TC=3!(TC=4) D LV S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)&($E(ENT,22)) ZENT=ZENT_"HW " G P31
"RTN","PRSATP",43,0)
 D LV,OT S ZENT=ZENT_"TV TR " S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12) ZENT=ZENT_"HX HW "
"RTN","PRSATP",44,0)
P31 S DDSFILE=458,DDSFILE(1)=458.02,DA(2)=PPI,DA(1)=DFN,DA=DAY
"RTN","PRSATP",45,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,2)) K ZS
"RTN","PRSATP",46,0)
 S DR="[PRSA TP POST1]" D ^DDS K DS Q:'$D(ZS)
"RTN","PRSATP",47,0)
 I ZS'="" S ^PRST(458,PPI,"E",DFN,"D",DAY,2)=ZS,PTY=3 G UPD
"RTN","PRSATP",48,0)
 I $D(^PRST(458,PPI,"E",DFN,"D",DAY,2)) K ^(2),^(3),^(10)
"RTN","PRSATP",49,0)
 Q
"RTN","PRSATP",50,0)
UPD ; Update status
"RTN","PRSATP",51,0)
 D NOW^%DTC
"RTN","PRSATP",52,0)
 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,10),"^",1,4)="T^"_DUZ_"^"_%_"^"_PTY
"RTN","PRSATP",53,0)
 ;
"RTN","PRSATP",54,0)
 ; Is holiday encapsulated by a form a non-pay
"RTN","PRSATP",55,0)
 N DAH,DBH,HOL,QUIT
"RTN","PRSATP",56,0)
 S (DAH,DBH,HOL,QUIT)=""
"RTN","PRSATP",57,0)
 D HENCAP^PRSATP3(PPI,DFN,DAY,.DBH,.HOL,.DAH,.QUIT)
"RTN","PRSATP",58,0)
 Q:QUIT
"RTN","PRSATP",59,0)
 D UPDT^PRSATP3(DFN,DBH,HOL,DAH)
"RTN","PRSATP",60,0)
 K DAH,DBH,HOL,QUIT
"RTN","PRSATP",61,0)
 Q
"RTN","PRSATP",62,0)
 ;
"RTN","PRSATP",63,0)
LP W !!,"Enter '^' to bypass this employee." W:LP=1 " Enter '^^' to stop T&L editing." W ! Q
"RTN","PRSATP",64,0)
LV S Z1="30 31 31 31 32 33 28 35 35 30 36 37 38",Z2="AL SL CB AD NL WP CU AA DL RL NP CP HX"
"RTN","PRSATP",65,0)
 ;
"RTN","PRSATP",66,0)
 ; Check to see if the employee is entitled to Military Leave and add
"RTN","PRSATP",67,0)
 ; ML to list if they are.  Added to be compliant with Public Law
"RTN","PRSATP",68,0)
 ; 106-554.
"RTN","PRSATP",69,0)
 ;
"RTN","PRSATP",70,0)
 I $E(ENT,34) D
"RTN","PRSATP",71,0)
 . S Z1=Z1_" 34",Z2=Z2_" ML"
"RTN","PRSATP",72,0)
 . F K=1:1:14 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" "
"RTN","PRSATP",73,0)
 ;
"RTN","PRSATP",74,0)
 I '$E(ENT,34) D
"RTN","PRSATP",75,0)
 . F K=1:1:13 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" "
"RTN","PRSATP",76,0)
 Q
"RTN","PRSATP",77,0)
OT ; Get entitled out-of-tour types of time
"RTN","PRSATP",78,0)
 S Z1="12 28 26",Z2="OT CT ON" F K=1:1:3 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" " I ZENT'["UN" S ZENT=ZENT_"UN "
"RTN","PRSATP",79,0)
 I $E(ENT,29),'$E(ENT,26) S ZENT=ZENT_"SB " S:ZENT'["UN" ZENT=ZENT_"UN "
"RTN","PRSATP",80,0)
 ; Allow Stand By for employees w/ Prem Pay Ind = W or V
"RTN","PRSATP",81,0)
 I $E(ENT,29),$E(ENT,26),"^W^V^"[(U_PMP_U) S ZENT=ZENT_"SB " S:ZENT'["UN" ZENT=ZENT_"UN "
"RTN","PRSATP",82,0)
 Q
"RTN","PRSATP",83,0)
EX ;clean up lock global which is set in $$AVAILREC^PRSLIB00
"RTN","PRSATP",84,0)
 K ^TMP($J,"LOCK")
"RTN","PRSATP",85,0)
 ;generic cleanup
"RTN","PRSATP",86,0)
 G KILL^XUSCLEAN
"RTN","PRSATP3")
0^2^B18838641
"RTN","PRSATP3",1,0)
PRSATP3 ;HISC/MGD-Timekeeper Post Absence ;01/03/06
"RTN","PRSATP3",2,0)
 ;;4.0;PAID;**102**;Sep 21, 1995
"RTN","PRSATP3",3,0)
 ;
"RTN","PRSATP3",4,0)
HENCAP(PPI,DFN,WDAY,DBH,HOL,DAH,QUIT) ; 
"RTN","PRSATP3",5,0)
 ; Check to see if there is a Holiday encapsulated by some form of non-pay.
"RTN","PRSATP3",6,0)
 ; Called from Timekeeper Posting routine ^PRSATP
"RTN","PRSATP3",7,0)
 ; 
"RTN","PRSATP3",8,0)
 ; Test #1            | DBH  HOL  DAH
"RTN","PRSATP3",9,0)
 ; Test #2        DBH | HOL  DAH
"RTN","PRSATP3",10,0)
 ; Test #3   DBH  HOL | DAH
"RTN","PRSATP3",11,0)
 ; Test #4  DBH | HOL | DAH
"RTN","PRSATP3",12,0)
 ;
"RTN","PRSATP3",13,0)
 ;  Input:
"RTN","PRSATP3",14,0)
 ;    PPI - IEN of current pay period
"RTN","PRSATP3",15,0)
 ;    DFN - IEN of employee
"RTN","PRSATP3",16,0)
 ;   WDAY - Day to begin testing
"RTN","PRSATP3",17,0)
 ;    DBH - null
"RTN","PRSATP3",18,0)
 ;    HOL - null
"RTN","PRSATP3",19,0)
 ;    DAH - null
"RTN","PRSATP3",20,0)
 ;   QUIT - null
"RTN","PRSATP3",21,0)
 ;
"RTN","PRSATP3",22,0)
 ; Output: If set these variables will contain the following
"RTN","PRSATP3",23,0)
 ;    DAH - PPI^DAY^type of non-pay
"RTN","PRSATP3",24,0)
 ;    DBH - PPI^DAY^type of non-pay
"RTN","PRSATP3",25,0)
 ;    HOL - PPI^DAY^Status of timecard that contains holiday
"RTN","PRSATP3",26,0)
 ;   QUIT - Will be set to 1 when holiday encapsulation test fails
"RTN","PRSATP3",27,0)
 ;          and no additional checks need to be made.
"RTN","PRSATP3",28,0)
 N BACK,PPIP
"RTN","PRSATP3",29,0)
 S PPIP=PPI
"RTN","PRSATP3",30,0)
 ;
"RTN","PRSATP3",31,0)
 ; Check Day After Holiday
"RTN","PRSATP3",32,0)
 D DAH^PRSATP7(PPIP,DFN,WDAY,.DAH,.QUIT)
"RTN","PRSATP3",33,0)
 I DAH="" S QUIT=1
"RTN","PRSATP3",34,0)
 Q:QUIT
"RTN","PRSATP3",35,0)
 ;
"RTN","PRSATP3",36,0)
 ; Find Holiday
"RTN","PRSATP3",37,0)
 S BACK=0
"RTN","PRSATP3",38,0)
 F  D  Q:QUIT!(HOL'="")!(HOL=""&BACK=2)
"RTN","PRSATP3",39,0)
 . S WDAY=WDAY-1
"RTN","PRSATP3",40,0)
 . I WDAY=0 D GETPPP^PRSATP5(.PPIP,DFN,.WDAY,.BACK,.QUIT)
"RTN","PRSATP3",41,0)
 . I BACK=2 S QUIT=1 Q
"RTN","PRSATP3",42,0)
 . D FNDHOL^PRSATP8(PPIP,DFN,WDAY,.HOL,.QUIT)
"RTN","PRSATP3",43,0)
 Q:QUIT
"RTN","PRSATP3",44,0)
 ;
"RTN","PRSATP3",45,0)
 ; Find Previous Work Day
"RTN","PRSATP3",46,0)
 S PPIP=$P(HOL,U,1),WDAY=$P(HOL,U,2),BACK=0
"RTN","PRSATP3",47,0)
 F  D  Q:QUIT!(DBH'="")!(DBH=""&BACK=2)
"RTN","PRSATP3",48,0)
 . S WDAY=WDAY-1
"RTN","PRSATP3",49,0)
 . I WDAY=0 D GETPPP^PRSATP5(.PPIP,DFN,.WDAY,.BACK,.QUIT)
"RTN","PRSATP3",50,0)
 . I BACK=2 S QUIT=1 Q
"RTN","PRSATP3",51,0)
 . D DBH^PRSATP6(PPIP,DFN,WDAY,.DBH,.QUIT)
"RTN","PRSATP3",52,0)
 Q
"RTN","PRSATP3",53,0)
 ;
"RTN","PRSATP3",54,0)
UPDT(DFN,DBH,HOL,DAH) ; Perform final checks
"RTN","PRSATP3",55,0)
 ; Input:
"RTN","PRSATP3",56,0)
 ;   DFN - IEN of employee
"RTN","PRSATP3",57,0)
 ;   DBH - PPI^DAY^type of non-pay
"RTN","PRSATP3",58,0)
 ;   HOL - PPI^DAY^Status of timecard that contains holiday
"RTN","PRSATP3",59,0)
 ;   DAH - PPI^DAY^type of non-pay
"RTN","PRSATP3",60,0)
 ;
"RTN","PRSATP3",61,0)
 ; Output:
"RTN","PRSATP3",62,0)
 ;       Displays Holiday encapsulation message to Timekeeper and whether
"RTN","PRSATP3",63,0)
 ;       or not it was able to chance the HX postings to the apppriate
"RTN","PRSATP3",64,0)
 ;       form of non-pay
"RTN","PRSATP3",65,0)
 ;   
"RTN","PRSATP3",66,0)
 ; Holiday was encapsulated by non-pay.  Perform final checks.
"RTN","PRSATP3",67,0)
 N HDAY,HIEN,HPPI,HOLEX,HOLIN,IEN4585,LSTAT,PPI,PRSIEN,SEG,TOT
"RTN","PRSATP3",68,0)
 N TSTAT,PRSFDA,SEG,SOH
"RTN","PRSATP3",69,0)
 S HPPI=$P(HOL,U,1),HDAY=$P(HOL,U,2),PPI=$P(DAH,U,1)
"RTN","PRSATP3",70,0)
 S HOLEX=$P(^PRST(458,HPPI,2),U,HDAY) ; External date
"RTN","PRSATP3",71,0)
 S HOLIN=$P(^PRST(458,HPPI,1),U,HDAY) ; Internal date
"RTN","PRSATP3",72,0)
 ;
"RTN","PRSATP3",73,0)
 ; Compare types of non-pay before and after
"RTN","PRSATP3",74,0)
 S TOT=$S($P(DBH,U,3)'=$P(DAH,U,3):"NP",1:$P(DAH,U,3))
"RTN","PRSATP3",75,0)
 ;
"RTN","PRSATP3",76,0)
 ; If holiday is in the current PP, employee timecard will already
"RTN","PRSATP3",77,0)
 ; be locked.  If holiday is in prior pay period try to lock it.
"RTN","PRSATP3",78,0)
 ; LSTAT = 1 - Holiday in current PP and was already locked
"RTN","PRSATP3",79,0)
 ;       = 2 - Holiday in prior PP and lock was obtained
"RTN","PRSATP3",80,0)
 ;       = 3 - Holiday in prior PP and lock was not obtained
"RTN","PRSATP3",81,0)
 ;       
"RTN","PRSATP3",82,0)
 I PPI=HPPI S LSTAT=1
"RTN","PRSATP3",83,0)
 I PPI'=HPPI D
"RTN","PRSATP3",84,0)
 . L +^PRST(458,HPPI,"E",DFN):2
"RTN","PRSATP3",85,0)
 . S LSTAT=$S($T:2,1:3)
"RTN","PRSATP3",86,0)
 S SOH=$P(^PRST(458,HPPI,"E",DFN,0),U,2) ; Get current status of holiday
"RTN","PRSATP3",87,0)
 ;
"RTN","PRSATP3",88,0)
 ; Change HX to appropriate form of non-pay
"RTN","PRSATP3",89,0)
 S HIEN=HDAY_","_DFN_","_HPPI_","
"RTN","PRSATP3",90,0)
 F SEG=43:4:67 D
"RTN","PRSATP3",91,0)
 . I $$GET1^DIQ(458.02,HIEN,SEG)="HX" D
"RTN","PRSATP3",92,0)
 . . S PRSIEN(458.02,HIEN,SEG)=TOT
"RTN","PRSATP3",93,0)
 I $D(PRSIEN),LSTAT<3,SOH="T" D UPDATE^DIE("","PRSIEN","HIEN"),MSG^DIALOG()
"RTN","PRSATP3",94,0)
 ;
"RTN","PRSATP3",95,0)
 ; Display appropriate message based on Lock and timecard status
"RTN","PRSATP3",96,0)
 W !!,"Due to the non-pay posting on this day the holiday occurring on ",HOLEX
"RTN","PRSATP3",97,0)
 W !,"was encapsulated with non-pay.  "
"RTN","PRSATP3",98,0)
 ;
"RTN","PRSATP3",99,0)
 ; If we could autopost non-pay
"RTN","PRSATP3",100,0)
 I LSTAT<3,SOH="T" D
"RTN","PRSATP3",101,0)
 . W "The HX postings were automatically updated to"
"RTN","PRSATP3",102,0)
 . W !,"the appropriate form of non-pay."
"RTN","PRSATP3",103,0)
 ;
"RTN","PRSATP3",104,0)
 ; If we could not autopost non-pay because timecard was in a status other 
"RTN","PRSATP3",105,0)
 ; than T (Timekeeper)
"RTN","PRSATP3",106,0)
 I SOH'="T" D
"RTN","PRSATP3",107,0)
 . W "The HX postings could not be automatically"
"RTN","PRSATP3",108,0)
 . W !,"updated to the appropriate form of non-pay because the status of the holiday"
"RTN","PRSATP3",109,0)
 . W !,"was not TIMEKEEPER.  You will need to manually address this issue."
"RTN","PRSATP3",110,0)
 . D SET
"RTN","PRSATP3",111,0)
 ;
"RTN","PRSATP3",112,0)
 ; If we could not autopost non-pay because the timecard was currently locked
"RTN","PRSATP3",113,0)
 ; by another user
"RTN","PRSATP3",114,0)
 I LSTAT=3,SOH="T" D
"RTN","PRSATP3",115,0)
 . W "The HX postings could not be automatically"
"RTN","PRSATP3",116,0)
 . W !,"updated to the appropriate form of non-pay because the timecard was locked"
"RTN","PRSATP3",117,0)
 . W !,"by another user.  You will need to manually address this issue."
"RTN","PRSATP3",118,0)
 . D SET
"RTN","PRSATP3",119,0)
 Q
"RTN","PRSATP3",120,0)
 ;
"RTN","PRSATP3",121,0)
SET ; Add entry to #458.5
"RTN","PRSATP3",122,0)
 S PRSFDA(458.5,"+1,",.01)=DFN ;  Employee
"RTN","PRSATP3",123,0)
 S PRSFDA(458.5,"+1,",1)=DFN ;  Employee
"RTN","PRSATP3",124,0)
 S PRSFDA(458.5,"+1,",2)=HOLIN ; Date of exception
"RTN","PRSATP3",125,0)
 S PRSFDA(458.5,"+1,",4)="HX was encapsulated by non-pay" ; Type of Exception
"RTN","PRSATP3",126,0)
 D UPDATE^DIE("","PRSFDA","IEN4585"),MSG^DIALOG()
"RTN","PRSATP3",127,0)
 ;
"RTN","PRSATP3",128,0)
 ; Reset .01 field to sequence number
"RTN","PRSATP3",129,0)
 S IEN4585=IEN4585(1)_","
"RTN","PRSATP3",130,0)
 S PRSFDA(458.5,IEN4585,.01)=IEN4585(1) ; Sequence #
"RTN","PRSATP3",131,0)
 D UPDATE^DIE("","PRSFDA","IEN4585"),MSG^DIALOG()
"RTN","PRSATP3",132,0)
 Q
"RTN","PRSATP4")
0^3^B2434017
"RTN","PRSATP4",1,0)
PRSATP4 ;HISC/MGD-Timekeeper Post Absence ;12/07/05
"RTN","PRSATP4",2,0)
 ;;4.0;PAID;**102**;Sep 21, 1995
"RTN","PRSATP4",3,0)
 ;
"RTN","PRSATP4",4,0)
HENCAP(PPI,DFN,WDAY,DBH,HOL,DAH,QUIT) ; 
"RTN","PRSATP4",5,0)
 ; Check to see if there is a Holiday encapsulated by some form of non-pay.
"RTN","PRSATP4",6,0)
 ; Called from Supervisor's Pay Period Certification option.
"RTN","PRSATP4",7,0)
 ; 
"RTN","PRSATP4",8,0)
 ; Test #1            | DBH  HOL  DAH
"RTN","PRSATP4",9,0)
 ; Test #2        DBH | HOL  DAH
"RTN","PRSATP4",10,0)
 ; Test #3   DBH  HOL | DAH
"RTN","PRSATP4",11,0)
 ; Test #4  DBH | HOL | DAH
"RTN","PRSATP4",12,0)
 ;
"RTN","PRSATP4",13,0)
 ;  Input:
"RTN","PRSATP4",14,0)
 ;    PPI - IEN of current pay period
"RTN","PRSATP4",15,0)
 ;    DFN - IEN of employee
"RTN","PRSATP4",16,0)
 ;   WDAY - Day to begin testing
"RTN","PRSATP4",17,0)
 ;    DBH - null
"RTN","PRSATP4",18,0)
 ;    HOL - null
"RTN","PRSATP4",19,0)
 ;    DAH - null
"RTN","PRSATP4",20,0)
 ;   QUIT - null
"RTN","PRSATP4",21,0)
 ;
"RTN","PRSATP4",22,0)
 ; Output: If set these variables will contain the following
"RTN","PRSATP4",23,0)
 ;    DAH - PPI^DAY^type of non-pay
"RTN","PRSATP4",24,0)
 ;    DBH - PPI^DAY^type of non-pay
"RTN","PRSATP4",25,0)
 ;    HOL - PPI^DAY^Status of timecard that contains holiday
"RTN","PRSATP4",26,0)
 ;   QUIT - Will be set to 1 when holiday encapsulation test fails
"RTN","PRSATP4",27,0)
 ;          and no additional checks need to be made.
"RTN","PRSATP4",28,0)
 ;          
"RTN","PRSATP4",29,0)
 N BACK,HIEN,HOLEX,LSTAT,NEXT,PPIP,SET,TOT,TSTAT,PPIP
"RTN","PRSATP4",30,0)
 ; Kill ordered arrays before starting
"RTN","PRSATP4",31,0)
 K HT,HE,HO,HC,NT,NE,NO,NC,PT,PE,PO,PC
"RTN","PRSATP4",32,0)
 S PPIP=PPI
"RTN","PRSATP4",33,0)
 ;
"RTN","PRSATP4",34,0)
 ; Determine if current day is a holiday
"RTN","PRSATP4",35,0)
 D FNDHOL^PRSATP8(PPIP,DFN,WDAY,.HOL,.QUIT)
"RTN","PRSATP4",36,0)
 I HOL="" S QUIT=1
"RTN","PRSATP4",37,0)
 Q:QUIT
"RTN","PRSATP4",38,0)
 ;
"RTN","PRSATP4",39,0)
 ; Find Day After Holiday
"RTN","PRSATP4",40,0)
 S NEXT=0
"RTN","PRSATP4",41,0)
 F  D  Q:QUIT!(DAH'="")!(DAH=""&NEXT=2)
"RTN","PRSATP4",42,0)
 . S WDAY=WDAY+1
"RTN","PRSATP4",43,0)
 . I WDAY=15 D GETNPP^PRSATP5(.PPIP,DFN,.WDAY,.NEXT,.QUIT)
"RTN","PRSATP4",44,0)
 . I NEXT=2 S QUIT=1 Q
"RTN","PRSATP4",45,0)
 . D DAH^PRSATP7(PPIP,DFN,WDAY,.DAH,.QUIT)
"RTN","PRSATP4",46,0)
 Q:QUIT
"RTN","PRSATP4",47,0)
 ;
"RTN","PRSATP4",48,0)
 ; Find Day Before Holiday
"RTN","PRSATP4",49,0)
 S PPIP=$P(HOL,U,1),WDAY=$P(HOL,U,2),BACK=0
"RTN","PRSATP4",50,0)
 F  D  Q:QUIT!(DBH'="")!(DBH=""&BACK=2)
"RTN","PRSATP4",51,0)
 . S WDAY=WDAY-1
"RTN","PRSATP4",52,0)
 . I WDAY=0 D GETPPP^PRSATP5(.PPIP,DFN,.WDAY,.BACK,.QUIT)
"RTN","PRSATP4",53,0)
 . I BACK=2 S QUIT=1 Q
"RTN","PRSATP4",54,0)
 . D DBH^PRSATP6(PPIP,DFN,WDAY,.DBH,.QUIT)
"RTN","PRSATP4",55,0)
 Q
"RTN","PRSATP5")
0^4^B28158534
"RTN","PRSATP5",1,0)
PRSATP5 ;HISC/MGD-Timekeeper Post Absence ;12/13/05
"RTN","PRSATP5",2,0)
 ;;4.0;PAID;**102**;Sep 21, 1995
"RTN","PRSATP5",3,0)
 ;
"RTN","PRSATP5",4,0)
CNV96(TDATA,NSEG,ARRAY,ZERO,DADRFM) ;
"RTN","PRSATP5",5,0)
 ; Convert the external representation of the start/stop time to
"RTN","PRSATP5",6,0)
 ; its 1 - 192 piece equivalent
"RTN","PRSATP5",7,0)
 ; 
"RTN","PRSATP5",8,0)
 ; Input:
"RTN","PRSATP5",9,0)
 ;       TDATA - Time segments to operate on passed by reference
"RTN","PRSATP5",10,0)
 ;        NSEG - Number of Segments per start/stop time entry
"RTN","PRSATP5",11,0)
 ;                       3 for tours, 4 for exceptions
"RTN","PRSATP5",12,0)
 ;       ARRAY - Name of ordered array to create
"RTN","PRSATP5",13,0)
 ;       1st char - P = Prior (to holiday)
"RTN","PRSATP5",14,0)
 ;                  H = Holiday
"RTN","PRSATP5",15,0)
 ;                  N = Next day after holiday
"RTN","PRSATP5",16,0)
 ;       2nd char - T = Tour segments
"RTN","PRSATP5",17,0)
 ;                  E = Exception segments, does not include segments
"RTN","PRSATP5",18,0)
 ;                      that define periods of On-Call
"RTN","PRSATP5",19,0)
 ;                  O = Segments that define periods of On-Call
"RTN","PRSATP5",20,0)
 ;                      Could have come from Tour(s) or Exceptions
"RTN","PRSATP5",21,0)
 ;                  C = Segments of work performed during periods
"RTN","PRSATP5",22,0)
 ;                      of On-Call
"RTN","PRSATP5",23,0)
 ;       Format for all arrays
"RTN","PRSATP5",24,0)
 ;         ARRAY(START)=START^STOP^TOT
"RTN","PRSATP5",25,0)
 ;         Note: Exceptions arrays (PE, HE, NE) will contain the
"RTN","PRSATP5",26,0)
 ;               Remarks Code as the 4th piece of DATA
"RTN","PRSATP5",27,0)
 ;               Exceptions(START)=START^STOP^TOT^RC
"RTN","PRSATP5",28,0)
 ;               
"RTN","PRSATP5",29,0)
 ;        ZERO - 0 node of day being processed 
"RTN","PRSATP5",30,0)
 ;        
"RTN","PRSATP5",31,0)
 ;        DADRFM - variable needed for tracking of tours that
"RTN","PRSATP5",32,0)
 ;                 cross midnight.  Passed by reference and may
"RTN","PRSATP5",33,0)
 ;                 be changed.
"RTN","PRSATP5",34,0)
 ;
"RTN","PRSATP5",35,0)
 Q:TDATA=""
"RTN","PRSATP5",36,0)
 N D,FLAG,K,LAST,K1,N,N1,N14,NDAY,QT,V,X,Y,Y1,Z
"RTN","PRSATP5",37,0)
 S N=$S(NSEG=4:2,1:1)
"RTN","PRSATP5",38,0)
 D CNV,COA
"RTN","PRSATP5",39,0)
 Q
"RTN","PRSATP5",40,0)
 ;
"RTN","PRSATP5",41,0)
 ; The CNV code was copied from PRS8SU and modified to fit
"RTN","PRSATP5",42,0)
 ; out needs
"RTN","PRSATP5",43,0)
 ; 
"RTN","PRSATP5",44,0)
 ; loop thru data nodes for day
"RTN","PRSATP5",45,0)
CNV S D(0)=ZERO,Z=TDATA,N1=NSEG,(N14,NDAY,LAST,QT)=0
"RTN","PRSATP5",46,0)
 ;
"RTN","PRSATP5",47,0)
 ; process tour and work nodes by looping thru postings in the node
"RTN","PRSATP5",48,0)
 F K=1:N1 S V=$P(Z,"^",K,K+1) Q:QT  D
"RTN","PRSATP5",49,0)
 .S X=$P(Z,U,K,999)
"RTN","PRSATP5",50,0)
 .S:X?1"^"."^"!(X="")!(N14=1) QT=1
"RTN","PRSATP5",51,0)
 .I QT!($P(Z,U,K)="") Q
"RTN","PRSATP5",52,0)
 .;
"RTN","PRSATP5",53,0)
 .S:K=1 (NDAY,LAST)=0
"RTN","PRSATP5",54,0)
 .;
"RTN","PRSATP5",55,0)
 .; process start time and stop time for posting in node
"RTN","PRSATP5",56,0)
 .F K1=1,2 S X=$P(V,"^",K1),(Y,Y1)=K1-1 I X'="" D
"RTN","PRSATP5",57,0)
 ..;
"RTN","PRSATP5",58,0)
 ..; when a tour exception (N=2) start time (K1=1) is being processed
"RTN","PRSATP5",59,0)
 ..; determine if LAST should be reset (FLAG). If LAST is reset then
"RTN","PRSATP5",60,0)
 ..; the start time of the tour exception will initially be placed
"RTN","PRSATP5",61,0)
 ..; in the current day (X'>96) instead of the following day (X>96)
"RTN","PRSATP5",62,0)
 ..S FLAG=1
"RTN","PRSATP5",63,0)
 ..I N=2&(K1=1)&("^HW^"[("^"_$P(Z,"^",K+2)_"^")) D
"RTN","PRSATP5",64,0)
 ...S FLAG=$S(NDAY=1!(LAST>96)&("^HW^"[("^"_$P(Z,"^",K+2)_"^"))&((X["A")!(X["MID")):0,1:1),NDAY=0
"RTN","PRSATP5",65,0)
 ..S:$P(D(0),"^",14)'=""&(X="MID")&(LAST=96)&(N=2)&(K1=1) FLAG=0
"RTN","PRSATP5",66,0)
 ..S:N=2&(K1=1)&(FLAG=1) (NDAY,LAST)=0
"RTN","PRSATP5",67,0)
 ..;
"RTN","PRSATP5",68,0)
 ..S Y=K1-1 D 15^PRS8SU ; determine number (1-192) corresponding to time
"RTN","PRSATP5",69,0)
 ..;
"RTN","PRSATP5",70,0)
 ..; if some tour exceptions (such as leave) are not within a sched.
"RTN","PRSATP5",71,0)
 ..; tour then they must be for the following day (i.e. 2-day tour)
"RTN","PRSATP5",72,0)
 ..I N=2,"^RG^OT^CT^ON^SB^HW^"'[("^"_$P(Z,"^",K+2)_"^") D
"RTN","PRSATP5",73,0)
 ...S Y=+$O(DADRFM("S",(-X-.01))),Y1=+$O(DADRFM("F",(X-.01)))
"RTN","PRSATP5",74,0)
 ...I $G(DADRFM("S",Y))'=$G(DADRFM("F",Y1)) S X=X+96
"RTN","PRSATP5",75,0)
 ...;
"RTN","PRSATP5",76,0)
 ..S $P(Z,"^",K+(K1-1))=X ; replace time by number
"RTN","PRSATP5",77,0)
 ..;
"RTN","PRSATP5",78,0)
 ..; save scheduled tour start and stop times for later use when
"RTN","PRSATP5",79,0)
 ..; placing some tour exceptions on correct day for 2-day tours
"RTN","PRSATP5",80,0)
 ..I K1=1,N=1!(N=4) S DADRFM("S",-X)=DADRFM
"RTN","PRSATP5",81,0)
 ..I K1=2,N=1!(N=4) S DADRFM("F",X)=DADRFM,DADRFM=DADRFM+1
"RTN","PRSATP5",82,0)
 ..;
"RTN","PRSATP5",83,0)
 ..; End of code copied from PRS8SU
"RTN","PRSATP5",84,0)
 ..S $P(TDATA,U,K+(K1-1))=X
"RTN","PRSATP5",85,0)
 Q
"RTN","PRSATP5",86,0)
 ;
"RTN","PRSATP5",87,0)
 ; Create ordered arrays
"RTN","PRSATP5",88,0)
COA N ARY,RC,SEG,STI,STOP,STRT,TOT
"RTN","PRSATP5",89,0)
 S RC=""
"RTN","PRSATP5",90,0)
 F SEG=0:1:6 D
"RTN","PRSATP5",91,0)
 .S STRT=$P(TDATA,U,(SEG*NSEG)+1)
"RTN","PRSATP5",92,0)
 .Q:STRT=""
"RTN","PRSATP5",93,0)
 .S STOP=$P(TDATA,U,(SEG*NSEG)+2),TOT=$P(TDATA,U,(SEG*NSEG)+3)
"RTN","PRSATP5",94,0)
 .; For Node1 & Node4 TOT will be numeric so we will need to get
"RTN","PRSATP5",95,0)
 .; its external representation (2 character string)
"RTN","PRSATP5",96,0)
 .; For Node2 TOT will be a 2 character string
"RTN","PRSATP5",97,0)
 .I NSEG=4 S RC=$P(TDATA,U,(SEG*NSEG)+4)
"RTN","PRSATP5",98,0)
 .S STI="" ; Special Tour Indicator
"RTN","PRSATP5",99,0)
 .I NSEG=3,TOT S STI=$P($G(^PRST(457.2,TOT,0)),U,2)
"RTN","PRSATP5",100,0)
 .;
"RTN","PRSATP5",101,0)
 .; Don't set exceptions defining periods of On-Call into Exception array
"RTN","PRSATP5",102,0)
 .I $E(ARRAY,2)="E",TOT'="ON" D
"RTN","PRSATP5",103,0)
 ..S @ARRAY@(STRT)=STRT_U_STOP_U_TOT_U_RC
"RTN","PRSATP5",104,0)
 .;
"RTN","PRSATP5",105,0)
 .; Set only Reg segments of tour where the Special Tour Indicator
"RTN","PRSATP5",106,0)
 .; is "" or RG into the Tour array
"RTN","PRSATP5",107,0)
 .I $E(ARRAY,2)="T" D
"RTN","PRSATP5",108,0)
 ..I TOT="" S @ARRAY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",109,0)
 ..I STI="RG" S @ARRAY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",110,0)
 .;
"RTN","PRSATP5",111,0)
 .; Only set segments that define On-Call into On-Call array
"RTN","PRSATP5",112,0)
 .I TOT="ON"!(STI="ON") D
"RTN","PRSATP5",113,0)
 ..S TOT=$S(TOT'="":TOT,1:STI)
"RTN","PRSATP5",114,0)
 ..S ARY=$E(ARRAY,1)_"O" S @ARY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",115,0)
 .;
"RTN","PRSATP5",116,0)
 .; Only segments of work get in the Call-Back
"RTN","PRSATP5",117,0)
 .I "^RG^OT^CT^"[("^"_TOT_"^") D
"RTN","PRSATP5",118,0)
 .. S ARY=$E(ARRAY,1)_"C" S @ARY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",119,0)
 Q
"RTN","PRSATP5",120,0)
 ;
"RTN","PRSATP5",121,0)
GETPPP(PPIP,DFN,WDAY,BACK,QUIT) ;
"RTN","PRSATP5",122,0)
 ; Set appropriate variables for prior pay period
"RTN","PRSATP5",123,0)
 ;   Input:
"RTN","PRSATP5",124,0)
 ;     PPIP - Internal format of current pay period
"RTN","PRSATP5",125,0)
 ;      DFN - IEN of employee
"RTN","PRSATP5",126,0)
 ;     WDAY - Day currently being examined
"RTN","PRSATP5",127,0)
 ;     QUIT - Null
"RTN","PRSATP5",128,0)
 ;     
"RTN","PRSATP5",129,0)
 ;  Output:
"RTN","PRSATP5",130,0)
 ;     PPIP - IEN of Prior Pay Period
"RTN","PRSATP5",131,0)
 ;     WDAY - Set to last day of prior pay period
"RTN","PRSATP5",132,0)
 ;     BACK - Counter for number of pay period looked back
"RTN","PRSATP5",133,0)
 ;     QUIT - Will be set to 1 if there is no timecard for
"RTN","PRSATP5",134,0)
 ;            the employee in the prior pay period
"RTN","PRSATP5",135,0)
 ;
"RTN","PRSATP5",136,0)
 S PPIP=$G(^PRST(458,PPIP,0)) ; Get external name of current PP
"RTN","PRSATP5",137,0)
 S PPIP=$O(^PRST(458,"B",PPIP),-1) ; Get external name of prev PP
"RTN","PRSATP5",138,0)
 S PPIP=$O(^PRST(458,"B",PPIP,0)) ; Get IEN of previous PP
"RTN","PRSATP5",139,0)
 I 'PPIP S QUIT=1 Q  ; No prior pay period on file
"RTN","PRSATP5",140,0)
 ; Check for employee timecard in this PP
"RTN","PRSATP5",141,0)
 I '$D(^PRST(458,PPIP,"E",DFN,0)) S QUIT=1 Q
"RTN","PRSATP5",142,0)
 S WDAY=14,BACK=BACK+1
"RTN","PRSATP5",143,0)
 Q
"RTN","PRSATP5",144,0)
 ;
"RTN","PRSATP5",145,0)
GETNPP(PPIN,DFN,WDAY,NEXT,QUIT) ;
"RTN","PRSATP5",146,0)
 ; Set appropriate variables for next pay period
"RTN","PRSATP5",147,0)
 ;   Input:
"RTN","PRSATP5",148,0)
 ;     PPIN - Internal format of current pay period
"RTN","PRSATP5",149,0)
 ;      DFN - IEN of employee
"RTN","PRSATP5",150,0)
 ;     WDAY - Day currently being examined
"RTN","PRSATP5",151,0)
 ;     QUIT - Null
"RTN","PRSATP5",152,0)
 ;
"RTN","PRSATP5",153,0)
 ;  Output:
"RTN","PRSATP5",154,0)
 ;     PPIN - IEN of Next Pay Period
"RTN","PRSATP5",155,0)
 ;     WDAY - Set to first day of next pay period
"RTN","PRSATP5",156,0)
 ;     BACK - Counter for number of pay period looked forward
"RTN","PRSATP5",157,0)
 ;     QUIT - Will be set to 1 if there is no timecard for
"RTN","PRSATP5",158,0)
 ;            the employee in the next pay period
"RTN","PRSATP5",159,0)
 ;
"RTN","PRSATP5",160,0)
 S PPIN=$O(^PRST(458,PPIN)) ; Get next PP
"RTN","PRSATP5",161,0)
 I 'PPIN S QUIT=1 Q  ; Next pay period not on file
"RTN","PRSATP5",162,0)
 ; Check for employee timecard in this PP
"RTN","PRSATP5",163,0)
 I '$D(^PRST(458,PPIN,"E",DFN,0)) S QUIT=1 Q
"RTN","PRSATP5",164,0)
 S WDAY=1,NEXT=NEXT+1
"RTN","PRSATP5",165,0)
 Q
"RTN","PRSATP6")
0^5^B5009394
"RTN","PRSATP6",1,0)
PRSATP6 ;HISC/MGD-Timekeeper Post Absence ;12/12/05
"RTN","PRSATP6",2,0)
 ;;4.0;PAID;**102**;Sep 21, 1995
"RTN","PRSATP6",3,0)
 ;       
"RTN","PRSATP6",4,0)
DBH(PPIP,DFN,WDAY,DBH,QUIT) ;
"RTN","PRSATP6",5,0)
 ; Find Day Before Holiday
"RTN","PRSATP6",6,0)
 ; Input:
"RTN","PRSATP6",7,0)
 ;   PPIP - IEN of pay period to check
"RTN","PRSATP6",8,0)
 ;    DFN - IEN of employee to check
"RTN","PRSATP6",9,0)
 ;   WDAY - Day to start looping from
"RTN","PRSATP6",10,0)
 ;    DAH - Null
"RTN","PRSATP6",11,0)
 ;   QUIT - Null
"RTN","PRSATP6",12,0)
 ;   
"RTN","PRSATP6",13,0)
 ;  Output: 
"RTN","PRSATP6",14,0)
 ;    DAH - PPIP^WDAY^Type of non-pay
"RTN","PRSATP6",15,0)
 ;   QUIT - Will be set to 1 if the holiday encapsulation
"RTN","PRSATP6",16,0)
 ;          rules are broken
"RTN","PRSATP6",17,0)
 ;
"RTN","PRSATP6",18,0)
 N DADRFM,EDATA,EEND,EIN,EINDX,ETOT,NODE0,NODE1,NODE2,NODE4
"RTN","PRSATP6",19,0)
 N TEND,TINDX,TOUR1,TOUR2,REGHRS1,REGHRS2
"RTN","PRSATP6",20,0)
 N PT,PE,PO,PC ; New ordered arrays
"RTN","PRSATP6",21,0)
 S NODE0=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,0))
"RTN","PRSATP6",22,0)
 I NODE0="" S QUIT=1 Q  ; Corrupted data 
"RTN","PRSATP6",23,0)
 S NODE2=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,2))
"RTN","PRSATP6",24,0)
 ;
"RTN","PRSATP6",25,0)
 ; Skip Days off
"RTN","PRSATP6",26,0)
 Q:$P(NODE0,U,2)=1
"RTN","PRSATP6",27,0)
 ;
"RTN","PRSATP6",28,0)
 ; Check for tours with no regular hours
"RTN","PRSATP6",29,0)
 S TOUR1=+$P(NODE0,U,2),TOUR2=+$P(NODE0,U,13)
"RTN","PRSATP6",30,0)
 S REGHRS1=$P($G(^PRST(457.1,TOUR1,0)),U,6)
"RTN","PRSATP6",31,0)
 S REGHRS2=$S(TOUR2:$P($G(^PRST(457.1,TOUR2,0)),U,6),1:"")
"RTN","PRSATP6",32,0)
 Q:$P(NODE0,U,2)'=2&($P(NODE0,U,2)'=3)&(REGHRS1+REGHRS2=0)
"RTN","PRSATP6",33,0)
 ;
"RTN","PRSATP6",34,0)
 ; If the day has a tour that defines work and there are no exceptions
"RTN","PRSATP6",35,0)
 ; encapsulation is broken
"RTN","PRSATP6",36,0)
 I $P(NODE0,U,2)>1,NODE2'["NP",NODE2'["WP" S QUIT=1 Q
"RTN","PRSATP6",37,0)
 ;
"RTN","PRSATP6",38,0)
 ; Checks for employees with DAILY tours
"RTN","PRSATP6",39,0)
 I $P(NODE0,U,2)=2!($P(NODE0,U,2)=3) S DBH=PPIP_U_DFN_U_$P(NODE2,U,3) Q
"RTN","PRSATP6",40,0)
 ;
"RTN","PRSATP6",41,0)
 ; Load tours and convert to numeric equivalents
"RTN","PRSATP6",42,0)
 ; This creates the ordered arrays
"RTN","PRSATP6",43,0)
 S DADRFM=1
"RTN","PRSATP6",44,0)
 S NODE1=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,1))
"RTN","PRSATP6",45,0)
 D CNV96^PRSATP5(.NODE1,3,"PT",NODE0,.DADRFM)
"RTN","PRSATP6",46,0)
 S NODE4=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,4))
"RTN","PRSATP6",47,0)
 I NODE4'="" D CNV96^PRSATP5(.NODE4,3,"PT",NODE0,.DADRFM)
"RTN","PRSATP6",48,0)
 D CNV96^PRSATP5(.NODE2,4,"PE",NODE0,.DADRFM)
"RTN","PRSATP6",49,0)
 ;
"RTN","PRSATP6",50,0)
 ; Identify end of tour
"RTN","PRSATP6",51,0)
 S TINDX="",TINDX=$O(PT(TINDX),-1)
"RTN","PRSATP6",52,0)
 S TEND=$P(PT(TINDX),U,2)
"RTN","PRSATP6",53,0)
 ;
"RTN","PRSATP6",54,0)
 ; Loop backwards through ordered exceptions to see if last 15
"RTN","PRSATP6",55,0)
 ; minutes of tour was non-pay
"RTN","PRSATP6",56,0)
 S (EINDX,EDATA)=""
"RTN","PRSATP6",57,0)
 F EIN=1:1:7 D  Q:QUIT!(EINDX="")!(DBH'="")
"RTN","PRSATP6",58,0)
 . S EINDX=$O(PE(EINDX),-1)
"RTN","PRSATP6",59,0)
 . Q:EINDX=""
"RTN","PRSATP6",60,0)
 . S EDATA=PE(EINDX),EEND=$P(EDATA,U,2),ETOT=$P(EDATA,U,3)
"RTN","PRSATP6",61,0)
 . Q:EEND'=TEND  ; not last 15 minutes
"RTN","PRSATP6",62,0)
 . I ETOT'="NP"&(ETOT'="WP") S QUIT=1 Q  ; last 15 wasn't non-pay
"RTN","PRSATP6",63,0)
 . S DBH=PPIP_U_WDAY_U_ETOT
"RTN","PRSATP6",64,0)
 Q
"RTN","PRSATP7")
0^6^B4880229
"RTN","PRSATP7",1,0)
PRSATP7 ;HISC/MGD-Timekeeper Post Absence ;12/12/05
"RTN","PRSATP7",2,0)
 ;;4.0;PAID;**102**;Sep 21, 1995
"RTN","PRSATP7",3,0)
 ;       
"RTN","PRSATP7",4,0)
DAH(PPIP,DFN,WDAY,DAH,QUIT) ;
"RTN","PRSATP7",5,0)
 ; Find Day After Holiday - Called from PRSASR
"RTN","PRSATP7",6,0)
 ; Input:
"RTN","PRSATP7",7,0)
 ;   PPIP - IEN of pay period to check
"RTN","PRSATP7",8,0)
 ;    DFN - IEN of employee to check
"RTN","PRSATP7",9,0)
 ;   WDAY - Day to start looping from
"RTN","PRSATP7",10,0)
 ;    DAH - Null
"RTN","PRSATP7",11,0)
 ;   QUIT - Null
"RTN","PRSATP7",12,0)
 ;   
"RTN","PRSATP7",13,0)
 ;  Output: 
"RTN","PRSATP7",14,0)
 ;    DAH - PPIP^WDAY^Type of non-pay
"RTN","PRSATP7",15,0)
 ;   QUIT - Will be set to 1 if the holiday encapsulation
"RTN","PRSATP7",16,0)
 ;          rules are broken
"RTN","PRSATP7",17,0)
 ;
"RTN","PRSATP7",18,0)
 N DADRFM,EDATA,EEND,EIN,EINDX,ETOT,NODE0,NODE1,NODE2,NODE4
"RTN","PRSATP7",19,0)
 N TINDX,TOUR1,TOUR2,REGHRS1,REGHRS2
"RTN","PRSATP7",20,0)
 N NT,NE,NO,NC ; New ordered arrays
"RTN","PRSATP7",21,0)
 S NODE0=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,0))
"RTN","PRSATP7",22,0)
 I NODE0="" S QUIT=1 Q  ; Corrupted data 
"RTN","PRSATP7",23,0)
 S NODE2=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,2))
"RTN","PRSATP7",24,0)
 ;
"RTN","PRSATP7",25,0)
 ; Skip Days off
"RTN","PRSATP7",26,0)
 Q:$P(NODE0,U,2)=1
"RTN","PRSATP7",27,0)
 ;
"RTN","PRSATP7",28,0)
 ; Check for tours with no regular hours
"RTN","PRSATP7",29,0)
 S TOUR1=+$P(NODE0,U,2),TOUR2=+$P(NODE0,U,13)
"RTN","PRSATP7",30,0)
 S REGHRS1=$P($G(^PRST(457.1,TOUR1,0)),U,6)
"RTN","PRSATP7",31,0)
 S REGHRS2=$S(TOUR2:$P($G(^PRST(457.1,TOUR2,0)),U,6),1:"")
"RTN","PRSATP7",32,0)
 Q:$P(NODE0,U,2)'=2&($P(NODE0,U,2)'=3)&(REGHRS1+REGHRS2=0)
"RTN","PRSATP7",33,0)
 ;
"RTN","PRSATP7",34,0)
 ; If scheduled work day w/o any non-pay, set QUIT
"RTN","PRSATP7",35,0)
 I $P(NODE0,U,2)>1,NODE2'["NP",NODE2'["WP" S QUIT=1 Q
"RTN","PRSATP7",36,0)
 ;
"RTN","PRSATP7",37,0)
 ; Checks for employees with DAILY tours
"RTN","PRSATP7",38,0)
 I $P(NODE0,U,2)=2!($P(NODE0,U,2)=3) S DAH=PPIP_U_DFN_U_$P(NODE2,U,3) Q
"RTN","PRSATP7",39,0)
 ;
"RTN","PRSATP7",40,0)
 ; Load tours and convert to numeric equivalents
"RTN","PRSATP7",41,0)
 ; This creates the ordered arrays
"RTN","PRSATP7",42,0)
 ;
"RTN","PRSATP7",43,0)
 S DADRFM=1
"RTN","PRSATP7",44,0)
 S NODE1=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,1))
"RTN","PRSATP7",45,0)
 D CNV96^PRSATP5(.NODE1,3,"NT",NODE0,.DADRFM)
"RTN","PRSATP7",46,0)
 S NODE4=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,4))
"RTN","PRSATP7",47,0)
 I NODE4'="" D CNV96^PRSATP5(.NODE4,3,"NT",NODE0,.DADRFM)
"RTN","PRSATP7",48,0)
 D CNV96^PRSATP5(.NODE2,4,"NE",NODE0,.DADRFM)
"RTN","PRSATP7",49,0)
 ;
"RTN","PRSATP7",50,0)
 ; Identify beginning of tour
"RTN","PRSATP7",51,0)
 S TINDX="",TINDX=$O(NT(TINDX))
"RTN","PRSATP7",52,0)
 ;
"RTN","PRSATP7",53,0)
 ; Loop through ordered exceptions to see if the first 15 minutes
"RTN","PRSATP7",54,0)
 ; of the tour was non-pay
"RTN","PRSATP7",55,0)
 S (EINDX,EDATA)=""
"RTN","PRSATP7",56,0)
 F EIN=1:1:7 D  Q:QUIT!(EINDX="")!(DAH'="")
"RTN","PRSATP7",57,0)
 . S EINDX=$O(NE(EINDX))
"RTN","PRSATP7",58,0)
 . Q:EINDX=""
"RTN","PRSATP7",59,0)
 . S EDATA=NE(EINDX),EEND=$P(EDATA,U,2),ETOT=$P(EDATA,U,3)
"RTN","PRSATP7",60,0)
 . Q:EINDX'=TINDX  ; not first 15 minutes
"RTN","PRSATP7",61,0)
 . I ETOT'="NP"&(ETOT'="WP") S QUIT=1 Q  ; first 15 wasn't non-pay
"RTN","PRSATP7",62,0)
 . S DAH=PPIP_U_WDAY_U_ETOT
"RTN","PRSATP7",63,0)
 Q
"RTN","PRSATP8")
0^9^B23114322
"RTN","PRSATP8",1,0)
PRSATP8 ;HISC/MGD-Timekeeper Post Absence ;01/27/06
"RTN","PRSATP8",2,0)
 ;;4.0;PAID;**102**;Sep 21, 1995
"RTN","PRSATP8",3,0)
 ;
"RTN","PRSATP8",4,0)
FNDHOL(PPIP,DFN,WDAY,HOL,QUIT) ;
"RTN","PRSATP8",5,0)
 ; Procedure to determine if there was a holiday in a PP
"RTN","PRSATP8",6,0)
 ; Will also check to see if there was any On-Call posted
"RTN","PRSATP8",7,0)
 ; as an exception that abuts the scheduled tour and if
"RTN","PRSATP8",8,0)
 ; the first/last 15 minutes of the On-call was worked
"RTN","PRSATP8",9,0)
 ; 
"RTN","PRSATP8",10,0)
 ; Input:
"RTN","PRSATP8",11,0)
 ;    PPIP - IEN of Pay Period to be checked
"RTN","PRSATP8",12,0)
 ;     DFN - IEN of employee to be checked
"RTN","PRSATP8",13,0)
 ;    WDAY - Day to start looping backwards from
"RTN","PRSATP8",14,0)
 ;     HOL - null
"RTN","PRSATP8",15,0)
 ;    QUIT - null 
"RTN","PRSATP8",16,0)
 ;    
"RTN","PRSATP8",17,0)
 ; Output:
"RTN","PRSATP8",18,0)
 ;    HOL - IF not found = ""
"RTN","PRSATP8",19,0)
 ;          IF found = PPIP^WDAY^SOH
"RTN","PRSATP8",20,0)
 ;            PPIP - IEN of pay period containing the holiday
"RTN","PRSATP8",21,0)
 ;            WDAY - the day number on which the holiday occurs
"RTN","PRSATP8",22,0)
 ;             SOH - The status of the timecard containing the holiday
"RTN","PRSATP8",23,0)
 ;   QUIT - Will be set to 1 if the holiday encapsulation
"RTN","PRSATP8",24,0)
 ;          rules are broken
"RTN","PRSATP8",25,0)
 ;          
"RTN","PRSATP8",26,0)
 N DADRFM,HTAFTER,HTPRIOR,HTSTRT,HTEND,NODE0,NODE1,NODE2,NODE4
"RTN","PRSATP8",27,0)
 N REGHRS1,REGHRS2,SOH,TOUR1,TOUR2,TPPIP,TWDAY
"RTN","PRSATP8",28,0)
 N HT,HE,HO,HC,NT,NE,NO,NC,PT,PE,PO,PC ; New ordered arrays
"RTN","PRSATP8",29,0)
 S NODE0=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,0))
"RTN","PRSATP8",30,0)
 S SOH=$P($G(^PRST(458,PPIP,"E",DFN,0)),U,2)
"RTN","PRSATP8",31,0)
 S TPPIP=PPIP,TWDAY=WDAY
"RTN","PRSATP8",32,0)
 I NODE0="" S QUIT=1 Q  ; Corrupted data 
"RTN","PRSATP8",33,0)
 Q:$P(NODE0,U,2)=1  ; Scheduled day off
"RTN","PRSATP8",34,0)
 ;
"RTN","PRSATP8",35,0)
 ; Check for tours with no regular hours
"RTN","PRSATP8",36,0)
 S TOUR1=+$P(NODE0,U,2),TOUR2=+$P(NODE0,U,13)
"RTN","PRSATP8",37,0)
 S REGHRS1=$P($G(^PRST(457.1,TOUR1,0)),U,6)
"RTN","PRSATP8",38,0)
 S REGHRS2=$S(TOUR2:$P($G(^PRST(457.1,TOUR2,0)),U,6),1:"")
"RTN","PRSATP8",39,0)
 Q:$P(NODE0,U,2)'=2&($P(NODE0,U,2)'=3)&(REGHRS1+REGHRS2=0)
"RTN","PRSATP8",40,0)
 ;
"RTN","PRSATP8",41,0)
 ; Quit if day has a tour with regular hours and it is not
"RTN","PRSATP8",42,0)
 ; a holiday (#10.2)OBSERVED HOLIDAY
"RTN","PRSATP8",43,0)
 I REGHRS1,$P(NODE0,U,12)="" S QUIT=1 Q
"RTN","PRSATP8",44,0)
 ;
"RTN","PRSATP8",45,0)
 ; If the holiday has two tours, Timekeepers will post
"RTN","PRSATP8",46,0)
 I $P(NODE0,U,13)'="" S QUIT=1 Q
"RTN","PRSATP8",47,0)
 ;
"RTN","PRSATP8",48,0)
 ; Load Holiday exceptions and check for HW & HX
"RTN","PRSATP8",49,0)
 S NODE2=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,2))
"RTN","PRSATP8",50,0)
 I NODE2["HW" S QUIT=1 Q  ; worked was performed on a holiday
"RTN","PRSATP8",51,0)
 I NODE2'["HX" S QUIT=1 Q  ; no HX to convert
"RTN","PRSATP8",52,0)
 ;
"RTN","PRSATP8",53,0)
 ; Checks for employees with DAILY tours
"RTN","PRSATP8",54,0)
 I $P(NODE0,U,2)=2!($P(NODE0,U,2)=3) S HOL=PPIP_U_WDAY_U_SOH Q
"RTN","PRSATP8",55,0)
 ;
"RTN","PRSATP8",56,0)
 ; Load nodes 1, 4
"RTN","PRSATP8",57,0)
 S NODE1=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,1))
"RTN","PRSATP8",58,0)
 S NODE4=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,4))
"RTN","PRSATP8",59,0)
 ;
"RTN","PRSATP8",60,0)
 ; Convert Start/Stop times and create all
"RTN","PRSATP8",61,0)
 ; ordered arrays
"RTN","PRSATP8",62,0)
 S DADRFM=1
"RTN","PRSATP8",63,0)
 D CNV96^PRSATP5(.NODE1,3,"HT",NODE0,.DADRFM)
"RTN","PRSATP8",64,0)
 I NODE4'="" D CNV96^PRSATP5(.NODE4,3,"HT",NODE0,.DADRFM)
"RTN","PRSATP8",65,0)
 D CNV96^PRSATP5(.NODE2,4,"HE",NODE0,.DADRFM)
"RTN","PRSATP8",66,0)
 ;
"RTN","PRSATP8",67,0)
 ; Get start/end times of holiday tour
"RTN","PRSATP8",68,0)
 S HTSTRT="",HTSTRT=$O(HT(HTSTRT))
"RTN","PRSATP8",69,0)
 S HTEND="",HTEND=$O(HT(HTEND),-1)
"RTN","PRSATP8",70,0)
 I HTEND S HTEND=$P(HT(HTEND),U,2)
"RTN","PRSATP8",71,0)
 ;
"RTN","PRSATP8",72,0)
 ; Load prior days info
"RTN","PRSATP8",73,0)
 S WDAY=WDAY-1
"RTN","PRSATP8",74,0)
 I WDAY=0 D  Q:QUIT
"RTN","PRSATP8",75,0)
 . N BACK S BACK=0
"RTN","PRSATP8",76,0)
 . D GETPPP^PRSATP5(.PPIP,DFN,.WDAY,.BACK,.QUIT)
"RTN","PRSATP8",77,0)
 S NODE0=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,0))
"RTN","PRSATP8",78,0)
 S NODE1=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,1))
"RTN","PRSATP8",79,0)
 S DADRFM=1
"RTN","PRSATP8",80,0)
 D CNV96^PRSATP5(.NODE1,3,"PT",NODE0,.DADRFM)
"RTN","PRSATP8",81,0)
 S NODE4=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,4))
"RTN","PRSATP8",82,0)
 I NODE4'="" D CNV96^PRSATP5(.NODE4,3,"PT",NODE0,.DADRFM)
"RTN","PRSATP8",83,0)
 S NODE2=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,2))
"RTN","PRSATP8",84,0)
 D CNV96^PRSATP5(.NODE2,4,"PE",NODE0,.DADRFM)
"RTN","PRSATP8",85,0)
 ;
"RTN","PRSATP8",86,0)
 ; Load next day's info
"RTN","PRSATP8",87,0)
 S PPIP=TPPIP,WDAY=TWDAY+1
"RTN","PRSATP8",88,0)
 I WDAY=15 D  Q:QUIT
"RTN","PRSATP8",89,0)
 . N NEXT S NEXT=0
"RTN","PRSATP8",90,0)
 . D GETNPP^PRSATP5(.PPIP,DFN,.WDAY,.NEXT,.QUIT)
"RTN","PRSATP8",91,0)
 S NODE0=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,0))
"RTN","PRSATP8",92,0)
 S NODE1=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,1))
"RTN","PRSATP8",93,0)
 S DADRFM=1
"RTN","PRSATP8",94,0)
 D CNV96^PRSATP5(.NODE1,3,"NT",NODE0,.DADRFM)
"RTN","PRSATP8",95,0)
 S NODE4=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,4))
"RTN","PRSATP8",96,0)
 I NODE4'="" D CNV96^PRSATP5(.NODE4,3,"NT",NODE0,.DADRFM)
"RTN","PRSATP8",97,0)
 S NODE2=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,2))
"RTN","PRSATP8",98,0)
 D CNV96^PRSATP5(.NODE2,4,"NE",NODE0,.DADRFM)
"RTN","PRSATP8",99,0)
 ;
"RTN","PRSATP8",100,0)
 ; init flags as 0 (false)
"RTN","PRSATP8",101,0)
 S HTPRIOR("OC")=0 ; time immediately prior to holiday tour was on-call
"RTN","PRSATP8",102,0)
 S HTPRIOR("WK")=0 ; time immediately prior to holiday tour was worked
"RTN","PRSATP8",103,0)
 S HTAFTER("OC")=0 ; time immediately after holiday tour was on-call
"RTN","PRSATP8",104,0)
 S HTAFTER("WK")=0 ; time immediately after holiday tour was worked
"RTN","PRSATP8",105,0)
 ;
"RTN","PRSATP8",106,0)
 ; check if on-call segments posted on prior day abut the holiday tour
"RTN","PRSATP8",107,0)
 I $$INCTM(HTSTRT-1+96,.PO) S HTPRIOR("OC")=1
"RTN","PRSATP8",108,0)
 I $$INCTM(HTEND+1+96,.PO) S HTAFTER("OC")=1
"RTN","PRSATP8",109,0)
 ;
"RTN","PRSATP8",110,0)
 ; check if on-call segments posted on holiday abut the holiday tour
"RTN","PRSATP8",111,0)
 I $$INCTM(HTSTRT-1,.HO) S HTPRIOR("OC")=1
"RTN","PRSATP8",112,0)
 I $$INCTM(HTEND+1,.HO) S HTAFTER("OC")=1
"RTN","PRSATP8",113,0)
 ;
"RTN","PRSATP8",114,0)
 ; check if on-call segments posted on next day abut the holiday tour
"RTN","PRSATP8",115,0)
 I $$INCTM(HTEND+1-96,.NO) S HTAFTER("OC")=1
"RTN","PRSATP8",116,0)
 ;
"RTN","PRSATP8",117,0)
 ; check if extra work segments posted on prior day abut the holiday tour
"RTN","PRSATP8",118,0)
 I $$INCTM(HTSTRT-1+96,.PC) S HTPRIOR("WK")=1
"RTN","PRSATP8",119,0)
 ;
"RTN","PRSATP8",120,0)
 ; check if extra work segments posted on holiday abut the holiday tour
"RTN","PRSATP8",121,0)
 I $$INCTM(HTSTRT-1,.HC) S HTPRIOR("WK")=1
"RTN","PRSATP8",122,0)
 I $$INCTM(HTEND+1,.HC) S HTAFTER("WK")=1
"RTN","PRSATP8",123,0)
 ;
"RTN","PRSATP8",124,0)
 ; check if extra work segments posted on next day abut the holiday tour
"RTN","PRSATP8",125,0)
 I $$INCTM(HTEND+1-96,.NC) S HTAFTER("WK")=1
"RTN","PRSATP8",126,0)
 ;
"RTN","PRSATP8",127,0)
 ; if call-back abuts the holiday tour then it is not considered encap.
"RTN","PRSATP8",128,0)
 I HTPRIOR("OC"),HTPRIOR("WK") S QUIT=1 Q  ; call-back abuts beginning
"RTN","PRSATP8",129,0)
 I HTAFTER("OC"),HTAFTER("WK") S QUIT=1 Q  ; call-back abuts end
"RTN","PRSATP8",130,0)
 ;
"RTN","PRSATP8",131,0)
 ; checks done so holiday excused is considered encapsulated by non-pay
"RTN","PRSATP8",132,0)
 S HOL=TPPIP_U_TWDAY_U_SOH
"RTN","PRSATP8",133,0)
 Q
"RTN","PRSATP8",134,0)
 ;
"RTN","PRSATP8",135,0)
INCTM(PRST,PRSARR) ; Includes Time Extrinsic Function
"RTN","PRSATP8",136,0)
 ; determines if a time is included within any time segments in array
"RTN","PRSATP8",137,0)
 ; input
"RTN","PRSATP8",138,0)
 ;   PRST - number that represents a time segment (1-192)
"RTN","PRSATP8",139,0)
 ;   PRSARR - array, passed by reference with following format
"RTN","PRSATP8",140,0)
 ;       PRSARR(start)=start^stop^type of time
"RTN","PRSATP8",141,0)
 ; returns 1 if PRST included within a time segment or 0 if not
"RTN","PRSATP8",142,0)
 ;
"RTN","PRSATP8",143,0)
 N RET,START,STOP
"RTN","PRSATP8",144,0)
 S RET=0 ; initialize return value
"RTN","PRSATP8",145,0)
 ;
"RTN","PRSATP8",146,0)
 ; loop thru array
"RTN","PRSATP8",147,0)
 I PRST>0 S START="" F  S START=$O(PRSARR(START)) Q:START=""  D  Q:RET
"RTN","PRSATP8",148,0)
 . S STOP=$P(PRSARR(START),U,2)
"RTN","PRSATP8",149,0)
 . I PRST'<START,PRST'>STOP S RET=1 ; check if time included in segment
"RTN","PRSATP8",150,0)
 ;
"RTN","PRSATP8",151,0)
 Q RET
"RTN","PRSATPE")
0^8^B24687644^B21699129
"RTN","PRSATPE",1,0)
PRSATPE ;HISC/REL-Find Exceptions ;12/08/05
"RTN","PRSATPE",2,0)
 ;;4.0;PAID;**26,34,69,102**;Sep 21, 1995
"RTN","PRSATPE",3,0)
 K ER S (ECNT,FATAL)=0,X0=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),STAT=$P($G(^(10)),"^",1)
"RTN","PRSATPE",4,0)
 N MLTIME S MLTIME=0
"RTN","PRSATPE",5,0)
 S TC=$P(X0,"^",2) I 'TC S ER(1)=$P($T(ERTX+1),";;",2),FATAL=1 G EX
"RTN","PRSATPE",6,0)
 I "1 3 4"'[TC,STAT="" S ER(1)=$P($T(ERTX+2),";;",2),FATAL=1 G EX
"RTN","PRSATPE",7,0)
 S X2=$G(^PRST(458,PPI,"E",DFN,"D",DAY,2)) G:X2="" EX S X1=$G(^(1)),X4=$G(^(4))
"RTN","PRSATPE",8,0)
 K TM I X2["OT"!(X2["CT") D TM
"RTN","PRSATPE",9,0)
 K T F K=1:3 Q:$P(X1,"^",K)=""  S Z=$P(X1,"^",K+2) I $S('Z:1,1:$P($G(^PRST(457.2,Z,0)),"^",2)="RG") D
"RTN","PRSATPE",10,0)
 .S X=$P(X1,"^",K,K+1) D CNV^PRSATIM S Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V0
"RTN","PRSATPE",11,0)
 .I Z1'="",$G(T(Z1))="*" K T(Z1) S T(Z2)="*" Q
"RTN","PRSATPE",12,0)
 .S T(Z1)="",T(Z2)="*" Q
"RTN","PRSATPE",13,0)
 I X4'="" F K=1:3 Q:$P(X4,"^",K)=""  S Z=$P(X4,"^",K+2) I $S('Z:1,1:$P($G(^PRST(457.2,Z,0)),"^",2)="RG") D
"RTN","PRSATPE",14,0)
 .S X=$P(X4,"^",K,K+1) D CNV^PRSATIM S Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V0
"RTN","PRSATPE",15,0)
 .I Z1'="",$G(T(Z1))="*" K T(Z1) S T(Z2)="*" Q
"RTN","PRSATPE",16,0)
 .S T(Z1)="",T(Z2)="*" Q
"RTN","PRSATPE",17,0)
 ;
"RTN","PRSATPE",18,0)
 ; Checks for Daily employees
"RTN","PRSATPE",19,0)
 I "^"[$P(X2,"^",1,2) S TT=$P(X2,"^",3),K=1,DN=0,Y0="" G L0
"RTN","PRSATPE",20,0)
 F K=1:4:25 S X=$P(X2,"^",K,K+1) I "^"'[X D
"RTN","PRSATPE",21,0)
 .S TT=$P(X2,"^",K+2)
"RTN","PRSATPE",22,0)
 .D CNV^PRSATIM S Y0=Y,Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V1 S TIM=Z2-Z1/60
"RTN","PRSATPE",23,0)
 .I TT="ML" S MLTIME=MLTIME+TIM
"RTN","PRSATPE",24,0)
 .S Z1=$O(T(Z1)) S:Z1'="" Z1=T(Z1)
"RTN","PRSATPE",25,0)
 .S Z2=$O(T(Z2-1)) S:Z2'="" Z2=T(Z2)
"RTN","PRSATPE",26,0)
 .I TT="UN" D UN^PRSATPH Q
"RTN","PRSATPE",27,0)
 .I "CT OT ON SB RG"[TT D OT Q
"RTN","PRSATPE",28,0)
 .D LV Q
"RTN","PRSATPE",29,0)
 ;
"RTN","PRSATPE",30,0)
 ; Check for a minimum of 1 hour ML
"RTN","PRSATPE",31,0)
 ;
"RTN","PRSATPE",32,0)
 I TT="ML",MLTIME<1 S ER(1)=$P($T(ERTX+14),";;",2),FATAL=1 G EX
"RTN","PRSATPE",33,0)
 ;
"RTN","PRSATPE",34,0)
EX Q
"RTN","PRSATPE",35,0)
V0 I Z2>Z1 S:$O(T(""))'<Z2 Z1=Z1+1440,Z2=Z2+1440 Q
"RTN","PRSATPE",36,0)
 S Z2=Z2+1440 Q
"RTN","PRSATPE",37,0)
V1 S DN=0 I Z2>Z1 Q:"CT OT ON SB UN RG"[TT  S:$O(T(""))'<Z2 Z1=Z1+1440,Z2=Z2+1440,DN=2 Q
"RTN","PRSATPE",38,0)
 S Z2=Z2+1440,DN=1 Q
"RTN","PRSATPE",39,0)
OT ; Check OT/CT Request
"RTN","PRSATPE",40,0)
 I Z1'=""!(Z2'="") D O2 I $G(ERR)=6 S FATAL=1 D ERR
"RTN","PRSATPE",41,0)
 I DN=1,$O(T(1440))="" D NX^PRSATPH
"RTN","PRSATPE",42,0)
 I 'DN,$O(T(""))=""!($P(Y0,"^",1)'>$O(T(""))) D PR^PRSATPH
"RTN","PRSATPE",43,0)
 I "ON SB RG"[TT Q
"RTN","PRSATPE",44,0)
 ; check status of request(s)
"RTN","PRSATPE",45,0)
 S DTI=$P($G(^PRST(458,PPI,1)),U,DAY) Q:'DTI
"RTN","PRSATPE",46,0)
 S STAT="" ; init highest status var
"RTN","PRSATPE",47,0)
 S DA=0 F  S DA=$O(^PRST(458.2,"AD",DFN,DTI,DA)) Q:'DA  D  Q:STAT="A"
"RTN","PRSATPE",48,0)
 . S Z=$G(^PRST(458.2,DA,0))
"RTN","PRSATPE",49,0)
 . Q:$P(Z,"^",5)'=TT  ; ignore different type
"RTN","PRSATPE",50,0)
 . I $F("RSA",$P(Z,U,8))>$F("RSA",STAT) S STAT=$P(Z,U,8) ; higher status
"RTN","PRSATPE",51,0)
 I STAT="" S ERR=3 D ERR Q  ; none with requested or higher status
"RTN","PRSATPE",52,0)
 I STAT'="A" D  Q  ; none approved
"RTN","PRSATPE",53,0)
 . S ERR=$S(STAT="R":8,1:9) D ERR
"RTN","PRSATPE",54,0)
 . ; check posted hours vs requested since no approved request
"RTN","PRSATPE",55,0)
 . S TM(TT,"R")=$G(TM(TT,"R"))-TIM I TM(TT,"R")<0 S ERR=7 D ERR
"RTN","PRSATPE",56,0)
 ; check posted hours vs approved since we have an approved request
"RTN","PRSATPE",57,0)
 S TM(TT,"A")=$G(TM(TT,"A"))-TIM I TM(TT,"A")<0 S ERR=13 D ERR
"RTN","PRSATPE",58,0)
 Q
"RTN","PRSATPE",59,0)
O2 ; Check for valid with-in tour or cross-tour situations
"RTN","PRSATPE",60,0)
 I TT="ON"&(X2["HX") Q
"RTN","PRSATPE",61,0)
 ;I "OT CT"[TT,TIM'>1 Q
"RTN","PRSATPE",62,0)
 S ERR=6 Q
"RTN","PRSATPE",63,0)
TM ; Get OT,CT request,approve times
"RTN","PRSATPE",64,0)
 S DTI=$P($G(^PRST(458,PPI,1)),"^",DAY),DA=0 Q:'DTI
"RTN","PRSATPE",65,0)
T1 S DA=$O(^PRST(458.2,"AD",DFN,DTI,DA)) I 'DA Q
"RTN","PRSATPE",66,0)
 S Z=$G(^PRST(458.2,DA,0)),STAT=$P(Z,"^",8) I STAT'="","XD"[STAT G T1
"RTN","PRSATPE",67,0)
 S TT=$P(Z,"^",5) I TT'="OT",TT'="CT" G T1
"RTN","PRSATPE",68,0)
 S TM(TT,"R")=$G(TM(TT,"R"))+$P(Z,"^",6) ; requested sum
"RTN","PRSATPE",69,0)
 I STAT="A" S TM(TT,"A")=$G(TM(TT,"A"))+$P(Z,"^",6) ; approved sum
"RTN","PRSATPE",70,0)
 G T1
"RTN","PRSATPE",71,0)
LV ; Check Leave Request
"RTN","PRSATPE",72,0)
 I TC=3!(TC=4) Q
"RTN","PRSATPE",73,0)
 I TC=1,TT="HW" Q
"RTN","PRSATPE",74,0)
 I Z1'="*"!(Z2'="*") S ERR=5,FATAL=1 D ERR
"RTN","PRSATPE",75,0)
 ;
"RTN","PRSATPE",76,0)
L0 N REMARK S REMARK=$P(X2,"^",K+3)
"RTN","PRSATPE",77,0)
 Q:REMARK&(REMARK'=15&(REMARK'=16))
"RTN","PRSATPE",78,0)
 I "HX"[TT D HENCAP
"RTN","PRSATPE",79,0)
 Q:"RG CP NP HX HW TR TV"[TT
"RTN","PRSATPE",80,0)
 S DTI=$P($G(^PRST(458,PPI,1)),"^",DAY) Q:'DTI  S (DT1,DT2)=DTI
"RTN","PRSATPE",81,0)
 I DN D D2 S:DN=2 DT1=DT2
"RTN","PRSATPE",82,0)
 S DTIN=9999999-DT2,DA=0
"RTN","PRSATPE",83,0)
 F KK=0:0 S KK=$O(^PRST(458.1,"AD",DFN,KK)) G:KK=""!(KK>DTIN) L3 F DA=0:0 S DA=$O(^PRST(458.1,"AD",DFN,KK,DA)) Q:DA=""  I ^(DA)'>DT1 D L1 G:LF L4
"RTN","PRSATPE",84,0)
 Q
"RTN","PRSATPE",85,0)
L1 S Z=$G(^PRST(458.1,DA,0)),LF=0 Q:$P(Z,"^",7)'=TT  S STAT=$P(Z,"^",9) I "XD"[STAT Q
"RTN","PRSATPE",86,0)
 G:Y0="" L2 S Z1=$P(Y0,"^",1),Z2=$P(Y0,"^",2)
"RTN","PRSATPE",87,0)
 S X=$P(Z,"^",4)_"^"_$P(Z,"^",6) D CNV^PRSATIM
"RTN","PRSATPE",88,0)
 I $P(Z,"^",3)=DT1,$P(Y,"^",1)>Z1 Q
"RTN","PRSATPE",89,0)
 I $P(Z,"^",5)=DT2,$P(Y,"^",2)<Z2 Q
"RTN","PRSATPE",90,0)
L2 I STAT'="A" S ERR=4 D ERR
"RTN","PRSATPE",91,0)
 S LF=1 Q
"RTN","PRSATPE",92,0)
L3 S ERR=3 D ERR Q
"RTN","PRSATPE",93,0)
L4 Q
"RTN","PRSATPE",94,0)
D2 I DAY<14 S DT2=$P($G(^PRST(458,PPI,1)),"^",DAY+1) Q
"RTN","PRSATPE",95,0)
 N X1,X2 S X1=DT1,X2=1 D C^%DTC S DT2=X Q
"RTN","PRSATPE",96,0)
 ;
"RTN","PRSATPE",97,0)
HENCAP ; Check for Holiday encapsulated by non-pay
"RTN","PRSATPE",98,0)
 N DAH,DBH,HOL,QUIT
"RTN","PRSATPE",99,0)
 S (DAH,DBH,HOL,QUIT)=""
"RTN","PRSATPE",100,0)
 D HENCAP^PRSATP4(PPI,DFN,DAY,.DBH,.HOL,.DAH,.QUIT)
"RTN","PRSATPE",101,0)
 Q:QUIT
"RTN","PRSATPE",102,0)
 Q:HOL=""
"RTN","PRSATPE",103,0)
 S ERR=15 D ERR Q  ; Holiday in current PP
"RTN","PRSATPE",104,0)
 Q
"RTN","PRSATPE",105,0)
 ;
"RTN","PRSATPE",106,0)
ERR ; Set Error
"RTN","PRSATPE",107,0)
 S ECNT=ECNT+1,ER(ECNT)=TT_$P($T(ERTX+ERR),";;",2)_"^"_$P(X2,"^",K) Q
"RTN","PRSATPE",108,0)
ERTX ;;
"RTN","PRSATPE",109,0)
1 ;;No Tour Entered^
"RTN","PRSATPE",110,0)
2 ;;No Time Posted^
"RTN","PRSATPE",111,0)
3 ;; not Requested
"RTN","PRSATPE",112,0)
4 ;; Requested but not Approved
"RTN","PRSATPE",113,0)
5 ;; Posted outside of Tour Hours
"RTN","PRSATPE",114,0)
6 ;; Posted within Tour Hours
"RTN","PRSATPE",115,0)
7 ;; Posted exceeds Requested Hours
"RTN","PRSATPE",116,0)
8 ;; Requested but pending Supervisor Approval
"RTN","PRSATPE",117,0)
9 ;; Supervisor Approved but pending Director Approval
"RTN","PRSATPE",118,0)
10 ;; Overlaps with the start of the next day's Tour
"RTN","PRSATPE",119,0)
11 ;; Overlaps with the prior day's Tour
"RTN","PRSATPE",120,0)
12 ;; can only be posted against OT, CT, ON, & SB in Tour
"RTN","PRSATPE",121,0)
13 ;; Posted exceeds Approved Hours
"RTN","PRSATPE",122,0)
14 ;; The minimum charge for Military Leave is one hour
"RTN","PRSATPE",123,0)
15 ;; was encapsulated by non-pay
"VER")
8.0^22.0
"^DD",455.1,455.1,0)
FIELD^^1^2
"^DD",455.1,455.1,0,"DDA")
N
"^DD",455.1,455.1,0,"IX","B",455.1,.01)

"^DD",455.1,455.1,0,"NM","8B ERROR MESSAGE")

"^DD",455.1,455.1,0,"VRPK")
PRS
"^DD",455.1,455.1,.01,0)
ERROR #^RNJ4,0^^0;1^K:+X'=X!(X>1000)!(X<1)!(X?.E1"."1N.N) X I $D(X) S DINUM=X
"^DD",455.1,455.1,.01,1,0)
^.1
"^DD",455.1,455.1,.01,1,1,0)
455.1^B
"^DD",455.1,455.1,.01,1,1,1)
S ^PRST(455.1,"B",$E(X,1,30),DA)=""
"^DD",455.1,455.1,.01,1,1,2)
K ^PRST(455.1,"B",$E(X,1,30),DA)
"^DD",455.1,455.1,.01,3)
Type a Number between 1 and 1000, 0 Decimal Digits
"^DD",455.1,455.1,.01,21,0)
^^3^3^2890327^
"^DD",455.1,455.1,.01,21,1,0)
This field contains an arbitrary number assigned to each error
"^DD",455.1,455.1,.01,21,2,0)
message. However, these numbers are referred to by various edit
"^DD",455.1,455.1,.01,21,3,0)
programs and should not be altered.
"^DD",455.1,455.1,1,0)
MESSAGE^455.11^^E;0
"^DD",455.1,455.1,1,21,0)
^^1^1^2890327^
"^DD",455.1,455.1,1,21,1,0)
This field contains the text of the error message.
"^DD",455.1,455.11,0)
MESSAGE SUB-FIELD^^.01^1
"^DD",455.1,455.11,0,"NM","MESSAGE")

"^DD",455.1,455.11,0,"UP")
455.1
"^DD",455.1,455.11,.01,0)
MESSAGE^W^^0;1^Q
"^DD",455.1,455.11,.01,21,0)
^^1^1^2890327^
"^DD",455.1,455.11,.01,21,1,0)
This field contains the text of the error message.
"^DD",457.5,457.5,0)
FIELD^^20^3
"^DD",457.5,457.5,0,"DT")
2920601
"^DD",457.5,457.5,0,"IX","AC",457.5,1)

"^DD",457.5,457.5,0,"IX","B",457.5,.01)

"^DD",457.5,457.5,0,"NM","PAY ENTITLEMENT")

"^DD",457.5,457.5,0,"PT",458.01,4)

"^DD",457.5,457.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<5) X
"^DD",457.5,457.5,.01,1,0)
^.1
"^DD",457.5,457.5,.01,1,1,0)
457.5^B
"^DD",457.5,457.5,.01,1,1,1)
S ^PRST(457.5,"B",$E(X,1,30),DA)=""
"^DD",457.5,457.5,.01,1,1,2)
K ^PRST(457.5,"B",$E(X,1,30),DA)
"^DD",457.5,457.5,.01,3)
Answer must be 5-30 characters in length.
"^DD",457.5,457.5,.01,21,0)
^^1^1^2921105^
"^DD",457.5,457.5,.01,21,1,0)
The name of the pay entitlement character string.
"^DD",457.5,457.5,.01,"DT")
2920601
"^DD",457.5,457.5,1,0)
CODE^RF^^0;2^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>4!($L(X)<3) X
"^DD",457.5,457.5,1,1,0)
^.1
"^DD",457.5,457.5,1,1,1,0)
457.5^AC
"^DD",457.5,457.5,1,1,1,1)
S ^PRST(457.5,"AC",$E(X,1,30),DA)=""
"^DD",457.5,457.5,1,1,1,2)
K ^PRST(457.5,"AC",$E(X,1,30),DA)
"^DD",457.5,457.5,1,1,1,"DT")
2920420
"^DD",457.5,457.5,1,3)
Answer must be 3-4 characters in length.
"^DD",457.5,457.5,1,21,0)
^^1^1^2921105^
"^DD",457.5,457.5,1,21,1,0)
A code that identifies the pay entitlement string.
"^DD",457.5,457.5,1,"DT")
2920420
"^DD",457.5,457.5,20,0)
ENTITLEMENT STRING^RF^^1;1^K:$L(X)>50!($L(X)<38) X
"^DD",457.5,457.5,20,3)
Answer must be 38-50 characters in length.
"^DD",457.5,457.5,20,21,0)
^^1^1^2921105^
"^DD",457.5,457.5,20,21,1,0)
The pay entitlement character string.
"^DD",457.5,457.5,20,"DT")
2920420
"^DIC",455.1,455.1,0)
8B ERROR MESSAGE^455.1
"^DIC",455.1,455.1,0,"GL")
^PRST(455.1,
"^DIC",455.1,455.1,"%D",0)
^^3^3^2920129^^
"^DIC",455.1,455.1,"%D",1,0)
This file contains error messages corresponding to various edit
"^DIC",455.1,455.1,"%D",2,0)
errors that may be detected during the processing and checking
"^DIC",455.1,455.1,"%D",3,0)
of an 8B record entry.
"^DIC",455.1,"B","8B ERROR MESSAGE",455.1)

"^DIC",457.5,457.5,0)
PAY ENTITLEMENT^457.5
"^DIC",457.5,457.5,0,"GL")
^PRST(457.5,
"^DIC",457.5,457.5,"%D",0)
^^6^6^2920601^^
"^DIC",457.5,457.5,"%D",1,0)
This file contains a string of codes which indicate entitlement
"^DIC",457.5,457.5,"%D",2,0)
to specific type of time for different pay plan categories.
"^DIC",457.5,457.5,"%D",3,0)
The first character of the name is the Pay Plan, the second is
"^DIC",457.5,457.5,"%D",4,0)
Duty Basis, and the third is the FLSA indicator.
"^DIC",457.5,457.5,"%D",5,0)
 
"^DIC",457.5,457.5,"%D",6,0)
This file should not be altered except as instructed.
"^DIC",457.5,"B","PAY ENTITLEMENT",457.5)

"BLD",6507,6)
^92
**END**
**END**
