Released XU*8*68 SEQ #54
Extracted from mail message
**KIDS**:XU*8.0*68^

**INSTALL NAME**
XU*8.0*68
"BLD",20,0)
XU*8.0*68^KERNEL^0^2980213^y
"BLD",20,1,0)
^^74^74^2980311^^^^
"BLD",20,1,1,0)
=============================================================================
"BLD",20,1,2,0)
    ****** This patch must be QUEUED during the install process ******
"BLD",20,1,3,0)
=============================================================================
"BLD",20,1,4,0)

"BLD",20,1,5,0)
This patch contains fixes that were identified by mail messages and E3R
"BLD",20,1,6,0)
 -A patch will not be installed if the site is not running the correct version
"BLD",20,1,7,0)
  for the package.
"BLD",20,1,8,0)
 -Multiple Build definition will now be sent to the site, along with all the
"BLD",20,1,9,0)
  builds that make up the Multiple Build.
"BLD",20,1,10,0)
  E3R #10306.
"BLD",20,1,11,0)
 -Protocols will now delete properly at the site.
"BLD",20,1,12,0)
 -The variable XPDABORT will correctly abort the install in both the Pre &
"BLD",20,1,13,0)
  Post install routines.
"BLD",20,1,14,0)
 -The variable DIR is newed before call to environment check routine.
"BLD",20,1,15,0)
  ISW-0597-21778
"BLD",20,1,16,0)

"BLD",20,1,17,0)
=============================================================================
"BLD",20,1,18,0)
ROUTINES:
"BLD",20,1,19,0)
   Checksums obtained using CHECK^XTSUMBLD
"BLD",20,1,20,0)
   The second line of the routine now looks like:
"BLD",20,1,21,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"BLD",20,1,22,0)

"BLD",20,1,23,0)
            Before          After           Patch
"BLD",20,1,24,0)
Routine     Checksum        Checksum        List
"BLD",20,1,25,0)
----------------------------------------------------------------------
"BLD",20,1,26,0)
XPDDP       11584192        11970878     **21,28,44,68**
"BLD",20,1,27,0)
XPDE        15041471        15253053     **2,15,21,44,51,68**
"BLD",20,1,28,0)
XPDI        13319818        13691537     **10,21,39,41,44,58,68**
"BLD",20,1,29,0)
XPDIA       13293339        13299802     **10,15,21,28,44,58,68**
"BLD",20,1,30,0)
XPDIA1       7937994         9226085     **2,44,51,58,68**
"BLD",20,1,31,0)
XPDIA2       3520152         6372331     **68**
"BLD",20,1,32,0)
XPDIJ       10173098        10435806     **2,21,28,41,44,68**
"BLD",20,1,33,0)
XPDIJ1       8772642         9316977     **41,68**
"BLD",20,1,34,0)
XPDIL       11156235        11193690     **15,44,58,68**
"BLD",20,1,35,0)
XPDIL1       8519937         9389594     **15,17,39,41,44,66,68**
"BLD",20,1,36,0)
XPDIPM       1817853         1853883     **21,28,68**
"BLD",20,1,37,0)
XPDT        19357441        18817747     **2,10,28,41,44,51,58,66,68**
"BLD",20,1,38,0)
XPDTA1       4760350         4948004     **44,68**
"BLD",20,1,39,0)
=============================================================================
"BLD",20,1,40,0)
                     **** INSTALL INSTRUCTIONS ****
"BLD",20,1,41,0)
=============================================================================
"BLD",20,1,42,0)

"BLD",20,1,43,0)
 This patch can be installed with users on the system, but no other users
"BLD",20,1,44,0)
 should be using KIDS while you install this patch.
"BLD",20,1,45,0)
 Since this patch is an update to KIDS, no other patches should be installed
"BLD",20,1,46,0)
 during the installation of this patch.
"BLD",20,1,47,0)

"BLD",20,1,48,0)
    ****** This patch must be QUEUED during the install process ******
"BLD",20,1,49,0)

"BLD",20,1,50,0)
===========================================================================
"BLD",20,1,51,0)
INSTALLATION:
"BLD",20,1,52,0)
  1.  These routines are usually mapped on systems that allow mapping,
"BLD",20,1,53,0)
      so you will need to disable mapping for the effected routines.
"BLD",20,1,54,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",20,1,55,0)
      option will load the KIDS Distribution onto your system.
"BLD",20,1,56,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",20,1,57,0)
      system. You now need to use KIDS to install the patch in the Transport
"BLD",20,1,58,0)
      global.
"BLD",20,1,59,0)
  4.  Users can remain on the system. This patch can be queued and installed
"BLD",20,1,60,0)
      at any time.  TaskMan can remain running.
"BLD",20,1,61,0)
  5.  On the KIDS menu, under the 'Installation' menu, use the following
"BLD",20,1,62,0)
      options:
"BLD",20,1,63,0)
         2  Verify Checksums in Transport Global
"BLD",20,1,64,0)
         3  Print Transport Global
"BLD",20,1,65,0)
         4  Compare Transport Global to Current System
"BLD",20,1,66,0)
         5  Backup a Transport Global
"BLD",20,1,67,0)
         6  Install Package(s)
"BLD",20,1,68,0)
              INSTALL NAME: XU*8.0*68
"BLD",20,1,69,0)
                            =========
"BLD",20,1,70,0)
  6.  At the device prompt, make sure you queue the install:
"BLD",20,1,71,0)
              DEVICE: HOME// QUEUE TO PRINT ON
"BLD",20,1,72,0)
                             =
"BLD",20,1,73,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"BLD",20,1,74,0)
===========================================================================
"BLD",20,4,0)
^9.64PA^^
"BLD",20,"KRN",0)
^9.67PA^19^14
"BLD",20,"KRN",.4,0)
.4
"BLD",20,"KRN",.401,0)
.401
"BLD",20,"KRN",.402,0)
.402
"BLD",20,"KRN",.403,0)
.403
"BLD",20,"KRN",.5,0)
.5
"BLD",20,"KRN",.84,0)
.84
"BLD",20,"KRN",3.6,0)
3.6
"BLD",20,"KRN",3.8,0)
3.8
"BLD",20,"KRN",9.2,0)
9.2
"BLD",20,"KRN",9.8,0)
9.8
"BLD",20,"KRN",9.8,"NM",0)
^9.68A^14^13
"BLD",20,"KRN",9.8,"NM",1,0)
XPDE^^0^B39218853
"BLD",20,"KRN",9.8,"NM",2,0)
XPDIL1^^0^B28274669
"BLD",20,"KRN",9.8,"NM",3,0)
XPDT^^0^B55868945
"BLD",20,"KRN",9.8,"NM",4,0)
XPDIA2^^0^B17473622
"BLD",20,"KRN",9.8,"NM",6,0)
XPDIJ1^^0^B24370283
"BLD",20,"KRN",9.8,"NM",7,0)
XPDIJ^^0^B29597955
"BLD",20,"KRN",9.8,"NM",8,0)
XPDIA^^0^B53503659
"BLD",20,"KRN",9.8,"NM",9,0)
XPDI^^0^B36909767
"BLD",20,"KRN",9.8,"NM",10,0)
XPDIL^^0^B26169216
"BLD",20,"KRN",9.8,"NM",11,0)
XPDIPM^^0^B3119553
"BLD",20,"KRN",9.8,"NM",12,0)
XPDIA1^^0^B35706881
"BLD",20,"KRN",9.8,"NM",13,0)
XPDTA1^^0^B15140648
"BLD",20,"KRN",9.8,"NM",14,0)
XPDDP^^0^B28426622
"BLD",20,"KRN",9.8,"NM","B","XPDDP",14)

"BLD",20,"KRN",9.8,"NM","B","XPDE",1)

"BLD",20,"KRN",9.8,"NM","B","XPDI",9)

"BLD",20,"KRN",9.8,"NM","B","XPDIA",8)

"BLD",20,"KRN",9.8,"NM","B","XPDIA1",12)

"BLD",20,"KRN",9.8,"NM","B","XPDIA2",4)

"BLD",20,"KRN",9.8,"NM","B","XPDIJ",7)

"BLD",20,"KRN",9.8,"NM","B","XPDIJ1",6)

"BLD",20,"KRN",9.8,"NM","B","XPDIL",10)

"BLD",20,"KRN",9.8,"NM","B","XPDIL1",2)

"BLD",20,"KRN",9.8,"NM","B","XPDIPM",11)

"BLD",20,"KRN",9.8,"NM","B","XPDT",3)

"BLD",20,"KRN",9.8,"NM","B","XPDTA1",13)

"BLD",20,"KRN",19,0)
19
"BLD",20,"KRN",19.1,0)
19.1
"BLD",20,"KRN",101,0)
101
"BLD",20,"KRN",8994,0)
8994
"BLD",20,"KRN","B",.4,.4)

"BLD",20,"KRN","B",.401,.401)

"BLD",20,"KRN","B",.402,.402)

"BLD",20,"KRN","B",.403,.403)

"BLD",20,"KRN","B",.5,.5)

"BLD",20,"KRN","B",.84,.84)

"BLD",20,"KRN","B",3.6,3.6)

"BLD",20,"KRN","B",3.8,3.8)

"BLD",20,"KRN","B",9.2,9.2)

"BLD",20,"KRN","B",9.8,9.8)

"BLD",20,"KRN","B",19,19)

"BLD",20,"KRN","B",19.1,19.1)

"BLD",20,"KRN","B",101,101)

"BLD",20,"KRN","B",8994,8994)

"BLD",20,"QUES",0)
^9.62^^
"BLD",20,"REQB",0)
^9.611^^
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^2950703^2970507^.5
"PKG",3,22,1,"PAH",1,0)
68^2980213^6
"PKG",3,22,1,"PAH",1,1,0)
^^74^74^2980311
"PKG",3,22,1,"PAH",1,1,1,0)
=============================================================================
"PKG",3,22,1,"PAH",1,1,2,0)
    ****** This patch must be QUEUED during the install process ******
"PKG",3,22,1,"PAH",1,1,3,0)
=============================================================================
"PKG",3,22,1,"PAH",1,1,4,0)

"PKG",3,22,1,"PAH",1,1,5,0)
This patch contains fixes that were identified by mail messages and E3R
"PKG",3,22,1,"PAH",1,1,6,0)
 -A patch will not be installed if the site is not running the correct version
"PKG",3,22,1,"PAH",1,1,7,0)
  for the package.
"PKG",3,22,1,"PAH",1,1,8,0)
 -Multiple Build definition will now be sent to the site, along with all the
"PKG",3,22,1,"PAH",1,1,9,0)
  builds that make up the Multiple Build.
"PKG",3,22,1,"PAH",1,1,10,0)
  E3R #10306.
"PKG",3,22,1,"PAH",1,1,11,0)
 -Protocols will now delete properly at the site.
"PKG",3,22,1,"PAH",1,1,12,0)
 -The variable XPDABORT will correctly abort the install in both the Pre &
"PKG",3,22,1,"PAH",1,1,13,0)
  Post install routines.
"PKG",3,22,1,"PAH",1,1,14,0)
 -The variable DIR is newed before call to environment check routine.
"PKG",3,22,1,"PAH",1,1,15,0)
  ISW-0597-21778
"PKG",3,22,1,"PAH",1,1,16,0)

"PKG",3,22,1,"PAH",1,1,17,0)
=============================================================================
"PKG",3,22,1,"PAH",1,1,18,0)
ROUTINES:
"PKG",3,22,1,"PAH",1,1,19,0)
   Checksums obtained using CHECK^XTSUMBLD
"PKG",3,22,1,"PAH",1,1,20,0)
   The second line of the routine now looks like:
"PKG",3,22,1,"PAH",1,1,21,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"PKG",3,22,1,"PAH",1,1,22,0)

"PKG",3,22,1,"PAH",1,1,23,0)
            Before          After           Patch
"PKG",3,22,1,"PAH",1,1,24,0)
Routine     Checksum        Checksum        List
"PKG",3,22,1,"PAH",1,1,25,0)
----------------------------------------------------------------------
"PKG",3,22,1,"PAH",1,1,26,0)
XPDDP       11584192        11970878     **21,28,44,68**
"PKG",3,22,1,"PAH",1,1,27,0)
XPDE        15041471        15253053     **2,15,21,44,51,68**
"PKG",3,22,1,"PAH",1,1,28,0)
XPDI        13319818        13691537     **10,21,39,41,44,58,68**
"PKG",3,22,1,"PAH",1,1,29,0)
XPDIA       13293339        13299802     **10,15,21,28,44,58,68**
"PKG",3,22,1,"PAH",1,1,30,0)
XPDIA1       7937994         9226085     **2,44,51,58,68**
"PKG",3,22,1,"PAH",1,1,31,0)
XPDIA2       3520152         6372331     **68**
"PKG",3,22,1,"PAH",1,1,32,0)
XPDIJ       10173098        10435806     **2,21,28,41,44,68**
"PKG",3,22,1,"PAH",1,1,33,0)
XPDIJ1       8772642         9316977     **41,68**
"PKG",3,22,1,"PAH",1,1,34,0)
XPDIL       11156235        11193690     **15,44,58,68**
"PKG",3,22,1,"PAH",1,1,35,0)
XPDIL1       8519937         9389594     **15,17,39,41,44,66,68**
"PKG",3,22,1,"PAH",1,1,36,0)
XPDIPM       1817853         1853883     **21,28,68**
"PKG",3,22,1,"PAH",1,1,37,0)
XPDT        19357441        18817747     **2,10,28,41,44,51,58,66,68**
"PKG",3,22,1,"PAH",1,1,38,0)
XPDTA1       4760350         4948004     **44,68**
"PKG",3,22,1,"PAH",1,1,39,0)
=============================================================================
"PKG",3,22,1,"PAH",1,1,40,0)
                     **** INSTALL INSTRUCTIONS ****
"PKG",3,22,1,"PAH",1,1,41,0)
=============================================================================
"PKG",3,22,1,"PAH",1,1,42,0)

"PKG",3,22,1,"PAH",1,1,43,0)
 This patch can be installed with users on the system, but no other users
"PKG",3,22,1,"PAH",1,1,44,0)
 should be using KIDS while you install this patch.
"PKG",3,22,1,"PAH",1,1,45,0)
 Since this patch is an update to KIDS, no other patches should be installed
"PKG",3,22,1,"PAH",1,1,46,0)
 during the installation of this patch.
"PKG",3,22,1,"PAH",1,1,47,0)

"PKG",3,22,1,"PAH",1,1,48,0)
    ****** This patch must be QUEUED during the install process ******
"PKG",3,22,1,"PAH",1,1,49,0)

"PKG",3,22,1,"PAH",1,1,50,0)
===========================================================================
"PKG",3,22,1,"PAH",1,1,51,0)
INSTALLATION:
"PKG",3,22,1,"PAH",1,1,52,0)
  1.  These routines are usually mapped on systems that allow mapping,
"PKG",3,22,1,"PAH",1,1,53,0)
      so you will need to disable mapping for the effected routines.
"PKG",3,22,1,"PAH",1,1,54,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",3,22,1,"PAH",1,1,55,0)
      option will load the KIDS Distribution onto your system.
"PKG",3,22,1,"PAH",1,1,56,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",3,22,1,"PAH",1,1,57,0)
      system. You now need to use KIDS to install the patch in the Transport
"PKG",3,22,1,"PAH",1,1,58,0)
      global.
"PKG",3,22,1,"PAH",1,1,59,0)
  4.  Users can remain on the system. This patch can be queued and installed
"PKG",3,22,1,"PAH",1,1,60,0)
      at any time.  TaskMan can remain running.
"PKG",3,22,1,"PAH",1,1,61,0)
  5.  On the KIDS menu, under the 'Installation' menu, use the following
"PKG",3,22,1,"PAH",1,1,62,0)
      options:
"PKG",3,22,1,"PAH",1,1,63,0)
         2  Verify Checksums in Transport Global
"PKG",3,22,1,"PAH",1,1,64,0)
         3  Print Transport Global
"PKG",3,22,1,"PAH",1,1,65,0)
         4  Compare Transport Global to Current System
"PKG",3,22,1,"PAH",1,1,66,0)
         5  Backup a Transport Global
"PKG",3,22,1,"PAH",1,1,67,0)
         6  Install Package(s)
"PKG",3,22,1,"PAH",1,1,68,0)
              INSTALL NAME: XU*8.0*68
"PKG",3,22,1,"PAH",1,1,69,0)
                            =========
"PKG",3,22,1,"PAH",1,1,70,0)
  6.  At the device prompt, make sure you queue the install:
"PKG",3,22,1,"PAH",1,1,71,0)
              DEVICE: HOME// QUEUE TO PRINT ON
"PKG",3,22,1,"PAH",1,1,72,0)
                             =
"PKG",3,22,1,"PAH",1,1,73,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"PKG",3,22,1,"PAH",1,1,74,0)
===========================================================================
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
13
"RTN","XPDDP")
0^14^B28426622
"RTN","XPDDP",1,0)
XPDDP ;SFISC/RSD - Display a package ;03/10/98  13:44
"RTN","XPDDP",2,0)
 ;;8.0;KERNEL;**21,28,44,68**;Jul 05, 1995
"RTN","XPDDP",3,0)
EN1 ;print from Build file
"RTN","XPDDP",4,0)
 N DIC,D0,XPD,Y,Z
"RTN","XPDDP",5,0)
 S DIC="^XPD(9.6,",DIC(0)="AEMQZ" D ^DIC Q:Y'>0
"RTN","XPDDP",6,0)
 S D0=+Y,XPD("D0")="",Y="PNT^XPDDP(""XPD(9.6,D0)"")",Z="Build File Print"
"RTN","XPDDP",7,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",8,0)
 Q
"RTN","XPDDP",9,0)
EN2 ;print from Distribution
"RTN","XPDDP",10,0)
 N D0,DIC,POP,XPD,XPDA,XPDNM,Y,Z,%ZIS
"RTN","XPDDP",11,0)
 S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDP",12,0)
 D ^DIC Q:Y<0
"RTN","XPDDP",13,0)
 S XPD("D0")="",XPD("XPDA")="",XPDA=+Y,Y="PNT^XPDDP(""XTMP(""""XPDI"""",XPDA,""""BLD"""",D0)"")",Z="Transport Global Print",D0=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDDP",14,0)
 Q:'D0
"RTN","XPDDP",15,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",16,0)
 Q
"RTN","XPDDP",17,0)
 ;
"RTN","XPDDP",18,0)
PNT(XPDGR) ;print a package, XPDGR=global root
"RTN","XPDDP",19,0)
 ;XPDFL=0 - Build - ^XPD(9.7 global root, 1 - Install - ^XTMP global root
"RTN","XPDDP",20,0)
 ;2 - Packman ^TMP($J, global root
"RTN","XPDDP",21,0)
 N I,J,K,X,XPD,XPDDT,XPDI,XPD0,XPDFL,XPDPG,XPDUL,XPDTYPE,XPDTRACK
"RTN","XPDDP",22,0)
 Q:$G(XPDGR)=""  S XPDGR="^"_XPDGR
"RTN","XPDDP",23,0)
 Q:'$D(@XPDGR@(0))
"RTN","XPDDP",24,0)
 S XPD0=^(0),XPDPG=1,XPDFL=$S($E(XPDGR,1,5)="^TMP(":2,1:$E(XPDGR,1,5)="^XTMP"),$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM"),XPDTYPE=+$P(XPD0,U,3),XPDTRACK=$P(XPD0,U,5)
"RTN","XPDDP",25,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR W XPDUL,!
"RTN","XPDDP",26,0)
 W "TYPE: ",$$EXTERNAL^DILFD(9.6,2,"",XPDTYPE)
"RTN","XPDDP",27,0)
 W !,"TRACK NATIONALLY: ",$$EXTERNAL^DILFD(9.6,5,"",XPDTRACK)
"RTN","XPDDP",28,0)
 W !,"NATIONAL PACKAGE: ",$P($G(^DIC(9.4,+$P(XPD0,U,2),0),$P(XPD0,U,2)),U)
"RTN","XPDDP",29,0)
 W !,"DESCRIPTION:",!
"RTN","XPDDP",30,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@(1,XPDI)) Q:'XPDI  I $D(^(XPDI,0)) W ^(0),! Q:$$CHK(4)
"RTN","XPDDP",31,0)
 Q:$D(DIRUT)  G:XPDTYPE=1 MULT
"RTN","XPDDP",32,0)
 W !,"ENVIRONMENT CHECK : ",$G(@XPDGR@("PRE")),!
"RTN","XPDDP",33,0)
 W:'XPDTYPE " PRE-INIT ROUTINE : ",$G(@XPDGR@("INI")),!
"RTN","XPDDP",34,0)
 Q:$$CHK(4)  W "POST-INIT ROUTINE : ",$G(@XPDGR@("INIT")),!
"RTN","XPDDP",35,0)
 W:'XPDTYPE "PRE-TRANSPORT RTN : ",$G(@XPDGR@("PRET")),!
"RTN","XPDDP",36,0)
 G:XPDTYPE=2 GLOBAL
"RTN","XPDDP",37,0)
 I '$O(@XPDGR@(4,0)) Q:$$CHK(4)  G COMP
"RTN","XPDDP",38,0)
 S I=$$CHK(10,1) Q:I  I '$P(I,"^",2) W !! D HDR1 W XPDUL,!
"RTN","XPDDP",39,0)
PNT2 S XPDI=0 F  S XPDI=$O(@XPDGR@(4,XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,222)) Q:$$CHK(4,1)  D
"RTN","XPDDP",40,0)
 .;file number, file name, partial DD
"RTN","XPDDP",41,0)
 .W !,XPDI,?12,$S('XPDFL:$P($G(^DIC(XPDI,0),"**unknown**"),U),1:$G(^XTMP("XPDI",XPDA,"FIA",XPDI)))
"RTN","XPDDP",42,0)
 .W ?41,$$EXTERNAL^DILFD(9.64,222.1,"",$P(XPD,U)),?47,$$EXTERNAL^DILFD(9.64,222.2,"",$P(XPD,U,2)),?53,$$EXTERNAL^DILFD(9.64,222.7,"",$P(XPD,U,7))
"RTN","XPDDP",43,0)
 .W ?60,$E($$EXTERNAL^DILFD(9.64,222.8,"",$P(XPD,U,8)),1,4),?67,$$EXTERNAL^DILFD(9.64,222.5,"",$P(XPD,U,5)),?73,$$EXTERNAL^DILFD(9.64,222.9,"",$P(XPD,U,9)),!
"RTN","XPDDP",44,0)
 .;print partial DD information
"RTN","XPDDP",45,0)
 .I $P(XPD,U,3)="p" S J=0 D
"RTN","XPDDP",46,0)
 ..W "Partial DD:"
"RTN","XPDDP",47,0)
 ..F  S J=$O(@XPDGR@(4,"APDD",XPDI,J)) Q:'J  W ?12,"subDD: ",J D  Q:$$CHK(4,1)
"RTN","XPDDP",48,0)
 ...I '$O(@XPDGR@(4,"APDD",XPDI,J,0)) W ! Q
"RTN","XPDDP",49,0)
 ...S I=0 F  S I=$O(@XPDGR@(4,"APDD",XPDI,J,I)) Q:'I  W ?30,"fld: ",I,!
"RTN","XPDDP",50,0)
 .I $D(@XPDGR@(4,XPDI,223)) W ?2,"DD SCREEN  : ",^(223),!
"RTN","XPDDP",51,0)
 .I $D(@XPDGR@(4,XPDI,224)) W ?2,"DATA SCREEN: ",^(224),!
"RTN","XPDDP",52,0)
COMP Q:$D(DIRUT)  W ! Q:$$CHK(3)  S I=0,XPD=$P(^DD(9.68,.03,0),U,3)
"RTN","XPDDP",53,0)
 ;print build components
"RTN","XPDDP",54,0)
 F  S I=$O(@XPDGR@("KRN",I)),K=0,J="" Q:$D(DIRUT)!'I  F  S J=$O(@XPDGR@("KRN",I,"NM","B",J)) Q:J=""  S X=$O(^(J,0)) Q:$$CHK(4)  D:X
"RTN","XPDDP",55,0)
 .S X=$G(@XPDGR@("KRN",I,"NM",X,0)) Q:X=""
"RTN","XPDDP",56,0)
 .;K is flag to write type of component
"RTN","XPDDP",57,0)
 .I 'K W !,$S($D(^DIC(I,0)):$P(^(0),U),XPDFL:$G(^XTMP("XPDI",XPDA,"FIA",I),"UNKNOWN"),1:"UNKNOWN")_":",! S K=1
"RTN","XPDDP",58,0)
 .;write the entry name and write the action
"RTN","XPDDP",59,0)
 .W ?3,$P(X,U),?50,$P($P(XPD,";",$P(X,U,3)+1),":",2),!
"RTN","XPDDP",60,0)
 Q:XPDFL=2
"RTN","XPDDP",61,0)
 ;XPDFL=2 this is a Packman message, called from XMP2 - Summarize
"RTN","XPDDP",62,0)
 ;XPDFL=1 this is a Install, the call backs are already Build Components
"RTN","XPDDP",63,0)
 Q:$D(DIRUT)  Q:$$CHK(3)
"RTN","XPDDP",64,0)
 I $O(@XPDGR@("QUES",0)) W !,"INSTALL QUESTIONS: " S I=0 D
"RTN","XPDDP",65,0)
 .F  S I=$O(@XPDGR@("QUES",I)) Q:'I  S X=$P(^(I,0),U),J=$G(^(1)),K=$G(^("A")) Q:$$CHK(5)  D
"RTN","XPDDP",66,0)
 ..W !?5,"SUBSCIRPT: ",X,!,"DIR(0)=",J W:K]"" !,"DIR(""A"")=",K,!
"RTN","XPDDP",67,0)
 ..F J=1:1 Q:'$D(@XPDGR@("QUES",I,"A1",J,0))  W "DIR(""A"",",J,")=",^(0),!
"RTN","XPDDP",68,0)
 ..I $G(@XPDGR@("QUES",I,"B"))]"" W "DIR(""B"")=",^("B"),!
"RTN","XPDDP",69,0)
 ..I $G(@XPDGR@("QUES",I,"Q"))]"" W "DIR(""?"")=",^("Q"),!
"RTN","XPDDP",70,0)
 ..F J=1:1 Q:'$D(@XPDGR@("QUES",I,"Q1",J,0))  W "DIR(""?"",",J,")=",^(0),!
"RTN","XPDDP",71,0)
 ..I $G(@XPDGR@("QUES",I,"QQ"))]"" W "DIR(""??"")=",^("QQ"),!
"RTN","XPDDP",72,0)
 ..I $G(@XPDGR@("QUES",I,"M"))]"" W "M CODE: ",^("M"),!
"RTN","XPDDP",73,0)
 Q:$D(DIRUT)  Q:$$CHK(3)
"RTN","XPDDP",74,0)
 I $L($G(@XPDGR@("ABPKG"))) S XPD=^("ABPKG") D:$P(XPD,U)="y"
"RTN","XPDDP",75,0)
 .W !,"ALPHA/BETA TESTING:",$$EXTERNAL^DILFD(9.6,20,"",$P(XPD,U)),?40,"INSTALLATION MESSAGE: ",$$EXTERNAL^DILFD(9.6,21,"",$P(XPD,U,2))
"RTN","XPDDP",76,0)
 .W !,"ADDRESS: ",$P(XPD,U,3),!!,"INCLUDE NAMESPACE",?30,"EXCLUDE NAMESPACE" S I=0
"RTN","XPDDP",77,0)
 .F  S I=$O(@XPDGR@("ABNS",I)),J=0 Q:'I  W !?5,^(I,0) F  S J=$O(@XPDGR@("ABNS",I,1,J)) Q:'J  W ?35,^(J,0),! Q:$$CHK(3)
"RTN","XPDDP",78,0)
REQB Q:$D(DIRUT)  Q:$$CHK(4)
"RTN","XPDDP",79,0)
 I $O(@XPDGR@("REQB",0)) W !,"REQUIRED BUILDS:",?50,"ACTION:" D
"RTN","XPDDP",80,0)
 .S XPDI=0 F  S XPDI=$O(@XPDGR@("REQB",XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,0)) Q:$$CHK(4,1)  D
"RTN","XPDDP",81,0)
 ..W !?3,$P(XPD,U),?50,$$EXTERNAL^DILFD(9.611,1,"",$P(XPD,U,2))
"RTN","XPDDP",82,0)
 Q
"RTN","XPDDP",83,0)
GLOBAL ;globals listing
"RTN","XPDDP",84,0)
 S I=$$CHK(8,1) Q:I  I '$P(I,"^",2) W !!,"GLOBAL:",?20,"KILL GLOBAL BEFORE INSTALL:"
"RTN","XPDDP",85,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@("GLO",XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,0)) Q:$$CHK(4,1)  D
"RTN","XPDDP",86,0)
 .W !?3,$P(XPD,U),?33,$$EXTERNAL^DILFD(9.65,1,"",$P(XPD,U,2))
"RTN","XPDDP",87,0)
 W ! Q
"RTN","XPDDP",88,0)
 ;
"RTN","XPDDP",89,0)
MULT ;multiple-package
"RTN","XPDDP",90,0)
 S I=$$CHK(10,1) Q:I  I '$P(I,"^",2) W !,"PACKAGE:"
"RTN","XPDDP",91,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@(10,XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,0)) Q:$$CHK(4,1)  D
"RTN","XPDDP",92,0)
 .W !?3,$P(XPD,U)
"RTN","XPDDP",93,0)
 W ! Q
"RTN","XPDDP",94,0)
 ;
"RTN","XPDDP",95,0)
 ;return 0 if header was not written, else "0^1"
"RTN","XPDDP",96,0)
CHK(Y,XPD) ;Y=excess lines XPD=1 print file header, return 1 to exit
"RTN","XPDDP",97,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDP",98,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDP",99,0)
 .N DIR,I,J,K,X
"RTN","XPDDP",100,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDP",101,0)
 S XPD=$G(XPD),XPDPG=XPDPG+1
"RTN","XPDDP",102,0)
 W @IOF D HDR,HDR1:XPD
"RTN","XPDDP",103,0)
 W XPDUL,!
"RTN","XPDDP",104,0)
 Q "0^1"
"RTN","XPDDP",105,0)
 ;
"RTN","XPDDP",106,0)
XMP2(X,D0) ;called from ^XMP2
"RTN","XPDDP",107,0)
 N XPDA S XPDA=-1
"RTN","XPDDP",108,0)
 D PNT(X) Q
"RTN","XPDDP",109,0)
 ;
"RTN","XPDDP",110,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!
"RTN","XPDDP",111,0)
 Q
"RTN","XPDDP",112,0)
HDR1 W ?41,"UP",?47,"SEND",?53,"DATA",?73,"USER",!,?41,"DATE",?47,"SEC.",?53,"COMES",?60,"SITE",?67,"RSLV",?73,"OVER"
"RTN","XPDDP",113,0)
 W !,"FILE #",?12,"NAME",?41,"DD",?47,"CODE",?53,"W/FILE",?60,"DATA",?67,"PTS",?73,"RIDE",!
"RTN","XPDDP",114,0)
 Q
"RTN","XPDE")
0^1^B39218853
"RTN","XPDE",1,0)
XPDE ;SFISC/RSD - Package Edit ;03/10/98  10:29
"RTN","XPDE",2,0)
 ;;8.0;KERNEL;**2,15,21,44,51,68**;Jul 10, 1995
"RTN","XPDE",3,0)
 Q
"RTN","XPDE",4,0)
 ;these tags are called from options.
"RTN","XPDE",5,0)
EDIT ;edit Build file package
"RTN","XPDE",6,0)
 N DA,DIR,DDSFILE,DR,Y,Z
"RTN","XPDE",7,0)
 Q:'$$DIC("AEMQLZ","",1)  S DA=+Y
"RTN","XPDE",8,0)
 I $P(Y,U,3) D NEW(DA)
"RTN","XPDE",9,0)
 S Z=$P(^XPD(9.6,DA,0),U,3)+1,DR="["_$P("XPD EDIT BUILD^XPD EDIT MP^XPD EDIT GP",U,Z)_"]",DDSFILE="^XPD(9.6,"
"RTN","XPDE",10,0)
 D ^DDS Q:'$G(DA)
"RTN","XPDE",11,0)
 ;if full DD, kill multiple for partial DD
"RTN","XPDE",12,0)
 S Y=0 F  S Y=$O(^XPD(9.6,DA,4,Y)) Q:'Y  S Z=$G(^(Y,222)) D
"RTN","XPDE",13,0)
 .K:$P(Z,U,3)="f" ^XPD(9.6,DA,4,Y,2),^XPD(9.6,DA,4,"APDD",Y)
"RTN","XPDE",14,0)
 D QUIT(DA)
"RTN","XPDE",15,0)
 Q
"RTN","XPDE",16,0)
COPY ;copy a Build file package
"RTN","XPDE",17,0)
 N DA,DIK,DIR,FR,FR0,TO,TO0,X,Y,Z W !
"RTN","XPDE",18,0)
 Q:'$$DIC("QEAMZ","Copy FROM what Package: ")
"RTN","XPDE",19,0)
 S FR=+Y,FR0=Y(0),Z="QEAMZL",Z("S")="I Y'="_FR
"RTN","XPDE",20,0)
 I '$$DIC(.Z,"Copy TO what Package: ") D QUIT(FR) Q
"RTN","XPDE",21,0)
 S TO=Y,TO0=Y(0)
"RTN","XPDE",22,0)
 ;if this is not new, then it will be purged before copy.
"RTN","XPDE",23,0)
 I '$P(TO,U,3) W !,$P(TO0,U)," package will be PURGED before the copy."
"RTN","XPDE",24,0)
 W ! S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDE",25,0)
 S DIK="^XPD(9.6,",DA=+TO
"RTN","XPDE",26,0)
 I 'Y!$D(DIRUT) D  W ! Q
"RTN","XPDE",27,0)
 .;they didn't want to continue, kill if it was a new package.
"RTN","XPDE",28,0)
 .I $P(TO,U,3) D ^DIK W $P(TO0,U)," being deleted!"
"RTN","XPDE",29,0)
 .;unlock both packages
"RTN","XPDE",30,0)
 .D QUIT(FR),QUIT(TO)
"RTN","XPDE",31,0)
 D WAIT^DICD
"RTN","XPDE",32,0)
 ;if not new, kill old data
"RTN","XPDE",33,0)
 K:'$P(TO,U,3) ^XPD(9.6,DA)
"RTN","XPDE",34,0)
 M ^XPD(9.6,DA)=^XPD(9.6,FR) S $P(^(DA,0),U)=$P(TO0,U)
"RTN","XPDE",35,0)
 D NEW(+TO)
"RTN","XPDE",36,0)
 ;if new National Package name, then kill x-ref
"RTN","XPDE",37,0)
 I $P(TO0,U,2)]"",$P(FR0,U,2)'=$P(TO0,U,2) K ^XPD(9.6,"C",$E($P(TO0,U,2),1,30),DA) S DIK(1)=1 D EN1^DIK
"RTN","XPDE",38,0)
 D QUIT(FR),QUIT(TO)
"RTN","XPDE",39,0)
 W "...Done.",!
"RTN","XPDE",40,0)
 Q
"RTN","XPDE",41,0)
BUILD ;build package from a namespace
"RTN","XPDE",42,0)
 N DIR,DIRUT,XPDA,XPDI,XPDF,XPDN,XPDX,XPDXL,X,X1,Y,Y1 W !
"RTN","XPDE",43,0)
 Q:'$$DIC("QEAML")
"RTN","XPDE",44,0)
 S XPDA=+Y W !
"RTN","XPDE",45,0)
 I $P(^XPD(9.6,XPDA,0),U,3) W !,"The Build Type must be SINGLE PACKAGE!!",! Q
"RTN","XPDE",46,0)
 ;if not a new package
"RTN","XPDE",47,0)
 I '$P(Y,U,3) D  I $D(DIRUT) D QUIT(XPDA) Q
"RTN","XPDE",48,0)
 .S DIR(0)="Y",DIR("A")="Package already exists, Want to PURGE the existing data",DIR("B")="NO",DIR("?")="YES will delete all the KERNEL FILE information for this package in the BUILD file."
"RTN","XPDE",49,0)
 .D ^DIR K DIR Q:'Y
"RTN","XPDE",50,0)
 .S Y=0 F  S Y=$O(^XPD(9.6,XPDA,"KRN",Y)) Q:'Y  K ^(Y,"NM")
"RTN","XPDE",51,0)
 E  D NEW(XPDA)
"RTN","XPDE",52,0)
 ;XPDN(0=excluded names or 1=include names, namespace)=""
"RTN","XPDE",53,0)
 W ! S DIR(0)="FO^1:15^K:X'?.1""-""1U.15UNP X",DIR("A")="Namespace",DIR("?")="Enter 1 to 15 characters, preceed with ""-"" to exclude namespace"
"RTN","XPDE",54,0)
 F  D ^DIR Q:$D(DIRUT)  S X=$E(Y,$L(Y))="*",%=$E(Y)="-",XPDN('%,$E(Y,%+1,$L(Y)-X))=""
"RTN","XPDE",55,0)
 I '$D(XPDN)!$D(DTOUT)!$D(DUOUT) D QUIT(XPDA) Q
"RTN","XPDE",56,0)
 W !!,"NAMESPACE  INCLUDE",?35,"EXCLUDE",!,?11,"-------",?35,"-------"
"RTN","XPDE",57,0)
 S (X,Y)="",(X1,Y1)=1
"RTN","XPDE",58,0)
 F  D  W !?11,X,?35,Y Q:'X1&'Y1
"RTN","XPDE",59,0)
 .S:X1 X=$O(XPDN(1,X)),X1=X]"" S:Y1 Y=$O(XPDN(0,Y)),Y1=Y]""
"RTN","XPDE",60,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDE",61,0)
 I 'Y!$D(DIRUT) D QUIT(XPDA) Q
"RTN","XPDE",62,0)
 D WAIT^DICD S XPDX="",XPDI("IEN")=0
"RTN","XPDE",63,0)
 F  S XPDX=$O(XPDN(1,XPDX)),XPDXL=$L(XPDX),XPDF=0 Q:XPDX=""  D
"RTN","XPDE",64,0)
 .F  S XPDF=$O(^XPD(9.6,XPDA,"KRN",XPDF)) Q:'XPDF  D
"RTN","XPDE",65,0)
 ..N XPD,XPDIC,XPDJ W "."
"RTN","XPDE",66,0)
 ..;XPDIC is used in $$SCR1^XPDET
"RTN","XPDE",67,0)
 ..S XPDIC="^XPD(9.6,"_XPDA_",""KRN"","_XPDF_",""NM"","
"RTN","XPDE",68,0)
 ..D LIST^DIC(XPDF,"","","","*",.XPDI,XPDX,"","I $E(^(0),1,XPDXL)=XPDX,$$SCR1^XPDET(Y)")
"RTN","XPDE",69,0)
 ..F XPDJ=1:1 S X=$G(^TMP("DILIST",$J,1,XPDJ)) Q:X=""  D
"RTN","XPDE",70,0)
 ...S:XPDF<.404 %=^TMP("DILIST",$J,2,XPDJ)_",",X=$$TX^XPDET(X,$$GET1^DIQ(XPDF,%,$$TF^XPDET(XPDF),"I"))
"RTN","XPDE",71,0)
 ...S Y="+"_XPDJ_","_XPDF_","_XPDA_",",XPD(9.68,Y,.01)=X,XPD(9.68,Y,.03)=0
"RTN","XPDE",72,0)
 ..Q:'$D(XPD)  D UPDATE^DIE("","XPD")
"RTN","XPDE",73,0)
 D QUIT(XPDA)
"RTN","XPDE",74,0)
 W "...Done.",!
"RTN","XPDE",75,0)
 Q
"RTN","XPDE",76,0)
VER ;verify a Build file package
"RTN","XPDE",77,0)
 N XPDA,Y
"RTN","XPDE",78,0)
 Q:'$$DIC("AEMQZ")  S XPDA=+Y
"RTN","XPDE",79,0)
 D EN^XPDV
"RTN","XPDE",80,0)
 Q
"RTN","XPDE",81,0)
DIC(DIC,A,XPDL) ;DIC lookup to Build file, 9.6
"RTN","XPDE",82,0)
 N DLAYGO
"RTN","XPDE",83,0)
 S DIC(0)=$G(DIC),DIC="^XPD(9.6," S:$G(A)]"" DIC("A")=A
"RTN","XPDE",84,0)
 S:DIC(0)["L" DLAYGO=9.6,DIC("DR")="1;2//SINGLE PACKAGE;5//YES"
"RTN","XPDE",85,0)
 D ^DIC Q:Y<0 0
"RTN","XPDE",86,0)
 I '$G(XPDL) L +^XPD(9.6,+Y):0 E  W !,"Being accessed by another user" Q 0
"RTN","XPDE",87,0)
 Q +Y
"RTN","XPDE",88,0)
 ;
"RTN","XPDE",89,0)
NEW(DA) ;create Kernel Files multiple for package DA
"RTN","XPDE",90,0)
 N I,J,X,XPDNEWF,XPD,XPDI
"RTN","XPDE",91,0)
 S:'$D(^XPD(9.6,DA,"KRN",0)) ^XPD(9.6,DA,"KRN",0)=U_$P(^DD(9.6,7,0),U,2)
"RTN","XPDE",92,0)
 S I=0
"RTN","XPDE",93,0)
 F J=1:1 S X=+$P($T(FILES+J),";;",2) Q:'X  S:$D(^DD(X))&'$D(^XPD(9.6,DA,"KRN",X)) I=I+1,(XPDI(I),XPD(9.67,"+"_I_","_DA_",",.01))=X
"RTN","XPDE",94,0)
 Q:'$D(XPD)
"RTN","XPDE",95,0)
 ;XPDNEWF is a flag in INPUT transform of BUILD COMPONENT multiple
"RTN","XPDE",96,0)
 S XPDNEWF=1
"RTN","XPDE",97,0)
 D UPDATE^DIE("","XPD","XPDI")
"RTN","XPDE",98,0)
 Q
"RTN","XPDE",99,0)
QUIT(Y) ;unlock Y
"RTN","XPDE",100,0)
 L -^XPD(9.6,Y)
"RTN","XPDE",101,0)
 Q
"RTN","XPDE",102,0)
 ;
"RTN","XPDE",103,0)
 ;;file;install order;x-ref;file build;entry build;file pre;entry pre;file post;entry post;delete
"RTN","XPDE",104,0)
FILES ;kernel files for field 7 in file 9.6
"RTN","XPDE",105,0)
 ;;9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"RTN","XPDE",106,0)
 ;;9.2;1;;;HELP^XPDTA1;HLPF1^XPDIA1;HLPE1^XPDIA1;HLPF2^XPDIA1;;HLPDEL^XPDIA1
"RTN","XPDE",107,0)
 ;;3.6;2;1;;BUL^XPDTA1;;BULE1^XPDIA1;;;BULDEL^XPDIA1
"RTN","XPDE",108,0)
 ;;19.1;3;1;;KEY^XPDTA1;;;;;KEYDEL^XPDIA1
"RTN","XPDE",109,0)
 ;;.5;4;;;EDEOUT^DIFROMSO(.5,DA,"",XPDA);FPRE^DIFROMSI(.5,"",XPDA);EPRE^DIFROMSI(.5,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.5,DA,"",XPDA)
"RTN","XPDE",110,0)
 ;;.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"RTN","XPDE",111,0)
 ;;.401;6;;;EDEOUT^DIFROMSO(.401,DA,"",XPDA);FPRE^DIFROMSI(.401,"",XPDA);EPRE^DIFROMSI(.401,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.401,DA,"",XPDA);DEL^DIFROMSK(.401,"",%)
"RTN","XPDE",112,0)
 ;;.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"RTN","XPDE",113,0)
 ;;.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"RTN","XPDE",114,0)
 ;;.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"RTN","XPDE",115,0)
 ;;3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1
"RTN","XPDE",116,0)
 ;;869.2;12;1;;HLLLP^XPDTA1;;HLLLPE^XPDIA1
"RTN","XPDE",117,0)
 ;;870;13;1;;HLLL^XPDTA1;;HLLLE^XPDIA1
"RTN","XPDE",118,0)
 ;;771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1
"RTN","XPDE",119,0)
 ;;101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"RTN","XPDE",120,0)
 ;;8994;16;1;;;;;;;RPCDEL^XPDIA1
"RTN","XPDE",121,0)
 ;;409.61;17;1;;;;;;;LMDEL^XPDIA1
"RTN","XPDE",122,0)
 ;;19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"RTN","XPDI")
0^9^B36909767
"RTN","XPDI",1,0)
XPDI ;SFISC/RSD - Install Process ;12/10/97  10:20
"RTN","XPDI",2,0)
 ;;8.0;KERNEL;**10,21,39,41,44,58,68**;Jul 10, 1995
"RTN","XPDI",3,0)
EN ;install
"RTN","XPDI",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDIT,XPDIABT,XPDNM,XPDNOQUE,XPDPKG,XPDREQAB,XPDST,XPDSET,XPDSET1,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDI",5,0)
 S %="I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK^XPDI1(%)
"RTN","XPDI",6,0)
 Q:'XPDST!$D(XPDQUIT)
"RTN","XPDI",7,0)
 S XPDIT=0,(XPDSET,XPDSET1)=$P(^XPD(9.7,XPDST,0),U) K ^TMP($J)
"RTN","XPDI",8,0)
 F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  D  Q:'$D(XPDT)!$D(XPDQUIT)
"RTN","XPDI",9,0)
 .S XPDA=+XPDT(XPDIT),XPDNM=$P(XPDT(XPDIT),U,2),XPDPKG=+$P($G(^XPD(9.7,+XPDT(XPDIT),0)),U,2),%=$P(^(0),U,5)
"RTN","XPDI",10,0)
 .W !?3,XPDNM
"RTN","XPDI",11,0)
 .;check that Install file was created correctly
"RTN","XPDI",12,0)
 .I '$D(^XPD(9.7,XPDA,"INI"))!'$D(^("INIT")) W !,"**INSTALL FILE IS CORRUPTED**",!,*7 S XPDQUIT=1 Q
"RTN","XPDI",13,0)
 .;run enviroment check routine
"RTN","XPDI",14,0)
 .;XPDREQAB req. build missing, =2 global killed
"RTN","XPDI",15,0)
 .I $$ENV^XPDIL1(1) S:$G(XPDREQAB)=2 XPDQUIT=1 Q
"RTN","XPDI",16,0)
 .;save variables that are setup in environ. chck. routine
"RTN","XPDI",17,0)
 .I $D(XPDNOQUE)!$D(XPDDIQ) D
"RTN","XPDI",18,0)
 ..S:$D(XPDNOQUE) ^XTMP("XPDI",XPDA,"ENVVAR","XPDNOQUE")=XPDNOQUE
"RTN","XPDI",19,0)
 ..I $D(XPDDIQ) M ^XTMP("XPDI",XPDA,"ENVVAR","XPDDIQ")=XPDDIQ
"RTN","XPDI",20,0)
 .D QUES^XPDI1(XPDA) Q:'$D(XPDT(+XPDIT))!$D(XPDQUIT)
"RTN","XPDI",21,0)
 .;XPDIJ=XPDA if XPDIJ routine is part of Build
"RTN","XPDI",22,0)
 .S:$D(^XTMP("XPDI",XPDA,"RTN","XPDIJ")) XPDIJ=XPDA
"RTN","XPDI",23,0)
 .D XQSET^XPDI1(XPDA)
"RTN","XPDI",24,0)
 ;NONE = no Build to install
"RTN","XPDI",25,0)
 G NONE:'$O(XPDT(""))!$D(XPDQUIT)!($G(XPDREQAB))
"RTN","XPDI",26,0)
 ;check that we have all Builds to install
"RTN","XPDI",27,0)
 S XPDA=XPDST,XPDNM=XPDSET,Y=0
"RTN","XPDI",28,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=+$O(^(Y,0)) I '$D(XPDT("DA",%)) G NONE
"RTN","XPDI",29,0)
 W !
"RTN","XPDI",30,0)
 ;disable options question
"RTN","XPDI",31,0)
 D DIR^XPDIQ("XPZ") I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",32,0)
 ;XPDSET=set name,(also build name), of options that will be disabled
"RTN","XPDI",33,0)
 ;XPDSET1=setname or null if they don't want to disable
"RTN","XPDI",34,0)
 D  I XPDSET1="^" D ABRTALL(2) Q
"RTN","XPDI",35,0)
 .;if they say no, set XPDET1=""
"RTN","XPDI",36,0)
 .S:'$G(XPDQUES("XPZ1")) XPDSET1="",Y=0
"RTN","XPDI",37,0)
 .S ^XTMP("XQOO",XPDSET,0)=XPDSET_" is being installed by KIDS^"_DT_U_DUZ
"RTN","XPDI",38,0)
 .I XPDSET1]"" D  Q:XPDSET1="^"!(XPDSET1="")
"RTN","XPDI",39,0)
 ..;merge the options/protocols that were put in ^TMP($J,"XQOO",build name)
"RTN","XPDI",40,0)
 ..M ^XTMP("XQOO",XPDSET)=^TMP($J,"XQOO",XPDSET)
"RTN","XPDI",41,0)
 ..D INIT^XQOO(.XPDSET1) Q:"^"[XPDSET1
"RTN","XPDI",42,0)
 ..N DIR S DIR(0)="N^0:60:0",DIR("B")=0
"RTN","XPDI",43,0)
 ..S DIR("A")="Delay Install (Minutes)",DIR("?")="Enter the number of minutes to delay the installing of Routines after the Disable of Options"
"RTN","XPDI",44,0)
 ..W ! D ^DIR I $D(DIRUT) S XPDSET1="^"
"RTN","XPDI",45,0)
 .;Y is set in the call to DIR in previous .DO
"RTN","XPDI",46,0)
 .;save setname into first Build and the Delay in minutes, Y
"RTN","XPDI",47,0)
 .K XPD S XPD(9.7,XPDST_",",7)=(XPDSET1]"")_XPDSET,XPD(9.7,XPDST_",",8)=Y
"RTN","XPDI",48,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",49,0)
 ;check if they want to update other CPUs
"RTN","XPDI",50,0)
 I $G(XPDQUES("XPZ2")) D  I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",51,0)
 .N DA,DIE,DIR,DR,I,XPD,X,Y,Z
"RTN","XPDI",52,0)
 .;if they haven't already added Volume Sets, populate the mulitple
"RTN","XPDI",53,0)
 .I '$O(^XPD(9.7,XPDA,"VOL",0)) D  I $D(XPD) D UPDATE^DIE("","XPD")
"RTN","XPDI",54,0)
 ..X ^%ZOSF("UCI") S Y=$P(Y,",",2),(I,Z)=0
"RTN","XPDI",55,0)
 ..F  S I=$O(^%ZIS(14.5,I)) Q:'I  S X=$G(^(I,0)) S:$P(X,U)]""&$P(X,U,11)&($P(X,U)'=Y) Z=Z+1,XPD(9.703,"+"_Z_","_XPDA_",",.01)=$P(X,U)
"RTN","XPDI",56,0)
 .W !!,"I will Update the following VOLUME SETS:",!
"RTN","XPDI",57,0)
 .S I=0 F  S I=$O(^XPD(9.7,XPDA,"VOL",I)) Q:'I  W ?3,$P(^(I,0),U),!
"RTN","XPDI",58,0)
 .W ! S DIR(0)="Y",DIR("A")="Want to edit this list",DIR("B")="NO"
"RTN","XPDI",59,0)
 .D ^DIR Q:$D(DIRUT)  D:Y
"RTN","XPDI",60,0)
 ..S DA=XPDA,DIE="^XPD(9.7,",DR=30,DR(2,9.703)=".01"
"RTN","XPDI",61,0)
 ..D ^DIE
"RTN","XPDI",62,0)
 .I '$O(^XPD(9.7,XPDA,"VOL",0)) W !!,"No VOLUME SETS selected!!" Q
"RTN","XPDI",63,0)
 .Q:$$TM^%ZTLOAD  ;quit if Taskman is running
"RTN","XPDI",64,0)
 .W !!,"TASKMAN is not running. If you install now, you must run the routine XPDCPU",!,"in the production UCI for each of the VOLUME SETS you have listed once"
"RTN","XPDI",65,0)
 .W !,"the installation starts!!",!,"If you Queue the install, the VOLUME SETS will be updated automatically.",*7,*7,!!
"RTN","XPDI",66,0)
DEV S POP=0 S:'$D(^DD(3.5,0)) POP=1
"RTN","XPDI",67,0)
 ;check if home device is defined
"RTN","XPDI",68,0)
 I 'POP S IOP="",%ZIS=0 D ^%ZIS
"RTN","XPDI",69,0)
 ;Kernel Virgin Install
"RTN","XPDI",70,0)
 I POP S XPDA=XPDST D:$G(XPDIJ) XPDIJ^XPDI1 G EN^XPDIJ
"RTN","XPDI",71,0)
 ;set XPDA=starting Build, ask for device for messages
"RTN","XPDI",72,0)
 ;XPDNOQUE is defined means don't let them queue output
"RTN","XPDI",73,0)
 W !!,"Enter the Device you want to print the Install messages."
"RTN","XPDI",74,0)
 W:'$D(XPDNOQUE) !,"You can queue the install by enter a 'Q' at the device prompt."
"RTN","XPDI",75,0)
 W !,"Enter a '^' to abort the install.",!
"RTN","XPDI",76,0)
 S XPDA=XPDST,%ZIS=$P("Q",U,'$D(XPDNOQUE))
"RTN","XPDI",77,0)
 D ^%ZIS G:POP ASKABRT
"RTN","XPDI",78,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDI",79,0)
 S XPDD=$$FMADD^XLFDT(DT,7),^XTMP("XPDI",0)=XPDD_U_DT
"RTN","XPDI",80,0)
 I $D(IO("Q")) D  G ASKABRT:$D(ZTSK)[0 D XPDIJ^XPDI1:$G(XPDIJ),QUIT^XPDI1(XPDST) Q
"RTN","XPDI",81,0)
 .N %DT
"RTN","XPDI",82,0)
 .S %DT="AEFRSX",%DT("A")="Requested Start Time: ",(%DT("B"),%DT(0))="NOW"
"RTN","XPDI",83,0)
 .;queue time must be in the future, but not more than 7 days
"RTN","XPDI",84,0)
 .F  D ^%DT Q:$D(DTOUT)  D:$$FMDIFF^XLFDT(XPDD,Y)<0  Q:Y>0
"RTN","XPDI",85,0)
 ..W !!,"Start Date shouldn't be more than a week in the future!",*7
"RTN","XPDI",86,0)
 ..S Y=-1
"RTN","XPDI",87,0)
 .Q:$D(DTOUT)
"RTN","XPDI",88,0)
 .S ZTDTH=Y,ZTRTN="EN^XPDIJ",ZTDESC="KIDS install",ZTSAVE("XPDA")=""
"RTN","XPDI",89,0)
 .D ^%ZTLOAD,HOME^%ZIS K IO("Q")
"RTN","XPDI",90,0)
 .Q:$D(ZTSK)[0
"RTN","XPDI",91,0)
 .W !,"Install Queued!",!!
"RTN","XPDI",92,0)
 .;save task into first Build
"RTN","XPDI",93,0)
 .K XPD S XPD(9.7,XPDST_",",5)=ZTSK,XPDIT=0
"RTN","XPDI",94,0)
 .F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  S XPD(9.7,+XPDT(XPDIT)_",",.02)=1 D FILE^DIE("","XPD") K XPD
"RTN","XPDI",95,0)
 ;run install
"RTN","XPDI",96,0)
 U IO D XPDIJ^XPDI1:$G(XPDIJ),QUIT^XPDI1(XPDST) G EN^XPDIJ
"RTN","XPDI",97,0)
 Q
"RTN","XPDI",98,0)
 ;
"RTN","XPDI",99,0)
 ;XPDA=ien to del, XPDK=1 kill global, XPDALL=1 deleting all
"RTN","XPDI",100,0)
 ;XPDST=starting package.
"RTN","XPDI",101,0)
ABORT(XPDA,XPDK,XPDALL) ;abort install of Build XPDA
"RTN","XPDI",102,0)
 N %,DA,DIK,XPDJ,XPDNM,Y
"RTN","XPDI",103,0)
 Q:'$D(^XPD(9.7,XPDA,0))  S XPDNM=$P(^(0),U)
"RTN","XPDI",104,0)
 W !,XPDNM," Build will not be installed",$S(XPDK=1:", Transport Global deleted!",1:""),!
"RTN","XPDI",105,0)
 S DIK="^XPD(9.7,",XPDJ=XPDT("NM",XPDNM),DA=XPDA
"RTN","XPDI",106,0)
 ;kill XPDT array, but don't kill global if XPDK=2
"RTN","XPDI",107,0)
 K XPDT("NM",XPDNM),XPDT("DA",XPDA),XPDT(XPDJ),XPDT("GP") Q:XPDK=2
"RTN","XPDI",108,0)
 K ^XTMP("XPDI",XPDA)
"RTN","XPDI",109,0)
 ;if we are not deleting all packages and we are deleting the starting package
"RTN","XPDI",110,0)
 ;set the next package to the starting package. It must always be 1.
"RTN","XPDI",111,0)
 I '$G(XPDALL),XPDA=XPDST S Y=$O(XPDT(0)) D:Y
"RTN","XPDI",112,0)
 .;unlock starting install
"RTN","XPDI",113,0)
 .L -^XPD(9.7,XPDST)
"RTN","XPDI",114,0)
 .S XPDST=+XPDT(Y),XPDT(1)=XPDT(Y),XPDT("DA",XPDST)=1,XPDT("NM",$P(XPDT(Y),U,2))=1,XPDIT=0
"RTN","XPDI",115,0)
 .K XPDT(Y) N XPD
"RTN","XPDI",116,0)
 .S %="XPD(9.7,"""_XPDST_","")",@%@(3)=XPDST,@%@(4)=1
"RTN","XPDI",117,0)
 .;loop thru the rest of the packages and reset the starting package field
"RTN","XPDI",118,0)
 .F  S Y=$O(XPDT(Y)) Q:'Y  D
"RTN","XPDI",119,0)
 ..S XPD(9.7,+XPDT(Y)_",",3)=XPDST
"RTN","XPDI",120,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",121,0)
 D ^DIK
"RTN","XPDI",122,0)
 Q
"RTN","XPDI",123,0)
ASKABRT ;ask if want to unload distribution
"RTN","XPDI",124,0)
 N DIR,DIRUT,X,Y
"RTN","XPDI",125,0)
 S XPDQUIT=1,DIR(0)="Y",DIR("A")="Install ABORTED, Want to remove the Transport Globals",DIR("B")="YES"
"RTN","XPDI",126,0)
 W ! D ^DIR I Y D ABRTALL(1) Q
"RTN","XPDI",127,0)
 L -^XPD(9.7,XPDST)
"RTN","XPDI",128,0)
 Q
"RTN","XPDI",129,0)
ABRTALL(XPDK) ;abort all Builds
"RTN","XPDI",130,0)
 N XPDA
"RTN","XPDI",131,0)
 S XPDT=0
"RTN","XPDI",132,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPDA=+XPDT(XPDT) D ABORT(XPDA,XPDK,1)
"RTN","XPDI",133,0)
 ;unlock starting install
"RTN","XPDI",134,0)
 L -^XPD(9.7,XPDST)
"RTN","XPDI",135,0)
 Q
"RTN","XPDI",136,0)
NONE W !!,"**NOTHING INSTALLED**",!
"RTN","XPDI",137,0)
 Q
"RTN","XPDIA")
0^8^B53503659
"RTN","XPDIA",1,0)
XPDIA ;SFISC/RSD - Install Pre/Post Actions for Kernel Files ;12/02/97  13:39
"RTN","XPDIA",2,0)
 ;;8.0;KERNEL;**10,15,21,28,44,58,68**;Jul 10, 1995
"RTN","XPDIA",3,0)
 Q
"RTN","XPDIA",4,0)
OPTF1 ;options file pre
"RTN","XPDIA",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",6,0)
 Q
"RTN","XPDIA",7,0)
OPTE1 ;options entry pre
"RTN","XPDIA",8,0)
 N %,I
"RTN","XPDIA",9,0)
 ;XPDFL= 0-send,1-delete,2-link,3-merge,4-attach,5-disable
"RTN","XPDIA",10,0)
 ;attach & disable never get here
"RTN","XPDIA",11,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",12,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",13,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",19,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",19,OLDA,10)
"RTN","XPDIA",14,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",15,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",16,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",17,0)
 I $G(XPDNEW) D:XPDSET  Q
"RTN","XPDIA",18,0)
 .;quit if option already has out of order msg.
"RTN","XPDIA",19,0)
 .Q:$P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),U,3)]""
"RTN","XPDIA",20,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",21,0)
 .D ADD^XQOO1($P(XPDSET,U,2),19,DA)
"RTN","XPDIA",22,0)
 S I=^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),%=^DIC(19,DA,0)
"RTN","XPDIA",23,0)
 ;$P(%,U,3)=out of order message, keep sending ooo msg
"RTN","XPDIA",24,0)
 S:$P(I,U,3)="" $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",25,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",26,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",27,0)
 ;if there is no reverse key, save the old key and flag
"RTN","XPDIA",28,0)
 I $P($G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3)),U)="",$L($P($G(^DIC(19,DA,3)),U)) S $P(I,U,16)=$P(%,U,16),$P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3),U)=$P(^(3),U)
"RTN","XPDIA",29,0)
 S ^XTMP("XPDI",XPDA,"KRN",19,OLDA,0)=I
"RTN","XPDIA",30,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",31,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",19,OLDA,1,0)) ^DIC(19,DA,1)
"RTN","XPDIA",32,0)
 ;kill old RCPs (RPC)
"RTN","XPDIA",33,0)
 K ^DIC(19,DA,"RPC")
"RTN","XPDIA",34,0)
 ;if Menu Text, (U;1) is different, kill C x-ref
"RTN","XPDIA",35,0)
 S I=$G(^DIC(19,DA,"U")) I I]"",I'=$G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,"U")) K ^DIC(19,"C",I)
"RTN","XPDIA",36,0)
 S I=0
"RTN","XPDIA",37,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",38,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",39,0)
 ;the file post action as a relink
"RTN","XPDIA",40,0)
 Q:XPDFL=3
"RTN","XPDIA",41,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",42,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",43,0)
 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^DIC(19,"AD",%,DA,I)
"RTN","XPDIA",44,0)
 ;kill Menus (10)
"RTN","XPDIA",45,0)
 K ^DIC(19,DA,10)
"RTN","XPDIA",46,0)
 Q
"RTN","XPDIA",47,0)
OPTF2 ;options file post
"RTN","XPDIA",48,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",49,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",50,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",51,0)
 .;if use as link then goto OPTFL, just update menus
"RTN","XPDIA",52,0)
 .G:ACT=2 OPTFL
"RTN","XPDIA",53,0)
 .;repoint Bulletin (220;1) and Mail Group (220;3)
"RTN","XPDIA",54,0)
 .S Y0=$G(^DIC(19,DA,220)) I Y0]"" S $P(Y0,U)=$$LK("^XMB(3.6)",$P(Y0,U)),$P(Y0,U,3)=$$LK("^XMB(3.8)",$P(Y0,U,3)),^DIC(19,DA,220)=Y0
"RTN","XPDIA",55,0)
 .;repoint RPC (RPC;1)
"RTN","XPDIA",56,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,"RPC",I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",57,0)
 ..S Y=$$LK("^XWB(8994)",Y0)
"RTN","XPDIA",58,0)
 ..I 'Y K ^DIC(19,DA,"RPC",I) D BMES^XPDUTL(" RPC "_Y0_" in Option "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",59,0)
 ..S $P(^DIC(19,DA,"RPC",I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",60,0)
 .S:X $P(^DIC(19,DA,"RPC",0),U,3,4)=X
"RTN","XPDIA",61,0)
 .;repoint Package (0;12) and Help Frame (0;7)
"RTN","XPDIA",62,0)
 .S Y0=^DIC(19,DA,0),$P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),$P(Y0,U,7)=$$LK("^DIC(9.2)",$P(Y0,U,7)),^DIC(19,DA,0)=Y0
"RTN","XPDIA",63,0)
OPTFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",64,0)
 .;merged, they could also be linked menu, but treat like merge
"RTN","XPDIA",65,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",66,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",67,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",68,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",69,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",70,0)
 ...S Y=$$LK("^DIC(19)",Y0)
"RTN","XPDIA",71,0)
 ...K ^DIC(19,DA,10,I,U)
"RTN","XPDIA",72,0)
 ...I 'Y K ^DIC(19,DA,10,I) D BMES^XPDUTL(" Option "_Y0_" in Menu "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",73,0)
 ...S $P(^DIC(19,DA,10,I,0),U)=Y
"RTN","XPDIA",74,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",75,0)
 .S:X $P(^DIC(19,DA,10,0),U,3,4)=X
"RTN","XPDIA",76,0)
 .;re-index this option
"RTN","XPDIA",77,0)
 .D IX1^DIK
"RTN","XPDIA",78,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",79,0)
 Q
"RTN","XPDIA",80,0)
OPTDEL ;option delete
"RTN","XPDIA",81,0)
 D DEL("^DIC(19,",DUZ)
"RTN","XPDIA",82,0)
 D OPT^XPDIA2
"RTN","XPDIA",83,0)
 Q
"RTN","XPDIA",84,0)
PROF1 ;protocols file pre
"RTN","XPDIA",85,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",86,0)
 Q
"RTN","XPDIA",87,0)
PROE1 ;protocols entry pre
"RTN","XPDIA",88,0)
 N %,I
"RTN","XPDIA",89,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",90,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",91,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",101,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",101,OLDA,10)
"RTN","XPDIA",92,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",93,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",94,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",95,0)
 I $G(XPDNEW) D:XPDSET  Q
"RTN","XPDIA",96,0)
 .;quit if option already has out of order msg.
"RTN","XPDIA",97,0)
 .Q:$P(^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),U,3)]""
"RTN","XPDIA",98,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",99,0)
 .D ADD^XQOO1($P(XPDSET,U,2),101,DA)
"RTN","XPDIA",100,0)
 S I=^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),%=^ORD(101,DA,0)
"RTN","XPDIA",101,0)
 ;$P(%,U,3)=disable message,
"RTN","XPDIA",102,0)
 S:$P(I,U,3)]"" $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",103,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",104,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",105,0)
 S ^XTMP("XPDI",XPDA,"KRN",101,OLDA,0)=I
"RTN","XPDIA",106,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",107,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",101,OLDA,1,0)) ^ORD(101,DA,1)
"RTN","XPDIA",108,0)
 ;kill old ACCESS multiple
"RTN","XPDIA",109,0)
 K ^ORD(101,DA,3) S I=0
"RTN","XPDIA",110,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",111,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",112,0)
 ;the file post action as a relink
"RTN","XPDIA",113,0)
 Q:XPDFL=3
"RTN","XPDIA",114,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",115,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",116,0)
 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^ORD(101,"AD",%,DA,I)
"RTN","XPDIA",117,0)
 K ^ORD(101,DA,10)
"RTN","XPDIA",118,0)
 Q
"RTN","XPDIA",119,0)
PROF2 ;protocols file post
"RTN","XPDIA",120,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",121,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",122,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",123,0)
 .;if use as link then goto PROFL, just update menus
"RTN","XPDIA",124,0)
 .G:ACT=2 PROFL
"RTN","XPDIA",125,0)
 .;repoint Package (0;12)
"RTN","XPDIA",126,0)
 .S Y0=^ORD(101,DA,0) S:$L($P(Y0,U,12)) $P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),^ORD(101,DA,0)=Y0
"RTN","XPDIA",127,0)
 .;repoint File Link (5;1), its a variable pointer
"RTN","XPDIA",128,0)
 .S Y0=$P($G(^ORD(101,DA,5)),U),Y=$P(Y0,";",2),Y0=$P(Y0,";")
"RTN","XPDIA",129,0)
 .I Y0,$L(Y) S Y0=$O(@("^"_Y_"""B"","""_Y0_""",0)")),$P(^ORD(101,DA,5),U)=$S(Y0:Y0_";"_Y,1:"")
"RTN","XPDIA",130,0)
 .;repoint HL7 fields, node 770
"RTN","XPDIA",131,0)
 .S Y0=$G(^ORD(101,DA,770)) I $L(Y0) D  S ^ORD(101,DA,770)=Y0
"RTN","XPDIA",132,0)
 ..S $P(Y0,U)=$$LK("^HL(771)",$P(Y0,U)),$P(Y0,U,2)=$$LK("^HL(771)",$P(Y0,U,2))
"RTN","XPDIA",133,0)
 ..S $P(Y0,U,3)=$$LK("^HL(771.2)",$P(Y0,U,3)),$P(Y0,U,11)=$$LK("^HL(771.2)",$P(Y0,U,11))
"RTN","XPDIA",134,0)
 ..S $P(Y0,U,4)=$$LK("^HL(779.001)",$P(Y0,U,4)),$P(Y0,U,7)=$$LK("^HLCS(870)",$P(Y0,U,7))
"RTN","XPDIA",135,0)
 ..S $P(Y0,U,8)=$$LK("^HL(779.003)",$P(Y0,U,8)),$P(Y0,U,9)=$$LK("^HL(779.003)",$P(Y0,U,9))
"RTN","XPDIA",136,0)
 ..S $P(Y0,U,10)=$$LK("^HL(771.5)",$P(Y0,U,10))
"RTN","XPDIA",137,0)
 .;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDIA",138,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,3,I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",139,0)
 ..;Y0=.01 of Access(Security Key)
"RTN","XPDIA",140,0)
 ..S Y=$$LK("^DIC(19.1)",Y0)
"RTN","XPDIA",141,0)
 ..I 'Y K ^ORD(101,DA,3,I) D BMES^XPDUTL(" Key "_Y0_" in Protocol "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",142,0)
 ..S $P(^ORD(101,DA,3,I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",143,0)
 .S:X $P(^ORD(101,DA,3,0),U,3,4)=X
"RTN","XPDIA",144,0)
PROFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",145,0)
 .;merged, they are also linked menu, but treat like merge
"RTN","XPDIA",146,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",147,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",148,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",149,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",150,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",151,0)
 ...S Y=$$LK("^ORD(101)",Y0)
"RTN","XPDIA",152,0)
 ...K ^ORD(101,DA,10,I,U)
"RTN","XPDIA",153,0)
 ...I 'Y K ^ORD(101,DA,10,I) D BMES^XPDUTL(" Protocol "_Y0_" in Protocol Menu "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",154,0)
 ...S $P(^ORD(101,DA,10,I,0),U)=Y
"RTN","XPDIA",155,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",156,0)
 .S:X $P(^ORD(101,DA,10,0),U,3,4)=X
"RTN","XPDIA",157,0)
 .;re-index this option
"RTN","XPDIA",158,0)
 .D IX1^DIK
"RTN","XPDIA",159,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",160,0)
 Q
"RTN","XPDIA",161,0)
PRODEL ;option delete
"RTN","XPDIA",162,0)
 D DEL("^ORD(101,",DUZ)
"RTN","XPDIA",163,0)
 D PRO^XPDIA2
"RTN","XPDIA",164,0)
 Q
"RTN","XPDIA",165,0)
LK(GR,X) ;lookup, GR=global root, X=lookup value
"RTN","XPDIA",166,0)
 Q:$G(X)="" ""
"RTN","XPDIA",167,0)
 N I S I=$O(@GR@("B",X,0))
"RTN","XPDIA",168,0)
 I I,$D(@GR@(I,0))#2 Q I
"RTN","XPDIA",169,0)
 Q ""
"RTN","XPDIA",170,0)
 ;
"RTN","XPDIA",171,0)
ADD(XPDSDD,XPDSDA,X) ;add to multiple, XPDSDD=sub DD#, XPDSDA=DA, X=value
"RTN","XPDIA",172,0)
 Q:$G(X)=""
"RTN","XPDIA",173,0)
 N XPD
"RTN","XPDIA",174,0)
 S XPD(XPDSDD,"?+1,"_XPDSDA_",",.01)=X
"RTN","XPDIA",175,0)
 D UPDATE^DIE("E","XPD")
"RTN","XPDIA",176,0)
 Q
"RTN","XPDIA",177,0)
 ;this is used to add menu items to an option or protocol
"RTN","XPDIA",178,0)
MENU(DA,X,X0) ;DA=ien of option/protocol, X=Menu item, X0=0 node of menu item
"RTN","XPDIA",179,0)
 N DIC,DLAYGO,DIK,D0,D1,I,Y,Y0
"RTN","XPDIA",180,0)
 S DIC=$S(XPDFIL=19:"^DIC(19,",1:"^ORD(101,")_DA_",10,",DIC(0)="L",DLAYGO=XPDFIL,(D0,DA(1))=DA
"RTN","XPDIA",181,0)
 S:'$D(@(DIC_"0)")) @(DIC_"0)")=U_$P(^DD(XPDFIL,10,0),U,2)
"RTN","XPDIA",182,0)
 S:$L($G(X0)) DIC("DR")="2///"_$P(X0,U,2)_";3///"_$P(X0,U,3)_$S($L($P(X0,U,4)):";4///"_$P(X0,U,4)_";5///"_$P(X0,U,5)_";6///"_$P(X0,U,6),1:"")
"RTN","XPDIA",183,0)
 D ^DIC
"RTN","XPDIA",184,0)
 Q
"RTN","XPDIA",185,0)
DEL(DIK,DUZ) ;delete
"RTN","XPDIA",186,0)
 N DA,XPDI,XPDF
"RTN","XPDIA",187,0)
 S XPDI=0,DUZ(0)="@",XPDF=+$P(DIK,"(",2)
"RTN","XPDIA",188,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D
"RTN","XPDIA",189,0)
 .K ^TMP("DIFIXPT",$J) S DA=XPDI
"RTN","XPDIA",190,0)
 .D ^DIK ;FIXPT^DIA3("D",XPDF,XPDI)
"RTN","XPDIA",191,0)
 .I $D(^TMP("DIFIXPT",$J))  D WP^XPDUTL("^TMP(""DIFIXPT"",$J)")
"RTN","XPDIA",192,0)
 Q
"RTN","XPDIA1")
0^12^B35706881
"RTN","XPDIA1",1,0)
XPDIA1 ;SFISC/RSD - Install Pre/Post Actions for Kernel files cont. ;03/11/98  08:33
"RTN","XPDIA1",2,0)
 ;;8.0;KERNEL;**2,44,51,58,68**;Jul 10, 1995
"RTN","XPDIA1",3,0)
 Q
"RTN","XPDIA1",4,0)
HLPF1 ;help frames file pre
"RTN","XPDIA1",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",6,0)
 Q
"RTN","XPDIA1",7,0)
HLPE1 ;entry pre
"RTN","XPDIA1",8,0)
 S ^TMP($J,"XPD",DA)="" K ^DIC(9.2,DA,1),^(2),^(3),^(10)
"RTN","XPDIA1",9,0)
 Q
"RTN","XPDIA1",10,0)
HLPF2 ;file post
"RTN","XPDIA1",11,0)
 N DA,DIK,I,X,Y,Y0
"RTN","XPDIA1",12,0)
 ;need to send error message, need to setup message
"RTN","XPDIA1",13,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA1",14,0)
 .;repoint Related Frame (2;0)
"RTN","XPDIA1",15,0)
 .S I=0 F  S I=$O(^DIC(9.2,DA,2,I)) Q:'I  S Y0=$G(^(I,0)),Y=$$LK^XPDIA("^DIC(9.2)",$P(Y0,U,2)),$P(^DIC(9.2,DA,2,I,0),U,2)=Y
"RTN","XPDIA1",16,0)
 .;repoint OBJECT (10;0)
"RTN","XPDIA1",17,0)
 .S (I,X)=0 F  S I=$O(^DIC(9.2,DA,10,I)) Q:'I  S Y0=$G(^(I,0)) D
"RTN","XPDIA1",18,0)
 ..S Y=$$LK^XPDIA("^MAG",$P(Y0,U)) S:Y $P(^DIC(9.2,DA,10,I,0),U)=Y,X=X+1_U_I
"RTN","XPDIA1",19,0)
 ..K:'Y ^DIC(9.2,DA,10,I)
"RTN","XPDIA1",20,0)
 .I X S $P(^DIC(9.2,DA,10,0),U,3,4)=$P(X,U,2)_U_+X
"RTN","XPDIA1",21,0)
 .D IX1^DIK
"RTN","XPDIA1",22,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",23,0)
 Q
"RTN","XPDIA1",24,0)
HLPDEL ;help frame delete
"RTN","XPDIA1",25,0)
 N DA,DIK,XPDI,XPDJ
"RTN","XPDIA1",26,0)
 S XPDI=0
"RTN","XPDIA1",27,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)),XPDJ=0 Q:'XPDI  D
"RTN","XPDIA1",28,0)
 .S DIK="^DIC(9.2,XPDJ,2,"
"RTN","XPDIA1",29,0)
 .;check other frames that point to this one
"RTN","XPDIA1",30,0)
 .F  S XPDJ=$O(^DIC(9.2,"AE",XPDI,XPDJ)) Q:'XPDJ  S Z=$O(^(XPDJ,0)) D:Z
"RTN","XPDIA1",31,0)
 ..K DA S DA=Z,DA(1)=XPDJ D ^DIK
"RTN","XPDIA1",32,0)
 .;delete this frame
"RTN","XPDIA1",33,0)
 .K DA S DA=XPDI,DIK="^DIC(9.2," D ^DIK
"RTN","XPDIA1",34,0)
 Q
"RTN","XPDIA1",35,0)
BULE1 ;bulletin entry pre
"RTN","XPDIA1",36,0)
 N X,I S I=0
"RTN","XPDIA1",37,0)
 ;save current Mail Groups (2)
"RTN","XPDIA1",38,0)
 I $G(^XMB(3.6,DA,2,0))]"" S X(0)=^(0) F  S I=$O(^XMB(3.6,DA,2,I)) Q:'I  S X(I)=$G(^(I,0))
"RTN","XPDIA1",39,0)
 K ^XMB(3.6,DA)
"RTN","XPDIA1",40,0)
 ;after killing data, put back Mail Groups before data merge
"RTN","XPDIA1",41,0)
 I $D(X) S ^XMB(3.6,DA,2,0)=X(0),I=0 F  S I=$O(X(I)) Q:'I  S ^XMB(3.6,DA,2,I,0)=X(I)
"RTN","XPDIA1",42,0)
 Q
"RTN","XPDIA1",43,0)
BULDEL ;del bulletins
"RTN","XPDIA1",44,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",45,0)
 S XPDI=0,DIK="^XMB(3.6,"
"RTN","XPDIA1",46,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",47,0)
 Q
"RTN","XPDIA1",48,0)
MAILGF1 ;mail groups file pre
"RTN","XPDIA1",49,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",50,0)
 Q
"RTN","XPDIA1",51,0)
MAILGE1 ;mail group entry pre
"RTN","XPDIA1",52,0)
 N I,J
"RTN","XPDIA1",53,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA1",54,0)
 ;save MEMBER GROUPS (5;0)
"RTN","XPDIA1",55,0)
 I $O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5,0)) M ^TMP($J,"XPD",DA,5)=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5) K ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5)
"RTN","XPDIA1",56,0)
 ;save MEMBER - REMOTE (6;0)
"RTN","XPDIA1",57,0)
 I $O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6,0)) M ^TMP($J,"XPD",DA,6)=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6) K ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6)
"RTN","XPDIA1",58,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA1",59,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,2,0)) ^XMB(3.8,DA,2)
"RTN","XPDIA1",60,0)
 S I=^XMB(3.8,DA,0),J=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,0)
"RTN","XPDIA1",61,0)
 ;save REFERENCE COUNT (0;4) & LAST REFERENCED (0;5)
"RTN","XPDIA1",62,0)
 S:$P(I,U,4) $P(J,U,4)=$P(I,U,4) S:$P(I,U,5) $P(J,U,5)=$P(I,U,5)
"RTN","XPDIA1",63,0)
 ;check COORDINATOR (0;7), if exist then save, else bring in one that was asked during install question
"RTN","XPDIA1",64,0)
 D
"RTN","XPDIA1",65,0)
 .I $P(I,U,7) S $P(J,U,7)=$P(I,U,7) Q
"RTN","XPDIA1",66,0)
 .S %=$O(^XPD(9.7,XPDA,"QUES","B","XPM"_OLDA_"#1",0)) Q:'%
"RTN","XPDIA1",67,0)
 .S:$G(^XPD(9.7,XPDA,"QUES",%,1)) $P(J,U,7)=^(1)
"RTN","XPDIA1",68,0)
 S ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,0)=J,I=$G(^XMB(3.8,DA,3))
"RTN","XPDIA1",69,0)
 ;save ORGANIZER (3;1)
"RTN","XPDIA1",70,0)
 I $P(I,U) S $P(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,3),U)=$P(I,U)
"RTN","XPDIA1",71,0)
 Q
"RTN","XPDIA1",72,0)
MAILGF2 ;mail group file post
"RTN","XPDIA1",73,0)
 N DA,DIK,XPDMDA,XPDI,Y
"RTN","XPDIA1",74,0)
 S XPDMDA=0,DIK="^XMB(3.8,"
"RTN","XPDIA1",75,0)
 F  S XPDMDA=$O(^TMP($J,"XPD",XPDMDA)) Q:'XPDMDA  D
"RTN","XPDIA1",76,0)
 .;merge & repoint MEMBER GROUP (5;0)
"RTN","XPDIA1",77,0)
 .S XPDI=0
"RTN","XPDIA1",78,0)
 .F  S XPDI=$O(^TMP($J,"XPD",XPDMDA,5,XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D:Y]"" ADD^XPDIA(3.811,XPDMDA,Y)
"RTN","XPDIA1",79,0)
 .;merge & repoint MEMBER - REMOTE (6;0)
"RTN","XPDIA1",80,0)
 .S XPDI=0
"RTN","XPDIA1",81,0)
 .F  S XPDI=$O(^TMP($J,"XPD",XPDMDA,6,XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D:Y]"" ADD^XPDIA(3.812,XPDMDA,Y)
"RTN","XPDIA1",82,0)
 .S DA=XPDMDA D IX1^DIK
"RTN","XPDIA1",83,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",84,0)
 Q
"RTN","XPDIA1",85,0)
HLAPF1 ;HL7 application parameter #771 file pre
"RTN","XPDIA1",86,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",87,0)
 Q
"RTN","XPDIA1",88,0)
HLAPE1 ;HL7 application parameter #771 entry pre
"RTN","XPDIA1",89,0)
 N I,J
"RTN","XPDIA1",90,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA1",91,0)
 S I=^HL(771,DA,0),J=^XTMP("XPDI",XPDA,"KRN",771,OLDA,0)
"RTN","XPDIA1",92,0)
 ;save FACILITY NAME (0;3)
"RTN","XPDIA1",93,0)
 S:$P(I,U,3)]"" $P(J,U,3)=$P(I,U,3)
"RTN","XPDIA1",94,0)
 ;repoint MAIL GROUP (0;4)
"RTN","XPDIA1",95,0)
 S:$P(J,U,4)]"" $P(J,U,4)=$$LK^XPDIA("^XMB(3.8)",$P(J,U,4))
"RTN","XPDIA1",96,0)
 ;repoint COUNTRY CODE (0;7)
"RTN","XPDIA1",97,0)
 S:$P(J,U,7)]"" $P(J,U,7)=$$LK^XPDIA("^HL(779.004)",$P(J,U,7))
"RTN","XPDIA1",98,0)
 S ^XTMP("XPDI",XPDA,"KRN",771,OLDA,0)=J
"RTN","XPDIA1",99,0)
 ;remove HL7 SEGMENT (SEG;0), HL7 MESSAGE (MSG;0)
"RTN","XPDIA1",100,0)
 K ^HL(771,DA,"SEG"),^("MSG")
"RTN","XPDIA1",101,0)
 Q
"RTN","XPDIA1",102,0)
HLAPF2 ;HL7 application parameter #771 file post
"RTN","XPDIA1",103,0)
 N DA,DIK,XPDI,X,Y
"RTN","XPDIA1",104,0)
 S DA=0,DIK="^HL(771,"
"RTN","XPDIA1",105,0)
 F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA1",106,0)
 .;repoint HL7 SEGMENT (SEG;0)
"RTN","XPDIA1",107,0)
 .S XPDI=0
"RTN","XPDIA1",108,0)
 .F  S XPDI=$O(^HL(771,DA,"SEG",XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D
"RTN","XPDIA1",109,0)
 ..S X=$$LK^XPDIA("^HL(771.3)",$P(Y,U))
"RTN","XPDIA1",110,0)
 ..I X]"" S $P(^HL(771,DA,"SEG",XPDI,0),U)=X Q
"RTN","XPDIA1",111,0)
 ..K ^HL(771,DA,"SEG",XPDI)
"RTN","XPDIA1",112,0)
 .;repoint HL7 MESSAGE (MSG;0)
"RTN","XPDIA1",113,0)
 .S XPDI=0
"RTN","XPDIA1",114,0)
 .F  S XPDI=$O(^HL(771,DA,"MSG",XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D
"RTN","XPDIA1",115,0)
 ..S X=$$LK^XPDIA("^HL(771.3)",$P(Y,U))
"RTN","XPDIA1",116,0)
 ..I X]"" S $P(^HL(771,DA,"MSG",XPDI,0),U)=X Q
"RTN","XPDIA1",117,0)
 ..K ^HL(771,DA,"MSG",XPDI)
"RTN","XPDIA1",118,0)
 .D IX1^DIK
"RTN","XPDIA1",119,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",120,0)
 Q
"RTN","XPDIA1",121,0)
HLLLPE ;HL7 lower level protocol #869.2 entry pre
"RTN","XPDIA1",122,0)
 N I
"RTN","XPDIA1",123,0)
 S I=$P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,0),U,2)
"RTN","XPDIA1",124,0)
 ;repoint LLP TYPE (0;2)
"RTN","XPDIA1",125,0)
 S:I]"" $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,0),U,2)=$$LK^XPDIA("^HLCS(869.1)",I)
"RTN","XPDIA1",126,0)
 S I=$P($G(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,100)),U)
"RTN","XPDIA1",127,0)
 ;repoint MAIL GROUP (100;1)
"RTN","XPDIA1",128,0)
 S:I]"" $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,100),U)=$$LK^XPDIA("^XMB(3.8)",I)
"RTN","XPDIA1",129,0)
 ;save HLLP DEVICE (200;1)
"RTN","XPDIA1",130,0)
 S I=$G(^HLCS(869.2,DA,200))
"RTN","XPDIA1",131,0)
 S:I $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,200),U)=$P(I,U)
"RTN","XPDIA1",132,0)
 ;save X3.28 DEVICE (300;1)
"RTN","XPDIA1",133,0)
 S I=$G(^HLCS(869.2,DA,300))
"RTN","XPDIA1",134,0)
 S:I $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,300),U)=$P(I,U)
"RTN","XPDIA1",135,0)
 ;save TCP/IP Address, Port, Start-up Node (400;1/2/6)
"RTN","XPDIA1",136,0)
 S I=$G(^HLCS(869.2,DA,400))
"RTN","XPDIA1",137,0)
 I I]""  D
"RTN","XPDIA1",138,0)
 . S $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,400),U,1)=$P(I,U,1)
"RTN","XPDIA1",139,0)
 . S $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,400),U,2)=$P(I,U,2)
"RTN","XPDIA1",140,0)
 . S $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,400),U,6)=$P(I,U,6)
"RTN","XPDIA1",141,0)
 . Q
"RTN","XPDIA1",142,0)
 Q
"RTN","XPDIA1",143,0)
HLLLE ;HL7 logical link #870 entry pre
"RTN","XPDIA1",144,0)
 N I,J,Y
"RTN","XPDIA1",145,0)
 S I=^HLCS(870,DA,0),J=^XTMP("XPDI",XPDA,"KRN",870,OLDA,0)
"RTN","XPDIA1",146,0)
 ;repoint INSTITUTION (0;2)
"RTN","XPDIA1",147,0)
 I $P(J,U,2)]"" S Y=$$LK^XPDIA("^DIC(4)",$P(J,U,2)) D:Y=""  S $P(J,U,2)=Y
"RTN","XPDIA1",148,0)
 .D BMES^XPDUTL(" Couldn't resolve Institution "_$P(J,U,2)_" for Logical Link "_$P(^HLCS(870,DA,0),U))
"RTN","XPDIA1",149,0)
 ;repoint LLP PARAMETER (0;3)
"RTN","XPDIA1",150,0)
 S:$P(J,U,3)]"" $P(J,U,3)=$$LK^XPDIA("^HLCS(869.2)",$P(J,U,3))
"RTN","XPDIA1",151,0)
 ;repoint DOMAIN (0;7)
"RTN","XPDIA1",152,0)
 I $P(J,U,7)]"" S Y=$$LK^XPDIA("^DIC(4.2)",$P(J,U,7)) D:Y=""  S $P(J,U,7)=Y
"RTN","XPDIA1",153,0)
 .D BMES^XPDUTL(" Couldn't resolve Domain "_$P(J,U,7)_" for Logical Link "_$P(^HLCS(870,DA,0),U))
"RTN","XPDIA1",154,0)
 ;save QUEUE SIZE (0;21)
"RTN","XPDIA1",155,0)
 S:$P(I,U,21)]"" $P(J,U,21)=$P(I,U,21)
"RTN","XPDIA1",156,0)
 S ^XTMP("XPDI",XPDA,"KRN",870,OLDA,0)=J
"RTN","XPDIA1",157,0)
 Q
"RTN","XPDIA1",158,0)
KEYDEL ;del security keys
"RTN","XPDIA1",159,0)
 N XPDI S XPDI=0
"RTN","XPDIA1",160,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D DEL^XPDKEY(XPDI)
"RTN","XPDIA1",161,0)
 Q
"RTN","XPDIA1",162,0)
LMDEL ;del list manager templates
"RTN","XPDIA1",163,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",164,0)
 S XPDI=0,DIK="^SD(409.61,"
"RTN","XPDIA1",165,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",166,0)
 Q
"RTN","XPDIA1",167,0)
RPCDEL ;del Kernel RPCs
"RTN","XPDIA1",168,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",169,0)
 S XPDI=0,DIK="^XWB(8994,"
"RTN","XPDIA1",170,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",171,0)
 Q
"RTN","XPDIA2")
0^4^B17473622
"RTN","XPDIA2",1,0)
XPDIA2 ;SFISC/RSD - Delete Options and cleanup pointers ;12/05/97  09:41
"RTN","XPDIA2",2,0)
 ;;8.0;KERNEL;**68**;Jul 10, 1995
"RTN","XPDIA2",3,0)
 Q
"RTN","XPDIA2",4,0)
OPT ;options
"RTN","XPDIA2",5,0)
 N XPDI,XPDJ,XPDK,XPDM,XPDX,X
"RTN","XPDIA2",6,0)
 ;XPDM=ien of the XMUSER option
"RTN","XPDIA2",7,0)
 S X=$O(^DIC(19,"B","XMUSER",0)),XPDM=$S(X:X,1:"@"),XPDX=0
"RTN","XPDIA2",8,0)
 ;loop thru all the options that are to be deleted
"RTN","XPDIA2",9,0)
 F  S XPDX=$O(^TMP($J,"XPDEL",XPDX)) Q:'XPDX  D
"RTN","XPDIA2",10,0)
 .;check that the following might reference this option, XPDX
"RTN","XPDIA2",11,0)
 .;file 19, menu item, 10
"RTN","XPDIA2",12,0)
 .S XPDI=0 F  S XPDI=$O(^DIC(19,"AD",XPDX,XPDI)) Q:'XPDI  D
"RTN","XPDIA2",13,0)
 ..S XPDJ=0 F  S XPDJ=$O(^DIC(19,"AD",XPDX,XPDI,XPDJ)) Q:'XPDJ  D
"RTN","XPDIA2",14,0)
 ...N XPDA S XPDA=XPDJ,XPDA(1)=XPDI
"RTN","XPDIA2",15,0)
 ...D DIK("^DIC(19,"_XPDI_",10,",.XPDA,DUZ)
"RTN","XPDIA2",16,0)
 .;file 19.081, field .01
"RTN","XPDIA2",17,0)
 .S XPDI=0 F  S XPDI=$O(^XUSEC(19,"B",XPDX,XPDI)) Q:'XPDI  D DIK("^XUSEC(19,",XPDI,DUZ)
"RTN","XPDIA2",18,0)
 .;file 19.2, field .01
"RTN","XPDIA2",19,0)
 .S XPDI=0 F  S XPDI=$O(^DIC(19.2,"B",XPDX,XPDI)) Q:'XPDI  D DIK("^DIC(19.2,",XPDI,DUZ)
"RTN","XPDIA2",20,0)
 .;file 200, secondary menu item, 203
"RTN","XPDIA2",21,0)
 .S XPDI=0 F  S XPDI=$O(^VA(200,"AD",XPDX,XPDI)) Q:'XPDI  D
"RTN","XPDIA2",22,0)
 ..S XPDJ=0 F  S XPDJ=$O(^VA(200,"AD",XPDX,XPDI,XPDJ)) Q:'XPDJ  D
"RTN","XPDIA2",23,0)
 ...N XPDA S XPDA=XPDJ,XPDA(1)=XPDI
"RTN","XPDIA2",24,0)
 ...D DIK("^VA(200,"_XPDI_",203,",.XPDA,DUZ)
"RTN","XPDIA2",25,0)
 .Q
"RTN","XPDIA2",26,0)
 ;
"RTN","XPDIA2",27,0)
 ;loop thru New Person file
"RTN","XPDIA2",28,0)
 S XPDI=0 F  S XPDI=$O(^VA(200,XPDI)) Q:'XPDI  D
"RTN","XPDIA2",29,0)
 .K XPDK S X="XPDK(200,"""_XPDI_","")"
"RTN","XPDIA2",30,0)
 .I $D(^VA(200,XPDI,201)) S XPDX=^(201) D
"RTN","XPDIA2",31,0)
 ..;check primary option field 201
"RTN","XPDIA2",32,0)
 ..S:$D(^TMP($J,"XPDEL",+XPDX)) @X@(201)=XPDM
"RTN","XPDIA2",33,0)
 ..;check primary window field 201.1
"RTN","XPDIA2",34,0)
 ..S:$D(^TMP($J,"XPDEL",+$P(XPDX,U,2))) @X@(201.1)="@"
"RTN","XPDIA2",35,0)
 .;check last option accessed field 202.1
"RTN","XPDIA2",36,0)
 .I $D(^VA(200,XPDI,202.1)),$D(^TMP($J,"XPDEL",+^(202.1))) S @X@(202.1)="@"
"RTN","XPDIA2",37,0)
 .D:$D(XPDK) DIE(.XPDK,DUZ)
"RTN","XPDIA2",38,0)
 .;loop thru delegated options field 19.5, this multiple is dinumed
"RTN","XPDIA2",39,0)
 .S XPDJ=0 F  S XPDJ=$O(^VA(200,XPDI,19.5,XPDJ)) Q:'XPDJ  D:$D(^TMP($J,"XPDEL",XPDJ))
"RTN","XPDIA2",40,0)
 ..N XPDA S XPDA=XPDJ,XPDA(1)=XPDI
"RTN","XPDIA2",41,0)
 ..D DIK("^VA(200,"_XPDI_",19.5,",.XPDA,DUZ)
"RTN","XPDIA2",42,0)
 .Q
"RTN","XPDIA2",43,0)
 ;
"RTN","XPDIA2",44,0)
 ;loop thru Kernel Site Parameter file
"RTN","XPDIA2",45,0)
 S XPDI=0 F  S XPDI=$O(^XTV(8989.3,XPDI)) Q:'XPDI  D
"RTN","XPDIA2",46,0)
 .;loop thru alpha/beta test options field 33, node ABOPT, multiple is dinumed
"RTN","XPDIA2",47,0)
 .S XPDJ=0 F  S XPDJ=$O(^XTV(8989.3,XPDI,"ABOPT",XPDJ)) Q:'XPDJ  D:$D(^TMP($J,"XPDEL",XPDJ))
"RTN","XPDIA2",48,0)
 ..N XPDA S XPDA=XPDJ,XPDA(1)=XPDI
"RTN","XPDIA2",49,0)
 ..D DIK("^XTV(8989.3,"_XPDI_",""ABOPT"",",.XPDA,DUZ)
"RTN","XPDIA2",50,0)
 .;loop thru option to audit field 19.1, node 19.1
"RTN","XPDIA2",51,0)
 .S XPDJ=0 F  S XPDJ=$O(^XTV(8989.3,XPDI,19.1,"B",XPDJ)) Q:'XPDJ  D:$D(^TMP($J,"XPDEL",XPDJ))
"RTN","XPDIA2",52,0)
 ..N XPDA S XPDK=$O(^XTV(8989.3,XPDI,19.1,"B",XPDJ,0)),XPDA=XPDK,XPDA(1)=XPDI
"RTN","XPDIA2",53,0)
 ..D DIK("^XTV(8989.3,"_XPDI_",19.1,",.XPDA,DUZ)
"RTN","XPDIA2",54,0)
 .Q
"RTN","XPDIA2",55,0)
 ;
"RTN","XPDIA2",56,0)
 ;loop thru Device File and check primary option field 201
"RTN","XPDIA2",57,0)
 S XPDI=0 F  S XPDI=$O(^%ZIS(1,XPDI)) Q:'XPDI  D:$D(^TMP($J,"XPDEL",+$G(^(XPDI,201))))
"RTN","XPDIA2",58,0)
 .K XPDK S XPDK(3.5,XPDI_",",201)="@" D DIE(.XPDK,DUZ)
"RTN","XPDIA2",59,0)
 Q
"RTN","XPDIA2",60,0)
 ;
"RTN","XPDIA2",61,0)
PRO ;protocols
"RTN","XPDIA2",62,0)
 N XPDI,XPDJ,XPDK,XPDX,X
"RTN","XPDIA2",63,0)
 S XPDX=0
"RTN","XPDIA2",64,0)
 ;loop thru all the protocols that are to be deleted
"RTN","XPDIA2",65,0)
 F  S XPDX=$O(^TMP($J,"XPDEL",XPDX)) Q:'XPDX  D
"RTN","XPDIA2",66,0)
 .;check that the following might reference this protocol, XPDX
"RTN","XPDIA2",67,0)
 .;file 101, menu item, 10
"RTN","XPDIA2",68,0)
 .S XPDI=0 F  S XPDI=$O(^ORD(101,"AD",XPDX,XPDI)) Q:'XPDI  D
"RTN","XPDIA2",69,0)
 ..S XPDJ=0 F  S XPDJ=$O(^ORD(101,"AD",XPDX,XPDI,XPDJ)) Q:'XPDJ  D
"RTN","XPDIA2",70,0)
 ...N XPDA S XPDA=XPDJ,XPDA(1)=XPDI
"RTN","XPDIA2",71,0)
 ...D DIK("^ORD(101,"_XPDI_",10,",.XPDA,DUZ)
"RTN","XPDIA2",72,0)
 .;file 123.1, REQUEST ACTION TYPE, field 2
"RTN","XPDIA2",73,0)
 .S XPDI=0 F  S XPDI=$O(^GMR(123.1,"C",XPDX,XPDI)) Q:'XPDI  D
"RTN","XPDIA2",74,0)
 ..S X=$G(^GMR(123.1,XPDI,0)) Q:X=""
"RTN","XPDIA2",75,0)
 ..K XPDK S XPDK(123.1,XPDI_",",2)="@"
"RTN","XPDIA2",76,0)
 ..D DIE(.XPDK,DUZ)
"RTN","XPDIA2",77,0)
 .Q
"RTN","XPDIA2",78,0)
 ;
"RTN","XPDIA2",79,0)
 ;loop thru New Person file
"RTN","XPDIA2",80,0)
 S XPDI=0 F  S XPDI=$O(^VA(200,XPDI)) Q:'XPDI  D
"RTN","XPDIA2",81,0)
 .K XPDK S X="XPDK(200,"""_XPDI_","")"
"RTN","XPDIA2",82,0)
 .I $D(^VA(200,XPDI,100.1)) S XPDX=^(100.1) D
"RTN","XPDIA2",83,0)
 ..;check  PRIMARY OE/RR MENU, field 100.11
"RTN","XPDIA2",84,0)
 ..S:$D(^TMP($J,"XPDEL",+XPDX)) @X@(100.11)="@"
"RTN","XPDIA2",85,0)
 ..;check PRIMARY ORDER MENU, field 100.12
"RTN","XPDIA2",86,0)
 ..S:$D(^TMP($J,"XPDEL",+$P(XPDX,U,2))) @X@(100.12)="@"
"RTN","XPDIA2",87,0)
 .I $D(^VA(200,XPDI,100.2)) S XPDX=^(100.2) D
"RTN","XPDIA2",88,0)
 ..;check  DEFAULT RESULT REPORTING MENU, field 100.23
"RTN","XPDIA2",89,0)
 ..S:$D(^TMP($J,"XPDEL",+$P(XPDX,U,3))) @X@(100.23)="@"
"RTN","XPDIA2",90,0)
 ..;check  PRIMARY PROFILE MENU, field 100.24
"RTN","XPDIA2",91,0)
 ..S:$D(^TMP($J,"XPDEL",+$P(XPDX,U,4))) @X@(100.24)="@"
"RTN","XPDIA2",92,0)
 .D:$D(XPDK) DIE(.XPDK,DUZ)
"RTN","XPDIA2",93,0)
 Q
"RTN","XPDIA2",94,0)
 ;
"RTN","XPDIA2",95,0)
DIK(DIK,DA,DUZ) ;delete
"RTN","XPDIA2",96,0)
 S DUZ(0)="@" D ^DIK
"RTN","XPDIA2",97,0)
 Q
"RTN","XPDIA2",98,0)
DIE(XPD,DUZ) ;
"RTN","XPDIA2",99,0)
 ;XPD(file,DA_",",field)=XMUSER option or '@' to delete
"RTN","XPDIA2",100,0)
 S DUZ(0)="@"
"RTN","XPDIA2",101,0)
 D FILE^DIE("","XPD")
"RTN","XPDIA2",102,0)
 Q
"RTN","XPDIJ")
0^7^B29597955
"RTN","XPDIJ",1,0)
XPDIJ ;SFISC/RSD - Install Job ;01/08/98  12:44
"RTN","XPDIJ",2,0)
 ;;8.0;KERNEL;**2,21,28,41,44,68**;Jul 10, 1995
"RTN","XPDIJ",3,0)
EN ;install all packages
"RTN","XPDIJ",4,0)
 ;XPDA=ien of first package
"RTN","XPDIJ",5,0)
 ;this is needed to restore XPDIJ1
"RTN","XPDIJ",6,0)
 I $D(^XTMP("XPDI",XPDA,"RTN","XPDIJ1")) D
"RTN","XPDIJ",7,0)
 .N DIE,XCM,XCN,XCS,X
"RTN","XPDIJ",8,0)
 .S DIE="^XTMP(""XPDI"",XPDA,""RTN"",""XPDIJ1"",",XCN=0,X="XPDIJ1"
"RTN","XPDIJ",9,0)
 .X ^%ZOSF("SAVE")
"RTN","XPDIJ",10,0)
 .S XCN=$$RTNUP^XPDUTL("XPDIJ1",2)
"RTN","XPDIJ",11,0)
 N XPDI,XPD0,XPDSET,XPDABORT,XPDQUIT,XPDVOL,X,Y,ZTRTN,ZTDTH,ZTIO,ZTDESC,ZTSK
"RTN","XPDIJ",12,0)
 I $$NEWERR^%ZTER N $ETRAP,$ESTACK S $ETRAP="D ERR^XPDIJ"
"RTN","XPDIJ",13,0)
 E  S X="ERR^XPDIJ",@^%ZOSF("TRAP")
"RTN","XPDIJ",14,0)
 Q:'$D(^XPD(9.7,+$G(XPDA),0))  S XPD0=^(0)
"RTN","XPDIJ",15,0)
 D INIT^XPDID
"RTN","XPDIJ",16,0)
 ;disable options & protocols for setname, XPDSET=1/0^setname^out of order msg.
"RTN","XPDIJ",17,0)
 S Y=$P(XPD0,U,8),XPDSET=+Y_U_$E(Y,2,99)_U_$S($L(Y):$P($G(^XTMP("XQOO",$E(Y,2,99),0)),U),1:"")
"RTN","XPDIJ",18,0)
 ;hang the number of seconds given in 0;10
"RTN","XPDIJ",19,0)
 I XPDSET D OFF^XQOO1($P(XPDSET,U,2)) I $P(XPD0,U,10) H ($P(XPD0,U,10)*60)
"RTN","XPDIJ",20,0)
 ;XPDVOL is set only if they want to update other CPUs
"RTN","XPDIJ",21,0)
 I $O(^XPD(9.7,XPDA,"VOL",0)) M XPDVOL=^XPD(9.7,XPDA,"VOL") D
"RTN","XPDIJ",22,0)
 .S Y=0
"RTN","XPDIJ",23,0)
 .F  S Y=$O(XPDVOL(Y)) Q:'Y  S $P(XPDVOL(Y,0),U,2,3)="^" K XPDVOL(Y,1)
"RTN","XPDIJ",24,0)
 .;jobup RTN^XPDIJ(XPDA), to install routines on other CPU if Taskman is running
"RTN","XPDIJ",25,0)
 .;check that taskman is running
"RTN","XPDIJ",26,0)
 .D:$$TM^%ZTLOAD
"RTN","XPDIJ",27,0)
 ..N XPDU,XPDY,XPDV,XPDV0,XPDVOL,ZTUCI,ZTCPU,ZTDESC,ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","XPDIJ",28,0)
 ..X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",29,0)
 ..F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",30,0)
 ...S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="KIDS update CPUs "_XPDV0,ZTCPU=XPDV0,ZTRTN="EN^XPDCPU("_XPDA_","_XPDV_")"
"RTN","XPDIJ",31,0)
 ...D ^%ZTLOAD
"RTN","XPDIJ",32,0)
 ...;save task number under Volume set multiple
"RTN","XPDIJ",33,0)
 ...Q:'$G(ZTSK)  K XPD
"RTN","XPDIJ",34,0)
 ...S XPD(9.703,XPDV_","_XPDA_",",3)=ZTSK D FILE^DIE("","XPD")
"RTN","XPDIJ",35,0)
 S Y=0
"RTN","XPDIJ",36,0)
 ;XPDABORT can be set in pre or post install to abort install
"RTN","XPDIJ",37,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%  Q:$D(XPDABORT)
"RTN","XPDIJ",38,0)
 .;build volume multiple for each package
"RTN","XPDIJ",39,0)
 .I $D(XPDVOL),'$D(^XPD(9.7,%,"VOL")) M ^("VOL")=XPDVOL
"RTN","XPDIJ",40,0)
 .N XPD,XPDA,XPDNM,XPDV,XPDV0,XPDVOL,XPDX,XPDY,Y
"RTN","XPDIJ",41,0)
 .S XPDA=%,XPDNM=$P($G(^XPD(9.7,XPDA,0)),U) D IN^XPDIJ1 Q:$D(XPDABORT)
"RTN","XPDIJ",42,0)
 .;check status of other cpu jobs, do if not this volume
"RTN","XPDIJ",43,0)
 .X ^%ZOSF("UCI") S XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",44,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=^(XPDV,0) D:$P(XPDV0,U)'=XPDY
"RTN","XPDIJ",45,0)
 ..;if completed time,write message and quit
"RTN","XPDIJ",46,0)
 ..I $P(XPDV0,U,2) D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",47,0)
 ..;if job had no start time, write message and quit
"RTN","XPDIJ",48,0)
 ..I '$P(XPDV0,U,3) D  I '$P(XPDV0,U,3)  D VOLERR($P(XPDV0,U),1) Q
"RTN","XPDIJ",49,0)
 ...D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to start.")
"RTN","XPDIJ",50,0)
 ...;hang 1 minute, try 5 times
"RTN","XPDIJ",51,0)
 ...F %=1:1:5 H 60 S XPDV0=^XPD(9.7,XPDA,"VOL",XPDV,0) Q:$P(XPDV0,U,3)
"RTN","XPDIJ",52,0)
 ..D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to complete.")
"RTN","XPDIJ",53,0)
 ..S XPD=0,XPDX=$G(^XPD(9.7,XPDA,"VOL",XPDV,1))
"RTN","XPDIJ",54,0)
 ..;check the last update node
"RTN","XPDIJ",55,0)
 ..F  S Y=$P(^XPD(9.7,XPDA,"VOL",XPDV,0),U,2),X=$G(^(1)),XPD=XPD+1 Q:XPD>360!Y  S:X'=XPDX XPD=0,XPDX=X H 10
"RTN","XPDIJ",56,0)
 ..;quit if we have a complete time
"RTN","XPDIJ",57,0)
 ..I Y D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",58,0)
 ..D VOLERR($P(XPDV0,U),0)
"RTN","XPDIJ",59,0)
 ;ZTREQ tells taskman to delete task
"RTN","XPDIJ",60,0)
 I $G(ZTSK) S ZTREQ="@" D
"RTN","XPDIJ",61,0)
 .;remove task # from Install File
"RTN","XPDIJ",62,0)
 .N XPD S XPD(9.7,XPDA_",",5)="@"
"RTN","XPDIJ",63,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",64,0)
 S Y=$S($D(XPDABORT):"Install Aborted!!",1:"Install Completed")
"RTN","XPDIJ",65,0)
 D EXIT^XPDID(Y),^%ZISC
"RTN","XPDIJ",66,0)
 ;quit if install was aborted
"RTN","XPDIJ",67,0)
 Q:$D(XPDABORT)
"RTN","XPDIJ",68,0)
 ;put option back in order
"RTN","XPDIJ",69,0)
 I $P(XPDSET,U,2)]"" D ON^XQOO1($P(XPDSET,U,2)) K ^XTMP("XQOO",$P(XPDSET,U,2))
"RTN","XPDIJ",70,0)
 ;queue menu rebuild on current CPU
"RTN","XPDIJ",71,0)
 D CHEK^XQ83
"RTN","XPDIJ",72,0)
 ;check if need to queue menu rebuild on other CPUs
"RTN","XPDIJ",73,0)
 D:$O(^XPD(9.7,XPDA,"VOL",0))
"RTN","XPDIJ",74,0)
 .N XPDU,XPDY,XPDV,XPDV0,ZTUCI,ZTCPU
"RTN","XPDIJ",75,0)
 .X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",76,0)
 .;loop thru VOLUMES SET and don't do current volume set
"RTN","XPDIJ",77,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",78,0)
 ..S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="Install Menu Rebuild",ZTCPU=XPDV0,ZTRTN="CHEK^XQ83" D ^%ZTLOAD
"RTN","XPDIJ",79,0)
 ;clean up globals
"RTN","XPDIJ",80,0)
 S Y=0
"RTN","XPDIJ",81,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S XPDI=$O(^(Y,0)) D:XPDI
"RTN","XPDIJ",82,0)
 .N Y,XPD
"RTN","XPDIJ",83,0)
 .;kill transport global
"RTN","XPDIJ",84,0)
 .K ^XTMP("XPDI",XPDI)
"RTN","XPDIJ",85,0)
 .;update the status field
"RTN","XPDIJ",86,0)
 .S XPD(9.7,XPDI_",",.02)=3
"RTN","XPDIJ",87,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",88,0)
 Q
"RTN","XPDIJ",89,0)
 ;
"RTN","XPDIJ",90,0)
SAVE(X) ;restore routine X
"RTN","XPDIJ",91,0)
 N %,DIE,XCM,XCN,XCS
"RTN","XPDIJ",92,0)
 S DIE="^XTMP(""XPDI"",XPDA,""RTN"",X,",XCN=0
"RTN","XPDIJ",93,0)
 X ^%ZOSF("SAVE")
"RTN","XPDIJ",94,0)
 Q
"RTN","XPDIJ",95,0)
RTN(XPDA) ;restore all routines for package XPDA
"RTN","XPDIJ",96,0)
 ;^XPD("XPDI",XPDA,"RTN",routine name)=0-install, 1-delete, 2-skip^checksum
"RTN","XPDIJ",97,0)
 Q:$G(XPDA)=""
"RTN","XPDIJ",98,0)
 N X,XPDI,XPDJ S XPDI=""
"RTN","XPDIJ",99,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S XPDJ=^(XPDI) D
"RTN","XPDIJ",100,0)
 .;if we are doing VT graphic display, set counter
"RTN","XPDIJ",101,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+1 D:'(XPDIDCNT#XPDIDMOD) UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",102,0)
 .I 'XPDJ D SAVE(XPDI) Q
"RTN","XPDIJ",103,0)
 .;set checksum to null, since routine wasn't loaded
"RTN","XPDIJ",104,0)
 .I $P(XPDJ,U,2) S $P(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"KRN",9.8,"NM",$P(XPDJ,U,2),0),U,4)=""
"RTN","XPDIJ",105,0)
 .I $P(XPDJ,U)=1 S X=XPDI X ^%ZOSF("DEL")
"RTN","XPDIJ",106,0)
 ;if graphic display, update full count
"RTN","XPDIJ",107,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",108,0)
 Q
"RTN","XPDIJ",109,0)
 ;
"RTN","XPDIJ",110,0)
VOLERR(V,F) ;volume set not updated,V=volume set, F=flag
"RTN","XPDIJ",111,0)
 N XQA,XQAMSG,XPDMES
"RTN","XPDIJ",112,0)
 S XPDMES(1)=" ",XPDMES(2)=" ** Job on VOLUME SET "_V_$S(F:" never started **",1:" has been idle for an hour.")
"RTN","XPDIJ",113,0)
 S XPDMES(3)=" ** "_V_" has NOT been updated! **"
"RTN","XPDIJ",114,0)
 S XQA(DUZ)="",XQAMSG="VOLUME SET "_V_" NOT updated for Install "_$E($P($G(^XPD(9.7,+$G(XPDA),0)),"^"),1,30)
"RTN","XPDIJ",115,0)
 D MES^XPDUTL(.XPDMES),SETUP^XQALERT
"RTN","XPDIJ",116,0)
 Q
"RTN","XPDIJ",117,0)
 ;come here on error, record error in Install file and cleanup var.
"RTN","XPDIJ",118,0)
ERR N XPDERROR,XQA,XQAMSG
"RTN","XPDIJ",119,0)
 S XPDERROR=$$EC^%ZOSV
"RTN","XPDIJ",120,0)
 ;record error, write message, reset terminal
"RTN","XPDIJ",121,0)
 D ^%ZTER,BMES^XPDUTL(XPDERROR),EXIT^XPDID()
"RTN","XPDIJ",122,0)
 S XQA(DUZ)="",XQAMSG="Install "_$E($P($G(^XPD(9.7,+$G(XPDA),0)),"^"),1,30)_" has encountered an Error."
"RTN","XPDIJ",123,0)
 D SETUP^XQALERT G UNWIND^%ZTER
"RTN","XPDIJ1")
0^6^B24370283
"RTN","XPDIJ1",1,0)
XPDIJ1 ;SFISC/RSD - Cont. of Install Job ;11/13/97  09:12
"RTN","XPDIJ1",2,0)
 ;;8.0;KERNEL;**41,68**;Jul 10, 1995
"RTN","XPDIJ1",3,0)
IN ;install XPDA
"RTN","XPDIJ1",4,0)
 ;XPDA=ien of file 9.7, XPDNM=package name
"RTN","XPDIJ1",5,0)
 Q:'$D(^XTMP("XPDI",XPDA))!'$D(^XPD(9.7,XPDA,0))
"RTN","XPDIJ1",6,0)
 ;check if already installed
"RTN","XPDIJ1",7,0)
 I $P($G(^XPD(9.7,XPDA,1)),U,3) D BMES^XPDUTL(" "_XPDNM_" Already Installed ") Q
"RTN","XPDIJ1",8,0)
 N DIFROM,XPD,XPDBLD,XPDCHECK,XPDCP,XPDI,XPDGREF,XPDIST,XPDIDTOT,XPDIDCNT,XPDIDMOD,XPDRTN
"RTN","XPDIJ1",9,0)
 ;XPDBLD subscript for build entry i.e. ^XTMP("XPDI",XPDA,"BLD",XPDBLD
"RTN","XPDIJ1",10,0)
 S DIFROM=$$VER^XPDUTL(XPDNM),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDGREF="^XTMP(""XPDI"","_XPDA_",""TEMP"")"
"RTN","XPDIJ1",11,0)
 D TITLE^XPDID(XPDNM)
"RTN","XPDIJ1",12,0)
 ;the $T is there only for installing patch 41 to prevent a noline error
"RTN","XPDIJ1",13,0)
 ;check that Package file has entry
"RTN","XPDIJ1",14,0)
 I $T(PKGADD^XPDIP)]"" S Y=$$PKGADD^XPDIP
"RTN","XPDIJ1",15,0)
 I '$$CHK(11) D
"RTN","XPDIJ1",16,0)
 .D BMES^XPDUTL(" Install Started for "_XPDNM_" : "),STMP(11)
"RTN","XPDIJ1",17,0)
 .;update status and installed by fields
"RTN","XPDIJ1",18,0)
 .S XPD(9.7,XPDA_",",.02)=2,XPD(9.7,XPDA_",",9)=DUZ
"RTN","XPDIJ1",19,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ1",20,0)
 E  D BMES^XPDUTL(" Install Restarted for "_XPDNM_" at "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",21,0)
 I '$$CHK(12) D
"RTN","XPDIJ1",22,0)
 .D BMES^XPDUTL(" Installing Routines:"),SETTOT^XPDID(9.8),RTN^XPDIJ(XPDA),STMP(12)
"RTN","XPDIJ1",23,0)
 E  D BMES^XPDUTL(" Routines already installed.")
"RTN","XPDIJ1",24,0)
 S XPDCP="INI"
"RTN","XPDIJ1",25,0)
 ;check if pre-install has completed
"RTN","XPDIJ1",26,0)
 I '$$VERCP^XPDUTL("XPD PREINSTALL COMPLETED") D  Q:$D(XPDABORT)
"RTN","XPDIJ1",27,0)
 .;setup XPDQUES array with pre-install questions/answers
"RTN","XPDIJ1",28,0)
 .D QUES^XPDIQ("PRE")
"RTN","XPDIJ1",29,0)
 .;XPDCHECK=ien of current checkpoint, (0)=name of checkpoint
"RTN","XPDIJ1",30,0)
 .;XPDCP="INI"-pre install or "INIT"-post install
"RTN","XPDIJ1",31,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ1",32,0)
 .S XPDCHECK=1
"RTN","XPDIJ1",33,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INI",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D  Q:$D(XPDABORT)
"RTN","XPDIJ1",34,0)
 ..;if there is no call back, quit
"RTN","XPDIJ1",35,0)
 ..Q:$G(^XPD(9.7,XPDA,"INI",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ1",36,0)
 ..;check if checkpoint has been completed
"RTN","XPDIJ1",37,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ1",38,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Pre-Install Routine: "_XPDRTN)
"RTN","XPDIJ1",39,0)
 ..;zero the progress bar
"RTN","XPDIJ1",40,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ1",41,0)
 ..D @XPDRTN
"RTN","XPDIJ1",42,0)
 ..;write message and abort if developer wants
"RTN","XPDIJ1",43,0)
 ..I $D(XPDABORT) D BMES^XPDUTL("Install ** ABORTED ** in Pre-Install program") Q
"RTN","XPDIJ1",44,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ1",45,0)
 .Q:$D(XPDABORT)
"RTN","XPDIJ1",46,0)
 .;complete pre-init check point
"RTN","XPDIJ1",47,0)
 .S %=$$COMCP^XPDUTL("XPD PREINSTALL COMPLETED")
"RTN","XPDIJ1",48,0)
 E  D BMES^XPDUTL(" Pre-Install already finished.")
"RTN","XPDIJ1",49,0)
 ;build XPDQUES arrays for all of the FM Files
"RTN","XPDIJ1",50,0)
 D QUES^XPDIQ("XPF")
"RTN","XPDIJ1",51,0)
 ;check the last file and see if it's already installed
"RTN","XPDIJ1",52,0)
 S XPD=$G(^(+$O(^XPD(9.7,XPDA,4,"A"),-1),0))
"RTN","XPDIJ1",53,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"FIA"))
"RTN","XPDIJ1",54,0)
 .D BMES^XPDUTL(" Installing Data Dictionaries: "),SETTOT^XPDID(4),FIA^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",55,0)
 E  D BMES^XPDUTL(" Data Dictionaries already installed.")
"RTN","XPDIJ1",56,0)
 S %=+$O(^XTMP("XPDI",XPDA,"DATA",""),-1),XPD=$G(^XPD(9.7,XPDA,4,%,0))
"RTN","XPDIJ1",57,0)
 I '$P(XPD,U,3) D:%
"RTN","XPDIJ1",58,0)
 .D BMES^XPDUTL(" Installing Data: "),DAT^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",59,0)
 E  D BMES^XPDUTL(" Data already installed.")
"RTN","XPDIJ1",60,0)
 S (%,XPD)=""
"RTN","XPDIJ1",61,0)
 F  S %=+$O(^XPD(9.7,XPDA,"KRN",%)) Q:'%  S XPD=$G(^(%,0)) Q:'$P(XPD,U,2)
"RTN","XPDIJ1",62,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"KRN"))
"RTN","XPDIJ1",63,0)
 .D BMES^XPDUTL(" Installing PACKAGE COMPONENTS: "),KRN^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",64,0)
 E  D BMES^XPDUTL(" PACKAGE COMPONENTS already installed.")
"RTN","XPDIJ1",65,0)
 S XPDCP="INIT"
"RTN","XPDIJ1",66,0)
 ;check if post-install has completed
"RTN","XPDIJ1",67,0)
 I '$$VERCP^XPDUTL("XPD POSTINSTALL COMPLETED") D  Q:$D(XPDABORT)
"RTN","XPDIJ1",68,0)
 .;setup XPDQUES array with post-install questions/answers
"RTN","XPDIJ1",69,0)
 .D QUES^XPDIQ("POS")
"RTN","XPDIJ1",70,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ1",71,0)
 .S XPDCHECK=1
"RTN","XPDIJ1",72,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INIT",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D  Q:$D(XPDABORT)
"RTN","XPDIJ1",73,0)
 ..;if there is no call back, quit
"RTN","XPDIJ1",74,0)
 ..Q:$G(^XPD(9.7,XPDA,"INIT",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ1",75,0)
 ..;quit if checkpoint has completed time
"RTN","XPDIJ1",76,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ1",77,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Post-Install Routine: "_XPDRTN)
"RTN","XPDIJ1",78,0)
 ..;zero the progress bar
"RTN","XPDIJ1",79,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ1",80,0)
 ..D @XPDRTN
"RTN","XPDIJ1",81,0)
 ..;write message and abort if developer wants
"RTN","XPDIJ1",82,0)
 ..I $D(XPDABORT) D BMES^XPDUTL("Install ** ABORTED ** in Post-Install program") Q
"RTN","XPDIJ1",83,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ1",84,0)
 .Q:$D(XPDABORT)
"RTN","XPDIJ1",85,0)
 .;complete post-init check point
"RTN","XPDIJ1",86,0)
 .S %=$$COMCP^XPDUTL("XPD POSTINSTALL COMPLETED")
"RTN","XPDIJ1",87,0)
 E  D BMES^XPDUTL(" Post-Install already finished.")
"RTN","XPDIJ1",88,0)
 ;move routines to install file & Routine file
"RTN","XPDIJ1",89,0)
 D BMES^XPDUTL(" Updating Routine file..."),SETTOT^XPDID(9.8),RTN^XPDIP
"RTN","XPDIJ1",90,0)
 ;XPDIST is flag for site tracking^A/B install message, it is set in PKG^XPDIP
"RTN","XPDIJ1",91,0)
 ;install Package file, OERR parameter multiple, and Build file
"RTN","XPDIJ1",92,0)
 S XPDIST="" D BMES^XPDUTL(" Updating KIDS files..."),PKG^XPDIP
"RTN","XPDIJ1",93,0)
 D BMES^XPDUTL(" "_XPDNM_" Installed. "),STMP(17)
"RTN","XPDIJ1",94,0)
 ;sends install messages
"RTN","XPDIJ1",95,0)
 I $L(XPDIST) S %=$$EN^XPDIST(XPDA,XPDIST) D BMES^XPDUTL(" "_$P("NO ",U,'$P(%,"#",2))_"Install Message sent "_%)
"RTN","XPDIJ1",96,0)
 Q
"RTN","XPDIJ1",97,0)
CHK(X) ;check checkpoints in file 9.7, X=field #, returns 1=completed, 0=not completed
"RTN","XPDIJ1",98,0)
 Q $$GET1^DIQ(9.7,XPDA_",",X,"I")]""
"RTN","XPDIJ1",99,0)
 ;
"RTN","XPDIJ1",100,0)
STMP(X) ;timestamp checkpoints in file 9.7, X=field #
"RTN","XPDIJ1",101,0)
 N XPD,%
"RTN","XPDIJ1",102,0)
 S %=$$NOW^XLFDT,XPD(9.7,XPDA_",",X)=%
"RTN","XPDIJ1",103,0)
 D MES^XPDUTL("               "_$$FMTE^XLFDT(%)),FILE^DIE("","XPD")
"RTN","XPDIJ1",104,0)
 Q
"RTN","XPDIL")
0^10^B26169216
"RTN","XPDIL",1,0)
XPDIL ;SFISC/RSD - load Distribution Global ;12/05/97  12:26
"RTN","XPDIL",2,0)
 ;;8.0;KERNEL;**15,44,58,68**;Jul 10, 1995
"RTN","XPDIL",3,0)
EN1 N POP,XPDA,XPDST,XPDIT,XPDT,XPDGP,XPDQUIT,XPDREQAB,XPDSKPE
"RTN","XPDIL",4,0)
 S:'$D(DT) DT=$$DT^XLFDT S:'$D(U) U="^"
"RTN","XPDIL",5,0)
 S XPDST=0
"RTN","XPDIL",6,0)
 D ST I $G(XPDQUIT) D ABRTALL^XPDI(1) G NONE
"RTN","XPDIL",7,0)
 ;XPDST= starting Build
"RTN","XPDIL",8,0)
 ;XPDT("DA",ien)=seq # to install
"RTN","XPDIL",9,0)
 ;XPDT("NM",build name)=seq #
"RTN","XPDIL",10,0)
 ;XPDT(seq #)=ien^Build name
"RTN","XPDIL",11,0)
 ;XPDT("GP",global)= 1-replace, 0-overwrite^ien
"RTN","XPDIL",12,0)
 ;XPDGP=globals from a Global Package
"RTN","XPDIL",13,0)
 ;XPDSKPE=1 don't run Environment Check^has question been asked
"RTN","XPDIL",14,0)
 S XPDIT=0,XPDSKPE="0^0"
"RTN","XPDIL",15,0)
 F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  S XPDA=+XPDT(XPDIT) D  I '$D(XPDT) Q
"RTN","XPDIL",16,0)
 .;check if this Build has an Envir. Check
"RTN","XPDIL",17,0)
 .I $G(^XTMP("XPDI",XPDA,"PRE"))]"" D  I $G(XPDQUIT) D ABRTALL^XPDI(1) Q
"RTN","XPDIL",18,0)
 ..;quit if we already asked this question
"RTN","XPDIL",19,0)
 ..Q:$P(XPDSKPE,U,2)
"RTN","XPDIL",20,0)
 ..S $P(XPDSKPE,U,2)=1
"RTN","XPDIL",21,0)
 ..N DIR,DIRUT
"RTN","XPDIL",22,0)
 ..S DIR(0)="Y",DIR("A")="Want to RUN the Environment Check Routine",DIR("B")="YES"
"RTN","XPDIL",23,0)
 ..D ^DIR I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",24,0)
 ..S:'Y XPDSKPE="1^1"
"RTN","XPDIL",25,0)
 .D PKG^XPDIL1(XPDA)
"RTN","XPDIL",26,0)
 ;Global Package
"RTN","XPDIL",27,0)
 G:$D(XPDGP) ^XPDIGP
"RTN","XPDIL",28,0)
 I $D(XPDT),$D(^XPD(9.7,+XPDST,0)) W !,"Use INSTALL NAME: ",$P(^(0),U)," to install this Distribution.",!
"RTN","XPDIL",29,0)
 Q
"RTN","XPDIL",30,0)
ST ;global input
"RTN","XPDIL",31,0)
 N DIR,DIRUT,GR,IOP,X,Y,Z,%ZIS
"RTN","XPDIL",32,0)
 G:'$D(^DD(3.5,0)) OPEN
"RTN","XPDIL",33,0)
 I '$D(^%ZIS(1,"B","HFS")) W !!,"You must have a device called 'HFS' in order to load a distribution!",*7 S XPDQUIT=1 Q
"RTN","XPDIL",34,0)
 D HOME^%ZIS
"RTN","XPDIL",35,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to input Distribution."
"RTN","XPDIL",36,0)
 D ^DIR I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",37,0)
 S %ZIS="",%ZIS("HFSNAME")=Y,%ZIS("HFSMODE")="R",IOP="HFS"
"RTN","XPDIL",38,0)
 D ^%ZIS I POP W !,"Couldn't open file or HFS device!!",*7 S XPDQUIT=1 Q
"RTN","XPDIL",39,0)
 ;don't close device if we have a global package, we need to bring in the globals now
"RTN","XPDIL",40,0)
 D GI,^%ZISC:'$D(XPDGP)!$G(XPDQUIT)
"RTN","XPDIL",41,0)
 Q
"RTN","XPDIL",42,0)
 ;
"RTN","XPDIL",43,0)
 ;if no device file, Virgin Install
"RTN","XPDIL",44,0)
OPEN ;use open command
"RTN","XPDIL",45,0)
 N IO,IOPAR,DIR,DIRUT
"RTN","XPDIL",46,0)
 S DIR(0)="F^1:79",DIR("A")="Device Name"
"RTN","XPDIL",47,0)
 S DIR("?",1)="Device Name is either the name of the HFS file or the name of the HFS Device.",DIR("?",2)="i.e.  for MSM enter  51",DIR("?")="      for DSM enter  DISK$USER::[ANONYMOUS]:KRN8.KID"
"RTN","XPDIL",48,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDIL",49,0)
 S IO=Y,DIR(0)="FO^1:79",DIR("A")="Device Parameters"
"RTN","XPDIL",50,0)
 S DIR("?",1)="Device Parameter is the Open parameter this M operating system needs to",DIR("?",2)="open the Device Name.",DIR("?",3)="i.e. for MSM enter  (""B:\KRN8.KID"":""R"")",DIR("?")="     for DSM enter  READONLY"
"RTN","XPDIL",51,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDIL",52,0)
 S IOPAR=Y
"RTN","XPDIL",53,0)
 X "O IO:"_IOPAR_":10" E  U $P W !,"Couldn't open ",IO S POP=1 Q
"RTN","XPDIL",54,0)
 S IO(0)=$P
"RTN","XPDIL",55,0)
 D GI C IO
"RTN","XPDIL",56,0)
 S IO=IO(0)
"RTN","XPDIL",57,0)
 Q
"RTN","XPDIL",58,0)
 ;
"RTN","XPDIL",59,0)
GI N X,XPDSEQ,Y,Z
"RTN","XPDIL",60,0)
 U IO R X:1,Y:1
"RTN","XPDIL",61,0)
 U IO(0) W !!,X,!,"Comment: ",Y
"RTN","XPDIL",62,0)
 S XPDST("H")=Y,XPDST("H1")=Y_"  ;Created on "_$P(X,"KIDS Distribution saved on ",2)
"RTN","XPDIL",63,0)
 ;Z is the string of Builds in this file
"RTN","XPDIL",64,0)
 U IO F X=1:1 R Z:1 S Z=$P(Z,"**KIDS**",2,99) Q:Z=""  S X(X)=Z
"RTN","XPDIL",65,0)
 U IO(0) I $G(X(1))="" W !!,"This is not a Distribution HFS File!" S XPDQUIT=1 Q
"RTN","XPDIL",66,0)
 ;global package, set XPDGP=flag;global^flag;global^...  flag=1 replace
"RTN","XPDIL",67,0)
 I $P(X(1),":")="GLOBALS" S XPDGP=$P(X(1),U,2,99),X(1)=$P(X(1),U)
"RTN","XPDIL",68,0)
 S XPDIT=0,X(1)=$P(X(1),":",2,99)
"RTN","XPDIL",69,0)
 W !!,"This Distribution contains Transport Globals for the following Package(s):"
"RTN","XPDIL",70,0)
 F X=1:1:X-1 F Z=1:1 S Y=$P(X(X),U,Z) Q:Y=""  D  Q:$G(XPDQUIT)
"RTN","XPDIL",71,0)
 .;can't install if global exist, that means Build never finish install
"RTN","XPDIL",72,0)
 .W !?5,Y S XPDIT=XPDIT+1 I '$$INST^XPDIL1(Y) S XPDQUIT=1 Q
"RTN","XPDIL",73,0)
 Q:$G(XPDQUIT)
"RTN","XPDIL",74,0)
 W !
"RTN","XPDIL",75,0)
 D:$D(XPDGP) DISP^XPDIGP
"RTN","XPDIL",76,0)
 S DIR(0)="Y",DIR("A")="Want to Continue with Load",DIR("B")="YES"
"RTN","XPDIL",77,0)
 D ^DIR I $D(DIRUT)!'Y S XPDQUIT=1 Q
"RTN","XPDIL",78,0)
 W !,"Loading Distribution...",!
"RTN","XPDIL",79,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDIL",80,0)
 S ^XTMP("XPDI",0)=$$FMADD^XLFDT(DT,7)_U_DT
"RTN","XPDIL",81,0)
 ;start reading the HFS again
"RTN","XPDIL",82,0)
 U IO R X:0,Y:0
"RTN","XPDIL",83,0)
 ;the next read must be the INSTALL NAME
"RTN","XPDIL",84,0)
 I X'="**INSTALL NAME**"!'$D(XPDT("NM",Y)) U IO(0) W !!,"ERROR in HFS file format!" S XPDQUIT=1 Q
"RTN","XPDIL",85,0)
 ;XPDSEQ is the disk sequence number
"RTN","XPDIL",86,0)
 S %=XPDT("NM",Y),GR="^XTMP(""XPDI"","_+XPDT(%)_",",XPDSEQ=1
"RTN","XPDIL",87,0)
 ;X=global ref, Y=global value. DIRUT is when user is prompted for next disk in NEXTD and they abort
"RTN","XPDIL",88,0)
 F  R X:0,Y:0 Q:X="**END**"  D  I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",89,0)
 .I X="**INSTALL NAME**" D  Q
"RTN","XPDIL",90,0)
 ..S %=+$G(XPDT("NM",Y)) I '% S DIRUT=1 Q
"RTN","XPDIL",91,0)
 ..S GR="^XTMP(""XPDI"","_+XPDT(%)_","
"RTN","XPDIL",92,0)
 .I X="**CONTINUE**" D NEXTD Q
"RTN","XPDIL",93,0)
 .S @(GR_X)=Y
"RTN","XPDIL",94,0)
 U IO(0)
"RTN","XPDIL",95,0)
 Q
"RTN","XPDIL",96,0)
 ;
"RTN","XPDIL",97,0)
NEXTD I ^%ZOSF("OS")'["MSM" U IO(0) W !!,"Error in disk, ABORTING load!!" S XPDQUIT=1 Q
"RTN","XPDIL",98,0)
 N DIR
"RTN","XPDIL",99,0)
 ;close current device
"RTN","XPDIL",100,0)
 C IO U IO(0)
"RTN","XPDIL",101,0)
 S XPDSEQ=XPDSEQ+1,DIR(0)="E",DIR("A")="Insert the next diskette, #"_XPDSEQ_", and Press the return key",DIR("?")="This distribution is continued on another diskette"
"RTN","XPDIL",102,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDIL",103,0)
 W "  OK",!
"RTN","XPDIL",104,0)
 ;MSM specific code to open HFS
"RTN","XPDIL",105,0)
 O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDIL",106,0)
 R X:0,Y:0
"RTN","XPDIL",107,0)
 ;quit if comments are not the same on each diskette
"RTN","XPDIL",108,0)
 G:Y'=XPDST("H") NEXTQ
"RTN","XPDIL",109,0)
 ;quit if not the expected sequence, Z is for the blank line
"RTN","XPDIL",110,0)
 R Y:0,Z:0 G:Y'=("**SEQ**:"_XPDSEQ) NEXTQ
"RTN","XPDIL",111,0)
 Q
"RTN","XPDIL",112,0)
NEXTQ U IO(0) W !!,"This is NOT the correct diskette!!  The comment on this diskette is:",!,X,!!
"RTN","XPDIL",113,0)
 S XPDSEQ=XPDSEQ-1
"RTN","XPDIL",114,0)
 G NEXTD
"RTN","XPDIL",115,0)
 ;
"RTN","XPDIL",116,0)
NONE W !!,"**NOTHING LOADED**",!
"RTN","XPDIL",117,0)
 Q
"RTN","XPDIL1")
0^2^B28274669
"RTN","XPDIL1",1,0)
XPDIL1 ;SFISC/RSD - cont. of load Distribution Global ;01/08/98  11:29
"RTN","XPDIL1",2,0)
 ;;8.0;KERNEL;**15,17,39,41,44,66,68**;Jul 10, 1995
"RTN","XPDIL1",3,0)
 ;
"RTN","XPDIL1",4,0)
PKG(XPDA) ;check Package file
"RTN","XPDIL1",5,0)
 N XPD,XPDCP,XPDNM,XPDNOQUE,XPDPKG,X,Y,%
"RTN","XPDIL1",6,0)
 S XPDNM=$P(XPDT(XPDIT),U,2) W !?3,XPDNM
"RTN","XPDIL1",7,0)
 ;check KIDS version against sites version, skip if package is Kernel
"RTN","XPDIL1",8,0)
 I $$PKG^XPDUTL(XPDNM)'["KERNEL" D  I $D(XPDQUIT) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",9,0)
 .;this is part of a Kernel multi package
"RTN","XPDIL1",10,0)
 .Q:$O(XPDT("NM","KERNEL"))["KERNEL"
"RTN","XPDIL1",11,0)
 .S Y=$G(^XTMP("XPDI",XPDA,"VER"))
"RTN","XPDIL1",12,0)
 .I $$VERSION^XPDUTL("XU")<Y W !!,"But I need Version ",+Y," of KERNEL!"  S XPDQUIT=1
"RTN","XPDIL1",13,0)
 .I $$VERSION^XPDUTL("VA FILEMAN")<$P(Y,U,2) W !,"But I Need Version ",+$P(Y,U,2)," of VA FILEMAN!" S XPDQUIT=1
"RTN","XPDIL1",14,0)
 ;get national package name
"RTN","XPDIL1",15,0)
 S %=$O(^XTMP("XPDI",XPDA,"PKG",0)),XPDPKG(0)=$G(^(+%,0)),XPDPKG=%
"RTN","XPDIL1",16,0)
 ;XPDPKG=new ien^old ien
"RTN","XPDIL1",17,0)
 I XPDPKG D  S XPDPKG=+Y_U_XPDPKG
"RTN","XPDIL1",18,0)
 .N D,DIC
"RTN","XPDIL1",19,0)
 .S DIC="^DIC(9.4,",DIC(0)="X",X=$P(XPDPKG(0),U)
"RTN","XPDIL1",20,0)
 .D ^DIC Q:Y>0
"RTN","XPDIL1",21,0)
 .;if lookup fails try Prefix, C x-ref
"RTN","XPDIL1",22,0)
 .S X=$P(XPDPKG(0),U,2),D="C" D IX^DIC
"RTN","XPDIL1",23,0)
 ;add package to Install file
"RTN","XPDIL1",24,0)
 I XPDPKG>0 S XPD(9.7,XPDA_",",1)=+XPDPKG D FILE^DIE("","XPD")
"RTN","XPDIL1",25,0)
 ;XPDSKPE= does site want to run Environ. Check
"RTN","XPDIL1",26,0)
 I '$G(XPDSKPE) Q:$$ENV(0)=1
"RTN","XPDIL1",27,0)
 ;global package can't have pre or post inits
"RTN","XPDIL1",28,0)
 Q:$D(XPDGP)
"RTN","XPDIL1",29,0)
 ;create pre-init checkpoint
"RTN","XPDIL1",30,0)
 S XPDCP="INI" I '$$NEWCP^XPDUTL("XPD PREINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",31,0)
 S %=$$INRTN("INI")
"RTN","XPDIL1",32,0)
 ;check for routine, use as call back
"RTN","XPDIL1",33,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD PREINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",34,0)
 ;create post-init checkpoint
"RTN","XPDIL1",35,0)
 S XPDCP="INIT" I '$$NEWCP^XPDUTL("XPD POSTINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",36,0)
 S %=$$INRTN("INIT")
"RTN","XPDIL1",37,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD POSTINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",38,0)
 ;create fileman and components check points and file rest of data
"RTN","XPDIL1",39,0)
 D XPCK^XPDIK("FIA"),XPCK^XPDIK("KRN")
"RTN","XPDIL1",40,0)
 Q
"RTN","XPDIL1",41,0)
INST(XPDNM) ;add to Install file
"RTN","XPDIL1",42,0)
 N DIC,DIR,DIRUT,DLAYGO,X,XPD,XPDA,XPDIE,XPDDIQ,Y
"RTN","XPDIL1",43,0)
 ;check if Build was already installed
"RTN","XPDIL1",44,0)
 ;XPD=0 abort install, else XPD=ien in Install file
"RTN","XPDIL1",45,0)
 I $D(^XPD(9.7,"B",XPDNM)) S Y=0 D  Q:$D(XPD) XPD
"RTN","XPDIL1",46,0)
 .W !,"The following Entries already exist in the INSTALL file: ",!
"RTN","XPDIL1",47,0)
 .F  S Y=$O(^XPD(9.7,"B",XPDNM,Y)) Q:'Y  D
"RTN","XPDIL1",48,0)
 ..Q:'$D(^XPD(9.7,Y,0))  S %=^(0)
"RTN","XPDIL1",49,0)
 ..W !,$P(%,U),"   "
"RTN","XPDIL1",50,0)
 ..I $P(%,U,9)<3,$D(^XTMP("XPDI",Y)) W "**Transport Global already exists**",*7 S XPD=0 Q
"RTN","XPDIL1",51,0)
 ..W $$EXTERNAL^DILFD(9.7,.02,"",$P(%,U,9)),!,"was loaded on ",$$FMTE^XLFDT($P($G(^XPD(9.7,Y,1)),U))
"RTN","XPDIL1",52,0)
 .;quit if transport global exist
"RTN","XPDIL1",53,0)
 .Q:$D(XPD)
"RTN","XPDIL1",54,0)
 .S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO"
"RTN","XPDIL1",55,0)
 .D ^DIR I $D(DIRUT)!'Y S XPD=0 Q
"RTN","XPDIL1",56,0)
 S DIC="^XPD(9.7,",DIC(0)="XL",DLAYGO=9.7,X=""""_XPDNM_""""
"RTN","XPDIL1",57,0)
 ;add to Install file, must be new
"RTN","XPDIL1",58,0)
 D ^DIC
"RTN","XPDIL1",59,0)
 I Y<0 W !,"Can't add Build ",XPDNM," to Install File" Q 0
"RTN","XPDIL1",60,0)
 ;set starting package to Y, if it is not already defined
"RTN","XPDIL1",61,0)
 S:'XPDST XPDST=+Y
"RTN","XPDIL1",62,0)
 ;XPDT array keeps track of all packages in this distribution
"RTN","XPDIL1",63,0)
 S XPDA=+Y,XPDT(XPDIT)=XPDA_U_XPDNM,(XPDT("DA",XPDA),XPDT("NM",XPDNM))=XPDIT
"RTN","XPDIL1",64,0)
 S %="XPDIE(9.7,"""_XPDA_","")",@%@(.02)=0,@%@(2)=$$NOW^XLFDT,@%@(3)=XPDST,@%@(4)=XPDIT,@%@(5)="",@%@(6)=XPDST("H1")
"RTN","XPDIL1",65,0)
 D FILE^DIE("","XPDIE")
"RTN","XPDIL1",66,0)
 Q XPDA
"RTN","XPDIL1",67,0)
 ;
"RTN","XPDIL1",68,0)
 ;XPDQUIT quit current package install, 1=kill global, 2=leave global
"RTN","XPDIL1",69,0)
 ;XPDQUIT(package) quit package install, 1=kill, 2=leave
"RTN","XPDIL1",70,0)
 ;XPDABORT quit the entire distribution, 1=kill, 2=leave
"RTN","XPDIL1",71,0)
 ;XPDENV 0=loading distribution, 1=installing
"RTN","XPDIL1",72,0)
ENV(XPDENV) ;enviroment check & version check
"RTN","XPDIL1",73,0)
 ;returns 0=ok, 1=rejected kill global, 2=rejected leave global
"RTN","XPDIL1",74,0)
 N %,DIR,XPDI,XPDQUIT,XPDABORT
"RTN","XPDIL1",75,0)
 ;check version number
"RTN","XPDIL1",76,0)
 I XPDPKG>0 D  I $G(XPDQUIT) D ABORT^XPDI(XPDA,1) Q 1
"RTN","XPDIL1",77,0)
 .N DIR,DIRUT,X,Y
"RTN","XPDIL1",78,0)
 .S %=+$$VER^XPDUTL(XPDNM),Y=+$G(^DIC(9.4,+XPDPKG,"VERSION")),X=XPDNM["*"
"RTN","XPDIL1",79,0)
 .;if patch, version must be the same
"RTN","XPDIL1",80,0)
 .I X,%'=Y W !,"This Patch is for Version ",%,", you are running Version ",Y,! S XPDQUIT=1
"RTN","XPDIL1",81,0)
 .;if package, version must be greater or equal
"RTN","XPDIL1",82,0)
 .I 'X,%<Y W !,"You have a Version greater than mine!",! S XPDQUIT=1
"RTN","XPDIL1",83,0)
 .Q:'$G(XPDQUIT)
"RTN","XPDIL1",84,0)
 .S DIR(0)="Y",DIR("A")="Want to continue with Install",DIR("B")="NO"
"RTN","XPDIL1",85,0)
 .D ^DIR I Y K XPDQUIT
"RTN","XPDIL1",86,0)
 .Q
"RTN","XPDIL1",87,0)
 S %=$$REQB I % S (XPDABORT,XPDREQAB)=% G ABORT
"RTN","XPDIL1",88,0)
 S %=$G(^XTMP("XPDI",XPDA,"PRE")) D:%]""
"RTN","XPDIL1",89,0)
 .W !,"Will first run the Environment Check Routine, ",%,!
"RTN","XPDIL1",90,0)
 .D SAVE^XPDIJ(%),@("^"_%)
"RTN","XPDIL1",91,0)
ABORT I $G(XPDABORT) D  Q XPDABORT
"RTN","XPDIL1",92,0)
 .;if during load & leave global quit
"RTN","XPDIL1",93,0)
 .I 'XPDENV,XPDABORT=2 Q
"RTN","XPDIL1",94,0)
 .D ABRTALL^XPDI(XPDABORT)
"RTN","XPDIL1",95,0)
 Q:'$D(XPDQUIT) 0
"RTN","XPDIL1",96,0)
 I $G(XPDQUIT) D ABORT^XPDI(XPDA,XPDQUIT)
"RTN","XPDIL1",97,0)
 S XPDI=""
"RTN","XPDIL1",98,0)
 ;don't do if loading & leave global, need to keep XPDT(array)
"RTN","XPDIL1",99,0)
 F  S XPDI=$O(XPDQUIT(XPDI)) Q:XPDI=""  D:'(XPDQUIT(XPDI)=2&'XPDENV)
"RTN","XPDIL1",100,0)
 .S %=$G(XPDT("NM",XPDI)) D:% ABORT^XPDI(+XPDT(%),XPDQUIT(XPDI))
"RTN","XPDIL1",101,0)
 S XPDQUIT=$S($G(XPDQUIT):XPDQUIT,'$O(XPDT(0))!'$D(^XTMP("XPDI",XPDA)):1,1:0)
"RTN","XPDIL1",102,0)
 Q XPDQUIT
"RTN","XPDIL1",103,0)
 ;
"RTN","XPDIL1",104,0)
REQB() ;check for Required Builds
"RTN","XPDIL1",105,0)
 ;returns 0=ok, 1=failed kill global, 2=failed leave global
"RTN","XPDIL1",106,0)
 N XPDACT,XPDBLD,XPDI,XPDQ,XPDQUIT,XPDX,XPDX0,X,Y
"RTN","XPDIL1",107,0)
 S XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDQUIT=0,XPDI=0
"RTN","XPDIL1",108,0)
 Q:'$D(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"REQB")) 0
"RTN","XPDIL1",109,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"REQB",XPDI)) Q:'XPDI  S XPDX0=^(XPDI,0) D
"RTN","XPDIL1",110,0)
 .S XPDQ=0,XPDX=$P(XPDX0,U),XPDACT=$P(XPDX0,U,2),X=$$PKG^XPDUTL(XPDX),Y=$$VER^XPDUTL(XPDX),Z=$$VERSION^XPDUTL(X)
"RTN","XPDIL1",111,0)
 .;quit if current version is greater than what we are checking for
"RTN","XPDIL1",112,0)
 .Q:Z>Y
"RTN","XPDIL1",113,0)
 .I XPDX'["*" S:Z<Y XPDQ=2
"RTN","XPDIL1",114,0)
 .E  S:'$$PATCH^XPDUTL(XPDX) XPDQ=1
"RTN","XPDIL1",115,0)
 .Q:'XPDQ  S XPDQUIT=$S(XPDACT>XPDQUIT:XPDACT,1:XPDQUIT)
"RTN","XPDIL1",116,0)
 .;XPDACT=0 warning, =1 abort & kill global, =2 abort
"RTN","XPDIL1",117,0)
 .W !!,$S(XPDACT:"**INSTALL ABORTED**",1:"**WARNING**")_$S(XPDQ=1:" Patch ",1:" Package ")_XPDX_" is Required "_$S(XPDACT:"to install",1:"for")_" this package!!",!
"RTN","XPDIL1",118,0)
 Q:'XPDQUIT 0
"RTN","XPDIL1",119,0)
 ;don't do if leave global and loading
"RTN","XPDIL1",120,0)
 D:'(XPDQUIT=2&'XPDENV) ABORT^XPDI(XPDA,XPDQUIT)
"RTN","XPDIL1",121,0)
 Q XPDQUIT
"RTN","XPDIL1",122,0)
 ;
"RTN","XPDIL1",123,0)
 ;return a routine that can be run
"RTN","XPDIL1",124,0)
INRTN(X) N Y
"RTN","XPDIL1",125,0)
 S Y=$G(^XTMP("XPDI",XPDA,X)) Q:Y="" ""
"RTN","XPDIL1",126,0)
 S Y=$S(Y["^":Y,1:"^"_Y)
"RTN","XPDIL1",127,0)
 Q Y
"RTN","XPDIPM")
0^11^B3119553
"RTN","XPDIPM",1,0)
XPDIPM ;SFISC/RSD - Load a Packman Message ;12/05/97  12:27
"RTN","XPDIPM",2,0)
 ;;8.0;KERNEL;**21,28,68**;Jul 05, 1995
"RTN","XPDIPM",3,0)
 Q:'$D(^XMB(3.9,+$G(XMZ),0))
"RTN","XPDIPM",4,0)
 N X,XPD,Y S XPD=0
"RTN","XPDIPM",5,0)
 F  S XPD=$O(^XMB(3.9,XMZ,2,XPD)) Q:+XPD'=XPD  S X=^(XPD,0) I $E(X,1,11)="$TXT $KIDS " Q
"RTN","XPDIPM",6,0)
 S Y=$P(X,"$KIDS ",2)
"RTN","XPDIPM",7,0)
EN I 'XPD!'$L(Y) W !!,"Couldn't find a KIDS package!!",*7 Q
"RTN","XPDIPM",8,0)
 N DIR,DIRUT,GR,XPDA,XPDST,XPDIT,XPDT,XPDNM,XPDQUIT,XPDREQAB
"RTN","XPDIPM",9,0)
 S XPDST("H1")=$P(^XMB(3.9,XMZ,0),U),XPDST=0,XPDIT=1
"RTN","XPDIPM",10,0)
 W !?5,Y S XPDA=$$INST^XPDIL1(Y) G:'XPDA NONE^XPDIL
"RTN","XPDIPM",11,0)
 W !
"RTN","XPDIPM",12,0)
 S DIR(0)="Y",DIR("A")="Want to Continue with Load",DIR("B")="YES"
"RTN","XPDIPM",13,0)
 D ^DIR I 'Y!$D(DIRUT) D ABRTALL^XPDI(1) G NONE^XPDIL
"RTN","XPDIPM",14,0)
 W !,"Loading Distribution...",!
"RTN","XPDIPM",15,0)
 S ^XTMP("XPDI",0)=$$FMADD^XLFDT(DT,7)_U_DT
"RTN","XPDIPM",16,0)
 D GI I $G(XPDQUIT) D ABRTALL^XPDI(1) G NONE^XPDIL
"RTN","XPDIPM",17,0)
 D PKG^XPDIL1(XPDA)
"RTN","XPDIPM",18,0)
 Q
"RTN","XPDIPM",19,0)
GI D NXT Q:$G(XPDQUIT)
"RTN","XPDIPM",20,0)
 I X'="**INSTALL NAME**"!'$D(XPDT("NM",Y)) S XPDQUIT=1 Q
"RTN","XPDIPM",21,0)
 S GR="^XTMP(""XPDI"","_XPDA_","
"RTN","XPDIPM",22,0)
 F  D NXT Q:X=""!$D(XPDQUIT)  D
"RTN","XPDIPM",23,0)
 .S @(GR_X)=Y
"RTN","XPDIPM",24,0)
 Q
"RTN","XPDIPM",25,0)
NXT S (X,Y)="",XPD=$O(^XMB(3.9,XMZ,2,XPD)) G:+XPD'=XPD ERR S X=^(XPD,0)
"RTN","XPDIPM",26,0)
 I $E(X,1,5)="$END " S X="" Q
"RTN","XPDIPM",27,0)
 S XPD=$O(^XMB(3.9,XMZ,2,XPD)) G:+XPD'=XPD ERR
"RTN","XPDIPM",28,0)
 S Y=^XMB(3.9,XMZ,2,XPD,0)
"RTN","XPDIPM",29,0)
 Q
"RTN","XPDIPM",30,0)
XMP2 ;called from XMP2
"RTN","XPDIPM",31,0)
 N X,XPD,Y
"RTN","XPDIPM",32,0)
 S XPD=XCN,X=$G(^XMB(3.9,XMZ,2,XPD,0)),Y=$P(X,"$KID ",2)
"RTN","XPDIPM",33,0)
 D EN
"RTN","XPDIPM",34,0)
 S XMOUT=1
"RTN","XPDIPM",35,0)
 Q
"RTN","XPDIPM",36,0)
ERR W !!,"Error in Packman Message, ABORTING load!!"
"RTN","XPDIPM",37,0)
 S (X,Y)="",XPDQUIT=1
"RTN","XPDIPM",38,0)
 Q
"RTN","XPDT")
0^3^B55868945
"RTN","XPDT",1,0)
XPDT ;SFISC/RSD - Transport a package; 15 Apr 96 10:15 ;11/25/97  14:08
"RTN","XPDT",2,0)
 ;;8.0;KERNEL;**2,10,28,41,44,51,58,66,68**;Jul 10, 1995
"RTN","XPDT",3,0)
EN ;build XTMP("XPDT",ien, XPDA=ien,XPDNM=name
"RTN","XPDT",4,0)
 ;XPDT(seq #)=ien^name^1=use current transport global on system
"RTN","XPDT",5,0)
 ;XPDT("DA",ien)=seq #
"RTN","XPDT",6,0)
 ;XPDVER=version number^package name
"RTN","XPDT",7,0)
 ;XPDGP=flag;global^flag;global^...  flag=1 replace global at site
"RTN","XPDT",8,0)
 N DIR,DIRUT,I,POP,XPD,XPDA,XPDERR,XPDGP,XPDGREF,XPDH,XPDH1,XPDHD,XPDI,XPDNM,XPDSEQ,XPDSIZ,XPDSIZA,XPDT,XPDTP,XPDVER,X,Y,Z
"RTN","XPDT",9,0)
 K ^TMP($J,"XPD")
"RTN","XPDT",10,0)
 S XPD="First Package Name: ",DIR(0)="Y",DIR("A")="   Use this Transport Global",DIR("?")="Yes, will use the current Transport Global on your system. No, will create a new one.",XPDT=0
"RTN","XPDT",11,0)
 W !!,"Enter the Package Names to be transported. The order in which",!,"they are entered will be the order in which they are installed.",!!
"RTN","XPDT",12,0)
 F  S XPDA=$$DIC^XPDE("AEMQZ",XPD) Q:'XPDA  D  Q:$D(DIRUT)!$D(XPDERR)
"RTN","XPDT",13,0)
 .S:'XPDT XPD="Another Package Name: "
"RTN","XPDT",14,0)
 .;XPDI=name^1=use current transport global
"RTN","XPDT",15,0)
 .S XPDI=$P(Y(0),U)_"^"
"RTN","XPDT",16,0)
 .I $D(XPDT("DA",XPDA)) W "   ",$P(Y(0),U)," already listed",! Q
"RTN","XPDT",17,0)
 .;if type is Global Package, set DIRUT if there is other packages
"RTN","XPDT",18,0)
 .I $P(Y(0),U,3)=2 W "   GLOBAL PACKAGE" D  Q
"RTN","XPDT",19,0)
 ..;if there is already a package in distribution, abort
"RTN","XPDT",20,0)
 ..I XPDT S DIRUT=1 W !,"A GLOBAL PACKAGE cannot be sent with any other packages" Q
"RTN","XPDT",21,0)
 ..I $D(^XTMP("XPDT",XPDA)) W "  **Cannot have a pre-existing Transport Global**" S DIRUT=1 Q
"RTN","XPDT",22,0)
 ..W !?10,"will transport the following globals:",! S X=0,XPDGP=""
"RTN","XPDT",23,0)
 ..F  S X=$O(^XPD(9.6,XPDA,"GLO",X)) Q:'X  S Z=$G(^(X,0)) I $P(Z,U)]"" S XPDGP=XPDGP_($P(Z,U,2)="y")_";"_$P(Z,U)_"^" W ?12,$P(Z,U),!
"RTN","XPDT",24,0)
 ..;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",25,0)
 ..S XPDERR=1,XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",26,0)
 .Q:$D(XPDERR)
"RTN","XPDT",27,0)
 .D PCK(XPDA,XPDI)
"RTN","XPDT",28,0)
 .;multi-package
"RTN","XPDT",29,0)
 .Q:$P(Y(0),U,3)'=1
"RTN","XPDT",30,0)
 .W "   (Multi-Package)" S X=0
"RTN","XPDT",31,0)
 .F  S X=$O(^XPD(9.6,XPDA,10,X)) Q:'X  S Z=$P($G(^(X,0)),U) D:Z]""
"RTN","XPDT",32,0)
 ..N XPDA,X
"RTN","XPDT",33,0)
 ..W !?3,Z S XPDA=$O(^XPD(9.6,"B",Z,0))
"RTN","XPDT",34,0)
 ..I 'XPDA W "  **Can't find definition in Build file**" Q
"RTN","XPDT",35,0)
 ..I $D(XPDT("DA",XPDA)) W "  already listed" Q
"RTN","XPDT",36,0)
 ..D PCK(XPDA,Z)
"RTN","XPDT",37,0)
 .Q
"RTN","XPDT",38,0)
 G:'XPDT!$D(DIRUT) QUIT K XPDERR
"RTN","XPDT",39,0)
 W !!,"ORDER   PACKAGE",!
"RTN","XPDT",40,0)
 F XPDT=1:1:XPDT S Y=$P(XPDT(XPDT),U,2) W ?2,XPDT,?7,Y D  W !
"RTN","XPDT",41,0)
 .W:$P(XPDT(XPDT),U,3) "     **will use current Transport Global**"
"RTN","XPDT",42,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO",XPDH=""
"RTN","XPDT",43,0)
 W !! D ^DIR G:$D(DIRUT)!'Y QUIT K DIR
"RTN","XPDT",44,0)
 S DIR(0)="SAO^HF:Host File;PM:PackMan",DIR("A")="Transport through (HF)Host File or (PM)PackMan: ",DIR("?")="Enter the method of transport for the package(s)."
"RTN","XPDT",45,0)
 D ^DIR G:$D(DTOUT)!$D(DUOUT) QUIT K DIR
"RTN","XPDT",46,0)
 I Y="" W !,"No Transport Method selected, will only write Transport Global to ^XTMP." S XPDH=""
"RTN","XPDT",47,0)
 ;XPDTP = transports using Packman
"RTN","XPDT",48,0)
 S:Y="PM" XPDTP=1
"RTN","XPDT",49,0)
 I $D(XPDGP),Y'="HF" W !,"**Global Package can only be sent with a Host File, Transport ABORTED**" Q
"RTN","XPDT",50,0)
 I Y="HF" D DEV G:POP QUIT
"RTN","XPDT",51,0)
 I $G(XPDTP),XPDT>1 W !!,"You cannot send multiple Builds through PackMan." G QUIT
"RTN","XPDT",52,0)
 W !!
"RTN","XPDT",53,0)
 F XPDT=1:1:XPDT S XPDA=XPDT(XPDT),XPDNM=$P(XPDA,U,2) D  G:$D(XPDERR) ABORT
"RTN","XPDT",54,0)
 .W !?5,XPDNM,"..." S XPDGREF="^XTMP(""XPDT"","_+XPDA_",""TEMP"")"
"RTN","XPDT",55,0)
 .;if using current transport global, run pre-transp routine and quit
"RTN","XPDT",56,0)
 .I $P(XPDA,U,3) S XPDA=+XPDA D PRET Q
"RTN","XPDT",57,0)
 .;if package file link then set XPDVER=version number^package name
"RTN","XPDT",58,0)
 .S XPDA=+XPDA,XPDVER=$S($P(^XPD(9.6,XPDA,0),U,2):$$VER^XPDUTL(XPDNM)_U_$$PKG^XPDUTL(XPDNM),1:"")
"RTN","XPDT",59,0)
 .K ^XTMP("XPDT",XPDA)
"RTN","XPDT",60,0)
 .;GLOBAL PACKAGE
"RTN","XPDT",61,0)
 .I $D(XPDGP) D  S XPDT=1 Q
"RTN","XPDT",62,0)
 ..;can't send global package in packman message
"RTN","XPDT",63,0)
 ..I $G(XPDTP) S XPDERR=1 Q
"RTN","XPDT",64,0)
 ..;verify global package
"RTN","XPDT",65,0)
 ..I '$$GLOPKG^XPDV(XPDA) S XPDERR=1 Q
"RTN","XPDT",66,0)
 ..;get Environment check and Post Install routines
"RTN","XPDT",67,0)
 ..F Y="PRE","INIT" I $G(^XPD(9.6,XPDA,Y))]"" S X=^(Y) D
"RTN","XPDT",68,0)
 ...S ^XTMP("XPDT",XPDA,Y)=X,X=$P(X,U,$L(X,U)),%=$$LOAD^XPDTA(X,"0^")
"RTN","XPDT",69,0)
 ..D BLD^XPDTC,PRET
"RTN","XPDT",70,0)
 .F X="DD^XPDTC","KRN^XPDTC","QUES^XPDTC","INT^XPDTC","BLD^XPDTC" D @X Q:$D(XPDERR)
"RTN","XPDT",71,0)
 .D:'$D(XPDERR) PRET
"RTN","XPDT",72,0)
 ;XPDTP - call ^XPDTP to build Packman message
"RTN","XPDT",73,0)
 I $G(XPDTP) S XPDA=+XPDT(XPDT) D ^XPDTP G QUIT
"RTN","XPDT",74,0)
 I $L(XPDH) D GO G QUIT
"RTN","XPDT",75,0)
 ;if no device then just create transport global
"RTN","XPDT",76,0)
 W !! F XPDT=1:1:XPDT W "Transport Global ^XTMP(""XPDT"","_+XPDT(XPDT)_") created for ",$P(XPDT(XPDT),U,2),!
"RTN","XPDT",77,0)
 Q
"RTN","XPDT",78,0)
DEV N FIL,DIR,IOP,X,Y,%ZIS W !
"RTN","XPDT",79,0)
 D HOME^%ZIS
"RTN","XPDT",80,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to output package(s).",POP=0
"RTN","XPDT",81,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDT",82,0)
 ;if no file, then quit
"RTN","XPDT",83,0)
 Q:Y=""  S FIL=Y
"RTN","XPDT",84,0)
 S DIR(0)="F^3:80",DIR("A")="Header Comment"
"RTN","XPDT",85,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",86,0)
 S XPDH=Y,%ZIS="",%ZIS("HFSNAME")=FIL,%ZIS("HFSMODE")="W",IOP="HFS",(XPDSIZ,XPDSIZA)=0,XPDSEQ=1
"RTN","XPDT",87,0)
 ;if MSM and HFS file is on device A or B, then get size for floppy disk
"RTN","XPDT",88,0)
 ;XPDSIZ=disk size, XPDSIZA=accummulated size,XPDSEQ=disk sequence number
"RTN","XPDT",89,0)
 I ^%ZOSF("OS")["MSM",FIL?1(1"A",1"B")1":"1.E D  Q:POP
"RTN","XPDT",90,0)
 .S DIR(0)="N^0:5000",DIR("A")="Size of Diskette (1K blocks)",DIR("B")=1400,DIR("?")="Enter the number of 1K blocks which each diskette will hold, 0 means unlimited space"
"RTN","XPDT",91,0)
 .D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",92,0)
 .S XPDSIZ=$S(Y:Y*1024,1:0)
"RTN","XPDT",93,0)
 D ^%ZIS I POP W !!,"**Incorrect Host File name**",!,$C(7) Q
"RTN","XPDT",94,0)
 ;write date and comment header
"RTN","XPDT",95,0)
 S XPDHD="KIDS Distribution saved on "_$$HTE^XLFDT($H)
"RTN","XPDT",96,0)
 U IO W $$SUM(XPDHD),!,$$SUM(XPDH),!
"RTN","XPDT",97,0)
 ;U IO(0) is to insure I am writing to the terminal
"RTN","XPDT",98,0)
 U IO(0) Q
"RTN","XPDT",99,0)
 ;
"RTN","XPDT",100,0)
GO S I=1,Y="",XPDH1="**KIDS**:" U IO
"RTN","XPDT",101,0)
 ;Global Package, header is different and there is only 1 package
"RTN","XPDT",102,0)
 I $D(XPDGP) W $$SUM("**KIDS**GLOBALS:"_$P(XPDT(1),U,2)_U_XPDGP),! G GO1
"RTN","XPDT",103,0)
 ;write header that maintains package list, keep less than 255 char
"RTN","XPDT",104,0)
 F  D  W $$SUM(XPDH1_Y),! Q:I=XPDT  S Y="",I=I+1,XPDH1="**KIDS**"
"RTN","XPDT",105,0)
 .F I=I:1 S Y=Y_$P(XPDT(I),U,2)_"^" Q:$L(Y)>200!(I=XPDT)
"RTN","XPDT",106,0)
 ;after the package list write an extra line feed
"RTN","XPDT",107,0)
GO1 W ! S XPDSIZA=XPDSIZA+2
"RTN","XPDT",108,0)
 ;loop thru & write global, don't kill if set to permanent, set in XPDIU
"RTN","XPDT",109,0)
 F XPDT=1:1:XPDT S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2) D GW K:'$G(^XTMP("XPDT",XPDA)) ^(XPDA)
"RTN","XPDT",110,0)
 W "**END**",!
"RTN","XPDT",111,0)
 ;GLOBAL PACKAGE there could only be one package, write globals
"RTN","XPDT",112,0)
 I $D(XPDGP) D GPW W "**END**",!
"RTN","XPDT",113,0)
 ;we're done with device, close it
"RTN","XPDT",114,0)
 W "**END**",! D ^%ZISC
"RTN","XPDT",115,0)
 W !!,"Package Transported Successfully",!
"RTN","XPDT",116,0)
 Q
"RTN","XPDT",117,0)
GW ;global write
"RTN","XPDT",118,0)
 N GR,GCK,GL
"RTN","XPDT",119,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDT",120,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDT",121,0)
 ;the next INSTALL NAME
"RTN","XPDT",122,0)
 W $$SUM("**INSTALL NAME**",1),!,$$SUM(XPDNM),!
"RTN","XPDT",123,0)
 F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",124,0)
 Q
"RTN","XPDT",125,0)
GPW ;global package write
"RTN","XPDT",126,0)
 N I,G,GR,GCK,GL
"RTN","XPDT",127,0)
 W !
"RTN","XPDT",128,0)
 F I=1:1 S G=$P(XPDGP,U,I) Q:G=""  D
"RTN","XPDT",129,0)
 .S GR="^"_$P(G,";",2),GCK=$S(GR[")":$E(GR,1,$L(GR)-1)_",",1:GR_"("),GL=$L(GCK)
"RTN","XPDT",130,0)
 .;GLOBAL line will mark the begining of global for all lines until
"RTN","XPDT",131,0)
 .;the next GLOBAL
"RTN","XPDT",132,0)
 .W $$SUM("**GLOBAL**",1),!,$$SUM(GR),!
"RTN","XPDT",133,0)
 .F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",134,0)
 Q
"RTN","XPDT",135,0)
QUIT F XPDT=1:1:XPDT L -^XPD(9.6,+XPDT(XPDT))
"RTN","XPDT",136,0)
 Q
"RTN","XPDT",137,0)
ABORT W !!,"**TRANSPORT ABORTED**",*7
"RTN","XPDT",138,0)
 D QUIT
"RTN","XPDT",139,0)
 F XPDT=1:1:XPDT K ^XTMP("XPDT",+XPDT(XPDT))
"RTN","XPDT",140,0)
 D ^%ZISC
"RTN","XPDT",141,0)
 Q
"RTN","XPDT",142,0)
 ;
"RTN","XPDT",143,0)
PCK(XPDA,XPDNM) ;XPDA=Build ien, XPDNM=Build name
"RTN","XPDT",144,0)
 N Y
"RTN","XPDT",145,0)
 S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDNM,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",146,0)
 Q:'$D(^XTMP("XPDT",XPDA))  S Y=$G(^(XPDA))
"RTN","XPDT",147,0)
 W "     **Transport Global exists**"
"RTN","XPDT",148,0)
 ;Y=1 if TG is permanet
"RTN","XPDT",149,0)
 I Y S $P(XPDT(XPDT),U,3)=1 Q
"RTN","XPDT",150,0)
 ;ask if they want to use TG
"RTN","XPDT",151,0)
 D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",152,0)
 Q
"RTN","XPDT",153,0)
 ;
"RTN","XPDT",154,0)
SUM(X,Z) ;X=string to write, Z 0=don't check size
"RTN","XPDT",155,0)
 S XPDSIZA=XPDSIZA+$L(X)+2
"RTN","XPDT",156,0)
 ;ask for next disk
"RTN","XPDT",157,0)
 ;this code is for MSM system only
"RTN","XPDT",158,0)
 I $G(Z),XPDSIZ,XPDSIZ-XPDSIZA<1024 D
"RTN","XPDT",159,0)
 .;write continue flag at end of this file
"RTN","XPDT",160,0)
 .W "**CONTINUE**",!,"**END**",!
"RTN","XPDT",161,0)
 .;should call %ZIS HFS utilities to close and open file
"RTN","XPDT",162,0)
 .C IO U IO(0)
"RTN","XPDT",163,0)
 .N DIR,G,GR,GCK,GL,I,X,Y
"RTN","XPDT",164,0)
 .W !!,"Diskette #",XPDSEQ," is full."
"RTN","XPDT",165,0)
 .S DIR(0)="E",DIR("A")="Insert the next diskette and Press the return key",DIR("?")="The current diskette is full, insert a new diskette to continue."
"RTN","XPDT",166,0)
 .;$D(DIRUT)=the user aborted the distribution
"RTN","XPDT",167,0)
 .D ^DIR I $D(DIRUT) D ABORT Q
"RTN","XPDT",168,0)
 .W ! S XPDSEQ=XPDSEQ+1,XPDSIZA=0
"RTN","XPDT",169,0)
 .;MSM specific code to open HFS
"RTN","XPDT",170,0)
 .O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDT",171,0)
 .W $$SUM("Continuation #"_XPDSEQ_" of "_XPDHD),!,$$SUM(XPDH),!,$$SUM("**SEQ**:"_XPDSEQ),!!
"RTN","XPDT",172,0)
 .S XPDSIZA=XPDSIZA+2
"RTN","XPDT",173,0)
 Q X
"RTN","XPDT",174,0)
 ;
"RTN","XPDT",175,0)
PRET ;Pre-Transport Routine
"RTN","XPDT",176,0)
 N Y S Y=$G(^XPD(9.6,XPDA,"PRET")) Q:Y=""
"RTN","XPDT",177,0)
 I '$$RTN^XPDV(Y) W !!,"Pre-Transportation Routine DOESN'T EXIST!!",*7 Q
"RTN","XPDT",178,0)
 S Y=$S(Y["^":Y,1:"^"_Y) W !,"Running Pre-Transportation Routine ",Y
"RTN","XPDT",179,0)
 D @Y Q
"RTN","XPDTA1")
0^13^B15140648
"RTN","XPDTA1",1,0)
XPDTA1 ;SFISC/RSD - Build Actions for Kernel Files Cont. ;03/11/98  08:26
"RTN","XPDTA1",2,0)
 ;;8.0;KERNEL;**44,68**;Jul 10, 1995
"RTN","XPDTA1",3,0)
 Q
"RTN","XPDTA1",4,0)
 ;^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA) is the global root
"RTN","XPDTA1",5,0)
 ;DA=ien in ^XTMP,XPDNM=package name, XPDA=package ien in ^XPD(9.6,
"RTN","XPDTA1",6,0)
 Q
"RTN","XPDTA1",7,0)
HELP ;help frames #9.2
"RTN","XPDTA1",8,0)
 ;remove Author (0;4), kill Editor (4;0) and under Object (10) kill "B" x-ref
"RTN","XPDTA1",9,0)
 S $P(^XTMP("XPDT",XPDA,"KRN",9.2,DA,0),U,4)="",%=0 K ^(4),^(10,"B")
"RTN","XPDTA1",10,0)
 ;loop thru Objects (10) and resolve (10;1), kill if it doesn't resolve
"RTN","XPDTA1",11,0)
 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",9.2,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA1",12,0)
 .S %2=$$PT^XPDTA("^MAG",+%1)
"RTN","XPDTA1",13,0)
 .I $L(%2) S $P(^XTMP("XPDT",XPDA,"KRN",9.2,DA,10,%,0),U)=%2 Q
"RTN","XPDTA1",14,0)
 .K ^XTMP("XPDT",XPDA,"KRN",9.2,DA,10,%)
"RTN","XPDTA1",15,0)
 ;kill under Related Frame (2) "B" x-ref
"RTN","XPDTA1",16,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,"B") S %=0
"RTN","XPDTA1",17,0)
 ;loop thru Related Frame (2) and resolve Related Frame (2;2)
"RTN","XPDTA1",18,0)
 ;kill if it doesn't resolve
"RTN","XPDTA1",19,0)
 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,%)) Q:'%  S %1=$P($G(^(%,0)),U,2) D
"RTN","XPDTA1",20,0)
 .S %2=$$PT^XPDTA("^DIC(9.2)",%1)
"RTN","XPDTA1",21,0)
 .I $L(%2) S $P(^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,%,0),U,2)=%2 Q
"RTN","XPDTA1",22,0)
 .K ^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,%)
"RTN","XPDTA1",23,0)
 Q
"RTN","XPDTA1",24,0)
BUL ;bulletines #3.6
"RTN","XPDTA1",25,0)
KEY ;security keys entry action #19
"RTN","XPDTA1",26,0)
 ;kill Mailgroups (2)
"RTN","XPDTA1",27,0)
 K ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,2)
"RTN","XPDTA1",28,0)
 Q
"RTN","XPDTA1",29,0)
MAILG ;MAIL GROUP #3.8
"RTN","XPDTA1",30,0)
 ;remove REFERENCE COUNT (0;4), LAST REFERENCE (0;5), COORDINATOR (0;7)
"RTN","XPDTA1",31,0)
 S %=^XTMP("XPDT",XPDA,"KRN",3.8,DA,0),$P(%,U,4,5)="^",$P(%,U,7)="",^(0)=%
"RTN","XPDTA1",32,0)
 ;remove ORGANIZER (3;1)
"RTN","XPDTA1",33,0)
 S %=$P($G(^XTMP("XPDT",XPDA,"KRN",3.8,DA,3)),U) S:% $P(^(3),U)=""
"RTN","XPDTA1",34,0)
 ;kill MEMBER (1;0), AUTHORIZE SENDER (4;0), DISTRIBUTION LIST (7;0)
"RTN","XPDTA1",35,0)
 K ^XTMP("XPDT",XPDA,"KRN",3.8,DA,1),^(4),^(7)
"RTN","XPDTA1",36,0)
 ;kill MEMBER GROUP "B" x-ref 
"RTN","XPDTA1",37,0)
 K ^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,"B") S %=0
"RTN","XPDTA1",38,0)
 ;loop thru MEMBER GROUP and resolve (5;0)
"RTN","XPDTA1",39,0)
 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,%)) Q:'%  S %1=$P($G(^(%,0)),U) D
"RTN","XPDTA1",40,0)
 .S %2=$$PT^XPDTA("^XMB(3.8)",%1)
"RTN","XPDTA1",41,0)
 .I $L(%2) S $P(^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,%,0),U)=%2 Q
"RTN","XPDTA1",42,0)
 .K ^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,%)
"RTN","XPDTA1",43,0)
 Q
"RTN","XPDTA1",44,0)
HLAP ;HL7 application parameter #771
"RTN","XPDTA1",45,0)
 S %=^XTMP("XPDT",XPDA,"KRN",771,DA,0)
"RTN","XPDTA1",46,0)
 ;resolve MAIL GROUP (0;4)
"RTN","XPDTA1",47,0)
 S:$P(%,U,4) $P(%,U,4)=$$PT^XPDTA("^XMB(3.8)",$P(%,U,4))
"RTN","XPDTA1",48,0)
 ;resolve COUNTRY CODE (0;7)
"RTN","XPDTA1",49,0)
 S:$P(%,U,7) $P(%,U,7)=$$PT^XPDTA("^HL(779.004)",$P(%,U,7))
"RTN","XPDTA1",50,0)
 S ^XTMP("XPDT",XPDA,"KRN",771,DA,0)=%
"RTN","XPDTA1",51,0)
 ;resolve HL7 SEGMENT (SEG;0)
"RTN","XPDTA1",52,0)
 ;kill "B"=name x-ref, it will be re-indexed when installed
"RTN","XPDTA1",53,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG")) K ^("SEG","B") D
"RTN","XPDTA1",54,0)
 .;loop thru SEGs and resolve (SEG;1)
"RTN","XPDTA1",55,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG",%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA1",56,0)
 ..S %2=$$PT^XPDTA("^HL(771.3)",+%1)
"RTN","XPDTA1",57,0)
 ..;if can't resolve then delete
"RTN","XPDTA1",58,0)
 ..I %2="" K ^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG",%) Q
"RTN","XPDTA1",59,0)
 ..;save the SEG name
"RTN","XPDTA1",60,0)
 ..S $P(^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG",%,0),U)=%2
"RTN","XPDTA1",61,0)
 .Q
"RTN","XPDTA1",62,0)
 ;resolve HL7 MESSAGE (MSG;0)
"RTN","XPDTA1",63,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG")) K ^("MSG","B") D
"RTN","XPDTA1",64,0)
 .;loop thru MSGs and resolve (MSG;1)
"RTN","XPDTA1",65,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG",%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA1",66,0)
 ..S %2=$$PT^XPDTA("^HL(771.3)",+%1)
"RTN","XPDTA1",67,0)
 ..;if can't resolve then delete
"RTN","XPDTA1",68,0)
 ..I %2="" K ^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG",%) Q
"RTN","XPDTA1",69,0)
 ..;save the MSG name
"RTN","XPDTA1",70,0)
 ..S $P(^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG",%,0),U)=%2
"RTN","XPDTA1",71,0)
 .Q
"RTN","XPDTA1",72,0)
 Q
"RTN","XPDTA1",73,0)
HLLLP ;HL7 lower level protocol #869.2
"RTN","XPDTA1",74,0)
 S %=$P(^XTMP("XPDT",XPDA,"KRN",869.2,DA,0),U,2)
"RTN","XPDTA1",75,0)
 ;resolve LLP TYPE (0;2)
"RTN","XPDTA1",76,0)
 S:% %=$$PT^XPDTA("^HLCS(869.1)",%),$P(^XTMP("XPDT",XPDA,"KRN",869.2,DA,0),U,2)=%
"RTN","XPDTA1",77,0)
 ;resolve MAIL GROUP (100;1)
"RTN","XPDTA1",78,0)
 S %=$P($G(^XTMP("XPDT",XPDA,"KRN",869.2,DA,100)),U)
"RTN","XPDTA1",79,0)
 S:% %=$$PT^XPDTA("^XMB(3.8)",%),$P(^XTMP("XPDT",XPDA,"KRN",869.2,DA,100),U)=%
"RTN","XPDTA1",80,0)
 ;remove HLLP DEVICE (200;1)
"RTN","XPDTA1",81,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",869.2,DA,200)) S $P(^(200),U)=""
"RTN","XPDTA1",82,0)
 ;remove X3.28 DEVICE (300;1)
"RTN","XPDTA1",83,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",869.2,DA,300)) S $P(^(300),U)=""
"RTN","XPDTA1",84,0)
 ;remove TCP/IP Address, Port, Startup Node (400;1/2/6)
"RTN","XPDTA1",85,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",869.2,DA,400))  D
"RTN","XPDTA1",86,0)
 . S $P(^(400),U,1)=""
"RTN","XPDTA1",87,0)
 . S $P(^(400),U,2)=""
"RTN","XPDTA1",88,0)
 . S $P(^(400),U,6)=""
"RTN","XPDTA1",89,0)
 . Q
"RTN","XPDTA1",90,0)
 Q
"RTN","XPDTA1",91,0)
HLLL ;HL7 logical link #870
"RTN","XPDTA1",92,0)
 S %=^XTMP("XPDT",XPDA,"KRN",870,DA,0)
"RTN","XPDTA1",93,0)
 ;resolve INSTITUTION (0;2)
"RTN","XPDTA1",94,0)
 S:$P(%,U,2) $P(%,U,2)=$$PT^XPDTA("^DIC(4)",$P(%,U,2))
"RTN","XPDTA1",95,0)
 ;resolve LLP PARAMETERS (0;3)
"RTN","XPDTA1",96,0)
 S:$P(%,U,3) $P(%,U,3)=$$PT^XPDTA("^HLCS(869.2)",$P(%,U,3))
"RTN","XPDTA1",97,0)
 ;resolve DOMAIN (0;7)
"RTN","XPDTA1",98,0)
 S:$P(%,U,7) $P(%,U,7)=$$PT^XPDTA("^DIC(4.2)",$P(%,U,7))
"RTN","XPDTA1",99,0)
 ;remove all data except (0;1-3,21)
"RTN","XPDTA1",100,0)
 S %=$P(%,U,1,3)_"^^^^^^^^^^^^^^^^^^"_$P(%,U,21)
"RTN","XPDTA1",101,0)
 S ^XTMP("XPDT",XPDA,"KRN",870,DA,0)=%
"RTN","XPDTA1",102,0)
 K ^XTMP("XPDT",XPDA,"KRN",870,DA,1),^(2),^("IN QUEUE BACK POINTER"),^("IN QUEUE FRONT POINTER")
"RTN","XPDTA1",103,0)
 K ^XTMP("XPDT",XPDA,"KRN",870,DA,"OUT QUEUE BACK POINTER"),^("OUT QUEUE FRONT POINTER")
"RTN","XPDTA1",104,0)
 Q
"VER")
8.0^21.0
**END**
**END**
