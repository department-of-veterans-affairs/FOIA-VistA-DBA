Released ROR*1.5*1 SEQ #1
Extracted from mail message
**KIDS**:ROR*1.5*1^

**INSTALL NAME**
ROR*1.5*1
"BLD",6002,0)
ROR*1.5*1^CLINICAL CASE REGISTRIES^0^3061121^y
"BLD",6002,1,0)
^^2^2^3060911^
"BLD",6002,1,1,0)
Post-implementation enhancements for the Clinical Case Registries v1.5
"BLD",6002,1,2,0)
package.
"BLD",6002,4,0)
^9.64PA^798.8^5
"BLD",6002,4,798.8,0)
798.8
"BLD",6002,4,798.8,2,0)
^9.641^798.87^1
"BLD",6002,4,798.8,2,798.87,0)
REPORT ELEMENT  (sub-file)
"BLD",6002,4,798.8,2,798.87,1,0)
^9.6411^.03^1
"BLD",6002,4,798.8,2,798.87,1,.03,0)
SORT BY
"BLD",6002,4,798.8,222)
y^n^p^^^^n^^n
"BLD",6002,4,798.8,224)

"BLD",6002,4,798.9,0)
798.9
"BLD",6002,4,798.9,222)
n^n^f^^n^^y^m^n
"BLD",6002,4,798.9,224)
I $E($P($G(^ROR(798.9,Y,0)),U),1,6)="VA HIV"
"BLD",6002,4,799.31,0)
799.31
"BLD",6002,4,799.31,222)
n^n^f^^n^^y^o^n
"BLD",6002,4,799.34,0)
799.34
"BLD",6002,4,799.34,222)
n^n^f^^n^^y^o^n
"BLD",6002,4,799.4,0)
799.4
"BLD",6002,4,799.4,2,0)
^9.641^799.41^2
"BLD",6002,4,799.4,2,799.4,0)
ROR HIV RECORD  (File-top level)
"BLD",6002,4,799.4,2,799.4,1,0)
^9.6411^22.09^1
"BLD",6002,4,799.4,2,799.4,1,22.09,0)
SUBSTANCE ABUSE TREATMENT
"BLD",6002,4,799.4,2,799.41,0)
AIDS INDICATOR DISEASE  (sub-file)
"BLD",6002,4,799.4,2,799.41,1,0)
^9.6411^.03^3
"BLD",6002,4,799.4,2,799.41,1,.01,0)
AIDS INDICATOR DISEASE
"BLD",6002,4,799.4,2,799.41,1,.02,0)
INITIAL DIAGNOSIS
"BLD",6002,4,799.4,2,799.41,1,.03,0)
DATE
"BLD",6002,4,799.4,222)
y^y^p^^^^n^^n
"BLD",6002,4,799.4,224)

"BLD",6002,4,"APDD",798.8,798.87)

"BLD",6002,4,"APDD",798.8,798.87,.03)

"BLD",6002,4,"APDD",799.4,799.4)

"BLD",6002,4,"APDD",799.4,799.4,22.09)

"BLD",6002,4,"APDD",799.4,799.41)

"BLD",6002,4,"APDD",799.4,799.41,.01)

"BLD",6002,4,"APDD",799.4,799.41,.02)

"BLD",6002,4,"APDD",799.4,799.41,.03)

"BLD",6002,4,"B",798.8,798.8)

"BLD",6002,4,"B",798.9,798.9)

"BLD",6002,4,"B",799.31,799.31)

"BLD",6002,4,"B",799.34,799.34)

"BLD",6002,4,"B",799.4,799.4)

"BLD",6002,6.3)
24
"BLD",6002,"INIT")
POS^RORP001
"BLD",6002,"KRN",0)
^9.67PA^8989.52^19
"BLD",6002,"KRN",.4,0)
.4
"BLD",6002,"KRN",.401,0)
.401
"BLD",6002,"KRN",.402,0)
.402
"BLD",6002,"KRN",.403,0)
.403
"BLD",6002,"KRN",.5,0)
.5
"BLD",6002,"KRN",.84,0)
.84
"BLD",6002,"KRN",.84,"NM",0)
^9.68A^14^14
"BLD",6002,"KRN",.84,"NM",1,0)
7980000.018^^0
"BLD",6002,"KRN",.84,"NM",2,0)
7981015.001^^0
"BLD",6002,"KRN",.84,"NM",3,0)
7981015.002^^0
"BLD",6002,"KRN",.84,"NM",4,0)
7981012.001^^0
"BLD",6002,"KRN",.84,"NM",5,0)
7981995.001^^0
"BLD",6002,"KRN",.84,"NM",6,0)
7981999.001^^0
"BLD",6002,"KRN",.84,"NM",7,0)
7981996.001^^0
"BLD",6002,"KRN",.84,"NM",8,0)
7981011.001^^0
"BLD",6002,"KRN",.84,"NM",9,0)
7981013.001^^0
"BLD",6002,"KRN",.84,"NM",10,0)
7981013.002^^0
"BLD",6002,"KRN",.84,"NM",11,0)
7981997.001^^0
"BLD",6002,"KRN",.84,"NM",12,0)
7981999.002^^0
"BLD",6002,"KRN",.84,"NM",13,0)
7981011.002^^0
"BLD",6002,"KRN",.84,"NM",14,0)
7981012.002^^0
"BLD",6002,"KRN",.84,"NM","B",7980000.018,1)

"BLD",6002,"KRN",.84,"NM","B",7981011.001,8)

"BLD",6002,"KRN",.84,"NM","B",7981011.002,13)

"BLD",6002,"KRN",.84,"NM","B",7981012.001,4)

"BLD",6002,"KRN",.84,"NM","B",7981012.002,14)

"BLD",6002,"KRN",.84,"NM","B",7981013.001,9)

"BLD",6002,"KRN",.84,"NM","B",7981013.002,10)

"BLD",6002,"KRN",.84,"NM","B",7981015.001,2)

"BLD",6002,"KRN",.84,"NM","B",7981015.002,3)

"BLD",6002,"KRN",.84,"NM","B",7981995.001,5)

"BLD",6002,"KRN",.84,"NM","B",7981996.001,7)

"BLD",6002,"KRN",.84,"NM","B",7981997.001,11)

"BLD",6002,"KRN",.84,"NM","B",7981999.001,6)

"BLD",6002,"KRN",.84,"NM","B",7981999.002,12)

"BLD",6002,"KRN",3.6,0)
3.6
"BLD",6002,"KRN",3.8,0)
3.8
"BLD",6002,"KRN",9.2,0)
9.2
"BLD",6002,"KRN",9.8,0)
9.8
"BLD",6002,"KRN",9.8,"NM",0)
^9.68A^55^53
"BLD",6002,"KRN",9.8,"NM",1,0)
RORHL01^^0^B6979716
"BLD",6002,"KRN",9.8,"NM",2,0)
RORHL08^^0^B41390061
"BLD",6002,"KRN",9.8,"NM",3,0)
RORHL09^^0^B43916632
"BLD",6002,"KRN",9.8,"NM",4,0)
RORUTL05^^0^B57340264
"BLD",6002,"KRN",9.8,"NM",5,0)
RORX005A^^0^B28503229
"BLD",6002,"KRN",9.8,"NM",6,0)
RORRP015^^0^B22232247
"BLD",6002,"KRN",9.8,"NM",7,0)
RORXU006^^0^B33479372
"BLD",6002,"KRN",9.8,"NM",8,0)
RORHL05^^0^B21726569
"BLD",6002,"KRN",9.8,"NM",9,0)
RORHL06^^0^B22360374
"BLD",6002,"KRN",9.8,"NM",10,0)
RORHL10^^0^B39368946
"BLD",6002,"KRN",9.8,"NM",11,0)
RORHL11^^0^B29297297
"BLD",6002,"KRN",9.8,"NM",12,0)
RORHL12^^0^B9125680
"BLD",6002,"KRN",9.8,"NM",13,0)
RORHL03^^0^B37781969
"BLD",6002,"KRN",9.8,"NM",14,0)
RORHL031^^0^B36598312
"BLD",6002,"KRN",9.8,"NM",15,0)
RORHL07^^0^B12998174
"BLD",6002,"KRN",9.8,"NM",16,0)
RORP000^^1^
"BLD",6002,"KRN",9.8,"NM",17,0)
RORP000A^^1^
"BLD",6002,"KRN",9.8,"NM",18,0)
RORP000B^^1^
"BLD",6002,"KRN",9.8,"NM",19,0)
RORHDT^^0^B15590264
"BLD",6002,"KRN",9.8,"NM",20,0)
RORHDTAC^^0^B10129547
"BLD",6002,"KRN",9.8,"NM",21,0)
RORRP020^^0^B26441857
"BLD",6002,"KRN",9.8,"NM",22,0)
RORTSK13^^0^B43389000
"BLD",6002,"KRN",9.8,"NM",23,0)
RORXU005^^0^B18041693
"BLD",6002,"KRN",9.8,"NM",24,0)
RORXU002^^0^B55243922
"BLD",6002,"KRN",9.8,"NM",25,0)
RORX015A^^0^B62875777
"BLD",6002,"KRN",9.8,"NM",26,0)
RORX015C^^0^B20478911
"BLD",6002,"KRN",9.8,"NM",27,0)
RORX015^^0^B12843309
"BLD",6002,"KRN",9.8,"NM",28,0)
RORPUT01^^0^B26910260
"BLD",6002,"KRN",9.8,"NM",29,0)
RORRP026^^0^B70133465
"BLD",6002,"KRN",9.8,"NM",30,0)
RORHL071^^0^B12541505
"BLD",6002,"KRN",9.8,"NM",31,0)
RORHL15^^0^B20217488
"BLD",6002,"KRN",9.8,"NM",32,0)
RORX011^^0^B55424933
"BLD",6002,"KRN",9.8,"NM",33,0)
RORRP019^^0^B43614139
"BLD",6002,"KRN",9.8,"NM",34,0)
RORDD01^^0^B22524971
"BLD",6002,"KRN",9.8,"NM",35,0)
RORRP016^^0^B43771782
"BLD",6002,"KRN",9.8,"NM",36,0)
RORX013^^0^B8643469
"BLD",6002,"KRN",9.8,"NM",37,0)
RORX013A^^0^B48499761
"BLD",6002,"KRN",9.8,"NM",38,0)
RORXU008^^0^B8451586
"BLD",6002,"KRN",9.8,"NM",39,0)
ROR^^0^B21431367
"BLD",6002,"KRN",9.8,"NM",40,0)
RORNTEG^^0^B18682538
"BLD",6002,"KRN",9.8,"NM",41,0)
RORNTEG0^^0^B4460463
"BLD",6002,"KRN",9.8,"NM",42,0)
RORLOCK^^0^B28241178
"BLD",6002,"KRN",9.8,"NM",45,0)
RORUPD05^^0^B44215296
"BLD",6002,"KRN",9.8,"NM",46,0)
RORUPD51^^0^B43539129
"BLD",6002,"KRN",9.8,"NM",47,0)
RORXU003^^0^B50580247
"BLD",6002,"KRN",9.8,"NM",48,0)
RORRP027^^0^B53199724
"BLD",6002,"KRN",9.8,"NM",49,0)
RORX002^^0^B20071176
"BLD",6002,"KRN",9.8,"NM",50,0)
ROR01^^0^B17051
"BLD",6002,"KRN",9.8,"NM",51,0)
RORTSK10^^0^B41068806
"BLD",6002,"KRN",9.8,"NM",52,0)
RORTSK11^^0^B19016382
"BLD",6002,"KRN",9.8,"NM",53,0)
RORX003^^0^B21537399
"BLD",6002,"KRN",9.8,"NM",54,0)
RORX003A^^0^B45547475
"BLD",6002,"KRN",9.8,"NM",55,0)
RORX007A^^0^B11759892
"BLD",6002,"KRN",9.8,"NM","B","ROR",39)

"BLD",6002,"KRN",9.8,"NM","B","ROR01",50)

"BLD",6002,"KRN",9.8,"NM","B","RORDD01",34)

"BLD",6002,"KRN",9.8,"NM","B","RORHDT",19)

"BLD",6002,"KRN",9.8,"NM","B","RORHDTAC",20)

"BLD",6002,"KRN",9.8,"NM","B","RORHL01",1)

"BLD",6002,"KRN",9.8,"NM","B","RORHL03",13)

"BLD",6002,"KRN",9.8,"NM","B","RORHL031",14)

"BLD",6002,"KRN",9.8,"NM","B","RORHL05",8)

"BLD",6002,"KRN",9.8,"NM","B","RORHL06",9)

"BLD",6002,"KRN",9.8,"NM","B","RORHL07",15)

"BLD",6002,"KRN",9.8,"NM","B","RORHL071",30)

"BLD",6002,"KRN",9.8,"NM","B","RORHL08",2)

"BLD",6002,"KRN",9.8,"NM","B","RORHL09",3)

"BLD",6002,"KRN",9.8,"NM","B","RORHL10",10)

"BLD",6002,"KRN",9.8,"NM","B","RORHL11",11)

"BLD",6002,"KRN",9.8,"NM","B","RORHL12",12)

"BLD",6002,"KRN",9.8,"NM","B","RORHL15",31)

"BLD",6002,"KRN",9.8,"NM","B","RORLOCK",42)

"BLD",6002,"KRN",9.8,"NM","B","RORNTEG",40)

"BLD",6002,"KRN",9.8,"NM","B","RORNTEG0",41)

"BLD",6002,"KRN",9.8,"NM","B","RORP000",16)

"BLD",6002,"KRN",9.8,"NM","B","RORP000A",17)

"BLD",6002,"KRN",9.8,"NM","B","RORP000B",18)

"BLD",6002,"KRN",9.8,"NM","B","RORPUT01",28)

"BLD",6002,"KRN",9.8,"NM","B","RORRP015",6)

"BLD",6002,"KRN",9.8,"NM","B","RORRP016",35)

"BLD",6002,"KRN",9.8,"NM","B","RORRP019",33)

"BLD",6002,"KRN",9.8,"NM","B","RORRP020",21)

"BLD",6002,"KRN",9.8,"NM","B","RORRP026",29)

"BLD",6002,"KRN",9.8,"NM","B","RORRP027",48)

"BLD",6002,"KRN",9.8,"NM","B","RORTSK10",51)

"BLD",6002,"KRN",9.8,"NM","B","RORTSK11",52)

"BLD",6002,"KRN",9.8,"NM","B","RORTSK13",22)

"BLD",6002,"KRN",9.8,"NM","B","RORUPD05",45)

"BLD",6002,"KRN",9.8,"NM","B","RORUPD51",46)

"BLD",6002,"KRN",9.8,"NM","B","RORUTL05",4)

"BLD",6002,"KRN",9.8,"NM","B","RORX002",49)

"BLD",6002,"KRN",9.8,"NM","B","RORX003",53)

"BLD",6002,"KRN",9.8,"NM","B","RORX003A",54)

"BLD",6002,"KRN",9.8,"NM","B","RORX005A",5)

"BLD",6002,"KRN",9.8,"NM","B","RORX007A",55)

"BLD",6002,"KRN",9.8,"NM","B","RORX011",32)

"BLD",6002,"KRN",9.8,"NM","B","RORX013",36)

"BLD",6002,"KRN",9.8,"NM","B","RORX013A",37)

"BLD",6002,"KRN",9.8,"NM","B","RORX015",27)

"BLD",6002,"KRN",9.8,"NM","B","RORX015A",25)

"BLD",6002,"KRN",9.8,"NM","B","RORX015C",26)

"BLD",6002,"KRN",9.8,"NM","B","RORXU002",24)

"BLD",6002,"KRN",9.8,"NM","B","RORXU003",47)

"BLD",6002,"KRN",9.8,"NM","B","RORXU005",23)

"BLD",6002,"KRN",9.8,"NM","B","RORXU006",7)

"BLD",6002,"KRN",9.8,"NM","B","RORXU008",38)

"BLD",6002,"KRN",19,0)
19
"BLD",6002,"KRN",19.1,0)
19.1
"BLD",6002,"KRN",101,0)
101
"BLD",6002,"KRN",409.61,0)
409.61
"BLD",6002,"KRN",771,0)
771
"BLD",6002,"KRN",870,0)
870
"BLD",6002,"KRN",8989.51,0)
8989.51
"BLD",6002,"KRN",8989.52,0)
8989.52
"BLD",6002,"KRN",8994,0)
8994
"BLD",6002,"KRN",8994,"NM",0)
^9.68A^6^6
"BLD",6002,"KRN",8994,"NM",1,0)
ROR LIST PATIENTS^^0
"BLD",6002,"KRN",8994,"NM",2,0)
ROR PATIENT GET DATA^^0
"BLD",6002,"KRN",8994,"NM",3,0)
RORICR PATIENT LOAD^^0
"BLD",6002,"KRN",8994,"NM",4,0)
RORHEPC PATIENT LOAD^^0
"BLD",6002,"KRN",8994,"NM",5,0)
ROR REPORT SCHEDULE^^0
"BLD",6002,"KRN",8994,"NM",6,0)
ROR LIST ICD-9^^0
"BLD",6002,"KRN",8994,"NM","B","ROR LIST ICD-9",6)

"BLD",6002,"KRN",8994,"NM","B","ROR LIST PATIENTS",1)

"BLD",6002,"KRN",8994,"NM","B","ROR PATIENT GET DATA",2)

"BLD",6002,"KRN",8994,"NM","B","ROR REPORT SCHEDULE",5)

"BLD",6002,"KRN",8994,"NM","B","RORHEPC PATIENT LOAD",4)

"BLD",6002,"KRN",8994,"NM","B","RORICR PATIENT LOAD",3)

"BLD",6002,"KRN","B",.4,.4)

"BLD",6002,"KRN","B",.401,.401)

"BLD",6002,"KRN","B",.402,.402)

"BLD",6002,"KRN","B",.403,.403)

"BLD",6002,"KRN","B",.5,.5)

"BLD",6002,"KRN","B",.84,.84)

"BLD",6002,"KRN","B",3.6,3.6)

"BLD",6002,"KRN","B",3.8,3.8)

"BLD",6002,"KRN","B",9.2,9.2)

"BLD",6002,"KRN","B",9.8,9.8)

"BLD",6002,"KRN","B",19,19)

"BLD",6002,"KRN","B",19.1,19.1)

"BLD",6002,"KRN","B",101,101)

"BLD",6002,"KRN","B",409.61,409.61)

"BLD",6002,"KRN","B",771,771)

"BLD",6002,"KRN","B",870,870)

"BLD",6002,"KRN","B",8989.51,8989.51)

"BLD",6002,"KRN","B",8989.52,8989.52)

"BLD",6002,"KRN","B",8994,8994)

"BLD",6002,"PRE")
RORP001
"BLD",6002,"PRET")
PTR^RORP001
"BLD",6002,"QUES",0)
^9.62^^
"BLD",6002,"REQB",0)
^9.611^4^4
"BLD",6002,"REQB",1,0)
ROR 1.5^2
"BLD",6002,"REQB",2,0)
PSS*1.0*108^2
"BLD",6002,"REQB",3,0)
PSN*4.0*121^2
"BLD",6002,"REQB",4,0)
PSN*4.0*123^2
"BLD",6002,"REQB","B","PSN*4.0*121",3)

"BLD",6002,"REQB","B","PSN*4.0*123",4)

"BLD",6002,"REQB","B","PSS*1.0*108",2)

"BLD",6002,"REQB","B","ROR 1.5",1)

"DATA",798.9,4,0)
VA HIV^^1
"DATA",798.9,4,1,0)
^798.92^38^36
"DATA",798.9,4,1,1,0)
29327^^6
"DATA",798.9,4,1,4,0)
31201^^6
"DATA",798.9,4,1,5,0)
32571^^6
"DATA",798.9,4,1,6,0)
32602^^6
"DATA",798.9,4,1,7,0)
33866^^6
"DATA",798.9,4,1,8,0)
5223^^6
"DATA",798.9,4,1,9,0)
5224^^6
"DATA",798.9,4,1,10,0)
5225^^6
"DATA",798.9,4,1,11,0)
5220^^6
"DATA",798.9,4,1,12,0)
5221^^6
"DATA",798.9,4,1,13,0)
7917^^6
"DATA",798.9,4,1,14,0)
7918^^6
"DATA",798.9,4,1,15,0)
7919^^6
"DATA",798.9,4,1,16,0)
29893^^6
"DATA",798.9,4,1,17,0)
14092^^6
"DATA",798.9,4,1,18,0)
16974^^6
"DATA",798.9,4,1,19,0)
21007^^6
"DATA",798.9,4,1,20,0)
22356^^6
"DATA",798.9,4,1,21,0)
22357^^6
"DATA",798.9,4,1,22,0)
22358^^6
"DATA",798.9,4,1,23,0)
30361^^6
"DATA",798.9,4,1,24,0)
16975^^6
"DATA",798.9,4,1,25,0)
13499^^6
"DATA",798.9,4,1,26,0)
21009^^6
"DATA",798.9,4,1,27,0)
41143^^6
"DATA",798.9,4,1,28,0)
41144^^6
"DATA",798.9,4,1,29,0)
35437^^6
"DATA",798.9,4,1,30,0)
35438^^6
"DATA",798.9,4,1,31,0)
35439^^6
"DATA",798.9,4,1,32,0)
41145^^6
"DATA",798.9,4,1,33,0)
40732^^6
"DATA",798.9,4,1,34,0)
40733^^6
"DATA",798.9,4,1,35,0)
31073^^6
"DATA",798.9,4,1,36,0)
33806^^6
"DATA",798.9,4,1,37,0)
33807^^6
"DATA",798.9,4,1,38,0)
42600^^6
"DATA",799.31,1,0)
REPORT
"DATA",799.31,2,0)
PARAMETERS
"DATA",799.31,3,0)
PATIENTS
"DATA",799.31,4,0)
CAREONLY
"DATA",799.31,5,0)
PATIENT
"DATA",799.31,7,0)
COLSPAN
"DATA",799.31,8,0)
REGMEDS
"DATA",799.31,9,0)
NAME
"DATA",799.31,10,0)
DOB
"DATA",799.31,11,0)
DOD
"DATA",799.31,12,0)
COMPLETE
"DATA",799.31,13,0)
COUNT
"DATA",799.31,14,0)
DE_BEFORE
"DATA",799.31,15,0)
DATE
"DATA",799.31,16,0)
DE_DURING
"DATA",799.31,17,0)
HIV
"DATA",799.31,19,0)
DFN
"DATA",799.31,20,0)
ICN
"DATA",799.31,21,0)
ID
"DATA",799.31,23,0)
NEW
"DATA",799.31,24,0)
NOTSEEN
"DATA",799.31,25,0)
SELRULES
"DATA",799.31,26,0)
RULE
"DATA",799.31,27,0)
SSN
"DATA",799.31,28,0)
CSSN
"DATA",799.31,29,0)
AIDSTAT
"DATA",799.31,31,0)
AGE
"DATA",799.31,32,0)
ENTDT
"DATA",799.31,34,0)
PRIMELIG
"DATA",799.31,35,0)
RACE
"DATA",799.31,37,0)
REIMBLVL
"DATA",799.31,38,0)
RISK
"DATA",799.31,39,0)
SEX
"DATA",799.31,40,0)
DE_AFTER
"DATA",799.31,41,0)
UTIL
"DATA",799.31,43,0)
CLINICS
"DATA",799.31,44,0)
CLINIC
"DATA",799.31,45,0)
CUTOFF
"DATA",799.31,46,0)
DATE_RANGE
"DATA",799.31,47,0)
DIVISION
"DATA",799.31,48,0)
DIVISIONS
"DATA",799.31,49,0)
DRUGS
"DATA",799.31,50,0)
FIELDS
"DATA",799.31,51,0)
ICD9LST
"DATA",799.31,52,0)
ICD9
"DATA",799.31,53,0)
LABTESTS
"DATA",799.31,54,0)
LT
"DATA",799.31,55,0)
MAXUTNUM
"DATA",799.31,57,0)
MINRPNUM
"DATA",799.31,58,0)
OPTIONS
"DATA",799.31,59,0)
REGIEN
"DATA",799.31,61,0)
LOW
"DATA",799.31,62,0)
HIGH
"DATA",799.31,63,0)
START
"DATA",799.31,64,0)
END
"DATA",799.31,65,0)
PARAMETER
"DATA",799.31,66,0)
TASK_DESCR
"DATA",799.31,67,0)
REGNAME
"DATA",799.31,69,0)
COLUMN
"DATA",799.31,70,0)
TITLE
"DATA",799.31,71,0)
HEADER
"DATA",799.31,72,0)
DESCR
"DATA",799.31,73,0)
LAST4
"DATA",799.31,74,0)
TASK_NUMBER
"DATA",799.31,75,0)
UPDATED_UNTIL
"DATA",799.31,76,0)
EXTRACTED_UNTIL
"DATA",799.31,77,0)
WARD
"DATA",799.31,78,0)
ADMDT
"DATA",799.31,79,0)
LOS
"DATA",799.31,80,0)
LOSFYTD
"DATA",799.31,81,0)
CATEGORY
"DATA",799.31,82,0)
SUMMARY
"DATA",799.31,83,0)
RACES
"DATA",799.31,84,0)
RISK_FACTORS
"DATA",799.31,85,0)
RACE_SUMMARY
"DATA",799.31,86,0)
SEX_SUMMARY
"DATA",799.31,87,0)
REIMBLVL_SUMMARY
"DATA",799.31,88,0)
AGE_SUMMARY
"DATA",799.31,89,0)
SEEN
"DATA",799.31,90,0)
SEEN_SUMMARY
"DATA",799.31,91,0)
LSNDT
"DATA",799.31,92,0)
CPT
"DATA",799.31,93,0)
QNTY
"DATA",799.31,94,0)
TOTAL
"DATA",799.31,95,0)
UNIQUE
"DATA",799.31,96,0)
PATIENT_SUMMARY
"DATA",799.31,97,0)
PROCEDURE
"DATA",799.31,98,0)
PROCEDURES
"DATA",799.31,99,0)
GROUP
"DATA",799.31,100,0)
RESULT
"DATA",799.31,102,0)
REARSN
"DATA",799.31,103,0)
UTIL_CODES
"DATA",799.31,104,0)
INPATIENT
"DATA",799.31,105,0)
OUTPATIENTS
"DATA",799.31,106,0)
INPATIENTS
"DATA",799.31,107,0)
VISITS
"DATA",799.31,108,0)
STOPS
"DATA",799.31,109,0)
BEDSECTIONS
"DATA",799.31,110,0)
BEDSECTION
"DATA",799.31,111,0)
ITEM
"DATA",799.31,112,0)
STOP
"DATA",799.31,113,0)
CODE
"DATA",799.31,114,0)
STAYS
"DATA",799.31,115,0)
ND
"DATA",799.31,116,0)
NP
"DATA",799.31,117,0)
NSC
"DATA",799.31,118,0)
ALOS
"DATA",799.31,119,0)
MLOS
"DATA",799.31,120,0)
NV
"DATA",799.31,122,0)
GENERIC
"DATA",799.31,123,0)
AIDS
"DATA",799.31,124,0)
ALL
"DATA",799.31,125,0)
OLD
"DATA",799.31,126,0)
OUTPATIENT
"DATA",799.31,127,0)
PTF
"DATA",799.31,128,0)
RANGE
"DATA",799.31,129,0)
ROWSPAN
"DATA",799.31,130,0)
TABLE
"DATA",799.31,131,0)
TYPE
"DATA",799.31,132,0)
USE
"DATA",799.31,133,0)
VARXCLS
"DATA",799.31,134,0)
VALUE
"DATA",799.31,135,0)
WIDTH
"DATA",799.31,136,0)
NDS
"DATA",799.31,137,0)
HIGHUTIL
"DATA",799.31,138,0)
DAYS
"DATA",799.31,139,0)
NOBS
"DATA",799.31,140,0)
HU_VISITS
"DATA",799.31,141,0)
HU_STAYS
"DATA",799.31,142,0)
HU_DAYS
"DATA",799.31,143,0)
NO
"DATA",799.31,144,0)
NR
"DATA",799.31,145,0)
NDT
"DATA",799.31,146,0)
MAXNRPP
"DATA",799.31,147,0)
ORDERS
"DATA",799.31,148,0)
VARDUMP
"DATA",799.31,149,0)
MAXNP
"DATA",799.31,150,0)
NC
"DATA",799.31,151,0)
DIAG
"DATA",799.31,152,0)
NDC
"DATA",799.31,153,0)
PTICDL
"DATA",799.31,154,0)
LAB
"DATA",799.31,155,0)
PHARMACY
"DATA",799.31,156,0)
DRUG
"DATA",799.31,157,0)
VARXCL
"DATA",799.31,158,0)
AIDSNOARV
"DATA",799.31,159,0)
REGMEDSMRY
"DATA",799.31,160,0)
PTLIST
"DATA",799.31,161,0)
COMPLEX
"DATA",799.31,162,0)
BASIC
"DATA",799.31,163,0)
PTLRL
"DATA",799.31,164,0)
PTRXL
"DATA",799.31,165,0)
RXCOMB
"DATA",799.31,166,0)
RXCOMBLST
"DATA",799.31,167,0)
TBLDEF
"DATA",799.31,168,0)
NST
"DATA",799.31,169,0)
NSS
"DATA",799.31,170,0)
NPR
"DATA",799.31,171,0)
NDP
"DATA",799.31,172,0)
FOOTER
"DATA",799.31,173,0)
INVESTIG
"DATA",799.31,174,0)
NPBASIC
"DATA",799.31,175,0)
NPCOMPLEX
"DATA",799.31,176,0)
NPARV
"DATA",799.31,177,0)
NPHIV
"DATA",799.31,178,0)
NPAIDS
"DATA",799.31,179,0)
FILLTYPE
"DATA",799.31,180,0)
ORDER
"DATA",799.31,181,0)
FILLS
"DATA",799.31,182,0)
DOSES
"DATA",799.31,183,0)
NF
"DATA",799.31,184,0)
HU_FILLS
"DATA",799.31,185,0)
HU_DOSES
"DATA",799.31,186,0)
NRX
"DATA",799.31,187,0)
NOTES
"DATA",799.31,188,0)
AGE_BASE_DATE
"DATA",799.31,189,0)
ROOM-BED
"DATA",799.31,190,0)
DAYSPLY
"DATA",799.31,191,0)
HU_STOPS
"DATA",799.31,192,0)
RESULTS
"DATA",799.31,193,0)
DRUGS_FILLS
"DATA",799.31,194,0)
DRUGS_DOSES
"DATA",799.31,195,0)
AIDS_SUMMARY
"DATA",799.31,197,0)
ENTDT_SUMMARY
"DATA",799.31,198,0)
PRIMELIG_SUMMARY
"DATA",799.31,199,0)
ETHN
"DATA",799.31,200,0)
ETHN_SUMMARY
"DATA",799.31,201,0)
ETHNS
"DATA",799.31,202,0)
PENDING
"DATA",799.31,204,0)
TASK_COMMENT
"DATA",799.31,205,0)
OTHER_REGISTRIES
"DATA",799.31,206,0)
LOCAL_FIELDS
"DATA",799.31,207,0)
CONFIRMED
"DATA",799.31,208,0)
OPTIONAL_COLUMNS
"DATA",799.31,209,0)
LRGRANGES
"DATA",799.31,210,0)
LRGRANGE
"DATA",799.31,211,0)
CONFDT
"DATA",799.31,212,0)
SELDT
"DATA",799.31,213,0)
FIELD
"DATA",799.31,214,0)
SOURCE
"DATA",799.31,215,0)
UTIL_TYPES
"DATA",799.31,216,0)
DOB_SUMMARY
"DATA",799.31,217,0)
DOD_SUMMARY
"DATA",799.31,218,0)
CONFDT_SUMMARY
"DATA",799.31,219,0)
SELDT_SUMMARY
"DATA",799.31,221,0)
FORMULATIONS
"DATA",799.31,222,0)
IPNRX
"DATA",799.31,223,0)
OPNRX
"DATA",799.31,224,0)
HU_NRX
"DATA",799.31,225,0)
CPTLST
"DATA",799.31,226,0)
DATE_RANGE_2
"DATA",799.31,227,0)
RXNAME
"DATA",799.31,228,0)
LTNAME
"DATA",799.31,229,0)
DATE_RANGE_3
"DATA",799.31,230,0)
PTCPTL
"DATA",799.31,231,0)
PROCNAME
"DATA",799.31,232,0)
PROCLST
"DATA",799.31,233,0)
PROCODE
"DATA",799.31,234,0)
PROCMODE
"DATA",799.34,1,0)
List of Registry Patients^1^1^1^^^^^1
"DATA",799.34,1,1)
14,20,32,70,100
"DATA",799.34,1,10.01)
$$REGPTLST^RORX001
"DATA",799.34,1,11,0)
^799.3411^1^1^3051004^^^
"DATA",799.34,1,11,1,0)
<PATIENTS CONFIRMED="1"/>
"DATA",799.34,1,12,0)
^799.3412^1^1^3051012^^^
"DATA",799.34,1,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,2,0)
Current Inpatient List^1^1^2^^^^^1
"DATA",799.34,2,1)
14,70,100
"DATA",799.34,2,10.01)
$$INPTLST^RORX002
"DATA",799.34,2,12,0)
^799.3412^1^1^3051012^^^
"DATA",799.34,2,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,3,0)
General Utilization and Demographics^1^1^3^^^^^1
"DATA",799.34,3,1)
10,14,22,62,35,30,70,100
"DATA",799.34,3,10.01)
$$UTLDMG^RORX003
"DATA",799.34,3,11,0)
^799.3411^3^3^3051004^^
"DATA",799.34,3,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,3,11,2,0)
<OPTIONS COMPLETE="1"/>
"DATA",799.34,3,11,3,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,3,12,0)
^799.3412^1^1^3051012^^^
"DATA",799.34,3,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,4,0)
Clinic Follow Up^1^1^4^^^^^1
"DATA",799.34,4,1)
10,14,22,60,66,50,70,100
"DATA",799.34,4,10.01)
$$CLNFLWUP^RORX004
"DATA",799.34,4,11,0)
^799.3411^3^3^3051206^^^
"DATA",799.34,4,11,1,0)
<CLINICS ALL="1"/>
"DATA",799.34,4,11,2,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,4,11,3,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1" SEEN="1"/>
"DATA",799.34,4,12,0)
^799.3412^1^1^3051206^^^^
"DATA",799.34,4,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,5,0)
Inpatient Utilization^1^1^5^^^^^1
"DATA",799.34,5,1)
10,14,22,170,110,46,34,70,100
"DATA",799.34,5,10.01)
$$IPUTL^RORX005
"DATA",799.34,5,11,0)
^799.3411^4^4^3051004^^^
"DATA",799.34,5,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,5,11,2,0)
<DIVISIONS ALL="1"/>
"DATA",799.34,5,11,3,0)
<MAXUTNUM>10</MAXUTNUM>
"DATA",799.34,5,11,4,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,5,12,0)
^799.3412^5^5^3051012^^
"DATA",799.34,5,12,1,0)
<SM TABLE="BEDSECTION" FIELD="NAME"/>
"DATA",799.34,5,12,2,0)
<SM TABLE="HU_DAYS" FIELD="ND:DESC"/>
"DATA",799.34,5,12,3,0)
<SM TABLE="HU_STAYS" FIELD="NST:DESC"/>
"DATA",799.34,5,12,4,0)
<SM TABLE="NOBS" FIELD="NAME"/>
"DATA",799.34,5,12,5,0)
<SM TABLE="STAYS" FIELD="NST:DESC"/>
"DATA",799.34,6,0)
Lab Utilization^1^1^6^^^^^1
"DATA",799.34,6,1)
10,14,22,110,120,52,70,100
"DATA",799.34,6,10.01)
$$LABUTL^RORX006
"DATA",799.34,6,11,0)
^799.3411^5^5^3051004^^
"DATA",799.34,6,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,6,11,2,0)
<LABTESTS ALL="1"/>
"DATA",799.34,6,11,3,0)
<MAXUTNUM>10</MAXUTNUM>
"DATA",799.34,6,11,4,0)
<MINRPNUM>1</MINRPNUM>
"DATA",799.34,6,11,5,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,6,12,0)
^799.3412^3^3^3051012^^^
"DATA",799.34,6,12,1,0)
<SM TABLE="LABTESTS" FIELD="NAME"/>
"DATA",799.34,6,12,2,0)
<SM TABLE="PATIENTS" FIELD="NR:DESC"/>
"DATA",799.34,6,12,3,0)
<SM TABLE="RESULTS" FIELD="NR:DESC"/>
"DATA",799.34,7,0)
Radiology Utilization^1^1^7^^^^^1
"DATA",799.34,7,1)
10,14,22,110,120,70,100
"DATA",799.34,7,10.01)
$$RADUTL^RORX007
"DATA",799.34,7,11,0)
^799.3411^4^4^3051004^^
"DATA",799.34,7,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,7,11,2,0)
<MAXUTNUM>10</MAXUTNUM>
"DATA",799.34,7,11,3,0)
<MINRPNUM>1</MINRPNUM>
"DATA",799.34,7,11,4,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,7,12,0)
^799.3412^2^2^3051012^^^
"DATA",799.34,7,12,1,0)
<SM TABLE="PATIENTS" FIELD="TOTAL:DESC"/>
"DATA",799.34,7,12,2,0)
<SM TABLE="PROCEDURES" FIELD="NAME"/>
"DATA",799.34,9,0)
Pharmacy Prescription Utilization^1^1^9^^^^^1
"DATA",799.34,9,1)
10,14,22,170,26,110,46,54,44,90,70,100
"DATA",799.34,9,10.01)
$$RXUTIL^RORX009
"DATA",799.34,9,11,0)
^^4^4^3051012^
"DATA",799.34,9,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,9,11,2,0)
<DRUGS AGGR_GENERIC="1" ALL="1"/>
"DATA",799.34,9,11,3,0)
<MAXUTNUM>10</MAXUTNUM>
"DATA",799.34,9,11,4,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1" INPATIENT="1" OUTPATIENT="1"/>
"DATA",799.34,9,12,0)
^^3^3^3051012^
"DATA",799.34,9,12,1,0)
<SM TABLE="DRUGS" FIELD="NAME"/>
"DATA",799.34,9,12,2,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,9,12,3,0)
<SM TABLE="HU_NRX" FIELD="NAME"/>
"DATA",799.34,10,0)
Registry Lab Tests by Range^1^^10^^^^^1
"DATA",799.34,10,1)
10,14,22,47,70,100
"DATA",799.34,10,10.01)
$$LRGRANGE^RORX010
"DATA",799.34,10,11,0)
^^2^2^3051206^
"DATA",799.34,10,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,10,11,2,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,10,12,0)
^799.3412^2^2^3051206^^^^
"DATA",799.34,10,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,10,12,2,0)
<SM TABLE="PTLRL" FIELD="GROUP"/>
"DATA",799.34,11,0)
Patient Medication History^1^1^11^^^^^1
"DATA",799.34,11,1)
10,14,170,26,140,54,70,100
"DATA",799.34,11,10.01)
$$RXHIST^RORX011
"DATA",799.34,11,11,0)
^799.3411^3^3^3060526^^^^
"DATA",799.34,11,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,11,11,2,0)
<DRUGS ALL="1"/>
"DATA",799.34,11,11,3,0)
<PATIENTS INPATIENT="1" OUTPATIENT="1"/>
"DATA",799.34,11,12,0)
^799.3412^1^1^3060526^^
"DATA",799.34,11,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,12,0)
Combined Meds and Labs^1^1^12^^^^^1
"DATA",799.34,12,1)
14,22,64,66,10,54,44,11,53,12,70,100
"DATA",799.34,12,10.01)
$$RXANDLAB^RORX012
"DATA",799.34,12,11,0)
^799.3411^5^5^3060517^^
"DATA",799.34,12,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,12,11,2,0)
<DATE_RANGE_2 TYPE="YEAR"/>
"DATA",799.34,12,11,3,0)
<DATE_RANGE_3 TYPE="YEAR"/>
"DATA",799.34,12,11,4,0)
<DRUGS AGGR_GENERIC="1" ALL="1"/>
"DATA",799.34,12,11,5,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,12,12,0)
^799.3412^3^3^3060517^^
"DATA",799.34,12,12,1,0)
<SM TABLE="DRUGS" FIELD="NAME"/>
"DATA",799.34,12,12,2,0)
<SM TABLE="LABTESTS" FIELD="NAME"/>
"DATA",799.34,12,12,3,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,13,0)
Diagnoses^1^1^13^^^^^1
"DATA",799.34,13,1)
10,14,22,62,160,70,100
"DATA",799.34,13,10.01)
$$ICD9LST^RORX013
"DATA",799.34,13,11,0)
^799.3411^4^4^3051004^^
"DATA",799.34,13,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,13,11,2,0)
<ICD9LST ALL="1"/>
"DATA",799.34,13,11,3,0)
<OPTIONS COMPLETE="1"/>
"DATA",799.34,13,11,4,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,13,12,0)
^799.3412^3^3^3051012^^
"DATA",799.34,13,12,1,0)
<SM TABLE="ICD9LST" FIELD="CODE"/>
"DATA",799.34,13,12,2,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,13,12,3,0)
<SM TABLE="PTICDL" FIELD="CODE"/>
"DATA",799.34,14,0)
Registry Medications^1^1^14^^^^^1
"DATA",799.34,14,1)
10,14,22,170,26,62,84,56,70,100
"DATA",799.34,14,10.01)
$$RXCOMB^RORX014
"DATA",799.34,14,11,0)
^799.3411^3^3^3051005^^^
"DATA",799.34,14,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,14,11,2,0)
<OPTIONS COMPLETE="1"/>
"DATA",799.34,14,11,3,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1" INPATIENT="1" OUTPATIENT="1"/>
"DATA",799.34,14,12,0)
^799.3412^3^3^3051012^^^
"DATA",799.34,14,12,1,0)
<SM TABLE="DRUGS" FIELD="NAME"/>
"DATA",799.34,14,12,2,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,14,12,3,0)
<SM TABLE="RXCOMBLST" FIELD="NP:DESC"/>
"DATA",799.34,15,0)
Procedures^1^1^15^^^^^1
"DATA",799.34,15,1)
10,14,22,150,65,66,62,160,59,12,70,100
"DATA",799.34,15,10.01)
$$PROCLST^RORX015
"DATA",799.34,15,11,0)
^799.3411^6^6^3060621^^^
"DATA",799.34,15,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,15,11,2,0)
<DATE_RANGE_3 TYPE="YEAR"/>
"DATA",799.34,15,11,3,0)
<CPTLST ALL="1"/>
"DATA",799.34,15,11,4,0)
<ICD9LST ALL="1"/>
"DATA",799.34,15,11,5,0)
<OPTIONS COMPLETE="1"/>
"DATA",799.34,15,11,6,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1" PROC="1" INPATIENT="1" OUTPATIENT="1"/>
"DATA",799.34,15,12,0)
^799.3412^3^3^3060621^^^^
"DATA",799.34,15,12,1,0)
<SM TABLE="PROCLST" FIELD="PROCODE"/>
"DATA",799.34,15,12,2,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,15,12,3,0)
<SM TABLE="PROCEDURES" FIELD="NAME"/>
"DATA",799.34,16,0)
Outpatient Utilization^1^1^16^^^^^1
"DATA",799.34,16,1)
10,14,22,170,110,46,34,70,100
"DATA",799.34,16,10.01)
$$OPUTL^RORX016
"DATA",799.34,16,11,0)
^799.3411^4^4^3051004^^^
"DATA",799.34,16,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,16,11,2,0)
<DIVISIONS ALL="1"/>
"DATA",799.34,16,11,3,0)
<MAXUTNUM>10</MAXUTNUM>
"DATA",799.34,16,11,4,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,16,12,0)
^799.3412^3^3^3051012^^
"DATA",799.34,16,12,1,0)
<SM TABLE="CLINICS" FIELD="STOP"/>
"DATA",799.34,16,12,2,0)
<SM TABLE="HU_STOPS" FIELD="NSC:DESC"/>
"DATA",799.34,16,12,3,0)
<SM TABLE="STOPS" FIELD="NSC:DESC"/>
"DATA",799.34,17,0)
VERA Reimbursement Report^1^^8^^^^^1
"DATA",799.34,17,1)
10,14,22,24,28,84,56,70,100
"DATA",799.34,17,10.01)
$$ARVREIMB^RORX008
"DATA",799.34,17,11,0)
^799.3411^3^3^3051006^^^
"DATA",799.34,17,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,17,11,2,0)
<DRUGS INVESTIG="1"/>
"DATA",799.34,17,11,3,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,17,12,0)
^799.3412^2^2^3051012^^^
"DATA",799.34,17,12,1,0)
<SM TABLE="DRUGS" FIELD="NAME"/>
"DATA",799.34,17,12,2,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"FIA",798.8)
ROR TASK
"FIA",798.8,0)
^RORDATA(798.8,
"FIA",798.8,0,0)
798.8s
"FIA",798.8,0,1)
y^n^p^^^^n^^n
"FIA",798.8,0,10)

"FIA",798.8,0,11)

"FIA",798.8,0,"RLRO")

"FIA",798.8,0,"VR")
1.5^ROR
"FIA",798.8,798.8)
1
"FIA",798.8,798.87)
1
"FIA",798.8,798.87,.03)

"FIA",798.9)
ROR LAB SEARCH
"FIA",798.9,0)
^ROR(798.9,
"FIA",798.9,0,0)
798.9
"FIA",798.9,0,1)
n^n^f^^n^^y^m^n
"FIA",798.9,0,10)

"FIA",798.9,0,11)
I $E($P($G(^ROR(798.9,Y,0)),U),1,6)="VA HIV"
"FIA",798.9,0,"RLRO")

"FIA",798.9,0,"VR")
1.5^ROR
"FIA",798.9,798.9)
0
"FIA",798.9,798.92)
0
"FIA",799.31)
ROR XML ITEM
"FIA",799.31,0)
^ROR(799.31,
"FIA",799.31,0,0)
799.31
"FIA",799.31,0,1)
n^n^f^^n^^y^o^n
"FIA",799.31,0,10)

"FIA",799.31,0,11)

"FIA",799.31,0,"RLRO")

"FIA",799.31,0,"VR")
1.5^ROR
"FIA",799.31,799.31)
0
"FIA",799.34)
ROR REPORT PARAMETERS
"FIA",799.34,0)
^ROR(799.34,
"FIA",799.34,0,0)
799.34I
"FIA",799.34,0,1)
n^n^f^^n^^y^o^n
"FIA",799.34,0,10)

"FIA",799.34,0,11)

"FIA",799.34,0,"RLRO")

"FIA",799.34,0,"VR")
1.5^ROR
"FIA",799.34,799.34)
0
"FIA",799.34,799.3411)
0
"FIA",799.34,799.3412)
0
"FIA",799.4)
ROR HIV RECORD
"FIA",799.4,0)
^RORDATA(799.4,
"FIA",799.4,0,0)
799.4sP
"FIA",799.4,0,1)
y^y^p^^^^n^^n
"FIA",799.4,0,10)

"FIA",799.4,0,11)

"FIA",799.4,0,"RLRO")

"FIA",799.4,0,"VR")
1.5^ROR
"FIA",799.4,799.4)
1
"FIA",799.4,799.4,10)

"FIA",799.4,799.4,22.09)

"FIA",799.4,799.41)
1
"FIA",799.4,799.41,.01)

"FIA",799.4,799.41,.02)

"FIA",799.4,799.41,.03)

"INIT")
POS^RORP001
"IX",798.8,798.87,"APSR",0)
798.87^APSR^Sort Elements^MU^^R^IR^I^798.87^^^^^S
"IX",798.8,798.87,"APSR",.1,0)
^^20^20^3030502^
"IX",798.8,798.87,"APSR",.1,1,0)
 
"IX",798.8,798.87,"APSR",.1,2,0)
 IEN  Element (int)   Parent IEN  Value
"IX",798.8,798.87,"APSR",.1,3,0)
 ---  --------------  ----------  ------------
"IX",798.8,798.87,"APSR",.1,4,0)
   1  REPORT    ( 1)          0
"IX",798.8,798.87,"APSR",.1,5,0)
   2   PATIENTS ( 3)          1
"IX",798.8,798.87,"APSR",.1,6,0)
   3    PATIENT ( 5)          2
"IX",798.8,798.87,"APSR",.1,7,0)
   4     NAME   ( 9)          3   "DOU, JOHN"
"IX",798.8,798.87,"APSR",.1,8,0)
   5     DOB    (10)          3   "1950/03/25"
"IX",798.8,798.87,"APSR",.1,9,0)
   6    PATIENT ( 5)          2
"IX",798.8,798.87,"APSR",.1,10,0)
   7     NAME   ( 9)          6   "SMITH, BOB"
"IX",798.8,798.87,"APSR",.1,11,0)
   8     DOB    (10)          6   "1935/10/05"
"IX",798.8,798.87,"APSR",.1,12,0)
 
"IX",798.8,798.87,"APSR",.1,13,0)
 
"IX",798.8,798.87,"APSR",.1,14,0)
        Parent  Element
"IX",798.8,798.87,"APSR",.1,15,0)
         IEN     (int)   IEN
"IX",798.8,798.87,"APSR",.1,16,0)
        ------  -------  ---
"IX",798.8,798.87,"APSR",.1,17,0)
 "APSR",  3,       9,     4
"IX",798.8,798.87,"APSR",.1,18,0)
 "APSR",  3,      10,     5
"IX",798.8,798.87,"APSR",.1,19,0)
 "APSR",  6,       9,     7
"IX",798.8,798.87,"APSR",.1,20,0)
 "APSR",  6,      10,     8
"IX",798.8,798.87,"APSR",1)
S ^RORDATA(798.8,DA(1),"RI","APSR",X(1),X(2),DA)=""
"IX",798.8,798.87,"APSR",1.4)
S X=(X(3)>0)
"IX",798.8,798.87,"APSR",2)
K ^RORDATA(798.8,DA(1),"RI","APSR",X(1),X(2),DA)
"IX",798.8,798.87,"APSR",2.4)

"IX",798.8,798.87,"APSR",2.5)
K ^RORDATA(798.8,DA(1),"RI","APSR")
"IX",798.8,798.87,"APSR",11.1,0)
^.114IA^4^3
"IX",798.8,798.87,"APSR",11.1,1,0)
1^F^798.87^.02^^1^F
"IX",798.8,798.87,"APSR",11.1,2,0)
2^F^798.87^.01^^2^F
"IX",798.8,798.87,"APSR",11.1,4,0)
3^F^798.87^.03^^^F
"IX",798.8,798.87,"APSV1",0)
798.87^APSV1^Sorts the XML report on the server^MU^^R^IR^I^798.87^^^^^S
"IX",798.8,798.87,"APSV1",.1,0)
^^161^161^3060203^
"IX",798.8,798.87,"APSV1",.1,1,0)
The APSV1 index allows to sort the XML reports on 
"IX",798.8,798.87,"APSV1",.1,2,0)
the server side. 
"IX",798.8,798.87,"APSV1",.1,3,0)
 
"IX",798.8,798.87,"APSV1",.1,4,0)
The APSV0 and APSV1 indexes work together and the
"IX",798.8,798.87,"APSV1",.1,5,0)
entries of both indexes are created under the same
"IX",798.8,798.87,"APSV1",.1,6,0)
"APSV" subscript.
"IX",798.8,798.87,"APSV1",.1,7,0)
 
"IX",798.8,798.87,"APSV1",.1,8,0)
The resulting index actually consists of several 
"IX",798.8,798.87,"APSV1",.1,9,0)
sub-indexes (lists). Each index sorts the items
"IX",798.8,798.87,"APSV1",.1,10,0)
that comprise different parts of the XML document.
"IX",798.8,798.87,"APSV1",.1,11,0)
 
"IX",798.8,798.87,"APSV1",.1,12,0)
The index has the following structure:
"IX",798.8,798.87,"APSV1",.1,13,0)
 
"IX",798.8,798.87,"APSV1",.1,14,0)
 ^RORDATA(798.8,Task,"RI",
"IX",798.8,798.87,"APSV1",.1,15,0)
    "APSV",List,Sort,ItemValue,ItemIEN) = ""
"IX",798.8,798.87,"APSV1",.1,16,0)
 
"IX",798.8,798.87,"APSV1",.1,17,0)
'Task' is the IEN of the main task record (it is
"IX",798.8,798.87,"APSV1",.1,18,0)
equal to the task number).
"IX",798.8,798.87,"APSV1",.1,19,0)
 
"IX",798.8,798.87,"APSV1",.1,20,0)
'List' is the IEN of the list.
"IX",798.8,798.87,"APSV1",.1,21,0)
 
"IX",798.8,798.87,"APSV1",.1,22,0)
'Sort' is the sorting mode. It is the internal 
"IX",798.8,798.87,"APSV1",.1,23,0)
value of the REPORT ELEMENT field (the IEN of the
"IX",798.8,798.87,"APSV1",.1,24,0)
XML element in the ROR XML ELEMENT file). Each
"IX",798.8,798.87,"APSV1",.1,25,0)
list can be sorted in different ways. The APSV0
"IX",798.8,798.87,"APSV1",.1,26,0)
index always uses 0 as the value of this
"IX",798.8,798.87,"APSV1",.1,27,0)
subscript.
"IX",798.8,798.87,"APSV1",.1,28,0)
 
"IX",798.8,798.87,"APSV1",.1,29,0)
'ItemValue' is the value of the list item. The
"IX",798.8,798.87,"APSV1",.1,30,0)
APSV0 index always uses " " as the value of this
"IX",798.8,798.87,"APSV1",.1,31,0)
subscript.
"IX",798.8,798.87,"APSV1",.1,32,0)
 
"IX",798.8,798.87,"APSV1",.1,33,0)
'ItemIEN' is the IEN of the list item.
"IX",798.8,798.87,"APSV1",.1,34,0)
 
"IX",798.8,798.87,"APSV1",.1,35,0)
To clarify, below is an example of some sample 
"IX",798.8,798.87,"APSV1",.1,36,0)
content of the REPORT ELEMENT multiple:
"IX",798.8,798.87,"APSV1",.1,37,0)
 
"IX",798.8,798.87,"APSV1",.1,38,0)
 IEN  Element (int)   Parent IEN  Value
"IX",798.8,798.87,"APSV1",.1,39,0)
 ---  --------------  ----------  ------------
"IX",798.8,798.87,"APSV1",.1,40,0)
   1  REPORT    ( 1)         0
"IX",798.8,798.87,"APSV1",.1,41,0)
   2   PATIENTS ( 3)         1
"IX",798.8,798.87,"APSV1",.1,42,0)
   3    PATIENT ( 5)         2
"IX",798.8,798.87,"APSV1",.1,43,0)
   4     NAME   ( 9)         3    "DOU, JOHN"
"IX",798.8,798.87,"APSV1",.1,44,0)
   5     DOB    (10)         3    "1950/03/25"
"IX",798.8,798.87,"APSV1",.1,45,0)
   6    PATIENT ( 5)         2   
"IX",798.8,798.87,"APSV1",.1,46,0)
   7     NAME   ( 9)         6    "SMITH, BOB"
"IX",798.8,798.87,"APSV1",.1,47,0)
   8     DOB    (10)         6    "1935/10/05"
"IX",798.8,798.87,"APSV1",.1,48,0)
 
"IX",798.8,798.87,"APSV1",.1,49,0)
      Table 1. Sample Report Elements
"IX",798.8,798.87,"APSV1",.1,50,0)
 
"IX",798.8,798.87,"APSV1",.1,51,0)
The element names are indented to emphasize the 
"IX",798.8,798.87,"APSV1",.1,52,0)
hierarchical structure of the document.
"IX",798.8,798.87,"APSV1",.1,53,0)
 
"IX",798.8,798.87,"APSV1",.1,54,0)
The numbers in parentheses after the element names
"IX",798.8,798.87,"APSV1",.1,55,0)
represent the internal values of the REPORT 
"IX",798.8,798.87,"APSV1",.1,56,0)
ELEMENT field (the IENs in the ROR XML ELEMENT
"IX",798.8,798.87,"APSV1",.1,57,0)
file).
"IX",798.8,798.87,"APSV1",.1,58,0)
 
"IX",798.8,798.87,"APSV1",.1,59,0)
Several lists can be isolated from this example:
"IX",798.8,798.87,"APSV1",.1,60,0)
 
"IX",798.8,798.87,"APSV1",.1,61,0)
  #   List      Items
"IX",798.8,798.87,"APSV1",.1,62,0)
 ---  -------   -------------------------------
"IX",798.8,798.87,"APSV1",.1,63,0)
  1   REPORT    PATIENTS
"IX",798.8,798.87,"APSV1",.1,64,0)
  2   PATIENTS  PATIENT, PATIENT
"IX",798.8,798.87,"APSV1",.1,65,0)
  3   PATIENT   NAME, DOB
"IX",798.8,798.87,"APSV1",.1,66,0)
  4   PATIENT   NAME, DOB
"IX",798.8,798.87,"APSV1",.1,67,0)
 
"IX",798.8,798.87,"APSV1",.1,68,0)
  5   PATIENTS  "DOU, JOHN", "SMITH, BOB"
"IX",798.8,798.87,"APSV1",.1,69,0)
  6   PATIENTS  "1935/10/05", "1950/03/25"
"IX",798.8,798.87,"APSV1",.1,70,0)
 
"IX",798.8,798.87,"APSV1",.1,71,0)
      Table 2. The Lists
"IX",798.8,798.87,"APSV1",.1,72,0)
 
"IX",798.8,798.87,"APSV1",.1,73,0)
The first four lists contain just the report
"IX",798.8,798.87,"APSV1",.1,74,0)
elements themselves. They are used to render the
"IX",798.8,798.87,"APSV1",.1,75,0)
elements into XML tags in the same sequence as the
"IX",798.8,798.87,"APSV1",.1,76,0)
elements were created by the report builder. For
"IX",798.8,798.87,"APSV1",.1,77,0)
example, the <DOB> tag will always follow the
"IX",798.8,798.87,"APSV1",.1,78,0)
<NAME> tag.
"IX",798.8,798.87,"APSV1",.1,79,0)
 
"IX",798.8,798.87,"APSV1",.1,80,0)
The logic of the APSV0 index handles these
"IX",798.8,798.87,"APSV1",.1,81,0)
sub-indexes. They always have 0 as the sorting
"IX",798.8,798.87,"APSV1",.1,82,0)
mode and " " as the item value.
"IX",798.8,798.87,"APSV1",.1,83,0)
 
"IX",798.8,798.87,"APSV1",.1,84,0)
The last two sub-indexes are handled by the logic
"IX",798.8,798.87,"APSV1",.1,85,0)
of the "APSV1" index. As illustrated in the
"IX",798.8,798.87,"APSV1",.1,86,0)
example, the lists are associated with the
"IX",798.8,798.87,"APSV1",.1,87,0)
PATIENTS element, they comprise the PATIENT
"IX",798.8,798.87,"APSV1",.1,88,0)
elements, and are sorted by the values of the NAME
"IX",798.8,798.87,"APSV1",.1,89,0)
and DOB elements. Three levels of the hierarchy
"IX",798.8,798.87,"APSV1",.1,90,0)
are covered by each of these sub-indexes.
"IX",798.8,798.87,"APSV1",.1,91,0)
 
"IX",798.8,798.87,"APSV1",.1,92,0)
Let us look at the corresponding index. The 
"IX",798.8,798.87,"APSV1",.1,93,0)
numbers in the first column indicate the 
"IX",798.8,798.87,"APSV1",.1,94,0)
corresponding lists from Table 2. The sub-indexes
"IX",798.8,798.87,"APSV1",.1,95,0)
are separated by empty lines:
"IX",798.8,798.87,"APSV1",.1,96,0)
 
"IX",798.8,798.87,"APSV1",.1,97,0)
  #         List  Sort   ItemValue     ItemIEN
"IX",798.8,798.87,"APSV1",.1,98,0)
 ---        ----  ----  -------------  -------
"IX",798.8,798.87,"APSV1",.1,99,0)
  1  "APSV",  1,    0,  " ",              2)
"IX",798.8,798.87,"APSV1",.1,100,0)
 
"IX",798.8,798.87,"APSV1",.1,101,0)
  2  "APSV",  2,    0,  " ",              3)
"IX",798.8,798.87,"APSV1",.1,102,0)
  2  "APSV",  2,    0,  " ",              6)
"IX",798.8,798.87,"APSV1",.1,103,0)
 
"IX",798.8,798.87,"APSV1",.1,104,0)
  5  "APSV",  2,    9,  "DOU, JOHN",      3)
"IX",798.8,798.87,"APSV1",.1,105,0)
  5  "APSV",  2,    9,  "SMITH, BOB",     6)
"IX",798.8,798.87,"APSV1",.1,106,0)
 
"IX",798.8,798.87,"APSV1",.1,107,0)
  6  "APSV",  2,   10,  "1935/10/05",     6)
"IX",798.8,798.87,"APSV1",.1,108,0)
  6  "APSV",  2,   10,  "1950/03/25",     3)
"IX",798.8,798.87,"APSV1",.1,109,0)
 
"IX",798.8,798.87,"APSV1",.1,110,0)
  3  "APSV",  3,    0,  " ",              4)
"IX",798.8,798.87,"APSV1",.1,111,0)
  3  "APSV",  3,    0,  " ",              5)
"IX",798.8,798.87,"APSV1",.1,112,0)
 
"IX",798.8,798.87,"APSV1",.1,113,0)
  4  "APSV",  6,    0,  " ",              7)
"IX",798.8,798.87,"APSV1",.1,114,0)
  4  "APSV",  6,    0,  " ",              8)
"IX",798.8,798.87,"APSV1",.1,115,0)
 
"IX",798.8,798.87,"APSV1",.1,116,0)
Let us look more closely at the first entry of the
"IX",798.8,798.87,"APSV1",.1,117,0)
sub-index #5 (also see Table 1):
"IX",798.8,798.87,"APSV1",.1,118,0)
 
"IX",798.8,798.87,"APSV1",.1,119,0)
 2  is the IEN of the REPORTS element in the
"IX",798.8,798.87,"APSV1",.1,120,0)
    REPORT ELEMENT multiple;
"IX",798.8,798.87,"APSV1",.1,121,0)
 
"IX",798.8,798.87,"APSV1",.1,122,0)
 9  is the sorting mode (the IEN of the NAME
"IX",798.8,798.87,"APSV1",.1,123,0)
    element in the ROR XML ELEMENT file);
"IX",798.8,798.87,"APSV1",.1,124,0)
 
"IX",798.8,798.87,"APSV1",.1,125,0)
 "DOU, JOHN"
"IX",798.8,798.87,"APSV1",.1,126,0)
    is the value of the NAME element;
"IX",798.8,798.87,"APSV1",.1,127,0)
 
"IX",798.8,798.87,"APSV1",.1,128,0)
 3  is the IEN of the corresponding PATIENT
"IX",798.8,798.87,"APSV1",.1,129,0)
    element in the REPORT ELEMENT multiple.
"IX",798.8,798.87,"APSV1",.1,130,0)
 
"IX",798.8,798.87,"APSV1",.1,131,0)
If the sort mode 9 (NAME) is used then the
"IX",798.8,798.87,"APSV1",.1,132,0)
resulting XML document will look like this:
"IX",798.8,798.87,"APSV1",.1,133,0)
 
"IX",798.8,798.87,"APSV1",.1,134,0)
 <REPORT>
"IX",798.8,798.87,"APSV1",.1,135,0)
  <PATIENTS>
"IX",798.8,798.87,"APSV1",.1,136,0)
   <PATIENT>
"IX",798.8,798.87,"APSV1",.1,137,0)
    <NAME>DOU, JOHN"</NAME>
"IX",798.8,798.87,"APSV1",.1,138,0)
    <DOB>950/03/25</DOB>
"IX",798.8,798.87,"APSV1",.1,139,0)
   </PATIENT>
"IX",798.8,798.87,"APSV1",.1,140,0)
   <PATIENT>
"IX",798.8,798.87,"APSV1",.1,141,0)
    <NAME>SMITH, BOB</NAME>
"IX",798.8,798.87,"APSV1",.1,142,0)
    <DOB>1935/10/05</DOB>
"IX",798.8,798.87,"APSV1",.1,143,0)
   </PATIENT>
"IX",798.8,798.87,"APSV1",.1,144,0)
  </PATIENTS>
"IX",798.8,798.87,"APSV1",.1,145,0)
 </REPORT>
"IX",798.8,798.87,"APSV1",.1,146,0)
 
"IX",798.8,798.87,"APSV1",.1,147,0)
If the sort mode 10 (DOB) is used, the resulting
"IX",798.8,798.87,"APSV1",.1,148,0)
XML document will look as follow:
"IX",798.8,798.87,"APSV1",.1,149,0)
 
"IX",798.8,798.87,"APSV1",.1,150,0)
 <REPORT>
"IX",798.8,798.87,"APSV1",.1,151,0)
  <PATIENTS>
"IX",798.8,798.87,"APSV1",.1,152,0)
   <PATIENT>
"IX",798.8,798.87,"APSV1",.1,153,0)
    <NAME>SMITH, BOB</NAME>
"IX",798.8,798.87,"APSV1",.1,154,0)
    <DOB>1935/10/05</DOB>
"IX",798.8,798.87,"APSV1",.1,155,0)
   </PATIENT>
"IX",798.8,798.87,"APSV1",.1,156,0)
   <PATIENT>
"IX",798.8,798.87,"APSV1",.1,157,0)
    <NAME>DOU, JOHN"</NAME>
"IX",798.8,798.87,"APSV1",.1,158,0)
    <DOB>950/03/25</DOB>
"IX",798.8,798.87,"APSV1",.1,159,0)
   </PATIENT>
"IX",798.8,798.87,"APSV1",.1,160,0)
  </PATIENTS>
"IX",798.8,798.87,"APSV1",.1,161,0)
 </REPORT>
"IX",798.8,798.87,"APSV1",1)
S ^RORDATA(798.8,DA(1),"RI","APSV",X(2),X(3),X(6),X(1))=""
"IX",798.8,798.87,"APSV1",1.4)
S X=(X(5)>0)
"IX",798.8,798.87,"APSV1",2)
K ^RORDATA(798.8,DA(1),"RI","APSV",X(2),X(3),X(6),X(1))
"IX",798.8,798.87,"APSV1",2.5)

"IX",798.8,798.87,"APSV1",11.1,0)
^.114IA^10^6
"IX",798.8,798.87,"APSV1",11.1,1,0)
1^F^798.87^.02^^4^F
"IX",798.8,798.87,"APSV1",11.1,2,0)
2^C^^^^1
"IX",798.8,798.87,"APSV1",11.1,2,1.5)
S X=$S(X(1)>0:$P($G(^RORDATA(798.8,DA(1),"RI",X(1),0)),U,2),1:"")
"IX",798.8,798.87,"APSV1",11.1,6,0)
6^C^^^30^3
"IX",798.8,798.87,"APSV1",11.1,6,1.5)
S X=$$SORTBY^RORDD01(X(5),X(4))
"IX",798.8,798.87,"APSV1",11.1,8,0)
3^F^798.87^.01^^2^F
"IX",798.8,798.87,"APSV1",11.1,9,0)
4^F^798.87^1^30^^F
"IX",798.8,798.87,"APSV1",11.1,10,0)
5^F^798.87^.03^^^
"IX",798.9,798.9,"B",0)
798.9^B^Uniqueness Index for the "A" Key of File #798.9^R^^F^IR^I^798.9^^^^^LS
"IX",798.9,798.9,"B",1)
S ^ROR(798.9,"B",X,DA)=""
"IX",798.9,798.9,"B",2)
K ^ROR(798.9,"B",X,DA)
"IX",798.9,798.9,"B",2.5)
K ^ROR(798.9,"B")
"IX",798.9,798.9,"B",11.1,0)
^.114IA^1^1
"IX",798.9,798.9,"B",11.1,1,0)
1^F^798.9^.01^^1
"IX",799.31,799.31,"B",0)
799.31^B^Uniqueness Index for Key 'A' of File #799.31^R^^F^IR^I^799.31^^^^^LS
"IX",799.31,799.31,"B",1)
S ^ROR(799.31,"B",X,DA)=""
"IX",799.31,799.31,"B",2)
K ^ROR(799.31,"B",X,DA)
"IX",799.31,799.31,"B",2.5)
K ^ROR(799.31,"B")
"IX",799.31,799.31,"B",11.1,0)
^.114IA^1^1
"IX",799.31,799.31,"B",11.1,1,0)
1^F^799.31^.01^^1
"IX",799.34,799.34,"KEY",0)
799.34^KEY^Uniqueness Index for Key 'A' of File #799.34^R^^F^IR^I^799.34^^^^^LS
"IX",799.34,799.34,"KEY",1)
S ^ROR(799.34,"KEY",X,DA)=""
"IX",799.34,799.34,"KEY",2)
K ^ROR(799.34,"KEY",X,DA)
"IX",799.34,799.34,"KEY",2.5)
K ^ROR(799.34,"KEY")
"IX",799.34,799.34,"KEY",11.1,0)
^.114IA^1^1
"IX",799.34,799.34,"KEY",11.1,1,0)
1^F^799.34^.04^^1
"IX",799.4,799.41,"AD",0)
799.41^AD^Date of diagnosis^R^^R^IR^I^799.41^^^^^S
"IX",799.4,799.41,"AD",.1,0)
^^2^2^3030507^
"IX",799.4,799.41,"AD",.1,1,0)
This index sorts the AIDS indicator diseases by
"IX",799.4,799.41,"AD",.1,2,0)
the dates when they were diagnosed.
"IX",799.4,799.41,"AD",1)
S ^RORDATA(799.4,DA(1),10,"AD",X(2),DA)=""
"IX",799.4,799.41,"AD",1.4)
S X=(X(1)'="")
"IX",799.4,799.41,"AD",2)
K ^RORDATA(799.4,DA(1),10,"AD",X(2),DA)
"IX",799.4,799.41,"AD",2.5)
K ^RORDATA(799.4,DA(1),10,"AD")
"IX",799.4,799.41,"AD",11.1,0)
^.114IA^2^2
"IX",799.4,799.41,"AD",11.1,1,0)
1^F^799.41^.02^^^F
"IX",799.4,799.41,"AD",11.1,2,0)
2^F^799.41^.03^^1^F
"IX",799.4,799.41,"AIDSOI",0)
799.41^AIDSOI^Sets the CLINICAL AIDS field^MU^^R^IR^I^799.41^^^^^A
"IX",799.4,799.41,"AIDSOI",1)
D AIDSOI^RORDD01(.DA,$G(X(2)))
"IX",799.4,799.41,"AIDSOI",1.4)
S X=($G(X(1))'="")
"IX",799.4,799.41,"AIDSOI",2)
Q
"IX",799.4,799.41,"AIDSOI",11.1,0)
^.114IA^2^2
"IX",799.4,799.41,"AIDSOI",11.1,1,0)
1^F^799.41^.02^^^F
"IX",799.4,799.41,"AIDSOI",11.1,1,3)

"IX",799.4,799.41,"AIDSOI",11.1,2,0)
2^F^799.41^.03^^^F
"IX",799.4,799.41,"AIDSOI",11.1,2,3)

"KEY",798.9,798.9,"A",0)
798.9^A^S^117
"KEY",798.9,798.9,"A",2,0)
^.312IA^1^1
"KEY",798.9,798.9,"A",2,1,0)
.01^798.9^1
"KEY",799.31,799.31,"A",0)
799.31^A^S^685
"KEY",799.31,799.31,"A",2,0)
^.312IA^1^1
"KEY",799.31,799.31,"A",2,1,0)
.01^799.31^1
"KEY",799.34,799.34,"A",0)
799.34^A^P^301
"KEY",799.34,799.34,"A",2,0)
^.312IA^1^1
"KEY",799.34,799.34,"A",2,1,0)
.04^799.34^1
"KEYPTR",798.9,798.9,"A")
798.9^B
"KEYPTR",799.31,799.31,"A")
799.31^B
"KEYPTR",799.34,799.34,"A")
799.34^KEY
"KRN",.84,7980000.018,-1)
0^1
"KRN",.84,7980000.018,0)
7980000.018^2^^CLINICAL CASE REGISTRIES^Report options
"KRN",.84,7980000.018,2,0)
^.844^79^79^3060526^^
"KRN",.84,7980000.018,2,1,0)
AGGR_GENERIC
"KRN",.84,7980000.018,2,2,0)
        Aggregate by Generic Names
"KRN",.84,7980000.018,2,3,0)
 
"KRN",.84,7980000.018,2,4,0)
AGGR_FORMUL,AGGR_FORCED
"KRN",.84,7980000.018,2,5,0)
        Aggregate by Individual Formulations
"KRN",.84,7980000.018,2,6,0)
 
"KRN",.84,7980000.018,2,7,0)
        Aggregate by Individual Formulations (enforced because of investigational medications)
"KRN",.84,7980000.018,2,8,0)
 
"KRN",.84,7980000.018,2,9,0)
BASIC,COMPLEX
"KRN",.84,7980000.018,2,10,0)
        Basic Care
"KRN",.84,7980000.018,2,11,0)
        Complex Care
"KRN",.84,7980000.018,2,12,0)
        Both Basic and Complex Care
"KRN",.84,7980000.018,2,13,0)
 
"KRN",.84,7980000.018,2,14,0)
CAREONLY
"KRN",.84,7980000.018,2,15,0)
        Treated only
"KRN",.84,7980000.018,2,16,0)
 
"KRN",.84,7980000.018,2,17,0)
COMPLETE
"KRN",.84,7980000.018,2,18,0)
        Complete Report
"KRN",.84,7980000.018,2,19,0)
 
"KRN",.84,7980000.018,2,20,0)
CONFIRMED,PENDING
"KRN",.84,7980000.018,2,21,0)
        Confirmed
"KRN",.84,7980000.018,2,22,0)
        Pending
"KRN",.84,7980000.018,2,23,0)
        Both Confirmed and Pending
"KRN",.84,7980000.018,2,24,0)
 
"KRN",.84,7980000.018,2,25,0)
DE_BEFORE,DE_DURING,DE_AFTER
"KRN",.84,7980000.018,2,26,0)
        Added before the date range
"KRN",.84,7980000.018,2,27,0)
        Added during the date range
"KRN",.84,7980000.018,2,28,0)
        Added before and during the date range
"KRN",.84,7980000.018,2,29,0)
        Added after the date range
"KRN",.84,7980000.018,2,30,0)
        Added before and after the date range 
"KRN",.84,7980000.018,2,31,0)
        Added during and after the date range
"KRN",.84,7980000.018,2,32,0)
        Added on any date
"KRN",.84,7980000.018,2,33,0)
 
"KRN",.84,7980000.018,2,34,0)
GENERIC,FORMULATIONS
"KRN",.84,7980000.018,2,35,0)
        Generic Medications
"KRN",.84,7980000.018,2,36,0)
        Individual Formulations
"KRN",.84,7980000.018,2,37,0)
        Generic Medications and Individual Formulations
"KRN",.84,7980000.018,2,38,0)
 
"KRN",.84,7980000.018,2,39,0)
INPATIENT,OUTPATIENT
"KRN",.84,7980000.018,2,40,0)
        Inpatient
"KRN",.84,7980000.018,2,41,0)
        Outpatient
"KRN",.84,7980000.018,2,42,0)
        Both Inpatients and Outpatients
"KRN",.84,7980000.018,2,43,0)
 
"KRN",.84,7980000.018,2,44,0)
LAB
"KRN",.84,7980000.018,2,45,0)
        Selected lab tests were preformed
"KRN",.84,7980000.018,2,46,0)
 
"KRN",.84,7980000.018,2,47,0)
NOLAB
"KRN",.84,7980000.018,2,48,0)
        No selected lab tests were performed
"KRN",.84,7980000.018,2,49,0)
 
"KRN",.84,7980000.018,2,50,0)
NOPHARM
"KRN",.84,7980000.018,2,51,0)
        Did not receive selected medication(s)
"KRN",.84,7980000.018,2,52,0)
 
"KRN",.84,7980000.018,2,53,0)
NOTSEEN,SEEN
"KRN",.84,7980000.018,2,54,0)
        Not Seen
"KRN",.84,7980000.018,2,55,0)
        Seen
"KRN",.84,7980000.018,2,56,0)
        Both Seen and Not Seen
"KRN",.84,7980000.018,2,57,0)
 
"KRN",.84,7980000.018,2,58,0)
PHARM
"KRN",.84,7980000.018,2,59,0)
        Received selected medication(s)
"KRN",.84,7980000.018,2,60,0)
 
"KRN",.84,7980000.018,2,61,0)
PROC
"KRN",.84,7980000.018,2,62,0)
        Selected procedures were performed
"KRN",.84,7980000.018,2,63,0)
 
"KRN",.84,7980000.018,2,64,0)
NOPROC
"KRN",.84,7980000.018,2,65,0)
        No selected procedures were performed
"KRN",.84,7980000.018,2,66,0)
 
"KRN",.84,7980000.018,2,67,0)
PTLIST
"KRN",.84,7980000.018,2,68,0)
        List of Patients
"KRN",.84,7980000.018,2,69,0)
 
"KRN",.84,7980000.018,2,70,0)
REGMEDS,INVESTIG
"KRN",.84,7980000.018,2,71,0)
        Registry Medications
"KRN",.84,7980000.018,2,72,0)
        Investigational Medications
"KRN",.84,7980000.018,2,73,0)
        Registry and Investigational Medications
"KRN",.84,7980000.018,2,74,0)
 
"KRN",.84,7980000.018,2,75,0)
REGMEDSMRY
"KRN",.84,7980000.018,2,76,0)
        Summary Registry Meds Usage Table
"KRN",.84,7980000.018,2,77,0)
 
"KRN",.84,7980000.018,2,78,0)
SUMMARY
"KRN",.84,7980000.018,2,79,0)
        Summary
"KRN",.84,7980000.018,5,0)
^.841^1^1
"KRN",.84,7980000.018,5,1,0)
RORXU002^OPTXT
"KRN",.84,7980000.018,5,"B","RORXU002",1)

"KRN",.84,7981011.001,-1)
0^8
"KRN",.84,7981011.001,0)
7981011.001^2^^CLINICAL CASE REGISTRIES^Patient Medication History (HTML)
"KRN",.84,7981011.001,2,0)
^^151^151^3060622^
"KRN",.84,7981011.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981011.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981011.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981011.001,2,4,0)
>
"KRN",.84,7981011.001,2,5,0)
 
"KRN",.84,7981011.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981011.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981011.001,2,8,0)
<xsl:import  href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981011.001,2,9,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981011.001,2,10,0)
 
"KRN",.84,7981011.001,2,11,0)
<xsl:template match="/">
"KRN",.84,7981011.001,2,12,0)
 <html>
"KRN",.84,7981011.001,2,13,0)
  <head>
"KRN",.84,7981011.001,2,14,0)
   <title>Patient Medication History</title>
"KRN",.84,7981011.001,2,15,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981011.001,2,16,0)
  </head>
"KRN",.84,7981011.001,2,17,0)
  <body>
"KRN",.84,7981011.001,2,18,0)
   <h1>Patient Medication History</h1>
"KRN",.84,7981011.001,2,19,0)
   <xsl:call-template name="ReportHeader"/> 
"KRN",.84,7981011.001,2,20,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981011.001,2,21,0)
  </body>
"KRN",.84,7981011.001,2,22,0)
 </html>
"KRN",.84,7981011.001,2,23,0)
</xsl:template>
"KRN",.84,7981011.001,2,24,0)
 
"KRN",.84,7981011.001,2,25,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981011.001,2,26,0)
 <div style="page-break-before:always">
"KRN",.84,7981011.001,2,27,0)
  <h2><xsl:value-of select="NAME"/></h2>
"KRN",.84,7981011.001,2,28,0)
  <table width="70%" cellpadding="5" cellspacing="0">
"KRN",.84,7981011.001,2,29,0)
   <thead>
"KRN",.84,7981011.001,2,30,0)
    <tr>
"KRN",.84,7981011.001,2,31,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,32,0)
      <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981011.001,2,33,0)
      <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981011.001,2,34,0)
      <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981011.001,2,35,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,36,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,37,0)
      <xsl:with-param name="sort" select="'PATIENTS=NAME'"/>
"KRN",.84,7981011.001,2,38,0)
      <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981011.001,2,39,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,40,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,41,0)
      <xsl:with-param name="sort" select="'PATIENTS=LAST4'"/>
"KRN",.84,7981011.001,2,42,0)
      <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981011.001,2,43,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,44,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,45,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,46,0)
      <xsl:with-param name="sort" select="'PATIENTS=DOB'"/>
"KRN",.84,7981011.001,2,47,0)
      <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981011.001,2,48,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,49,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,50,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,51,0)
      <xsl:with-param name="sort" select="'PATIENTS=AGE'"/>
"KRN",.84,7981011.001,2,52,0)
      <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981011.001,2,53,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,54,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,55,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,56,0)
      <xsl:with-param name="sort" select="'PATIENTS=DOD'"/>
"KRN",.84,7981011.001,2,57,0)
      <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981011.001,2,58,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,59,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,60,0)
    </tr>
"KRN",.84,7981011.001,2,61,0)
   </thead>
"KRN",.84,7981011.001,2,62,0)
   <tbody>
"KRN",.84,7981011.001,2,63,0)
    <tr>
"KRN",.84,7981011.001,2,64,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,65,0)
      <xsl:with-param name="value" select="position()"/>
"KRN",.84,7981011.001,2,66,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,67,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,68,0)
      <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981011.001,2,69,0)
      <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981011.001,2,70,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,71,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,72,0)
      <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981011.001,2,73,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,74,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,75,0)
      <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981011.001,2,76,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,77,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,78,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,79,0)
      <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981011.001,2,80,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,81,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,82,0)
      <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981011.001,2,83,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,84,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,85,0)
    </tr>
"KRN",.84,7981011.001,2,86,0)
   </tbody>
"KRN",.84,7981011.001,2,87,0)
  </table>
"KRN",.84,7981011.001,2,88,0)
  <h3>Drug History</h3>
"KRN",.84,7981011.001,2,89,0)
  <xsl:apply-templates select="PTRXL"/>
"KRN",.84,7981011.001,2,90,0)
 </div>
"KRN",.84,7981011.001,2,91,0)
</xsl:template>
"KRN",.84,7981011.001,2,92,0)
 
"KRN",.84,7981011.001,2,93,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981011.001,2,94,0)
 
"KRN",.84,7981011.001,2,95,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981011.001,2,96,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,97,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981011.001,2,98,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,99,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,100,0)
</xsl:template>
"KRN",.84,7981011.001,2,101,0)
 
"KRN",.84,7981011.001,2,102,0)
<xsl:template match="COLUMN[@NAME='DAYSPLY']">
"KRN",.84,7981011.001,2,103,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,104,0)
  <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981011.001,2,105,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981011.001,2,106,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,107,0)
</xsl:template>
"KRN",.84,7981011.001,2,108,0)
 
"KRN",.84,7981011.001,2,109,0)
<xsl:template match="COLUMN[@NAME='FILLTYPE']">
"KRN",.84,7981011.001,2,110,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,111,0)
  <xsl:with-param name="title" select="'Fill Type'"/>
"KRN",.84,7981011.001,2,112,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,113,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,114,0)
</xsl:template>
"KRN",.84,7981011.001,2,115,0)
 
"KRN",.84,7981011.001,2,116,0)
<xsl:template match="COLUMN[@NAME='GENERIC']">
"KRN",.84,7981011.001,2,117,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,118,0)
  <xsl:with-param name="title" select="'Generic Name'"/>
"KRN",.84,7981011.001,2,119,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,120,0)
</xsl:template>
"KRN",.84,7981011.001,2,121,0)
 
"KRN",.84,7981011.001,2,122,0)
<xsl:template match="COLUMN[@NAME='ORDER']">
"KRN",.84,7981011.001,2,123,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,124,0)
  <xsl:with-param name="title" select="'Rx#'"/>
"KRN",.84,7981011.001,2,125,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,126,0)
  <xsl:with-param name="sort" select="'PTRXL=ORDER'"/>
"KRN",.84,7981011.001,2,127,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,128,0)
</xsl:template>
"KRN",.84,7981011.001,2,129,0)
 
"KRN",.84,7981011.001,2,130,0)
<xsl:template match="COLUMN[@NAME='TYPE']">
"KRN",.84,7981011.001,2,131,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,132,0)
  <xsl:with-param name="title" select="'Type'"/>
"KRN",.84,7981011.001,2,133,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,134,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,135,0)
</xsl:template>
"KRN",.84,7981011.001,2,136,0)
 
"KRN",.84,7981011.001,2,137,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981011.001,2,138,0)
 
"KRN",.84,7981011.001,2,139,0)
<xsl:template match="DRUG/DATE">
"KRN",.84,7981011.001,2,140,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,141,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,142,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,143,0)
</xsl:template>
"KRN",.84,7981011.001,2,144,0)
 
"KRN",.84,7981011.001,2,145,0)
<xsl:template match="DRUG/GENERIC">
"KRN",.84,7981011.001,2,146,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,147,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981011.001,2,148,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,149,0)
</xsl:template>
"KRN",.84,7981011.001,2,150,0)
 
"KRN",.84,7981011.001,2,151,0)
</xsl:stylesheet>
"KRN",.84,7981011.002,-1)
0^13
"KRN",.84,7981011.002,0)
7981011.002^2^^CLINICAL CASE REGISTRIES^Patient Medication History (CSV)
"KRN",.84,7981011.002,2,0)
^^86^86^3051119^
"KRN",.84,7981011.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981011.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981011.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981011.002,2,4,0)
>
"KRN",.84,7981011.002,2,5,0)
 
"KRN",.84,7981011.002,2,6,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981011.002,2,7,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981011.002,2,8,0)
 
"KRN",.84,7981011.002,2,9,0)
<xsl:template match="/">
"KRN",.84,7981011.002,2,10,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981011.002,2,11,0)
</xsl:template>
"KRN",.84,7981011.002,2,12,0)
 
"KRN",.84,7981011.002,2,13,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981011.002,2,14,0)
 <xsl:text>Patient Medication History</xsl:text>
"KRN",.84,7981011.002,2,15,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,16,0)
 <xsl:text>Patient Name,SSN,Date of Birth,Age,Date of Death</xsl:text>
"KRN",.84,7981011.002,2,17,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,18,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,19,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981011.002,2,20,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,21,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,22,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981011.002,2,23,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,24,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,25,0)
  <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981011.002,2,26,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,27,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,28,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,29,0)
  <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981011.002,2,30,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,31,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,32,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981011.002,2,33,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,34,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,35,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,36,0)
 <xsl:apply-templates select="PTRXL"/>
"KRN",.84,7981011.002,2,37,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981011.002,2,38,0)
</xsl:template>
"KRN",.84,7981011.002,2,39,0)
 
"KRN",.84,7981011.002,2,40,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981011.002,2,41,0)
 
"KRN",.84,7981011.002,2,42,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981011.002,2,43,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,44,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981011.002,2,45,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,46,0)
</xsl:template>
"KRN",.84,7981011.002,2,47,0)
 
"KRN",.84,7981011.002,2,48,0)
<xsl:template match="COLUMN[@NAME='DAYSPLY']">
"KRN",.84,7981011.002,2,49,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,50,0)
  <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981011.002,2,51,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,52,0)
</xsl:template>
"KRN",.84,7981011.002,2,53,0)
 
"KRN",.84,7981011.002,2,54,0)
<xsl:template match="COLUMN[@NAME='FILLTYPE']">
"KRN",.84,7981011.002,2,55,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,56,0)
  <xsl:with-param name="title" select="'Fill Type'"/>
"KRN",.84,7981011.002,2,57,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,58,0)
</xsl:template>
"KRN",.84,7981011.002,2,59,0)
 
"KRN",.84,7981011.002,2,60,0)
<xsl:template match="COLUMN[@NAME='GENERIC']">
"KRN",.84,7981011.002,2,61,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,62,0)
  <xsl:with-param name="title" select="'Generic Name'"/>
"KRN",.84,7981011.002,2,63,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,64,0)
</xsl:template>
"KRN",.84,7981011.002,2,65,0)
 
"KRN",.84,7981011.002,2,66,0)
<xsl:template match="COLUMN[@NAME='ORDER']">
"KRN",.84,7981011.002,2,67,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,68,0)
  <xsl:with-param name="title" select="'Rx#'"/>
"KRN",.84,7981011.002,2,69,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,70,0)
</xsl:template>
"KRN",.84,7981011.002,2,71,0)
 
"KRN",.84,7981011.002,2,72,0)
<xsl:template match="COLUMN[@NAME='TYPE']">
"KRN",.84,7981011.002,2,73,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,74,0)
  <xsl:with-param name="title" select="'Type'"/>
"KRN",.84,7981011.002,2,75,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,76,0)
</xsl:template>
"KRN",.84,7981011.002,2,77,0)
 
"KRN",.84,7981011.002,2,78,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981011.002,2,79,0)
 
"KRN",.84,7981011.002,2,80,0)
<xsl:template match="DRUG/DATE">
"KRN",.84,7981011.002,2,81,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,82,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,83,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,84,0)
</xsl:template>
"KRN",.84,7981011.002,2,85,0)
 
"KRN",.84,7981011.002,2,86,0)
</xsl:stylesheet>
"KRN",.84,7981012.001,-1)
0^4
"KRN",.84,7981012.001,0)
7981012.001^2^^CLINICAL CASE REGISTRIES^Combined Meds and Labs Report (HTML)
"KRN",.84,7981012.001,2,0)
^^382^382^3061101^
"KRN",.84,7981012.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981012.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981012.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981012.001,2,4,0)
>
"KRN",.84,7981012.001,2,5,0)
 
"KRN",.84,7981012.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981012.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981012.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->            
"KRN",.84,7981012.001,2,9,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981012.001,2,10,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981012.001,2,11,0)
 
"KRN",.84,7981012.001,2,12,0)
<xsl:key name="patient-drug" match="/REPORT/DRUGS/DRUG"  use="@ID"/>
"KRN",.84,7981012.001,2,13,0)
<xsl:key name="patient-lt"   match="/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981012.001,2,14,0)
<xsl:key name="patient-both" match="/REPORT/DRUGS/DRUG|/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981012.001,2,15,0)
 
"KRN",.84,7981012.001,2,16,0)
<!-- Determine if the Meds and/or Labs table is not empty. -->
"KRN",.84,7981012.001,2,17,0)
<xsl:variable name="D1" select="/REPORT/DRUGS/DRUG[1]"/>
"KRN",.84,7981012.001,2,18,0)
<xsl:variable name="L1" select="/REPORT/LABTESTS/LT[1]"/>
"KRN",.84,7981012.001,2,19,0)
 
"KRN",.84,7981012.001,2,20,0)
<!-- Determine if the Meds and/or Labs table is sorted by a patient data field. -->
"KRN",.84,7981012.001,2,21,0)
<xsl:variable name="PTCOLS"   select="',DOD,LAST4,NAME,'"/>
"KRN",.84,7981012.001,2,22,0)
<xsl:variable name="PTSDRUGS" select="contains($PTCOLS,concat(',',/REPORT/DRUGS/@SORT,','))"/>
"KRN",.84,7981012.001,2,23,0)
<xsl:variable name="PTSLABS"  select="contains($PTCOLS,concat(',',/REPORT/LABTESTS/@SORT,','))"/>
"KRN",.84,7981012.001,2,24,0)
 
"KRN",.84,7981012.001,2,25,0)
<xsl:template match="/">
"KRN",.84,7981012.001,2,26,0)
 <html>
"KRN",.84,7981012.001,2,27,0)
  <head>
"KRN",.84,7981012.001,2,28,0)
   <title>Combined Meds and Labs Report</title>
"KRN",.84,7981012.001,2,29,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981012.001,2,30,0)
  </head>
"KRN",.84,7981012.001,2,31,0)
  <body>
"KRN",.84,7981012.001,2,32,0)
   <h1>Combined Meds and Labs Report</h1>
"KRN",.84,7981012.001,2,33,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981012.001,2,34,0)
   <xsl:choose>
"KRN",.84,7981012.001,2,35,0)
    <!-- 
"KRN",.84,7981012.001,2,36,0)
     If both Meds and Labs tables are not empty and at least one of them
"KRN",.84,7981012.001,2,37,0)
     is sorted by patient data field, then group the data by patients.
"KRN",.84,7981012.001,2,38,0)
    -->
"KRN",.84,7981012.001,2,39,0)
    <xsl:when test="$D1 and $L1 and ($PTSDRUGS or $PTSLABS)">
"KRN",.84,7981012.001,2,40,0)
     <xsl:call-template name="MedsAndLabs"/>
"KRN",.84,7981012.001,2,41,0)
    </xsl:when>
"KRN",.84,7981012.001,2,42,0)
    <!-- 
"KRN",.84,7981012.001,2,43,0)
     Otherwise, format available data using separate tables.
"KRN",.84,7981012.001,2,44,0)
    -->
"KRN",.84,7981012.001,2,45,0)
    <xsl:when test="$D1 or $L1 or /REPORT/PATIENTS/PATIENT[1]">
"KRN",.84,7981012.001,2,46,0)
     <xsl:apply-templates select="/REPORT/DRUGS"/>
"KRN",.84,7981012.001,2,47,0)
     <xsl:apply-templates select="/REPORT/LABTESTS"/>
"KRN",.84,7981012.001,2,48,0)
     <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981012.001,2,49,0)
    </xsl:when>
"KRN",.84,7981012.001,2,50,0)
    <xsl:otherwise>
"KRN",.84,7981012.001,2,51,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,52,0)
    </xsl:otherwise>
"KRN",.84,7981012.001,2,53,0)
   </xsl:choose>
"KRN",.84,7981012.001,2,54,0)
  </body>
"KRN",.84,7981012.001,2,55,0)
 </html>
"KRN",.84,7981012.001,2,56,0)
</xsl:template>
"KRN",.84,7981012.001,2,57,0)
 
"KRN",.84,7981012.001,2,58,0)
<xsl:template name="MedsAndLabs">
"KRN",.84,7981012.001,2,59,0)
 <xsl:variable name="SORT">
"KRN",.84,7981012.001,2,60,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,61,0)
   <xsl:when test="$PTSDRUGS"><xsl:value-of select="/REPORT/DRUGS/@SORT"/></xsl:when>
"KRN",.84,7981012.001,2,62,0)
   <xsl:when test="$PTSLABS"><xsl:value-of select="/REPORT/LABTESTS/@SORT"/></xsl:when>
"KRN",.84,7981012.001,2,63,0)
   <xsl:otherwise>NAME</xsl:otherwise>
"KRN",.84,7981012.001,2,64,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,65,0)
 </xsl:variable>
"KRN",.84,7981012.001,2,66,0)
 <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,67,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,68,0)
   <xsl:when test="($PTSDRUGS and boolean(/REPORT/DRUGS/@SORTDESC)) or 
"KRN",.84,7981012.001,2,69,0)
    ($PTSLABS and boolean(/REPORT/LABTESTS/@SORTDESC))">descending</xsl:when>
"KRN",.84,7981012.001,2,70,0)
   <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,71,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,72,0)
 </xsl:variable>
"KRN",.84,7981012.001,2,73,0)
 <xsl:for-each select="/REPORT//*[generate-id(.)=generate-id(key('patient-both',@ID))]">
"KRN",.84,7981012.001,2,74,0)
  <!--
"KRN",.84,7981012.001,2,75,0)
  <xsl:sort select="concat(*[name()=$SORT],' ')" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,76,0)
  <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,77,0)
  -->
"KRN",.84,7981012.001,2,78,0)
  <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,79,0)
  <div style="page-break-before:always">
"KRN",.84,7981012.001,2,80,0)
   <table style="width:100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,81,0)
    <thead>
"KRN",.84,7981012.001,2,82,0)
     <tr>
"KRN",.84,7981012.001,2,83,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,84,0)
       <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981012.001,2,85,0)
       <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981012.001,2,86,0)
       <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981012.001,2,87,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,88,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,89,0)
       <xsl:with-param name="sort" select="'DRUGS=NAME&amp;LABTESTS=NAME'"/>
"KRN",.84,7981012.001,2,90,0)
       <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981012.001,2,91,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,92,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,93,0)
       <xsl:with-param name="sort" select="'DRUGS=LAST4&amp;LABTESTS=LAST4'"/>
"KRN",.84,7981012.001,2,94,0)
       <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981012.001,2,95,0)
       <xsl:with-param name="width" select="'20%'"/>
"KRN",.84,7981012.001,2,96,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,97,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,98,0)
       <xsl:with-param name="sort" select="'DRUGS=DOD&amp;LABTESTS=DOD'"/>
"KRN",.84,7981012.001,2,99,0)
       <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981012.001,2,100,0)
       <xsl:with-param name="width" select="'20%'"/>
"KRN",.84,7981012.001,2,101,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,102,0)
     </tr>
"KRN",.84,7981012.001,2,103,0)
    </thead>
"KRN",.84,7981012.001,2,104,0)
    <tr>
"KRN",.84,7981012.001,2,105,0)
     <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,106,0)
      <xsl:with-param name="seqnum" select="1"/>
"KRN",.84,7981012.001,2,107,0)
     </xsl:call-template>
"KRN",.84,7981012.001,2,108,0)
    </tr>
"KRN",.84,7981012.001,2,109,0)
   </table>
"KRN",.84,7981012.001,2,110,0)
   <br/>
"KRN",.84,7981012.001,2,111,0)
   <table cellpadding="5" cellspacing="0" style="float:left;width:43%;">
"KRN",.84,7981012.001,2,112,0)
    <thead>
"KRN",.84,7981012.001,2,113,0)
     <tr>
"KRN",.84,7981012.001,2,114,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,115,0)
       <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981012.001,2,116,0)
       <xsl:with-param name="sort" select="'DRUGS=RXNAME:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981012.001,2,117,0)
       <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981012.001,2,118,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,119,0)
     </tr>
"KRN",.84,7981012.001,2,120,0)
    </thead>
"KRN",.84,7981012.001,2,121,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,122,0)
     <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981012.001,2,123,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,124,0)
    <tbody>
"KRN",.84,7981012.001,2,125,0)
     <xsl:for-each select="key('patient-drug',@ID)">
"KRN",.84,7981012.001,2,126,0)
      <xsl:sort select="RXNAME"/>
"KRN",.84,7981012.001,2,127,0)
      <tr><xsl:call-template name="DrugData"/></tr>
"KRN",.84,7981012.001,2,128,0)
     </xsl:for-each>
"KRN",.84,7981012.001,2,129,0)
    </tbody>
"KRN",.84,7981012.001,2,130,0)
   </table>
"KRN",.84,7981012.001,2,131,0)
   <table cellpadding="5" cellspacing="0" style="float:right;width:55%;">
"KRN",.84,7981012.001,2,132,0)
    <thead>
"KRN",.84,7981012.001,2,133,0)
     <tr>
"KRN",.84,7981012.001,2,134,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,135,0)
       <xsl:with-param name="sort" select="'LABTESTS=DATE:DESC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,136,0)
       <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981012.001,2,137,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981012.001,2,138,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,139,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,140,0)
       <xsl:with-param name="sort" select="'LABTESTS=LTNAME:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,141,0)
       <xsl:with-param name="title" select="'Test Name'"/>    
"KRN",.84,7981012.001,2,142,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,143,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,144,0)
       <xsl:with-param name="sort" select="'LABTESTS=RESULT:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,145,0)
       <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981012.001,2,146,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981012.001,2,147,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,148,0)
     </tr>
"KRN",.84,7981012.001,2,149,0)
    </thead>
"KRN",.84,7981012.001,2,150,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,151,0)
     <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981012.001,2,152,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,153,0)
    <tbody>
"KRN",.84,7981012.001,2,154,0)
     <xsl:for-each select="key('patient-lt',@ID)">
"KRN",.84,7981012.001,2,155,0)
      <!--
"KRN",.84,7981012.001,2,156,0)
      <xsl:sort select="LTNAME"/>
"KRN",.84,7981012.001,2,157,0)
      <xsl:sort select="DATE" data-type="number"/>
"KRN",.84,7981012.001,2,158,0)
      -->
"KRN",.84,7981012.001,2,159,0)
      <xsl:sort select="concat(LTNAME,'&#10;',DATE)"/>
"KRN",.84,7981012.001,2,160,0)
      <tr>
"KRN",.84,7981012.001,2,161,0)
       <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,162,0)
        <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,163,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,164,0)
      </tr>
"KRN",.84,7981012.001,2,165,0)
     </xsl:for-each>
"KRN",.84,7981012.001,2,166,0)
    </tbody>
"KRN",.84,7981012.001,2,167,0)
   </table>
"KRN",.84,7981012.001,2,168,0)
   <br clear="all"/><br/>
"KRN",.84,7981012.001,2,169,0)
  </div>
"KRN",.84,7981012.001,2,170,0)
 </xsl:for-each>
"KRN",.84,7981012.001,2,171,0)
</xsl:template>
"KRN",.84,7981012.001,2,172,0)
 
"KRN",.84,7981012.001,2,173,0)
<!--[ TABLES ]-->
"KRN",.84,7981012.001,2,174,0)
 
"KRN",.84,7981012.001,2,175,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981012.001,2,176,0)
 <div style="page-break-before:always">
"KRN",.84,7981012.001,2,177,0)
  <h2>Medications</h2>
"KRN",.84,7981012.001,2,178,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,179,0)
   <xsl:when test="$D1">
"KRN",.84,7981012.001,2,180,0)
    <xsl:variable name="SORT" select="/REPORT/DRUGS/@SORT"/>
"KRN",.84,7981012.001,2,181,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,182,0)
     <xsl:choose>
"KRN",.84,7981012.001,2,183,0)
      <xsl:when test="/REPORT/DRUGS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981012.001,2,184,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,185,0)
     </xsl:choose>
"KRN",.84,7981012.001,2,186,0)
    </xsl:variable>
"KRN",.84,7981012.001,2,187,0)
    <div>
"KRN",.84,7981012.001,2,188,0)
     <xsl:call-template name="MakeScrollable">
"KRN",.84,7981012.001,2,189,0)
      <xsl:with-param name="condition" select="DRUG[31]"/>
"KRN",.84,7981012.001,2,190,0)
     </xsl:call-template>
"KRN",.84,7981012.001,2,191,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,192,0)
      <thead>
"KRN",.84,7981012.001,2,193,0)
       <tr>
"KRN",.84,7981012.001,2,194,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981012.001,2,195,0)
         <xsl:with-param name="tblname" select="'DRUGS'"/>
"KRN",.84,7981012.001,2,196,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,197,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,198,0)
         <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981012.001,2,199,0)
         <xsl:with-param name="sort" select="'DRUGS=RXNAME'"/>
"KRN",.84,7981012.001,2,200,0)
         <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981012.001,2,201,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,202,0)
       </tr>
"KRN",.84,7981012.001,2,203,0)
      </thead>
"KRN",.84,7981012.001,2,204,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,205,0)
       <xsl:with-param name="colspan" select="5"/>
"KRN",.84,7981012.001,2,206,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,207,0)
      <tbody>
"KRN",.84,7981012.001,2,208,0)
       <xsl:choose>
"KRN",.84,7981012.001,2,209,0)
        <xsl:when test="$PTSDRUGS">
"KRN",.84,7981012.001,2,210,0)
         <xsl:for-each select="DRUG[generate-id(.)=generate-id(key('patient-drug',@ID))]">
"KRN",.84,7981012.001,2,211,0)
          <xsl:call-template name="PatientDrugData">
"KRN",.84,7981012.001,2,212,0)
           <xsl:with-param name="group" select="key('patient-drug',@ID)"/>
"KRN",.84,7981012.001,2,213,0)
          </xsl:call-template>
"KRN",.84,7981012.001,2,214,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,215,0)
        </xsl:when>
"KRN",.84,7981012.001,2,216,0)
        <xsl:otherwise> 
"KRN",.84,7981012.001,2,217,0)
         <xsl:for-each select="DRUG">
"KRN",.84,7981012.001,2,218,0)
          <!--
"KRN",.84,7981012.001,2,219,0)
          <xsl:sort select="concat(*[name()=$SORT],' ')" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,220,0)
          <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,221,0)
          -->
"KRN",.84,7981012.001,2,222,0)
          <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,223,0)
          <tr>
"KRN",.84,7981012.001,2,224,0)
           <xsl:call-template name="BasicPatientData"/>
"KRN",.84,7981012.001,2,225,0)
           <xsl:call-template name="DrugData"/>
"KRN",.84,7981012.001,2,226,0)
          </tr>
"KRN",.84,7981012.001,2,227,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,228,0)
        </xsl:otherwise>
"KRN",.84,7981012.001,2,229,0)
       </xsl:choose>
"KRN",.84,7981012.001,2,230,0)
      </tbody>
"KRN",.84,7981012.001,2,231,0)
     </table>
"KRN",.84,7981012.001,2,232,0)
    </div>
"KRN",.84,7981012.001,2,233,0)
   </xsl:when>
"KRN",.84,7981012.001,2,234,0)
   <xsl:otherwise>
"KRN",.84,7981012.001,2,235,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,236,0)
   </xsl:otherwise>
"KRN",.84,7981012.001,2,237,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,238,0)
 </div>
"KRN",.84,7981012.001,2,239,0)
</xsl:template>
"KRN",.84,7981012.001,2,240,0)
 
"KRN",.84,7981012.001,2,241,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981012.001,2,242,0)
 <div style="page-break-before:always">
"KRN",.84,7981012.001,2,243,0)
  <h2>Lab Results</h2>
"KRN",.84,7981012.001,2,244,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,245,0)
   <xsl:when test="$L1">
"KRN",.84,7981012.001,2,246,0)
    <xsl:variable name="SORT" select="/REPORT/LABTESTS/@SORT"/>
"KRN",.84,7981012.001,2,247,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,248,0)
     <xsl:choose>
"KRN",.84,7981012.001,2,249,0)
      <xsl:when test="/REPORT/LABTESTS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981012.001,2,250,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,251,0)
     </xsl:choose>
"KRN",.84,7981012.001,2,252,0)
    </xsl:variable>
"KRN",.84,7981012.001,2,253,0)
    <div>
"KRN",.84,7981012.001,2,254,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981012.001,2,255,0)
     <xsl:with-param name="condition" select="LT[31]"/>
"KRN",.84,7981012.001,2,256,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,257,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,258,0)
      <thead>
"KRN",.84,7981012.001,2,259,0)
       <tr>
"KRN",.84,7981012.001,2,260,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981012.001,2,261,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981012.001,2,262,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,263,0)
        <xsl:call-template name="BasicLRHeader">
"KRN",.84,7981012.001,2,264,0)
         <xsl:with-param name="colname" select="'LTNAME'"/>
"KRN",.84,7981012.001,2,265,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981012.001,2,266,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,267,0)
       </tr>
"KRN",.84,7981012.001,2,268,0)
      </thead>
"KRN",.84,7981012.001,2,269,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,270,0)
       <xsl:with-param name="colspan" select="7"/>
"KRN",.84,7981012.001,2,271,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,272,0)
      <tbody>
"KRN",.84,7981012.001,2,273,0)
       <xsl:choose>
"KRN",.84,7981012.001,2,274,0)
        <xsl:when test="$PTSLABS">
"KRN",.84,7981012.001,2,275,0)
         <xsl:for-each select="LT[generate-id(.)=generate-id(key('patient-lt',@ID))]">
"KRN",.84,7981012.001,2,276,0)
          <xsl:call-template name="PatientLabData">
"KRN",.84,7981012.001,2,277,0)
           <xsl:with-param name="group" select="key('patient-lt',@ID)"/>
"KRN",.84,7981012.001,2,278,0)
          </xsl:call-template>
"KRN",.84,7981012.001,2,279,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,280,0)
        </xsl:when>
"KRN",.84,7981012.001,2,281,0)
        <xsl:otherwise>
"KRN",.84,7981012.001,2,282,0)
         <xsl:for-each select="LT">
"KRN",.84,7981012.001,2,283,0)
          <!--
"KRN",.84,7981012.001,2,284,0)
          <xsl:sort select="concat(*[name()=$SORT],' ')" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,285,0)
          <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,286,0)
          -->
"KRN",.84,7981012.001,2,287,0)
          <xsl:sort select="concat(./*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,288,0)
          <tr>
"KRN",.84,7981012.001,2,289,0)
           <xsl:call-template name="BasicPatientData"/>
"KRN",.84,7981012.001,2,290,0)
           <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,291,0)
            <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,292,0)
           </xsl:call-template>
"KRN",.84,7981012.001,2,293,0)
          </tr>
"KRN",.84,7981012.001,2,294,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,295,0)
        </xsl:otherwise>
"KRN",.84,7981012.001,2,296,0)
       </xsl:choose>
"KRN",.84,7981012.001,2,297,0)
      </tbody>
"KRN",.84,7981012.001,2,298,0)
     </table>
"KRN",.84,7981012.001,2,299,0)
    </div>
"KRN",.84,7981012.001,2,300,0)
   </xsl:when>
"KRN",.84,7981012.001,2,301,0)
   <xsl:otherwise>
"KRN",.84,7981012.001,2,302,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,303,0)
   </xsl:otherwise>
"KRN",.84,7981012.001,2,304,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,305,0)
 </div>
"KRN",.84,7981012.001,2,306,0)
</xsl:template>
"KRN",.84,7981012.001,2,307,0)
 
"KRN",.84,7981012.001,2,308,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981012.001,2,309,0)
 <div style="page-break-before:always">
"KRN",.84,7981012.001,2,310,0)
  <h2>Patients</h2>
"KRN",.84,7981012.001,2,311,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981012.001,2,312,0)
 </div>
"KRN",.84,7981012.001,2,313,0)
</xsl:template>
"KRN",.84,7981012.001,2,314,0)
 
"KRN",.84,7981012.001,2,315,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981012.001,2,316,0)
 
"KRN",.84,7981012.001,2,317,0)
<xsl:template name="DrugData">
"KRN",.84,7981012.001,2,318,0)
 <xsl:param name="rowspan" select="'1'"/>
"KRN",.84,7981012.001,2,319,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981012.001,2,320,0)
  <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981012.001,2,321,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981012.001,2,322,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,323,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,324,0)
</xsl:template>
"KRN",.84,7981012.001,2,325,0)
 
"KRN",.84,7981012.001,2,326,0)
<xsl:template name="PatientDrugData">
"KRN",.84,7981012.001,2,327,0)
 <xsl:param name="group"/>
"KRN",.84,7981012.001,2,328,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981012.001,2,329,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981012.001,2,330,0)
 <xsl:for-each select="$group">
"KRN",.84,7981012.001,2,331,0)
  <tr>
"KRN",.84,7981012.001,2,332,0)
   <xsl:if test="position()=1">
"KRN",.84,7981012.001,2,333,0)
    <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,334,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981012.001,2,335,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,336,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,337,0)
   </xsl:if>
"KRN",.84,7981012.001,2,338,0)
   <xsl:call-template name="DrugData"/>
"KRN",.84,7981012.001,2,339,0)
  </tr>
"KRN",.84,7981012.001,2,340,0)
 </xsl:for-each>
"KRN",.84,7981012.001,2,341,0)
</xsl:template>
"KRN",.84,7981012.001,2,342,0)
 
"KRN",.84,7981012.001,2,343,0)
<xsl:template name="PatientLabData">
"KRN",.84,7981012.001,2,344,0)
 <xsl:param name="group"/>
"KRN",.84,7981012.001,2,345,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981012.001,2,346,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981012.001,2,347,0)
 <xsl:for-each select="$group">
"KRN",.84,7981012.001,2,348,0)
  <tr>
"KRN",.84,7981012.001,2,349,0)
   <xsl:if test="position()=1">
"KRN",.84,7981012.001,2,350,0)
    <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,351,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981012.001,2,352,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,353,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,354,0)
   </xsl:if>
"KRN",.84,7981012.001,2,355,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,356,0)
    <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,357,0)
   </xsl:call-template>
"KRN",.84,7981012.001,2,358,0)
  </tr>
"KRN",.84,7981012.001,2,359,0)
 </xsl:for-each>
"KRN",.84,7981012.001,2,360,0)
</xsl:template>
"KRN",.84,7981012.001,2,361,0)
 
"KRN",.84,7981012.001,2,362,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981012.001,2,363,0)
 
"KRN",.84,7981012.001,2,364,0)
<xsl:template match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981012.001,2,365,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,366,0)
  <xsl:with-param name="title" select="'Meds'"/>
"KRN",.84,7981012.001,2,367,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,368,0)
</xsl:template>
"KRN",.84,7981012.001,2,369,0)
 
"KRN",.84,7981012.001,2,370,0)
<xsl:template match="PARAMETERS/DATE_RANGE_2">
"KRN",.84,7981012.001,2,371,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,372,0)
  <xsl:with-param name="title" select="'Labs'"/>
"KRN",.84,7981012.001,2,373,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,374,0)
</xsl:template>
"KRN",.84,7981012.001,2,375,0)
 
"KRN",.84,7981012.001,2,376,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981012.001,2,377,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,378,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981012.001,2,379,0)
 </xsl:call-template>
"KRN",.84,7981012.001,2,380,0)
</xsl:template>
"KRN",.84,7981012.001,2,381,0)
 
"KRN",.84,7981012.001,2,382,0)
</xsl:stylesheet>
"KRN",.84,7981012.002,-1)
0^14
"KRN",.84,7981012.002,0)
7981012.002^2^^CLINICAL CASE REGISTRIES^Combined Meds and Labs Report (CSV)
"KRN",.84,7981012.002,2,0)
^^91^91^3051207^
"KRN",.84,7981012.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981012.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981012.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981012.002,2,4,0)
>
"KRN",.84,7981012.002,2,5,0)
 
"KRN",.84,7981012.002,2,6,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981012.002,2,7,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981012.002,2,8,0)
 
"KRN",.84,7981012.002,2,9,0)
<xsl:template match="/">
"KRN",.84,7981012.002,2,10,0)
 <xsl:apply-templates select="REPORT/DRUGS"/>
"KRN",.84,7981012.002,2,11,0)
 <xsl:apply-templates select="REPORT/LABTESTS"/>
"KRN",.84,7981012.002,2,12,0)
 <xsl:apply-templates select="REPORT/PATIENTS"/>
"KRN",.84,7981012.002,2,13,0)
</xsl:template>
"KRN",.84,7981012.002,2,14,0)
 
"KRN",.84,7981012.002,2,15,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981012.002,2,16,0)
 <xsl:text>Combined Meds and Labs Report (Medications)</xsl:text>
"KRN",.84,7981012.002,2,17,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,18,0)
 <xsl:text>Patient Name,SSN,Date of Death,Medication Name</xsl:text>
"KRN",.84,7981012.002,2,19,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,20,0)
 <xsl:for-each select="DRUG">
"KRN",.84,7981012.002,2,21,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,22,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,23,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,24,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,25,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,26,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,27,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,28,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,29,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,30,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,31,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,32,0)
   <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981012.002,2,33,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,34,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,35,0)
 </xsl:for-each>
"KRN",.84,7981012.002,2,36,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981012.002,2,37,0)
</xsl:template>
"KRN",.84,7981012.002,2,38,0)
 
"KRN",.84,7981012.002,2,39,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981012.002,2,40,0)
 <xsl:text>Combined Meds and Labs Report (Lab Results)</xsl:text>
"KRN",.84,7981012.002,2,41,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,42,0)
 <xsl:text>Patient Name,SSN,Date of Death,Date,Test Name,Result</xsl:text>
"KRN",.84,7981012.002,2,43,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,44,0)
 <xsl:for-each select="LT">
"KRN",.84,7981012.002,2,45,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,46,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,47,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,48,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,49,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,50,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,51,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,52,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,53,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,54,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,55,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,56,0)
   <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981012.002,2,57,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,58,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,59,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,60,0)
   <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981012.002,2,61,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,62,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,63,0)
   <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981012.002,2,64,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,65,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,66,0)
 </xsl:for-each>
"KRN",.84,7981012.002,2,67,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981012.002,2,68,0)
</xsl:template>
"KRN",.84,7981012.002,2,69,0)
 
"KRN",.84,7981012.002,2,70,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981012.002,2,71,0)
 <xsl:text>Combined Meds and Labs Report (Patients)</xsl:text>
"KRN",.84,7981012.002,2,72,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,73,0)
 <xsl:text>Patient Name,SSN,Date of Death</xsl:text>
"KRN",.84,7981012.002,2,74,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,75,0)
 <xsl:for-each select="PATIENT">
"KRN",.84,7981012.002,2,76,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,77,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,78,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,79,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,80,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,81,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,82,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,83,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,84,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,85,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,86,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,87,0)
 </xsl:for-each>
"KRN",.84,7981012.002,2,88,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981012.002,2,89,0)
</xsl:template>
"KRN",.84,7981012.002,2,90,0)
 
"KRN",.84,7981012.002,2,91,0)
</xsl:stylesheet>
"KRN",.84,7981013.001,-1)
0^9
"KRN",.84,7981013.001,0)
7981013.001^2^^CLINICAL CASE REGISTRIES^Diagnoses (HTML)
"KRN",.84,7981013.001,2,0)
^^199^199^3060622^
"KRN",.84,7981013.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981013.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981013.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981013.001,2,4,0)
>
"KRN",.84,7981013.001,2,5,0)
 
"KRN",.84,7981013.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981013.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981013.001,2,8,0)
 
"KRN",.84,7981013.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981013.001,2,10,0)
 <html>
"KRN",.84,7981013.001,2,11,0)
  <head>
"KRN",.84,7981013.001,2,12,0)
   <title>Diagnoses</title>
"KRN",.84,7981013.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981013.001,2,14,0)
  </head>
"KRN",.84,7981013.001,2,15,0)
  <body>
"KRN",.84,7981013.001,2,16,0)
   <h1>Diagnoses</h1>
"KRN",.84,7981013.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981013.001,2,18,0)
   <div style="page-break-before:always">
"KRN",.84,7981013.001,2,19,0)
    <xsl:call-template name="ReportSummary"/>
"KRN",.84,7981013.001,2,20,0)
    <xsl:apply-templates select="/REPORT/ICD9LST"/>
"KRN",.84,7981013.001,2,21,0)
   </div>
"KRN",.84,7981013.001,2,22,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981013.001,2,23,0)
  </body>
"KRN",.84,7981013.001,2,24,0)
 </html>
"KRN",.84,7981013.001,2,25,0)
</xsl:template>
"KRN",.84,7981013.001,2,26,0)
 
"KRN",.84,7981013.001,2,27,0)
<xsl:template match="REPORT/ICD9LST">
"KRN",.84,7981013.001,2,28,0)
 <h2>ICD-9 Codes</h2>
"KRN",.84,7981013.001,2,29,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981013.001,2,30,0)
</xsl:template>
"KRN",.84,7981013.001,2,31,0)
 
"KRN",.84,7981013.001,2,32,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981013.001,2,33,0)
 <div style="page-break-before:always">
"KRN",.84,7981013.001,2,34,0)
  <h2>Patients</h2>
"KRN",.84,7981013.001,2,35,0)
  <xsl:call-template name="DataGrid">
"KRN",.84,7981013.001,2,36,0)
   <xsl:with-param name="scroll" select="descendant::ICD9[31]"/>
"KRN",.84,7981013.001,2,37,0)
  </xsl:call-template>
"KRN",.84,7981013.001,2,38,0)
 </div>
"KRN",.84,7981013.001,2,39,0)
 <div class="reportSummary">
"KRN",.84,7981013.001,2,40,0)
  <div style="float:left; width:30%">
"KRN",.84,7981013.001,2,41,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981013.001,2,42,0)
    <caption>Source</caption>
"KRN",.84,7981013.001,2,43,0)
    <thead>
"KRN",.84,7981013.001,2,44,0)
     <tr>
"KRN",.84,7981013.001,2,45,0)
      <th width="30">Code</th>
"KRN",.84,7981013.001,2,46,0)
      <th>Description</th>
"KRN",.84,7981013.001,2,47,0)
     </tr>
"KRN",.84,7981013.001,2,48,0)
    </thead>
"KRN",.84,7981013.001,2,49,0)
    <tbody>
"KRN",.84,7981013.001,2,50,0)
     <tr>
"KRN",.84,7981013.001,2,51,0)
      <td align="center">I</td>
"KRN",.84,7981013.001,2,52,0)
      <td class="aLeft">Inpatient file</td>
"KRN",.84,7981013.001,2,53,0)
     </tr>
"KRN",.84,7981013.001,2,54,0)
     <tr>
"KRN",.84,7981013.001,2,55,0)
      <td align="center">O</td>
"KRN",.84,7981013.001,2,56,0)
      <td class="aLeft">Outpatient file</td>
"KRN",.84,7981013.001,2,57,0)
     </tr>
"KRN",.84,7981013.001,2,58,0)
     <tr>
"KRN",.84,7981013.001,2,59,0)
      <td align="center">PB</td>
"KRN",.84,7981013.001,2,60,0)
      <td class="aLeft">Problem list</td>
"KRN",.84,7981013.001,2,61,0)
     </tr>
"KRN",.84,7981013.001,2,62,0)
    </tbody>
"KRN",.84,7981013.001,2,63,0)
   </table>
"KRN",.84,7981013.001,2,64,0)
  </div>
"KRN",.84,7981013.001,2,65,0)
 </div>
"KRN",.84,7981013.001,2,66,0)
</xsl:template>
"KRN",.84,7981013.001,2,67,0)
 
"KRN",.84,7981013.001,2,68,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981013.001,2,69,0)
 
"KRN",.84,7981013.001,2,70,0)
<xsl:template match="HEADER/TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981013.001,2,71,0)
 <xsl:variable name="PTICDL" select="../COLUMN[@NAME='PTICDL']"/>
"KRN",.84,7981013.001,2,72,0)
 <thead>
"KRN",.84,7981013.001,2,73,0)
  <tr>
"KRN",.84,7981013.001,2,74,0)
   <xsl:apply-templates select="../COLUMN[@NAME!='PTICDL']">
"KRN",.84,7981013.001,2,75,0)
    <xsl:with-param name="rowspan" select="2"/>
"KRN",.84,7981013.001,2,76,0)
   </xsl:apply-templates>
"KRN",.84,7981013.001,2,77,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,78,0)
    <xsl:with-param name="column" select="$PTICDL"/>
"KRN",.84,7981013.001,2,79,0)
    <xsl:with-param name="title" select="'ICD-9'"/>                 
"KRN",.84,7981013.001,2,80,0)
    <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981013.001,2,81,0)
    <xsl:with-param name="width" select="'52%'"/>
"KRN",.84,7981013.001,2,82,0)
    <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981013.001,2,83,0)
   </xsl:call-template>
"KRN",.84,7981013.001,2,84,0)
  </tr>
"KRN",.84,7981013.001,2,85,0)
  <tr>
"KRN",.84,7981013.001,2,86,0)
   <xsl:apply-templates select="$PTICDL/*"/>
"KRN",.84,7981013.001,2,87,0)
  </tr>
"KRN",.84,7981013.001,2,88,0)
 </thead>
"KRN",.84,7981013.001,2,89,0)
</xsl:template>
"KRN",.84,7981013.001,2,90,0)
 
"KRN",.84,7981013.001,2,91,0)
<xsl:template match="COLUMN[@NAME='CODE']">
"KRN",.84,7981013.001,2,92,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,93,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981013.001,2,94,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981013.001,2,95,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,96,0)
</xsl:template>
"KRN",.84,7981013.001,2,97,0)
 
"KRN",.84,7981013.001,2,98,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981013.001,2,99,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,100,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981013.001,2,101,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981013.001,2,102,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,103,0)
</xsl:template>
"KRN",.84,7981013.001,2,104,0)
 
"KRN",.84,7981013.001,2,105,0)
<xsl:template match="COLUMN[@NAME='DIAG']">
"KRN",.84,7981013.001,2,106,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,107,0)
  <xsl:with-param name="title" select="'Diagnosis'"/>
"KRN",.84,7981013.001,2,108,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,109,0)
</xsl:template>
"KRN",.84,7981013.001,2,110,0)
 
"KRN",.84,7981013.001,2,111,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981013.001,2,112,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,113,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981013.001,2,114,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981013.001,2,115,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,116,0)
</xsl:template>
"KRN",.84,7981013.001,2,117,0)
 
"KRN",.84,7981013.001,2,118,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981013.001,2,119,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,120,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981013.001,2,121,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981013.001,2,122,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,123,0)
</xsl:template>
"KRN",.84,7981013.001,2,124,0)
 
"KRN",.84,7981013.001,2,125,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981013.001,2,126,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.001,2,127,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981013.001,2,128,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,129,0)
</xsl:template>
"KRN",.84,7981013.001,2,130,0)
 
"KRN",.84,7981013.001,2,131,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981013.001,2,132,0)
 
"KRN",.84,7981013.001,2,133,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981013.001,2,134,0)
 <xsl:variable name="rowspan" select="count(PTICDL/ICD9)"/>
"KRN",.84,7981013.001,2,135,0)
 <tr>
"KRN",.84,7981013.001,2,136,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,137,0)
   <xsl:with-param name="value" select="position()"/>
"KRN",.84,7981013.001,2,138,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981013.001,2,139,0)
  </xsl:call-template>
"KRN",.84,7981013.001,2,140,0)
  <xsl:apply-templates select="*[name(.)!='PTICDL']">
"KRN",.84,7981013.001,2,141,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981013.001,2,142,0)
  </xsl:apply-templates>
"KRN",.84,7981013.001,2,143,0)
  <xsl:for-each select="PTICDL/ICD9[1]">
"KRN",.84,7981013.001,2,144,0)
   <xsl:call-template name="ICD9Data"/>
"KRN",.84,7981013.001,2,145,0)
  </xsl:for-each>
"KRN",.84,7981013.001,2,146,0)
 </tr>
"KRN",.84,7981013.001,2,147,0)
 <xsl:for-each select="PTICDL/ICD9[position()>1]">
"KRN",.84,7981013.001,2,148,0)
  <tr>
"KRN",.84,7981013.001,2,149,0)
   <xsl:call-template name="ICD9Data"/>
"KRN",.84,7981013.001,2,150,0)
  </tr>
"KRN",.84,7981013.001,2,151,0)
 </xsl:for-each>
"KRN",.84,7981013.001,2,152,0)
</xsl:template>
"KRN",.84,7981013.001,2,153,0)
 
"KRN",.84,7981013.001,2,154,0)
<xsl:template match="DIAG">
"KRN",.84,7981013.001,2,155,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,156,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981013.001,2,157,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,158,0)
</xsl:template>
"KRN",.84,7981013.001,2,159,0)
 
"KRN",.84,7981013.001,2,160,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981013.001,2,161,0)
 
"KRN",.84,7981013.001,2,162,0)
<xsl:template name="ICD9Data">
"KRN",.84,7981013.001,2,163,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,164,0)
  <xsl:with-param name="value" select="CODE"/>
"KRN",.84,7981013.001,2,165,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,166,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,167,0)
  <xsl:with-param name="value" select="DIAG"/>
"KRN",.84,7981013.001,2,168,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981013.001,2,169,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,170,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,171,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981013.001,2,172,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981013.001,2,173,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,174,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981013.001,2,175,0)
  <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981013.001,2,176,0)
 </xsl:call-template>
"KRN",.84,7981013.001,2,177,0)
</xsl:template>
"KRN",.84,7981013.001,2,178,0)
 
"KRN",.84,7981013.001,2,179,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981013.001,2,180,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981013.001,2,181,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981013.001,2,182,0)
  <thead>
"KRN",.84,7981013.001,2,183,0)
   <tr>
"KRN",.84,7981013.001,2,184,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981013.001,2,185,0)
    <th width="33%">Number of Codes</th>
"KRN",.84,7981013.001,2,186,0)
    <th width="33%">Number of Different Codes </th>
"KRN",.84,7981013.001,2,187,0)
   </tr>
"KRN",.84,7981013.001,2,188,0)
  </thead>
"KRN",.84,7981013.001,2,189,0)
  <tbody>
"KRN",.84,7981013.001,2,190,0)
   <tr>
"KRN",.84,7981013.001,2,191,0)
    <td><xsl:value-of select="$summary/NP"/></td>
"KRN",.84,7981013.001,2,192,0)
    <td><xsl:value-of select="$summary/NC"/></td>
"KRN",.84,7981013.001,2,193,0)
    <td><xsl:value-of select="$summary/NDC"/></td>
"KRN",.84,7981013.001,2,194,0)
   </tr>
"KRN",.84,7981013.001,2,195,0)
  </tbody>
"KRN",.84,7981013.001,2,196,0)
 </table>
"KRN",.84,7981013.001,2,197,0)
</xsl:template>
"KRN",.84,7981013.001,2,198,0)
 
"KRN",.84,7981013.001,2,199,0)
</xsl:stylesheet>
"KRN",.84,7981013.002,-1)
0^10
"KRN",.84,7981013.002,0)
7981013.002^2^^CLINICAL CASE REGISTRIES^Diagnoses (CSV)
"KRN",.84,7981013.002,2,0)
^^95^95^3050912^
"KRN",.84,7981013.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981013.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981013.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981013.002,2,4,0)
>
"KRN",.84,7981013.002,2,5,0)
 
"KRN",.84,7981013.002,2,6,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981013.002,2,7,0)
 
"KRN",.84,7981013.002,2,8,0)
<xsl:template match="/">
"KRN",.84,7981013.002,2,9,0)
 <xsl:apply-templates select="/REPORT/ICD9LST"/>
"KRN",.84,7981013.002,2,10,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981013.002,2,11,0)
</xsl:template>
"KRN",.84,7981013.002,2,12,0)
 
"KRN",.84,7981013.002,2,13,0)
<xsl:template match="REPORT/ICD9LST">
"KRN",.84,7981013.002,2,14,0)
 <xsl:text>Diagnoses (ICD-9 Codes)</xsl:text>
"KRN",.84,7981013.002,2,15,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981013.002,2,16,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981013.002,2,17,0)
</xsl:template>
"KRN",.84,7981013.002,2,18,0)
 
"KRN",.84,7981013.002,2,19,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981013.002,2,20,0)
 <xsl:text>Diagnoses (Patients)</xsl:text>
"KRN",.84,7981013.002,2,21,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981013.002,2,22,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981013.002,2,23,0)
</xsl:template>
"KRN",.84,7981013.002,2,24,0)
 
"KRN",.84,7981013.002,2,25,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981013.002,2,26,0)
 <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981013.002,2,27,0)
 <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981013.002,2,28,0)
 <xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981013.002,2,29,0)
 <xsl:for-each select="PTICDL/ICD9">
"KRN",.84,7981013.002,2,30,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,31,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981013.002,2,32,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,33,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,34,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981013.002,2,35,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,36,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,37,0)
   <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981013.002,2,38,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981013.002,2,39,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,40,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,41,0)
   <xsl:with-param name="value" select="CODE"/>
"KRN",.84,7981013.002,2,42,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,43,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,44,0)
   <xsl:with-param name="value" select="DIAG"/>
"KRN",.84,7981013.002,2,45,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,46,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,47,0)
   <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981013.002,2,48,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981013.002,2,49,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,50,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,51,0)
   <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981013.002,2,52,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,53,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981013.002,2,54,0)
 </xsl:for-each>
"KRN",.84,7981013.002,2,55,0)
</xsl:template>
"KRN",.84,7981013.002,2,56,0)
 
"KRN",.84,7981013.002,2,57,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981013.002,2,58,0)
 
"KRN",.84,7981013.002,2,59,0)
<xsl:template match="COLUMN[@NAME='CODE']">
"KRN",.84,7981013.002,2,60,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,61,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981013.002,2,62,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,63,0)
</xsl:template>
"KRN",.84,7981013.002,2,64,0)
 
"KRN",.84,7981013.002,2,65,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981013.002,2,66,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,67,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981013.002,2,68,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,69,0)
</xsl:template>
"KRN",.84,7981013.002,2,70,0)
 
"KRN",.84,7981013.002,2,71,0)
<xsl:template match="COLUMN[@NAME='DIAG']">
"KRN",.84,7981013.002,2,72,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,73,0)
  <xsl:with-param name="title" select="'Diagnosis'"/>
"KRN",.84,7981013.002,2,74,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,75,0)
</xsl:template>
"KRN",.84,7981013.002,2,76,0)
 
"KRN",.84,7981013.002,2,77,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981013.002,2,78,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,79,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981013.002,2,80,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,81,0)
</xsl:template>
"KRN",.84,7981013.002,2,82,0)
 
"KRN",.84,7981013.002,2,83,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981013.002,2,84,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,85,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981013.002,2,86,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,87,0)
</xsl:template>
"KRN",.84,7981013.002,2,88,0)
 
"KRN",.84,7981013.002,2,89,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981013.002,2,90,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,91,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981013.002,2,92,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,93,0)
</xsl:template>
"KRN",.84,7981013.002,2,94,0)
 
"KRN",.84,7981013.002,2,95,0)
</xsl:stylesheet>
"KRN",.84,7981015.001,-1)
0^2
"KRN",.84,7981015.001,0)
7981015.001^2^^CLINICAL CASE REGISTRIES^Procedures (HTML)
"KRN",.84,7981015.001,2,0)
^^291^291^3061020^
"KRN",.84,7981015.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981015.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981015.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981015.001,2,4,0)
>
"KRN",.84,7981015.001,2,5,0)
 
"KRN",.84,7981015.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981015.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981015.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981015.001,2,9,0)
 
"KRN",.84,7981015.001,2,10,0)
<xsl:key name="patient-cpt" match="/REPORT/PROCEDURES/PROCEDURE" use="@ID"/>
"KRN",.84,7981015.001,2,11,0)
 
"KRN",.84,7981015.001,2,12,0)
<xsl:template match="/">
"KRN",.84,7981015.001,2,13,0)
 <html>
"KRN",.84,7981015.001,2,14,0)
  <head>
"KRN",.84,7981015.001,2,15,0)
   <title>Procedures</title>
"KRN",.84,7981015.001,2,16,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981015.001,2,17,0)
  </head>
"KRN",.84,7981015.001,2,18,0)
  <body>
"KRN",.84,7981015.001,2,19,0)
   <h1>Procedures</h1>
"KRN",.84,7981015.001,2,20,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981015.001,2,21,0)
   <xsl:choose>
"KRN",.84,7981015.001,2,22,0)
    <xsl:when test="/REPORT/SUMMARY/NP > 0">
"KRN",.84,7981015.001,2,23,0)
     <xsl:call-template name="ReportSummary"/>
"KRN",.84,7981015.001,2,24,0)
     <xsl:apply-templates select="/REPORT/PROCLST"/>
"KRN",.84,7981015.001,2,25,0)
     <xsl:apply-templates select="/REPORT/PROCEDURES"/>
"KRN",.84,7981015.001,2,26,0)
     <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981015.001,2,27,0)
    </xsl:when>
"KRN",.84,7981015.001,2,28,0)
    <xsl:otherwise>
"KRN",.84,7981015.001,2,29,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981015.001,2,30,0)
    </xsl:otherwise>
"KRN",.84,7981015.001,2,31,0)
   </xsl:choose>
"KRN",.84,7981015.001,2,32,0)
  </body>
"KRN",.84,7981015.001,2,33,0)
 </html>
"KRN",.84,7981015.001,2,34,0)
</xsl:template>
"KRN",.84,7981015.001,2,35,0)
 
"KRN",.84,7981015.001,2,36,0)
<!--[ TABLES ]-->
"KRN",.84,7981015.001,2,37,0)
 
"KRN",.84,7981015.001,2,38,0)
<xsl:template match="REPORT/PROCEDURES">
"KRN",.84,7981015.001,2,39,0)
 <div style="page-break-before:always">
"KRN",.84,7981015.001,2,40,0)
  <h2>Patients</h2>
"KRN",.84,7981015.001,2,41,0)
  <xsl:choose>
"KRN",.84,7981015.001,2,42,0)
   <xsl:when test="PROCEDURE[1]">
"KRN",.84,7981015.001,2,43,0)
    <div>
"KRN",.84,7981015.001,2,44,0)
     <xsl:call-template name="MakeScrollable">
"KRN",.84,7981015.001,2,45,0)
      <xsl:with-param name="condition" select="PROCEDURE[31]"/>
"KRN",.84,7981015.001,2,46,0)
     </xsl:call-template>
"KRN",.84,7981015.001,2,47,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981015.001,2,48,0)
      <thead>
"KRN",.84,7981015.001,2,49,0)
       <tr>
"KRN",.84,7981015.001,2,50,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981015.001,2,51,0)
         <xsl:with-param name="tblname" select="'PROCEDURES'"/>
"KRN",.84,7981015.001,2,52,0)
        </xsl:call-template>
"KRN",.84,7981015.001,2,53,0)
        <xsl:call-template name="ProcHeader"/>
"KRN",.84,7981015.001,2,54,0)
       </tr>
"KRN",.84,7981015.001,2,55,0)
      </thead>
"KRN",.84,7981015.001,2,56,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981015.001,2,57,0)
       <xsl:with-param name="colspan" select="8"/>
"KRN",.84,7981015.001,2,58,0)
      </xsl:call-template>
"KRN",.84,7981015.001,2,59,0)
      <tbody>
"KRN",.84,7981015.001,2,60,0)
       <xsl:choose>
"KRN",.84,7981015.001,2,61,0)
        <xsl:when test="contains(',DOD,LAST4,NAME,',concat(',',@SORT,','))">
"KRN",.84,7981015.001,2,62,0)
         <xsl:for-each select="PROCEDURE[generate-id(.)=generate-id(key('patient-cpt',@ID))]">
"KRN",.84,7981015.001,2,63,0)
          <xsl:call-template name="PatientProcData">
"KRN",.84,7981015.001,2,64,0)
           <xsl:with-param name="group" select="key('patient-cpt',@ID)"/>
"KRN",.84,7981015.001,2,65,0)
          </xsl:call-template>
"KRN",.84,7981015.001,2,66,0)
         </xsl:for-each>
"KRN",.84,7981015.001,2,67,0)
        </xsl:when>
"KRN",.84,7981015.001,2,68,0)
        <xsl:otherwise> 
"KRN",.84,7981015.001,2,69,0)
         <xsl:for-each select="PROCEDURE">
"KRN",.84,7981015.001,2,70,0)
          <tr>
"KRN",.84,7981015.001,2,71,0)
           <xsl:call-template name="PatientData"/>
"KRN",.84,7981015.001,2,72,0)
           <xsl:call-template name="ProcData"/>
"KRN",.84,7981015.001,2,73,0)
          </tr>
"KRN",.84,7981015.001,2,74,0)
         </xsl:for-each>
"KRN",.84,7981015.001,2,75,0)
        </xsl:otherwise>
"KRN",.84,7981015.001,2,76,0)
       </xsl:choose>
"KRN",.84,7981015.001,2,77,0)
      </tbody>
"KRN",.84,7981015.001,2,78,0)
     </table>
"KRN",.84,7981015.001,2,79,0)
    </div>
"KRN",.84,7981015.001,2,80,0)
    <div class="reportSummary">
"KRN",.84,7981015.001,2,81,0)
     <div style="float:left; width:30%">
"KRN",.84,7981015.001,2,82,0)
      <table cellpadding="3" cellspacing="0">
"KRN",.84,7981015.001,2,83,0)
       <caption>Source</caption>
"KRN",.84,7981015.001,2,84,0)
       <thead>
"KRN",.84,7981015.001,2,85,0)
        <tr>
"KRN",.84,7981015.001,2,86,0)
         <th width="30">Code</th>
"KRN",.84,7981015.001,2,87,0)
         <th>Description</th>
"KRN",.84,7981015.001,2,88,0)
        </tr>
"KRN",.84,7981015.001,2,89,0)
       </thead>
"KRN",.84,7981015.001,2,90,0)
       <tbody>
"KRN",.84,7981015.001,2,91,0)
        <tr>
"KRN",.84,7981015.001,2,92,0)
         <td align="center">I</td>
"KRN",.84,7981015.001,2,93,0)
         <td class="aLeft">Inpatient file</td>
"KRN",.84,7981015.001,2,94,0)
        </tr>
"KRN",.84,7981015.001,2,95,0)
        <tr>
"KRN",.84,7981015.001,2,96,0)
         <td align="center">O</td>
"KRN",.84,7981015.001,2,97,0)
         <td class="aLeft">Outpatient file</td>
"KRN",.84,7981015.001,2,98,0)
        </tr>
"KRN",.84,7981015.001,2,99,0)
       </tbody>
"KRN",.84,7981015.001,2,100,0)
      </table>
"KRN",.84,7981015.001,2,101,0)
     </div>
"KRN",.84,7981015.001,2,102,0)
    </div>
"KRN",.84,7981015.001,2,103,0)
   </xsl:when>
"KRN",.84,7981015.001,2,104,0)
   <xsl:otherwise>
"KRN",.84,7981015.001,2,105,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981015.001,2,106,0)
   </xsl:otherwise>
"KRN",.84,7981015.001,2,107,0)
  </xsl:choose>
"KRN",.84,7981015.001,2,108,0)
 </div>
"KRN",.84,7981015.001,2,109,0)
</xsl:template>
"KRN",.84,7981015.001,2,110,0)
 
"KRN",.84,7981015.001,2,111,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981015.001,2,112,0)
 <div style="page-break-before:always">
"KRN",.84,7981015.001,2,113,0)
  <h2>Patients</h2>
"KRN",.84,7981015.001,2,114,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.001,2,115,0)
 </div>
"KRN",.84,7981015.001,2,116,0)
</xsl:template>
"KRN",.84,7981015.001,2,117,0)
 
"KRN",.84,7981015.001,2,118,0)
<xsl:template match="REPORT/PROCLST">
"KRN",.84,7981015.001,2,119,0)
 <div style="page-break-before:always">
"KRN",.84,7981015.001,2,120,0)
  <h2>Procedure Codes</h2>
"KRN",.84,7981015.001,2,121,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.001,2,122,0)
 </div>
"KRN",.84,7981015.001,2,123,0)
</xsl:template>
"KRN",.84,7981015.001,2,124,0)
 
"KRN",.84,7981015.001,2,125,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981015.001,2,126,0)
 
"KRN",.84,7981015.001,2,127,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981015.001,2,128,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,129,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981015.001,2,130,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981015.001,2,131,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,132,0)
</xsl:template>
"KRN",.84,7981015.001,2,133,0)
 
"KRN",.84,7981015.001,2,134,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981015.001,2,135,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,136,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981015.001,2,137,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981015.001,2,138,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,139,0)
</xsl:template>
"KRN",.84,7981015.001,2,140,0)
 
"KRN",.84,7981015.001,2,141,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981015.001,2,142,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,143,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981015.001,2,144,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981015.001,2,145,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,146,0)
</xsl:template>
"KRN",.84,7981015.001,2,147,0)
 
"KRN",.84,7981015.001,2,148,0)
<xsl:template match="COLUMN[@NAME='PROCNAME']">
"KRN",.84,7981015.001,2,149,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,150,0)
  <xsl:with-param name="title" select="'Procedure Name'"/>
"KRN",.84,7981015.001,2,151,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,152,0)
</xsl:template>
"KRN",.84,7981015.001,2,153,0)
 
"KRN",.84,7981015.001,2,154,0)
<xsl:template match="COLUMN[@NAME='PROCODE']">
"KRN",.84,7981015.001,2,155,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,156,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981015.001,2,157,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981015.001,2,158,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,159,0)
</xsl:template>
"KRN",.84,7981015.001,2,160,0)
 
"KRN",.84,7981015.001,2,161,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981015.001,2,162,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,163,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981015.001,2,164,0)
  <xsl:with-param name="width" select="'1%'"/>
"KRN",.84,7981015.001,2,165,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,166,0)
</xsl:template>
"KRN",.84,7981015.001,2,167,0)
 
"KRN",.84,7981015.001,2,168,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981015.001,2,169,0)
 
"KRN",.84,7981015.001,2,170,0)
<xsl:template match="PROCNAME">
"KRN",.84,7981015.001,2,171,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,172,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981015.001,2,173,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,174,0)
</xsl:template>
"KRN",.84,7981015.001,2,175,0)
 
"KRN",.84,7981015.001,2,176,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981015.001,2,177,0)
 
"KRN",.84,7981015.001,2,178,0)
<xsl:template name="PatientData">
"KRN",.84,7981015.001,2,179,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981015.001,2,180,0)
 <xsl:param name="ref"/>
"KRN",.84,7981015.001,2,181,0)
 <xsl:param name="rowspan" select="1"/>
"KRN",.84,7981015.001,2,182,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,183,0)
  <xsl:with-param name="value" select="$number"/>
"KRN",.84,7981015.001,2,184,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,185,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,186,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,187,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981015.001,2,188,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981015.001,2,189,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,190,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,191,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,192,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981015.001,2,193,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,194,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,195,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,196,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981015.001,2,197,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.001,2,198,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,199,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,200,0)
</xsl:template>
"KRN",.84,7981015.001,2,201,0)
 
"KRN",.84,7981015.001,2,202,0)
<xsl:template name="PatientProcData">
"KRN",.84,7981015.001,2,203,0)
 <xsl:param name="group"/>
"KRN",.84,7981015.001,2,204,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981015.001,2,205,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981015.001,2,206,0)
 <xsl:for-each select="$group">
"KRN",.84,7981015.001,2,207,0)
  <xsl:sort select="PROCNAME"/>
"KRN",.84,7981015.001,2,208,0)
  <tr>
"KRN",.84,7981015.001,2,209,0)
   <xsl:if test="position()=1">
"KRN",.84,7981015.001,2,210,0)
    <xsl:call-template name="PatientData">
"KRN",.84,7981015.001,2,211,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981015.001,2,212,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981015.001,2,213,0)
    </xsl:call-template>
"KRN",.84,7981015.001,2,214,0)
   </xsl:if>
"KRN",.84,7981015.001,2,215,0)
   <xsl:call-template name="ProcData"/>
"KRN",.84,7981015.001,2,216,0)
  </tr>
"KRN",.84,7981015.001,2,217,0)
 </xsl:for-each>
"KRN",.84,7981015.001,2,218,0)
</xsl:template>
"KRN",.84,7981015.001,2,219,0)
 
"KRN",.84,7981015.001,2,220,0)
<xsl:template name="ProcData">
"KRN",.84,7981015.001,2,221,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,222,0)
  <xsl:with-param name="value" select="PROCODE"/>
"KRN",.84,7981015.001,2,223,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,224,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,225,0)
  <xsl:with-param name="value" select="PROCNAME"/>
"KRN",.84,7981015.001,2,226,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981015.001,2,227,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,228,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,229,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981015.001,2,230,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.001,2,231,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,232,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.001,2,233,0)
  <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981015.001,2,234,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,235,0)
</xsl:template>
"KRN",.84,7981015.001,2,236,0)
 
"KRN",.84,7981015.001,2,237,0)
<xsl:template name="ProcHeader">
"KRN",.84,7981015.001,2,238,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,239,0)
  <xsl:with-param name="colname" select="'PROCODE'"/>
"KRN",.84,7981015.001,2,240,0)
  <xsl:with-param name="sort" select="'PROCEDURES=PROCODE'"/>
"KRN",.84,7981015.001,2,241,0)
  <xsl:with-param name="title" select="'Code'"/>    
"KRN",.84,7981015.001,2,242,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981015.001,2,243,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,244,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,245,0)
  <xsl:with-param name="colname" select="'PROCNAME'"/>
"KRN",.84,7981015.001,2,246,0)
  <xsl:with-param name="sort" select="'PROCEDURES=PROCNAME'"/>
"KRN",.84,7981015.001,2,247,0)
  <xsl:with-param name="title" select="'Procedure Name'"/>
"KRN",.84,7981015.001,2,248,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,249,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,250,0)
  <xsl:with-param name="colname" select="'DATE'"/>
"KRN",.84,7981015.001,2,251,0)
  <xsl:with-param name="sort" select="'PROCEDURES=DATE'"/>
"KRN",.84,7981015.001,2,252,0)
  <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981015.001,2,253,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981015.001,2,254,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,255,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.001,2,256,0)
  <xsl:with-param name="colname" select="'SOURCE'"/>
"KRN",.84,7981015.001,2,257,0)
  <xsl:with-param name="sort" select="'PROCEDURES=SOURCE'"/>
"KRN",.84,7981015.001,2,258,0)
  <xsl:with-param name="title" select="'Source'"/>    
"KRN",.84,7981015.001,2,259,0)
  <xsl:with-param name="width" select="'1%'"/>
"KRN",.84,7981015.001,2,260,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,261,0)
</xsl:template>
"KRN",.84,7981015.001,2,262,0)
 
"KRN",.84,7981015.001,2,263,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981015.001,2,264,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981015.001,2,265,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981015.001,2,266,0)
  <thead>
"KRN",.84,7981015.001,2,267,0)
   <tr>
"KRN",.84,7981015.001,2,268,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981015.001,2,269,0)
    <th width="33%">Number of Codes</th>
"KRN",.84,7981015.001,2,270,0)
    <th width="33%">Number of Different Codes </th>
"KRN",.84,7981015.001,2,271,0)
   </tr>
"KRN",.84,7981015.001,2,272,0)
  </thead>
"KRN",.84,7981015.001,2,273,0)
  <tbody>
"KRN",.84,7981015.001,2,274,0)
   <tr>
"KRN",.84,7981015.001,2,275,0)
    <td><xsl:value-of select="$summary/NP"/></td>
"KRN",.84,7981015.001,2,276,0)
    <td><xsl:value-of select="$summary/NC"/></td>
"KRN",.84,7981015.001,2,277,0)
    <td><xsl:value-of select="$summary/NDC"/></td>
"KRN",.84,7981015.001,2,278,0)
   </tr>
"KRN",.84,7981015.001,2,279,0)
  </tbody>
"KRN",.84,7981015.001,2,280,0)
 </table>
"KRN",.84,7981015.001,2,281,0)
</xsl:template>
"KRN",.84,7981015.001,2,282,0)
 
"KRN",.84,7981015.001,2,283,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981015.001,2,284,0)
 
"KRN",.84,7981015.001,2,285,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981015.001,2,286,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981015.001,2,287,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981015.001,2,288,0)
 </xsl:call-template>
"KRN",.84,7981015.001,2,289,0)
</xsl:template>
"KRN",.84,7981015.001,2,290,0)
 
"KRN",.84,7981015.001,2,291,0)
</xsl:stylesheet>
"KRN",.84,7981015.002,-1)
0^3
"KRN",.84,7981015.002,0)
7981015.002^2^^CLINICAL CASE REGISTRIES^Procedures (CSV)
"KRN",.84,7981015.002,2,0)
^^97^97^3060622^
"KRN",.84,7981015.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981015.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981015.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981015.002,2,4,0)
>
"KRN",.84,7981015.002,2,5,0)
 
"KRN",.84,7981015.002,2,6,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981015.002,2,7,0)
 
"KRN",.84,7981015.002,2,8,0)
<xsl:template match="/">
"KRN",.84,7981015.002,2,9,0)
 <xsl:apply-templates select="/REPORT/PROCLST"/>
"KRN",.84,7981015.002,2,10,0)
 <xsl:apply-templates select="/REPORT/PROCEDURES"/>
"KRN",.84,7981015.002,2,11,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981015.002,2,12,0)
</xsl:template>
"KRN",.84,7981015.002,2,13,0)
 
"KRN",.84,7981015.002,2,14,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981015.002,2,15,0)
 <xsl:text>Patients without procedures</xsl:text>
"KRN",.84,7981015.002,2,16,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.002,2,17,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981015.002,2,18,0)
</xsl:template>
"KRN",.84,7981015.002,2,19,0)
 
"KRN",.84,7981015.002,2,20,0)
<xsl:template match="REPORT/PROCEDURES">
"KRN",.84,7981015.002,2,21,0)
 <xsl:text>Procedures (Patients)</xsl:text>
"KRN",.84,7981015.002,2,22,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.002,2,23,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981015.002,2,24,0)
</xsl:template>
"KRN",.84,7981015.002,2,25,0)
 
"KRN",.84,7981015.002,2,26,0)
<xsl:template match="REPORT/PROCLST">
"KRN",.84,7981015.002,2,27,0)
 <xsl:text>Procedures (CPT and ICD-9 codes)</xsl:text>
"KRN",.84,7981015.002,2,28,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.002,2,29,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981015.002,2,30,0)
</xsl:template>
"KRN",.84,7981015.002,2,31,0)
 
"KRN",.84,7981015.002,2,32,0)
<xsl:template match="PROCEDURES/PROCEDURE">
"KRN",.84,7981015.002,2,33,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,34,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981015.002,2,35,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,36,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,37,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981015.002,2,38,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,39,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,40,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981015.002,2,41,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.002,2,42,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,43,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,44,0)
  <xsl:with-param name="value" select="PROCODE"/>
"KRN",.84,7981015.002,2,45,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,46,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,47,0)
  <xsl:with-param name="value" select="PROCNAME"/>
"KRN",.84,7981015.002,2,48,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,49,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,50,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981015.002,2,51,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.002,2,52,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,53,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,54,0)
  <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981015.002,2,55,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,56,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981015.002,2,57,0)
</xsl:template>
"KRN",.84,7981015.002,2,58,0)
 
"KRN",.84,7981015.002,2,59,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981015.002,2,60,0)
 
"KRN",.84,7981015.002,2,61,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981015.002,2,62,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,63,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981015.002,2,64,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,65,0)
</xsl:template>
"KRN",.84,7981015.002,2,66,0)
 
"KRN",.84,7981015.002,2,67,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981015.002,2,68,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,69,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981015.002,2,70,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,71,0)
</xsl:template>
"KRN",.84,7981015.002,2,72,0)
 
"KRN",.84,7981015.002,2,73,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981015.002,2,74,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,75,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981015.002,2,76,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,77,0)
</xsl:template>
"KRN",.84,7981015.002,2,78,0)
 
"KRN",.84,7981015.002,2,79,0)
<xsl:template match="COLUMN[@NAME='PROCODE']">
"KRN",.84,7981015.002,2,80,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,81,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981015.002,2,82,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,83,0)
</xsl:template>
"KRN",.84,7981015.002,2,84,0)
 
"KRN",.84,7981015.002,2,85,0)
<xsl:template match="COLUMN[@NAME='PROCNAME']">
"KRN",.84,7981015.002,2,86,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,87,0)
  <xsl:with-param name="title" select="'Procedure Name'"/>
"KRN",.84,7981015.002,2,88,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,89,0)
</xsl:template>
"KRN",.84,7981015.002,2,90,0)
 
"KRN",.84,7981015.002,2,91,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981015.002,2,92,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,93,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981015.002,2,94,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,95,0)
</xsl:template>
"KRN",.84,7981015.002,2,96,0)
 
"KRN",.84,7981015.002,2,97,0)
</xsl:stylesheet>
"KRN",.84,7981995.001,-1)
0^5
"KRN",.84,7981995.001,0)
7981995.001^2^^CLINICAL CASE REGISTRIES^Lab data templates (HTML)
"KRN",.84,7981995.001,2,0)
^^96^96^3060525^
"KRN",.84,7981995.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981995.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981995.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981995.001,2,4,0)
>
"KRN",.84,7981995.001,2,5,0)
 
"KRN",.84,7981995.001,2,6,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981995.001,2,7,0)
 
"KRN",.84,7981995.001,2,8,0)
<xsl:template name="BasicLRHeader">
"KRN",.84,7981995.001,2,9,0)
 <xsl:param name="colname" select="'NAME'"/>
"KRN",.84,7981995.001,2,10,0)
 <xsl:param name="group" select="0"/>
"KRN",.84,7981995.001,2,11,0)
 <xsl:param name="tblname" select="'PTLRL'"/>
"KRN",.84,7981995.001,2,12,0)
 <xsl:if test="$group">
"KRN",.84,7981995.001,2,13,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,14,0)
   <xsl:with-param name="sort" select="concat($tblname,'=GROUP')"/>
"KRN",.84,7981995.001,2,15,0)
   <xsl:with-param name="title" select="'Group'"/>
"KRN",.84,7981995.001,2,16,0)
   <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981995.001,2,17,0)
  </xsl:call-template>
"KRN",.84,7981995.001,2,18,0)
 </xsl:if>
"KRN",.84,7981995.001,2,19,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,20,0)
  <xsl:with-param name="sort" select="concat($tblname,'=DATE')"/>
"KRN",.84,7981995.001,2,21,0)
  <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981995.001,2,22,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981995.001,2,23,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,24,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,25,0)
  <xsl:with-param name="sort" select="concat($tblname,'=',$colname)"/>
"KRN",.84,7981995.001,2,26,0)
  <xsl:with-param name="title" select="'Test Name'"/>    
"KRN",.84,7981995.001,2,27,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,28,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,29,0)
  <xsl:with-param name="sort" select="concat($tblname,'=RESULT')"/>
"KRN",.84,7981995.001,2,30,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981995.001,2,31,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981995.001,2,32,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,33,0)
</xsl:template>
"KRN",.84,7981995.001,2,34,0)
 
"KRN",.84,7981995.001,2,35,0)
<xsl:template name="BasicLRData">
"KRN",.84,7981995.001,2,36,0)
 <xsl:param name="group" select="0"/>
"KRN",.84,7981995.001,2,37,0)
 <xsl:param name="name" select="NAME"/>
"KRN",.84,7981995.001,2,38,0)
 <xsl:if test="$group">
"KRN",.84,7981995.001,2,39,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,40,0)
   <xsl:with-param name="value" select="GROUP"/>
"KRN",.84,7981995.001,2,41,0)
  </xsl:call-template>
"KRN",.84,7981995.001,2,42,0)
 </xsl:if>
"KRN",.84,7981995.001,2,43,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,44,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981995.001,2,45,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981995.001,2,46,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,47,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,48,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981995.001,2,49,0)
  <xsl:with-param name="value" select="$name"/>
"KRN",.84,7981995.001,2,50,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,51,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,52,0)
  <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981995.001,2,53,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,54,0)
</xsl:template>
"KRN",.84,7981995.001,2,55,0)
 
"KRN",.84,7981995.001,2,56,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981995.001,2,57,0)
 
"KRN",.84,7981995.001,2,58,0)
<xsl:template match="PARAMETERS/LABTESTS">
"KRN",.84,7981995.001,2,59,0)
 <tr>
"KRN",.84,7981995.001,2,60,0)
  <th scope="row">Lab Tests:&#160;</th>
"KRN",.84,7981995.001,2,61,0)
  <td>
"KRN",.84,7981995.001,2,62,0)
   <xsl:if test="@DESCR">
"KRN",.84,7981995.001,2,63,0)
    <xsl:value-of select="@DESCR"/><br/>
"KRN",.84,7981995.001,2,64,0)
   </xsl:if>
"KRN",.84,7981995.001,2,65,0)
   <xsl:if test=".='ALL'">ALL</xsl:if>
"KRN",.84,7981995.001,2,66,0)
   <xsl:apply-templates select="LT[@LOW|@HIGH]">
"KRN",.84,7981995.001,2,67,0)
    <xsl:sort select="."/>
"KRN",.84,7981995.001,2,68,0)
   </xsl:apply-templates>
"KRN",.84,7981995.001,2,69,0)
   <xsl:apply-templates select="LT[not(@LOW|@HIGH)]">
"KRN",.84,7981995.001,2,70,0)
    <xsl:sort select="."/>
"KRN",.84,7981995.001,2,71,0)
   </xsl:apply-templates>
"KRN",.84,7981995.001,2,72,0)
  </td>
"KRN",.84,7981995.001,2,73,0)
 </tr>
"KRN",.84,7981995.001,2,74,0)
</xsl:template>
"KRN",.84,7981995.001,2,75,0)
 
"KRN",.84,7981995.001,2,76,0)
<xsl:template match="PARAMETERS/LABTESTS/LT[@LOW|@HIGH]">
"KRN",.84,7981995.001,2,77,0)
 <xsl:variable name="low" select="@LOW"/>
"KRN",.84,7981995.001,2,78,0)
 <xsl:variable name="high" select="@HIGH"/>
"KRN",.84,7981995.001,2,79,0)
 <xsl:value-of select="."/>
"KRN",.84,7981995.001,2,80,0)
 <xsl:text> - results</xsl:text>
"KRN",.84,7981995.001,2,81,0)
 <xsl:if test="$low">
"KRN",.84,7981995.001,2,82,0)
  <xsl:value-of select="concat(' not less than ',$low)"/>
"KRN",.84,7981995.001,2,83,0)
 </xsl:if>
"KRN",.84,7981995.001,2,84,0)
 <xsl:if test="$high">
"KRN",.84,7981995.001,2,85,0)
  <xsl:if test="$low"> and</xsl:if>
"KRN",.84,7981995.001,2,86,0)
  <xsl:value-of select="concat(' not greater than ',$high)"/>
"KRN",.84,7981995.001,2,87,0)
 </xsl:if>
"KRN",.84,7981995.001,2,88,0)
 <br/>
"KRN",.84,7981995.001,2,89,0)
</xsl:template>
"KRN",.84,7981995.001,2,90,0)
 
"KRN",.84,7981995.001,2,91,0)
<xsl:template match="PARAMETERS/LABTESTS/LT[not(@LOW|@HIGH)]">
"KRN",.84,7981995.001,2,92,0)
 <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981995.001,2,93,0)
 <xsl:value-of select="."/>
"KRN",.84,7981995.001,2,94,0)
</xsl:template>
"KRN",.84,7981995.001,2,95,0)
 
"KRN",.84,7981995.001,2,96,0)
</xsl:stylesheet>
"KRN",.84,7981996.001,-1)
0^7
"KRN",.84,7981996.001,0)
7981996.001^2^^CLINICAL CASE REGISTRIES^Pharmacy data templates (HTML)
"KRN",.84,7981996.001,2,0)
^.844^64^64^3060621^^
"KRN",.84,7981996.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981996.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981996.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981996.001,2,4,0)
 
"KRN",.84,7981996.001,2,5,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981996.001,2,6,0)
 
"KRN",.84,7981996.001,2,7,0)
<xsl:template
"KRN",.84,7981996.001,2,8,0)
     match="TBLDEF[starts-with(@NAME,'DRUGS') or @NAME='PTRXL']/COLUMN[@NAME='NAME']">
"KRN",.84,7981996.001,2,9,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981996.001,2,10,0)
  <xsl:with-param name="title" select="'Drug Name'"/>
"KRN",.84,7981996.001,2,11,0)
 </xsl:call-template>
"KRN",.84,7981996.001,2,12,0)
</xsl:template>
"KRN",.84,7981996.001,2,13,0)
 
"KRN",.84,7981996.001,2,14,0)
<!--[ PHARMACY REPORT PARAMETERS ]-->
"KRN",.84,7981996.001,2,15,0)
 
"KRN",.84,7981996.001,2,16,0)
<xsl:template match="PARAMETERS/DRUGS">
"KRN",.84,7981996.001,2,17,0)
 <tr>
"KRN",.84,7981996.001,2,18,0)
  <th scope="row">Meds:&#160;</th>
"KRN",.84,7981996.001,2,19,0)
  <td>
"KRN",.84,7981996.001,2,20,0)
   <dl>
"KRN",.84,7981996.001,2,21,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981996.001,2,22,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981996.001,2,23,0)
    </xsl:if>
"KRN",.84,7981996.001,2,24,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981996.001,2,25,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981996.001,2,26,0)
   </dl>
"KRN",.84,7981996.001,2,27,0)
  </td>
"KRN",.84,7981996.001,2,28,0)
 </tr>
"KRN",.84,7981996.001,2,29,0)
</xsl:template>
"KRN",.84,7981996.001,2,30,0)
 
"KRN",.84,7981996.001,2,31,0)
<xsl:template match="PARAMETERS/DRUGS/GROUP">
"KRN",.84,7981996.001,2,32,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981996.001,2,33,0)
 <dd><dl>
"KRN",.84,7981996.001,2,34,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981996.001,2,35,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981996.001,2,36,0)
  </xsl:if>
"KRN",.84,7981996.001,2,37,0)
  <xsl:apply-templates select="*"/>
"KRN",.84,7981996.001,2,38,0)
 </dl></dd>
"KRN",.84,7981996.001,2,39,0)
</xsl:template>
"KRN",.84,7981996.001,2,40,0)
 
"KRN",.84,7981996.001,2,41,0)
<xsl:template match="PARAMETERS/DRUGS/GROUP/FORMULATIONS">
"KRN",.84,7981996.001,2,42,0)
 <dt><b>Individual Formulations</b></dt>
"KRN",.84,7981996.001,2,43,0)
 <dd><xsl:call-template name="ParamsDrugList"/></dd>
"KRN",.84,7981996.001,2,44,0)
</xsl:template>
"KRN",.84,7981996.001,2,45,0)
 
"KRN",.84,7981996.001,2,46,0)
<xsl:template match="PARAMETERS/DRUGS/GROUP/GENERIC">
"KRN",.84,7981996.001,2,47,0)
 <dt><b>Generic Names</b></dt>
"KRN",.84,7981996.001,2,48,0)
 <dd><xsl:call-template name="ParamsDrugList"/></dd>
"KRN",.84,7981996.001,2,49,0)
</xsl:template>
"KRN",.84,7981996.001,2,50,0)
 
"KRN",.84,7981996.001,2,51,0)
<xsl:template match="PARAMETERS/DRUGS/GROUP/VARXCLS">
"KRN",.84,7981996.001,2,52,0)
 <dt><b>VA Drug Classes</b></dt>
"KRN",.84,7981996.001,2,53,0)
 <dd><xsl:call-template name="ParamsDrugList"/></dd>
"KRN",.84,7981996.001,2,54,0)
</xsl:template>
"KRN",.84,7981996.001,2,55,0)
 
"KRN",.84,7981996.001,2,56,0)
<xsl:template name="ParamsDrugList">
"KRN",.84,7981996.001,2,57,0)
 <xsl:for-each select="*">
"KRN",.84,7981996.001,2,58,0)
  <xsl:sort select="."/>
"KRN",.84,7981996.001,2,59,0)
  <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981996.001,2,60,0)
  <xsl:value-of select="."/>
"KRN",.84,7981996.001,2,61,0)
 </xsl:for-each>
"KRN",.84,7981996.001,2,62,0)
</xsl:template>
"KRN",.84,7981996.001,2,63,0)
 
"KRN",.84,7981996.001,2,64,0)
</xsl:stylesheet>
"KRN",.84,7981997.001,-1)
0^11
"KRN",.84,7981997.001,0)
7981997.001^2^^CLINICAL CASE REGISTRIES^Patient data templates (HTML)
"KRN",.84,7981997.001,2,0)
^^208^208^3060622^
"KRN",.84,7981997.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981997.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981997.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981997.001,2,4,0)
 
"KRN",.84,7981997.001,2,5,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981997.001,2,6,0)
 
"KRN",.84,7981997.001,2,7,0)
<xsl:template name="BasicPatientHeader">
"KRN",.84,7981997.001,2,8,0)
 <xsl:param name="rowspan" select="1"/>
"KRN",.84,7981997.001,2,9,0)
 <xsl:param name="seqnum" select="1"/>
"KRN",.84,7981997.001,2,10,0)
 <xsl:param name="tblname" select="'PATIENTS'"/>
"KRN",.84,7981997.001,2,11,0)
 <xsl:if test="$seqnum">
"KRN",.84,7981997.001,2,12,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,13,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,14,0)
   <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981997.001,2,15,0)
   <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981997.001,2,16,0)
   <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981997.001,2,17,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,18,0)
 </xsl:if>
"KRN",.84,7981997.001,2,19,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,20,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,21,0)
  <xsl:with-param name="sort" select="concat($tblname,'=NAME')"/>
"KRN",.84,7981997.001,2,22,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981997.001,2,23,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,24,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,25,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,26,0)
  <xsl:with-param name="sort" select="concat($tblname,'=LAST4')"/>
"KRN",.84,7981997.001,2,27,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981997.001,2,28,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,29,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,30,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,31,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,32,0)
  <xsl:with-param name="sort" select="concat($tblname,'=DOD')"/>
"KRN",.84,7981997.001,2,33,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981997.001,2,34,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,35,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,36,0)
</xsl:template>
"KRN",.84,7981997.001,2,37,0)
 
"KRN",.84,7981997.001,2,38,0)
<xsl:template name="BasicPatientData">
"KRN",.84,7981997.001,2,39,0)
 <xsl:param name="rowspan" select="1"/>
"KRN",.84,7981997.001,2,40,0)
 <xsl:param name="seqnum" select="1"/>
"KRN",.84,7981997.001,2,41,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981997.001,2,42,0)
 <xsl:if test="$seqnum">
"KRN",.84,7981997.001,2,43,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,44,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,45,0)
   <xsl:with-param name="value" select="$number"/>
"KRN",.84,7981997.001,2,46,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,47,0)
 </xsl:if>
"KRN",.84,7981997.001,2,48,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,49,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,50,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981997.001,2,51,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981997.001,2,52,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,53,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,54,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,55,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981997.001,2,56,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,57,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,58,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,59,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981997.001,2,60,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,61,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,62,0)
</xsl:template>
"KRN",.84,7981997.001,2,63,0)
 
"KRN",.84,7981997.001,2,64,0)
<!--[ PATIENT TABLE HEADINGS ]-->
"KRN",.84,7981997.001,2,65,0)
 
"KRN",.84,7981997.001,2,66,0)
<xsl:template match="COLUMN[@NAME='ADMDT']">
"KRN",.84,7981997.001,2,67,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,68,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,69,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,70,0)
  <xsl:with-param name="title" select="'Admission Date'"/>
"KRN",.84,7981997.001,2,71,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,72,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,73,0)
</xsl:template>
"KRN",.84,7981997.001,2,74,0)
 
"KRN",.84,7981997.001,2,75,0)
<xsl:template match="COLUMN[@NAME='AGE']">
"KRN",.84,7981997.001,2,76,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,77,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,78,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,79,0)
  <xsl:with-param name="title" select="'Age'"/>                 
"KRN",.84,7981997.001,2,80,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981997.001,2,81,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,82,0)
</xsl:template>
"KRN",.84,7981997.001,2,83,0)
 
"KRN",.84,7981997.001,2,84,0)
<xsl:template match="COLUMN[@NAME='CONFDT']">
"KRN",.84,7981997.001,2,85,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,86,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,87,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,88,0)
  <xsl:with-param name="title" select="'Confirmation Date'"/>
"KRN",.84,7981997.001,2,89,0)
  <xsl:with-param name="sort" select="'PATIENTS=CONFDT:DESC'"/>
"KRN",.84,7981997.001,2,90,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,91,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,92,0)
</xsl:template>
"KRN",.84,7981997.001,2,93,0)
 
"KRN",.84,7981997.001,2,94,0)
<xsl:template match="COLUMN[@NAME='CSSN']">
"KRN",.84,7981997.001,2,95,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,96,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,97,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,98,0)
  <xsl:with-param name="title" select="'Coded SSN'"/>                      
"KRN",.84,7981997.001,2,99,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,100,0)
</xsl:template>
"KRN",.84,7981997.001,2,101,0)
 
"KRN",.84,7981997.001,2,102,0)
<xsl:template match="COLUMN[@NAME='DOB']">
"KRN",.84,7981997.001,2,103,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,104,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,105,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,106,0)
  <xsl:with-param name="title" select="'Date of Birth'"/>                  
"KRN",.84,7981997.001,2,107,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,108,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,109,0)
</xsl:template>
"KRN",.84,7981997.001,2,110,0)
 
"KRN",.84,7981997.001,2,111,0)
<xsl:template match="COLUMN[@NAME='ENTDT']">
"KRN",.84,7981997.001,2,112,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,113,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,114,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,115,0)
   <xsl:with-param name="title" select="'Date Entered'"/>
"KRN",.84,7981997.001,2,116,0)
  <xsl:with-param name="sort" select="'PATIENTS=ENTDT:DESC'"/>                      
"KRN",.84,7981997.001,2,117,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,118,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,119,0)
</xsl:template>
"KRN",.84,7981997.001,2,120,0)
 
"KRN",.84,7981997.001,2,121,0)
<xsl:template match="COLUMN[@NAME='ETHN']">
"KRN",.84,7981997.001,2,122,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,123,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,124,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,125,0)
  <xsl:with-param name="title" select="'Ethnicity'"/>
"KRN",.84,7981997.001,2,126,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981997.001,2,127,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,128,0)
</xsl:template>
"KRN",.84,7981997.001,2,129,0)
 
"KRN",.84,7981997.001,2,130,0)
<xsl:template match="COLUMN[@NAME='RACE']">
"KRN",.84,7981997.001,2,131,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,132,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,133,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,134,0)
  <xsl:with-param name="title" select="'Race'"/>
"KRN",.84,7981997.001,2,135,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981997.001,2,136,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,137,0)
</xsl:template>
"KRN",.84,7981997.001,2,138,0)
 
"KRN",.84,7981997.001,2,139,0)
<xsl:template match="COLUMN[@NAME='SELDT']">
"KRN",.84,7981997.001,2,140,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,141,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,142,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,143,0)
   <xsl:with-param name="title" select="'Selection Date'"/>
"KRN",.84,7981997.001,2,144,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,145,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,146,0)
</xsl:template>
"KRN",.84,7981997.001,2,147,0)
 
"KRN",.84,7981997.001,2,148,0)
<xsl:template match="COLUMN[@NAME='SEX']">
"KRN",.84,7981997.001,2,149,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,150,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,151,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,152,0)
  <xsl:with-param name="title" select="'Sex'"/>                 
"KRN",.84,7981997.001,2,153,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981997.001,2,154,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,155,0)
</xsl:template>
"KRN",.84,7981997.001,2,156,0)
 
"KRN",.84,7981997.001,2,157,0)
<!--[ PATIENT TABLE CELLS ]-->
"KRN",.84,7981997.001,2,158,0)
 
"KRN",.84,7981997.001,2,159,0)
<xsl:template match="PATIENT/ADMDT">
"KRN",.84,7981997.001,2,160,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,161,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,162,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,163,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,164,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,165,0)
</xsl:template>
"KRN",.84,7981997.001,2,166,0)
 
"KRN",.84,7981997.001,2,167,0)
<xsl:template match="PATIENT/CONFDT">
"KRN",.84,7981997.001,2,168,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,169,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,170,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,171,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,172,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,173,0)
</xsl:template>
"KRN",.84,7981997.001,2,174,0)
 
"KRN",.84,7981997.001,2,175,0)
<xsl:template match="PATIENT/DOB">
"KRN",.84,7981997.001,2,176,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,177,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,178,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,179,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,180,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,181,0)
</xsl:template>
"KRN",.84,7981997.001,2,182,0)
 
"KRN",.84,7981997.001,2,183,0)
<xsl:template match="PATIENT/ENTDT">
"KRN",.84,7981997.001,2,184,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,185,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,186,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,187,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,188,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,189,0)
</xsl:template>
"KRN",.84,7981997.001,2,190,0)
 
"KRN",.84,7981997.001,2,191,0)
<xsl:template match="PATIENT/RACES">
"KRN",.84,7981997.001,2,192,0)
 <td class="aLeft">
"KRN",.84,7981997.001,2,193,0)
  <xsl:for-each select="RACE">
"KRN",.84,7981997.001,2,194,0)
   <xsl:value-of select="."/>
"KRN",.84,7981997.001,2,195,0)
   <xsl:if test=".=''"><xsl:text>&#160;</xsl:text></xsl:if><br/>
"KRN",.84,7981997.001,2,196,0)
  </xsl:for-each>
"KRN",.84,7981997.001,2,197,0)
 </td>
"KRN",.84,7981997.001,2,198,0)
</xsl:template>
"KRN",.84,7981997.001,2,199,0)
 
"KRN",.84,7981997.001,2,200,0)
<xsl:template match="PATIENT/SELDT">
"KRN",.84,7981997.001,2,201,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,202,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,203,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,204,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,205,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,206,0)
</xsl:template>
"KRN",.84,7981997.001,2,207,0)
 
"KRN",.84,7981997.001,2,208,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,-1)
0^6
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
^^695^695^3060621^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,8,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,9,0)
 
"KRN",.84,7981999.001,2,10,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,11,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,12,0)
 
"KRN",.84,7981999.001,2,13,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<!--
"KRN",.84,7981999.001,2,16,0)
=========================================================================
"KRN",.84,7981999.001,2,17,0)
                                UTILITIES
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
-->
"KRN",.84,7981999.001,2,20,0)
 
"KRN",.84,7981999.001,2,21,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,24,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,25,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,26,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,27,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,28,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,29,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,30,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,31,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,32,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,33,0)
  </xsl:when>
"KRN",.84,7981999.001,2,34,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,35,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,36,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,37,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,38,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,39,0)
  </xsl:when>
"KRN",.84,7981999.001,2,40,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,41,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,42,0)
</xsl:template>
"KRN",.84,7981999.001,2,43,0)
 
"KRN",.84,7981999.001,2,44,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,47,0)
 <xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,48,0)
 <!--
"KRN",.84,7981999.001,2,49,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,50,0)
 -->
"KRN",.84,7981999.001,2,51,0)
 <xsl:variable name="date"
"KRN",.84,7981999.001,2,52,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,53,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,54,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,55,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,56,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,57,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,59,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,61,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,62,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,63,0)
     </xsl:when>
"KRN",.84,7981999.001,2,64,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,65,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,66,0)
     </xsl:when>
"KRN",.84,7981999.001,2,67,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,68,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,69,0)
   </xsl:when>
"KRN",.84,7981999.001,2,70,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,71,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,72,0)
  <!--
"KRN",.84,7981999.001,2,73,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,74,0)
  -->
"KRN",.84,7981999.001,2,75,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,76,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,77,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,78,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,79,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,82,0)
  </xsl:if>
"KRN",.84,7981999.001,2,83,0)
 </xsl:if>
"KRN",.84,7981999.001,2,84,0)
</xsl:template>
"KRN",.84,7981999.001,2,85,0)
 
"KRN",.84,7981999.001,2,86,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,87,0)
 <xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,88,0)
 <xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,89,0)
</xsl:template>
"KRN",.84,7981999.001,2,90,0)
 
"KRN",.84,7981999.001,2,91,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,94,0)
 <xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,95,0)
 <xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,96,0)
 <xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,97,0)
 <xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,98,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,99,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,100,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,101,0)
   <a>
"KRN",.84,7981999.001,2,102,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,103,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,104,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,105,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,106,0)
    </xsl:if>
"KRN",.84,7981999.001,2,107,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,108,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,109,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,110,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,111,0)
    </xsl:if>
"KRN",.84,7981999.001,2,112,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,113,0)
   </a>
"KRN",.84,7981999.001,2,114,0)
  </xsl:when>
"KRN",.84,7981999.001,2,115,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,116,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,117,0)
</xsl:template>
"KRN",.84,7981999.001,2,118,0)
 
"KRN",.84,7981999.001,2,119,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,122,0)
 <xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,123,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,124,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,125,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,126,0)
  </xsl:when>
"KRN",.84,7981999.001,2,127,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,128,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,129,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,131,0)
</xsl:template>
"KRN",.84,7981999.001,2,132,0)
 
"KRN",.84,7981999.001,2,133,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,136,0)
 <xsl:param name="heading"/>
"KRN",.84,7981999.001,2,137,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,138,0)
 <tr>
"KRN",.84,7981999.001,2,139,0)
  <th scope="row">
"KRN",.84,7981999.001,2,140,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,141,0)
  </th>
"KRN",.84,7981999.001,2,142,0)
  <td>
"KRN",.84,7981999.001,2,143,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,144,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,145,0)
   </xsl:if>
"KRN",.84,7981999.001,2,146,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,147,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,148,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,149,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,150,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,151,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,152,0)
  </td>
"KRN",.84,7981999.001,2,153,0)
 </tr>
"KRN",.84,7981999.001,2,154,0)
</xsl:template>
"KRN",.84,7981999.001,2,155,0)
 
"KRN",.84,7981999.001,2,156,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,159,0)
 <xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,160,0)
 <xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,161,0)
 <xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,162,0)
 <xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,163,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,164,0)
 </xsl:if>
"KRN",.84,7981999.001,2,165,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,166,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,167,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,168,0)
  </xsl:when>
"KRN",.84,7981999.001,2,169,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,170,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,171,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,172,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,173,0)
</xsl:template>
"KRN",.84,7981999.001,2,174,0)
 
"KRN",.84,7981999.001,2,175,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,176,0)
 
"KRN",.84,7981999.001,2,177,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,178,0)
 <xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,179,0)
 <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,180,0)
  <tr>
"KRN",.84,7981999.001,2,181,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,182,0)
   <td>
"KRN",.84,7981999.001,2,183,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,184,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,185,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,186,0)
   </td>
"KRN",.84,7981999.001,2,187,0)
  </tr>
"KRN",.84,7981999.001,2,188,0)
  <tr>
"KRN",.84,7981999.001,2,189,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,190,0)
   <td>
"KRN",.84,7981999.001,2,191,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,192,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,193,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,194,0)
   </td>
"KRN",.84,7981999.001,2,195,0)
  </tr>
"KRN",.84,7981999.001,2,196,0)
  <tr>
"KRN",.84,7981999.001,2,197,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,198,0)
   <td>
"KRN",.84,7981999.001,2,199,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,200,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,201,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,202,0)
   </td>
"KRN",.84,7981999.001,2,203,0)
  </tr>
"KRN",.84,7981999.001,2,204,0)
  <tr>
"KRN",.84,7981999.001,2,205,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,206,0)
   <td>
"KRN",.84,7981999.001,2,207,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,208,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,209,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,210,0)
   </td>
"KRN",.84,7981999.001,2,211,0)
  </tr>
"KRN",.84,7981999.001,2,212,0)
 </table>
"KRN",.84,7981999.001,2,213,0)
</xsl:template>
"KRN",.84,7981999.001,2,214,0)
 
"KRN",.84,7981999.001,2,215,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,216,0)
 
"KRN",.84,7981999.001,2,217,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,218,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,219,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,220,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,221,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,222,0)
  </div>
"KRN",.84,7981999.001,2,223,0)
 </xsl:if>
"KRN",.84,7981999.001,2,224,0)
</xsl:template>
"KRN",.84,7981999.001,2,225,0)
 
"KRN",.84,7981999.001,2,226,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,227,0)
 
"KRN",.84,7981999.001,2,228,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,229,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,230,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,231,0)
 </table>
"KRN",.84,7981999.001,2,232,0)
</xsl:template>
"KRN",.84,7981999.001,2,233,0)
 
"KRN",.84,7981999.001,2,234,0)
<!--
"KRN",.84,7981999.001,2,235,0)
=========================================================================
"KRN",.84,7981999.001,2,236,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,237,0)
=========================================================================
"KRN",.84,7981999.001,2,238,0)
-->
"KRN",.84,7981999.001,2,239,0)
 
"KRN",.84,7981999.001,2,240,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,241,0)
 <xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,242,0)
 <xsl:variable name="notecnt" select="count(/REPORT/HEADER/NOTES/*)"/>
"KRN",.84,7981999.001,2,243,0)
 <div class="reportHeader">
"KRN",.84,7981999.001,2,244,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,245,0)
   <tr>
"KRN",.84,7981999.001,2,246,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,247,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,248,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,249,0)
     </table>
"KRN",.84,7981999.001,2,250,0)
    </td>
"KRN",.84,7981999.001,2,251,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,252,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,253,0)
    </td>
"KRN",.84,7981999.001,2,254,0)
   </tr>
"KRN",.84,7981999.001,2,255,0)
  </table>
"KRN",.84,7981999.001,2,256,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,257,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,258,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,259,0)
   </table>
"KRN",.84,7981999.001,2,260,0)
  </xsl:if>
"KRN",.84,7981999.001,2,261,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,262,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,263,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,264,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,265,0)
   </div>
"KRN",.84,7981999.001,2,266,0)
  </xsl:if>
"KRN",.84,7981999.001,2,267,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,268,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,269,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,270,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,271,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,272,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,273,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,274,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,275,0)
     </xsl:when>
"KRN",.84,7981999.001,2,276,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,277,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,278,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,279,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,280,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,281,0)
   </dl>
"KRN",.84,7981999.001,2,282,0)
  </xsl:if>
"KRN",.84,7981999.001,2,283,0)
 </div>
"KRN",.84,7981999.001,2,284,0)
</xsl:template>
"KRN",.84,7981999.001,2,285,0)
 
"KRN",.84,7981999.001,2,286,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,287,0)
 Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,288,0)
 (<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,289,0)
 age is calculated as of date of death.
"KRN",.84,7981999.001,2,290,0)
</xsl:template>
"KRN",.84,7981999.001,2,291,0)
 
"KRN",.84,7981999.001,2,292,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,293,0)
 Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,294,0)
 which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,295,0)
 this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,296,0)
 date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,297,0)
</xsl:template>
"KRN",.84,7981999.001,2,298,0)
 
"KRN",.84,7981999.001,2,299,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,300,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,301,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,302,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,303,0)
</xsl:template>
"KRN",.84,7981999.001,2,304,0)
 
"KRN",.84,7981999.001,2,305,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,306,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,307,0)
  <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,308,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,309,0)
</xsl:template>
"KRN",.84,7981999.001,2,310,0)
 
"KRN",.84,7981999.001,2,311,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,312,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,313,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,314,0)
 <xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,315,0)
  <tr>
"KRN",.84,7981999.001,2,316,0)
   <th scope="row">
"KRN",.84,7981999.001,2,317,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,318,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,319,0)
    </xsl:if>
"KRN",.84,7981999.001,2,320,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,321,0)
   </th>
"KRN",.84,7981999.001,2,322,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,323,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,324,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,325,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,326,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,327,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,328,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,329,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,330,0)
   </td>
"KRN",.84,7981999.001,2,331,0)
  </tr>
"KRN",.84,7981999.001,2,332,0)
 </xsl:if>
"KRN",.84,7981999.001,2,333,0)
</xsl:template>
"KRN",.84,7981999.001,2,334,0)
 
"KRN",.84,7981999.001,2,335,0)
<!-- 
"KRN",.84,7981999.001,2,336,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,337,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,338,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,339,0)
 <xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,340,0)
  <tr>
"KRN",.84,7981999.001,2,341,0)
   <th scope="row"><xsl:value-of select="$title"/> Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,342,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,343,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,344,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,345,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,346,0)
   </td>
"KRN",.84,7981999.001,2,347,0)
  </tr>
"KRN",.84,7981999.001,2,348,0)
 </xsl:if>
"KRN",.84,7981999.001,2,349,0)
 <xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,350,0)
  <tr>
"KRN",.84,7981999.001,2,351,0)
   <th scope="row"><xsl:value-of select="$title"/> End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,352,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,353,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,354,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,355,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,356,0)
   </td>
"KRN",.84,7981999.001,2,357,0)
  </tr>
"KRN",.84,7981999.001,2,358,0)
 </xsl:if>
"KRN",.84,7981999.001,2,359,0)
</xsl:template>
"KRN",.84,7981999.001,2,360,0)
-->
"KRN",.84,7981999.001,2,361,0)
 
"KRN",.84,7981999.001,2,362,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,363,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,364,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,365,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,366,0)
</xsl:template>
"KRN",.84,7981999.001,2,367,0)
 
"KRN",.84,7981999.001,2,368,0)
<xsl:template match="PARAMETERS/ICD9LST">
"KRN",.84,7981999.001,2,369,0)
 <tr>
"KRN",.84,7981999.001,2,370,0)
  <th scope="row">ICD-9:&#160;</th>
"KRN",.84,7981999.001,2,371,0)
  <td>
"KRN",.84,7981999.001,2,372,0)
   <dl>
"KRN",.84,7981999.001,2,373,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,374,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,375,0)
    </xsl:if>
"KRN",.84,7981999.001,2,376,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,377,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,378,0)
   </dl>
"KRN",.84,7981999.001,2,379,0)
  </td>
"KRN",.84,7981999.001,2,380,0)
 </tr>
"KRN",.84,7981999.001,2,381,0)
</xsl:template>
"KRN",.84,7981999.001,2,382,0)
 
"KRN",.84,7981999.001,2,383,0)
<xsl:template match="PARAMETERS/ICD9LST/GROUP">
"KRN",.84,7981999.001,2,384,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,385,0)
 <dd><dl>
"KRN",.84,7981999.001,2,386,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,387,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,388,0)
  </xsl:if>
"KRN",.84,7981999.001,2,389,0)
  <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,390,0)
   <xsl:sort select="."/>
"KRN",.84,7981999.001,2,391,0)
   <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,392,0)
   <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,393,0)
  </xsl:for-each>
"KRN",.84,7981999.001,2,394,0)
 </dl></dd>
"KRN",.84,7981999.001,2,395,0)
</xsl:template>
"KRN",.84,7981999.001,2,396,0)
 
"KRN",.84,7981999.001,2,397,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,398,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,399,0)
  <xsl:with-param name="heading" select="'Local Fields'"/>
"KRN",.84,7981999.001,2,400,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,401,0)
</xsl:template>
"KRN",.84,7981999.001,2,402,0)
 
"KRN",.84,7981999.001,2,403,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,404,0)
 <tr>
"KRN",.84,7981999.001,2,405,0)
  <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,406,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,407,0)
 </tr>
"KRN",.84,7981999.001,2,408,0)
</xsl:template>
"KRN",.84,7981999.001,2,409,0)
 
"KRN",.84,7981999.001,2,410,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,411,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,412,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,413,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,414,0)
</xsl:template>
"KRN",.84,7981999.001,2,415,0)
 
"KRN",.84,7981999.001,2,416,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,417,0)
 <tr>
"KRN",.84,7981999.001,2,418,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,419,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,420,0)
 </tr>
"KRN",.84,7981999.001,2,421,0)
</xsl:template>
"KRN",.84,7981999.001,2,422,0)
 
"KRN",.84,7981999.001,2,423,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,424,0)
 <tr>
"KRN",.84,7981999.001,2,425,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,426,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,427,0)
 </tr>
"KRN",.84,7981999.001,2,428,0)
</xsl:template>
"KRN",.84,7981999.001,2,429,0)
 
"KRN",.84,7981999.001,2,430,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,431,0)
 <tr>
"KRN",.84,7981999.001,2,432,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,433,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,434,0)
 </tr>
"KRN",.84,7981999.001,2,435,0)
</xsl:template>
"KRN",.84,7981999.001,2,436,0)
 
"KRN",.84,7981999.001,2,437,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,438,0)
 <tr>
"KRN",.84,7981999.001,2,439,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,440,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,441,0)
 </tr>
"KRN",.84,7981999.001,2,442,0)
</xsl:template>
"KRN",.84,7981999.001,2,443,0)
 
"KRN",.84,7981999.001,2,444,0)
<!--
"KRN",.84,7981999.001,2,445,0)
=========================================================================
"KRN",.84,7981999.001,2,446,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,447,0)
=========================================================================
"KRN",.84,7981999.001,2,448,0)
-->
"KRN",.84,7981999.001,2,449,0)
 
"KRN",.84,7981999.001,2,450,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,451,0)
 <xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,452,0)
 <xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,453,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,454,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,455,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,456,0)
   <div>
"KRN",.84,7981999.001,2,457,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,458,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,459,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,460,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,461,0)
    </xsl:if>
"KRN",.84,7981999.001,2,462,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,463,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,464,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,465,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,466,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,467,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,468,0)
     <tbody>
"KRN",.84,7981999.001,2,469,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,470,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,471,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,472,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,473,0)
     </tbody>
"KRN",.84,7981999.001,2,474,0)
    </table>
"KRN",.84,7981999.001,2,475,0)
   </div>
"KRN",.84,7981999.001,2,476,0)
  </xsl:when>
"KRN",.84,7981999.001,2,477,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,478,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,479,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,480,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,481,0)
</xsl:template>
"KRN",.84,7981999.001,2,482,0)
 
"KRN",.84,7981999.001,2,483,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,484,0)
 
"KRN",.84,7981999.001,2,485,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,486,0)
 <thead>
"KRN",.84,7981999.001,2,487,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,488,0)
 </thead>
"KRN",.84,7981999.001,2,489,0)
</xsl:template>
"KRN",.84,7981999.001,2,490,0)
 
"KRN",.84,7981999.001,2,491,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,492,0)
 
"KRN",.84,7981999.001,2,493,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,494,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,495,0)
 <xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,496,0)
 <xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,497,0)
 <xsl:param name="sort" 
"KRN",.84,7981999.001,2,498,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,499,0)
 <xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,500,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,501,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,502,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,503,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,504,0)
 <th scope="col">
"KRN",.84,7981999.001,2,505,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,506,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,507,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,508,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,509,0)
  </xsl:if>
"KRN",.84,7981999.001,2,510,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,511,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,512,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,513,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,514,0)
  </xsl:if>
"KRN",.84,7981999.001,2,515,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,516,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,517,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,518,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,519,0)
  </xsl:if>
"KRN",.84,7981999.001,2,520,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,521,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,522,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,523,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,524,0)
  </xsl:if>
"KRN",.84,7981999.001,2,525,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,526,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,527,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,528,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,529,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,530,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,531,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,532,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,533,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,534,0)
    </xsl:element>
"KRN",.84,7981999.001,2,535,0)
   </xsl:when>
"KRN",.84,7981999.001,2,536,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,537,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,538,0)
 </th>
"KRN",.84,7981999.001,2,539,0)
</xsl:template>
"KRN",.84,7981999.001,2,540,0)
 
"KRN",.84,7981999.001,2,541,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,542,0)
 
"KRN",.84,7981999.001,2,543,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,544,0)
 <xsl:param name="colspan"
"KRN",.84,7981999.001,2,545,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,546,0)
 <tfoot><tr><td>
"KRN",.84,7981999.001,2,547,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,548,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,549,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,550,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,551,0)
  </xsl:if>
"KRN",.84,7981999.001,2,552,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,553,0)
 </td></tr></tfoot>
"KRN",.84,7981999.001,2,554,0)
</xsl:template>
"KRN",.84,7981999.001,2,555,0)
 
"KRN",.84,7981999.001,2,556,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,557,0)
 
"KRN",.84,7981999.001,2,558,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,559,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,560,0)
 <tr>
"KRN",.84,7981999.001,2,561,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,562,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,563,0)
  </xsl:if>
"KRN",.84,7981999.001,2,564,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,565,0)
 </tr>
"KRN",.84,7981999.001,2,566,0)
</xsl:template>
"KRN",.84,7981999.001,2,567,0)
 
"KRN",.84,7981999.001,2,568,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,569,0)
 
"KRN",.84,7981999.001,2,570,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,571,0)
 <xsl:param name="class"/>
"KRN",.84,7981999.001,2,572,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,573,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,574,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,575,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,576,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,577,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,578,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,579,0)
 <td>
"KRN",.84,7981999.001,2,580,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,581,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,582,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,583,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,584,0)
  </xsl:if>
"KRN",.84,7981999.001,2,585,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,586,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,587,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,588,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,589,0)
  </xsl:if>
"KRN",.84,7981999.001,2,590,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,591,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,592,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,593,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,594,0)
  </xsl:if>
"KRN",.84,7981999.001,2,595,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,596,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,597,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,598,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,599,0)
  </xsl:if>
"KRN",.84,7981999.001,2,600,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,601,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,602,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,603,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,604,0)
  </xsl:if>
"KRN",.84,7981999.001,2,605,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,606,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,607,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,608,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,609,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,610,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,611,0)
   </xsl:when>
"KRN",.84,7981999.001,2,612,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,613,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,614,0)
     <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,615,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,616,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,617,0)
   </xsl:when>
"KRN",.84,7981999.001,2,618,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,619,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,620,0)
 </td>
"KRN",.84,7981999.001,2,621,0)
</xsl:template>
"KRN",.84,7981999.001,2,622,0)
 
"KRN",.84,7981999.001,2,623,0)
<!-- Default column headingds -->
"KRN",.84,7981999.001,2,624,0)
 
"KRN",.84,7981999.001,2,625,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,626,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,627,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,628,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,629,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,630,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,631,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,632,0)
</xsl:template>
"KRN",.84,7981999.001,2,633,0)
 
"KRN",.84,7981999.001,2,634,0)
<xsl:template match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,635,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,636,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,637,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,638,0)
  <xsl:with-param name="title" select="'Date'"/>                               
"KRN",.84,7981999.001,2,639,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,640,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,641,0)
</xsl:template>
"KRN",.84,7981999.001,2,642,0)
 
"KRN",.84,7981999.001,2,643,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,644,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,645,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,646,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,647,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,648,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,649,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,650,0)
</xsl:template>
"KRN",.84,7981999.001,2,651,0)
 
"KRN",.84,7981999.001,2,652,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,653,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,654,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,655,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,656,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,657,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,658,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,659,0)
</xsl:template>
"KRN",.84,7981999.001,2,660,0)
 
"KRN",.84,7981999.001,2,661,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,662,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,663,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,664,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,665,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,666,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,667,0)
</xsl:template>
"KRN",.84,7981999.001,2,668,0)
 
"KRN",.84,7981999.001,2,669,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,670,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,671,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,672,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,673,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,674,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,675,0)
</xsl:template>
"KRN",.84,7981999.001,2,676,0)
 
"KRN",.84,7981999.001,2,677,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,678,0)
 
"KRN",.84,7981999.001,2,679,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,680,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,681,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,682,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,683,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,684,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,685,0)
</xsl:template>
"KRN",.84,7981999.001,2,686,0)
 
"KRN",.84,7981999.001,2,687,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,688,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,689,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,690,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,691,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,692,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,693,0)
</xsl:template>
"KRN",.84,7981999.001,2,694,0)
 
"KRN",.84,7981999.001,2,695,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845
"KRN",.84,7981999.002,-1)
0^12
"KRN",.84,7981999.002,0)
7981999.002^2^^CLINICAL CASE REGISTRIES^Common XSL templates (CSV)
"KRN",.84,7981999.002,2,0)
^.844^256^256^3051207^^^^
"KRN",.84,7981999.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981999.002,2,4,0)
>
"KRN",.84,7981999.002,2,5,0)
 
"KRN",.84,7981999.002,2,6,0)
<xsl:output method="text" encoding="iso-8859-1"/>
"KRN",.84,7981999.002,2,7,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.002,2,8,0)
 
"KRN",.84,7981999.002,2,9,0)
<xsl:variable name="CRLF"><xsl:text>&#13;&#10;</xsl:text></xsl:variable>
"KRN",.84,7981999.002,2,10,0)
<xsl:variable name="DELIMITER"><xsl:text>,</xsl:text></xsl:variable>
"KRN",.84,7981999.002,2,11,0)
<xsl:variable name="FILESWITCH"><xsl:text>&#127;</xsl:text></xsl:variable>
"KRN",.84,7981999.002,2,12,0)
 
"KRN",.84,7981999.002,2,13,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.002,2,14,0)
 
"KRN",.84,7981999.002,2,15,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.002,2,16,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.002,2,17,0)
 
"KRN",.84,7981999.002,2,18,0)
<!--
"KRN",.84,7981999.002,2,19,0)
=========================================================================
"KRN",.84,7981999.002,2,20,0)
                                UTILITIES
"KRN",.84,7981999.002,2,21,0)
=========================================================================
"KRN",.84,7981999.002,2,22,0)
-->
"KRN",.84,7981999.002,2,23,0)
 
"KRN",.84,7981999.002,2,24,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.002,2,25,0)
 
"KRN",.84,7981999.002,2,26,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.002,2,27,0)
 <xsl:param name="dt"/>
"KRN",.84,7981999.002,2,28,0)
 <!--
"KRN",.84,7981999.002,2,29,0)
     Date (YYYMMDD)
"KRN",.84,7981999.002,2,30,0)
 -->
"KRN",.84,7981999.002,2,31,0)
 <xsl:variable name="date"
"KRN",.84,7981999.002,2,32,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.002,2,33,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.002,2,34,0)
  <xsl:choose>
"KRN",.84,7981999.002,2,35,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.002,2,36,0)
    <xsl:variable name="year" 
"KRN",.84,7981999.002,2,37,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.002,2,38,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.002,2,39,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.002,2,40,0)
    <xsl:choose>
"KRN",.84,7981999.002,2,41,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.002,2,42,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.002,2,43,0)
     </xsl:when>
"KRN",.84,7981999.002,2,44,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.002,2,45,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.002,2,46,0)
     </xsl:when>
"KRN",.84,7981999.002,2,47,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.002,2,48,0)
    </xsl:choose>
"KRN",.84,7981999.002,2,49,0)
   </xsl:when>
"KRN",.84,7981999.002,2,50,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.002,2,51,0)
  </xsl:choose>
"KRN",.84,7981999.002,2,52,0)
  <!--
"KRN",.84,7981999.002,2,53,0)
      Time (HHMMSS)
"KRN",.84,7981999.002,2,54,0)
  -->
"KRN",.84,7981999.002,2,55,0)
  <xsl:variable name="time"
"KRN",.84,7981999.002,2,56,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.002,2,57,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.002,2,58,0)
   <xsl:text> </xsl:text>
"KRN",.84,7981999.002,2,59,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.002,2,60,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.002,2,61,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.002,2,62,0)
  </xsl:if>
"KRN",.84,7981999.002,2,63,0)
 </xsl:if>
"KRN",.84,7981999.002,2,64,0)
</xsl:template>
"KRN",.84,7981999.002,2,65,0)
 
"KRN",.84,7981999.002,2,66,0)
<!-- Doubles the double quotes in the provided string -->
"KRN",.84,7981999.002,2,67,0)
 
"KRN",.84,7981999.002,2,68,0)
<xsl:template name="DoubleQuotes">
"KRN",.84,7981999.002,2,69,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,70,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,71,0)
  <xsl:when test="contains($value,'&quot;')">
"KRN",.84,7981999.002,2,72,0)
   <xsl:value-of select="substring-before($value,'&quot;')"/>
"KRN",.84,7981999.002,2,73,0)
   <xsl:text>&quot;&quot;</xsl:text>
"KRN",.84,7981999.002,2,74,0)
   <xsl:call-template name="DoubleQuotes">
"KRN",.84,7981999.002,2,75,0)
    <xsl:with-param name="value" 
"KRN",.84,7981999.002,2,76,0)
                    select="substring-after($value,'&quot;')"/>
"KRN",.84,7981999.002,2,77,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,78,0)
  </xsl:when>
"KRN",.84,7981999.002,2,79,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.002,2,80,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,81,0)
</xsl:template>
"KRN",.84,7981999.002,2,82,0)
 
"KRN",.84,7981999.002,2,83,0)
<!-- Quotes the string if it contains commas or double quotes -->
"KRN",.84,7981999.002,2,84,0)
 
"KRN",.84,7981999.002,2,85,0)
<xsl:template name="Quote">
"KRN",.84,7981999.002,2,86,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,87,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,88,0)
  <xsl:when test="contains($value,'&quot;')">
"KRN",.84,7981999.002,2,89,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,90,0)
   <xsl:call-template name="DoubleQuotes">
"KRN",.84,7981999.002,2,91,0)
    <xsl:with-param name="value" select="$value"/>
"KRN",.84,7981999.002,2,92,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,93,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,94,0)
  </xsl:when>
"KRN",.84,7981999.002,2,95,0)
  <xsl:when test="contains($value,$DELIMITER)">
"KRN",.84,7981999.002,2,96,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,97,0)
   <xsl:value-of select="$value"/>
"KRN",.84,7981999.002,2,98,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,99,0)
  </xsl:when>
"KRN",.84,7981999.002,2,100,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.002,2,101,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,102,0)
</xsl:template> 
"KRN",.84,7981999.002,2,103,0)
 
"KRN",.84,7981999.002,2,104,0)
<!-- Default report summary -->
"KRN",.84,7981999.002,2,105,0)
 
"KRN",.84,7981999.002,2,106,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.002,2,107,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.002,2,108,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.002,2,109,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,110,0)
  <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.002,2,111,0)
 </xsl:if>
"KRN",.84,7981999.002,2,112,0)
</xsl:template>
"KRN",.84,7981999.002,2,113,0)
 
"KRN",.84,7981999.002,2,114,0)
<!-- Empty table indicator -->
"KRN",.84,7981999.002,2,115,0)
 
"KRN",.84,7981999.002,2,116,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.002,2,117,0)
 <xsl:text>No data has been found.</xsl:text>
"KRN",.84,7981999.002,2,118,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,119,0)
</xsl:template>
"KRN",.84,7981999.002,2,120,0)
 
"KRN",.84,7981999.002,2,121,0)
<!-- Format the section of a utilization report -->
"KRN",.84,7981999.002,2,122,0)
 
"KRN",.84,7981999.002,2,123,0)
<xsl:template name="UtilizationSection">
"KRN",.84,7981999.002,2,124,0)
 <xsl:param name="data"/>
"KRN",.84,7981999.002,2,125,0)
 <xsl:param name="subttl"/>
"KRN",.84,7981999.002,2,126,0)
 <xsl:variable name="table" select="$data/@TABLE"/>
"KRN",.84,7981999.002,2,127,0)
 <xsl:if test="$data/*[1]">
"KRN",.84,7981999.002,2,128,0)
  <xsl:value-of select="$UTILIZATION_HEADER"/>
"KRN",.84,7981999.002,2,129,0)
  <xsl:value-of select="concat(' (',$subttl,')')"/>
"KRN",.84,7981999.002,2,130,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,131,0)
  <xsl:apply-templates select="$data"/>
"KRN",.84,7981999.002,2,132,0)
  <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981999.002,2,133,0)
 </xsl:if>
"KRN",.84,7981999.002,2,134,0)
 
"KRN",.84,7981999.002,2,135,0)
</xsl:template>
"KRN",.84,7981999.002,2,136,0)
 
"KRN",.84,7981999.002,2,137,0)
<!--
"KRN",.84,7981999.002,2,138,0)
=========================================================================
"KRN",.84,7981999.002,2,139,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.002,2,140,0)
=========================================================================
"KRN",.84,7981999.002,2,141,0)
-->
"KRN",.84,7981999.002,2,142,0)
 
"KRN",.84,7981999.002,2,143,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.002,2,144,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.002,2,145,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,146,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,147,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.002,2,148,0)
   <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.002,2,149,0)
   <xsl:apply-templates select="*"/>
"KRN",.84,7981999.002,2,150,0)
  </xsl:when>
"KRN",.84,7981999.002,2,151,0)
  <xsl:otherwise>
"KRN",.84,7981999.002,2,152,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.002,2,153,0)
  </xsl:otherwise>
"KRN",.84,7981999.002,2,154,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,155,0)
</xsl:template>
"KRN",.84,7981999.002,2,156,0)
 
"KRN",.84,7981999.002,2,157,0)
<!-- Default data grid header -->
"KRN",.84,7981999.002,2,158,0)
 
"KRN",.84,7981999.002,2,159,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.002,2,160,0)
 <xsl:apply-templates select="..//COLUMN[not(child::COLUMN[1])]"/>
"KRN",.84,7981999.002,2,161,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,162,0)
</xsl:template>
"KRN",.84,7981999.002,2,163,0)
 
"KRN",.84,7981999.002,2,164,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.002,2,165,0)
 
"KRN",.84,7981999.002,2,166,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.002,2,167,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.002,2,168,0)
 <xsl:param name="title" select="$column/@NAME"/>
"KRN",.84,7981999.002,2,169,0)
 <xsl:if test="$title!='#'">
"KRN",.84,7981999.002,2,170,0)
  <xsl:call-template name="Quote">
"KRN",.84,7981999.002,2,171,0)
   <xsl:with-param name="value" select="$title"/>
"KRN",.84,7981999.002,2,172,0)
  </xsl:call-template>
"KRN",.84,7981999.002,2,173,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,174,0)
 </xsl:if>
"KRN",.84,7981999.002,2,175,0)
</xsl:template>
"KRN",.84,7981999.002,2,176,0)
 
"KRN",.84,7981999.002,2,177,0)
<!-- Default data grid row -->
"KRN",.84,7981999.002,2,178,0)
 
"KRN",.84,7981999.002,2,179,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.002,2,180,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.002,2,181,0)
 <xsl:if test="$seqnum">
"KRN",.84,7981999.002,2,182,0)
  <xsl:value-of select="position()"/>
"KRN",.84,7981999.002,2,183,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,184,0)
 </xsl:if>
"KRN",.84,7981999.002,2,185,0)
 <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.002,2,186,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,187,0)
</xsl:template>
"KRN",.84,7981999.002,2,188,0)
 
"KRN",.84,7981999.002,2,189,0)
<!-- Data grid cell -->
"KRN",.84,7981999.002,2,190,0)
 
"KRN",.84,7981999.002,2,191,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.002,2,192,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.002,2,193,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,194,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.002,2,195,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,196,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.002,2,197,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.002,2,198,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.002,2,199,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,200,0)
  </xsl:when>
"KRN",.84,7981999.002,2,201,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.002,2,202,0)
   <xsl:choose>
"KRN",.84,7981999.002,2,203,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.002,2,204,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.002,2,205,0)
   </xsl:choose>
"KRN",.84,7981999.002,2,206,0)
  </xsl:when>
"KRN",.84,7981999.002,2,207,0)
  <xsl:otherwise>
"KRN",.84,7981999.002,2,208,0)
   <xsl:call-template name="Quote">
"KRN",.84,7981999.002,2,209,0)
    <xsl:with-param name="value" select="$value"/>
"KRN",.84,7981999.002,2,210,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,211,0)
  </xsl:otherwise>
"KRN",.84,7981999.002,2,212,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,213,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,214,0)
</xsl:template>
"KRN",.84,7981999.002,2,215,0)
 
"KRN",.84,7981999.002,2,216,0)
<!-- Default column headers -->
"KRN",.84,7981999.002,2,217,0)
 
"KRN",.84,7981999.002,2,218,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981999.002,2,219,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,220,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981999.002,2,221,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,222,0)
</xsl:template>
"KRN",.84,7981999.002,2,223,0)
 
"KRN",.84,7981999.002,2,224,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.002,2,225,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,226,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.002,2,227,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,228,0)
</xsl:template>
"KRN",.84,7981999.002,2,229,0)
 
"KRN",.84,7981999.002,2,230,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.002,2,231,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,232,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.002,2,233,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,234,0)
</xsl:template>
"KRN",.84,7981999.002,2,235,0)
 
"KRN",.84,7981999.002,2,236,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.002,2,237,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,238,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.002,2,239,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,240,0)
</xsl:template>
"KRN",.84,7981999.002,2,241,0)
 
"KRN",.84,7981999.002,2,242,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.002,2,243,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,244,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.002,2,245,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,246,0)
</xsl:template>
"KRN",.84,7981999.002,2,247,0)
 
"KRN",.84,7981999.002,2,248,0)
<!-- Default cells -->
"KRN",.84,7981999.002,2,249,0)
 
"KRN",.84,7981999.002,2,250,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.002,2,251,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.002,2,252,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.002,2,253,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,254,0)
</xsl:template>
"KRN",.84,7981999.002,2,255,0)
 
"KRN",.84,7981999.002,2,256,0)
</xsl:stylesheet>
"KRN",8994,1749,-1)
0^5
"KRN",8994,1749,0)
ROR REPORT SCHEDULE^SCHEDREP^RORRP010^2^R^^^1^1
"KRN",8994,1749,1,0)
^8994.01^1^1^3060518^^^^
"KRN",8994,1749,1,1,0)
Schedules the report and returns the task information.
"KRN",8994,1749,2,0)
^8994.02A^5^5
"KRN",8994,1749,2,1,0)
REGIEN^1^^^2
"KRN",8994,1749,2,1,1,0)
^8994.021^2^2^3030220^^
"KRN",8994,1749,2,1,1,1,0)
Registry IEN (if $G(REGIEN)'>0 the task will not be associated with any
"KRN",8994,1749,2,1,1,2,0)
particular registry).
"KRN",8994,1749,2,2,0)
RPTCODE^1^^1^1
"KRN",8994,1749,2,2,1,0)
^8994.021^2^2^3030307^^^
"KRN",8994,1749,2,2,1,1,0)
Code of the report (value of the CODE field of the report descriptor in
"KRN",8994,1749,2,2,1,2,0)
the ROR REPORT file).
"KRN",8994,1749,2,3,0)
ZTDTH^1^^^3
"KRN",8994,1749,2,3,1,0)
^^2^2^3030110^
"KRN",8994,1749,2,3,1,1,0)
Date/time to start the task (external value). By default (if $G(ZDTH)=""),
"KRN",8994,1749,2,3,1,2,0)
the task will be scheduled to run after 3-second pause.
"KRN",8994,1749,2,4,0)
PARAMS^2^^^5
"KRN",8994,1749,2,4,1,0)
^^177^177^3060518^
"KRN",8994,1749,2,4,1,1,0)
Report parameters in XML format. For example:
"KRN",8994,1749,2,4,1,2,0)
 
"KRN",8994,1749,2,4,1,3,0)
  with RPCBroker.Param[4] do
"KRN",8994,1749,2,4,1,4,0)
    begin
"KRN",8994,1749,2,4,1,5,0)
      PType :=list;
"KRN",8994,1749,2,4,1,6,0)
      Mult[1] := '<?xml version="1.0" encoding="UTF-8"?>'
"KRN",8994,1749,2,4,1,7,0)
      Mult[2] := '<PARAMS>';
"KRN",8994,1749,2,4,1,8,0)
      Mult[3] := '<TASK_COMMENT>Ear procedures 2003</TASK_COMMENT>'
"KRN",8994,1749,2,4,1,9,0)
      Mult[4] := '<DATE_RANGE TYPE="YEAR" YEAR="2003"/>';
"KRN",8994,1749,2,4,1,10,0)
      Mult[5] := '<PATIENTS DE_DURING="1" INPATIENT="1" OUTPATIENT="1">';
"KRN",8994,1749,2,4,1,11,0)
      Mult[6] := '<CPTLST>';
"KRN",8994,1749,2,4,1,12,0)
      Mult[7] := '<CPT ID="00120">ANESTH, EAR SURGERY</CPT>';
"KRN",8994,1749,2,4,1,13,0)
      Mult[8] := '<CPT ID="00124">ANESTH, EAR EXAM</CPT>';
"KRN",8994,1749,2,4,1,14,0)
      Mult[9] := '</CPTLST>';
"KRN",8994,1749,2,4,1,15,0)
      ...
"KRN",8994,1749,2,4,1,16,0)
      Mult[n] := '</PARAMS>';
"KRN",8994,1749,2,4,1,17,0)
    end;
"KRN",8994,1749,2,4,1,18,0)
 
"KRN",8994,1749,2,4,1,19,0)
Clinics
"KRN",8994,1749,2,4,1,20,0)
-------
"KRN",8994,1749,2,4,1,21,0)
 
"KRN",8994,1749,2,4,1,22,0)
  <CLINICS [ALL="1"]>
"KRN",8994,1749,2,4,1,23,0)
    <CLINIC ID="IEN">Name</CLINIC>
"KRN",8994,1749,2,4,1,24,0)
    ...
"KRN",8994,1749,2,4,1,25,0)
  </CLINICS>
"KRN",8994,1749,2,4,1,26,0)
 
"KRN",8994,1749,2,4,1,27,0)
CPT Codes
"KRN",8994,1749,2,4,1,28,0)
---------
"KRN",8994,1749,2,4,1,29,0)
 
"KRN",8994,1749,2,4,1,30,0)
  <CPTLST [ALL="1"]>
"KRN",8994,1749,2,4,1,31,0)
    <CPT ID="CPT">Name</CPT>
"KRN",8994,1749,2,4,1,32,0)
    ...
"KRN",8994,1749,2,4,1,33,0)
  </CPTLST>
"KRN",8994,1749,2,4,1,34,0)
 
"KRN",8994,1749,2,4,1,35,0)
Date Range
"KRN",8994,1749,2,4,1,36,0)
----------
"KRN",8994,1749,2,4,1,37,0)
(Medications date range for the Combined Meds and Labs report)
"KRN",8994,1749,2,4,1,38,0)
 
"KRN",8994,1749,2,4,1,39,0)
  <DATE_RANGE TYPE="Type" [START="..." END="..."]
"KRN",8994,1749,2,4,1,40,0)
    [CUTOFF="..."] [YEAR="..." [QUARTER="..."]
"KRN",8994,1749,2,4,1,41,0)
    [FISCAL="1"]]/>
"KRN",8994,1749,2,4,1,42,0)
 
"KRN",8994,1749,2,4,1,43,0)
Lab Date Range
"KRN",8994,1749,2,4,1,44,0)
--------------
"KRN",8994,1749,2,4,1,45,0)
 
"KRN",8994,1749,2,4,1,46,0)
  <DATE_RANGE_2 TYPE="Type" [START="..." END="..."]
"KRN",8994,1749,2,4,1,47,0)
    [CUTOFF="..."] [YEAR="..." [QUARTER="..."]
"KRN",8994,1749,2,4,1,48,0)
    [FISCAL="1"]]/>
"KRN",8994,1749,2,4,1,49,0)
 
"KRN",8994,1749,2,4,1,50,0)
Utilization Date Range
"KRN",8994,1749,2,4,1,51,0)
----------------------
"KRN",8994,1749,2,4,1,52,0)
 
"KRN",8994,1749,2,4,1,53,0)
  <DATE_RANGE_3 TYPE="Type" [START="..." END="..."]
"KRN",8994,1749,2,4,1,54,0)
    [CUTOFF="..."] [YEAR="..." [QUARTER="..."]
"KRN",8994,1749,2,4,1,55,0)
    [FISCAL="1"]]/>
"KRN",8994,1749,2,4,1,56,0)
 
"KRN",8994,1749,2,4,1,57,0)
Divisions
"KRN",8994,1749,2,4,1,58,0)
---------
"KRN",8994,1749,2,4,1,59,0)
 
"KRN",8994,1749,2,4,1,60,0)
  <DIVISIONS [ALL="1"]>
"KRN",8994,1749,2,4,1,61,0)
    <DIV ID="IEN">Name</DIV>
"KRN",8994,1749,2,4,1,62,0)
    ...
"KRN",8994,1749,2,4,1,63,0)
  </DIVISIONS>
"KRN",8994,1749,2,4,1,64,0)
 
"KRN",8994,1749,2,4,1,65,0)
Medications, Drug Classes, and Medication Groups
"KRN",8994,1749,2,4,1,66,0)
------------------------------------------------
"KRN",8994,1749,2,4,1,67,0)
 
"KRN",8994,1749,2,4,1,68,0)
  <DRUGS [AGGR_GENERIC=1] [AGGR_FORMUL=1] [ALL="1"]
"KRN",8994,1749,2,4,1,69,0)
    [INVESTIG="1"] [REGMEDS="1"]>
"KRN",8994,1749,2,4,1,70,0)
    <GROUP [ID="GroupName"] [INVESTIG="1"] [REGMEDS="1"]>
"KRN",8994,1749,2,4,1,71,0)
      <GENERIC>
"KRN",8994,1749,2,4,1,72,0)
        <DRUG ID="IEN">Name</DRUG>
"KRN",8994,1749,2,4,1,73,0)
        ...
"KRN",8994,1749,2,4,1,74,0)
      </GENERIC>
"KRN",8994,1749,2,4,1,75,0)
      <FORMULATIONS>
"KRN",8994,1749,2,4,1,76,0)
        <DRUG ID="IEN">Name</DRUG>
"KRN",8994,1749,2,4,1,77,0)
        ...
"KRN",8994,1749,2,4,1,78,0)
      </FORMULATIONS>
"KRN",8994,1749,2,4,1,79,0)
      <VARXCLS>
"KRN",8994,1749,2,4,1,80,0)
        <VARXCL ID="IEN" CODE="ClassCode">Name</VARXCL>
"KRN",8994,1749,2,4,1,81,0)
        ...
"KRN",8994,1749,2,4,1,82,0)
      </VARXCLS>
"KRN",8994,1749,2,4,1,83,0)
    </GROUP>
"KRN",8994,1749,2,4,1,84,0)
    ...
"KRN",8994,1749,2,4,1,85,0)
  </DRUGS>
"KRN",8994,1749,2,4,1,86,0)
 
"KRN",8994,1749,2,4,1,87,0)
ICD-9 Codes
"KRN",8994,1749,2,4,1,88,0)
-----------
"KRN",8994,1749,2,4,1,89,0)
 
"KRN",8994,1749,2,4,1,90,0)
  <ICD9LST [ALL="1"]>
"KRN",8994,1749,2,4,1,91,0)
    <ICD9 ID="ICD-9">Name</ICD9>
"KRN",8994,1749,2,4,1,92,0)
    ...
"KRN",8994,1749,2,4,1,93,0)
  </ICD9LST>
"KRN",8994,1749,2,4,1,94,0)
 
"KRN",8994,1749,2,4,1,95,0)
Lab Tests
"KRN",8994,1749,2,4,1,96,0)
---------
"KRN",8994,1749,2,4,1,97,0)
 
"KRN",8994,1749,2,4,1,98,0)
  <LABTESTS [ALL="1"]>
"KRN",8994,1749,2,4,1,99,0)
    <LT ID="IEN" [LOW="..."] [HIGH="..."]>Name</LT>
"KRN",8994,1749,2,4,1,100,0)
    ...
"KRN",8994,1749,2,4,1,101,0)
  </LABTESTS>
"KRN",8994,1749,2,4,1,102,0)
 
"KRN",8994,1749,2,4,1,103,0)
Local Fields
"KRN",8994,1749,2,4,1,104,0)
------------
"KRN",8994,1749,2,4,1,105,0)
 
"KRN",8994,1749,2,4,1,106,0)
  <LOCAL_FIELDS>
"KRN",8994,1749,2,4,1,107,0)
    <FIELD ID="IEN" [MODE="1"|"-1"] 
"KRN",8994,1749,2,4,1,108,0)
      [NAME="FieldName"]>Description</FIELD>
"KRN",8994,1749,2,4,1,109,0)
  </LOCAL_FIELDS>
"KRN",8994,1749,2,4,1,110,0)
 
"KRN",8994,1749,2,4,1,111,0)
Lab Result Ranges
"KRN",8994,1749,2,4,1,112,0)
-----------------
"KRN",8994,1749,2,4,1,113,0)
 
"KRN",8994,1749,2,4,1,114,0)
  <LRGRANGES>
"KRN",8994,1749,2,4,1,115,0)
    <LRGRANGE ID="GroupCode" USE="1"
"KRN",8994,1749,2,4,1,116,0)
      [LOW="..."] [HIGH="..."]>GroupName</LRGRANGE>
"KRN",8994,1749,2,4,1,117,0)
  </LRGRANGES>
"KRN",8994,1749,2,4,1,118,0)
 
"KRN",8994,1749,2,4,1,119,0)
Number of patients with highest utilization
"KRN",8994,1749,2,4,1,120,0)
-------------------------------------------
"KRN",8994,1749,2,4,1,121,0)
 
"KRN",8994,1749,2,4,1,122,0)
  <MAXUTNUM>...</MAXUTNUM>
"KRN",8994,1749,2,4,1,123,0)
 
"KRN",8994,1749,2,4,1,124,0)
Minimum number of procedures/results to display
"KRN",8994,1749,2,4,1,125,0)
-----------------------------------------------
"KRN",8994,1749,2,4,1,126,0)
 
"KRN",8994,1749,2,4,1,127,0)
  <MINRPNUM>...</MINRPNUM>
"KRN",8994,1749,2,4,1,128,0)
 
"KRN",8994,1749,2,4,1,129,0)
Optional Columns
"KRN",8994,1749,2,4,1,130,0)
----------------
"KRN",8994,1749,2,4,1,131,0)
 
"KRN",8994,1749,2,4,1,132,0)
  <OPTIONAL_COLUMNS>
"KRN",8994,1749,2,4,1,133,0)
    <COLUMN ID="ColumnName"/>
"KRN",8994,1749,2,4,1,134,0)
  </OPTIONAL_COLUMNS>
"KRN",8994,1749,2,4,1,135,0)
 
"KRN",8994,1749,2,4,1,136,0)
Report Options
"KRN",8994,1749,2,4,1,137,0)
--------------
"KRN",8994,1749,2,4,1,138,0)
 
"KRN",8994,1749,2,4,1,139,0)
  <OPTIONS [COMPLETE="1"] [SUMMARY="1"]
"KRN",8994,1749,2,4,1,140,0)
    [REGMEDSMRY="1"] [PTLIST="1"]/>
"KRN",8994,1749,2,4,1,141,0)
 
"KRN",8994,1749,2,4,1,142,0)
Other Registries
"KRN",8994,1749,2,4,1,143,0)
----------------
"KRN",8994,1749,2,4,1,144,0)
 
"KRN",8994,1749,2,4,1,145,0)
  <OTHER_REGISTRIES>
"KRN",8994,1749,2,4,1,146,0)
    <REGISTRY ID="RegIEN" [MODE="1"|"-1"]
"KRN",8994,1749,2,4,1,147,0)
      [NAME="RegName"]>Description</REGISTRY>
"KRN",8994,1749,2,4,1,148,0)
    ...
"KRN",8994,1749,2,4,1,149,0)
  </OTHER_REGISTRIES>
"KRN",8994,1749,2,4,1,150,0)
 
"KRN",8994,1749,2,4,1,151,0)
Subset of Patients
"KRN",8994,1749,2,4,1,152,0)
------------------
"KRN",8994,1749,2,4,1,153,0)
 
"KRN",8994,1749,2,4,1,154,0)
  <PATIENTS [CONFIRMED="1"] [PENDING="1"]
"KRN",8994,1749,2,4,1,155,0)
    [DE_BEFORE="1"] [DE_DURING="1"] [DE_AFTER="1"]
"KRN",8994,1749,2,4,1,156,0)
    [INPATIENT="1"] [OUTPATIENT="1"]
"KRN",8994,1749,2,4,1,157,0)
    [COMPLEX="1"] [BASIC="1"]
"KRN",8994,1749,2,4,1,158,0)
    [LAB="1"] [NOLAB="1"] 
"KRN",8994,1749,2,4,1,159,0)
    [NOTSEEN="1"] [SEEN="1"] [CAREONLY="1"]
"KRN",8994,1749,2,4,1,160,0)
    [PHARM="1"] [NOPHARM="1"]
"KRN",8994,1749,2,4,1,161,0)
    [PROC="1"] [NOPROC="1"]/>
"KRN",8994,1749,2,4,1,162,0)
    <PT ID="DFN" [SSN="SSN"]>Name</PT>
"KRN",8994,1749,2,4,1,163,0)
    ...
"KRN",8994,1749,2,4,1,164,0)
  </PATIENTS>
"KRN",8994,1749,2,4,1,165,0)
 
"KRN",8994,1749,2,4,1,166,0)
User Defined Comment
"KRN",8994,1749,2,4,1,167,0)
--------------------
"KRN",8994,1749,2,4,1,168,0)
 
"KRN",8994,1749,2,4,1,169,0)
  <TASK_COMMENT>...</TASK_COMMENT>
"KRN",8994,1749,2,4,1,170,0)
 
"KRN",8994,1749,2,4,1,171,0)
Utilization Types
"KRN",8994,1749,2,4,1,172,0)
-----------------
"KRN",8994,1749,2,4,1,173,0)
 
"KRN",8994,1749,2,4,1,174,0)
  <UTIL_TYPES [ALL="1"]>
"KRN",8994,1749,2,4,1,175,0)
    <UT ID="UtlCode"/>
"KRN",8994,1749,2,4,1,176,0)
    ...
"KRN",8994,1749,2,4,1,177,0)
  </UTIL_TYPES>
"KRN",8994,1749,2,5,0)
SCHCODE^1^^^4
"KRN",8994,1749,2,5,1,0)
^8994.021^1^1^3060518^^^^
"KRN",8994,1749,2,5,1,1,0)
Rescheduling code ("1D", "1M", "D@12:00", etc).
"KRN",8994,1749,2,"B","PARAMS",4)

"KRN",8994,1749,2,"B","REGIEN",1)

"KRN",8994,1749,2,"B","RPTCODE",2)

"KRN",8994,1749,2,"B","SCHCODE",5)

"KRN",8994,1749,2,"B","ZTDTH",3)

"KRN",8994,1749,2,"PARAMSEQ",1,2)

"KRN",8994,1749,2,"PARAMSEQ",2,1)

"KRN",8994,1749,2,"PARAMSEQ",3,3)

"KRN",8994,1749,2,"PARAMSEQ",4,5)

"KRN",8994,1749,2,"PARAMSEQ",5,4)

"KRN",8994,1749,3,0)
^8994.03^30^30^3060518^^^^
"KRN",8994,1749,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that
"KRN",8994,1749,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,1749,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,1749,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,1749,3,5,0)
 
"KRN",8994,1749,3,6,0)
  Results[0]            Result Descriptor
"KRN",8994,1749,3,7,0)
                          ^01: The last error code (LASTERR)
"KRN",8994,1749,3,8,0)
                          ^02: Number of the error descriptors
"KRN",8994,1749,3,9,0)
 
"KRN",8994,1749,3,10,0)
 
"KRN",8994,1749,3,11,0)
  Results[i]            Error Descriptor
"KRN",8994,1749,3,12,0)
                          ^01: Error code
"KRN",8994,1749,3,13,0)
                          ^02: Message
"KRN",8994,1749,3,14,0)
                          ^03: Place of the error
"KRN",8994,1749,3,15,0)
 
"KRN",8994,1749,3,16,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,1749,3,17,0)
error first).                                                 
"KRN",8994,1749,3,18,0)
 
"KRN",8994,1749,3,19,0)
Otherwise, the Results[0] contains number of task descriptors returned in
"KRN",8994,1749,3,20,0)
the Results array (always 1) and number of elements that comprise a task
"KRN",8994,1749,3,21,0)
descriptor:
"KRN",8994,1749,3,22,0)
 
"KRN",8994,1749,3,23,0)
  Results[0]            Result Descriptor
"KRN",8994,1749,3,24,0)
                          ^01: 1
"KRN",8994,1749,3,25,0)
                          ^02: Number of elements that comprise a task
"KRN",8994,1749,3,26,0)
                               descriptor (TIN)
"KRN",8994,1749,3,27,0)
 
"KRN",8994,1749,3,28,0)
The subsequent nodes of the Results array (from 1 to TIN) contain the
"KRN",8994,1749,3,29,0)
information about the scheduled task (see the ROR TASK INFO remote 
"KRN",8994,1749,3,30,0)
procedure for more details).
"KRN",8994,1795,-1)
0^6
"KRN",8994,1795,0)
ROR LIST ICD-9^ICD9LIST^RORRP016^4^R^^^1^1
"KRN",8994,1795,1,0)
^8994.01^3^3^3060622^^
"KRN",8994,1795,1,1,0)
The ROR LIST ICD-9 remote procedure returns a list of ICD-9 codes (from
"KRN",8994,1795,1,2,0)
the ICD DIAGNOSIS or ICD OPERATION/PROCEDURE file), which conform the
"KRN",8994,1795,1,3,0)
criteria.
"KRN",8994,1795,2,0)
^8994.02A^5^5
"KRN",8994,1795,2,1,0)
PART^1^30^^2
"KRN",8994,1795,2,1,1,0)
^8994.021^1^1^3050907^^
"KRN",8994,1795,2,1,1,1,0)
The partial match restriction.
"KRN",8994,1795,2,2,0)
FLAGS^1^^^3
"KRN",8994,1795,2,2,1,0)
^^23^23^3060622^
"KRN",8994,1795,2,2,1,1,0)
Flags that control the execution (can be combined):
"KRN",8994,1795,2,2,1,2,0)
 
"KRN",8994,1795,2,2,1,3,0)
  A  Exclude active codes
"KRN",8994,1795,2,2,1,4,0)
 
"KRN",8994,1795,2,2,1,5,0)
  B  Backwards. Traverses the index in the opposite
"KRN",8994,1795,2,2,1,6,0)
     direction of normal traversal
"KRN",8994,1795,2,2,1,7,0)
 
"KRN",8994,1795,2,2,1,8,0)
  D  Full search by description
"KRN",8994,1795,2,2,1,9,0)
 
"KRN",8994,1795,2,2,1,10,0)
  F  Exclude codes applicable to females only
"KRN",8994,1795,2,2,1,11,0)
 
"KRN",8994,1795,2,2,1,12,0)
  I  Exclude inactive codes
"KRN",8994,1795,2,2,1,13,0)
 
"KRN",8994,1795,2,2,1,14,0)
  K  Search in description keywords
"KRN",8994,1795,2,2,1,15,0)
 
"KRN",8994,1795,2,2,1,16,0)
  M  Exclude codes applicable to males only
"KRN",8994,1795,2,2,1,17,0)
 
"KRN",8994,1795,2,2,1,18,0)
  0  Return operation/procedure codes from the ICD 
"KRN",8994,1795,2,2,1,19,0)
     OPERATION/PROCEDURE file (#80.1) instead of 
"KRN",8994,1795,2,2,1,20,0)
     diagnosis codes from the ICD DIAGNOSIS file (#80)
"KRN",8994,1795,2,2,1,21,0)
 
"KRN",8994,1795,2,2,1,22,0)
  P  Exclude codes that are not acceptable
"KRN",8994,1795,2,2,1,23,0)
     as primary diagnoses
"KRN",8994,1795,2,3,0)
NUMBER^1^^^4
"KRN",8994,1795,2,3,1,0)
^8994.021^2^2^3050907^^
"KRN",8994,1795,2,3,1,1,0)
Maximum number of entries to return. A value of "*" or no value in this 
"KRN",8994,1795,2,3,1,2,0)
parameter designates all entries.
"KRN",8994,1795,2,4,0)
FROM^1^^^5
"KRN",8994,1795,2,4,1,0)
^8994.021^13^13^3050907^^^^
"KRN",8994,1795,2,4,1,1,0)
The index entry(s) from which to begin the list
"KRN",8994,1795,2,4,1,2,0)
   ^01: FromName
"KRN",8994,1795,2,4,1,3,0)
   ^02: FromIEN
"KRN",8994,1795,2,4,1,4,0)
  
"KRN",8994,1795,2,4,1,5,0)
For example, a FROM value of "18" would list entries following 18. You can
"KRN",8994,1795,2,4,1,6,0)
use the 2-nd and 3-rd "^"- pieces of the Results[0] to continue the
"KRN",8994,1795,2,4,1,7,0)
listing in the subsequent procedure calls.
"KRN",8994,1795,2,4,1,8,0)
  
"KRN",8994,1795,2,4,1,9,0)
NOTE: The FROM value itself is not included in the
"KRN",8994,1795,2,4,1,10,0)
      resulting list.
"KRN",8994,1795,2,4,1,11,0)
  
"KRN",8994,1795,2,4,1,12,0)
See description of the LIST^DIC for more details about the PART, NUMBER 
"KRN",8994,1795,2,4,1,13,0)
and FROM parameters.
"KRN",8994,1795,2,5,0)
DATE^1^^^1
"KRN",8994,1795,2,5,1,0)
^8994.021^1^1^3060622^^^^
"KRN",8994,1795,2,5,1,1,0)
Date for the code set versioning.
"KRN",8994,1795,2,"B","DATE",5)

"KRN",8994,1795,2,"B","FLAGS",2)

"KRN",8994,1795,2,"B","FROM",4)

"KRN",8994,1795,2,"B","NUMBER",3)

"KRN",8994,1795,2,"B","PART",1)

"KRN",8994,1795,2,"PARAMSEQ",1,5)

"KRN",8994,1795,2,"PARAMSEQ",2,1)

"KRN",8994,1795,2,"PARAMSEQ",3,2)

"KRN",8994,1795,2,"PARAMSEQ",4,3)

"KRN",8994,1795,2,"PARAMSEQ",5,4)

"KRN",8994,1795,3,0)
^8994.03^32^32^3060622^^
"KRN",8994,1795,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that 
"KRN",8994,1795,3,2,0)
an error occurred during the execution of the remote procedure. In this 
"KRN",8994,1795,3,3,0)
case, the second piece of the Results[0] will contain number of the error 
"KRN",8994,1795,3,4,0)
descriptors returned in the subsequent nodes of the Results array:
"KRN",8994,1795,3,5,0)
  
"KRN",8994,1795,3,6,0)
  Results[0]            Result Descriptor
"KRN",8994,1795,3,7,0)
                          ^01: The last error code
"KRN",8994,1795,3,8,0)
                          ^02: Number of the error descriptors
"KRN",8994,1795,3,9,0)
   
"KRN",8994,1795,3,10,0)
  Results[i]            Error Descriptor
"KRN",8994,1795,3,11,0)
                          ^01: Error code
"KRN",8994,1795,3,12,0)
                          ^02: Message
"KRN",8994,1795,3,13,0)
                          ^03: Place of the error
"KRN",8994,1795,3,14,0)
 
"KRN",8994,1795,3,15,0)
Otherwise, number of ICD-9 codes and the value of the FROM parameter for
"KRN",8994,1795,3,16,0)
the next procedure call are returned in the Results[0] and the subsequent
"KRN",8994,1795,3,17,0)
nodes of the global array contain the codes.
"KRN",8994,1795,3,18,0)
  
"KRN",8994,1795,3,19,0)
  Results[0]          Result Descriptor
"KRN",8994,1795,3,20,0)
                        ^01: Number of codes
"KRN",8994,1795,3,21,0)
                        ^02: FromName
"KRN",8994,1795,3,22,0)
                        ^03: FromIEN
"KRN",8994,1795,3,23,0)
 
"KRN",8994,1795,3,24,0)
  Results[i]          ICD-9
"KRN",8994,1795,3,25,0)
                        ^01: IEN
"KRN",8994,1795,3,26,0)
                        ^02: Diagnosis or operation/procedure
"KRN",8994,1795,3,27,0)
                        ^03: Code
"KRN",8994,1795,3,28,0)
                        ^04: Use only with Sex
"KRN",8994,1795,3,29,0)
                        ^05: Inactive (""/1)
"KRN",8994,1795,3,30,0)
                        ^06: Inactivation Date (FileMan)
"KRN",8994,1795,3,31,0)
 
"KRN",8994,1795,3,32,0)
  Results[i+1]        ICD-9 Description
"KRN",8994,1810,-1)
0^1
"KRN",8994,1810,0)
ROR LIST PATIENTS^PTLIST^RORRP019^4^R^^^1^1
"KRN",8994,1810,1,0)
^8994.01^3^3^3060526^^^^
"KRN",8994,1810,1,1,0)
The ROR LIST PATIENTS remote procedure returns either a list patients from
"KRN",8994,1810,1,2,0)
the PATIENT file (#2) or a list of registry patients who conform the
"KRN",8994,1810,1,3,0)
provided criteria.
"KRN",8994,1810,2,0)
^8994.02A^6^6
"KRN",8994,1810,2,1,0)
REGIEN^1^^1^1
"KRN",8994,1810,2,1,1,0)
^8994.021^2^2^3030320^^
"KRN",8994,1810,2,1,1,1,0)
The REGIEN parameter should contain a valid registry IEN (IEN of the
"KRN",8994,1810,2,1,1,2,0)
registry parameters record in the ROR REGISTRY PARAMETERS file #798.1).
"KRN",8994,1810,2,2,0)
DATE^1^^^2
"KRN",8994,1810,2,2,1,0)
^^3^3^3050804^
"KRN",8994,1810,2,2,1,1,0)
Patients who were confirmed in the registry before the date defined by the
"KRN",8994,1810,2,2,1,2,0)
DATE parameter will be skipped by the query (if the FLAGS parameter
"KRN",8994,1810,2,2,1,3,0)
contains the 'C' flag).
"KRN",8994,1810,2,3,0)
PART^1^30^^3
"KRN",8994,1810,2,3,1,0)
^^12^12^3060526^
"KRN",8994,1810,2,3,1,1,0)
The PART parameter defines the search pattern. It can contain last 4 
"KRN",8994,1810,2,3,1,2,0)
digits of the patient's SSN, the first letter of the patient's last name
"KRN",8994,1810,2,3,1,3,0)
and last four digits of the SSN, the full SSN, the beginning of the
"KRN",8994,1810,2,3,1,4,0)
patient name, or the '#' character followed by the coded SSN (11 digits
"KRN",8994,1810,2,3,1,5,0)
and optional 'P' character).
"KRN",8994,1810,2,3,1,6,0)
                                      
"KRN",8994,1810,2,3,1,7,0)
If the 'P' flag is defined (see the FLAGS parameter), the PART parameter
"KRN",8994,1810,2,3,1,8,0)
should contain either the beginning of the patient name or an empty
"KRN",8994,1810,2,3,1,9,0)
string.
"KRN",8994,1810,2,3,1,10,0)
 
"KRN",8994,1810,2,3,1,11,0)
If this parameter is a number preceded by the '`' then a list containing
"KRN",8994,1810,2,3,1,12,0)
only the patient with this IEN is compiled.
"KRN",8994,1810,2,4,0)
FLAGS^1^^^4
"KRN",8994,1810,2,4,1,0)
^^17^17^3050512^
"KRN",8994,1810,2,4,1,1,0)
Flags that control the execution (can be combined):
"KRN",8994,1810,2,4,1,2,0)
  
"KRN",8994,1810,2,4,1,3,0)
  2  Search in the PATIENT file. By default, the     
"KRN",8994,1810,2,4,1,4,0)
     ROR LOCAL REGISTRY and ROR PATIENT files are
"KRN",8994,1810,2,4,1,5,0)
     queried. This flag overrides the 'D' and 'P'
"KRN",8994,1810,2,4,1,6,0)
     flags.
"KRN",8994,1810,2,4,1,7,0)
 
"KRN",8994,1810,2,4,1,8,0)
  B  Backwards. Traverses the index in the opposite
"KRN",8994,1810,2,4,1,9,0)
     direction of normal traversal.
"KRN",8994,1810,2,4,1,10,0)
 
"KRN",8994,1810,2,4,1,11,0)
  D  Ignore those patients who were added to the
"KRN",8994,1810,2,4,1,12,0)
     registry before the date defined by the DATE
"KRN",8994,1810,2,4,1,13,0)
     parameter.
"KRN",8994,1810,2,4,1,14,0)
 
"KRN",8994,1810,2,4,1,15,0)
  O  Return values of the optional fields
"KRN",8994,1810,2,4,1,16,0)
 
"KRN",8994,1810,2,4,1,17,0)
  P  Include only pending patients
"KRN",8994,1810,2,5,0)
NUMBER^1^^^5
"KRN",8994,1810,2,5,1,0)
^^2^2^3030320^
"KRN",8994,1810,2,5,1,1,0)
Maximum number of entries to return. A value of "*" or no value in this 
"KRN",8994,1810,2,5,1,2,0)
parameter designates all entries that conform the criteria.
"KRN",8994,1810,2,6,0)
FROM^1^^^6
"KRN",8994,1810,2,6,1,0)
^8994.021^9^9^3060526^^^^
"KRN",8994,1810,2,6,1,1,0)
The index entry(s) from which to begin the list. Use the pieces of the
"KRN",8994,1810,2,6,1,2,0)
Results[0] (starting from the second one) to continue the listing in the
"KRN",8994,1810,2,6,1,3,0)
subsequent procedure calls.
"KRN",8994,1810,2,6,1,4,0)
 
"KRN",8994,1810,2,6,1,5,0)
NOTE: The FROM value itself is not included in the
"KRN",8994,1810,2,6,1,6,0)
      resulting list.
"KRN",8994,1810,2,6,1,7,0)
 
"KRN",8994,1810,2,6,1,8,0)
See description of the LIST^DIC for more details about the PART, NUMBER
"KRN",8994,1810,2,6,1,9,0)
and FROM parameters.
"KRN",8994,1810,2,"B","DATE",2)

"KRN",8994,1810,2,"B","FLAGS",4)

"KRN",8994,1810,2,"B","FROM",6)

"KRN",8994,1810,2,"B","NUMBER",5)

"KRN",8994,1810,2,"B","PART",3)

"KRN",8994,1810,2,"B","REGIEN",1)

"KRN",8994,1810,2,"PARAMSEQ",1,1)

"KRN",8994,1810,2,"PARAMSEQ",2,2)

"KRN",8994,1810,2,"PARAMSEQ",3,3)

"KRN",8994,1810,2,"PARAMSEQ",4,4)

"KRN",8994,1810,2,"PARAMSEQ",5,5)

"KRN",8994,1810,2,"PARAMSEQ",6,6)

"KRN",8994,1810,3,0)
^8994.03^109^109^3060526^^^
"KRN",8994,1810,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that 
"KRN",8994,1810,3,2,0)
an error occurred during the execution of the remote procedure. In this 
"KRN",8994,1810,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,1810,3,4,0)
descriptors returned in the subsequent nodes of the Results array:
"KRN",8994,1810,3,5,0)
   
"KRN",8994,1810,3,6,0)
   Results[0]            Result Descriptor
"KRN",8994,1810,3,7,0)
                           ^01: The last error code
"KRN",8994,1810,3,8,0)
                           ^02: Number of the error descriptors
"KRN",8994,1810,3,9,0)
    
"KRN",8994,1810,3,10,0)
   Results[i]            Error Descriptor
"KRN",8994,1810,3,11,0)
                           ^01: Error code
"KRN",8994,1810,3,12,0)
                           ^02: Message
"KRN",8994,1810,3,13,0)
                           ^03: Place of the error
"KRN",8994,1810,3,14,0)
 
"KRN",8994,1810,3,15,0)
Otherwise, number of patients and the value of the FROM parameter for the
"KRN",8994,1810,3,16,0)
next procedure call are returned in the Results[0] and the subsequent
"KRN",8994,1810,3,17,0)
nodes of the Results array contain the patients.
"KRN",8994,1810,3,18,0)
  
"KRN",8994,1810,3,19,0)
  Results[0]            Result Descriptor
"KRN",8994,1810,3,20,0)
                          ^01: Number of patients
"KRN",8994,1810,3,21,0)
                          ^02: Values that comprise the FROM parameter
"KRN",8994,1810,3,22,0)
                          ^nn: for the subsequent call of the procedure
"KRN",8994,1810,3,23,0)
 
"KRN",8994,1810,3,24,0)
  Results[i]            Patient
"KRN",8994,1810,3,25,0)
                          ^01: IEN (DFN)
"KRN",8994,1810,3,26,0)
                          ^02: Name
"KRN",8994,1810,3,27,0)
                          ^03: Date of Birth (FileMan)
"KRN",8994,1810,3,28,0)
                          ^04: SSN
"KRN",8994,1810,3,29,0)
                          ^05: Date of Death (FileMan)
"KRN",8994,1810,3,30,0)
                          ^06: Sex (internal)
"KRN",8994,1810,3,31,0)
 
"KRN",8994,1810,3,32,0)
  Results[i+1]          Optional Fields (these nodes are created only
"KRN",8994,1810,3,33,0)
                        if the FLAGS parameter contains the 'O' flag)
"KRN",8994,1810,3,34,0)
                          ^01: "O" (letter O)
"KRN",8994,1810,3,35,0)
                          ^02: Date Entered (FileMan)
"KRN",8994,1810,3,36,0)
                          ^03: Status (internal)
"KRN",8994,1810,3,37,0)
                          ^04: Active (0/1)
"KRN",8994,1810,3,38,0)
                          ^05: Do not Send (0/1)
"KRN",8994,1810,3,39,0)
                          ^06: Data Acknowledged Until (FileMan)
"KRN",8994,1810,3,40,0)
                          ^07: Data Extracted Until (FileMan)
"KRN",8994,1810,3,41,0)
                          ^08: Date Selected (FileMan)
"KRN",8994,1810,3,42,0)
                          ^09: Date Confirmed (FileMan)
"KRN",8994,1810,3,43,0)
                          ^10: Location Selected
"KRN",8994,1810,3,44,0)
                          ^11: Selection Rule Description
"KRN",8994,1810,3,45,0)
                          ^12: reserved
"KRN",8994,1810,3,46,0)
                          ^13: reserved
"KRN",8994,1810,3,47,0)
                          ^14: Action Flags (see the description below)
"KRN",8994,1810,3,48,0)
 
"KRN",8994,1810,3,49,0)
                        The Status field can have the following values
"KRN",8994,1810,3,50,0)
                        (see description of the STATUS field of the
"KRN",8994,1810,3,51,0)
                        ROR REGISTRY RECORD file for more details):
"KRN",8994,1810,3,52,0)
                            0  Active
"KRN",8994,1810,3,53,0)
                            4  Pending
"KRN",8994,1810,3,54,0)
                            5  Deleted
"KRN",8994,1810,3,55,0)
 
"KRN",8994,1810,3,56,0)
                        The Action Flags field indicates the actions that
"KRN",8994,1810,3,57,0)
                        can be performed on the patient's record:
"KRN",8994,1810,3,58,0)
                            C  CDC form can be edited/printed
"KRN",8994,1810,3,59,0)
                            D  The record can be deleted
"KRN",8994,1810,3,60,0)
                            E  The record can be edited
"KRN",8994,1810,3,61,0)
                            O  Read-only mode
"KRN",8994,1810,3,62,0)
 
"KRN",8994,1810,3,63,0)
Example #1 (search the PATIENT file):
"KRN",8994,1810,3,64,0)
 
"KRN",8994,1810,3,65,0)
  with RPCBroker do
"KRN",8994,1810,3,66,0)
    begin
"KRN",8994,1810,3,67,0)
      Param[0].Value := '2';      // Registry IEN
"KRN",8994,1810,3,68,0)
      Param[0].PType := literal;
"KRN",8994,1810,3,69,0)
      Param[1].Value := '';       // Date
"KRN",8994,1810,3,70,0)
      Param[1].PType := literal;
"KRN",8994,1810,3,71,0)
      Param[2].Value := '3456';   // Last four digits of the SSN
"KRN",8994,1810,3,72,0)
      Param[2].PType := literal;
"KRN",8994,1810,3,73,0)
      Param[3].Value := '2';      // Flags
"KRN",8994,1810,3,74,0)
      Param[3].PType := literal;
"KRN",8994,1810,3,75,0)
      Call;
"KRN",8994,1810,3,76,0)
    end;
"KRN",8994,1810,3,77,0)
 
"KRN",8994,1810,3,78,0)
  The Results array will contain something like this:
"KRN",8994,1810,3,79,0)
 
"KRN",8994,1810,3,80,0)
  Results[0] = '1'
"KRN",8994,1810,3,81,0)
  Results[1] = '162^ATTENDING,PATIENT^3000617^321233456^^M'
"KRN",8994,1810,3,82,0)
 
"KRN",8994,1810,3,83,0)
Example 2 (query the registry):
"KRN",8994,1810,3,84,0)
 
"KRN",8994,1810,3,85,0)
  with RPCBroker do
"KRN",8994,1810,3,86,0)
    begin
"KRN",8994,1810,3,87,0)
      Param[0].Value := '2';      // Registry IEN
"KRN",8994,1810,3,88,0)
      Param[0].PType := literal;
"KRN",8994,1810,3,89,0)
      Param[1].Value := '';       // Date
"KRN",8994,1810,3,90,0)
      Param[1].PType := literal;
"KRN",8994,1810,3,91,0)
      Param[2].Value := 'B';      // Partial match
"KRN",8994,1810,3,92,0)
      Param[2].PType := literal;
"KRN",8994,1810,3,93,0)
      Param[3].Value := 'O';      // Flags
"KRN",8994,1810,3,94,0)
      Param[3].PType := literal;
"KRN",8994,1810,3,95,0)
      Param[4].Value := '3';      // Number
"KRN",8994,1810,3,96,0)
      Param[4].PType := literal;
"KRN",8994,1810,3,97,0)
      Call;
"KRN",8994,1810,3,98,0)
    end;
"KRN",8994,1810,3,99,0)
 
"KRN",8994,1810,3,100,0)
  The Results array will contain something like this (see the Results[0]-
"KRN",8994,1810,3,101,0)
  not all records have been loaded):
"KRN",8994,1810,3,102,0)
 
"KRN",8994,1810,3,103,0)
  Results[0] = '2'
"KRN",8994,1810,3,104,0)
  Results[1] = '38^BARNEY,PURPLE^2450000^332456754^^M'
"KRN",8994,1810,3,105,0)
  Results[2] = 'O^3040729.151905^3^1^0^3041027^3041222^3040725^3040729
"KRN",8994,1810,3,106,0)
               ^PALO ALTO^HepC Ab test positive^^^CDE'
"KRN",8994,1810,3,107,0)
  Results[3] = '127^BROWNING,CHARLES^2671227^601122767P^^M'
"KRN",8994,1810,3,108,0)
  Results[4] = 'O^3030716.152528^3^1^0^3040929^3040929^3030921^^^ICD-9 
"KRN",8994,1810,3,109,0)
               codes in inpatient file^^^CDE'
"KRN",8994,1853,-1)
0^2
"KRN",8994,1853,0)
ROR PATIENT GET DATA^GETPTDAT^RORRP021^2^R^^^1^1
"KRN",8994,1853,1,0)
^8994.01^2^2^3060511^^^^
"KRN",8994,1853,1,1,0)
The ROR GET PATIENT DATA remote procedure returns patient's data from the 
"KRN",8994,1853,1,2,0)
PATIENT file and (optionally) the registry record.
"KRN",8994,1853,2,0)
^8994.02A^3^3
"KRN",8994,1853,2,1,0)
PATIEN^1^^1^1
"KRN",8994,1853,2,1,1,0)
^^1^1^3030613^
"KRN",8994,1853,2,1,1,1,0)
A valid patient IEN (DFN) should be assigned to the PATIEN parameter.
"KRN",8994,1853,2,2,0)
FLAGS^1^^^2
"KRN",8994,1853,2,2,1,0)
^8994.021^10^10^3050819^^
"KRN",8994,1853,2,2,1,1,0)
Flags that control the execution (can be combined):
"KRN",8994,1853,2,2,1,2,0)
 
"KRN",8994,1853,2,2,1,3,0)
  A  Load the patient's address
"KRN",8994,1853,2,2,1,4,0)
  E  Load the ethnicity information
"KRN",8994,1853,2,2,1,5,0)
  L  Load values of the registry local fields
"KRN",8994,1853,2,2,1,6,0)
  R  Load the race information
"KRN",8994,1853,2,2,1,7,0)
  S  Load the patient's selection rules
"KRN",8994,1853,2,2,1,8,0)
 
"KRN",8994,1853,2,2,1,9,0)
The "L" and "S" flags require the REGIEN parameter. Otherwise, they are
"KRN",8994,1853,2,2,1,10,0)
ignored.
"KRN",8994,1853,2,3,0)
REGIEN^1^^^3
"KRN",8994,1853,2,3,1,0)
^8994.021^7^7^3060511^^^^
"KRN",8994,1853,2,3,1,1,0)
The REGIEN parameter should contain a valid registry IEN (IEN of the
"KRN",8994,1853,2,3,1,2,0)
registry parameters record in the ROR REGISTRY PARAMETERS file #798.1).
"KRN",8994,1853,2,3,1,3,0)
 
"KRN",8994,1853,2,3,1,4,0)
If this parameter is defined and its value is greater than 0 then the
"KRN",8994,1853,2,3,1,5,0)
"PRD" segment with the basic patient's registry data will be returned.
"KRN",8994,1853,2,3,1,6,0)
If the patient is not in the registry then an empty "PRD" segment will
"KRN",8994,1853,2,3,1,7,0)
be returned anyway.
"KRN",8994,1853,2,"B","FLAGS",2)

"KRN",8994,1853,2,"B","PATIEN",1)

"KRN",8994,1853,2,"B","REGIEN",3)

"KRN",8994,1853,2,"PARAMSEQ",1,1)

"KRN",8994,1853,2,"PARAMSEQ",2,2)

"KRN",8994,1853,2,"PARAMSEQ",3,3)

"KRN",8994,1853,3,0)
^8994.03^133^133^3060511^^^
"KRN",8994,1853,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that 
"KRN",8994,1853,3,2,0)
an error occurred during the execution of the remote procedure. In this 
"KRN",8994,1853,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,1853,3,4,0)
descriptors returned in the subsequent nodes of the Results array:
"KRN",8994,1853,3,5,0)
  
"KRN",8994,1853,3,6,0)
  Results[0]            Result Descriptor
"KRN",8994,1853,3,7,0)
                          ^01: The last error code
"KRN",8994,1853,3,8,0)
                          ^02: Number of the error descriptors
"KRN",8994,1853,3,9,0)
   
"KRN",8994,1853,3,10,0)
  Results[i]            Error Descriptor
"KRN",8994,1853,3,11,0)
                          ^01: Error code
"KRN",8994,1853,3,12,0)
                          ^02: Message
"KRN",8994,1853,3,13,0)
                          ^03: Place of the error
"KRN",8994,1853,3,14,0)
 
"KRN",8994,1853,3,15,0)
Otherwise, zero is returned in the Results[0] and subsequent nodes 
"KRN",8994,1853,3,16,0)
contain the patient's data.
"KRN",8994,1853,3,17,0)
 
"KRN",8994,1853,3,18,0)
  Results[0]            0
"KRN",8994,1853,3,19,0)
 
"KRN",8994,1853,3,20,0)
  Results[i]            Demographic Information
"KRN",8994,1853,3,21,0)
                          ^01: "DEM"
"KRN",8994,1853,3,22,0)
                          ^02: ""
"KRN",8994,1853,3,23,0)
                          ^03: Patient IEN (DFN)
"KRN",8994,1853,3,24,0)
                          ^04: Patient Name
"KRN",8994,1853,3,25,0)
                          ^05: Date of Birth (FileMan)
"KRN",8994,1853,3,26,0)
                          ^06: SSN
"KRN",8994,1853,3,27,0)
                          ^07: Date of Death (FileMan)
"KRN",8994,1853,3,28,0)
                          ^08: Sex (F/M)
"KRN",8994,1853,3,29,0)
 
"KRN",8994,1853,3,30,0)
  Results[i]            Patient's Address
"KRN",8994,1853,3,31,0)
                          ^01: "ADR"
"KRN",8994,1853,3,32,0)
                          ^02: ""
"KRN",8994,1853,3,33,0)
                          ^03: Address (1)
"KRN",8994,1853,3,34,0)
                          ^04: Address (2)
"KRN",8994,1853,3,35,0)
                          ^05: Address (3)
"KRN",8994,1853,3,36,0)
                          ^06: City
"KRN",8994,1853,3,37,0)
                          ^07: State (IEN)
"KRN",8994,1853,3,38,0)
                          ^08: State (Name)
"KRN",8994,1853,3,39,0)
                          ^09: ZIP
"KRN",8994,1853,3,40,0)
                          ^10: ZIP+4
"KRN",8994,1853,3,41,0)
                          ^11: County (IEN)
"KRN",8994,1853,3,42,0)
                          ^12: County (Name)
"KRN",8994,1853,3,43,0)
                          ^13: Home Phone
"KRN",8994,1853,3,44,0)
 
"KRN",8994,1853,3,45,0)
  Results[i]            Race Information
"KRN",8994,1853,3,46,0)
                          ^01: "RCE"
"KRN",8994,1853,3,47,0)
                          ^02: Race IEN
"KRN",8994,1853,3,48,0)
                          ^03: Race HL7 Value
"KRN",8994,1853,3,49,0)
                          ^04: Race
"KRN",8994,1853,3,50,0)
                          ^05: Collection Method HL7 Value
"KRN",8994,1853,3,51,0)
                          ^06: Collection Method
"KRN",8994,1853,3,52,0)
 
"KRN",8994,1853,3,53,0)
                        Race HL7 Values
"KRN",8994,1853,3,54,0)
                          1002-5  American Indian or Alaska Native
"KRN",8994,1853,3,55,0)
                          2028-9  Asian
"KRN",8994,1853,3,56,0)
                          2054-5  Black or African American
"KRN",8994,1853,3,57,0)
                          0000-0  Declined to Answer
"KRN",8994,1853,3,58,0)
                          2076-8  Native Hawaiian or Pacific Islander
"KRN",8994,1853,3,59,0)
                          9999-4  Unknown by Patient
"KRN",8994,1853,3,60,0)
                          2106-3  White
"KRN",8994,1853,3,61,0)
 
"KRN",8994,1853,3,62,0)
                        Collection Method HL7 Values
"KRN",8994,1853,3,63,0)
                          OBS     Observer
"KRN",8994,1853,3,64,0)
                          PRX     Proxy
"KRN",8994,1853,3,65,0)
                          SLF     Self Identification
"KRN",8994,1853,3,66,0)
                          UNK     Unknown
"KRN",8994,1853,3,67,0)
 
"KRN",8994,1853,3,68,0)
  Results[i]            Ethnicity Information
"KRN",8994,1853,3,69,0)
                          ^01: "ETN"
"KRN",8994,1853,3,70,0)
                          ^02: Ethnicity IEN
"KRN",8994,1853,3,71,0)
                          ^03: Ethnicity HL7 Value
"KRN",8994,1853,3,72,0)
                          ^04: Ethnicity
"KRN",8994,1853,3,73,0)
                          ^05: Collection Method HL7 value
"KRN",8994,1853,3,74,0)
                          ^06: Collection Method
"KRN",8994,1853,3,75,0)
 
"KRN",8994,1853,3,76,0)
                        Ethnicity HL7 Values
"KRN",8994,1853,3,77,0)
                          0000-0  Declined to Answer
"KRN",8994,1853,3,78,0)
                          2135-2  Hispanic or Latino
"KRN",8994,1853,3,79,0)
                          2186-5  Not Hispanic or Latino
"KRN",8994,1853,3,80,0)
                          9999-4  Unknown by Patient
"KRN",8994,1853,3,81,0)
 
"KRN",8994,1853,3,82,0)
  Results[i]            Patient's Registry Data
"KRN",8994,1853,3,83,0)
                          ^01: "PRD"
"KRN",8994,1853,3,84,0)
                          ^02: ""
"KRN",8994,1853,3,85,0)
                          ^03: Date Entered (FileMan)
"KRN",8994,1853,3,86,0)
                          ^04: Status Code (Field 3, File #798)
"KRN",8994,1853,3,87,0)
                          ^05: Active (0/1)
"KRN",8994,1853,3,88,0)
                          ^06: Do not Send (0/1)
"KRN",8994,1853,3,89,0)
                          ^07: Data Acknowledged Until (FileMan)
"KRN",8994,1853,3,90,0)
                          ^08: Data Extracted Until (FileMan)
"KRN",8994,1853,3,91,0)
                          ^09: Date Selected (FileMan)
"KRN",8994,1853,3,92,0)
                          ^10: Date Confirmed (FileMan)
"KRN",8994,1853,3,93,0)
                          ^11: Location Selected (Institution Name)
"KRN",8994,1853,3,94,0)
                          ^12: Selection Rule Description
"KRN",8994,1853,3,95,0)
                          ^13: reserved
"KRN",8994,1853,3,96,0)
                          ^14: reserved
"KRN",8994,1853,3,97,0)
                          ^15: Action Flags (see the description below)
"KRN",8994,1853,3,98,0)
 
"KRN",8994,1853,3,99,0)
                        The Status field can have the following values
"KRN",8994,1853,3,100,0)
                        (see description of the STATUS field of the
"KRN",8994,1853,3,101,0)
                        ROR REGISTRY RECORD file for more details):
"KRN",8994,1853,3,102,0)
                            0  Confirmed
"KRN",8994,1853,3,103,0)
                            4  Pending
"KRN",8994,1853,3,104,0)
                            5  Deleted
"KRN",8994,1853,3,105,0)
 
"KRN",8994,1853,3,106,0)
                        The Action Flags field indicates the actions that
"KRN",8994,1853,3,107,0)
                        can be performed on the patient's record:
"KRN",8994,1853,3,108,0)
                            C  CDC form can be edited/printed
"KRN",8994,1853,3,109,0)
                            D  The record can be deleted
"KRN",8994,1853,3,110,0)
                            E  The record can be edited
"KRN",8994,1853,3,111,0)
                            O  Read-only mode
"KRN",8994,1853,3,112,0)
 
"KRN",8994,1853,3,113,0)
  Results[i]            Local field data
"KRN",8994,1853,3,114,0)
                          ^O1: "LFV"
"KRN",8994,1853,3,115,0)
                          ^02: IEN in the LOCAL FIELD multiple
"KRN",8994,1853,3,116,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,1853,3,117,0)
                          ^03: Field Definition IEN
"KRN",8994,1853,3,118,0)
                               (in the ROR LOCAL FIELD file)
"KRN",8994,1853,3,119,0)
                          ^04: Field Name
"KRN",8994,1853,3,120,0)
                          ^05: Date (FileMan)
"KRN",8994,1853,3,121,0)
                          ^06: Comment
"KRN",8994,1853,3,122,0)
 
"KRN",8994,1853,3,123,0)
  Results[i]            Selection Rule
"KRN",8994,1853,3,124,0)
                          ^01: "PSR"
"KRN",8994,1853,3,125,0)
                          ^02: IEN in the SELECTION RULE multiple
"KRN",8994,1853,3,126,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,1853,3,127,0)
                          ^03: Rule Definition IEN
"KRN",8994,1853,3,128,0)
                               (in the ROR SELECTION RULE file)
"KRN",8994,1853,3,129,0)
                          ^04: Name of the Rule
"KRN",8994,1853,3,130,0)
                          ^05: Date (FileMan)
"KRN",8994,1853,3,131,0)
                          ^06: Location IEN  (Institution IEN)
"KRN",8994,1853,3,132,0)
                          ^07: Location Name (Institution Name)
"KRN",8994,1853,3,133,0)
                          ^08: Short Description
"KRN",8994,1861,-1)
0^3
"KRN",8994,1861,0)
RORICR PATIENT LOAD^LOAD^RORRP033^4^R^^^1^1
"KRN",8994,1861,1,0)
^8994.01^2^2^3060511^^^^
"KRN",8994,1861,1,1,0)
The RORICR PATIENT LOAD remote procedure loads the patient's data from the
"KRN",8994,1861,1,2,0)
ICR registry and prepares the record for editing.
"KRN",8994,1861,2,0)
^8994.02A^3^3
"KRN",8994,1861,2,1,0)
REGIEN^1^^1^1
"KRN",8994,1861,2,1,1,0)
^8994.021^2^2^3030703^^^
"KRN",8994,1861,2,1,1,1,0)
The REGIEN parameter should contain a valid registry IEN (IEN of the
"KRN",8994,1861,2,1,1,2,0)
registry parameters record in the ROR REGISTRY PARAMETERS file #798.1).
"KRN",8994,1861,2,2,0)
PATIEN^1^^1^2
"KRN",8994,1861,2,2,1,0)
^8994.021^1^1^3030715^^^^
"KRN",8994,1861,2,2,1,1,0)
A valid patient IEN (DFN) should be assigned to the PATIEN parameter.
"KRN",8994,1861,2,3,0)
LOCK^1^^^3
"KRN",8994,1861,2,3,1,0)
^8994.021^2^2^3060511^^^
"KRN",8994,1861,2,3,1,1,0)
If this parameter is defined and not zero then the RPC will try to lock
"KRN",8994,1861,2,3,1,2,0)
the registry record before loading the data and will leave it locked.
"KRN",8994,1861,2,"B","LOCK",3)

"KRN",8994,1861,2,"B","PATIEN",2)

"KRN",8994,1861,2,"B","REGIEN",1)

"KRN",8994,1861,2,"PARAMSEQ",1,1)

"KRN",8994,1861,2,"PARAMSEQ",2,2)

"KRN",8994,1861,2,"PARAMSEQ",3,3)

"KRN",8994,1861,3,0)
^8994.03^143^143^3060511^^
"KRN",8994,1861,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that
"KRN",8994,1861,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,1861,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,1861,3,4,0)
descriptors returned in the subsequent nodes of the Results array:
"KRN",8994,1861,3,5,0)
   
"KRN",8994,1861,3,6,0)
  Results[0]            Result Descriptor
"KRN",8994,1861,3,7,0)
                          ^01: The last error code
"KRN",8994,1861,3,8,0)
                          ^02: Number of the error descriptors
"KRN",8994,1861,3,9,0)
                                                                      
"KRN",8994,1861,3,10,0)
  Results[i]            Error Descriptor
"KRN",8994,1861,3,11,0)
                          ^01: Error code
"KRN",8994,1861,3,12,0)
                          ^02: Message
"KRN",8994,1861,3,13,0)
                          ^03: Place of the error
"KRN",8994,1861,3,14,0)
 
"KRN",8994,1861,3,15,0)
If locking was requested (see the LOCK parameter) and the record could not
"KRN",8994,1861,3,16,0)
be locked then the first "^"-piece of the Results[0] would be greater than
"KRN",8994,1861,3,17,0)
0. The Results[0] would contain the lock descriptor and subsequent nodes
"KRN",8994,1861,3,18,0)
of the global array would contain the data (see below). The lock 
"KRN",8994,1861,3,19,0)
descriptor contains information about the process, which owns the most 
"KRN",8994,1861,3,20,0)
recent lock of the record. The "O" flag (read-only) would also be added to
"KRN",8994,1861,3,21,0)
the 15th field of the "PRD" segment.
"KRN",8994,1861,3,22,0)
 
"KRN",8994,1861,3,23,0)
  Results[0]            Lock Descriptor
"KRN",8994,1861,3,24,0)
                          ^01: Date/Time (FileMan)
"KRN",8994,1861,3,25,0)
                          ^02: User/Process name
"KRN",8994,1861,3,26,0)
                          ^03: User IEN (DUZ)
"KRN",8994,1861,3,27,0)
                          ^04: $JOB
"KRN",8994,1861,3,28,0)
                          ^05: Task number
"KRN",8994,1861,3,29,0)
 
"KRN",8994,1861,3,30,0)
THE DATA ARE LOADED ONLY FOR VIEWING PURPOSES (READ-ONLY)!
"KRN",8994,1861,3,31,0)
 
"KRN",8994,1861,3,32,0)
Otherwise, zero is returned in the Results[0] and the subsequent nodes of
"KRN",8994,1861,3,33,0)
the array contain the data.
"KRN",8994,1861,3,34,0)
 
"KRN",8994,1861,3,35,0)
  Results[0]            0
"KRN",8994,1861,3,36,0)
 
"KRN",8994,1861,3,37,0)
  Results[i]            Demographic Information
"KRN",8994,1861,3,38,0)
                          ^01: "DEM"
"KRN",8994,1861,3,39,0)
                          ^02: ""
"KRN",8994,1861,3,40,0)
                          ^03: Patient IEN (DFN)
"KRN",8994,1861,3,41,0)
                          ^04: Patient Name
"KRN",8994,1861,3,42,0)
                          ^05: Date of Birth (FileMan)
"KRN",8994,1861,3,43,0)
                          ^06: SSN
"KRN",8994,1861,3,44,0)
                          ^07: Date of Death (FileMan)
"KRN",8994,1861,3,45,0)
                          ^08: Sex (F/M)
"KRN",8994,1861,3,46,0)
 
"KRN",8994,1861,3,47,0)
  Results[i]            Basic Registry Data
"KRN",8994,1861,3,48,0)
                          ^01: "PRD"
"KRN",8994,1861,3,49,0)
                          ^02: ""
"KRN",8994,1861,3,50,0)
                          ^03: Date Entered (FileMan)
"KRN",8994,1861,3,51,0)
                          ^04: Status Code (Field 3, File #798)
"KRN",8994,1861,3,52,0)
                          ^05: Active (0/1)
"KRN",8994,1861,3,53,0)
                          ^06: Do not Send (0/1)
"KRN",8994,1861,3,54,0)
                          ^07: Data Acknowledged Until (FileMan)
"KRN",8994,1861,3,55,0)
                          ^08: Data Extracted Until (FileMan)
"KRN",8994,1861,3,56,0)
                          ^09: Date Selected (FileMan)
"KRN",8994,1861,3,57,0)
                          ^10: Date Confirmed (FileMan)
"KRN",8994,1861,3,58,0)
                          ^11: Location Selected (Institution Name)
"KRN",8994,1861,3,59,0)
                          ^12: Selection Rule Description
"KRN",8994,1861,3,60,0)
                          ^13: reserved
"KRN",8994,1861,3,61,0)
                          ^14: reserved
"KRN",8994,1861,3,62,0)
                          ^15: Action Flags (see the description below)
"KRN",8994,1861,3,63,0)
 
"KRN",8994,1861,3,64,0)
                        The Status field can have the following values
"KRN",8994,1861,3,65,0)
                        (see description of the STATUS field of the
"KRN",8994,1861,3,66,0)
                        ROR REGISTRY RECORD file for more details):
"KRN",8994,1861,3,67,0)
                            0  Confirmed
"KRN",8994,1861,3,68,0)
                            4  Pending
"KRN",8994,1861,3,69,0)
                            5  Deleted
"KRN",8994,1861,3,70,0)
 
"KRN",8994,1861,3,71,0)
                        The Action Flags field indicates the actions that
"KRN",8994,1861,3,72,0)
                        can be performed on the patient's record:
"KRN",8994,1861,3,73,0)
                            C  CDC form can be edited/printed
"KRN",8994,1861,3,74,0)
                            D  The record can be deleted
"KRN",8994,1861,3,75,0)
                            E  The record can be edited
"KRN",8994,1861,3,76,0)
                            O  Read-only mode
"KRN",8994,1861,3,77,0)
 
"KRN",8994,1861,3,78,0)
  Results[i]            Local field data
"KRN",8994,1861,3,79,0)
                          ^O1: "LFV"
"KRN",8994,1861,3,80,0)
                          ^02: IEN in the LOCAL FIELD multiple
"KRN",8994,1861,3,81,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,1861,3,82,0)
                          ^03: Field Definition IEN
"KRN",8994,1861,3,83,0)
                               (in the ROR LOCAL FIELD file)
"KRN",8994,1861,3,84,0)
                          ^04: Field Name
"KRN",8994,1861,3,85,0)
                          ^05: Date (FileMan)
"KRN",8994,1861,3,86,0)
                          ^06: Comment
"KRN",8994,1861,3,87,0)
 
"KRN",8994,1861,3,88,0)
  Results[i]            Selection Rule
"KRN",8994,1861,3,89,0)
                          ^01: "PSR"
"KRN",8994,1861,3,90,0)
                          ^02: IEN in the SELECTION RULE multiple
"KRN",8994,1861,3,91,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,1861,3,92,0)
                          ^03: Rule Definition IEN
"KRN",8994,1861,3,93,0)
                               (in the ROR SELECTION RULE file)
"KRN",8994,1861,3,94,0)
                          ^04: Name of the Rule
"KRN",8994,1861,3,95,0)
                          ^05: Date (FileMan)
"KRN",8994,1861,3,96,0)
                          ^06: Location IEN  (Institution IEN)
"KRN",8994,1861,3,97,0)
                          ^07: Location Name (Institution Name)
"KRN",8994,1861,3,98,0)
                          ^08: Short Description
"KRN",8994,1861,3,99,0)
 
"KRN",8994,1861,3,100,0)
  Results[i]            Patient History (risk factors)
"KRN",8994,1861,3,101,0)
                          ^01: "PH"
"KRN",8994,1861,3,102,0)
                          ^02: ""
"KRN",8994,1861,3,103,0)
                          ^03: SEX RELATIONS W/MALE PARTNER   {0|1|9}
"KRN",8994,1861,3,104,0)
                          ^04: SEX RELATIONS W/FEMALE PARTNER {0|1|9}
"KRN",8994,1861,3,105,0)
                          ^05: IV DRUGS AFTER 77 AND PRE HIV  {0|1|9}
"KRN",8994,1861,3,106,0)
                          ^06: REC'D CLOTTING FACTORS         {0|1|9}
"KRN",8994,1861,3,107,0)
                          ^07: TYPE OF HEMOPHILIA             {1|2|8}
"KRN",8994,1861,3,108,0)
                          ^08: OTHER HEMOPHILIA DESCRIPTION
"KRN",8994,1861,3,109,0)
                          ^09: SR WITH IV DRUG USER           {0|1|9}
"KRN",8994,1861,3,110,0)
                          ^10: SR WITH BISEXUAL MAN           {0|1|9}
"KRN",8994,1861,3,111,0)
                          ^11: SR W HEMOPHILIA/COAG DISORDER  {0|1|9}
"KRN",8994,1861,3,112,0)
                          ^12: SR W TRANS RECIPIENT WITH AIDS {0|1|9}
"KRN",8994,1861,3,113,0)
                          ^13: TRANSPLANT RECIP-DOCUMNTD HIV  {0|1|9}
"KRN",8994,1861,3,114,0)
                          ^14: SR W AIDS/HIV INFECTION        {0|1|9}
"KRN",8994,1861,3,115,0)
                          ^15: TRANS AFTER 77 AND BEFORE HIV  {0|1|9}
"KRN",8994,1861,3,116,0)
                          ^16: DATE OF FIRST TRANSFUSION      (MM/YY)
"KRN",8994,1861,3,117,0)
                          ^17: DATE OF LAST TRANSFUSION       (MM/YY)
"KRN",8994,1861,3,118,0)
                          ^18: TRANSPLANT OR ARTIF INSEMIN    {0|1|9}
"KRN",8994,1861,3,119,0)
                          ^19: WORK IN HEALTH CARE OR LAB     {0|1|9}
"KRN",8994,1861,3,120,0)
                          ^20: OCCUPATION
"KRN",8994,1861,3,121,0)
 
"KRN",8994,1861,3,122,0)
  Results[i]            CD4 and Viral Load results
"KRN",8994,1861,3,123,0)
                          ^01: "LTR"
"KRN",8994,1861,3,124,0)
                          ^02: Result IEN (inverted date/time)
"KRN",8994,1861,3,125,0)
                          ^03: Date/time of the test (FileMan)
"KRN",8994,1861,3,126,0)
                          ^04: Result
"KRN",8994,1861,3,127,0)
                          ^05: Test IEN (in file #60)
"KRN",8994,1861,3,128,0)
                          ^06: Test name
"KRN",8994,1861,3,129,0)
                          ^07: Code of the group
"KRN",8994,1861,3,130,0)
                          ^08: Group name
"KRN",8994,1861,3,131,0)
 
"KRN",8994,1861,3,132,0)
  Results[i]            Registry Data
"KRN",8994,1861,3,133,0)
                          ^01: "ICR"
"KRN",8994,1861,3,134,0)
                          ^02: ""
"KRN",8994,1861,3,135,0)
                          ^03: Clinical AIDS                  {0|1}
"KRN",8994,1861,3,136,0)
                          ^04: Date of Clinical AIDS (FileMan)
"KRN",8994,1861,3,137,0)
                          ^05: Code of the Supporting Evidence
"KRN",8994,1861,3,138,0)
                          ^06: Date of last CD4 (FileMan)
"KRN",8994,1861,3,139,0)
                          ^07: Last CD4
"KRN",8994,1861,3,140,0)
                          ^08: Date of lowest CD4 (FileMan)
"KRN",8994,1861,3,141,0)
                          ^09: Lowest CD4
"KRN",8994,1861,3,142,0)
                          ^10: Date of lowest CD4 % (FileMan)
"KRN",8994,1861,3,143,0)
                          ^11: Lowest CD4 %
"KRN",8994,2081,-1)
0^4
"KRN",8994,2081,0)
RORHEPC PATIENT LOAD^LOAD^RORRP036^4^R^^^1^1
"KRN",8994,2081,1,0)
^^2^2^3040416^
"KRN",8994,2081,1,1,0)
The RORHEPC PATIENT LOAD remote procedure loads the patient's data from
"KRN",8994,2081,1,2,0)
the Hepatitis C registry and prepares the record for editing.
"KRN",8994,2081,2,0)
^8994.02A^3^3
"KRN",8994,2081,2,1,0)
REGIEN^1^^1^1
"KRN",8994,2081,2,1,1,0)
^8994.021^2^2^3030703^^^
"KRN",8994,2081,2,1,1,1,0)
The REGIEN parameter should contain a valid registry IEN (IEN of the
"KRN",8994,2081,2,1,1,2,0)
registry parameters record in the ROR REGISTRY PARAMETERS file #798.1).
"KRN",8994,2081,2,2,0)
PATIEN^1^^1^2
"KRN",8994,2081,2,2,1,0)
^8994.021^1^1^3030715^^^^
"KRN",8994,2081,2,2,1,1,0)
A valid patient IEN (DFN) should be assigned to the PATIEN parameter.
"KRN",8994,2081,2,3,0)
LOCK^1^^^3
"KRN",8994,2081,2,3,1,0)
^8994.021^2^2^3040416^^
"KRN",8994,2081,2,3,1,1,0)
If this parameter is defined and not zero then the RPC will try to lock
"KRN",8994,2081,2,3,1,2,0)
the registry record before loading the data and will leave it locked.
"KRN",8994,2081,2,"B","LOCK",3)

"KRN",8994,2081,2,"B","PATIEN",2)

"KRN",8994,2081,2,"B","REGIEN",1)

"KRN",8994,2081,2,"PARAMSEQ",1,1)

"KRN",8994,2081,2,"PARAMSEQ",2,2)

"KRN",8994,2081,2,"PARAMSEQ",3,3)

"KRN",8994,2081,3,0)
^8994.03^69^69^3060511^^
"KRN",8994,2081,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that
"KRN",8994,2081,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2081,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2081,3,4,0)
descriptors returned in the subsequent nodes of the Results array:
"KRN",8994,2081,3,5,0)
   
"KRN",8994,2081,3,6,0)
  Results[0]            Result Descriptor
"KRN",8994,2081,3,7,0)
                          ^01: The last error code
"KRN",8994,2081,3,8,0)
                          ^02: Number of the error descriptors
"KRN",8994,2081,3,9,0)
                                                                      
"KRN",8994,2081,3,10,0)
  Results[i]            Error Descriptor
"KRN",8994,2081,3,11,0)
                          ^01: Error code
"KRN",8994,2081,3,12,0)
                          ^02: Message
"KRN",8994,2081,3,13,0)
                          ^03: Place of the error
"KRN",8994,2081,3,14,0)
 
"KRN",8994,2081,3,15,0)
If locking was requested (see the LOCK parameter) and the record could not
"KRN",8994,2081,3,16,0)
be locked then the first "^"-piece of the Results[0] would be greater than
"KRN",8994,2081,3,17,0)
0. The Results[0] would contain the lock descriptor and subsequent nodes
"KRN",8994,2081,3,18,0)
of the global array would contain the data (see below). The lock 
"KRN",8994,2081,3,19,0)
descriptor contains information about the process, which owns the most 
"KRN",8994,2081,3,20,0)
recent lock of the record. The "O" flag (read-only) would also be added to
"KRN",8994,2081,3,21,0)
the 15th field of the "PRD" segment.
"KRN",8994,2081,3,22,0)
 
"KRN",8994,2081,3,23,0)
  Results[0]            Lock Descriptor
"KRN",8994,2081,3,24,0)
                          ^01: Date/Time (FileMan)
"KRN",8994,2081,3,25,0)
                          ^02: User/Process name
"KRN",8994,2081,3,26,0)
                          ^03: User IEN (DUZ)
"KRN",8994,2081,3,27,0)
                          ^04: $JOB
"KRN",8994,2081,3,28,0)
                          ^05: Task number
"KRN",8994,2081,3,29,0)
 
"KRN",8994,2081,3,30,0)
THE DATA ARE LOADED ONLY FOR VIEWING PURPOSES (READ-ONLY)!
"KRN",8994,2081,3,31,0)
 
"KRN",8994,2081,3,32,0)
Otherwise, zero is returned in the Results[0] and the subsequent nodes of
"KRN",8994,2081,3,33,0)
the array contain the data.
"KRN",8994,2081,3,34,0)
 
"KRN",8994,2081,3,35,0)
  Results[0]            0
"KRN",8994,2081,3,36,0)
 
"KRN",8994,2081,3,37,0)
  Results[i]            Demographic Information
"KRN",8994,2081,3,38,0)
                          ^01: "DEM"
"KRN",8994,2081,3,39,0)
                          ^02: ""
"KRN",8994,2081,3,40,0)
                          ^03: Patient IEN (DFN)
"KRN",8994,2081,3,41,0)
                          ^04: Patient Name
"KRN",8994,2081,3,42,0)
                          ^05: Date of Birth (FileMan)
"KRN",8994,2081,3,43,0)
                          ^06: SSN
"KRN",8994,2081,3,44,0)
                          ^07: Date of Death (FileMan)
"KRN",8994,2081,3,45,0)
                          ^08: Sex (F/M)
"KRN",8994,2081,3,46,0)
 
"KRN",8994,2081,3,47,0)
  Results[i]            Basic Registry Data
"KRN",8994,2081,3,48,0)
                          ^01: "PRD"
"KRN",8994,2081,3,49,0)
                          ^02: ""
"KRN",8994,2081,3,50,0)
                          ^03: Date Entered (FileMan)
"KRN",8994,2081,3,51,0)
                          ^04: Status Code (Field 3, File #798)
"KRN",8994,2081,3,52,0)
                          ^05: Active (0/1)
"KRN",8994,2081,3,53,0)
                          ^06: Do not Send (0/1)
"KRN",8994,2081,3,54,0)
                          ^07: Data Acknowledged Until (FileMan)
"KRN",8994,2081,3,55,0)
                          ^08: Data Extracted Until (FileMan)
"KRN",8994,2081,3,56,0)
                          ^09: Date Selected (FileMan)
"KRN",8994,2081,3,57,0)
                          ^10: Date Confirmed (FileMan)
"KRN",8994,2081,3,58,0)
                          ^11: Location Selected (Institution Name)
"KRN",8994,2081,3,59,0)
                          ^12: Selection Rule Description
"KRN",8994,2081,3,60,0)
                          ^13: reserved
"KRN",8994,2081,3,61,0)
                          ^14: reserved
"KRN",8994,2081,3,62,0)
                          ^15: Action Flags (see the description below)
"KRN",8994,2081,3,63,0)
 
"KRN",8994,2081,3,64,0)
  Results[i]            Registry Data
"KRN",8994,2081,3,65,0)
                          ^01: "HEPC"
"KRN",8994,2081,3,66,0)
                          ^02: ""
"KRN",8994,2081,3,67,0)
                          ^03: Investigational Drugs {0|1}
"KRN",8994,2081,3,68,0)
                          ^04: reserved
"KRN",8994,2081,3,69,0)
                          ^05: Code of the Supporting Evidence
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",389,-1)
1^1
"PKG",389,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL CASE REGISTRIES
"PKG",389,20,0)
^9.402P^^
"PKG",389,22,0)
^9.49I^1^1
"PKG",389,22,1,0)
1.5^3060208^3060221^222222227
"PKG",389,22,1,"PAH",1,0)
1^3061121
"PKG",389,22,1,"PAH",1,1,0)
^^2^2^3061121
"PKG",389,22,1,"PAH",1,1,1,0)
Post-implementation enhancements for the Clinical Case Registries v1.5
"PKG",389,22,1,"PAH",1,1,2,0)
package.
"PRE")
RORP001
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
54
"RTN","ROR")
0^39^B21431367^B21431872
"RTN","ROR",1,0)
ROR ;HCIOFO/SG - CLINICAL CASE REGISTRIES ; 6/22/06 3:33pm
"RTN","ROR",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","ROR",3,0)
 ;
"RTN","ROR",4,0)
 ; LOCAL VARIABLE ------ DESCRIPTION
"RTN","ROR",5,0)
 ;
"RTN","ROR",6,0)
 ; RORCACHE              In-memory cache
"RTN","ROR",7,0)
 ; RORERRDL              Default error location
"RTN","ROR",8,0)
 ; RORERROR              Error processing data
"RTN","ROR",9,0)
 ; RORPARM               Task-wide constants and variables
"RTN","ROR",10,0)
 ;
"RTN","ROR",11,0)
 ; See the source code of the ^ROR02 routine for more details.
"RTN","ROR",12,0)
 ;
"RTN","ROR",13,0)
 ; ROREXT                Regular data extraction    (See ^ROREXT)
"RTN","ROR",14,0)
 ; RORHDT                Historical data extraction (See ^RORHDT)
"RTN","ROR",15,0)
 ; RORLOG                Log subsystem data         (See ^RORLOG)
"RTN","ROR",16,0)
 ; RORUPD                Registry update parameters (See ^RORUPD)
"RTN","ROR",17,0)
 ;
"RTN","ROR",18,0)
 ; TEMPORARY NODE ------ DESCRIPTION
"RTN","ROR",19,0)
 ;
"RTN","ROR",20,0)
 ; ^TMP("RORHDT")        Control data of historical data extraction
"RTN","ROR",21,0)
 ; ^TMP("RORTMP")        Temporary storage
"RTN","ROR",22,0)
 ; ^TMP("RORUPD")        Registry update temporary data
"RTN","ROR",23,0)
 ;
"RTN","ROR",24,0)
 ; ^TMP(rtn_name)        Temporary storage used by the rtn_name
"RTN","ROR",25,0)
 ;                       routine (mostly, the RPC's)
"RTN","ROR",26,0)
 ;
"RTN","ROR",27,0)
 ; ^TMP($J,"RORTMP-"_)   Generic temporary storage used by ^RORTMP
"RTN","ROR",28,0)
 ;
"RTN","ROR",29,0)
 ; ^XTMP("RORHDT")       Control data of historical data extraction
"RTN","ROR",30,0)
 ; ^XTMP("RORUPDJ")      Registry update temporary data (multitask)
"RTN","ROR",31,0)
 ; ^XTMP("RORUPDR")      Registry update temporary data (installation)
"RTN","ROR",32,0)
 ;
"RTN","ROR",33,0)
 ; See detailed description of the temporary global nodes in
"RTN","ROR",34,0)
 ; the source code of the ^ROR01 routine.
"RTN","ROR",35,0)
 ;
"RTN","ROR",36,0)
 ; NAMESPACE ----------- DESCRIPTION
"RTN","ROR",37,0)
 ;
"RTN","ROR",38,0)
 ; RORAPI*               Supported APIs
"RTN","ROR",39,0)
 ; RORDD*                Routines used by the Data Dictionary
"RTN","ROR",40,0)
 ; RORERR*               Error processing
"RTN","ROR",41,0)
 ; ROREVT*               Event protocols
"RTN","ROR",42,0)
 ; ROREX*                Regular data extraction & transmission
"RTN","ROR",43,0)
 ; RORHDT*               Historical data extraction
"RTN","ROR",44,0)
 ; RORHIV*               HIV registry-specific routines
"RTN","ROR",45,0)
 ; RORHL*                HL7 utilities
"RTN","ROR",46,0)
 ; RORKIDS*              Low-level installation utilities (KIDS)
"RTN","ROR",47,0)
 ; RORLOCK*              Locks and transactions
"RTN","ROR",48,0)
 ; RORLOG*               Error recording
"RTN","ROR",49,0)
 ;
"RTN","ROR",50,0)
 ; RORPnnn*               Patch installation routines (KIDS)
"RTN","ROR",51,0)
 ;                         nnn - patch number
"RTN","ROR",52,0)
 ; RORPUT*               High-level installation utilities
"RTN","ROR",53,0)
 ;
"RTN","ROR",54,0)
 ; RORREP*               Roll-and-scroll reports
"RTN","ROR",55,0)
 ; RORRP*                Remote procedures
"RTN","ROR",56,0)
 ; RORSET*               Registry setup routines
"RTN","ROR",57,0)
 ; RORTXT*               Text resource routines
"RTN","ROR",58,0)
 ; RORUP*                Registry update
"RTN","ROR",59,0)
 ; RORUTL*               Utilities
"RTN","ROR",60,0)
 ; RORVM*                Entry points for VistA menu options
"RTN","ROR",61,0)
 ; RORXnnn*              XML reports (nnn - report code)
"RTN","ROR",62,0)
 ; RORXU*                Utilities for XML reports
"RTN","ROR",63,0)
 ;
"RTN","ROR",64,0)
 ; DIALOG -------------- DESCRIPTION
"RTN","ROR",65,0)
 ;
"RTN","ROR",66,0)
 ; 7980000.*             Various messages and templates
"RTN","ROR",67,0)
 ; 7981???.*             Report templates (XSL)
"RTN","ROR",68,0)
 ;
"RTN","ROR",69,0)
 ; MENU OPTION --------- DESCRIPTION
"RTN","ROR",70,0)
 ;
"RTN","ROR",71,0)
 ; [ROR TASK]            Registry update and data extraction option
"RTN","ROR",72,0)
 ;                       (must be scheduled; do not run it directly)
"RTN","ROR",73,0)
 ; [ROR SETUP]           Registry Setup
"RTN","ROR",74,0)
 ; [RORHDT MAIN]         Historical data extraction menu
"RTN","ROR",75,0)
 ; [RORMNT MAIN]         Maintenance menu
"RTN","ROR",76,0)
 ;
"RTN","ROR",77,0)
 ; SPECIAL ENTRY POINT - DESCRIPTION
"RTN","ROR",78,0)
 ;
"RTN","ROR",79,0)
 ;         ^RORUTL06     Menu for developer's utilities
"RTN","ROR",80,0)
 ; DISTPREP^RORUTL06     Prepares registry for KIDS distribution
"RTN","ROR",81,0)
 ;   PRTMDE^RORUTL06     Prints the data element metadata
"RTN","ROR",82,0)
 ;   VERIFY^RORUTL06     Checks the registry definition
"RTN","ROR",83,0)
 ;
"RTN","ROR",84,0)
 ;  EXTRACT^RORUTL07     Data extraction & transmission in debug mode
"RTN","ROR",85,0)
 ;   UPDATE^RORUTL07     Registry update in debug mode
"RTN","ROR",86,0)
 ;
"RTN","ROR",87,0)
 ; INITIALS ------------ DEVELOPER
"RTN","ROR",88,0)
 ;
"RTN","ROR",89,0)
 ; BH                    Brent Hicks
"RTN","ROR",90,0)
 ; CRT                   Cameron Taylor
"RTN","ROR",91,0)
 ; SG                    Sergey Gavrilov
"RTN","ROR",92,0)
 ;
"RTN","ROR",93,0)
 Q
"RTN","ROR",94,0)
 ;
"RTN","ROR",95,0)
 ;***** RETURNS THE TEST BUILD NUMBER FOR THE DATA EXTRACTION
"RTN","ROR",96,0)
BUILD() ;
"RTN","ROR",97,0)
 Q 1
"RTN","ROR",98,0)
 ;
"RTN","ROR",99,0)
 ;***** REGISTRY UPDATE AND DATA EXTRACTION TASK
"RTN","ROR",100,0)
 ;
"RTN","ROR",101,0)
 ; ZTQPARAM      String that contains a list of registry names
"RTN","ROR",102,0)
 ;               separated by commas. You must define the list as
"RTN","ROR",103,0)
 ;               a value of the TASK PARAMETERS field during
"RTN","ROR",104,0)
 ;               scheduling of the [ROR TASK] option that uses
"RTN","ROR",105,0)
 ;               this entry point.
"RTN","ROR",106,0)
 ;
"RTN","ROR",107,0)
 ; The following task parameters are optional. They can be defined
"RTN","ROR",108,0)
 ; on the second page of the option scheduling form as the pairs of
"RTN","ROR",109,0)
 ; variable names and values. See description of the ROR TASK option
"RTN","ROR",110,0)
 ; for more details regarding these parameters.
"RTN","ROR",111,0)
 ;
"RTN","ROR",112,0)
 ; [RORFLCLR]    Clear flags to control processing (default: "").
"RTN","ROR",113,0)
 ; [RORFLSET]    Set flags to control processing (default: "EX").
"RTN","ROR",114,0)
 ;
"RTN","ROR",115,0)
 ;                 D  Run the task(s) in Debug Mode #1
"RTN","ROR",116,0)
 ;
"RTN","ROR",117,0)
 ;                 E  Use the event references (file #798.3)
"RTN","ROR",118,0)
 ;
"RTN","ROR",119,0)
 ;                 S  Run the data extraction in single-task mode
"RTN","ROR",120,0)
 ;
"RTN","ROR",121,0)
 ;                 X  Suspend the data extraction task in the
"RTN","ROR",122,0)
 ;                    same way as the registry update
"RTN","ROR",123,0)
 ;
"RTN","ROR",124,0)
 ; [RORMNTSK]    Maximum number of the registry update subtasks.
"RTN","ROR",125,0)
 ;               The default value of the parameter is "2-3-AUTO".
"RTN","ROR",126,0)
 ;
"RTN","ROR",127,0)
 ; [RORSUSP]     Suspension parameters of the registry update and
"RTN","ROR",128,0)
 ;               data extraction subtasks. The subtasks are not
"RTN","ROR",129,0)
 ;               suspended by default.
"RTN","ROR",130,0)
 ;
"RTN","ROR",131,0)
TASK ;
"RTN","ROR",132,0)
 N RORERROR      ; Error processing data
"RTN","ROR",133,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","ROR",134,0)
 N RORPARM       ; Application parameters
"RTN","ROR",135,0)
 ;
"RTN","ROR",136,0)
 N CNT,FLAGS,I,RC,REGLST,REGNAME,RORERRDL  K ZTREQ
"RTN","ROR",137,0)
 ;--- Initialize constants and variables
"RTN","ROR",138,0)
 D INIT^RORUTL01("ROR",1)
"RTN","ROR",139,0)
 D CLEAR^RORERR("TASK^ROR",1)
"RTN","ROR",140,0)
 ;--- Open a new log
"RTN","ROR",141,0)
 S RC=$$SETUP^RORLOG()
"RTN","ROR",142,0)
 S RC=$$OPEN^RORLOG(,7,"ROR TASK STARTED")
"RTN","ROR",143,0)
 ;
"RTN","ROR",144,0)
 ;--- Check and log the task parameters and force the <UNDEF>
"RTN","ROR",145,0)
 ;--- error in case of a missing/invalid critical value
"RTN","ROR",146,0)
 I $$TASKPRMS^ROR10(.REGLST)<0  K ZTQPARAM  S RC=ZTQPARAM
"RTN","ROR",147,0)
 ;--- Clear/Set the flags (override the default value)
"RTN","ROR",148,0)
 S FLAGS=$TR("EX",RORFLCLR_RORFLSET)_RORFLSET
"RTN","ROR",149,0)
 ;--- Associate the log with the registries
"RTN","ROR",150,0)
 S RC=$$SETRGLST^RORLOG(.REGLST)
"RTN","ROR",151,0)
 ;--- Enable debug mode if requested
"RTN","ROR",152,0)
 S:FLAGS["D" RORPARM("DEBUG")=1
"RTN","ROR",153,0)
 ;
"RTN","ROR",154,0)
 ;--- Rebuild the "ACL" cross-reference
"RTN","ROR",155,0)
 S RC=$$RNDXACL^RORUTL11()
"RTN","ROR",156,0)
 ;--- Remove inactive registries from the list
"RTN","ROR",157,0)
 S RC=$$ARLST^RORUTL02(.REGLST)  G:RC<0 ABORT
"RTN","ROR",158,0)
 ;--- Check the status of last HL7 message(s)
"RTN","ROR",159,0)
 S RC=$$CHECKMSG^ROR10(.REGLST)  G:RC<0 ABORT
"RTN","ROR",160,0)
 ;
"RTN","ROR",161,0)
 ;--- Update the registries
"RTN","ROR",162,0)
 S RC=$$UPDATE^RORUPD(.REGLST,RORMNTSK,RORSUSP,FLAGS)
"RTN","ROR",163,0)
 ;--- Process the errors
"RTN","ROR",164,0)
 I RC<0  D  G:RC<0 ABORT
"RTN","ROR",165,0)
 . ;--- Quit if stop is requested (via the TaskMan User option)
"RTN","ROR",166,0)
 . I RC=-42  D ALERT^RORUTL01(.REGLST,-42)  S ZTSTOP=1  Q
"RTN","ROR",167,0)
 . ;--- Do not send the alert for some warnings
"RTN","ROR",168,0)
 . I RC=-28  S RC=0  Q
"RTN","ROR",169,0)
 . ;--- Send the alert in case of other errors/warnings
"RTN","ROR",170,0)
 . D ALERT^RORUTL01(.REGLST,-43,,,,"registry update")
"RTN","ROR",171,0)
 . S RC=0
"RTN","ROR",172,0)
 ;
"RTN","ROR",173,0)
 ;--- Mark registry records 1 month after the installation so that
"RTN","ROR",174,0)
 ;    the local registry data and demographic data will be resent
"RTN","ROR",175,0)
 ;--- to restore the data overwritten with the historical data
"RTN","ROR",176,0)
 S RC=$$REMARK^RORUTL05(.REGLST,31)
"RTN","ROR",177,0)
 ;
"RTN","ROR",178,0)
 ;--- Perform the data extraction
"RTN","ROR",179,0)
 S RC=$$EXTRACT^ROREXT(.REGLST,,RORSUSP,FLAGS)
"RTN","ROR",180,0)
 ;--- Process the errors
"RTN","ROR",181,0)
 I RC<0  D  G:RC<0 ABORT
"RTN","ROR",182,0)
 . ;--- Quit if stop is requested (via the TaskMan User option)
"RTN","ROR",183,0)
 . I RC=-42  D ALERT^RORUTL01(.REGLST,-42)  S ZTSTOP=1  Q
"RTN","ROR",184,0)
 . ;--- Do not send the alert for some warnings
"RTN","ROR",185,0)
 . I RC=-28  S RC=0  Q
"RTN","ROR",186,0)
 . ;--- Send the alert in case of other errors/warnings
"RTN","ROR",187,0)
 . D ALERT^RORUTL01(.REGLST,-43,,,,"data extraction")
"RTN","ROR",188,0)
 . S RC=0
"RTN","ROR",189,0)
 ;
"RTN","ROR",190,0)
 ;--- Purge the old tasks
"RTN","ROR",191,0)
 S RC=$$PURGE^RORTSK02(14)
"RTN","ROR",192,0)
 ;--- Purge the old logs
"RTN","ROR",193,0)
 S RC=$$PURGE^RORLOG01(31)
"RTN","ROR",194,0)
 ;--- Purge the old event references
"RTN","ROR",195,0)
 S RC=$$EPDATE^RORUTL05()
"RTN","ROR",196,0)
 S:RC>0 RC=$$PURGE^RORUPP02(RC)
"RTN","ROR",197,0)
 ;---
"RTN","ROR",198,0)
 S ZTREQ="@"
"RTN","ROR",199,0)
ABORT ;
"RTN","ROR",200,0)
 S I=$S($G(ZTREQ)="@":"COMPLETED",1:"ABORTED")
"RTN","ROR",201,0)
 D CLOSE^RORLOG("ROR TASK "_I)
"RTN","ROR",202,0)
 Q
"RTN","ROR01")
0^50^B17051^B15808
"RTN","ROR01",1,0)
ROR01 ;HCIOFO/SG - CLINICAL CASE REGISTRIES (TEMP. GLOBALS) ; 11/17/06 11:56am
"RTN","ROR01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","ROR01",3,0)
 ;
"RTN","ROR01",4,0)
 ; ^TMP($J,"RORTMP-"_) - TEMPORARY STORAGE (see the ^RORTMP routine)
"RTN","ROR01",5,0)
 ;
"RTN","ROR01",6,0)
 ; ^TMP($J,"RORTMP-0",   Indexes of allocated buffers
"RTN","ROR01",7,0)
 ;   i)                  ""
"RTN","ROR01",8,0)
 ;
"RTN","ROR01",9,0)
 ; ^TMP($J,"RORTMP-"_i,  Allocated buffers
"RTN","ROR01",10,0)
 ;   ...)
"RTN","ROR01",11,0)
 ;
"RTN","ROR01",12,0)
 ; ^TMP("RORACK") ------ CONTROL DATA OF ACKNOWLEDGEMENT PROCESSING
"RTN","ROR01",13,0)
 ;
"RTN","ROR01",14,0)
 ; ^TMP("RORACK",$J,
"RTN","ROR01",15,0)
 ;   "PR",IEN)           List of IENs of registry records that
"RTN","ROR01",16,0)
 ;                       acknowledgements have been processed for.
"RTN","ROR01",17,0)
 ;
"RTN","ROR01",18,0)
 ; ^TMP("RORHDT") ------ CONTROL DATA OF HISTORICAL DATA EXTRACTION
"RTN","ROR01",19,0)
 ;
"RTN","ROR01",20,0)
 ; ^TMP("RORHDT",$J,
"RTN","ROR01",21,0)
 ;   "PR",               List of IENs of registry records processed
"RTN","ROR01",22,0)
 ;                       in the re-extraction section of function
"RTN","ROR01",23,0)
 ;                       $$EXTRACT^RORHDT04.
"RTN","ROR01",24,0)
 ;     IEN)              Return code of the record processing. If this
"RTN","ROR01",25,0)
 ;                       value is less than zero, data extraction was
"RTN","ROR01",26,0)
 ;                       not successful again.
"RTN","ROR01",27,0)
 ;
"RTN","ROR01",28,0)
 ; ^TMP("RORPTF") ------ TEMPOPARY PTF INDEX FOR DATA EXTRACTION
"RTN","ROR01",29,0)
 ;
"RTN","ROR01",30,0)
 ; ^TMP("RORPTF",$J,
"RTN","ROR01",31,0)
 ;   "DTF",              List of already indexed time frames of
"RTN","ROR01",32,0)
 ;                       the PTF CLOSE OUT file (#45.84).
"RTN","ROR01",33,0)
 ;     StartDate)        StartDate^EndDate
"RTN","ROR01",34,0)
 ;   "PDI",              Temporary PTF index itself
"RTN","ROR01",35,0)
 ;     DFN,PTFIEN)       ""
"RTN","ROR01",36,0)
 ;
"RTN","ROR01",37,0)
 ; ^TMP("RORTMP",$J) --- TEMPORARY STORAGE
"RTN","ROR01",38,0)
 ;
"RTN","ROR01",39,0)
 ; ^TMP("RORUPD") ------ REGISTRY UPDATE TEMPORARY DATA
"RTN","ROR01",40,0)
 ;
"RTN","ROR01",41,0)
 ; ^TMP("RORUPD",$J,
"RTN","ROR01",42,0)
 ;
"RTN","ROR01",43,0)
 ;   1,File#,
"RTN","ROR01",44,0)
 ;     "S",Rule Name)    List of selection rules
"RTN","ROR01",45,0)
 ;     "F",DataCode,     List of data elements to load
"RTN","ROR01",46,0)
 ;       "E")            If expression implementing the selection
"RTN","ROR01",47,0)
 ;                       rule references an external value of the
"RTN","ROR01",48,0)
 ;                       element, the "E" sub-node will be defined.
"RTN","ROR01",49,0)
 ;       "I")            If expression implementing the selection
"RTN","ROR01",50,0)
 ;                       rule references an internal value of the
"RTN","ROR01",51,0)
 ;                       element, the "I" sub-node will be defined.
"RTN","ROR01",52,0)
 ;
"RTN","ROR01",53,0)
 ;   2,Registry#)        Registry Name
"RTN","ROR01",54,0)
 ;
"RTN","ROR01",55,0)
 ;   3,Rule Name,        Selection rule descriptor
"RTN","ROR01",56,0)
 ;                         ^1: Rule#
"RTN","ROR01",57,0)
 ;                         ^2: File Number
"RTN","ROR01",58,0)
 ;                         ^3: 1 if already processed, otherwise
"RTN","ROR01",59,0)
 ;                             empty string
"RTN","ROR01",60,0)
 ;                         ^4: 1 if registry should be updated (in
"RTN","ROR01",61,0)
 ;                             case of matched condition, of course)
"RTN","ROR01",62,0)
 ;     1)                MUMPS function entry point
"RTN","ROR01",63,0)
 ;     2,Registry#)      List of affected registries
"RTN","ROR01",64,0)
 ;     3,Rule Name)      List of rules that this rule depend on
"RTN","ROR01",65,0)
 ;
"RTN","ROR01",66,0)
 ;   4,LabSearch#)       List of Lab search IENs
"RTN","ROR01",67,0)
 ;
"RTN","ROR01",68,0)
 ;   "LS",
"RTN","ROR01",69,0)
 ;     Result Code,
"RTN","ROR01",70,0)
 ;       LabSearch#,
"RTN","ROR01",71,0)
 ;         Seq#)         Condition to check the result
"RTN","ROR01",72,0)
 ;                         ^1: Indicator
"RTN","ROR01",73,0)
 ;                         ^2: Indicated Value
"RTN","ROR01",74,0)
 ;
"RTN","ROR01",75,0)
 ;   "U",Patient#,       This node is defined if the patient has been 
"RTN","ROR01",76,0)
 ;                       processed
"RTN","ROR01",77,0)
 ;     2,Registry#,      This node is defined if the registry should
"RTN","ROR01",78,0)
 ;                       be updated
"RTN","ROR01",79,0)
 ;       Rule#)          Reference to a top-level selection rule
"RTN","ROR01",80,0)
 ;                         ^01: Trigger date of the rule
"RTN","ROR01",81,0)
 ;                         ^02: Institution IEN
"RTN","ROR01",82,0)
 ;
"RTN","ROR01",83,0)
 ; ^XTMP("RORLOCK") ---- LIST OF LOCK DESCRIPTORS
"RTN","ROR01",84,0)
 ;
"RTN","ROR01",85,0)
 ; ^XTMP("RORLOCK",
"RTN","ROR01",86,0)
 ;   NodeNdx)            Lock Descriptor (see ^RORLOCK for details)
"RTN","ROR01",87,0)
 ;                         ^01: Date/Time (FileMan)
"RTN","ROR01",88,0)
 ;                         ^02: User/Process name
"RTN","ROR01",89,0)
 ;                         ^03: User IEN (DUZ)
"RTN","ROR01",90,0)
 ;                         ^04: $JOB
"RTN","ROR01",91,0)
 ;                         ^05: Task number
"RTN","ROR01",92,0)
 ;                         ^06: Lock counter
"RTN","ROR01",93,0)
 ;
"RTN","ROR01",94,0)
 ; ^XTMP("RORUPD"_) ---- REGISTRY UPDATE TEMPORARY DATA (MULTITASK)
"RTN","ROR01",95,0)
 ;
"RTN","ROR01",96,0)
 ;                       If the registry update starts in the
"RTN","ROR01",97,0)
 ;                       multitask mode, all temporary data from the
"RTN","ROR01",98,0)
 ;                       ^TMP("RORUPD",$J) node is merged to this
"RTN","ROR01",99,0)
 ;                       node so that it will be available for all
"RTN","ROR01",100,0)
 ;                       registry update subtasks.
"RTN","ROR01",101,0)
 ;
"RTN","ROR01",102,0)
 ; ^XTMP("RORUPDJ"_$J,
"RTN","ROR01",103,0)
 ;                       If the regular registry update is run in the
"RTN","ROR01",104,0)
 ;                       multitask mode, the ^XTMP("RORUPDJ"_$J) node
"RTN","ROR01",105,0)
 ;                       is used. $J is the job number of the main
"RTN","ROR01",106,0)
 ;                       registry update task.
"RTN","ROR01",107,0)
 ;
"RTN","ROR01",108,0)
 ; ^XTMP("RORUPDR"_Registry#,
"RTN","ROR01",109,0)
 ;                       During the initial registry population
"RTN","ROR01",110,0)
 ;                       (performed by the post-install routines),
"RTN","ROR01",111,0)
 ;                       the ^XTMP("RORUPDR"_Registry#) node is used.
"RTN","ROR01",112,0)
 ;                       The list of processed patients (the "U"
"RTN","ROR01",113,0)
 ;                       subscript) is used to restart the process
"RTN","ROR01",114,0)
 ;                       after an error or a crash.
"RTN","ROR01",115,0)
 ;
"RTN","ROR01",116,0)
 ;   0)                  Node descriptor
"RTN","ROR01",117,0)
 ;                         ^1: purge date  (FileMan)
"RTN","ROR01",118,0)
 ;                         ^2: create date (FileMan)
"RTN","ROR01",119,0)
 ;                         ^3: description
"RTN","ROR01",120,0)
 ;
"RTN","ROR01",121,0)
 ;   "T",Task#)          This node is LOCKed while the (sub)task is
"RTN","ROR01",122,0)
 ;                       running (subscript of the main task is 0).
"RTN","ROR01",123,0)
 ;
"RTN","ROR01",124,0)
 ;                       Otherwise, "S" means that the subtask has
"RTN","ROR01",125,0)
 ;                       been scheduled but not started yet.
"RTN","ROR01",126,0)
 ;
"RTN","ROR01",127,0)
 ;                       A negative value of the non-locked node
"RTN","ROR01",128,0)
 ;                       represents the error code (for example,
"RTN","ROR01",129,0)
 ;                       -60 means that the subtask has crashed).
"RTN","ROR01",130,0)
 ;
"RTN","ROR01",131,0)
 ;                       Non-negative value of the node means that
"RTN","ROR01",132,0)
 ;                       the subtask has been completed. The value
"RTN","ROR01",133,0)
 ;                       has the following structure:
"RTN","ROR01",134,0)
 ;                         ^1: Number of processed patients
"RTN","ROR01",135,0)
 ;                         ^2: Number of patients processed with
"RTN","ROR01",136,0)
 ;                             errors
"RTN","ROR01",137,0)
 ;
"RTN","ROR01",138,0)
 Q
"RTN","RORDD01")
0^34^B22524971^B18102562
"RTN","RORDD01",1,0)
RORDD01 ;HCIOFO/SG - DATA DICTIONARY UTILITIES ; 6/14/06 2:07pm
"RTN","RORDD01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORDD01",3,0)
 ;
"RTN","RORDD01",4,0)
 Q
"RTN","RORDD01",5,0)
 ;
"RTN","RORDD01",6,0)
 ;***** "AIDSOI" TRIGGER OF THE "AIDS INDICATOR DISEASE" MULTIPLE
"RTN","RORDD01",7,0)
 ;
"RTN","RORDD01",8,0)
 ; .SDA          Reference to a local array of record IENs
"RTN","RORDD01",9,0)
 ;
"RTN","RORDD01",10,0)
 ; DATE          Date of an AIDS indicator disease
"RTN","RORDD01",11,0)
 ;
"RTN","RORDD01",12,0)
AIDSOI(SDA,DATE) ;
"RTN","RORDD01",13,0)
 N IENS,TMP,RORFDA,RORMSG
"RTN","RORDD01",14,0)
 ;--- Do not do anything if the CLINICAL AIDS field is already set
"RTN","RORDD01",15,0)
 S IENS=+$G(SDA(1))  Q:IENS'>0  S IENS=IENS_","
"RTN","RORDD01",16,0)
 Q:$$GET1^DIQ(799.4,IENS,.02,"I",,"RORMSG")
"RTN","RORDD01",17,0)
 ;---
"RTN","RORDD01",18,0)
 S DATE=$P(DATE,".")
"RTN","RORDD01",19,0)
 I DATE>0  D
"RTN","RORDD01",20,0)
 . S:'$E(DATE,4,5) $E(DATE,4,5)="01"
"RTN","RORDD01",21,0)
 . S:'$E(DATE,6,7) $E(DATE,6,7)="01"
"RTN","RORDD01",22,0)
 E  S DATE=$$DT^XLFDT
"RTN","RORDD01",23,0)
 ;---
"RTN","RORDD01",24,0)
 S RORFDA(799.4,IENS,.02)=1
"RTN","RORDD01",25,0)
 S RORFDA(799.4,IENS,.03)=DATE
"RTN","RORDD01",26,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORDD01",27,0)
 Q
"RTN","RORDD01",28,0)
 ;
"RTN","RORDD01",29,0)
 ;***** "ANC" INDEX OF THE "REGISTRY NAME" MULTIPLE OF THE FILE #799.6
"RTN","RORDD01",30,0)
 ;
"RTN","RORDD01",31,0)
 ; .SDA          Reference to a local array of record IENs
"RTN","RORDD01",32,0)
 ;
"RTN","RORDD01",33,0)
 ; REGNAME       Registry name
"RTN","RORDD01",34,0)
 ;
"RTN","RORDD01",35,0)
 ; MODE          1 - Set, 0 - Kill
"RTN","RORDD01",36,0)
 ;
"RTN","RORDD01",37,0)
ANC7996(SDA,REGNAME,MODE) ;
"RTN","RORDD01",38,0)
 I MODE  S MODE=($D(^RORDATA(799.6,SDA(1),3,"ANC"))>1)  D
"RTN","RORDD01",39,0)
 . S ^RORDATA(799.6,SDA(1),3,"ANC",$E(REGNAME,1,30),SDA)=""
"RTN","RORDD01",40,0)
 E  D  S MODE=($D(^RORDATA(799.6,SDA(1),3,"ANC"))>1)
"RTN","RORDD01",41,0)
 . K ^RORDATA(799.6,SDA(1),3,"ANC",$E(REGNAME,1,30),SDA)
"RTN","RORDD01",42,0)
 Q:MODE
"RTN","RORDD01",43,0)
 ;--- Re-index the main record (the "ADNAUTO" index, in particular)
"RTN","RORDD01",44,0)
 N DA,DIK
"RTN","RORDD01",45,0)
 S DIK="^RORDATA(799.6,",DIK(1)=".01",DA=SDA(1)
"RTN","RORDD01",46,0)
 D EN^DIK
"RTN","RORDD01",47,0)
 Q
"RTN","RORDD01",48,0)
 ;
"RTN","RORDD01",49,0)
 ;***** DELETES THE DATA ASSOCIATED WITH THE MAIN REGISTRY RECORD
"RTN","RORDD01",50,0)
 ;
"RTN","RORDD01",51,0)
 ; IEN           IEN of the registry record (file #798)
"RTN","RORDD01",52,0)
 ; PTIEN         Patient IEN
"RTN","RORDD01",53,0)
 ;
"RTN","RORDD01",54,0)
DEL798(IEN,PTIEN) ;
"RTN","RORDD01",55,0)
 N DA,DIK,I,PTDEL
"RTN","RORDD01",56,0)
 ;--- Delete the HIV record from the ROR HIV RECORD file (#799.4)
"RTN","RORDD01",57,0)
 I $D(^RORDATA(799.4,IEN))  S DIK="^RORDATA(799.4,",DA=IEN  D ^DIK
"RTN","RORDD01",58,0)
 ;--- Check if the patient is added to more than one registry
"RTN","RORDD01",59,0)
 S I="",PTDEL=1
"RTN","RORDD01",60,0)
 F  S I=$O(^RORDATA(798,"B",PTIEN,I))  Q:I=""  S:I'=IEN PTDEL=0
"RTN","RORDD01",61,0)
 ;--- Delete corresponding patient's records if they are not
"RTN","RORDD01",62,0)
 ;    referenced by other registries and the patient's record
"RTN","RORDD01",63,0)
 ;--- in the PATIENT file (#2) is not a "merged" one.
"RTN","RORDD01",64,0)
 I PTDEL  D:$G(^DPT(PTIEN,-9))'>0
"RTN","RORDD01",65,0)
 . ;--- Delete the record from the ROR PATIENT file
"RTN","RORDD01",66,0)
 . S DIK="^RORDATA(798.4,",DA=PTIEN  D ^DIK
"RTN","RORDD01",67,0)
 . ;--- Delete the record from the ROR PATIENT EVENTS file
"RTN","RORDD01",68,0)
 . S DIK="^RORDATA(798.3,",DA=PTIEN  D ^DIK
"RTN","RORDD01",69,0)
 Q
"RTN","RORDD01",70,0)
 ;
"RTN","RORDD01",71,0)
 ;***** RETURNS THE VALUE OF 'DATE SELECTED' COMPUTED FIELD
"RTN","RORDD01",72,0)
 ;
"RTN","RORDD01",73,0)
 ; IEN           IEN of the registry record (file #798)
"RTN","RORDD01",74,0)
 ;
"RTN","RORDD01",75,0)
DTSEL(IEN) ;
"RTN","RORDD01",76,0)
 N DTSEL
"RTN","RORDD01",77,0)
 ;--- Earliest date of a selection rule
"RTN","RORDD01",78,0)
 S DTSEL=$O(^RORDATA(798,IEN,1,"AD",""))\1
"RTN","RORDD01",79,0)
 ;--- If SELECTION RULE multiple is empty, return DATE ENTERED
"RTN","RORDD01",80,0)
 Q $S(DTSEL>0:DTSEL,1:$P($G(^RORDATA(798,IEN,0)),U,3)\1)
"RTN","RORDD01",81,0)
 ;
"RTN","RORDD01",82,0)
 ;***** STORE THE VALUE INTO THE FIELD
"RTN","RORDD01",83,0)
 ;
"RTN","RORDD01",84,0)
 ; FILE          Sub(file) number
"RTN","RORDD01",85,0)
 ; IENS          IENS of the record
"RTN","RORDD01",86,0)
 ; FIELD         Field number
"RTN","RORDD01",87,0)
 ; VALUE         Internal value to be assigned
"RTN","RORDD01",88,0)
 ;
"RTN","RORDD01",89,0)
FILE(FILE,IENS,FIELD,VALUE) ;
"RTN","RORDD01",90,0)
 N ROR8FDA,ROR8MSG,TMP
"RTN","RORDD01",91,0)
 S TMP=$S($E(IENS,$L(IENS))=",":IENS,1:IENS_",")
"RTN","RORDD01",92,0)
 S ROR8FDA(+FILE,TMP,+FIELD)=VALUE
"RTN","RORDD01",93,0)
 D FILE^DIE(,"ROR8FDA","ROR8MSG")
"RTN","RORDD01",94,0)
 Q
"RTN","RORDD01",95,0)
 ;
"RTN","RORDD01",96,0)
 ;***** STATUS OF THE HISTORICAL DATA DEFINITION
"RTN","RORDD01",97,0)
 ;
"RTN","RORDD01",98,0)
 ; HDEIEN        IEN of the HDE definition (file #799.6)
"RTN","RORDD01",99,0)
 ;
"RTN","RORDD01",100,0)
 ; Return Values:
"RTN","RORDD01",101,0)
 ;       ""  Unknown/Undefined
"RTN","RORDD01",102,0)
 ;        0  Inactive
"RTN","RORDD01",103,0)
 ;        1  Pending/Active
"RTN","RORDD01",104,0)
 ;        2  Completed
"RTN","RORDD01",105,0)
 ;
"RTN","RORDD01",106,0)
HDESTAT(HDEIEN) ;
"RTN","RORDD01",107,0)
 N BUF,STATUS,TYPE
"RTN","RORDD01",108,0)
 S HDEIEN=+HDEIEN,BUF=$G(^RORDATA(799.6,HDEIEN,0))
"RTN","RORDD01",109,0)
 S TYPE=+$P(BUF,U,2),STATUS=""
"RTN","RORDD01",110,0)
 ;=== Auto
"RTN","RORDD01",111,0)
 I TYPE=1  D  Q STATUS
"RTN","RORDD01",112,0)
 . N ADT
"RTN","RORDD01",113,0)
 . ;--- Activation Date
"RTN","RORDD01",114,0)
 . S ADT=+$P(BUF,U,7)
"RTN","RORDD01",115,0)
 . I (ADT'>0)!(ADT<DT)  S STATUS=0  Q
"RTN","RORDD01",116,0)
 . ;--- Check if all registries have completion dates
"RTN","RORDD01",117,0)
 . I $D(^RORDATA(799.6,HDEIEN,3,"ANC"))<10  S STATUS=2  Q
"RTN","RORDD01",118,0)
 . ;--- Pending or Active
"RTN","RORDD01",119,0)
 . S STATUS=1
"RTN","RORDD01",120,0)
 ;=== Manual
"RTN","RORDD01",121,0)
 I TYPE=2  D  Q STATUS
"RTN","RORDD01",122,0)
 . N TSKIEN,TSKSTAT
"RTN","RORDD01",123,0)
 . ;--- Check if any tasks are defined
"RTN","RORDD01",124,0)
 . I $O(^RORDATA(799.6,HDEIEN,4,0))'>0  S STATUS=0  Q
"RTN","RORDD01",125,0)
 . ;--- Check if all tasks have been completed
"RTN","RORDD01",126,0)
 . I $D(^RORDATA(799.6,HDEIEN,4,"ANC"))<10  S STATUS=2  Q
"RTN","RORDD01",127,0)
 . ;--- Pending, Active, or Errors
"RTN","RORDD01",128,0)
 . S STATUS=1
"RTN","RORDD01",129,0)
 ;=== Unknown or Undefined
"RTN","RORDD01",130,0)
 Q ""
"RTN","RORDD01",131,0)
 ;
"RTN","RORDD01",132,0)
 ;***** CHECKS IF THE LOCAL REGISTRY FIELD IS ACTIVE
"RTN","RORDD01",133,0)
 ;
"RTN","RORDD01",134,0)
 ; IEN           IEN of the local field definition (file #799.53)
"RTN","RORDD01",135,0)
 ;
"RTN","RORDD01",136,0)
 ; Return Values:
"RTN","RORDD01",137,0)
 ;        0  Inactivated
"RTN","RORDD01",138,0)
 ;        1  Active
"RTN","RORDD01",139,0)
 ;
"RTN","RORDD01",140,0)
LFACTIVE(IEN) ;
"RTN","RORDD01",141,0)
 N TMP
"RTN","RORDD01",142,0)
 S TMP=$G(^ROR(799.53,+IEN,0))  Q:TMP="" 0
"RTN","RORDD01",143,0)
 S TMP=$P(TMP,U,2)\1            Q:TMP'>0 1
"RTN","RORDD01",144,0)
 Q (TMP>DT)
"RTN","RORDD01",145,0)
 ;
"RTN","RORDD01",146,0)
 ;***** RETURNS THE VALUE OF 'LOCATION' COMPUTED FIELD
"RTN","RORDD01",147,0)
 ;
"RTN","RORDD01",148,0)
 ; IEN           IEN of the registry record (file #798)
"RTN","RORDD01",149,0)
 ;
"RTN","RORDD01",150,0)
LOCSEL(IEN) ;
"RTN","RORDD01",151,0)
 N DTSEL,SRIEN
"RTN","RORDD01",152,0)
 S DTSEL=$O(^RORDATA(798,IEN,1,"AD",""))  Q:DTSEL'>0 ""
"RTN","RORDD01",153,0)
 S SRIEN=$O(^RORDATA(798,IEN,1,"AD",DTSEL,""))
"RTN","RORDD01",154,0)
 Q $S(SRIEN>0:$P($G(^RORDATA(798,IEN,1,SRIEN,0)),U,3),1:"")
"RTN","RORDD01",155,0)
 ;
"RTN","RORDD01",156,0)
 ;***** RE-INDEXES ONE RECORD OF THE (SUB)FILE
"RTN","RORDD01",157,0)
 ;
"RTN","RORDD01",158,0)
 ; FILE          File number
"RTN","RORDD01",159,0)
 ;
"RTN","RORDD01",160,0)
 ; .DA           Reference to a local array of record IENs
"RTN","RORDD01",161,0)
 ;
"RTN","RORDD01",162,0)
 ; [FIELD]       Optional field number. If it is provided, then only
"RTN","RORDD01",163,0)
 ;               cross-references for this field are re-indexed.
"RTN","RORDD01",164,0)
 ;
"RTN","RORDD01",165,0)
REINDEX1(FILE,DA,FIELD) ;
"RTN","RORDD01",166,0)
 N DIK
"RTN","RORDD01",167,0)
 S DIK=$$ROOT^DILFD(FILE,$$IENS^DILF(.DA))
"RTN","RORDD01",168,0)
 S:$G(FIELD)>0 DIK(1)=+FIELD
"RTN","RORDD01",169,0)
 D EN^DIK
"RTN","RORDD01",170,0)
 Q
"RTN","RORDD01",171,0)
 ;
"RTN","RORDD01",172,0)
 ;***** REACTS ON THE REGISTRY RECORD STATUS CHANGES
"RTN","RORDD01",173,0)
 ;
"RTN","RORDD01",174,0)
 ; MODE          Execution mode (1 - Set, 2 - Kill)
"RTN","RORDD01",175,0)
 ;
"RTN","RORDD01",176,0)
 ; IEN           Internal entry number of the registry record
"RTN","RORDD01",177,0)
 ;
"RTN","RORDD01",178,0)
 ; STOLD         Old and new internal values of the STATUS field
"RTN","RORDD01",179,0)
 ; STNEW
"RTN","RORDD01",180,0)
 ;
"RTN","RORDD01",181,0)
RST798(MODE,IEN,STOLD,STNEW) ;
"RTN","RORDD01",182,0)
 Q:STNEW=STOLD
"RTN","RORDD01",183,0)
 N IENS,RORFDA,RORMSG
"RTN","RORDD01",184,0)
 S IENS=(+IEN)_","
"RTN","RORDD01",185,0)
 ;---
"RTN","RORDD01",186,0)
 D
"RTN","RORDD01",187,0)
 . ;--- Deleted
"RTN","RORDD01",188,0)
 . I STNEW=5  D  Q
"RTN","RORDD01",189,0)
 . . S RORFDA(798,IENS,6)=$$NOW^XLFDT
"RTN","RORDD01",190,0)
 . . S:$G(DUZ)>0 RORFDA(798,IENS,6.1)=+DUZ
"RTN","RORDD01",191,0)
 . ;--- Confirmed
"RTN","RORDD01",192,0)
 . I STOLD=4,'STNEW  D  Q
"RTN","RORDD01",193,0)
 . . S RORFDA(798,IENS,2)=$$NOW^XLFDT
"RTN","RORDD01",194,0)
 . . S:$G(DUZ)>0 RORFDA(798,IENS,2.1)=+DUZ
"RTN","RORDD01",195,0)
 ;---
"RTN","RORDD01",196,0)
 D:$D(RORFDA)>1 FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORDD01",197,0)
 Q
"RTN","RORDD01",198,0)
 ;
"RTN","RORDD01",199,0)
 ;***** GENERATES THE INDEX VALUE OF THE REPORT ELEMENT
"RTN","RORDD01",200,0)
 ;
"RTN","RORDD01",201,0)
 ; MODE          Sort mode (see the SORT BY field of the REPORT
"RTN","RORDD01",202,0)
 ;               ELEMENT multiple of the ROR TASK file for details)
"RTN","RORDD01",203,0)
 ; VAL           Value of the report element
"RTN","RORDD01",204,0)
 ;
"RTN","RORDD01",205,0)
SORTBY(MODE,VAL) ;
"RTN","RORDD01",206,0)
 Q $S(MODE=3:+VAL,VAL="":" ",MODE=2:$E(VAL,1,29)_" ",1:$E(VAL,1,30))
"RTN","RORHDT")
0^19^B15590264^B15352700
"RTN","RORHDT",1,0)
RORHDT ;HCIOFO/SG - HISTORICAL DATA EXTRACTION ; 3/14/06 10:54am
"RTN","RORHDT",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHDT",3,0)
 ;
"RTN","RORHDT",4,0)
 ; RORHDT -------------- HISTORICAL DATA EXTRACTION DESCRIPTOR
"RTN","RORHDT",5,0)
 ;
"RTN","RORHDT",6,0)
 ; RORHDT("BHS")         If this node has a non-zero value, the
"RTN","RORHDT",7,0)
 ;                       $$COMMIT^RORHDT05 function outputs a BHS
"RTN","RORHDT",8,0)
 ;                       segment before writing the data from the
"RTN","RORHDT",9,0)
 ;                       ^TMP("HLS",$J) node. Then it kills the
"RTN","RORHDT",10,0)
 ;                       RORHDT("BHS") node.
"RTN","RORHDT",11,0)
 ;
"RTN","RORHDT",12,0)
 ; See also descriptions of the ^TMP("RORHDT") node in the ^ROR01
"RTN","RORHDT",13,0)
 ; routine.
"RTN","RORHDT",14,0)
 ;
"RTN","RORHDT",15,0)
 Q
"RTN","RORHDT",16,0)
 ;
"RTN","RORHDT",17,0)
 ;***** (RE)CREATES A DATA EXTRACTION TASK TABLE
"RTN","RORHDT",18,0)
CREATE ;
"RTN","RORHDT",19,0)
 N RORERRDL      ; Default error location
"RTN","RORHDT",20,0)
 N RORERROR      ; Error processing data
"RTN","RORHDT",21,0)
 N RORPARM       ; Application parameters
"RTN","RORHDT",22,0)
 ;
"RTN","RORHDT",23,0)
 N HDEIEN,RC
"RTN","RORHDT",24,0)
 S RORPARM("ERR")=1
"RTN","RORHDT",25,0)
 ;S RORPARM("DEBUG")=2 ; Remove the first ';' to start in debug mode
"RTN","RORHDT",26,0)
 D CLEAR^RORERR("CREATE^RORHDT")
"RTN","RORHDT",27,0)
 ;--- Select a data extraction
"RTN","RORHDT",28,0)
 S HDEIEN=$$SELHDE^RORHDTUT()  G:HDEIEN<0 ERROR
"RTN","RORHDT",29,0)
 Q:'HDEIEN
"RTN","RORHDT",30,0)
 ;--- Request a confirmation
"RTN","RORHDT",31,0)
 S RC=$$CREATE^RORHDTAC(HDEIEN)
"RTN","RORHDT",32,0)
 I RC  G:RC<0 ERROR  Q
"RTN","RORHDT",33,0)
 ;--- Create a new task table
"RTN","RORHDT",34,0)
 S RC=$$CREATE^RORHDT02(HDEIEN)    G:RC<0 ERROR
"RTN","RORHDT",35,0)
 W:'RC !,"New task table has been created."
"RTN","RORHDT",36,0)
 Q
"RTN","RORHDT",37,0)
 ;
"RTN","RORHDT",38,0)
 ;***** EDITS THE EXTRACTION DEFINITION
"RTN","RORHDT",39,0)
EDITHDE ;
"RTN","RORHDT",40,0)
 N DA,DIE,DIDEL,DR,DTOUT,NATIONAL
"RTN","RORHDT",41,0)
 ;--- Select a data extraction
"RTN","RORHDT",42,0)
 S DA=$$SELHDE^RORHDTUT("A",,.NATIONAL)  G:DA<0 ERROR
"RTN","RORHDT",43,0)
 Q:'DA
"RTN","RORHDT",44,0)
 ;--- Edit the parameters
"RTN","RORHDT",45,0)
 S DIE=$$ROOT^DILFD(799.6)
"RTN","RORHDT",46,0)
 S DR="[RORHDT EDIT "_$S(NATIONAL:"NATIONAL EXTRACT]",1:"EXTRACTION]")
"RTN","RORHDT",47,0)
 W !  D ^DIE
"RTN","RORHDT",48,0)
 Q
"RTN","RORHDT",49,0)
 ;
"RTN","RORHDT",50,0)
 ;***** DISPLAYS THE ERRORS
"RTN","RORHDT",51,0)
ERROR ;
"RTN","RORHDT",52,0)
 D DSPSTK^RORERR()
"RTN","RORHDT",53,0)
 Q
"RTN","RORHDT",54,0)
 ;
"RTN","RORHDT",55,0)
 ;***** DISPLAYS THE LATEST LOG OF THE TASK
"RTN","RORHDT",56,0)
LOG ;
"RTN","RORHDT",57,0)
 N RORERRDL      ; Default error location
"RTN","RORHDT",58,0)
 N RORERROR      ; Error processing data
"RTN","RORHDT",59,0)
 N RORPARM       ; Application parameters
"RTN","RORHDT",60,0)
 ;
"RTN","RORHDT",61,0)
 N HDEIEN,POP,RC,TASKIEN
"RTN","RORHDT",62,0)
 S RORPARM("ERR")=1
"RTN","RORHDT",63,0)
 ;S RORPARM("DEBUG")=2 ; Remove the first ';' to start in debug mode
"RTN","RORHDT",64,0)
 D CLEAR^RORERR("LOG^RORHDT")
"RTN","RORHDT",65,0)
 ;--- Select data extraction and task
"RTN","RORHDT",66,0)
 S HDEIEN=$$SELHDE^RORHDTUT()           G:HDEIEN<0 ERROR
"RTN","RORHDT",67,0)
 Q:'HDEIEN
"RTN","RORHDT",68,0)
 S TASKIEN=$$SELTASK^RORHDTUT(HDEIEN)  G:TASKIEN<0 ERROR
"RTN","RORHDT",69,0)
 Q:'TASKIEN
"RTN","RORHDT",70,0)
 ;--- Display the log
"RTN","RORHDT",71,0)
 S RC=$$LOG^RORHDT01(HDEIEN,TASKIEN)        G:RC<0 ERROR
"RTN","RORHDT",72,0)
 Q
"RTN","RORHDT",73,0)
 ;
"RTN","RORHDT",74,0)
 ;***** STARTS A DATA EXTRACTION TASK
"RTN","RORHDT",75,0)
START ;
"RTN","RORHDT",76,0)
 N RORERRDL      ; Default error location
"RTN","RORHDT",77,0)
 N RORERROR      ; Error processing data
"RTN","RORHDT",78,0)
 N RORPARM       ; Application parameters
"RTN","RORHDT",79,0)
 ;
"RTN","RORHDT",80,0)
 N FAM,HDEIEN,RC,SDT,TASKIEN
"RTN","RORHDT",81,0)
 S RORPARM("ERR")=1
"RTN","RORHDT",82,0)
 ;S RORPARM("DEBUG")=2 ; Remove the first ';' to start in debug mode
"RTN","RORHDT",83,0)
 D CLEAR^RORERR("START^RORHDT")
"RTN","RORHDT",84,0)
 ;--- Select data extraction and task
"RTN","RORHDT",85,0)
 S HDEIEN=$$SELHDE^RORHDTUT()           G:HDEIEN<0 ERROR
"RTN","RORHDT",86,0)
 Q:'HDEIEN
"RTN","RORHDT",87,0)
 S TASKIEN=$$SELTASK^RORHDTUT(HDEIEN)  G:TASKIEN<0 ERROR
"RTN","RORHDT",88,0)
 Q:'TASKIEN
"RTN","RORHDT",89,0)
 ;--- Double-check the task status, and request confirmation(s)
"RTN","RORHDT",90,0)
 ;--- and start date/time for the task from the user
"RTN","RORHDT",91,0)
 S RC=$$START^RORHDTAC(HDEIEN,TASKIEN,.FAM,.SDT)
"RTN","RORHDT",92,0)
 I RC  G:RC<0 ERROR  Q
"RTN","RORHDT",93,0)
 ;--- Start the task
"RTN","RORHDT",94,0)
 S RC=$$START^RORHDT03(HDEIEN,TASKIEN,FAM,SDT)  G:RC<0 ERROR
"RTN","RORHDT",95,0)
 Q
"RTN","RORHDT",96,0)
 ;
"RTN","RORHDT",97,0)
 ;***** DISPLAYS DATA EXTRACTION STATUS
"RTN","RORHDT",98,0)
STATUS ;
"RTN","RORHDT",99,0)
 N RORERRDL      ; Default error location
"RTN","RORHDT",100,0)
 N RORERROR      ; Error processing data
"RTN","RORHDT",101,0)
 N RORPARM       ; Application parameters
"RTN","RORHDT",102,0)
 ;
"RTN","RORHDT",103,0)
 N DIR,HDEIEN,POP,RC,TMP
"RTN","RORHDT",104,0)
 S RORPARM("ERR")=1
"RTN","RORHDT",105,0)
 ;S RORPARM("DEBUG")=2 ; Remove the first ';' to start in debug mode
"RTN","RORHDT",106,0)
 D CLEAR^RORERR("STATUS^RORHDT")
"RTN","RORHDT",107,0)
 ;--- Select a data extraction
"RTN","RORHDT",108,0)
 S HDEIEN=$$SELHDE^RORHDTUT()  G:HDEIEN<0 ERROR
"RTN","RORHDT",109,0)
 Q:'HDEIEN
"RTN","RORHDT",110,0)
 ;--- Display status of the data extraction
"RTN","RORHDT",111,0)
 S RC=$$STATUS^RORHDT01(HDEIEN)
"RTN","RORHDT",112,0)
 W !  D PAGE^RORHDTUT(),^%ZISC     G:RC<0 ERROR
"RTN","RORHDT",113,0)
 Q
"RTN","RORHDT",114,0)
 ;
"RTN","RORHDT",115,0)
 ;***** STOPS A DATA EXTRACTION TASK
"RTN","RORHDT",116,0)
STOP ;
"RTN","RORHDT",117,0)
 N RORERRDL      ; Default error location
"RTN","RORHDT",118,0)
 N RORERROR      ; Error processing data
"RTN","RORHDT",119,0)
 N RORPARM       ; Application parameters
"RTN","RORHDT",120,0)
 ;
"RTN","RORHDT",121,0)
 N HDEIEN,RC,TASKIEN
"RTN","RORHDT",122,0)
 S RORPARM("ERR")=1
"RTN","RORHDT",123,0)
 ;S RORPARM("DEBUG")=2 ; Remove the first ';' to start in debug mode
"RTN","RORHDT",124,0)
 D CLEAR^RORERR("STOP^RORHDT")
"RTN","RORHDT",125,0)
 ;--- Select data extraction and task
"RTN","RORHDT",126,0)
 S HDEIEN=$$SELHDE^RORHDTUT()           G:HDEIEN<0 ERROR
"RTN","RORHDT",127,0)
 Q:'HDEIEN
"RTN","RORHDT",128,0)
 S TASKIEN=$$SELTASK^RORHDTUT(HDEIEN)  G:TASKIEN<0 ERROR
"RTN","RORHDT",129,0)
 Q:'TASKIEN
"RTN","RORHDT",130,0)
 ;--- Stop the task
"RTN","RORHDT",131,0)
 S RC=$$STOP^RORHDTAC(HDEIEN,TASKIEN)
"RTN","RORHDT",132,0)
 I RC  G:RC<0 ERROR  Q
"RTN","RORHDT",133,0)
 S RC=$$STOP^RORHDT03(HDEIEN,TASKIEN)       G:RC<0 ERROR
"RTN","RORHDT",134,0)
 Q
"RTN","RORHDTAC")
0^20^B10129547^B8906685
"RTN","RORHDTAC",1,0)
RORHDTAC ;HCIOFO/SG - DATA EXTRACTION ACTION CONFIRMATIONS ; 3/14/06 11:07am
"RTN","RORHDTAC",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHDTAC",3,0)
 ;
"RTN","RORHDTAC",4,0)
 Q
"RTN","RORHDTAC",5,0)
 ;
"RTN","RORHDTAC",6,0)
 ;***** CONFIRMATION TO CREATE A NEW TASK TABLE
"RTN","RORHDTAC",7,0)
 ;
"RTN","RORHDTAC",8,0)
 ; HDEIEN        Data Extract IEN
"RTN","RORHDTAC",9,0)
 ;
"RTN","RORHDTAC",10,0)
 ; Return Values:
"RTN","RORHDTAC",11,0)
 ;       <0  Error code
"RTN","RORHDTAC",12,0)
 ;        0  Ok
"RTN","RORHDTAC",13,0)
 ;        1  Cancel
"RTN","RORHDTAC",14,0)
 ;
"RTN","RORHDTAC",15,0)
CREATE(HDEIEN) ;
"RTN","RORHDTAC",16,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,IENS,RC,RORBUF,RORMSG,X,Y
"RTN","RORHDTAC",17,0)
 ;--- Display status of the data extract
"RTN","RORHDTAC",18,0)
 S RC=$$STATUS^RORHDT01(HDEIEN)  Q:RC<0 RC
"RTN","RORHDTAC",19,0)
 ;--- Check if registry task table is not empty
"RTN","RORHDTAC",20,0)
 S IENS=","_(+HDEIEN)_","
"RTN","RORHDTAC",21,0)
 D LIST^DIC(799.64,IENS,"@","Q",1,,,"B",,,"RORBUF","RORMSG")
"RTN","RORHDTAC",22,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,799.64,IENS)
"RTN","RORHDTAC",23,0)
 ;--- Ask for a confirmation to overwrite
"RTN","RORHDTAC",24,0)
 I $G(RORBUF("DILIST",0))>0  D  Q:RC 1
"RTN","RORHDTAC",25,0)
 . K DIR  S DIR(0)="Y"
"RTN","RORHDTAC",26,0)
 . S DIR("A")="Overwrite the existing task table"
"RTN","RORHDTAC",27,0)
 . S DIR("B")="NO"
"RTN","RORHDTAC",28,0)
 . W !  D ^DIR  S RC=$D(DIRUT)!'$G(Y)
"RTN","RORHDTAC",29,0)
 Q 0
"RTN","RORHDTAC",30,0)
 ;
"RTN","RORHDTAC",31,0)
 ;***** CONFIRMATIONS TO START THE TASK
"RTN","RORHDTAC",32,0)
 ;
"RTN","RORHDTAC",33,0)
 ; HDEIEN        Data Extract IEN
"RTN","RORHDTAC",34,0)
 ; TASKIEN       Task IEN
"RTN","RORHDTAC",35,0)
 ; .FAM          File Access Mode is returned via this parameter
"RTN","RORHDTAC",36,0)
 ; .SDT          Start Date/Time is returned via this parameter
"RTN","RORHDTAC",37,0)
 ;
"RTN","RORHDTAC",38,0)
 ; Return Values:
"RTN","RORHDTAC",39,0)
 ;       <0  Error code
"RTN","RORHDTAC",40,0)
 ;        0  Ok
"RTN","RORHDTAC",41,0)
 ;        1  Cancel
"RTN","RORHDTAC",42,0)
 ;
"RTN","RORHDTAC",43,0)
START(HDEIEN,TASKIEN,FAM,SDT) ;
"RTN","RORHDTAC",44,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,FILE,OUTDIR,RC,RORDST,RORSRC,STATUS,X,Y
"RTN","RORHDTAC",45,0)
 S FAM="",SDT=""
"RTN","RORHDTAC",46,0)
 ;--- Check status of the task
"RTN","RORHDTAC",47,0)
 S STATUS=+$$TASKSTAT^RORHDTUT(HDEIEN,TASKIEN)
"RTN","RORHDTAC",48,0)
 I STATUS=1  D  Q:RC $S(RC<0:RC,1:1)
"RTN","RORHDTAC",49,0)
 . K DIR  S DIR(0)="Y"
"RTN","RORHDTAC",50,0)
 . S DIR("A")="The task is pending. Do you want to reschedule it"
"RTN","RORHDTAC",51,0)
 . S DIR("B")="NO"
"RTN","RORHDTAC",52,0)
 . D ^DIR  S RC=$D(DIRUT)!'$G(Y)
"RTN","RORHDTAC",53,0)
 . S:'RC RC=$$STOP^RORHDT03(HDEIEN,TASKIEN)
"RTN","RORHDTAC",54,0)
 I STATUS=2  D  Q 1
"RTN","RORHDTAC",55,0)
 . W !,"The task is running already"
"RTN","RORHDTAC",56,0)
 I STATUS=3  D  Q:RC 1
"RTN","RORHDTAC",57,0)
 . K DIR  S DIR(0)="Y"
"RTN","RORHDTAC",58,0)
 . S DIR("A")="The task is completed. Do you want to rerun it"
"RTN","RORHDTAC",59,0)
 . S DIR("B")="NO"
"RTN","RORHDTAC",60,0)
 . D ^DIR  S RC=$D(DIRUT)!'$G(Y)
"RTN","RORHDTAC",61,0)
 ;--- Ask the user for the start date/time
"RTN","RORHDTAC",62,0)
 K DIR
"RTN","RORHDTAC",63,0)
 S X=$$FMADD^XLFDT($$DT^XLFDT,30)
"RTN","RORHDTAC",64,0)
 S DIR(0)="D^NOW:"_X_":AEFNRSX",DIR("B")="NOW"
"RTN","RORHDTAC",65,0)
 S DIR("A")="Run the task"
"RTN","RORHDTAC",66,0)
 D ^DIR  Q:$D(DIRUT)!'$G(Y) 1
"RTN","RORHDTAC",67,0)
 S SDT=+Y
"RTN","RORHDTAC",68,0)
 ;--- Check if the output file exists already
"RTN","RORHDTAC",69,0)
 S RC=$$TASKFILE^RORHDTUT(HDEIEN,TASKIEN,.OUTDIR,.FILE)  Q:RC<0 RC
"RTN","RORHDTAC",70,0)
 S RORSRC(FILE)=""
"RTN","RORHDTAC",71,0)
 S RC=$$LIST^%ZISH(OUTDIR,"RORSRC","RORDST")
"RTN","RORHDTAC",72,0)
 I RC  S:$D(RORDST)>1 FAM="N"
"RTN","RORHDTAC",73,0)
 ;--- Generate the new file name
"RTN","RORHDTAC",74,0)
 I FAM["N"  D  Q:RC<0 RC
"RTN","RORHDTAC",75,0)
 . S RC=$$NEWFILE^RORHDTUT(HDEIEN,TASKIEN,.FILE)
"RTN","RORHDTAC",76,0)
 . W:'RC !,"Data will be written to the '"_FILE_"' file."
"RTN","RORHDTAC",77,0)
 ;---
"RTN","RORHDTAC",78,0)
 Q 0
"RTN","RORHDTAC",79,0)
 ;
"RTN","RORHDTAC",80,0)
 ;***** CONFIRMATION TO STOP THE TASK
"RTN","RORHDTAC",81,0)
 ;
"RTN","RORHDTAC",82,0)
 ; HDEIEN        Data Extract IEN
"RTN","RORHDTAC",83,0)
 ; TASKIEN       Task IEN
"RTN","RORHDTAC",84,0)
 ;
"RTN","RORHDTAC",85,0)
 ; Return Values:
"RTN","RORHDTAC",86,0)
 ;       <0  Error code
"RTN","RORHDTAC",87,0)
 ;        0  Stop the task
"RTN","RORHDTAC",88,0)
 ;        1  Cancel
"RTN","RORHDTAC",89,0)
 ;
"RTN","RORHDTAC",90,0)
STOP(HDEIEN,TASKIEN) ;
"RTN","RORHDTAC",91,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,IENS,STATUS,X,Y,ZTSK
"RTN","RORHDTAC",92,0)
 ;--- Check status of the task
"RTN","RORHDTAC",93,0)
 S STATUS=+$$TASKSTAT^RORHDTUT(HDEIEN,TASKIEN)
"RTN","RORHDTAC",94,0)
 ;--- Quit if the task is not running, pending, nor suspended
"RTN","RORHDTAC",95,0)
 Q:(STATUS'=1)&(STATUS'=2)&(STATUS'=102) 1
"RTN","RORHDTAC",96,0)
 ;--- Get the task number
"RTN","RORHDTAC",97,0)
 S IENS=(+TASKIEN)_","_(+HDEIEN)_","
"RTN","RORHDTAC",98,0)
 S ZTSK=$$GET1^DIQ(799.64,IENS,.02,,,"RORMSG")
"RTN","RORHDTAC",99,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,799.64,IENS)
"RTN","RORHDTAC",100,0)
 ;--- Ask for the final confirmation
"RTN","RORHDTAC",101,0)
 K DIR  S DIR(0)="Y"
"RTN","RORHDTAC",102,0)
 S DIR("A")=$S(STATUS=1:"Dequeue",1:"Stop")_" the task #"_ZTSK
"RTN","RORHDTAC",103,0)
 S DIR("B")="NO"
"RTN","RORHDTAC",104,0)
 D ^DIR
"RTN","RORHDTAC",105,0)
 Q $D(DIRUT)!'$G(Y)
"RTN","RORHL01")
0^1^B6979716^B7061029
"RTN","RORHL01",1,0)
RORHL01 ;HOIFO/CRT - HL7 PATIENT DATA: PID,ZSP,ZRD ; 6/19/06 2:08pm
"RTN","RORHL01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL01",3,0)
 ;
"RTN","RORHL01",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL01",5,0)
 ;
"RTN","RORHL01",6,0)
 ; #263          $$EN^VAFHLPID (controlled)
"RTN","RORHL01",7,0)
 ; #3630         BLDPID^VAFCQRY (controlled)
"RTN","RORHL01",8,0)
 ; #4535         EN^VAFHLZRD (private)
"RTN","RORHL01",9,0)
 ; #4536         $$EN^VAFHLZSP (private)
"RTN","RORHL01",10,0)
 ; #10035        Read access to the PATIENT file (supported)
"RTN","RORHL01",11,0)
 ;
"RTN","RORHL01",12,0)
 Q
"RTN","RORHL01",13,0)
 ;
"RTN","RORHL01",14,0)
 ;***** PID SEGMENT BUILDER
"RTN","RORHL01",15,0)
 ;
"RTN","RORHL01",16,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL01",17,0)
 ;
"RTN","RORHL01",18,0)
 ; Return Values:
"RTN","RORHL01",19,0)
 ;       <0  Error Code
"RTN","RORHL01",20,0)
 ;        0  Ok
"RTN","RORHL01",21,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL01",22,0)
 ;
"RTN","RORHL01",23,0)
PID(RORDFN) ;
"RTN","RORHL01",24,0)
 N CS,ERRCNT,I,PTID,RC,RORBUF,RORMSG,RPS,SCS,SEG,TMP
"RTN","RORHL01",25,0)
 S (ERRCNT,RC)=0
"RTN","RORHL01",26,0)
 D ECH^RORHL7(.CS,.SCS,.RPS)
"RTN","RORHL01",27,0)
 ;
"RTN","RORHL01",28,0)
 ;--- Check if the patient exists
"RTN","RORHL01",29,0)
 S RORDFN=+$G(RORDFN)
"RTN","RORHL01",30,0)
 I '$D(^DPT(RORDFN,0))  D  Q RC
"RTN","RORHL01",31,0)
 . S RC=$$ERROR^RORERR(-36,,,RORDFN,2)
"RTN","RORHL01",32,0)
 ;
"RTN","RORHL01",33,0)
 ;--- Call Standard PID Segment builder
"RTN","RORHL01",34,0)
 S TMP="3,5,7,8,10,11,19,22,29"
"RTN","RORHL01",35,0)
 D BLDPID^VAFCQRY(RORDFN,"",TMP,.RORBUF,.RORHL,.RORMSG)
"RTN","RORHL01",36,0)
 ;---
"RTN","RORHL01",37,0)
 D LOADSEG^RORHL7A(.SEG,"RORBUF")
"RTN","RORHL01",38,0)
 ;
"RTN","RORHL01",39,0)
 ;--- PID-3 Patient Identifiers
"RTN","RORHL01",40,0)
 S PTID=""
"RTN","RORHL01",41,0)
 F I=1:1  S TMP=$P(SEG(3),RPS,I)  Q:TMP=""  D
"RTN","RORHL01",42,0)
 . S:"NI,PI"[$P(TMP,CS,5) PTID=PTID_RPS_TMP
"RTN","RORHL01",43,0)
 S SEG(3)=$P(PTID,RPS,2,99)
"RTN","RORHL01",44,0)
 ;
"RTN","RORHL01",45,0)
 ;--- PID-5 Remove the Patient Name
"RTN","RORHL01",46,0)
 S SEG(5)=""
"RTN","RORHL01",47,0)
 ;
"RTN","RORHL01",48,0)
 ;--- PID-10 Send the old race if the new format is not available
"RTN","RORHL01",49,0)
 I $G(SEG(10))?.""""  D
"RTN","RORHL01",50,0)
 . N VAFPID
"RTN","RORHL01",51,0)
 . S TMP=$$EN^VAFHLPID(RORDFN,"10")
"RTN","RORHL01",52,0)
 . S:$G(VAFPID(1))'="" RORSEG=RORSEG_VAFPID(1)
"RTN","RORHL01",53,0)
 . S SEG(10)=$P(TMP,HLFS,11)
"RTN","RORHL01",54,0)
 ;
"RTN","RORHL01",55,0)
 ;--- PID-11 Remove Address (leave ZIP only)
"RTN","RORHL01",56,0)
 S SEG(11)=CS_CS_CS_CS_$P($G(SEG(11)),CS,5)
"RTN","RORHL01",57,0)
 ;
"RTN","RORHL01",58,0)
 ;--- PID-19 Encrypt SSN
"RTN","RORHL01",59,0)
 S SEG(19)=$$XOR^RORUTL03($G(SEG(19)))
"RTN","RORHL01",60,0)
 ;
"RTN","RORHL01",61,0)
 ;--- Store the segment
"RTN","RORHL01",62,0)
 D ADDSEG^RORHL7(.SEG)
"RTN","RORHL01",63,0)
 Q ERRCNT
"RTN","RORHL01",64,0)
 ;
"RTN","RORHL01",65,0)
 ;***** ZSP SEGMENT BUILDER
"RTN","RORHL01",66,0)
 ;
"RTN","RORHL01",67,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL01",68,0)
 ;
"RTN","RORHL01",69,0)
 ; Return Values:
"RTN","RORHL01",70,0)
 ;       <0  Error Code
"RTN","RORHL01",71,0)
 ;        0  Ok
"RTN","RORHL01",72,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL01",73,0)
 ;
"RTN","RORHL01",74,0)
ZSP(RORDFN) ;
"RTN","RORHL01",75,0)
 N RC,RORFLDS,RORSEG
"RTN","RORHL01",76,0)
 S RC=0
"RTN","RORHL01",77,0)
 ;
"RTN","RORHL01",78,0)
 ;--- Check if the patient exists
"RTN","RORHL01",79,0)
 S RORDFN=+$G(RORDFN)
"RTN","RORHL01",80,0)
 I '$D(^DPT(RORDFN,0))  D  Q RC
"RTN","RORHL01",81,0)
 . S RC=$$ERROR^RORERR(-36,,,RORDFN,2)
"RTN","RORHL01",82,0)
 ;
"RTN","RORHL01",83,0)
 S RORFLDS="1,2,3,4" ; Default HL7 fields
"RTN","RORHL01",84,0)
 ;
"RTN","RORHL01",85,0)
 ;--- Call Standard ZSP Segment Builder
"RTN","RORHL01",86,0)
 S RORSEG=$$EN^VAFHLZSP(RORDFN)
"RTN","RORHL01",87,0)
 ;
"RTN","RORHL01",88,0)
 ;--- Store the segment
"RTN","RORHL01",89,0)
 D ADDSEG^RORHL7(.RORSEG,"C")
"RTN","RORHL01",90,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORHL01",91,0)
 ;
"RTN","RORHL01",92,0)
 ;***** ZRD SEGMENT BUILDER
"RTN","RORHL01",93,0)
 ;
"RTN","RORHL01",94,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL01",95,0)
 ;
"RTN","RORHL01",96,0)
 ; Return Values:
"RTN","RORHL01",97,0)
 ;       <0  Error Code
"RTN","RORHL01",98,0)
 ;        0  Ok
"RTN","RORHL01",99,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL01",100,0)
 ;
"RTN","RORHL01",101,0)
ZRD(RORDFN) ;
"RTN","RORHL01",102,0)
 N I,RC,RORFLDS,RORSEG
"RTN","RORHL01",103,0)
 S RC=0
"RTN","RORHL01",104,0)
 ;
"RTN","RORHL01",105,0)
 ;--- Check if the patient exists
"RTN","RORHL01",106,0)
 S RORDFN=+$G(RORDFN)
"RTN","RORHL01",107,0)
 I '$D(^DPT(RORDFN,0))  D  Q RC
"RTN","RORHL01",108,0)
 . S RC=$$ERROR^RORERR(-36,,,RORDFN,2)
"RTN","RORHL01",109,0)
 ;
"RTN","RORHL01",110,0)
 S RORFLDS="1,2,3,4" ; Default HL7 fields
"RTN","RORHL01",111,0)
 ;
"RTN","RORHL01",112,0)
 ;--- Call Standard ZRD Segment Builder
"RTN","RORHL01",113,0)
 D EN^VAFHLZRD(RORDFN,RORFLDS,,HLFS,"RORSEG")
"RTN","RORHL01",114,0)
 ;
"RTN","RORHL01",115,0)
 ;--- Store the segment(s)
"RTN","RORHL01",116,0)
 S I=""
"RTN","RORHL01",117,0)
 F  S I=$O(RORSEG(I))  Q:I=""  Q:$P($G(RORSEG(I,0)),HLFS,3)=""  D
"RTN","RORHL01",118,0)
 . D ADDSEG^RORHL7(RORSEG(I,0),"C")
"RTN","RORHL01",119,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORHL03")
0^13^B37781969^B34671095
"RTN","RORHL03",1,0)
RORHL03 ;HOIFO/CRT - HL7 PHARMACY: ORC,RXE ; 5/30/06 8:35am
"RTN","RORHL03",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL03",3,0)
 ;
"RTN","RORHL03",4,0)
 ; Routines RORHL03* use the following IAs:
"RTN","RORHL03",5,0)
 ;
"RTN","RORHL03",6,0)
 ; #93-A         Get stop code from the file #44 (controlled)
"RTN","RORHL03",7,0)
 ; #1876         Read access to file #59
"RTN","RORHL03",8,0)
 ; #2400         OCL^PSOORRL and OEL^PSOORRL (controlled)
"RTN","RORHL03",9,0)
 ; #4820         RX^PSO52API (supported)
"RTN","RORHL03",10,0)
 ; #4826         PSS432^PSS55 and PSS436^PSS55 (supported)
"RTN","RORHL03",11,0)
 ; #10060        Read access to file #200 (supported)
"RTN","RORHL03",12,0)
 ; #10090        Read access to file #4 (supported)
"RTN","RORHL03",13,0)
 ;
"RTN","RORHL03",14,0)
 Q
"RTN","RORHL03",15,0)
 ;
"RTN","RORHL03",16,0)
 ;***** PHARMACY DATA SEGMENT BUILDER
"RTN","RORHL03",17,0)
 ;
"RTN","RORHL03",18,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL03",19,0)
 ;
"RTN","RORHL03",20,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL03",21,0)
 ;               data extraction time frames are stored.
"RTN","RORHL03",22,0)
 ;
"RTN","RORHL03",23,0)
 ; Return Values:
"RTN","RORHL03",24,0)
 ;       <0  Error Code
"RTN","RORHL03",25,0)
 ;        0  Ok
"RTN","RORHL03",26,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL03",27,0)
 ;
"RTN","RORHL03",28,0)
 ; The ^TMP("PS",$J) global node is used by this function.
"RTN","RORHL03",29,0)
 ;
"RTN","RORHL03",30,0)
EN1(RORDFN,DXDTS) ;
"RTN","RORHL03",31,0)
 N ENDT,ERRCNT,IDX,RC,STDT
"RTN","RORHL03",32,0)
 S (ERRCNT,RC)=0
"RTN","RORHL03",33,0)
 ;---
"RTN","RORHL03",34,0)
 S IDX=0
"RTN","RORHL03",35,0)
 F  S IDX=$O(DXDTS(6,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL03",36,0)
 . S STDT=$P(DXDTS(6,IDX),U),ENDT=$P(DXDTS(6,IDX),U,2)
"RTN","RORHL03",37,0)
 . S TMP=$$EN2(RORDFN,STDT,ENDT)
"RTN","RORHL03",38,0)
 . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL03",39,0)
 ;---
"RTN","RORHL03",40,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL03",41,0)
 ;
"RTN","RORHL03",42,0)
 ;***** PHARMACY DATA SEGMENT BUILDER
"RTN","RORHL03",43,0)
 ;
"RTN","RORHL03",44,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL03",45,0)
 ;
"RTN","RORHL03",46,0)
 ; RORSTDT       Start Date/Time (Fileman)
"RTN","RORHL03",47,0)
 ; RORENDT       End Date/Time (Fileman)
"RTN","RORHL03",48,0)
 ;
"RTN","RORHL03",49,0)
 ; Return Values:
"RTN","RORHL03",50,0)
 ;       <0  Error Code
"RTN","RORHL03",51,0)
 ;        0  Ok
"RTN","RORHL03",52,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL03",53,0)
 ;
"RTN","RORHL03",54,0)
EN2(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL03",55,0)
 N ERRCNT,IEN55,II,RC,ROR55,ROR55SUB,RORII,RORINC,RORINDEX,RORMSG,RORORD,RORRXE,RORTMP,RORXII,TMP
"RTN","RORHL03",56,0)
 S (ERRCNT,RC)=0
"RTN","RORHL03",57,0)
 ;
"RTN","RORHL03",58,0)
 ;--- Load the list of prescriptions
"RTN","RORHL03",59,0)
 K ^TMP("PS",$J)
"RTN","RORHL03",60,0)
 D OCL^PSOORRL(RORDFN,RORSTDT,RORENDT)
"RTN","RORHL03",61,0)
 Q:$D(^TMP("PS",$J))<10 0
"RTN","RORHL03",62,0)
 ;
"RTN","RORHL03",63,0)
 ;--- Select the prescriptions
"RTN","RORHL03",64,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL03",65,0)
 S RORII=0
"RTN","RORHL03",66,0)
 F  S RORII=$O(^TMP("PS",$J,RORII))  Q:'RORII  D
"RTN","RORHL03",67,0)
 . S RORORD=$P(^TMP("PS",$J,RORII,0),U)
"RTN","RORHL03",68,0)
 . Q:RORORD'>0
"RTN","RORHL03",69,0)
 . S II=$P(RORORD,";"),II=$E(II,$L(II))
"RTN","RORHL03",70,0)
 . Q:'("RUV"[II)
"RTN","RORHL03",71,0)
 . ;---
"RTN","RORHL03",72,0)
 . I "UV"[II   D  Q:(TMP<RORSTDT)!(TMP'<RORENDT)
"RTN","RORHL03",73,0)
 . . S TMP=$P($G(^TMP("PS",$J,RORII,0)),U,15)
"RTN","RORHL03",74,0)
 . I II="R"  D  Q:TMP<RORSTDT
"RTN","RORHL03",75,0)
 . . S TMP=$P($G(^TMP("PS",$J,RORII,0)),U,10)
"RTN","RORHL03",76,0)
 . ;---
"RTN","RORHL03",77,0)
 . S @RORTMP@(RORII,0)=^TMP("PS",$J,RORII,0)
"RTN","RORHL03",78,0)
 K ^TMP("PS",$J)
"RTN","RORHL03",79,0)
 ;
"RTN","RORHL03",80,0)
 ;--- Browse through the list and generate the HL7 segments
"RTN","RORHL03",81,0)
 S ROR55=$$ALLOC^RORTMP(.ROR55SUB)
"RTN","RORHL03",82,0)
 S RORII=0
"RTN","RORHL03",83,0)
 F  S RORII=$O(@RORTMP@(RORII))  Q:'RORII  D  Q:RC<0
"RTN","RORHL03",84,0)
 . S RORORD=$P(@RORTMP@(RORII,0),U)
"RTN","RORHL03",85,0)
 . S RORXII=$P(RORORD,";"),RORXII=$E(RORXII,$L(RORXII))
"RTN","RORHL03",86,0)
 . S IEN55=+$P(RORORD,";")
"RTN","RORHL03",87,0)
 . ;
"RTN","RORHL03",88,0)
 . K ^TMP("PS",$J),RORRXE
"RTN","RORHL03",89,0)
 . D OEL^PSOORRL(RORDFN,RORORD)
"RTN","RORHL03",90,0)
 . Q:$D(^TMP("PS",$J))<10
"RTN","RORHL03",91,0)
 . M RORRXE=^TMP("PS",$J)
"RTN","RORHL03",92,0)
 . K ^TMP("PS",$J)
"RTN","RORHL03",93,0)
 . ;
"RTN","RORHL03",94,0)
 . I RORXII="R"  D               ;--- Outpatient Pharmacy
"RTN","RORHL03",95,0)
 . . D REFILL
"RTN","RORHL03",96,0)
 . . ;--- Check if the original prescription or one of
"RTN","RORHL03",97,0)
 . . ;--- the refills is within date range
"RTN","RORHL03",98,0)
 . . S RORINC=0
"RTN","RORHL03",99,0)
 . . F RORINDEX="REF","PAR" D
"RTN","RORHL03",100,0)
 . . . S II=""
"RTN","RORHL03",101,0)
 . . . F  S II=$O(RORRXE(RORINDEX,II))  Q:II=""  D
"RTN","RORHL03",102,0)
 . . . . S TMP=$P($G(RORRXE(RORINDEX,II,0)),U)
"RTN","RORHL03",103,0)
 . . . . I TMP'<RORSTDT,TMP<RORENDT  S RORINC=1  Q
"RTN","RORHL03",104,0)
 . . . . K RORRXE(RORINDEX,II,0)
"RTN","RORHL03",105,0)
 . . Q:'RORINC
"RTN","RORHL03",106,0)
 . . ;---
"RTN","RORHL03",107,0)
 . . S TMP=$$ORC(IEN55,.RORRXE,RORDFN)
"RTN","RORHL03",108,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL03",109,0)
 . . S TMP=$$RXE^RORHL031(IEN55,.RORRXE,RORDFN)
"RTN","RORHL03",110,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL03",111,0)
 . . ;
"RTN","RORHL03",112,0)
 . I RORXII="U"  D               ;--- Unit Dose Inpatient Pharmacy
"RTN","RORHL03",113,0)
 . . N NODE  K @ROR55
"RTN","RORHL03",114,0)
 . . D PSS432^PSS55(RORDFN,IEN55,ROR55SUB)
"RTN","RORHL03",115,0)
 . . S NODE=$NA(@ROR55@(IEN55))
"RTN","RORHL03",116,0)
 . . ;---
"RTN","RORHL03",117,0)
 . . S TMP=$$ORC^RORHL07(NODE,.RORRXE)
"RTN","RORHL03",118,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL03",119,0)
 . . S TMP=$$RXE^RORHL07(NODE,.RORRXE)
"RTN","RORHL03",120,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL03",121,0)
 . . ;
"RTN","RORHL03",122,0)
 . I RORXII="V"  D               ;--- IV Inpatient Pharmacy
"RTN","RORHL03",123,0)
 . . N NODE  K @ROR55
"RTN","RORHL03",124,0)
 . . D PSS436^PSS55(RORDFN,IEN55,ROR55SUB)
"RTN","RORHL03",125,0)
 . . S NODE=$NA(@ROR55@(IEN55))
"RTN","RORHL03",126,0)
 . . ;---
"RTN","RORHL03",127,0)
 . . S TMP=$$ORC^RORHL071(NODE,.RORRXE)
"RTN","RORHL03",128,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL03",129,0)
 . . S TMP=$$RXE^RORHL071(NODE,.RORRXE)
"RTN","RORHL03",130,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL03",131,0)
 ;
"RTN","RORHL03",132,0)
 D FREE^RORTMP(ROR55),FREE^RORTMP(RORTMP)
"RTN","RORHL03",133,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL03",134,0)
 ;
"RTN","RORHL03",135,0)
 ;***** OUTPATIENT PHARMACY ORC SEGMENT BUILDER
"RTN","RORHL03",136,0)
 ;
"RTN","RORHL03",137,0)
 ; RORIEN        IEN of the record of the PRESCRIPTION file (#52)
"RTN","RORHL03",138,0)
 ;
"RTN","RORHL03",139,0)
 ; .RORORC       Array with info (from OEL^PSOORRL)
"RTN","RORHL03",140,0)
 ;
"RTN","RORHL03",141,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORHL03",142,0)
 ;
"RTN","RORHL03",143,0)
 ; Return Values:
"RTN","RORHL03",144,0)
 ;       <0  Error Code
"RTN","RORHL03",145,0)
 ;        0  Ok
"RTN","RORHL03",146,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL03",147,0)
 ;
"RTN","RORHL03",148,0)
ORC(RORIEN,RORORC,PTIEN) ;
"RTN","RORHL03",149,0)
 N BUF,CS,ERRCNT,IEN,IENS59,RC,RORMSG,ROROUT,RORSEG,RORTMP,RORTS,TMP
"RTN","RORHL03",150,0)
 S (ERRCNT,RC)=0
"RTN","RORHL03",151,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL03",152,0)
 ;
"RTN","RORHL03",153,0)
 ;--- Initialize the segment
"RTN","RORHL03",154,0)
 S RORSEG(0)="ORC"
"RTN","RORHL03",155,0)
 ;
"RTN","RORHL03",156,0)
 ;--- ORC-1 - Order Control 
"RTN","RORHL03",157,0)
 S RORSEG(1)="NW"
"RTN","RORHL03",158,0)
 ;
"RTN","RORHL03",159,0)
 ;--- ORC-2 - Placer Order #
"RTN","RORHL03",160,0)
 S RORSEG(2)=+RORIEN_CS_"OP"
"RTN","RORHL03",161,0)
 ;
"RTN","RORHL03",162,0)
 ;--- ORC-9 - Release Date/Time
"RTN","RORHL03",163,0)
 S TMP=$P($G(RORORC("RXN",0)),U,7)
"RTN","RORHL03",164,0)
 S RORSEG(9)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL03",165,0)
 ;
"RTN","RORHL03",166,0)
 ;--- ORC-12 - Provider
"RTN","RORHL03",167,0)
 S BUF=+$P($G(RORORC("P",0)),U)
"RTN","RORHL03",168,0)
 I BUF>0  D
"RTN","RORHL03",169,0)
 . S $P(BUF,CS,13)=$$GET1^DIQ(200,+BUF_",",53.5,"E",,"RORMSG")
"RTN","RORHL03",170,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL03",171,0)
 . . D DBS^RORERR("RORMSG",-99,,,200,+BUF_",")
"RTN","RORHL03",172,0)
 . S RORSEG(12)=BUF
"RTN","RORHL03",173,0)
 ;
"RTN","RORHL03",174,0)
 ;--- ORC-15 - Order Date/Time
"RTN","RORHL03",175,0)
 S TMP=$$FMTHL7^XLFDT($P($G(RORORC(0)),U,5))
"RTN","RORHL03",176,0)
 Q:TMP'>0 $$ERROR^RORERR(-100,,,,"No order date","OEL^PSOORRL")
"RTN","RORHL03",177,0)
 S RORSEG(15)=TMP
"RTN","RORHL03",178,0)
 ;
"RTN","RORHL03",179,0)
 ;--- ORC-16 - Control Code Reason
"RTN","RORHL03",180,0)
 S RORSEG(16)=CS_CS_CS_CS_"NEW"
"RTN","RORHL03",181,0)
 ;
"RTN","RORHL03",182,0)
 ;--- ORC-17 - Division
"RTN","RORHL03",183,0)
 S RORSEG(17)=$$SITE^RORUTL03(CS)
"RTN","RORHL03",184,0)
 S RORTMP=$$ALLOC^RORTMP(.RORTS)
"RTN","RORHL03",185,0)
 D RX^PSO52API(PTIEN,RORTS,+RORIEN,,"2")
"RTN","RORHL03",186,0)
 S IENS59=+$G(@RORTMP@(PTIEN,+RORIEN,20))_","
"RTN","RORHL03",187,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL03",188,0)
 I IENS59>0  D
"RTN","RORHL03",189,0)
 . D GETS^DIQ(59,IENS59,"100","IE","ROROUT","RORMSG")
"RTN","RORHL03",190,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL03",191,0)
 . . D DBS^RORERR("RORMSG",-99,,,59,IENS59)
"RTN","RORHL03",192,0)
 . S IEN=+$G(ROROUT(59,IENS59,100,"I"))
"RTN","RORHL03",193,0)
 . Q:IEN'>0
"RTN","RORHL03",194,0)
 . ;---
"RTN","RORHL03",195,0)
 . S BUF=$$GET1^DIQ(4,IEN_",",99,"I",,"RORMSG")
"RTN","RORHL03",196,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL03",197,0)
 . . D DBS^RORERR("RORMSG",-99,,,4,IEN_",")
"RTN","RORHL03",198,0)
 . Q:BUF=""
"RTN","RORHL03",199,0)
 . S $P(BUF,CS,2)=$$ESCAPE^RORHL7($G(ROROUT(59,IENS59,100,"E")))
"RTN","RORHL03",200,0)
 . S $P(BUF,CS,3)="99VA4"
"RTN","RORHL03",201,0)
 . S RORSEG(17)=BUF
"RTN","RORHL03",202,0)
 ;
"RTN","RORHL03",203,0)
 ;--- Store the segment
"RTN","RORHL03",204,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL03",205,0)
 Q ERRCNT
"RTN","RORHL03",206,0)
 ;
"RTN","RORHL03",207,0)
 ;***** MAKES ORIGINAL FILL LIKE REFILLS TO REUSE CODE
"RTN","RORHL03",208,0)
REFILL ;
"RTN","RORHL03",209,0)
 S RORRXE("REF",0,0)=""
"RTN","RORHL03",210,0)
 S $P(RORRXE("REF",0,0),U,1)=$P(RORRXE("RXN",0),U,6)
"RTN","RORHL03",211,0)
 S $P(RORRXE("REF",0,0),U,2)=$P(RORRXE(0),U,7)
"RTN","RORHL03",212,0)
 S $P(RORRXE("REF",0,0),U,3)=$P(RORRXE(0),U,8)
"RTN","RORHL03",213,0)
 S $P(RORRXE("REF",0,0),U,4)=$P(RORRXE("RXN",0),U,7)
"RTN","RORHL03",214,0)
 S $P(RORRXE("REF",0,0),U,5)=$P(RORRXE("RXN",0),U,3)
"RTN","RORHL03",215,0)
 Q
"RTN","RORHL031")
0^14^B36598312^B37995805
"RTN","RORHL031",1,0)
RORHL031 ;HOIFO/BH,SG - HL7 PHARMACY: UTILITIES ; 3/13/06 9:23am
"RTN","RORHL031",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL031",3,0)
 ;
"RTN","RORHL031",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL031",5,0)
 ;
"RTN","RORHL031",6,0)
 ; #1878         EN^PSOORDER
"RTN","RORHL031",7,0)
 ; #4533         ARWS^PSS50 (supported)
"RTN","RORHL031",8,0)
 ; #4545         DATA^PSN50P68 (supported)
"RTN","RORHL031",9,0)
 ; #4820         RX^PSO52API (supported)
"RTN","RORHL031",10,0)
 ;
"RTN","RORHL031",11,0)
 Q
"RTN","RORHL031",12,0)
 ;
"RTN","RORHL031",13,0)
 ;***** OUTPATIENT PHARMACY RXE SEGMENT BUILDER
"RTN","RORHL031",14,0)
 ;
"RTN","RORHL031",15,0)
 ; RORIEN        IEN in the PRESCRIPTION file (#52)
"RTN","RORHL031",16,0)
 ;
"RTN","RORHL031",17,0)
 ; .RORRXE       Array with info (from OEL^PSOORRL)
"RTN","RORHL031",18,0)
 ;
"RTN","RORHL031",19,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORHL031",20,0)
 ;
"RTN","RORHL031",21,0)
 ; The ^TMP("PSOR",$J) global node is used by this function.
"RTN","RORHL031",22,0)
 ;
"RTN","RORHL031",23,0)
 ; Return Values:
"RTN","RORHL031",24,0)
 ;       <0  Error Code
"RTN","RORHL031",25,0)
 ;        0  Ok
"RTN","RORHL031",26,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL031",27,0)
 ;
"RTN","RORHL031",28,0)
RXE(RORIEN,RORRXE,PTIEN) ;
"RTN","RORHL031",29,0)
 N BUF,CS,ERRCNT,IDGN,II,INDF,J,L,RC,RORCLIN,RORCMOP,RORISIG,RORLST,RORMREF,RORMSG,RORPRICE,RORSEG,RORSTAT,RORSTOP,RORTEST,RORTMP,RORTS,TMP
"RTN","RORHL031",30,0)
 S (ERRCNT,RC)=0
"RTN","RORHL031",31,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL031",32,0)
 ;
"RTN","RORHL031",33,0)
 Q:$P($G(RORRXE(0)),U)="" 0
"RTN","RORHL031",34,0)
 ;
"RTN","RORHL031",35,0)
 K ^TMP("PSOR",$J)
"RTN","RORHL031",36,0)
 D EN^PSOORDER(,RORIEN)
"RTN","RORHL031",37,0)
 ;
"RTN","RORHL031",38,0)
 S BUF=$G(^TMP("PSOR",$J,RORIEN,0))
"RTN","RORHL031",39,0)
 S RORMREF=$P(BUF,U,8)            ; # of refills
"RTN","RORHL031",40,0)
 S RORPRICE=$P(BUF,U,10)          ; unit price of drugs
"RTN","RORHL031",41,0)
 ;
"RTN","RORHL031",42,0)
 S BUF=$G(^TMP("PSOR",$J,RORIEN,1))
"RTN","RORHL031",43,0)
 S RORSTAT=$P($P(BUF,U,5),";",1)  ; patient status (internal)
"RTN","RORHL031",44,0)
 S RORSTDE=$P($P(BUF,U,5),";",2)  ; patient status
"RTN","RORHL031",45,0)
 S RORCLIN=+$P(BUF,U,4)           ; clinic
"RTN","RORHL031",46,0)
 ;
"RTN","RORHL031",47,0)
 S (J,RORISIG)="",L=245
"RTN","RORHL031",48,0)
 F  S J=$O(^TMP("PSOR",$J,RORIEN,"SIG1",J))  Q:J=""  D  Q:L'>0
"RTN","RORHL031",49,0)
 . S BUF=$G(^TMP("PSOR",$J,RORIEN,"SIG1",J,0))
"RTN","RORHL031",50,0)
 . S RORISIG=RORISIG_" "_$E(BUF,1,L)
"RTN","RORHL031",51,0)
 . S L=L-$L(BUF)-1  S:L<-1 RORISIG=RORISIG_"..."
"RTN","RORHL031",52,0)
 S RORISIG=$$TRIM^XLFSTR(RORISIG)
"RTN","RORHL031",53,0)
 ;
"RTN","RORHL031",54,0)
 ;--- Get Stop Code
"RTN","RORHL031",55,0)
 S RORSTOP=$$STOPCODE^RORUTL18(+RORCLIN)
"RTN","RORHL031",56,0)
 S:RORSTOP'>0 RORSTOP=""
"RTN","RORHL031",57,0)
 ;
"RTN","RORHL031",58,0)
 S RORTMP=$$ALLOC^RORTMP(.RORTS)
"RTN","RORHL031",59,0)
 D RX^PSO52API(PTIEN,RORTS,RORIEN,,"C,R")
"RTN","RORHL031",60,0)
 ;--- Get last dispensed dates
"RTN","RORHL031",61,0)
 S II=0  K RORLST
"RTN","RORHL031",62,0)
 F  S II=$O(@RORTMP@(PTIEN,RORIEN,"RF",II))  Q:II'>0  D
"RTN","RORHL031",63,0)
 . S RORLST(II,10.1)=+$G(@RORTMP@(PTIEN,RORIEN,"RF",II,10.1))
"RTN","RORHL031",64,0)
 ;--- Load the CMOP list
"RTN","RORHL031",65,0)
 S II=0  K RORCMOP
"RTN","RORHL031",66,0)
 F  S II=$O(@RORTMP@(PTIEN,RORIEN,"C",II))  Q:II'>0  D
"RTN","RORHL031",67,0)
 . Q:+$G(@RORTMP@(PTIEN,RORIEN,"C",II,3))=3
"RTN","RORHL031",68,0)
 . S TMP=$G(@RORTMP@(PTIEN,RORIEN,"C",II,2))
"RTN","RORHL031",69,0)
 . S:TMP'="" RORCMOP("A2",TMP,II)=""
"RTN","RORHL031",70,0)
 ;--- Free the buffer
"RTN","RORHL031",71,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL031",72,0)
 ;
"RTN","RORHL031",73,0)
 F RORINDEX="REF","PAR" D
"RTN","RORHL031",74,0)
 . S II=""
"RTN","RORHL031",75,0)
 . F  S II=$O(RORRXE(RORINDEX,II))  Q:II=""  D  Q:RC<0
"RTN","RORHL031",76,0)
 . . S RORTEST=$G(RORRXE(RORINDEX,II,0))  Q:RORTEST=""
"RTN","RORHL031",77,0)
 . . ;
"RTN","RORHL031",78,0)
 . . ;--- Initialize the segment
"RTN","RORHL031",79,0)
 . . K RORSEG  S RORSEG(0)="RXE"
"RTN","RORHL031",80,0)
 . . ;
"RTN","RORHL031",81,0)
 . . ;--- RXE-1 - Quantity/Timing
"RTN","RORHL031",82,0)
 . . S RORSEG(1)=""""""
"RTN","RORHL031",83,0)
 . . ;
"RTN","RORHL031",84,0)
 . . ;--- RXE-2 - Give Code
"RTN","RORHL031",85,0)
 . . S IDGN=+$P($G(RORRXE("DD",1,0)),U,3)  ; File #50 IEN
"RTN","RORHL031",86,0)
 . . I IDGN'>0  S IDGN=+$P($G(RORRXE("DD",1,0)),U)  Q:IDGN'>0
"RTN","RORHL031",87,0)
 . . S TMP=$$RXE2(IDGN,CS,.BUF,.INDF)
"RTN","RORHL031",88,0)
 . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL031",89,0)
 . . Q:BUF=""
"RTN","RORHL031",90,0)
 . . S RORSEG(2)=BUF
"RTN","RORHL031",91,0)
 . . ;
"RTN","RORHL031",92,0)
 . . ;--- RXE-3 - Give Amount (Min)
"RTN","RORHL031",93,0)
 . . S RORSEG(3)=""""""
"RTN","RORHL031",94,0)
 . . ;
"RTN","RORHL031",95,0)
 . . ;--- RXE-4 - Max # of re-fills
"RTN","RORHL031",96,0)
 . . S RORSEG(4)=RORMREF
"RTN","RORHL031",97,0)
 . . ;
"RTN","RORHL031",98,0)
 . . ;--- RXE-5 - Give Units
"RTN","RORHL031",99,0)
 . . S TMP=$$RXE5(+$G(INDF),CS,.BUF)
"RTN","RORHL031",100,0)
 . . S:TMP ERRCNT=ERRCNT+1
"RTN","RORHL031",101,0)
 . . S:BUF'="" RORSEG(5)=BUF
"RTN","RORHL031",102,0)
 . . ;
"RTN","RORHL031",103,0)
 . . ;--- RXE-6 - Release Date/Time
"RTN","RORHL031",104,0)
 . . S TMP=$P($G(RORRXE(RORINDEX,II,0)),U,4)
"RTN","RORHL031",105,0)
 . . S RORSEG(6)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL031",106,0)
 . . ;
"RTN","RORHL031",107,0)
 . . ;--- RXE-7 - SIG1
"RTN","RORHL031",108,0)
 . . S RORSEG(7)=CS_$$ESCAPE^RORHL7(RORISIG)
"RTN","RORHL031",109,0)
 . . ;
"RTN","RORHL031",110,0)
 . . ;--- RXE-10 - Dispense amount
"RTN","RORHL031",111,0)
 . . S RORSEG(10)=$P($G(RORRXE(RORINDEX,II,0)),U,3)
"RTN","RORHL031",112,0)
 . . ;
"RTN","RORHL031",113,0)
 . . ;--- RXE-15 - Refill Indicator
"RTN","RORHL031",114,0)
 . . S RORSEG(15)=$S(RORINDEX="REF":1,RORINDEX="PAR":2)
"RTN","RORHL031",115,0)
 . . ;
"RTN","RORHL031",116,0)
 . . ;--- RXE-17 - Refill #
"RTN","RORHL031",117,0)
 . . S RORSEG(17)=II
"RTN","RORHL031",118,0)
 . . ;
"RTN","RORHL031",119,0)
 . . ;--- RXE-18 - Fill Date/Time
"RTN","RORHL031",120,0)
 . . S TMP=$P($G(RORRXE(RORINDEX,II,0)),U)
"RTN","RORHL031",121,0)
 . . S RORSEG(18)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL031",122,0)
 . . ;
"RTN","RORHL031",123,0)
 . . ;--- RXE-19 - Total Daily Dose
"RTN","RORHL031",124,0)
 . . S RORSEG(19)=$P($G(RORRXE(RORINDEX,II,0)),U,2)
"RTN","RORHL031",125,0)
 . . ;
"RTN","RORHL031",126,0)
 . . ;--- RXE-20 - CMOP
"RTN","RORHL031",127,0)
 . . S RORSEG(20)=$S($D(RORCMOP("A2",II)):"Y",1:"N")
"RTN","RORHL031",128,0)
 . . ;
"RTN","RORHL031",129,0)
 . . ;--- RXE-21 - Clinic Stop
"RTN","RORHL031",130,0)
 . . S RORSEG(21)=RORSTOP
"RTN","RORHL031",131,0)
 . . ;
"RTN","RORHL031",132,0)
 . . ;--- RXE-22 - Dispense Date
"RTN","RORHL031",133,0)
 . . I 'II  D
"RTN","RORHL031",134,0)
 . . . S TMP=$P($G(RORRXE(0)),U,5)
"RTN","RORHL031",135,0)
 . . . S RORSEG(22)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL031",136,0)
 . . E  D:$D(RORLST(II))
"RTN","RORHL031",137,0)
 . . . S TMP=+$G(RORLST(II,10.1))
"RTN","RORHL031",138,0)
 . . . S RORSEG(22)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL031",139,0)
 . . ;
"RTN","RORHL031",140,0)
 . . ;--- RXE-23 - Unit Cost
"RTN","RORHL031",141,0)
 . . S RORSEG(23)=RORPRICE
"RTN","RORHL031",142,0)
 . . ;
"RTN","RORHL031",143,0)
 . . ;--- RXE-27 - Patient Status
"RTN","RORHL031",144,0)
 . . S RORSEG(27)=RORSTAT_CS_RORSTDE
"RTN","RORHL031",145,0)
 . . ;
"RTN","RORHL031",146,0)
 . . ;--- RXE-30 Mail/Window
"RTN","RORHL031",147,0)
 . . S TMP=$P($G(RORRXE(RORINDEX,II,0)),U,5)
"RTN","RORHL031",148,0)
 . . S RORSEG(30)=$S(TMP="M":"AD",TMP="W":"TR",1:"")
"RTN","RORHL031",149,0)
 . . ;
"RTN","RORHL031",150,0)
 . . ;--- Store the segment
"RTN","RORHL031",151,0)
 . . D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL031",152,0)
 ;
"RTN","RORHL031",153,0)
 K ^TMP("PSOR",$J)
"RTN","RORHL031",154,0)
 Q ERRCNT
"RTN","RORHL031",155,0)
 ;
"RTN","RORHL031",156,0)
 ;***** CONSTRUCTS THE RXE-2 FIELD (GIVE CODE)
"RTN","RORHL031",157,0)
 ;
"RTN","RORHL031",158,0)
 ; IEN50         IEN in the DRUG file (#50)
"RTN","RORHL031",159,0)
 ;
"RTN","RORHL031",160,0)
 ; [CS]          Component Separator (defaults to "^")
"RTN","RORHL031",161,0)
 ;
"RTN","RORHL031",162,0)
 ; .RXE2         Reference to a local variable where the value
"RTN","RORHL031",163,0)
 ;               of the  RXE-2 field is returned
"RTN","RORHL031",164,0)
 ;
"RTN","RORHL031",165,0)
 ; [.PSNDF]      VA PRODUCT
"RTN","RORHL031",166,0)
 ;                 ^01: IEN
"RTN","RORHL031",167,0)
 ;                 ^02: NAME (.01)
"RTN","RORHL031",168,0)
 ;
"RTN","RORHL031",169,0)
 ; Return Values:
"RTN","RORHL031",170,0)
 ;       <0  Error Code
"RTN","RORHL031",171,0)
 ;        0  Ok
"RTN","RORHL031",172,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL031",173,0)
 ;
"RTN","RORHL031",174,0)
RXE2(IEN50,CS,RXE2,PSNDF) ;
"RTN","RORHL031",175,0)
 N ERRCNT,IDGN,NODE,RC,RORMSG,TMP,TMP1
"RTN","RORHL031",176,0)
 S (ERRCNT,RC)=0,RXE2=""
"RTN","RORHL031",177,0)
 ;
"RTN","RORHL031",178,0)
 S:$G(CS)="" CS="^"
"RTN","RORHL031",179,0)
 S IDGN=+$G(IEN50)
"RTN","RORHL031",180,0)
 ;
"RTN","RORHL031",181,0)
 S NODE=$$ALLOC^RORTMP(.TMP)
"RTN","RORHL031",182,0)
 D ARWS^PSS50(IDGN,,TMP)
"RTN","RORHL031",183,0)
 ;
"RTN","RORHL031",184,0)
 S $P(RXE2,CS,1)=$G(@NODE@(IDGN,31))        ; NDC
"RTN","RORHL031",185,0)
 ;--- VA Product Name
"RTN","RORHL031",186,0)
 S PSNDF=$G(@NODE@(IDGN,22)),TMP1=$P(PSNDF,U,2)
"RTN","RORHL031",187,0)
 S $P(RXE2,CS,2)=$$ESCAPE^RORHL7($E(TMP1,1,64))
"RTN","RORHL031",188,0)
 S $P(RXE2,CS,3)="PSNDF"
"RTN","RORHL031",189,0)
 ;
"RTN","RORHL031",190,0)
 S TMP=""
"RTN","RORHL031",191,0)
 S $P(TMP,"-",1)=$P($G(@NODE@(IDGN,20)),U)  ; VA Drug Code
"RTN","RORHL031",192,0)
 S $P(TMP,"-",2)=$G(@NODE@(IDGN,2))         ; VA Drug Class
"RTN","RORHL031",193,0)
 S:TMP'="-" $P(RXE2,CS,4)=TMP
"RTN","RORHL031",194,0)
 ;--- Drug Name
"RTN","RORHL031",195,0)
 S $P(RXE2,CS,5)=$$ESCAPE^RORHL7($G(@NODE@(IDGN,.01)))
"RTN","RORHL031",196,0)
 S $P(RXE2,CS,6)="99PSD"
"RTN","RORHL031",197,0)
 ;
"RTN","RORHL031",198,0)
 D FREE^RORTMP(NODE)
"RTN","RORHL031",199,0)
 S:($P(RXE2,CS,1,2)="^")&($P(RXE2,CS,4,5)="^") RXE2=""
"RTN","RORHL031",200,0)
 Q ERRCNT
"RTN","RORHL031",201,0)
 ;
"RTN","RORHL031",202,0)
 ;***** CONSTRUCTS THE RXE-5 FIELD (GIVE UNITS)
"RTN","RORHL031",203,0)
 ;
"RTN","RORHL031",204,0)
 ; IEN50P68      IEN in the VA PRODUCT file (#50.68)
"RTN","RORHL031",205,0)
 ;
"RTN","RORHL031",206,0)
 ; [CS]          Component Separator (defaults to "^")
"RTN","RORHL031",207,0)
 ;
"RTN","RORHL031",208,0)
 ; .RXE5         Reference to a local variable where the value
"RTN","RORHL031",209,0)
 ;               of the  RXE-5 field is returned
"RTN","RORHL031",210,0)
 ;
"RTN","RORHL031",211,0)
 ; Return Values:
"RTN","RORHL031",212,0)
 ;       <0  Error Code
"RTN","RORHL031",213,0)
 ;        0  Ok
"RTN","RORHL031",214,0)
 ;
"RTN","RORHL031",215,0)
RXE5(IEN50P68,CS,RXE5) ;
"RTN","RORHL031",216,0)
 N INDF,NODE,TMP
"RTN","RORHL031",217,0)
 S:$G(CS)="" CS="^"
"RTN","RORHL031",218,0)
 S RXE5="",INDF=+$G(IEN50P68)
"RTN","RORHL031",219,0)
 Q:INDF'>0 0
"RTN","RORHL031",220,0)
 ;--- Get the units
"RTN","RORHL031",221,0)
 S NODE=$$ALLOC^RORTMP(.TMP)
"RTN","RORHL031",222,0)
 D DATA^PSN50P68(INDF,,TMP)
"RTN","RORHL031",223,0)
 S TMP=$G(@NODE@(INDF,3))
"RTN","RORHL031",224,0)
 D FREE^RORTMP(NODE)
"RTN","RORHL031",225,0)
 Q:TMP'>0 0
"RTN","RORHL031",226,0)
 ;--- Format the field
"RTN","RORHL031",227,0)
 S $P(RXE5,CS,4)=$P(TMP,U)
"RTN","RORHL031",228,0)
 S $P(RXE5,CS,5)=$$ESCAPE^RORHL7($P(TMP,U,2))
"RTN","RORHL031",229,0)
 S $P(RXE5,CS,6)="99PSU"
"RTN","RORHL031",230,0)
 ;--- Success
"RTN","RORHL031",231,0)
 Q 0
"RTN","RORHL05")
0^8^B21726569^B21912781
"RTN","RORHL05",1,0)
RORHL05 ;HOIFO/CRT - HL7 AUTOPSY: OBR ; 3/13/06 9:23am
"RTN","RORHL05",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL05",3,0)
 ;
"RTN","RORHL05",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL05",5,0)
 ;
"RTN","RORHL05",6,0)
 ; #1995         $$CPT^ICPTCOD (supported)
"RTN","RORHL05",7,0)
 ; #3465         Access to autopsy data (private)
"RTN","RORHL05",8,0)
 ; #10040        Read the INSTITUTION field of file #44 (supported)
"RTN","RORHL05",9,0)
 ; #10090        Read access to the file #4 (supported)
"RTN","RORHL05",10,0)
 ;
"RTN","RORHL05",11,0)
 Q
"RTN","RORHL05",12,0)
 ;
"RTN","RORHL05",13,0)
 ;***** SEARCHES FOR AUTOPSY DATA
"RTN","RORHL05",14,0)
 ;
"RTN","RORHL05",15,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL05",16,0)
 ;
"RTN","RORHL05",17,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL05",18,0)
 ;               data extraction time frames are stored.
"RTN","RORHL05",19,0)
 ;
"RTN","RORHL05",20,0)
 ; [FORCE]       Force the extraction of the autopsy data
"RTN","RORHL05",21,0)
 ;
"RTN","RORHL05",22,0)
 ; Return Values:
"RTN","RORHL05",23,0)
 ;       <0  Error code
"RTN","RORHL05",24,0)
 ;        0  Ok
"RTN","RORHL05",25,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL05",26,0)
 ;
"RTN","RORHL05",27,0)
EN1(RORDFN,DXDTS,FORCE) ;
"RTN","RORHL05",28,0)
 N ADATE,ERRCNT,RC,RORLRDFN,RORMSG
"RTN","RORHL05",29,0)
 S (ERRCNT,RC)=0
"RTN","RORHL05",30,0)
 ;
"RTN","RORHL05",31,0)
 ;--- Check if the autopsy has been performed
"RTN","RORHL05",32,0)
 S RORLRDFN=+$$LABREF^RORUTL18(RORDFN)  Q:RORLRDFN'>0 0
"RTN","RORHL05",33,0)
 S ADATE=$$GET1^DIQ(63,RORLRDFN_",",11,"I",,"RORMSG")
"RTN","RORHL05",34,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,RORDFN,63,RORLRDFN_",")
"RTN","RORHL05",35,0)
 ;
"RTN","RORHL05",36,0)
 D:ADATE>0
"RTN","RORHL05",37,0)
 . ;--- Check if the autopsy data should be sent (autopsy date
"RTN","RORHL05",38,0)
 . ;    falls into one of the data extraction time frames or
"RTN","RORHL05",39,0)
 . ;--- the extraction if forced by the function parameter).
"RTN","RORHL05",40,0)
 . I '$G(FORCE)  S RC=0  D  Q:'RC
"RTN","RORHL05",41,0)
 . . N D1,D2,IDX
"RTN","RORHL05",42,0)
 . . S IDX=0
"RTN","RORHL05",43,0)
 . . F  S IDX=$O(DXDTS(7,IDX))  Q:IDX'>0  D  Q:RC
"RTN","RORHL05",44,0)
 . . . S D1=$P(DXDTS(7,IDX),U),D2=$P(DXDTS(7,IDX),U,2)
"RTN","RORHL05",45,0)
 . . . S:(ADATE'<D1)&(ADATE<D2) RC=1
"RTN","RORHL05",46,0)
 . .
"RTN","RORHL05",47,0)
 . ;--- Send the data
"RTN","RORHL05",48,0)
 . S RC=$$OBR(RORLRDFN)
"RTN","RORHL05",49,0)
 . I RC  Q:RC<0  S ERRCNT=ERRCNT+RC
"RTN","RORHL05",50,0)
 . S RC=$$OBX(RORLRDFN)
"RTN","RORHL05",51,0)
 . I RC  Q:RC<0  S ERRCNT=ERRCNT+RC
"RTN","RORHL05",52,0)
 ;
"RTN","RORHL05",53,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL05",54,0)
 ;
"RTN","RORHL05",55,0)
 ;***** AUTOPSY OBR SEGMENT BUILDER
"RTN","RORHL05",56,0)
 ;
"RTN","RORHL05",57,0)
 ; RORLRDFN      IEN of Lab Patient Record in File #63
"RTN","RORHL05",58,0)
 ;
"RTN","RORHL05",59,0)
 ; Return Values:
"RTN","RORHL05",60,0)
 ;       <0  Error code
"RTN","RORHL05",61,0)
 ;        0  Ok
"RTN","RORHL05",62,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL05",63,0)
 ;
"RTN","RORHL05",64,0)
OBR(RORLRDFN) ;
"RTN","RORHL05",65,0)
 N BUF,CS,ERRCNT,IEN,IENS63,RC,RORMSG,ROROUT,RORSEG,TMP
"RTN","RORHL05",66,0)
 S (ERRCNT,RC)=0
"RTN","RORHL05",67,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL05",68,0)
 ;
"RTN","RORHL05",69,0)
 S IENS63=+$G(RORLRDFN)_","
"RTN","RORHL05",70,0)
 D GETS^DIQ(63,IENS63,"11;12.1;13.1;14;14.1;14.5;14.7","IE","ROROUT","RORMSG")
"RTN","RORHL05",71,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL05",72,0)
 . D DBS^RORERR("RORMSG",-9,,,63,IENS63)
"RTN","RORHL05",73,0)
 ;
"RTN","RORHL05",74,0)
 ;--- Initialize the segment
"RTN","RORHL05",75,0)
 S RORSEG(0)="OBR"
"RTN","RORHL05",76,0)
 ;
"RTN","RORHL05",77,0)
 ;--- OBR-3 - Order #
"RTN","RORHL05",78,0)
 I $G(ROROUT(63,IENS63,14,"E"))=""  D  Q RC
"RTN","RORHL05",79,0)
 . S RC=$$ERROR^RORERR(-95,,,,63,IENS63,14)
"RTN","RORHL05",80,0)
 S RORSEG(3)=ROROUT(63,IENS63,14,"E")
"RTN","RORHL05",81,0)
 ;
"RTN","RORHL05",82,0)
 ;--- OBR-4 - CPT Code
"RTN","RORHL05",83,0)
 S BUF=88099,TMP=$$CPT^ICPTCOD(BUF)
"RTN","RORHL05",84,0)
 I TMP<0  D  S ERRCNT=ERRCNT+1,TMP=""
"RTN","RORHL05",85,0)
 . D ERROR^RORERR(-57,,$P(TMP,U,2),,+TMP,"$$CPT^ICPTCOD")
"RTN","RORHL05",86,0)
 S $P(BUF,CS,2)=$$ESCAPE^RORHL7($P(TMP,U,3))
"RTN","RORHL05",87,0)
 S $P(BUF,CS,3)="C4"
"RTN","RORHL05",88,0)
 S RORSEG(4)=BUF
"RTN","RORHL05",89,0)
 ;
"RTN","RORHL05",90,0)
 ;--- OBR-7 - Autopsy Date/Time
"RTN","RORHL05",91,0)
 S TMP=$$FMTHL7^XLFDT($G(ROROUT(63,IENS63,11,"I")))
"RTN","RORHL05",92,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,,63,IENS63,11)
"RTN","RORHL05",93,0)
 S RORSEG(7)=TMP
"RTN","RORHL05",94,0)
 ;
"RTN","RORHL05",95,0)
 ;--- OBR-8 - Date of the final autopsy diagnoses
"RTN","RORHL05",96,0)
 S RORSEG(8)=$$FMTHL7^XLFDT($G(ROROUT(63,IENS63,13.1,"I")))
"RTN","RORHL05",97,0)
 ;
"RTN","RORHL05",98,0)
 ;--- OBR-16 - Ordering Provider
"RTN","RORHL05",99,0)
 S RORSEG(16)=$G(ROROUT(63,IENS63,12.1,"I"))
"RTN","RORHL05",100,0)
 ;
"RTN","RORHL05",101,0)
 ;--- OBR-22 - Date/TIme the report is released
"RTN","RORHL05",102,0)
 S RORSEG(22)=$$FMTHL7^XLFDT($G(ROROUT(63,IENS63,14.7,"I")))
"RTN","RORHL05",103,0)
 ;
"RTN","RORHL05",104,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL05",105,0)
 S RORSEG(24)="SP"
"RTN","RORHL05",106,0)
 ;
"RTN","RORHL05",107,0)
 ;--- OBR-44 - Division
"RTN","RORHL05",108,0)
 S TMP=$G(ROROUT(63,IENS63,14.1,"I"))
"RTN","RORHL05",109,0)
 S IEN=$S(TMP'="":+$O(^SC("B",TMP,0)),1:0)
"RTN","RORHL05",110,0)
 S RORSEG(44)=$$DIV44^RORHLUT1(IEN,CS)
"RTN","RORHL05",111,0)
 ;
"RTN","RORHL05",112,0)
 ;--- OBR-46 - Service
"RTN","RORHL05",113,0)
 S BUF=+$G(ROROUT(63,IENS63,14.5,"I"))
"RTN","RORHL05",114,0)
 D:BUF>0
"RTN","RORHL05",115,0)
 . S $P(BUF,CS,2)=$G(ROROUT(63,IENS63,14.5,"E"))
"RTN","RORHL05",116,0)
 . S RORSEG(46)=BUF
"RTN","RORHL05",117,0)
 ;
"RTN","RORHL05",118,0)
 ;--- Store the segment
"RTN","RORHL05",119,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL05",120,0)
 Q ERRCNT
"RTN","RORHL05",121,0)
 ;
"RTN","RORHL05",122,0)
 ;***** AUTOPSY OBX SEGMENT BUILDER
"RTN","RORHL05",123,0)
 ;
"RTN","RORHL05",124,0)
 ; RORLRDFN      IEN of Lab Patient Record in File #63
"RTN","RORHL05",125,0)
 ;
"RTN","RORHL05",126,0)
 ; Return Values:
"RTN","RORHL05",127,0)
 ;       <0  Error code
"RTN","RORHL05",128,0)
 ;        0  Ok
"RTN","RORHL05",129,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL05",130,0)
 ;
"RTN","RORHL05",131,0)
OBX(RORLRDFN) ;
"RTN","RORHL05",132,0)
 ;;32.2;;AUCD^Clinical Diagnosis^VA080
"RTN","RORHL05",133,0)
 ;;32.3;;AUPD^Pathological Diagnosis^VA080
"RTN","RORHL05",134,0)
 ;
"RTN","RORHL05",135,0)
 N BR,BUF,CS,ERRCNT,FLD,I,I1,ICNT,IENS63,IMF,RC,RORMSG,RORSEG,RORTXT,TMP
"RTN","RORHL05",136,0)
 S (ERRCNT,RC)=0
"RTN","RORHL05",137,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL05",138,0)
 S BR=$E(HLECH,3)_".br"_$E(HLECH,3)
"RTN","RORHL05",139,0)
 ;
"RTN","RORHL05",140,0)
 ;--- Initialize the segment
"RTN","RORHL05",141,0)
 S RORSEG(0)="OBX"
"RTN","RORHL05",142,0)
 ;
"RTN","RORHL05",143,0)
 ;--- OBX-2 - Value Type
"RTN","RORHL05",144,0)
 S RORSEG(2)="FT"
"RTN","RORHL05",145,0)
 ;
"RTN","RORHL05",146,0)
 ;--- OBX-11 - Observation Result Status
"RTN","RORHL05",147,0)
 S RORSEG(11)="F"
"RTN","RORHL05",148,0)
 ;
"RTN","RORHL05",149,0)
 ;--- Generate the OBX segments
"RTN","RORHL05",150,0)
 S IENS63=+$G(RORLRDFN)_","
"RTN","RORHL05",151,0)
 F IMF=1,2  D
"RTN","RORHL05",152,0)
 . S BUF=$T(OBX+IMF),FLD=$P(BUF,";;",2)
"RTN","RORHL05",153,0)
 . K RORMSG,RORTXT,RORSEG(5)
"RTN","RORHL05",154,0)
 . ;--- OBX-3 - Observation Identifier
"RTN","RORHL05",155,0)
 . S RORSEG(3)=$P(BUF,";;",3)
"RTN","RORHL05",156,0)
 . ;--- Load the text
"RTN","RORHL05",157,0)
 . S TMP=$$GET1^DIQ(63,IENS63,FLD,,"RORTXT","RORMSG")
"RTN","RORHL05",158,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL05",159,0)
 . . D DBS^RORERR("RORMSG",-9,,,63,IENS63)
"RTN","RORHL05",160,0)
 . ;--- Process the text
"RTN","RORHL05",161,0)
 . S I=$O(RORTXT("")),ICNT=0
"RTN","RORHL05",162,0)
 . F  Q:I=""  S I1=$O(RORTXT(I))  D  S I=I1
"RTN","RORHL05",163,0)
 . . ;--- OBX-5 - Observation Value
"RTN","RORHL05",164,0)
 . . S TMP=$$ESCAPE^RORHL7(RORTXT(I))
"RTN","RORHL05",165,0)
 . . S ICNT=ICNT+1,RORSEG(5,ICNT)=$S(I1'="":TMP_BR,1:TMP)
"RTN","RORHL05",166,0)
 . ;--- Store the segment
"RTN","RORHL05",167,0)
 . D:ICNT>0 ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL05",168,0)
 ;
"RTN","RORHL05",169,0)
 ;---
"RTN","RORHL05",170,0)
 Q ERRCNT
"RTN","RORHL06")
0^9^B22360374^B22550285
"RTN","RORHL06",1,0)
RORHL06 ;HOIFO/BH,CRT - HL7 LIVER BIOPSY: OBR,OBX ; 3/13/06 9:23am
"RTN","RORHL06",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL06",3,0)
 ;
"RTN","RORHL06",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL06",5,0)
 ;
"RTN","RORHL06",6,0)
 ; #1995         $$CPT^ICPTCOD (supported)
"RTN","RORHL06",7,0)
 ; #10035        Read access to the PATIENT file (supported)
"RTN","RORHL06",8,0)
 ;
"RTN","RORHL06",9,0)
 Q
"RTN","RORHL06",10,0)
 ;
"RTN","RORHL06",11,0)
 ;***** SEARCHES FOR LIVER BIOPSY DATA
"RTN","RORHL06",12,0)
 ;
"RTN","RORHL06",13,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL06",14,0)
 ;
"RTN","RORHL06",15,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL06",16,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL06",17,0)
 ;
"RTN","RORHL06",18,0)
 ; Return Values:
"RTN","RORHL06",19,0)
 ;       <0  Error code
"RTN","RORHL06",20,0)
 ;        0  Ok
"RTN","RORHL06",21,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL06",22,0)
 ;
"RTN","RORHL06",23,0)
 ; The function uses the ^UTILITY($J,"W") global node.
"RTN","RORHL06",24,0)
 ;
"RTN","RORHL06",25,0)
EN1(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL06",26,0)
 N ERRCNT,FLDS,IDT,IENS,K5,LRDFN,QUIT,RC,SPECIMEN
"RTN","RORHL06",27,0)
 S (ERRCNT,RC)=0
"RTN","RORHL06",28,0)
 ;
"RTN","RORHL06",29,0)
 ;--- Check if the patient exists
"RTN","RORHL06",30,0)
 S RORDFN=+$G(RORDFN)
"RTN","RORHL06",31,0)
 I '$D(^DPT(RORDFN))  D  Q RC
"RTN","RORHL06",32,0)
 . S RC=$$ERROR^RORERR(-36,,,RORDFN,2)
"RTN","RORHL06",33,0)
 ;
"RTN","RORHL06",34,0)
 S LRDFN=+$$LABREF^RORUTL18(RORDFN)  Q:LRDFN'>0 0
"RTN","RORHL06",35,0)
 ;
"RTN","RORHL06",36,0)
 S FLDS="1.1;1.4"
"RTN","RORHL06",37,0)
 S RORENDT=$$INVDATE^RORUTL01(RORENDT)
"RTN","RORHL06",38,0)
 S RORSTDT=$$INVDATE^RORUTL01(RORSTDT)
"RTN","RORHL06",39,0)
 ;
"RTN","RORHL06",40,0)
 S IDT=$O(^LR(LRDFN,"SP",RORSTDT))
"RTN","RORHL06",41,0)
 F  S IDT=$O(^LR(LRDFN,"SP",IDT),-1)  Q:'IDT!(IDT'>RORENDT)  D  Q:RC<0
"RTN","RORHL06",42,0)
 . S K5=0,QUIT=0
"RTN","RORHL06",43,0)
 . F  S K5=$O(^LR(LRDFN,"SP",IDT,.1,K5))  Q:'K5  D  Q:QUIT!(RC<0)
"RTN","RORHL06",44,0)
 . . S IENS=K5_","_IDT_","_LRDFN_","
"RTN","RORHL06",45,0)
 . . S SPECIMEN=$$GET1^DIQ(63.812,IENS,.01,"E",,"RORMSG")
"RTN","RORHL06",46,0)
 . . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL06",47,0)
 . . . D DBS^RORERR("RORMSG",-9,,,63.812,IENS)
"RTN","RORHL06",48,0)
 . . I $$UP^XLFSTR(SPECIMEN)["LIVER"  D
"RTN","RORHL06",49,0)
 . . . S IENS=IDT_","_LRDFN_","
"RTN","RORHL06",50,0)
 . . . S TMP=$$OBR(IENS)
"RTN","RORHL06",51,0)
 . . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL06",52,0)
 . . . S TMP=$$OBX(IENS,FLDS)
"RTN","RORHL06",53,0)
 . . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL06",54,0)
 . . . S QUIT=1
"RTN","RORHL06",55,0)
 ;
"RTN","RORHL06",56,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL06",57,0)
 ;
"RTN","RORHL06",58,0)
 ;***** LIVER BIOPSY OBR SEGMENT BUILDER
"RTN","RORHL06",59,0)
 ;
"RTN","RORHL06",60,0)
 ; RORIENS       IENS of Liver Biopsy Record in File #63.08
"RTN","RORHL06",61,0)
 ;
"RTN","RORHL06",62,0)
 ; Return Values:
"RTN","RORHL06",63,0)
 ;       <0  Error code
"RTN","RORHL06",64,0)
 ;        0  Ok
"RTN","RORHL06",65,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL06",66,0)
 ;
"RTN","RORHL06",67,0)
OBR(RORIENS) ;
"RTN","RORHL06",68,0)
 N BUF,CS,ERRCNT,FLDS,IEN,RC,RORMSG,ROROUT,RORSEG,TMP
"RTN","RORHL06",69,0)
 S (ERRCNT,RC)=0
"RTN","RORHL06",70,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL06",71,0)
 ;--- Check the parameters
"RTN","RORHL06",72,0)
 S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL06",73,0)
 ;
"RTN","RORHL06",74,0)
 ;--- Load the data (with a temporary fix for invalid
"RTN","RORHL06",75,0)
 ;--- output transform of the .01 field - ROR*1*8)
"RTN","RORHL06",76,0)
 D GETS^DIQ(63.08,RORIENS,".01","I","ROROUT","RORMSG")
"RTN","RORHL06",77,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL06",78,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL06",79,0)
 D GETS^DIQ(63.08,RORIENS,".06;.07;.08","IE","ROROUT","RORMSG")
"RTN","RORHL06",80,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL06",81,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL06",82,0)
 ;
"RTN","RORHL06",83,0)
 ;--- Initialize the segment
"RTN","RORHL06",84,0)
 S RORSEG(0)="OBR"
"RTN","RORHL06",85,0)
 ;
"RTN","RORHL06",86,0)
 ;--- OBR-3 - Surgical Path Acc #
"RTN","RORHL06",87,0)
 S RORSEG(3)=$G(ROROUT(63.08,RORIENS,.06,"E"))
"RTN","RORHL06",88,0)
 ;
"RTN","RORHL06",89,0)
 ;--- OBR-4 - Liver Biopsy CPT Code
"RTN","RORHL06",90,0)
 S BUF=47000,TMP=$$CPT^ICPTCOD(BUF)
"RTN","RORHL06",91,0)
 I TMP<0  D  S ERRCNT=ERRCNT+1,TMP=""
"RTN","RORHL06",92,0)
 . D ERROR^RORERR(-57,,$P(TMP,U,2),,+TMP,"$$CPT^ICPTCOD")
"RTN","RORHL06",93,0)
 S $P(BUF,CS,2)=$$ESCAPE^RORHL7($P(TMP,U,3))
"RTN","RORHL06",94,0)
 S $P(BUF,CS,3)="C4"
"RTN","RORHL06",95,0)
 S RORSEG(4)=BUF
"RTN","RORHL06",96,0)
 ;
"RTN","RORHL06",97,0)
 ;--- OBR-7 - Date/Time Specimen Taken
"RTN","RORHL06",98,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.01,"I"))
"RTN","RORHL06",99,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,,63.08,RORIENS,.01)
"RTN","RORHL06",100,0)
 S RORSEG(7)=$$FMTHL7^XLFDT(TMP)
"RTN","RORHL06",101,0)
 ;
"RTN","RORHL06",102,0)
 ;--- OBR-16 - Surgeon/Physician
"RTN","RORHL06",103,0)
 S RORSEG(16)=$G(ROROUT(63.08,RORIENS,.07,"I"))
"RTN","RORHL06",104,0)
 ;
"RTN","RORHL06",105,0)
 ;--- OBR-24 - Service Section ID
"RTN","RORHL06",106,0)
 S RORSEG(24)="SP"
"RTN","RORHL06",107,0)
 ;
"RTN","RORHL06",108,0)
 ;--- OBR-44 - Division
"RTN","RORHL06",109,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.08,"E"))
"RTN","RORHL06",110,0)
 S IEN=$S(TMP'="":+$O(^SC("B",TMP,0)),1:0)
"RTN","RORHL06",111,0)
 S RORSEG(44)=$$DIV44^RORHLUT1(IEN,CS)
"RTN","RORHL06",112,0)
 ;
"RTN","RORHL06",113,0)
 ;--- Store the segment
"RTN","RORHL06",114,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL06",115,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL06",116,0)
 ;
"RTN","RORHL06",117,0)
 ;***** LIVER BIOPSY OBX SEGMENT(S) BUILDER
"RTN","RORHL06",118,0)
 ;
"RTN","RORHL06",119,0)
 ; RORIENS       IENS of Liver Biopsy Record in File #63.08
"RTN","RORHL06",120,0)
 ; RORFLDS       List of WP fields to return as OBX'es
"RTN","RORHL06",121,0)
 ;
"RTN","RORHL06",122,0)
 ; Return Values:
"RTN","RORHL06",123,0)
 ;       <0  Error code
"RTN","RORHL06",124,0)
 ;        0  Ok
"RTN","RORHL06",125,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL06",126,0)
 ;
"RTN","RORHL06",127,0)
OBX(RORIENS,RORFLDS) ;
"RTN","RORHL06",128,0)
 N BUF,CS,DIWF,DIWL,DIWR,ERRCNT,FLD,I,RORII,PZ,RC,RORMSG,ROROUT,RORRES,RORSEG,SCS,TMP,X
"RTN","RORHL06",129,0)
 S (ERRCNT,RC)=0
"RTN","RORHL06",130,0)
 D ECH^RORHL7(.CS,.SCS)
"RTN","RORHL06",131,0)
 ;--- Check the parameters
"RTN","RORHL06",132,0)
 S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL06",133,0)
 ;
"RTN","RORHL06",134,0)
 ;--- Load the data
"RTN","RORHL06",135,0)
 D GETS^DIQ(63.08,RORIENS,RORFLDS,"EI","ROROUT","RORMSG")
"RTN","RORHL06",136,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL06",137,0)
 . D DBS^RORERR("RORMSG",-99,,,63.08,RORIENS)
"RTN","RORHL06",138,0)
 ;
"RTN","RORHL06",139,0)
 ;--- Initialize the segment
"RTN","RORHL06",140,0)
 S RORSEG(0)="OBX"
"RTN","RORHL06",141,0)
 ;
"RTN","RORHL06",142,0)
 ;--- OBX-2
"RTN","RORHL06",143,0)
 S RORSEG(2)="FT"
"RTN","RORHL06",144,0)
 ;
"RTN","RORHL06",145,0)
 ;--- OBX-11
"RTN","RORHL06",146,0)
 S RORSEG(11)="F"
"RTN","RORHL06",147,0)
 ;
"RTN","RORHL06",148,0)
 F PZ=1:1  S FLD=$P(RORFLDS,";",PZ)  Q:FLD=""  D  Q:RC<0
"RTN","RORHL06",149,0)
 . S BUF=47000,TMP=$$CPT^ICPTCOD(BUF)
"RTN","RORHL06",150,0)
 . I TMP<0  D  S ERRCNT=ERRCNT+1,TMP=""
"RTN","RORHL06",151,0)
 . . D ERROR^RORERR(-57,,$P(TMP,U,2),,+TMP,"$$CPT^ICPTCOD")
"RTN","RORHL06",152,0)
 . S $P(BUF,SCS,2)=$$GET1^DID(63.08,FLD,,"LABEL",,"RORMSG")
"RTN","RORHL06",153,0)
 . S $P(BUF,CS,2)=$$ESCAPE^RORHL7($P(TMP,U,3))
"RTN","RORHL06",154,0)
 . S $P(BUF,CS,3)="C4"
"RTN","RORHL06",155,0)
 . S RORSEG(3)=BUF
"RTN","RORHL06",156,0)
 . ;---
"RTN","RORHL06",157,0)
 . K ^UTILITY($J,"W")
"RTN","RORHL06",158,0)
 . S DIWL=1,DIWR=72
"RTN","RORHL06",159,0)
 . S RORII=0
"RTN","RORHL06",160,0)
 . F  S RORII=$O(ROROUT(63.08,RORIENS,FLD,RORII))  Q:'RORII  D
"RTN","RORHL06",161,0)
 . . S X=ROROUT(63.08,RORIENS,FLD,RORII)  D ^DIWP
"RTN","RORHL06",162,0)
 . ;---
"RTN","RORHL06",163,0)
 . S I=0
"RTN","RORHL06",164,0)
 . F  S I=$O(^UTILITY($J,"W",DIWL,I))  Q:'I  D
"RTN","RORHL06",165,0)
 . . S RORSEG(5)=$G(^UTILITY($J,"W",DIWL,I,0))
"RTN","RORHL06",166,0)
 . . ;--- Store the segment
"RTN","RORHL06",167,0)
 . . D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL06",168,0)
 ;
"RTN","RORHL06",169,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL07")
0^15^B12998174^B16768200
"RTN","RORHL07",1,0)
RORHL07 ;HOIFO/BH - HL7 INPATIENT PHARMACY: ORC,RXE ; 5/22/06 1:29pm
"RTN","RORHL07",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL07",3,0)
 ;
"RTN","RORHL07",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL07",5,0)
 ;
"RTN","RORHL07",6,0)
 ; #93           Get stop code from the file #44 (controlled)
"RTN","RORHL07",7,0)
 ; #1876         Read access to file #59 (controlled)
"RTN","RORHL07",8,0)
 ; #10040        Read the INSTITUTION field of file #44 (supported)
"RTN","RORHL07",9,0)
 ; #10060        Read access to file #200 (supported)
"RTN","RORHL07",10,0)
 ; #10090        Read access to file #4 (supported)
"RTN","RORHL07",11,0)
 ;
"RTN","RORHL07",12,0)
 Q
"RTN","RORHL07",13,0)
 ;
"RTN","RORHL07",14,0)
 ;***** INPATIENT PHARMACY ORC SEGMENT BUILDER
"RTN","RORHL07",15,0)
 ;
"RTN","RORHL07",16,0)
 ; NODE          Closed root of a subtree that stores the output of
"RTN","RORHL07",17,0)
 ;               the PSS432^PSS55 Pharmacy API
"RTN","RORHL07",18,0)
 ;
"RTN","RORHL07",19,0)
 ; .RORORC       Array with info (from OEL^PSOORRL)
"RTN","RORHL07",20,0)
 ;
"RTN","RORHL07",21,0)
 ; Return Values:
"RTN","RORHL07",22,0)
 ;       <0  Error Code
"RTN","RORHL07",23,0)
 ;        0  Ok
"RTN","RORHL07",24,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL07",25,0)
 ;
"RTN","RORHL07",26,0)
ORC(NODE,RORORC) ;
"RTN","RORHL07",27,0)
 N BUF,CS,ERRCNT,IEN42,IEN44,RC,RORMSG,RORSEG,TMP
"RTN","RORHL07",28,0)
 S (ERRCNT,RC)=0
"RTN","RORHL07",29,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL07",30,0)
 ;
"RTN","RORHL07",31,0)
 ;--- Initialize the segment
"RTN","RORHL07",32,0)
 S RORSEG(0)="ORC"
"RTN","RORHL07",33,0)
 ;
"RTN","RORHL07",34,0)
 ;--- ORC-1 - Order Control 
"RTN","RORHL07",35,0)
 S RORSEG(1)="NW"
"RTN","RORHL07",36,0)
 ;
"RTN","RORHL07",37,0)
 ;--- ORC-2 - Placer Order Number
"RTN","RORHL07",38,0)
 S RORSEG(2)=RORDFN_"V"_$P($G(@NODE@(.01)),U)_CS_"IP"
"RTN","RORHL07",39,0)
 ;
"RTN","RORHL07",40,0)
 ;--- ORC-12 - Provider
"RTN","RORHL07",41,0)
 S BUF=+$P($G(RORORC("P",0)),U)
"RTN","RORHL07",42,0)
 I BUF>0  D
"RTN","RORHL07",43,0)
 . S $P(BUF,CS,13)=$$GET1^DIQ(200,+BUF_",",53.5,"E",,"RORMSG")
"RTN","RORHL07",44,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL07",45,0)
 . . D DBS^RORERR("RORMSG",-99,,,200,+BUF_",")
"RTN","RORHL07",46,0)
 . S RORSEG(12)=BUF
"RTN","RORHL07",47,0)
 ;
"RTN","RORHL07",48,0)
 ;--- ORC-15 - Order Date/Time
"RTN","RORHL07",49,0)
 S TMP=$$FMTHL7^XLFDT($P($G(RORORC(0)),U,5))
"RTN","RORHL07",50,0)
 Q:TMP'>0 $$ERROR^RORERR(-100,,,,"No order date","OEL^PSOORRL")
"RTN","RORHL07",51,0)
 S RORSEG(15)=TMP
"RTN","RORHL07",52,0)
 ;
"RTN","RORHL07",53,0)
 ;--- ORC-16 - Control Code Reason
"RTN","RORHL07",54,0)
 S RORSEG(16)=CS_CS_CS_CS_"NEW"
"RTN","RORHL07",55,0)
 ;
"RTN","RORHL07",56,0)
 ;--- ORC-17 - Division
"RTN","RORHL07",57,0)
 S IEN42=+$P($G(@NODE@(9)),U)
"RTN","RORHL07",58,0)
 I IEN42>0  D
"RTN","RORHL07",59,0)
 . S IEN44=+$$GET1^DIQ(42,IEN42_",",44,"I",,"RORMSG")
"RTN","RORHL07",60,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL07",61,0)
 . . D DBS^RORERR("RORMSG",-99,,,42,IEN42_",")
"RTN","RORHL07",62,0)
 E  S IEN44=0
"RTN","RORHL07",63,0)
 S RORSEG(17)=$$DIV44^RORHLUT1(IEN44,CS)
"RTN","RORHL07",64,0)
 ;
"RTN","RORHL07",65,0)
 ;--- Store the segment
"RTN","RORHL07",66,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL07",67,0)
 Q ERRCNT
"RTN","RORHL07",68,0)
 ;
"RTN","RORHL07",69,0)
 ;***** INPATIENT PHARMACY RXE SEGMENT BUILDER
"RTN","RORHL07",70,0)
 ;
"RTN","RORHL07",71,0)
 ; NODE          Closed root of a subtree that stores the output of
"RTN","RORHL07",72,0)
 ;               the PSS432^PSS55 Pharmacy API
"RTN","RORHL07",73,0)
 ;
"RTN","RORHL07",74,0)
 ; .RORRXE       Array containing info (from OEL^PSJORRL)
"RTN","RORHL07",75,0)
 ;
"RTN","RORHL07",76,0)
 ; Return Values:
"RTN","RORHL07",77,0)
 ;       <0  Error Code
"RTN","RORHL07",78,0)
 ;        0  Ok
"RTN","RORHL07",79,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL07",80,0)
 ;
"RTN","RORHL07",81,0)
RXE(NODE,RORRXE) ;
"RTN","RORHL07",82,0)
 N BUF,CS,ERRCNT,IDGN,II,INDF,RC,RORMSG,RORMR,ROROUT,RORUOUT,RORQT,RORSEG,TMP
"RTN","RORHL07",83,0)
 Q:$P($G(RORRXE(0)),U)="" 0
"RTN","RORHL07",84,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL07",85,0)
 S (ERRCNT,RC)=0
"RTN","RORHL07",86,0)
 ;
"RTN","RORHL07",87,0)
 ;--- Load the data
"RTN","RORHL07",88,0)
 S RORMR=$$ESCAPE^RORHL7($P($G(@NODE@(3)),U,2))
"RTN","RORHL07",89,0)
 S TMP=$P($G(@NODE@(26)),U),RORQT=""
"RTN","RORHL07",90,0)
 S:TMP'="" $P(RORQT,CS,8)=$$ESCAPE^RORHL7(TMP)
"RTN","RORHL07",91,0)
 ;
"RTN","RORHL07",92,0)
 S II=0
"RTN","RORHL07",93,0)
 F  S II=$O(RORRXE("DD",II)) Q:II=""  D  Q:RC<0
"RTN","RORHL07",94,0)
 . K ROROUT,RORSEG
"RTN","RORHL07",95,0)
 . ;--- Initialize the segment
"RTN","RORHL07",96,0)
 . S RORSEG(0)="RXE"
"RTN","RORHL07",97,0)
 . ;
"RTN","RORHL07",98,0)
 . ;--- RXE-1 - Quantity/Timing
"RTN","RORHL07",99,0)
 . S RORSEG(1)=RORQT
"RTN","RORHL07",100,0)
 . ;
"RTN","RORHL07",101,0)
 . ;--- RXE-2 - Give Code
"RTN","RORHL07",102,0)
 . S IDGN=+$P($G(RORRXE("DD",II,0)),U)
"RTN","RORHL07",103,0)
 . S:IDGN'>0 IDGN=+$P($G(RORRXE("DD",II,0)),U,3)  Q:IDGN'>0
"RTN","RORHL07",104,0)
 . S BUF="",TMP=$$RXE2^RORHL031(IDGN,CS,.BUF,.INDF)
"RTN","RORHL07",105,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL07",106,0)
 . Q:BUF=""
"RTN","RORHL07",107,0)
 . S RORSEG(2)=BUF
"RTN","RORHL07",108,0)
 . ;
"RTN","RORHL07",109,0)
 . ;--- RXE-3 - Give Amount (Min)
"RTN","RORHL07",110,0)
 . S RORSEG(3)=""""""
"RTN","RORHL07",111,0)
 . ;
"RTN","RORHL07",112,0)
 . ;--- RXE-5 - Give Units
"RTN","RORHL07",113,0)
 . S TMP=$$RXE5^RORHL031(+$G(INDF),CS,.BUF)
"RTN","RORHL07",114,0)
 . S:TMP ERRCNT=ERRCNT+1
"RTN","RORHL07",115,0)
 . S:BUF'="" RORSEG(5)=BUF
"RTN","RORHL07",116,0)
 . ;
"RTN","RORHL07",117,0)
 . ;--- RXE-18 - Stop Date/Time
"RTN","RORHL07",118,0)
 . S TMP=$P($G(RORRXE(0)),U,3)
"RTN","RORHL07",119,0)
 . S RORSEG(18)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL07",120,0)
 . ;
"RTN","RORHL07",121,0)
 . ;--- RXE-21 - Medication Route
"RTN","RORHL07",122,0)
 . S:RORMR'="" RORSEG(21)=RORMR
"RTN","RORHL07",123,0)
 . ;
"RTN","RORHL07",124,0)
 . ;--- RXE-24 - Units per dose
"RTN","RORHL07",125,0)
 . S TMP=$P($G(RORRXE("DD",II,0)),U,2)
"RTN","RORHL07",126,0)
 . S:TMP'="" RORSEG(24)=+TMP
"RTN","RORHL07",127,0)
 . ;
"RTN","RORHL07",128,0)
 . ;--- Store the segment
"RTN","RORHL07",129,0)
 . D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL07",130,0)
 ;
"RTN","RORHL07",131,0)
 Q ERRCNT
"RTN","RORHL071")
0^30^B12541505^B16088753
"RTN","RORHL071",1,0)
RORHL071 ;HOIFO/BH - HL7 IV PHARMACY: ORC,RXE ; 5/30/06 8:37am
"RTN","RORHL071",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL071",3,0)
 ;
"RTN","RORHL071",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL071",5,0)
 ;
"RTN","RORHL071",6,0)
 ; #10039        Read access to file #42 (supported)
"RTN","RORHL071",7,0)
 ; #10060        Read access to file #200 (supported)
"RTN","RORHL071",8,0)
 ;
"RTN","RORHL071",9,0)
 Q
"RTN","RORHL071",10,0)
 ;
"RTN","RORHL071",11,0)
 ;***** IV PHARMACY ORC SEGMENT BUILDER
"RTN","RORHL071",12,0)
 ;
"RTN","RORHL071",13,0)
 ; NODE          Closed root of a subtree that stores the output of
"RTN","RORHL071",14,0)
 ;               the PSS436^PSS55 Pharmacy API
"RTN","RORHL071",15,0)
 ;
"RTN","RORHL071",16,0)
 ; .RORORC       Array with info (from OEL^PSOORRL)
"RTN","RORHL071",17,0)
 ;
"RTN","RORHL071",18,0)
 ; Return Values:
"RTN","RORHL071",19,0)
 ;       <0  Error Code
"RTN","RORHL071",20,0)
 ;        0  Ok
"RTN","RORHL071",21,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL071",22,0)
 ;
"RTN","RORHL071",23,0)
ORC(NODE,RORORC) ;
"RTN","RORHL071",24,0)
 N BUF,CS,ERRCNT,IEN42,IEN44,RC,RORMSG,RORSEG,TMP
"RTN","RORHL071",25,0)
 S (ERRCNT,RC)=0
"RTN","RORHL071",26,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL071",27,0)
 ;
"RTN","RORHL071",28,0)
 ;--- Initialize the segment
"RTN","RORHL071",29,0)
 S RORSEG(0)="ORC"
"RTN","RORHL071",30,0)
 ;
"RTN","RORHL071",31,0)
 ;--- ORC-1 - Order Control 
"RTN","RORHL071",32,0)
 S RORSEG(1)="NW"
"RTN","RORHL071",33,0)
 ;
"RTN","RORHL071",34,0)
 ;--- ORC-2 - Placer Order Number
"RTN","RORHL071",35,0)
 S RORSEG(2)=RORDFN_"V"_$P($G(@NODE@(.01)),U)_CS_"IP"
"RTN","RORHL071",36,0)
 ;
"RTN","RORHL071",37,0)
 ;--- ORC-12 - Provider
"RTN","RORHL071",38,0)
 S BUF=+$P($G(RORORC("P",0)),U)
"RTN","RORHL071",39,0)
 I BUF>0  D
"RTN","RORHL071",40,0)
 . S $P(BUF,CS,13)=$$GET1^DIQ(200,+BUF_",",53.5,"E",,"RORMSG")
"RTN","RORHL071",41,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL071",42,0)
 . . D DBS^RORERR("RORMSG",-99,,,200,+BUF_",")
"RTN","RORHL071",43,0)
 . S RORSEG(12)=BUF
"RTN","RORHL071",44,0)
 ;
"RTN","RORHL071",45,0)
 ;--- ORC-15 - Order Date/Time
"RTN","RORHL071",46,0)
 S TMP=$$FMTHL7^XLFDT($P($G(RORORC(0)),U,5))
"RTN","RORHL071",47,0)
 Q:TMP'>0 $$ERROR^RORERR(-100,,,,"No order date","OEL^PSOORRL")
"RTN","RORHL071",48,0)
 S RORSEG(15)=TMP
"RTN","RORHL071",49,0)
 ;
"RTN","RORHL071",50,0)
 ;--- ORC-16 - Control Code Reason
"RTN","RORHL071",51,0)
 S RORSEG(16)=CS_CS_CS_CS_"NEW"
"RTN","RORHL071",52,0)
 ;
"RTN","RORHL071",53,0)
 ;--- ORC-17 - Division
"RTN","RORHL071",54,0)
 S IEN42=+$P($G(@NODE@(9)),U)
"RTN","RORHL071",55,0)
 I IEN42>0  D
"RTN","RORHL071",56,0)
 . S IEN44=+$$GET1^DIQ(42,IEN42_",",44,"I",,"RORMSG")
"RTN","RORHL071",57,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL071",58,0)
 . . D DBS^RORERR("RORMSG",-99,,,42,IEN42_",")
"RTN","RORHL071",59,0)
 E  S IEN44=0
"RTN","RORHL071",60,0)
 S RORSEG(17)=$$DIV44^RORHLUT1(IEN44,CS)
"RTN","RORHL071",61,0)
 ;
"RTN","RORHL071",62,0)
 ;--- Store the segment
"RTN","RORHL071",63,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL071",64,0)
 Q ERRCNT
"RTN","RORHL071",65,0)
 ;
"RTN","RORHL071",66,0)
 ;***** IV PHARMACY RXE SEGMENT BUILDER
"RTN","RORHL071",67,0)
 ;
"RTN","RORHL071",68,0)
 ; NODE          Closed root of a subtree that stores the output of
"RTN","RORHL071",69,0)
 ;               the PSS436^PSS55 Pharmacy API
"RTN","RORHL071",70,0)
 ;
"RTN","RORHL071",71,0)
 ; .RORRXE       Array containing info (from OEL^PSJORRL)
"RTN","RORHL071",72,0)
 ;
"RTN","RORHL071",73,0)
 ; Return Values:
"RTN","RORHL071",74,0)
 ;       <0  Error Code
"RTN","RORHL071",75,0)
 ;        0  Ok
"RTN","RORHL071",76,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL071",77,0)
 ;
"RTN","RORHL071",78,0)
RXE(NODE,RORRXE) ;
"RTN","RORHL071",79,0)
 N BUF,CS,ERRCNT,IDGN,II,INDF,RC,RORMSG,RORMR,ROROUT,RORQT,RORSEG,TMP
"RTN","RORHL071",80,0)
 Q:$P($G(RORRXE(0)),U)="" 0
"RTN","RORHL071",81,0)
 S (ERRCNT,RC)=0
"RTN","RORHL071",82,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL071",83,0)
 ;
"RTN","RORHL071",84,0)
 ;--- Load the data
"RTN","RORHL071",85,0)
 S RORMR=$$ESCAPE^RORHL7($P($G(@NODE@(132)),U,2))
"RTN","RORHL071",86,0)
 S TMP=$P($G(@NODE@(.09)),U),RORQT=""
"RTN","RORHL071",87,0)
 S:TMP'="" $P(RORQT,CS,8)=$$ESCAPE^RORHL7(TMP)
"RTN","RORHL071",88,0)
 ;
"RTN","RORHL071",89,0)
 S II=0
"RTN","RORHL071",90,0)
 F  S II=$O(RORRXE("DD",II)) Q:II=""  D  Q:RC<0
"RTN","RORHL071",91,0)
 . K ROROUT,RORSEG
"RTN","RORHL071",92,0)
 . ;--- Initialize the segment
"RTN","RORHL071",93,0)
 . S RORSEG(0)="RXE"
"RTN","RORHL071",94,0)
 . ;
"RTN","RORHL071",95,0)
 . ;--- RXE-1 - Quantity/Timing
"RTN","RORHL071",96,0)
 . S RORSEG(1)=RORQT
"RTN","RORHL071",97,0)
 . ;
"RTN","RORHL071",98,0)
 . ;--- RXE-2 - Give Code
"RTN","RORHL071",99,0)
 . S IDGN=+$P($G(RORRXE("DD",II,0)),U)
"RTN","RORHL071",100,0)
 . S:IDGN'>0 IDGN=+$P($G(RORRXE("DD",II,0)),U,3)  Q:IDGN'>0
"RTN","RORHL071",101,0)
 . S BUF="",TMP=$$RXE2^RORHL031(IDGN,CS,.BUF,.INDF)
"RTN","RORHL071",102,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL071",103,0)
 . Q:BUF=""
"RTN","RORHL071",104,0)
 . S RORSEG(2)=BUF
"RTN","RORHL071",105,0)
 . ;
"RTN","RORHL071",106,0)
 . ;--- RXE-3 - Give Amount (Min)
"RTN","RORHL071",107,0)
 . S RORSEG(3)=""""""
"RTN","RORHL071",108,0)
 . ;
"RTN","RORHL071",109,0)
 . ;--- RXE-5 - Give Units
"RTN","RORHL071",110,0)
 . S TMP=$$RXE5^RORHL031(+$G(INDF),CS,.BUF)
"RTN","RORHL071",111,0)
 . S:TMP ERRCNT=ERRCNT+1
"RTN","RORHL071",112,0)
 . S:BUF'="" RORSEG(5)=BUF
"RTN","RORHL071",113,0)
 . ;
"RTN","RORHL071",114,0)
 . ;--- RXE-18 - Stop Date/Time
"RTN","RORHL071",115,0)
 . S TMP=$P($G(RORRXE(0)),U,3)
"RTN","RORHL071",116,0)
 . S RORSEG(18)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL071",117,0)
 . ;
"RTN","RORHL071",118,0)
 . ;--- RXE-21 - Medication Route
"RTN","RORHL071",119,0)
 . S:RORMR'="" RORSEG(21)=RORMR
"RTN","RORHL071",120,0)
 . ;
"RTN","RORHL071",121,0)
 . ;--- RXE-24 - Units per dose
"RTN","RORHL071",122,0)
 . S TMP=$P($G(RORRXE("DD",II,0)),U,2)
"RTN","RORHL071",123,0)
 . S:TMP'="" RORSEG(24)=+TMP
"RTN","RORHL071",124,0)
 . ;
"RTN","RORHL071",125,0)
 . ;--- Store the segment
"RTN","RORHL071",126,0)
 . D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL071",127,0)
 ;
"RTN","RORHL071",128,0)
 Q ERRCNT
"RTN","RORHL08")
0^2^B41390061^B41390061
"RTN","RORHL08",1,0)
RORHL08 ;HOIFO/BH - HL7 INPATIENT DATA: PV1,OBR ; 3/13/06 9:24am
"RTN","RORHL08",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL08",3,0)
 ;
"RTN","RORHL08",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL08",5,0)
 ;
"RTN","RORHL08",6,0)
 ; #92           Read access to the PTF file (controlled)
"RTN","RORHL08",7,0)
 ; #994          Read access to the PTF CLOSE OUT file (controlled)
"RTN","RORHL08",8,0)
 ;
"RTN","RORHL08",9,0)
 Q
"RTN","RORHL08",10,0)
 ;
"RTN","RORHL08",11,0)
 ;***** INPATIENT DATA SEGMENT BUILDER
"RTN","RORHL08",12,0)
 ;
"RTN","RORHL08",13,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL08",14,0)
 ;
"RTN","RORHL08",15,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL08",16,0)
 ;               data extraction time frames are stored.
"RTN","RORHL08",17,0)
 ;
"RTN","RORHL08",18,0)
 ; RORTY         Set to either "PV1" or "OBR"
"RTN","RORHL08",19,0)
 ;
"RTN","RORHL08",20,0)
 ; The ^TMP("RORHL08",$J) global node is used by this function.
"RTN","RORHL08",21,0)
 ;
"RTN","RORHL08",22,0)
 ; Return Values:
"RTN","RORHL08",23,0)
 ;       <0  Error Code
"RTN","RORHL08",24,0)
 ;        0  Ok
"RTN","RORHL08",25,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL08",26,0)
 ;
"RTN","RORHL08",27,0)
EN1(RORDFN,DXDTS,RORTY) ;
"RTN","RORHL08",28,0)
 N ERRCNT,IENS,INIEN,PV1CNT,RC,RORMSG,TMP
"RTN","RORHL08",29,0)
 S (ERRCNT,RC)=0
"RTN","RORHL08",30,0)
 ;
"RTN","RORHL08",31,0)
 ;--- PV1 Segments
"RTN","RORHL08",32,0)
 I RORTY="PV1"  K ^TMP("RORHL08",$J)  D
"RTN","RORHL08",33,0)
 . N DATE,ENDT,IDX,STDT,TYPE,XREF
"RTN","RORHL08",34,0)
 . S XREF=$NA(^TMP("RORPTF",$J,"PDI",RORDFN))
"RTN","RORHL08",35,0)
 . S (IDX,PV1CNT)=0
"RTN","RORHL08",36,0)
 . F  S IDX=$O(DXDTS(3,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL08",37,0)
 . . S STDT=$P(DXDTS(3,IDX),U),ENDT=$P(DXDTS(3,IDX),U,2)
"RTN","RORHL08",38,0)
 . . ;---
"RTN","RORHL08",39,0)
 . . S TMP=$$UPDNDX(STDT,ENDT)
"RTN","RORHL08",40,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL08",41,0)
 . . ;---
"RTN","RORHL08",42,0)
 . . S DATE=$O(@XREF@(STDT),-1)
"RTN","RORHL08",43,0)
 . . F  S DATE=$O(@XREF@(DATE))  Q:'DATE!(DATE'<ENDT)  D
"RTN","RORHL08",44,0)
 . . . S INIEN=""
"RTN","RORHL08",45,0)
 . . . F  S INIEN=$O(@XREF@(DATE,INIEN))  Q:'INIEN  D
"RTN","RORHL08",46,0)
 . . . . S IENS=INIEN_","
"RTN","RORHL08",47,0)
 . . . . ;--- Skip non-PTF records
"RTN","RORHL08",48,0)
 . . . . S TYPE=$$GET1^DIQ(45,IENS,11,"I",,"RORMSG")
"RTN","RORHL08",49,0)
 . . . . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL08",50,0)
 . . . . . D DBS^RORERR("RORMSG",-9,,RORDFN,45,IENS)
"RTN","RORHL08",51,0)
 . . . . Q:TYPE'="1"
"RTN","RORHL08",52,0)
 . . . . ;--- Generate the PV1 segment
"RTN","RORHL08",53,0)
 . . . . S TMP=$$PV1(INIEN,RORDFN)
"RTN","RORHL08",54,0)
 . . . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL08",55,0)
 . . . . ;--- Reference for the corresponding OBR and OBX segments
"RTN","RORHL08",56,0)
 . . . . S:TMP'="S" PV1CNT=PV1CNT+1,^TMP("RORHL08",$J,PV1CNT)=INIEN
"RTN","RORHL08",57,0)
 ;
"RTN","RORHL08",58,0)
 ;--- OBR and OBX Segments
"RTN","RORHL08",59,0)
 I RORTY="OBR"  D  K ^TMP("RORHL08",$J)
"RTN","RORHL08",60,0)
 . S PV1CNT=0
"RTN","RORHL08",61,0)
 . F  S PV1CNT=$O(^TMP("RORHL08",$J,PV1CNT))  Q:PV1CNT'>0  D
"RTN","RORHL08",62,0)
 . . S INIEN=+$G(^TMP("RORHL08",$J,PV1CNT))  Q:INIEN'>0
"RTN","RORHL08",63,0)
 . . ;---
"RTN","RORHL08",64,0)
 . . S TMP=$$OBR(INIEN,RORDFN)
"RTN","RORHL08",65,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL08",66,0)
 . . ;---
"RTN","RORHL08",67,0)
 . . S TMP=$$OBX^RORHL081(INIEN,RORDFN)
"RTN","RORHL08",68,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL08",69,0)
 ;
"RTN","RORHL08",70,0)
 ;--- Check for errors
"RTN","RORHL08",71,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL08",72,0)
 ;
"RTN","RORHL08",73,0)
 ;***** MERGES THE TIME FRAME INTO THE LIST
"RTN","RORHL08",74,0)
 ;
"RTN","RORHL08",75,0)
 ; .DXDTS        Reference to a local array where the time frames
"RTN","RORHL08",76,0)
 ;               are returned: DXDTS(StartDT)=StartDT^EndDT.
"RTN","RORHL08",77,0)
 ;
"RTN","RORHL08",78,0)
 ; STDT          Start date
"RTN","RORHL08",79,0)
 ; ENDT          End date
"RTN","RORHL08",80,0)
 ;
"RTN","RORHL08",81,0)
 ; This procedure merges the provided time frame [STDT,ENDT[ into
"RTN","RORHL08",82,0)
 ; the list stored in the ^TMP("RORPTF",$J,"DTF") global node and
"RTN","RORHL08",83,0)
 ; returns a list of time frames that should be updated into a
"RTN","RORHL08",84,0)
 ; local array defined by the DXDTS parameter.
"RTN","RORHL08",85,0)
 ;
"RTN","RORHL08",86,0)
 ; Variants of positional relationship of the existing time frames
"RTN","RORHL08",87,0)
 ; and the one that is being added to the list:
"RTN","RORHL08",88,0)
 ;
"RTN","RORHL08",89,0)
 ; (1)  +--------TMP                      +----------+
"RTN","RORHL08",90,0)
 ;                     STDT--------ENDT
"RTN","RORHL08",91,0)
 ;
"RTN","RORHL08",92,0)
 ; (2)           +--------TMP
"RTN","RORHL08",93,0)
 ;      STDT--------ENDT
"RTN","RORHL08",94,0)
 ;
"RTN","RORHL08",95,0)
 ; (3)  TMP--------+
"RTN","RORHL08",96,0)
 ;           STDT--------ENDT
"RTN","RORHL08",97,0)
 ;
"RTN","RORHL08",98,0)
 ; (4)         +--------+
"RTN","RORHL08",99,0)
 ;      STDT------------------ENDT
"RTN","RORHL08",100,0)
 ;
"RTN","RORHL08",101,0)
MERGEDTF(DXDTS,STDT,ENDT) ;
"RTN","RORHL08",102,0)
 N DATE,DXE,DXS,ENDT0,EXIT,STDT0,TMP  K DXDTS
"RTN","RORHL08",103,0)
 Q:STDT>ENDT
"RTN","RORHL08",104,0)
 S STDT0=STDT,(DXE,ENDT0)=ENDT
"RTN","RORHL08",105,0)
 ;--- Merge time frames if possible
"RTN","RORHL08",106,0)
 S DATE=$O(^TMP("RORPTF",$J,"DTF",ENDT)),EXIT=0
"RTN","RORHL08",107,0)
 F  S DATE=$O(^TMP("RORPTF",$J,"DTF",DATE),-1)  Q:DATE=""  D  Q:EXIT
"RTN","RORHL08",108,0)
 . S DXS=$P(^TMP("RORPTF",$J,"DTF",DATE),U,2)
"RTN","RORHL08",109,0)
 . I DXS<STDT  S EXIT=1  Q         ; (1)
"RTN","RORHL08",110,0)
 . S:DXS>ENDT ENDT=DXS,DFLT=0      ; (2)
"RTN","RORHL08",111,0)
 . S:DXS<DXE DXDTS(DXS)=DXS_U_DXE
"RTN","RORHL08",112,0)
 . S DXE=$P(^TMP("RORPTF",$J,"DTF",DATE),U)
"RTN","RORHL08",113,0)
 . S:DXE<STDT STDT=DXE,DFLT=0      ; (3)
"RTN","RORHL08",114,0)
 . K ^TMP("RORPTF",$J,"DTF",DATE)
"RTN","RORHL08",115,0)
 S:DXE>STDT0 DXDTS(STDT0)=STDT0_U_DXE
"RTN","RORHL08",116,0)
 ;--- Store the new time frame
"RTN","RORHL08",117,0)
 S ^TMP("RORPTF",$J,"DTF",STDT)=STDT_U_ENDT
"RTN","RORHL08",118,0)
 Q
"RTN","RORHL08",119,0)
 ;
"RTN","RORHL08",120,0)
 ;***** OBR SEGMENT BUILDER (INPATIENT)
"RTN","RORHL08",121,0)
 ;
"RTN","RORHL08",122,0)
 ; RORIEN        IEN of file #45
"RTN","RORHL08",123,0)
 ;
"RTN","RORHL08",124,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL08",125,0)
 ;
"RTN","RORHL08",126,0)
 ; Return Values:
"RTN","RORHL08",127,0)
 ;       <0  Error Code
"RTN","RORHL08",128,0)
 ;        0  Ok
"RTN","RORHL08",129,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL08",130,0)
 ;
"RTN","RORHL08",131,0)
OBR(RORIEN,RORDFN) ;
"RTN","RORHL08",132,0)
 N CS,ERRCNT,IENS,OBDT,RC,RORMSG,RORSEG,TMP
"RTN","RORHL08",133,0)
 S (ERRCNT,RC)=0
"RTN","RORHL08",134,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL08",135,0)
 ;
"RTN","RORHL08",136,0)
 ;--- Initialize the segment
"RTN","RORHL08",137,0)
 S RORSEG(0)="OBR"
"RTN","RORHL08",138,0)
 ;
"RTN","RORHL08",139,0)
 ;--- OBR-3 - Order Number (IEN in the PTF file #45)
"RTN","RORHL08",140,0)
 S RORSEG(3)=RORIEN
"RTN","RORHL08",141,0)
 ;
"RTN","RORHL08",142,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL08",143,0)
 S RORSEG(4)="IP"_CS_"Inpatient"_CS_"C4"
"RTN","RORHL08",144,0)
 ;
"RTN","RORHL08",145,0)
 ;--- OBR-7 -Observation Date/Time (Admission Date/Time) *KEY*
"RTN","RORHL08",146,0)
 S IENS=RORIEN_","
"RTN","RORHL08",147,0)
 S OBDT=$$GET1^DIQ(45,IENS,2,"I",,"RORMSG")
"RTN","RORHL08",148,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,RORDFN,45,IENS)
"RTN","RORHL08",149,0)
 ;---
"RTN","RORHL08",150,0)
 S OBDT=$$FMTHL7^XLFDT(OBDT)
"RTN","RORHL08",151,0)
 Q:OBDT'>0 $$ERROR^RORERR(-95,,,RORDFN,45,IENS,2)
"RTN","RORHL08",152,0)
 S RORSEG(7)=OBDT
"RTN","RORHL08",153,0)
 ;
"RTN","RORHL08",154,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL08",155,0)
 S RORSEG(24)="PHY"
"RTN","RORHL08",156,0)
 ;
"RTN","RORHL08",157,0)
 ;--- OBR-44 - Division
"RTN","RORHL08",158,0)
 S RORSEG(44)=$$SITE^RORUTL03(CS)
"RTN","RORHL08",159,0)
 ;
"RTN","RORHL08",160,0)
 ;--- Store the segment
"RTN","RORHL08",161,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL08",162,0)
 Q ERRCNT
"RTN","RORHL08",163,0)
 ;
"RTN","RORHL08",164,0)
 ;***** PV1 SEGMENT BUILDER (INPATIENT)
"RTN","RORHL08",165,0)
 ;
"RTN","RORHL08",166,0)
 ; RORIEN        IEN of file #45
"RTN","RORHL08",167,0)
 ;
"RTN","RORHL08",168,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL08",169,0)
 ;
"RTN","RORHL08",170,0)
 ; Return Values:
"RTN","RORHL08",171,0)
 ;       <0  Error Code
"RTN","RORHL08",172,0)
 ;        0  Ok
"RTN","RORHL08",173,0)
 ;      "S"  No inpatient data
"RTN","RORHL08",174,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL08",175,0)
 ;
"RTN","RORHL08",176,0)
PV1(RORIEN,RORDFN) ;
"RTN","RORHL08",177,0)
 N BUF,CS,ERRCNT,IENS,RC,RORBUF,RORMSG,RORSEG,TMP
"RTN","RORHL08",178,0)
 S (ERRCNT,RC)=0
"RTN","RORHL08",179,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL08",180,0)
 ;
"RTN","RORHL08",181,0)
 ;--- Load the data
"RTN","RORHL08",182,0)
 S IENS=RORIEN_","
"RTN","RORHL08",183,0)
 D GETS^DIQ(45,IENS,"2;70;71;72","I","RORBUF","RORMSG")
"RTN","RORHL08",184,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL08",185,0)
 . D DBS^RORERR("RORMSG",-9,,RORDFN,45,IENS)
"RTN","RORHL08",186,0)
 ;
"RTN","RORHL08",187,0)
 ;--- Initialize the segment
"RTN","RORHL08",188,0)
 S RORSEG(0)="PV1"
"RTN","RORHL08",189,0)
 ;
"RTN","RORHL08",190,0)
 ;--- PV1-2 - Patient Class
"RTN","RORHL08",191,0)
 S RORSEG(2)="I"  ; I - Inpatient
"RTN","RORHL08",192,0)
 ;
"RTN","RORHL08",193,0)
 ;--- PV1-3 - Assigned Patient Location (Station Number)
"RTN","RORHL08",194,0)
 S TMP=$E($P($$SITE^VASITE,U,3),1,3)  ; Strip the suffix
"RTN","RORHL08",195,0)
 Q:TMP'>0 $$ERROR^RORERR(-100,,,,"No station number","$$SITE^VASITE")
"RTN","RORHL08",196,0)
 S RORSEG(3)=TMP
"RTN","RORHL08",197,0)
 ;
"RTN","RORHL08",198,0)
 ;--- PV1-6 - Prior Patient Location (Bed Section at Discharge)
"RTN","RORHL08",199,0)
 I $G(RORBUF(45,IENS,71,"I"))>0  D
"RTN","RORHL08",200,0)
 . S BUF=""
"RTN","RORHL08",201,0)
 . S $P(BUF,CS,3)=RORBUF(45,IENS,71,"I")  ; Bed Section IEN
"RTN","RORHL08",202,0)
 . S TMP=$$EXTERNAL^DILFD(45,71,,$P(BUF,CS,3),"RORMSG")
"RTN","RORHL08",203,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL08",204,0)
 . . D DBS^RORERR("RORMSG",-99,,RORDFN,45,IENS)
"RTN","RORHL08",205,0)
 . S $P(BUF,CS,9)=$$ESCAPE^RORHL7(TMP)    ; Bed Section Name
"RTN","RORHL08",206,0)
 . S RORSEG(6)=BUF
"RTN","RORHL08",207,0)
 ;
"RTN","RORHL08",208,0)
 ;--- PV1-19 - Visit Number (IEN in the PTF file #45) *KEY*
"RTN","RORHL08",209,0)
 S RORSEG(19)=RORIEN
"RTN","RORHL08",210,0)
 ;
"RTN","RORHL08",211,0)
 ;--- PV1-36 - Discharge Disposition
"RTN","RORHL08",212,0)
 S RORSEG(36)=$G(RORBUF(45,IENS,72,"I"))
"RTN","RORHL08",213,0)
 ;
"RTN","RORHL08",214,0)
 ;--- PV1-44 - Admit Date/Time *KEY*
"RTN","RORHL08",215,0)
 S TMP=$$FMTHL7^XLFDT($G(RORBUF(45,IENS,2,"I")))
"RTN","RORHL08",216,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,RORDFN,45,IENS,2)
"RTN","RORHL08",217,0)
 S RORSEG(44)=TMP
"RTN","RORHL08",218,0)
 ;
"RTN","RORHL08",219,0)
 ;--- PV1-45 - Discharge Date/Time
"RTN","RORHL08",220,0)
 S RORSEG(45)=$$FM2HL^RORHL7($G(RORBUF(45,IENS,70,"I")))
"RTN","RORHL08",221,0)
 ;
"RTN","RORHL08",222,0)
 ;--- Store the segment
"RTN","RORHL08",223,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL08",224,0)
 Q ERRCNT
"RTN","RORHL08",225,0)
 ;
"RTN","RORHL08",226,0)
 ;***** UPDATES TEMPORARY PTF INDEX
"RTN","RORHL08",227,0)
 ;
"RTN","RORHL08",228,0)
 ; STDT          Start date
"RTN","RORHL08",229,0)
 ; ENDT          End date
"RTN","RORHL08",230,0)
 ;
"RTN","RORHL08",231,0)
 ; This function updates the temporary PTF index with records
"RTN","RORHL08",232,0)
 ; closed in the provided time frame.
"RTN","RORHL08",233,0)
 ;
"RTN","RORHL08",234,0)
 ; Return Values:
"RTN","RORHL08",235,0)
 ;       <0  Error Code
"RTN","RORHL08",236,0)
 ;        0  Ok
"RTN","RORHL08",237,0)
 ;
"RTN","RORHL08",238,0)
UPDNDX(STDT,ENDT) ;
"RTN","RORHL08",239,0)
 N DATE,DXDTS,IDX,IEN,PATIEN,RC,RORMSG,TMP
"RTN","RORHL08",240,0)
 ;--- Get time frames that should be processed
"RTN","RORHL08",241,0)
 D MERGEDTF(.DXDTS,STDT,ENDT)  Q:$D(DXDTS)<10 0
"RTN","RORHL08",242,0)
 ;--- Update the index
"RTN","RORHL08",243,0)
 S IDX=0
"RTN","RORHL08",244,0)
 F  S IDX=$O(DXDTS(IDX))  Q:IDX'>0  D
"RTN","RORHL08",245,0)
 . S STDT=$P(DXDTS(IDX),U),ENDT=$P(DXDTS(IDX),U,2)
"RTN","RORHL08",246,0)
 . S DATE=$O(^DGP(45.84,"AC",STDT),-1)
"RTN","RORHL08",247,0)
 . F  S DATE=$O(^DGP(45.84,"AC",DATE))  Q:'DATE!(DATE'<ENDT)  D
"RTN","RORHL08",248,0)
 . . S IEN=0
"RTN","RORHL08",249,0)
 . . F  S IEN=$O(^DGP(45.84,"AC",DATE,IEN))  Q:IEN'>0  D
"RTN","RORHL08",250,0)
 . . . ;--- Patient IEN (entries of file #45.84 are DINUM'ed)
"RTN","RORHL08",251,0)
 . . . S PATIEN=$$GET1^DIQ(45,IEN,.01,"I",,"RORMSG")
"RTN","RORHL08",252,0)
 . . . I $G(DIERR)  D DBS^RORERR("RORMSG",-99,,,45,IEN)  Q
"RTN","RORHL08",253,0)
 . . . ;--- Create index entry
"RTN","RORHL08",254,0)
 . . . S:PATIEN>0 ^TMP("RORPTF",$J,"PDI",PATIEN,DATE,IEN)=""
"RTN","RORHL08",255,0)
 ;---
"RTN","RORHL08",256,0)
 Q 0
"RTN","RORHL09")
0^3^B43916632^B43916632
"RTN","RORHL09",1,0)
RORHL09 ;HOIFO/BH - HL7 OUTPATIENT DATA: PV1,OBR,OBX ; 3/13/06 9:24am
"RTN","RORHL09",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL09",3,0)
 ;
"RTN","RORHL09",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL09",5,0)
 ;
"RTN","RORHL09",6,0)
 ; #93       Get stop code from the file #44 (controlled)
"RTN","RORHL09",7,0)
 ; #1889     Use of the ENCEVENT^PXKENC API
"RTN","RORHL09",8,0)
 ; #1995     $$CODEC^ICPTCOD (supported)
"RTN","RORHL09",9,0)
 ; #2309     Read access to the 'AA' x-ref in VISIT file (#9000010)
"RTN","RORHL09",10,0)
 ; #3990     $$CODEC^ICDCODE (supported)
"RTN","RORHL09",11,0)
 ; #10060    Read access to the file #200 (supported)
"RTN","RORHL09",12,0)
 ; #2438     Access to the file #40.8 (field #1) (controlled)
"RTN","RORHL09",13,0)
 ;
"RTN","RORHL09",14,0)
 Q
"RTN","RORHL09",15,0)
 ;
"RTN","RORHL09",16,0)
 ;***** PROCESSES DIAGNOSIS CODES
"RTN","RORHL09",17,0)
DIAGS() ;
"RTN","RORHL09",18,0)
 N DIAG,IEN,K5,OID,REC,TMP
"RTN","RORHL09",19,0)
 S OID="OICD9"_RORCS_"Diagnosis"_RORCS_"VA080"
"RTN","RORHL09",20,0)
 S K5=""
"RTN","RORHL09",21,0)
 F  S K5=$O(^TMP("PXKENC",$J,RORIEN,"POV",K5))  Q:K5=""  D
"RTN","RORHL09",22,0)
 . S REC=^TMP("PXKENC",$J,RORIEN,"POV",K5,0)
"RTN","RORHL09",23,0)
 . S IEN=+$P(REC,U)  Q:IEN'>0
"RTN","RORHL09",24,0)
 . ;---
"RTN","RORHL09",25,0)
 . S DIAG=$$CODEC^ICDCODE(IEN)
"RTN","RORHL09",26,0)
 . D:DIAG'<0 SETOBX(OID,DIAG)
"RTN","RORHL09",27,0)
 Q 0
"RTN","RORHL09",28,0)
 ;
"RTN","RORHL09",29,0)
 ;***** OUTPATIENT DATA SEGMENT BUILDER
"RTN","RORHL09",30,0)
 ;
"RTN","RORHL09",31,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL09",32,0)
 ;
"RTN","RORHL09",33,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL09",34,0)
 ;               data extraction time frames are stored.
"RTN","RORHL09",35,0)
 ;
"RTN","RORHL09",36,0)
 ; RORTY         Set to either "PV1" or "OBR"
"RTN","RORHL09",37,0)
 ;
"RTN","RORHL09",38,0)
 ; The ^TMP("PXKENC",$J) and ^TMP("RORHL08",$J) global nodes are
"RTN","RORHL09",39,0)
 ; used by this function.
"RTN","RORHL09",40,0)
 ;
"RTN","RORHL09",41,0)
 ; Return Values:
"RTN","RORHL09",42,0)
 ;       <0  Error Code
"RTN","RORHL09",43,0)
 ;        0  Ok
"RTN","RORHL09",44,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL09",45,0)
 ;
"RTN","RORHL09",46,0)
EN1(RORDFN,DXDTS,RORTY) ;
"RTN","RORHL09",47,0)
 N ERRCNT,PIEN,PV1CNT,RC
"RTN","RORHL09",48,0)
 S (ERRCNT,RC)=0
"RTN","RORHL09",49,0)
 ;
"RTN","RORHL09",50,0)
 ;--- PV1 Segments
"RTN","RORHL09",51,0)
 I RORTY="PV1"  K ^TMP("PXKENC",$J),^TMP("RORHL09",$J)  D
"RTN","RORHL09",52,0)
 . N IDX,INVDT,ROREND
"RTN","RORHL09",53,0)
 . S (IDX,PV1CNT)=0
"RTN","RORHL09",54,0)
 . F  S IDX=$O(DXDTS(2,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL09",55,0)
 . . S INVDT=9999999-$$FMADD^XLFDT($P(DXDTS(2,IDX),U)\1,-1)
"RTN","RORHL09",56,0)
 . . S ROREND=9999999-$P(DXDTS(2,IDX),U,2)
"RTN","RORHL09",57,0)
 . . F  S INVDT=$O(^AUPNVSIT("AA",RORDFN,INVDT),-1)  Q:'INVDT!(INVDT'>ROREND)  D
"RTN","RORHL09",58,0)
 . . . S PIEN=""
"RTN","RORHL09",59,0)
 . . . F  S PIEN=$O(^AUPNVSIT("AA",RORDFN,INVDT,PIEN),-1)  Q:'PIEN  D
"RTN","RORHL09",60,0)
 . . . . S TMP=$$PV1(PIEN,RORDFN)
"RTN","RORHL09",61,0)
 . . . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL09",62,0)
 . . . . ;--- Reference for the corresponding OBR segment
"RTN","RORHL09",63,0)
 . . . . S:TMP'="S" PV1CNT=PV1CNT+1,^TMP("RORHL09",$J,PV1CNT)=PIEN
"RTN","RORHL09",64,0)
 ;
"RTN","RORHL09",65,0)
 ;--- OBR and OBX Segments
"RTN","RORHL09",66,0)
 I RORTY="OBR"  D  K ^TMP("PXKENC",$J),^TMP("RORHL09",$J)
"RTN","RORHL09",67,0)
 . S PV1CNT=0
"RTN","RORHL09",68,0)
 . F  S PV1CNT=$O(^TMP("RORHL09",$J,PV1CNT))  Q:PV1CNT'>0  D
"RTN","RORHL09",69,0)
 . . S PIEN=+$G(^TMP("RORHL09",$J,PV1CNT))  Q:PIEN'>0
"RTN","RORHL09",70,0)
 . . ;---
"RTN","RORHL09",71,0)
 . . S TMP=$$OBR(PIEN,RORDFN)
"RTN","RORHL09",72,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL09",73,0)
 . . ;---
"RTN","RORHL09",74,0)
 . . S TMP=$$OBX(PIEN,RORDFN)
"RTN","RORHL09",75,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL09",76,0)
 ;
"RTN","RORHL09",77,0)
 ;--- Check for errors
"RTN","RORHL09",78,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL09",79,0)
 ;
"RTN","RORHL09",80,0)
 ;***** OBR SEGMENT BUILDER (OUTPATIENT)
"RTN","RORHL09",81,0)
 ;
"RTN","RORHL09",82,0)
 ; RORIEN        IEN of file #9000010
"RTN","RORHL09",83,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL09",84,0)
 ;
"RTN","RORHL09",85,0)
 ; Return Values:
"RTN","RORHL09",86,0)
 ;       <0  Error Code
"RTN","RORHL09",87,0)
 ;        0  Ok
"RTN","RORHL09",88,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL09",89,0)
 ;
"RTN","RORHL09",90,0)
OBR(RORIEN,RORDFN) ;
"RTN","RORHL09",91,0)
 N CS,ERRCNT,RC,RORSEG,STN,TMP,VST0
"RTN","RORHL09",92,0)
 S (ERRCNT,RC)=0
"RTN","RORHL09",93,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL09",94,0)
 ;
"RTN","RORHL09",95,0)
 S VST0=$G(^TMP("PXKENC",$J,RORIEN,"VST",RORIEN,0))
"RTN","RORHL09",96,0)
 ;
"RTN","RORHL09",97,0)
 ;--- Initialize the segment
"RTN","RORHL09",98,0)
 S RORSEG(0)="OBR"
"RTN","RORHL09",99,0)
 ;
"RTN","RORHL09",100,0)
 ;--- OBR-3 - Order Number (IEN in the VISIT file #9000010) 
"RTN","RORHL09",101,0)
 S RORSEG(3)=RORIEN
"RTN","RORHL09",102,0)
 ;
"RTN","RORHL09",103,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL09",104,0)
 S RORSEG(4)="OP"_CS_"Outpatient"_CS_"C4"
"RTN","RORHL09",105,0)
 ;
"RTN","RORHL09",106,0)
 ;--- OBR-7 - Observation Date/Time (Visit Date/Time) *KEY*
"RTN","RORHL09",107,0)
 S TMP=$$FMTHL7^XLFDT($P(VST0,U))
"RTN","RORHL09",108,0)
 Q:TMP'>0 $$ERROR^RORERR(-100,,,,"No visit date","ENCEVENT^PXKENC")
"RTN","RORHL09",109,0)
 S RORSEG(7)=TMP
"RTN","RORHL09",110,0)
 ;
"RTN","RORHL09",111,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL09",112,0)
 S RORSEG(24)="PHY"
"RTN","RORHL09",113,0)
 ;
"RTN","RORHL09",114,0)
 ;--- OBR-44 - Division
"RTN","RORHL09",115,0)
 S RORSEG(44)=$$SITE^RORUTL03(CS)
"RTN","RORHL09",116,0)
 S TMP=+$P(VST0,U,6)  ; LOC. OF ENCOUNTER (.06)
"RTN","RORHL09",117,0)
 I TMP>0  D
"RTN","RORHL09",118,0)
 . S TMP=$$NS^XUAF4(TMP),STN=$P(TMP,U,2)
"RTN","RORHL09",119,0)
 . S:STN'="" RORSEG(44)=STN_CS_$P(TMP,U)_CS_"99VA4"
"RTN","RORHL09",120,0)
 ;
"RTN","RORHL09",121,0)
 ;--- Store the segment
"RTN","RORHL09",122,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL09",123,0)
 Q ERRCNT
"RTN","RORHL09",124,0)
 ;
"RTN","RORHL09",125,0)
 ;***** OBX SEGMENT BUILDER (OUTPATIENT)
"RTN","RORHL09",126,0)
 ;
"RTN","RORHL09",127,0)
 ; RORIEN        IEN of file #9000010
"RTN","RORHL09",128,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL09",129,0)
 ;
"RTN","RORHL09",130,0)
 ; Return Values:
"RTN","RORHL09",131,0)
 ;       <0  Error Code
"RTN","RORHL09",132,0)
 ;        0  Ok
"RTN","RORHL09",133,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL09",134,0)
 ;
"RTN","RORHL09",135,0)
OBX(RORIEN,RORDFN) ;
"RTN","RORHL09",136,0)
 N ERRCNT,RC,RORCS,RORLST,RORMSG,RORSEG,TMP
"RTN","RORHL09",137,0)
 S (ERRCNT,RC)=0
"RTN","RORHL09",138,0)
 D ECH^RORHL7(.RORCS)
"RTN","RORHL09",139,0)
 ;
"RTN","RORHL09",140,0)
 ;--- Procedures
"RTN","RORHL09",141,0)
 I $D(^TMP("PXKENC",$J,RORIEN,"CPT"))>1  D  Q:RC<0 RC
"RTN","RORHL09",142,0)
 . S RC=$$PROCS()  S:RC ERRCNT=ERRCNT+1
"RTN","RORHL09",143,0)
 ;--- Diagnosis codes
"RTN","RORHL09",144,0)
 I $D(^TMP("PXKENC",$J,RORIEN,"POV"))>1  D  Q:RC<0 RC
"RTN","RORHL09",145,0)
 . S RC=$$DIAGS()  S:RC ERRCNT=ERRCNT+1
"RTN","RORHL09",146,0)
 ;
"RTN","RORHL09",147,0)
 Q ERRCNT
"RTN","RORHL09",148,0)
 ; 
"RTN","RORHL09",149,0)
 ;***** PROCESSES PROCEDURES
"RTN","RORHL09",150,0)
PROCS() ;
"RTN","RORHL09",151,0)
 N CLASS,ERRCNT,IEN,K5,OID,PROC,PRV,REC,RORMSG,TMP
"RTN","RORHL09",152,0)
 S ERRCNT=0
"RTN","RORHL09",153,0)
 S OID="OCPT"_RORCS_"Procedures"_RORCS_"VA080"
"RTN","RORHL09",154,0)
 S K5=""
"RTN","RORHL09",155,0)
 F  S K5=$O(^TMP("PXKENC",$J,RORIEN,"CPT",K5))  Q:K5=""  D
"RTN","RORHL09",156,0)
 . S REC=$G(^TMP("PXKENC",$J,RORIEN,"CPT",K5,0))
"RTN","RORHL09",157,0)
 . S IEN=+$P(REC,U)  Q:IEN'>0
"RTN","RORHL09",158,0)
 . ;---
"RTN","RORHL09",159,0)
 . S PROC=$$CODEC^ICPTCOD(IEN)
"RTN","RORHL09",160,0)
 . Q:PROC<0
"RTN","RORHL09",161,0)
 . ;---
"RTN","RORHL09",162,0)
 . S PRV=+$P($G(^TMP("PXKENC",$J,RORIEN,"CPT",K5,12)),U,4)
"RTN","RORHL09",163,0)
 . Q:PRV'>0
"RTN","RORHL09",164,0)
 . ;---
"RTN","RORHL09",165,0)
 . S $P(PRV,RORCS,13)=$$GET1^DIQ(200,PRV_",",53.5,"E",,"RORMSG")
"RTN","RORHL09",166,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL09",167,0)
 . . D DBS^RORERR("RORMSG",-99,,RORDFN,200,+PRV_",")
"RTN","RORHL09",168,0)
 . ;---
"RTN","RORHL09",169,0)
 . D SETOBX(OID,PROC,PRV)
"RTN","RORHL09",170,0)
 Q ERRCNT
"RTN","RORHL09",171,0)
 ;
"RTN","RORHL09",172,0)
 ;***** PV1 SEGMENT BUILDER (OUTPATIENT)
"RTN","RORHL09",173,0)
 ;
"RTN","RORHL09",174,0)
 ; RORIEN        IEN in the file #9000010
"RTN","RORHL09",175,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL09",176,0)
 ;
"RTN","RORHL09",177,0)
 ; Return Values:
"RTN","RORHL09",178,0)
 ;       <0  Error Code
"RTN","RORHL09",179,0)
 ;        0  Ok
"RTN","RORHL09",180,0)
 ;      "S"  No visit data
"RTN","RORHL09",181,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL09",182,0)
 ;
"RTN","RORHL09",183,0)
PV1(RORIEN,RORDFN) ;
"RTN","RORHL09",184,0)
 N BUF,CLASS,CS,ERRCNT,IENS,KK4,RC,REC,REP,RORCLIN,RORMSG,PRV,TMP,TMP1,VST0
"RTN","RORHL09",185,0)
 S (ERRCNT,RC)=0
"RTN","RORHL09",186,0)
 D ECH^RORHL7(.CS,,.REP)
"RTN","RORHL09",187,0)
 ;
"RTN","RORHL09",188,0)
 ;--- Get Visit Data
"RTN","RORHL09",189,0)
 D ENCEVENT^PXKENC(RORIEN,1)
"RTN","RORHL09",190,0)
 Q:$D(^TMP("PXKENC",$J,RORIEN))<10 "S"
"RTN","RORHL09",191,0)
 S VST0=$G(^TMP("PXKENC",$J,RORIEN,"VST",RORIEN,0))
"RTN","RORHL09",192,0)
 ;
"RTN","RORHL09",193,0)
 ;--- Do not send visits with the following service categories: Daily
"RTN","RORHL09",194,0)
 ;--- Hospitalization (D), Ancillary (X), Chart (C), Not Found (N),
"RTN","RORHL09",195,0)
 ;                    (E), Event Historical, Hospitalization (H).
"RTN","RORHL09",196,0)
 Q:"HEDXNC"[$P(VST0,U,7) "S"
"RTN","RORHL09",197,0)
 ;
"RTN","RORHL09",198,0)
 ;--- Initialize the segment
"RTN","RORHL09",199,0)
 S RORSEG(0)="PV1"
"RTN","RORHL09",200,0)
 ;
"RTN","RORHL09",201,0)
 ;--- PV1-2 - Patient Class
"RTN","RORHL09",202,0)
 S RORSEG(2)="O"  ; O - Outpatient
"RTN","RORHL09",203,0)
 ;
"RTN","RORHL09",204,0)
 ;--- PV1-3 - Assigned Patient Location (Station Number and Stop Code)
"RTN","RORHL09",205,0)
 S RORCLIN=+$P(VST0,U,22),BUF=""
"RTN","RORHL09",206,0)
 I RORCLIN>0  D
"RTN","RORHL09",207,0)
 . S IENS=RORCLIN_","
"RTN","RORHL09",208,0)
 . S TMP=$$GET1^DIQ(44,IENS,3.5,"I")  Q:TMP'>0
"RTN","RORHL09",209,0)
 . S BUF=$$GET1^DIQ(40.8,TMP,1)       Q:BUF=""  ; Station Number
"RTN","RORHL09",210,0)
 . S TMP=$$STOPCODE^RORUTL18(+RORCLIN)
"RTN","RORHL09",211,0)
 . S $P(BUF,CS,6)=$S(TMP>0:TMP,1:"")            ; Stop Code
"RTN","RORHL09",212,0)
 Q:$P(BUF,CS,6)="" "S"  ; Stop Code is required
"RTN","RORHL09",213,0)
 S RORSEG(3)=BUF
"RTN","RORHL09",214,0)
 ;
"RTN","RORHL09",215,0)
 ; PV1-4  - Admission Type
"RTN","RORHL09",216,0)
 S TMP=$P($G(^TMP("PXKENC",$J,RORIEN,"VST",RORIEN,150)),U,3)
"RTN","RORHL09",217,0)
 S RORSEG(4)=TMP
"RTN","RORHL09",218,0)
 ;
"RTN","RORHL09",219,0)
 ;--- PV1-7 - Attending Physician (User IEN and Provider Class Name)
"RTN","RORHL09",220,0)
 S (KK4,BUF)=""
"RTN","RORHL09",221,0)
 F  S KK4=$O(^TMP("PXKENC",$J,RORIEN,"PRV",KK4))  Q:KK4=""  D
"RTN","RORHL09",222,0)
 . S REC=$G(^TMP("PXKENC",$J,RORIEN,"PRV",KK4,0))
"RTN","RORHL09",223,0)
 . S PRV=+$P(REC,U)  Q:(PRV'>0)!($P(REC,U,4)'="P")
"RTN","RORHL09",224,0)
 . S $P(PRV,CS,13)=$$GET1^DIQ(200,PRV_",",53.5,"E",,"RORMSG")
"RTN","RORHL09",225,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL09",226,0)
 . . D DBS^RORERR("RORMSG",-99,,RORDFN,200,PRV_",")
"RTN","RORHL09",227,0)
 . S BUF=BUF_REP_PRV
"RTN","RORHL09",228,0)
 S RORSEG(7)=$P(BUF,REP,2,999)
"RTN","RORHL09",229,0)
 ;
"RTN","RORHL09",230,0)
 ;--- PV1-19 - Visit Number (IEN in the VISIT file #9000010) *KEY*
"RTN","RORHL09",231,0)
 S RORSEG(19)=RORIEN
"RTN","RORHL09",232,0)
 ;
"RTN","RORHL09",233,0)
 ;--- PV1-44 - Admit Date/Time (Visit Date/Time) *KEY*
"RTN","RORHL09",234,0)
 S TMP=$$FMTHL7^XLFDT($P(VST0,U))
"RTN","RORHL09",235,0)
 I TMP'>0  D  Q RC
"RTN","RORHL09",236,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No admission date","ENCEVENT^PXKENC")
"RTN","RORHL09",237,0)
 S RORSEG(44)=TMP
"RTN","RORHL09",238,0)
 ;
"RTN","RORHL09",239,0)
 ;--- PV1-51 - Visit Indicator (Deleted Visit Indicator)
"RTN","RORHL09",240,0)
 S TMP=$P(VST0,U,11)
"RTN","RORHL09",241,0)
 S RORSEG(51)=$S(TMP'="":TMP,1:0)
"RTN","RORHL09",242,0)
 ;
"RTN","RORHL09",243,0)
 ;--- Store the segment
"RTN","RORHL09",244,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL09",245,0)
 Q ERRCNT
"RTN","RORHL09",246,0)
 ;
"RTN","RORHL09",247,0)
 ;***** LOW-LEVEL SEGMENT BUILDER
"RTN","RORHL09",248,0)
 ;
"RTN","RORHL09",249,0)
 ; OBX3          Observation Identifier
"RTN","RORHL09",250,0)
 ;
"RTN","RORHL09",251,0)
 ; OBX5          Observation Value
"RTN","RORHL09",252,0)
 ;
"RTN","RORHL09",253,0)
 ; [OBX16]       Procedure Provider and Provider Class Name
"RTN","RORHL09",254,0)
 ;
"RTN","RORHL09",255,0)
SETOBX(OBX3,OBX5,OBX16) ;
"RTN","RORHL09",256,0)
 N RORSEG
"RTN","RORHL09",257,0)
 S RORSEG(0)="OBX"
"RTN","RORHL09",258,0)
 ;--- OBX-2 Value Type
"RTN","RORHL09",259,0)
 S RORSEG(2)="FT"
"RTN","RORHL09",260,0)
 ;--- OBX-3 Observation Identifier
"RTN","RORHL09",261,0)
 S RORSEG(3)=OBX3
"RTN","RORHL09",262,0)
 ;--- OBX-5 Observation Value
"RTN","RORHL09",263,0)
 S RORSEG(5)=OBX5
"RTN","RORHL09",264,0)
 ;--- OBX-11 Observation Result Status
"RTN","RORHL09",265,0)
 S RORSEG(11)="F"
"RTN","RORHL09",266,0)
 ;--- OBX-16 Responsible Observer (Procedure Provider)
"RTN","RORHL09",267,0)
 S:$G(OBX16)'="" RORSEG(16)=OBX16
"RTN","RORHL09",268,0)
 ;--- Store the segment
"RTN","RORHL09",269,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL09",270,0)
 Q
"RTN","RORHL10")
0^10^B39368946^B39625132
"RTN","RORHL10",1,0)
RORHL10 ;HOIFO/BH - HL7 SURGICAL PATHOLOGY DATA: OBR,OBX ; 3/13/06 9:24am
"RTN","RORHL10",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL10",3,0)
 ;
"RTN","RORHL10",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL10",5,0)
 ;
"RTN","RORHL10",6,0)
 ; #525          Read access to the multiple #63.08 (controlled)
"RTN","RORHL10",7,0)
 ; #4343         $$SPATH^LA7UTL03 (controlled)
"RTN","RORHL10",8,0)
 ;
"RTN","RORHL10",9,0)
 Q
"RTN","RORHL10",10,0)
 ;
"RTN","RORHL10",11,0)
 ;***** SEARCHES FOR SURGICAL PATHOLOGY DATA
"RTN","RORHL10",12,0)
 ;
"RTN","RORHL10",13,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL10",14,0)
 ;
"RTN","RORHL10",15,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL10",16,0)
 ;               data extraction time frames are stored.
"RTN","RORHL10",17,0)
 ;
"RTN","RORHL10",18,0)
 ; [CDSMODE]     Search the data by:
"RTN","RORHL10",19,0)
 ;                 0  completion/result date (default)
"RTN","RORHL10",20,0)
 ;                 1  specimen collection date
"RTN","RORHL10",21,0)
 ;
"RTN","RORHL10",22,0)
 ; Return Values:
"RTN","RORHL10",23,0)
 ;       <0  Error code
"RTN","RORHL10",24,0)
 ;        0  Ok
"RTN","RORHL10",25,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL10",26,0)
 ;
"RTN","RORHL10",27,0)
EN1(RORDFN,DXDTS,CDSMODE) ;
"RTN","RORHL10",28,0)
 N ERRCNT,IDX,LRDFN,RC,RORENDT,RORSTDT
"RTN","RORHL10",29,0)
 S (ERRCNT,RC)=0
"RTN","RORHL10",30,0)
 ;
"RTN","RORHL10",31,0)
 S LRDFN=+$$LABREF^RORUTL18(RORDFN)  Q:LRDFN'>0 0
"RTN","RORHL10",32,0)
 ;
"RTN","RORHL10",33,0)
 S IDX=0
"RTN","RORHL10",34,0)
 F  S IDX=$O(DXDTS(9,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL10",35,0)
 . S RORSTDT=$P(DXDTS(9,IDX),U),RORENDT=$P(DXDTS(9,IDX),U,2)
"RTN","RORHL10",36,0)
 . ;---
"RTN","RORHL10",37,0)
 . S RC=$S($G(CDSMODE):$$CD(),1:$$RAD())
"RTN","RORHL10",38,0)
 . S:RC>0 ERRCNT=ERRCNT+RC
"RTN","RORHL10",39,0)
 ;
"RTN","RORHL10",40,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL10",41,0)
 ;
"RTN","RORHL10",42,0)
 ;***** SEARCHES BY SPECIMEN COLLECTION DATE
"RTN","RORHL10",43,0)
CD() ;
"RTN","RORHL10",44,0)
 N ENDT,ERRCNT,IDT,STDT
"RTN","RORHL10",45,0)
 S ERRCNT=0
"RTN","RORHL10",46,0)
 S STDT=9999999-RORSTDT
"RTN","RORHL10",47,0)
 S ENDT=9999999-RORENDT
"RTN","RORHL10",48,0)
 ;---
"RTN","RORHL10",49,0)
 S IDT=$O(^LR(LRDFN,"SP",STDT))
"RTN","RORHL10",50,0)
 F  S IDT=$O(^LR(LRDFN,"SP",IDT),-1)  Q:'IDT!(IDT'>ENDT)  D
"RTN","RORHL10",51,0)
 . S:$$OBROBX(IDT,LRDFN) ERRCNT=ERRCNT+1
"RTN","RORHL10",52,0)
 Q ERRCNT
"RTN","RORHL10",53,0)
 ;
"RTN","RORHL10",54,0)
 ;***** SEARCHES BY COMPLETION (RESULT) DATE
"RTN","RORHL10",55,0)
RAD() ;
"RTN","RORHL10",56,0)
 N ERRCNT,IDT,RCDT
"RTN","RORHL10",57,0)
 S ERRCNT=0
"RTN","RORHL10",58,0)
 ;---
"RTN","RORHL10",59,0)
 S IDT=0
"RTN","RORHL10",60,0)
 F  S IDT=$O(^LR(LRDFN,"SP",IDT))  Q:IDT'>0  D
"RTN","RORHL10",61,0)
 . S RCDT=$P($G(^LR(LRDFN,"SP",IDT,0)),U,3)
"RTN","RORHL10",62,0)
 . I RCDT'<RORSTDT,RCDT<RORENDT  S:$$OBROBX(IDT,LRDFN) ERRCNT=ERRCNT+1
"RTN","RORHL10",63,0)
 Q ERRCNT
"RTN","RORHL10",64,0)
 ; 
"RTN","RORHL10",65,0)
 ;***** CREATES OBR AND OBX SEGMENTS
"RTN","RORHL10",66,0)
OBROBX(RORIDT,LRDFN) ;
"RTN","RORHL10",67,0)
 N ERRCNT,RC
"RTN","RORHL10",68,0)
 S ERRCNT=0
"RTN","RORHL10",69,0)
 ;---
"RTN","RORHL10",70,0)
 S RC=$$OBR(RORIDT_","_LRDFN_",")
"RTN","RORHL10",71,0)
 I RC  S ERRCNT=ERRCNT+1  Q:RC<0 RC
"RTN","RORHL10",72,0)
 ;---
"RTN","RORHL10",73,0)
 S RC=$$OBX(LRDFN,RORIDT)
"RTN","RORHL10",74,0)
 I RC  S ERRCNT=ERRCNT+1  Q:RC<0 RC
"RTN","RORHL10",75,0)
 ;---
"RTN","RORHL10",76,0)
 Q ERRCNT
"RTN","RORHL10",77,0)
 ;
"RTN","RORHL10",78,0)
 ;***** OBR SEGMENT BUILDER
"RTN","RORHL10",79,0)
 ;
"RTN","RORHL10",80,0)
 ; RORIENS       IENS of SP Entry
"RTN","RORHL10",81,0)
 ;
"RTN","RORHL10",82,0)
 ; Return Values:
"RTN","RORHL10",83,0)
 ;       <0  Error code
"RTN","RORHL10",84,0)
 ;        0  Ok
"RTN","RORHL10",85,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL10",86,0)
 ;
"RTN","RORHL10",87,0)
OBR(RORIENS) ;
"RTN","RORHL10",88,0)
 N CS,ERRCNT,FLDS,IEN,RC,RORMSG,ROROUT,RORSEG,TMP
"RTN","RORHL10",89,0)
 S (ERRCNT,RC)=0
"RTN","RORHL10",90,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL10",91,0)
 ;--- Check the parameters
"RTN","RORHL10",92,0)
 S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL10",93,0)
 ;
"RTN","RORHL10",94,0)
 ;--- Load the data (with a temporary fix for invalid
"RTN","RORHL10",95,0)
 ;--- output transform of the .01 field - ROR*1*8)
"RTN","RORHL10",96,0)
 D GETS^DIQ(63.08,RORIENS,".01","I","ROROUT","RORMSG")
"RTN","RORHL10",97,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL10",98,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL10",99,0)
 D GETS^DIQ(63.08,RORIENS,".03;.06;.07;.08","IE","ROROUT","RORMSG")
"RTN","RORHL10",100,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL10",101,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL10",102,0)
 ;
"RTN","RORHL10",103,0)
 ;--- Initialize the segment
"RTN","RORHL10",104,0)
 S RORSEG(0)="OBR"
"RTN","RORHL10",105,0)
 ;
"RTN","RORHL10",106,0)
 ;--- OBR-3 - Surgical Pathology Acc #
"RTN","RORHL10",107,0)
 I $G(ROROUT(63.08,RORIENS,.06,"E"))=""  D  Q RC
"RTN","RORHL10",108,0)
 . S RC=$$ERROR^RORERR(-95,,,,63.08,RORIENS,.06)
"RTN","RORHL10",109,0)
 S RORSEG(3)=ROROUT(63.08,RORIENS,.06,"E")
"RTN","RORHL10",110,0)
 ;
"RTN","RORHL10",111,0)
 ;--- OBR-4 - SP CPT Code
"RTN","RORHL10",112,0)
 S RORSEG(4)="88300"_CS_"LEVEL I - SURGICAL PAT"_CS_"C4"
"RTN","RORHL10",113,0)
 ;
"RTN","RORHL10",114,0)
 ;--- OBR-7 - Date/Time Specimen Taken
"RTN","RORHL10",115,0)
 S TMP=$$FMTHL7^XLFDT($G(ROROUT(63.08,RORIENS,.01,"I")))
"RTN","RORHL10",116,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,,63.08,RORIENS,.01)
"RTN","RORHL10",117,0)
 S RORSEG(7)=TMP
"RTN","RORHL10",118,0)
 ;
"RTN","RORHL10",119,0)
 ;--- OBR-8 - Date Report Completed
"RTN","RORHL10",120,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.03,"I"))
"RTN","RORHL10",121,0)
 S RORSEG(8)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL10",122,0)
 ;
"RTN","RORHL10",123,0)
 ;--- OBR-16 - Surgeon/Physican
"RTN","RORHL10",124,0)
 S RORSEG(16)=$G(ROROUT(63.08,RORIENS,.07,"I"))
"RTN","RORHL10",125,0)
 ;
"RTN","RORHL10",126,0)
 ;--- OBR-24 - Service Section ID
"RTN","RORHL10",127,0)
 S RORSEG(24)="SP"
"RTN","RORHL10",128,0)
 ;
"RTN","RORHL10",129,0)
 ; OBR-44 - Divsion
"RTN","RORHL10",130,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.08,"I"))
"RTN","RORHL10",131,0)
 S IEN=$S(TMP'="":+$O(^SC("B",TMP,0)),1:0)
"RTN","RORHL10",132,0)
 S RORSEG(44)=$$DIV44^RORHLUT1(IEN,CS)
"RTN","RORHL10",133,0)
 ;
"RTN","RORHL10",134,0)
 ;--- Store the segment
"RTN","RORHL10",135,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL10",136,0)
 Q ERRCNT
"RTN","RORHL10",137,0)
 ;
"RTN","RORHL10",138,0)
 ;***** OBX SEGMENT BUILDER
"RTN","RORHL10",139,0)
 ;
"RTN","RORHL10",140,0)
 ; LRDFN         Patient Lab DFN
"RTN","RORHL10",141,0)
 ; RORIENS       IENS of SP Entry
"RTN","RORHL10",142,0)
 ;
"RTN","RORHL10",143,0)
 ; Return Values:
"RTN","RORHL10",144,0)
 ;       <0  Error code
"RTN","RORHL10",145,0)
 ;        0  Ok
"RTN","RORHL10",146,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL10",147,0)
 ;
"RTN","RORHL10",148,0)
OBX(LRDFN,RORIENS) ;
"RTN","RORHL10",149,0)
 N CS,ERRCNT,RC,RORMSG,ROROUT,RORSEG,RORTMP,RPS,TMP
"RTN","RORHL10",150,0)
 S (ERRCNT,RC)=0
"RTN","RORHL10",151,0)
 D ECH^RORHL7(.CS,,.RPS)
"RTN","RORHL10",152,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL10",153,0)
 ;---
"RTN","RORHL10",154,0)
 I $$SPATH^LA7UTL03(LRDFN,RORIENS,RORTMP,"RORMSG")  D
"RTN","RORHL10",155,0)
 . D SPECIMEN
"RTN","RORHL10",156,0)
 . D SETOBXWP($$SEGID("BCH","Brief clinical History",CS),"CHIS")
"RTN","RORHL10",157,0)
 . D SETOBXWP($$SEGID("PDIAG","Preoperative Diagnosis",CS),"PREDX")
"RTN","RORHL10",158,0)
 . D SETOBXWP($$SEGID("OF","Operative Findings",CS),"OPERDX")
"RTN","RORHL10",159,0)
 . S TMP=$$SEGID("POPDIAG","Postoperative Diagnosis",CS)
"RTN","RORHL10",160,0)
 . D SETOBXWP(TMP,"POSTDX")
"RTN","RORHL10",161,0)
 . D SETOBXWP($$SEGID("GDESC","Gross Decription",CS),"GROSSD")
"RTN","RORHL10",162,0)
 . D SETOBXWP($$SEGID("MDESC","Microscopic Description",CS),"MICROD")
"RTN","RORHL10",163,0)
 . S TMP=$$SEGID("SPDIAG","Surgical Pathology Diagnosis",CS)
"RTN","RORHL10",164,0)
 . D SETOBXWP(TMP,"SURGP")
"RTN","RORHL10",165,0)
 . D ICD(RPS)
"RTN","RORHL10",166,0)
 E  D:$D(RORMSG)>1
"RTN","RORHL10",167,0)
 . N I,INFO  S TMP=""
"RTN","RORHL10",168,0)
 . F I=1:1  S TMP=$O(RORMSG(TMP))  Q:TMP=""  S INFO(I)=RORMSG(TMP)
"RTN","RORHL10",169,0)
 . S RC=$$ERROR^RORERR(-56,,.INFO,,0,"$$SPATH^LA7UTL03")
"RTN","RORHL10",170,0)
 ;---
"RTN","RORHL10",171,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL10",172,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL10",173,0)
 ;
"RTN","RORHL10",174,0)
 ;***** MAKES SPECIMEN OBX
"RTN","RORHL10",175,0)
SPECIMEN ;
"RTN","RORHL10",176,0)
 N INDEX,RORSPEC,SPECID
"RTN","RORHL10",177,0)
 S INDEX="",SPECID=$$SEGID("SPEC","Specimen",CS)
"RTN","RORHL10",178,0)
 F  S INDEX=$O(@RORTMP@("SPEC",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",179,0)
 . S RORSPEC=$G(@RORTMP@("SPEC",INDEX))
"RTN","RORHL10",180,0)
 . D:RORSPEC'="" SETOBX(SPECID,RORSPEC)
"RTN","RORHL10",181,0)
 Q
"RTN","RORHL10",182,0)
 ;
"RTN","RORHL10",183,0)
 ;***** ICD-9
"RTN","RORHL10",184,0)
ICD(RPS) ;
"RTN","RORHL10",185,0)
 N CNT,ICDLST,INDEX,RORICD,TMP
"RTN","RORHL10",186,0)
 S ICDID=$$SEGID("ICD9","ICD9",CS)
"RTN","RORHL10",187,0)
 S (INDEX,RORICD)="",CNT=0
"RTN","RORHL10",188,0)
 F  S INDEX=$O(@RORTMP@("ICD9",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",189,0)
 . S TMP=$G(@RORTMP@("ICD9",INDEX))
"RTN","RORHL10",190,0)
 . S:TMP'="" CNT=CNT+1,$P(RORICD,RPS,CNT)=TMP
"RTN","RORHL10",191,0)
 D:RORICD'="" SETOBX(ICDID,RORICD)
"RTN","RORHL10",192,0)
 Q
"RTN","RORHL10",193,0)
 ;
"RTN","RORHL10",194,0)
 ;***** CONSTRUCTS SEGMENT IDENTIFIER
"RTN","RORHL10",195,0)
SEGID(CODE,NAME,CS) ;
"RTN","RORHL10",196,0)
 Q CODE_CS_NAME_CS_"VA080"
"RTN","RORHL10",197,0)
 ;
"RTN","RORHL10",198,0)
 ;***** CREATE AND STORE THE OBX SEGMENTS
"RTN","RORHL10",199,0)
SETOBX(OBX3,OBX5) ;
"RTN","RORHL10",200,0)
 N RORSEG
"RTN","RORHL10",201,0)
 ;--- Initialize the segment
"RTN","RORHL10",202,0)
 S RORSEG(0)="OBX"
"RTN","RORHL10",203,0)
 ;--- OBX-2 - Value Type
"RTN","RORHL10",204,0)
 S RORSEG(2)="FT"
"RTN","RORHL10",205,0)
 ;--- OBX-3 - Observation Identifier
"RTN","RORHL10",206,0)
 S RORSEG(3)=OBX3
"RTN","RORHL10",207,0)
 ;--- OBX-5 - Observation Value
"RTN","RORHL10",208,0)
 S RORSEG(5)=$$ESCAPE^RORHL7(OBX5)
"RTN","RORHL10",209,0)
 ;--- OBX-11 - Observation Result Status
"RTN","RORHL10",210,0)
 S RORSEG(11)="F"
"RTN","RORHL10",211,0)
 ;--- Store the segment
"RTN","RORHL10",212,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL10",213,0)
 Q
"RTN","RORHL10",214,0)
 ;
"RTN","RORHL10",215,0)
SETOBXWP(OBX3,SUBS) ;
"RTN","RORHL10",216,0)
 N BR,CNT,I,I1,RORSEG,TMP
"RTN","RORHL10",217,0)
 S BR=$E(HLECH,3)_".br"_$E(HLECH,3)
"RTN","RORHL10",218,0)
 Q:$D(@RORTMP@(SUBS))<10
"RTN","RORHL10",219,0)
 ;--- Initialize the segment
"RTN","RORHL10",220,0)
 S RORSEG(0)="OBX"
"RTN","RORHL10",221,0)
 ;--- OBX-2 - Value Type
"RTN","RORHL10",222,0)
 S RORSEG(2)="FT"
"RTN","RORHL10",223,0)
 ;--- OBX-3 - Observation Identifier
"RTN","RORHL10",224,0)
 S RORSEG(3)=OBX3
"RTN","RORHL10",225,0)
 ;--- OBX-5 - Observation Value
"RTN","RORHL10",226,0)
 S I=$O(@RORTMP@(SUBS,"")),CNT=0
"RTN","RORHL10",227,0)
 F  Q:I=""  S I1=$O(@RORTMP@(SUBS,I))  D  S I=I1
"RTN","RORHL10",228,0)
 . S TMP=$$ESCAPE^RORHL7(@RORTMP@(SUBS,I))
"RTN","RORHL10",229,0)
 . S CNT=CNT+1,RORSEG(5,CNT)=$S(I1'="":TMP_BR,1:TMP)
"RTN","RORHL10",230,0)
 ;--- OBX-11 - Observation Result Status
"RTN","RORHL10",231,0)
 S RORSEG(11)="F"
"RTN","RORHL10",232,0)
 ;--- Store the segment
"RTN","RORHL10",233,0)
 D:$D(RORSEG(5)) ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL10",234,0)
 Q
"RTN","RORHL11")
0^11^B29297297^B29514988
"RTN","RORHL11",1,0)
RORHL11 ;HOIFO/BH,SG - HL7 CYTOPATHOLOGY DATA: OBR,OBX ; 3/13/06 9:24am
"RTN","RORHL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL11",3,0)
 ;
"RTN","RORHL11",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL11",5,0)
 ;
"RTN","RORHL11",6,0)
 ; #4344         $$CYPATH^LA7UTL02 (controlled)
"RTN","RORHL11",7,0)
 ;
"RTN","RORHL11",8,0)
 Q
"RTN","RORHL11",9,0)
 ;
"RTN","RORHL11",10,0)
 ;***** SEARCHES BY SPECIMEN COLLECTION DATE
"RTN","RORHL11",11,0)
CD() ;
"RTN","RORHL11",12,0)
 N ENDT,ERRCNT,IDT,STDT
"RTN","RORHL11",13,0)
 S ERRCNT=0
"RTN","RORHL11",14,0)
 S STDT=9999999-RORSTDT
"RTN","RORHL11",15,0)
 S ENDT=9999999-RORENDT
"RTN","RORHL11",16,0)
 S IDT=$O(^LR(LRDFN,"CY",STDT))
"RTN","RORHL11",17,0)
 F  S IDT=$O(^LR(LRDFN,"CY",IDT),-1)  Q:'IDT!(IDT'>ENDT)  D
"RTN","RORHL11",18,0)
 . S:$$OBROBX(IDT) ERRCNT=ERRCNT+1
"RTN","RORHL11",19,0)
 Q ERRCNT
"RTN","RORHL11",20,0)
 ;
"RTN","RORHL11",21,0)
 ;***** SEARCHES FOR CYTOPATHOLOGY DATA
"RTN","RORHL11",22,0)
 ;
"RTN","RORHL11",23,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL11",24,0)
 ;
"RTN","RORHL11",25,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL11",26,0)
 ;               data extraction time frames are stored.
"RTN","RORHL11",27,0)
 ;
"RTN","RORHL11",28,0)
 ; [CDSMODE]     Search the data by:
"RTN","RORHL11",29,0)
 ;                 0  completion/result date (default)
"RTN","RORHL11",30,0)
 ;                 1  specimen collection date
"RTN","RORHL11",31,0)
 ;
"RTN","RORHL11",32,0)
 ; Return Values:
"RTN","RORHL11",33,0)
 ;       <0  Error code
"RTN","RORHL11",34,0)
 ;        0  Ok
"RTN","RORHL11",35,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL11",36,0)
 ;
"RTN","RORHL11",37,0)
EN1(RORDFN,DXDTS,CDSMODE,RORPTR,RORFILE,HLFS,HLECH) ;
"RTN","RORHL11",38,0)
 N ERRCNT,IDX,LRDFN,RC,RORENDT,RORIEN,RORSTDT
"RTN","RORHL11",39,0)
 S (ERRCNT,RC)=0
"RTN","RORHL11",40,0)
 ;
"RTN","RORHL11",41,0)
 S LRDFN=+$$LABREF^RORUTL18(RORDFN)  Q:LRDFN'>0 0
"RTN","RORHL11",42,0)
 ;
"RTN","RORHL11",43,0)
 S IDX=0
"RTN","RORHL11",44,0)
 F  S IDX=$O(DXDTS(10,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL11",45,0)
 . S RORSTDT=$P(DXDTS(10,IDX),U),RORENDT=$P(DXDTS(10,IDX),U,2)
"RTN","RORHL11",46,0)
 . ;---
"RTN","RORHL11",47,0)
 . S RC=$S($G(CDSMODE):$$CD(),1:$$RAD())
"RTN","RORHL11",48,0)
 . S:RC>0 ERRCNT=ERRCNT+RC
"RTN","RORHL11",49,0)
 ;
"RTN","RORHL11",50,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL11",51,0)
 ;
"RTN","RORHL11",52,0)
 ;*****
"RTN","RORHL11",53,0)
ICD(RPS) ;
"RTN","RORHL11",54,0)
 Q:$D(@RORTMP@("ICD9"))<10
"RTN","RORHL11",55,0)
 N CNT,ICDLST,INDEX,RORICD,TMP
"RTN","RORHL11",56,0)
 S ICDID=$$SEGID("ICD9","ICD9",CS)
"RTN","RORHL11",57,0)
 S (INDEX,RORICD)="",CNT=0
"RTN","RORHL11",58,0)
 F  S INDEX=$O(@RORTMP@("ICD9",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",59,0)
 . S TMP=$G(@RORTMP@("ICD9",INDEX))
"RTN","RORHL11",60,0)
 . S:TMP'="" CNT=CNT+1,$P(RORICD,RPS,CNT)=TMP
"RTN","RORHL11",61,0)
 D:RORICD'="" SETOBX(ICDID,RORICD)
"RTN","RORHL11",62,0)
 Q
"RTN","RORHL11",63,0)
 ;
"RTN","RORHL11",64,0)
 ;***** CREATES OBR AND OBX SEGMENTS
"RTN","RORHL11",65,0)
OBROBX(RORIDT) ;
"RTN","RORHL11",66,0)
 N ERRCNT,RC,RORMSG,RORTMP,TMP
"RTN","RORHL11",67,0)
 S (ERRCNT,RC)=0
"RTN","RORHL11",68,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL11",69,0)
 ;---
"RTN","RORHL11",70,0)
 I $$CYPATH^LA7UTL02(LRDFN,RORIDT,RORTMP,"RORMSG")  D
"RTN","RORHL11",71,0)
 . S RC=$$OBR(RORTMP,RORIDT)
"RTN","RORHL11",72,0)
 . I RC  S ERRCNT=ERRCNT+1  Q:RC<0
"RTN","RORHL11",73,0)
 . ;---
"RTN","RORHL11",74,0)
 . S RC=$$OBX(RORTMP)
"RTN","RORHL11",75,0)
 . I RC  S ERRCNT=ERRCNT+1  Q:RC<0
"RTN","RORHL11",76,0)
 E  D:$D(RORMSG)>1
"RTN","RORHL11",77,0)
 . N I,INFO  S TMP=""
"RTN","RORHL11",78,0)
 . F I=1:1  S TMP=$O(RORMSG(TMP))  Q:TMP=""  S INFO(I)=RORMSG(TMP)
"RTN","RORHL11",79,0)
 . S RC=$$ERROR^RORERR(-56,,.INFO,,0,"$$CYPATH^LA7UTL02")
"RTN","RORHL11",80,0)
 ;---
"RTN","RORHL11",81,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL11",82,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL11",83,0)
 ;
"RTN","RORHL11",84,0)
 ;***** CYTOPATHOLOGY OBR SEGMENT BUILDER
"RTN","RORHL11",85,0)
 ;
"RTN","RORHL11",86,0)
 ; RORTMP        Closed root of the array holding lab data
"RTN","RORHL11",87,0)
 ; RORIEN        IEN of Cyto Visit
"RTN","RORHL11",88,0)
 ;
"RTN","RORHL11",89,0)
 ; Return Values:
"RTN","RORHL11",90,0)
 ;       <0  Error code
"RTN","RORHL11",91,0)
 ;        0  Ok
"RTN","RORHL11",92,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL11",93,0)
 ;
"RTN","RORHL11",94,0)
OBR(RORTMP,RORIEN) ;
"RTN","RORHL11",95,0)
 N CS,CPA,ERRCNT,RC,RORSEG,TMP
"RTN","RORHL11",96,0)
 S (ERRCNT,RC)=0
"RTN","RORHL11",97,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL11",98,0)
 ;
"RTN","RORHL11",99,0)
 ;--- Initialize the segment
"RTN","RORHL11",100,0)
 S RORSEG(0)="OBR"
"RTN","RORHL11",101,0)
 ;
"RTN","RORHL11",102,0)
 ;--- OBR-3 - Cyto Path Acc #
"RTN","RORHL11",103,0)
 S CPA=$P($G(@RORTMP@("DEMO",RORIEN)),U,2)  Q:CPA="" 0
"RTN","RORHL11",104,0)
 S RORSEG(3)=CPA
"RTN","RORHL11",105,0)
 ;
"RTN","RORHL11",106,0)
 ;--- OBR-4
"RTN","RORHL11",107,0)
 S RORSEG(4)="88108"_CS_"CYTOPATHOLOGY, CONCENT"_CS_"C4"
"RTN","RORHL11",108,0)
 ;
"RTN","RORHL11",109,0)
 ;--- OBR-7 - Date/Time Specimen Taken
"RTN","RORHL11",110,0)
 S TMP=$$FMTHL7^XLFDT($P(@RORTMP@("DEMO",RORIEN),U))
"RTN","RORHL11",111,0)
 I TMP'>0  D  Q RC
"RTN","RORHL11",112,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No specimen date","$$CYPATH^LA7UTL02")
"RTN","RORHL11",113,0)
 S RORSEG(7)=TMP
"RTN","RORHL11",114,0)
 ;
"RTN","RORHL11",115,0)
 ;--- OBR-24 - Service Section ID
"RTN","RORHL11",116,0)
 S RORSEG(24)="CP"
"RTN","RORHL11",117,0)
 ;
"RTN","RORHL11",118,0)
 ;--- OBR-44 - Divsion
"RTN","RORHL11",119,0)
 S RORSEG(44)=$$SITE^RORUTL03(CS)
"RTN","RORHL11",120,0)
 ;
"RTN","RORHL11",121,0)
 ;--- Store the segment
"RTN","RORHL11",122,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL11",123,0)
 Q ERRCNT
"RTN","RORHL11",124,0)
 ;
"RTN","RORHL11",125,0)
 ;***** CYTOPATHOLOGY OBX SEGMENT BUILDER
"RTN","RORHL11",126,0)
 ;
"RTN","RORHL11",127,0)
 ; RORTMP        Closed root of the array holding lab data
"RTN","RORHL11",128,0)
 ;
"RTN","RORHL11",129,0)
 ; Return Values:
"RTN","RORHL11",130,0)
 ;       <0  Error code
"RTN","RORHL11",131,0)
 ;        0  Ok
"RTN","RORHL11",132,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL11",133,0)
 ;
"RTN","RORHL11",134,0)
OBX(RORTMP) ;
"RTN","RORHL11",135,0)
 N CS,ERRCNT,RC,RPS,TMP
"RTN","RORHL11",136,0)
 S (ERRCNT,RC)=0
"RTN","RORHL11",137,0)
 D ECH^RORHL7(.CS,,.RPS)
"RTN","RORHL11",138,0)
 ;
"RTN","RORHL11",139,0)
 D:$D(@RORTMP@("SPEC")) SPECIMEN
"RTN","RORHL11",140,0)
 D SETOBXWP($$SEGID("BCH","Brief clinical History",CS),"CHIS")
"RTN","RORHL11",141,0)
 D SETOBXWP($$SEGID("PDIAG","Preoperative Diagnosis",CS),"PREDX")
"RTN","RORHL11",142,0)
 D SETOBXWP($$SEGID("OF","Operative Findings",CS),"OPERDX")
"RTN","RORHL11",143,0)
 D SETOBXWP($$SEGID("POPDIAG","Postoperative Diagnosis",CS),"POSTDX")
"RTN","RORHL11",144,0)
 D SETOBXWP($$SEGID("MICRO","Microscopic Examination",CS),"MICRO")
"RTN","RORHL11",145,0)
 D SETOBXWP($$SEGID("CDIAG","Cytopathology Diagnosis",CS),"CYTODX")
"RTN","RORHL11",146,0)
 D ICD(RPS)
"RTN","RORHL11",147,0)
 ;
"RTN","RORHL11",148,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL11",149,0)
 ;
"RTN","RORHL11",150,0)
 ;***** SEARCHES BY COMPLETION (RESULT) DATE
"RTN","RORHL11",151,0)
RAD() ;
"RTN","RORHL11",152,0)
 N ERRCNT,IDT,RCDT
"RTN","RORHL11",153,0)
 S (ERRCNT,IDT)=0
"RTN","RORHL11",154,0)
 F  S IDT=$O(^LR(LRDFN,"CY",IDT))  Q:'IDT  D
"RTN","RORHL11",155,0)
 . S RCDT=$P($G(^LR(LRDFN,"CY",IDT,0)),U,3)
"RTN","RORHL11",156,0)
 . I RCDT'<RORSTDT,RCDT<RORENDT  S:$$OBROBX(IDT) ERRCNT=ERRCNT+1
"RTN","RORHL11",157,0)
 Q ERRCNT
"RTN","RORHL11",158,0)
 ;
"RTN","RORHL11",159,0)
 ;***** CONSTRUCTS SEGMENT IDENTIFIER
"RTN","RORHL11",160,0)
SEGID(PONE,PTWO,CS) ; Create segment identifier
"RTN","RORHL11",161,0)
 Q PONE_CS_PTWO_CS_"VA080"
"RTN","RORHL11",162,0)
 ;
"RTN","RORHL11",163,0)
 ;***** CREATE AND STORE THE OBX SEGMENTS
"RTN","RORHL11",164,0)
SETOBX(OBX3,OBX5) ;
"RTN","RORHL11",165,0)
 N RORSEG
"RTN","RORHL11",166,0)
 ;--- Initialize the segment
"RTN","RORHL11",167,0)
 S RORSEG(0)="OBX"
"RTN","RORHL11",168,0)
 ;--- OBX-2
"RTN","RORHL11",169,0)
 S RORSEG(2)="FT"
"RTN","RORHL11",170,0)
 ;--- OBX-3
"RTN","RORHL11",171,0)
 S RORSEG(3)=OBX3
"RTN","RORHL11",172,0)
 ;--- OBX-5
"RTN","RORHL11",173,0)
 S RORSEG(5)=$$ESCAPE^RORHL7(OBX5)
"RTN","RORHL11",174,0)
 ;--- OBX-11
"RTN","RORHL11",175,0)
 S RORSEG(11)="F"
"RTN","RORHL11",176,0)
 ;--- Store the segment
"RTN","RORHL11",177,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL11",178,0)
 Q
"RTN","RORHL11",179,0)
 ;
"RTN","RORHL11",180,0)
SETOBXWP(OBX3,SUBS) ;
"RTN","RORHL11",181,0)
 N BR,CNT,I,I1,RORSEG,TMP
"RTN","RORHL11",182,0)
 S BR=$E(HLECH,3)_".br"_$E(HLECH,3)
"RTN","RORHL11",183,0)
 Q:$D(@RORTMP@(SUBS))<10
"RTN","RORHL11",184,0)
 ;--- Initialize the segment
"RTN","RORHL11",185,0)
 S RORSEG(0)="OBX"
"RTN","RORHL11",186,0)
 ;--- OBX-2 - Value Type
"RTN","RORHL11",187,0)
 S RORSEG(2)="FT"
"RTN","RORHL11",188,0)
 ;--- OBX-3 - Observation Identifier
"RTN","RORHL11",189,0)
 S RORSEG(3)=OBX3
"RTN","RORHL11",190,0)
 ;--- OBX-5 - Observation Value
"RTN","RORHL11",191,0)
 S I=$O(@RORTMP@(SUBS,"")),CNT=0
"RTN","RORHL11",192,0)
 F  Q:I=""  S I1=$O(@RORTMP@(SUBS,I))  D  S I=I1
"RTN","RORHL11",193,0)
 . S TMP=$$ESCAPE^RORHL7(@RORTMP@(SUBS,I))
"RTN","RORHL11",194,0)
 . S CNT=CNT+1,RORSEG(5,CNT)=$S(I1'="":TMP_BR,1:TMP)
"RTN","RORHL11",195,0)
 ;--- OBX-11 - Observation Result Status
"RTN","RORHL11",196,0)
 S RORSEG(11)="F"
"RTN","RORHL11",197,0)
 ;--- Store the segment
"RTN","RORHL11",198,0)
 D:$D(RORSEG(5)) ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL11",199,0)
 Q
"RTN","RORHL11",200,0)
 ;
"RTN","RORHL11",201,0)
 ;***** MAKES SPECIMEN OBX
"RTN","RORHL11",202,0)
SPECIMEN ;
"RTN","RORHL11",203,0)
 N INDEX,RORSPEC,SPECID
"RTN","RORHL11",204,0)
 S SPECID=$$SEGID("SPEC","Specimen",CS)
"RTN","RORHL11",205,0)
 S INDEX=""
"RTN","RORHL11",206,0)
 F  S INDEX=$O(@RORTMP@("SPEC",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",207,0)
 . S RORSPEC=$G(@RORTMP@("SPEC",INDEX))
"RTN","RORHL11",208,0)
 . D:RORSPEC'="" SETOBX(SPECID,RORSPEC)
"RTN","RORHL11",209,0)
 Q
"RTN","RORHL12")
0^12^B9125680^B9232656
"RTN","RORHL12",1,0)
RORHL12 ;HOIFO/BH,SG - HL7 MICROBIOLOGY DATA: OBR ; 3/13/06 9:24am
"RTN","RORHL12",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL12",3,0)
 ;
"RTN","RORHL12",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL12",5,0)
 ;
"RTN","RORHL12",6,0)
 ; #4335         $$GETDATA^LA7UTL1A (controlled)
"RTN","RORHL12",7,0)
 ;
"RTN","RORHL12",8,0)
 Q
"RTN","RORHL12",9,0)
 ;
"RTN","RORHL12",10,0)
 ;***** SEARCHES FOR MICROBIOLOGY DATA
"RTN","RORHL12",11,0)
 ;
"RTN","RORHL12",12,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL12",13,0)
 ;
"RTN","RORHL12",14,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL12",15,0)
 ;               data extraction time frames are stored.
"RTN","RORHL12",16,0)
 ;
"RTN","RORHL12",17,0)
 ; [CDSMODE]     Search the data by:
"RTN","RORHL12",18,0)
 ;                 0  completion/result date (default)
"RTN","RORHL12",19,0)
 ;                 1  specimen collection date
"RTN","RORHL12",20,0)
 ;
"RTN","RORHL12",21,0)
 ; Return Values:
"RTN","RORHL12",22,0)
 ;       <0  Error code
"RTN","RORHL12",23,0)
 ;        0  Ok
"RTN","RORHL12",24,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL12",25,0)
 ;
"RTN","RORHL12",26,0)
EN1(RORDFN,DXDTS,CDSMODE) ;
"RTN","RORHL12",27,0)
 N ERRCNT,IDX,LRDFN,RC,RCL,RORENDT,RORMIIEN,RORREF,RORSTDT,RORTMP,TMP
"RTN","RORHL12",28,0)
 S (ERRCNT,RC)=0
"RTN","RORHL12",29,0)
 ;--- Check the parameters
"RTN","RORHL12",30,0)
 S CDSMODE=$S($G(CDSMODE):"CD",1:"RAD")
"RTN","RORHL12",31,0)
 ;
"RTN","RORHL12",32,0)
 S LRDFN=+$$LABREF^RORUTL18(RORDFN)  Q:LRDFN'>0 0
"RTN","RORHL12",33,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL12",34,0)
 ;
"RTN","RORHL12",35,0)
 S IDX=0
"RTN","RORHL12",36,0)
 F  S IDX=$O(DXDTS(11,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL12",37,0)
 . S RORSTDT=$P(DXDTS(11,IDX),U),RORENDT=$P(DXDTS(11,IDX),U,2)
"RTN","RORHL12",38,0)
 . K @RORTMP
"RTN","RORHL12",39,0)
 . ;--- Get microbiology data
"RTN","RORHL12",40,0)
 . S RCL=$$GETDATA^LA7UTL1A(LRDFN,RORSTDT,RORENDT,CDSMODE,RORTMP)
"RTN","RORHL12",41,0)
 . I RCL<0  D  Q
"RTN","RORHL12",42,0)
 . . S TMP="$$GETDATA^LA7UTL1A"
"RTN","RORHL12",43,0)
 . . S RC=$$ERROR^RORERR(-56,,$P(RCL,U,2),RORDFN,+RCL,TMP)
"RTN","RORHL12",44,0)
 . ;--- Process the data
"RTN","RORHL12",45,0)
 . S RORMIIEN=""
"RTN","RORHL12",46,0)
 . F  S RORMIIEN=$O(@RORTMP@(LRDFN,RORMIIEN))  Q:RORMIIEN=""  D
"RTN","RORHL12",47,0)
 . . S RORREF=$NA(@RORTMP@(LRDFN,RORMIIEN))
"RTN","RORHL12",48,0)
 . . ;---
"RTN","RORHL12",49,0)
 . . S TMP=$$OBR(RORREF)
"RTN","RORHL12",50,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",51,0)
 . . ;---
"RTN","RORHL12",52,0)
 . . S TMP=$$OBX^RORHL121(RORREF)
"RTN","RORHL12",53,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL12",54,0)
 ;
"RTN","RORHL12",55,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL12",56,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL12",57,0)
 ;
"RTN","RORHL12",58,0)
 ;***** MICROBIOLOGY OBR SEGMENT BUILDER
"RTN","RORHL12",59,0)
 ;
"RTN","RORHL12",60,0)
 ; RORREF        Global reference for MI entry
"RTN","RORHL12",61,0)
 ;
"RTN","RORHL12",62,0)
 ; Return Values:
"RTN","RORHL12",63,0)
 ;       <0  Error code
"RTN","RORHL12",64,0)
 ;        0  Ok
"RTN","RORHL12",65,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL12",66,0)
 ;
"RTN","RORHL12",67,0)
OBR(RORREF) ;
"RTN","RORHL12",68,0)
 N CS,ERRCNT,RC,RORSEG
"RTN","RORHL12",69,0)
 S (ERRCNT,RC)=0
"RTN","RORHL12",70,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL12",71,0)
 ;
"RTN","RORHL12",72,0)
 ;--- Initialize the segment
"RTN","RORHL12",73,0)
 S RORSEG(0)="OBR"
"RTN","RORHL12",74,0)
 ;
"RTN","RORHL12",75,0)
 ;--- OBR-3 - Accession Number
"RTN","RORHL12",76,0)
 S TMP=$G(@RORREF@(0,.06,"I"))
"RTN","RORHL12",77,0)
 I TMP=""  D  Q RC
"RTN","RORHL12",78,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No accession #","$$GETDATA^LA7UTL1A")
"RTN","RORHL12",79,0)
 S RORSEG(3)=TMP
"RTN","RORHL12",80,0)
 ;
"RTN","RORHL12",81,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL12",82,0)
 S RORSEG(4)="87999"_CS_"MICROBIOLOGY"_CS_"C4"
"RTN","RORHL12",83,0)
 ;
"RTN","RORHL12",84,0)
 ;--- OBR-7 - Accession Date
"RTN","RORHL12",85,0)
 S TMP=$$FMTHL7^XLFDT($G(@RORREF@(0,.01,"I")))
"RTN","RORHL12",86,0)
 I TMP'>0  D  Q RC
"RTN","RORHL12",87,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No accession date","$$GETDATA^LA7UTL1A")
"RTN","RORHL12",88,0)
 S RORSEG(7)=TMP
"RTN","RORHL12",89,0)
 ;
"RTN","RORHL12",90,0)
 ;--- OBR-11 - Urine Screen
"RTN","RORHL12",91,0)
 S RORSEG(11)=$G(@RORREF@(0,11.57,"I"))
"RTN","RORHL12",92,0)
 ;
"RTN","RORHL12",93,0)
 ;--- OBR-13 - Site/Specimen
"RTN","RORHL12",94,0)
 S RORSEG(13)=$$ESCAPE^RORHL7($G(@RORREF@(0,.05,"E")))
"RTN","RORHL12",95,0)
 ;
"RTN","RORHL12",96,0)
 ;--- OBR-20 - Collection Sample
"RTN","RORHL12",97,0)
 S RORSEG(20)=$$ESCAPE^RORHL7($G(@RORREF@(0,.055,"E")))
"RTN","RORHL12",98,0)
 ;
"RTN","RORHL12",99,0)
 ;--- OBR-21 - Sputum Screen
"RTN","RORHL12",100,0)
 S RORSEG(21)=$$ESCAPE^RORHL7($G(@RORREF@(0,11.58,"E")))
"RTN","RORHL12",101,0)
 ;
"RTN","RORHL12",102,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL12",103,0)
 S RORSEG(24)="MB"
"RTN","RORHL12",104,0)
 ;
"RTN","RORHL12",105,0)
 ;--- OBR-25 - Sterility Control
"RTN","RORHL12",106,0)
 S TMP=$G(@RORREF@(0,11.51,"I"))
"RTN","RORHL12",107,0)
 S RORSEG(25)=$S(TMP="P":"F",TMP="N":"R",1:"")
"RTN","RORHL12",108,0)
 ;
"RTN","RORHL12",109,0)
 ;--- OBR-44 - Division
"RTN","RORHL12",110,0)
 S RORSEG(44)=$$SITE^RORUTL03(CS)
"RTN","RORHL12",111,0)
 ;
"RTN","RORHL12",112,0)
 ;--- Store the segment
"RTN","RORHL12",113,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL12",114,0)
 Q ERRCNT
"RTN","RORHL15")
0^31^B20217488^B36834138
"RTN","RORHL15",1,0)
RORHL15 ;HOIFO/BH - HL7 IV DATA: OBR, OBX ; 5/30/06 9:40am
"RTN","RORHL15",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORHL15",3,0)
 ;
"RTN","RORHL15",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL15",5,0)
 ;
"RTN","RORHL15",6,0)
 ; #2400         OCL^PSOORRL and OEL^PSOORRL (controlled)
"RTN","RORHL15",7,0)
 ; #4549         ZERO^PSS52P6 (supported)
"RTN","RORHL15",8,0)
 ; #4550         ZERO^PSS52P7 (supported)
"RTN","RORHL15",9,0)
 ; #4826         PSS436^PSS55 (supported)
"RTN","RORHL15",10,0)
 ;
"RTN","RORHL15",11,0)
 Q
"RTN","RORHL15",12,0)
 ;
"RTN","RORHL15",13,0)
 ;***** SEARCHES FOR IV DATA
"RTN","RORHL15",14,0)
 ;
"RTN","RORHL15",15,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL15",16,0)
 ;
"RTN","RORHL15",17,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL15",18,0)
 ;               data extraction time frames are stored.
"RTN","RORHL15",19,0)
 ;
"RTN","RORHL15",20,0)
 ; Return Values:
"RTN","RORHL15",21,0)
 ;       <0  Error code
"RTN","RORHL15",22,0)
 ;        0  Ok
"RTN","RORHL15",23,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL15",24,0)
 ;
"RTN","RORHL15",25,0)
 ; The ^TMP("PS",$J) global node is used by this function.
"RTN","RORHL15",26,0)
 ;
"RTN","RORHL15",27,0)
EN1(RORDFN,DXDTS) ;
"RTN","RORHL15",28,0)
 N ERRCNT,IDX,IEN55,II,NODE,RC,ROR55,ROR55SUB,RORENDT,RORII,RORORD,RORSTDT,RORTMP
"RTN","RORHL15",29,0)
 S (ERRCNT,RC)=0
"RTN","RORHL15",30,0)
 ;
"RTN","RORHL15",31,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL15",32,0)
 S ROR55=$$ALLOC^RORTMP(.ROR55SUB)
"RTN","RORHL15",33,0)
 ;
"RTN","RORHL15",34,0)
 S IDX=0
"RTN","RORHL15",35,0)
 F  S IDX=$O(DXDTS(14,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL15",36,0)
 . S RORSTDT=$P(DXDTS(14,IDX),U),RORENDT=$P(DXDTS(14,IDX),U,2)
"RTN","RORHL15",37,0)
 . ;--- Load the list of prescriptions
"RTN","RORHL15",38,0)
 . K ^TMP("PS",$J),@RORTMP
"RTN","RORHL15",39,0)
 . D OCL^PSOORRL(RORDFN,RORSTDT,RORENDT)
"RTN","RORHL15",40,0)
 . Q:$D(^TMP("PS",$J))<10
"RTN","RORHL15",41,0)
 . ;
"RTN","RORHL15",42,0)
 . ;--- Select the prescriptions
"RTN","RORHL15",43,0)
 . S RORII=0
"RTN","RORHL15",44,0)
 . F  S RORII=$O(^TMP("PS",$J,RORII))  Q:'RORII  D
"RTN","RORHL15",45,0)
 . . S RORORD=$P(^TMP("PS",$J,RORII,0),U)
"RTN","RORHL15",46,0)
 . . Q:RORORD'>0
"RTN","RORHL15",47,0)
 . . S II=$P(RORORD,";"),II=$E(II,$L(II))
"RTN","RORHL15",48,0)
 . . Q:II'="V"
"RTN","RORHL15",49,0)
 . . ;---
"RTN","RORHL15",50,0)
 . . M @RORTMP@(RORII)=^TMP("PS",$J,RORII)
"RTN","RORHL15",51,0)
 . ;
"RTN","RORHL15",52,0)
 . ;--- Browse through the list and generate the HL7 segments
"RTN","RORHL15",53,0)
 . S RORII=0
"RTN","RORHL15",54,0)
 . F  S RORII=$O(@RORTMP@(RORII))  Q:'RORII  D
"RTN","RORHL15",55,0)
 . . S RORORD=$P(@RORTMP@(RORII,0),U),IEN55=+$P(RORORD,";")
"RTN","RORHL15",56,0)
 . . D PSS436^PSS55(RORDFN,IEN55,ROR55SUB)
"RTN","RORHL15",57,0)
 . . S NODE=$NA(@ROR55@(IEN55))
"RTN","RORHL15",58,0)
 . . ;---
"RTN","RORHL15",59,0)
 . . S TMP=$$OBR(NODE,RORDFN)
"RTN","RORHL15",60,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL15",61,0)
 . . ;---
"RTN","RORHL15",62,0)
 . . S TMP=$$OBX(NODE,RORDFN)
"RTN","RORHL15",63,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL15",64,0)
 ;
"RTN","RORHL15",65,0)
 D FREE^RORTMP(ROR55),FREE^RORTMP(RORTMP)
"RTN","RORHL15",66,0)
 K ^TMP("PS",$J)
"RTN","RORHL15",67,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL15",68,0)
 ;
"RTN","RORHL15",69,0)
 ;***** IV OBR SEGMENT BUILDER
"RTN","RORHL15",70,0)
 ;
"RTN","RORHL15",71,0)
 ; NODE          Closed root of a subtree that stores the output of
"RTN","RORHL15",72,0)
 ;               the PSS436^PSS55 Pharmacy API
"RTN","RORHL15",73,0)
 ;
"RTN","RORHL15",74,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL15",75,0)
 ;
"RTN","RORHL15",76,0)
 ; Return Values:
"RTN","RORHL15",77,0)
 ;       <0  Error code
"RTN","RORHL15",78,0)
 ;        0  Ok
"RTN","RORHL15",79,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL15",80,0)
 ;
"RTN","RORHL15",81,0)
OBR(NODE,RORDFN) ;
"RTN","RORHL15",82,0)
 N CS,ERRCNT,IEN,RC,RORMSG,RORSEG,TMP
"RTN","RORHL15",83,0)
 S (ERRCNT,RC)=0
"RTN","RORHL15",84,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL15",85,0)
 ;
"RTN","RORHL15",86,0)
 ;--- Initialize the segment
"RTN","RORHL15",87,0)
 S RORSEG(0)="OBR"
"RTN","RORHL15",88,0)
 ;
"RTN","RORHL15",89,0)
 ;--- OBR-3 - Order Number
"RTN","RORHL15",90,0)
 S RORSEG(3)=$P($G(@NODE@(.01)),U)
"RTN","RORHL15",91,0)
 ;
"RTN","RORHL15",92,0)
 ;--- OBR-4 - IV CPT Code
"RTN","RORHL15",93,0)
 S RORSEG(4)="90780"_CS_"IV"_CS_"C4"
"RTN","RORHL15",94,0)
 ;
"RTN","RORHL15",95,0)
 ;--- OBR-7 - Start Date
"RTN","RORHL15",96,0)
 S TMP=$$FMTHL7^XLFDT($P($G(@NODE@(.02)),U))
"RTN","RORHL15",97,0)
 Q:TMP'>0 $$ERROR^RORERR(-100,,,RORDFN,"No start date","PSS436^PSS55")
"RTN","RORHL15",98,0)
 S RORSEG(7)=TMP
"RTN","RORHL15",99,0)
 ;
"RTN","RORHL15",100,0)
 ;--- OBR-8 - Stop Date
"RTN","RORHL15",101,0)
 S RORSEG(8)=$$FM2HL^RORHL7($P($G(@NODE@(.03)),U))
"RTN","RORHL15",102,0)
 ;
"RTN","RORHL15",103,0)
 ;--- OBR-13 - Schedule
"RTN","RORHL15",104,0)
 S RORSEG(13)=$$ESCAPE^RORHL7($P($G(@NODE@(.09)),U))
"RTN","RORHL15",105,0)
 ;
"RTN","RORHL15",106,0)
 ;--- OBR-20 - Infusion Rate
"RTN","RORHL15",107,0)
 S RORSEG(20)=$$ESCAPE^RORHL7($P($G(@NODE@(.08)),U))
"RTN","RORHL15",108,0)
 ;
"RTN","RORHL15",109,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL15",110,0)
 S RORSEG(24)="IMM"
"RTN","RORHL15",111,0)
 ;
"RTN","RORHL15",112,0)
 ;--- OBR-40 - Type
"RTN","RORHL15",113,0)
 S TMP=$P($G(@NODE@(.04)),U)
"RTN","RORHL15",114,0)
 I TMP'=""  D  S RORSEG(40)=TMP
"RTN","RORHL15",115,0)
 . S $P(TMP,CS,2)=$P($G(@NODE@(.04)),U,2)
"RTN","RORHL15",116,0)
 . S $P(TMP,CS,3)="VA"
"RTN","RORHL15",117,0)
 ;
"RTN","RORHL15",118,0)
 ;--- OBR-44 - Division
"RTN","RORHL15",119,0)
 S IEN=+$P($G(@NODE@(9)),U)
"RTN","RORHL15",120,0)
 I IEN>0  D
"RTN","RORHL15",121,0)
 . S IEN=+$$GET1^DIQ(42,IEN_",",44,"I",,"RORMSG")
"RTN","RORHL15",122,0)
 . D:$G(DIERR) DBS^RORERR("RORMSG",-99,,,42,IEN_",")
"RTN","RORHL15",123,0)
 S RORSEG(44)=$$DIV44^RORHLUT1(IEN,CS)
"RTN","RORHL15",124,0)
 ;
"RTN","RORHL15",125,0)
 ;--- Store the segment
"RTN","RORHL15",126,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL15",127,0)
 Q ERRCNT
"RTN","RORHL15",128,0)
 ;
"RTN","RORHL15",129,0)
 ;***** IV OBX SEGMENT(S) BUILDER
"RTN","RORHL15",130,0)
 ;
"RTN","RORHL15",131,0)
 ; NODE          Closed root of a subtree that stores the output of
"RTN","RORHL15",132,0)
 ;               the PSS436^PSS55 Pharmacy API
"RTN","RORHL15",133,0)
 ;
"RTN","RORHL15",134,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL15",135,0)
 ;
"RTN","RORHL15",136,0)
 ; Return Values:
"RTN","RORHL15",137,0)
 ;       <0  Error code
"RTN","RORHL15",138,0)
 ;        0  Ok
"RTN","RORHL15",139,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL15",140,0)
 ;
"RTN","RORHL15",141,0)
OBX(NODE,RORDFN) ;
"RTN","RORHL15",142,0)
 N ADD,CS,ERRCNT,I,ID,RC,SOL,TMP
"RTN","RORHL15",143,0)
 S (ERRCNT,RC)=0
"RTN","RORHL15",144,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL15",145,0)
 ;
"RTN","RORHL15",146,0)
 ;=== Other print info
"RTN","RORHL15",147,0)
 S TMP=$P($G(@NODE@(31)),U)
"RTN","RORHL15",148,0)
 D:TMP'="" SETOBX(TMP,"OTPR"_CS_"Other Print info."_CS_"VA080")
"RTN","RORHL15",149,0)
 ;
"RTN","RORHL15",150,0)
 ;=== Additive data
"RTN","RORHL15",151,0)
 I $G(@NODE@("ADD",0))>0  D
"RTN","RORHL15",152,0)
 . S ID="ADD"_CS_"Additive"_CS_"VA080"
"RTN","RORHL15",153,0)
 . S I=0
"RTN","RORHL15",154,0)
 . F  S I=$O(@NODE@("ADD",I))  Q:I'>0  D
"RTN","RORHL15",155,0)
 . . S ADD=$P($G(@NODE@("ADD",I,.01)),U,2)
"RTN","RORHL15",156,0)
 . . D:ADD'="" SETOBX(ADD,ID,$P($G(@NODE@("ADD",I,.02)),U))
"RTN","RORHL15",157,0)
 ;
"RTN","RORHL15",158,0)
 ;=== Solution Data
"RTN","RORHL15",159,0)
 I $G(@NODE@("SOL",0))>0  D
"RTN","RORHL15",160,0)
 . S ID="SOL"_CS_"Solution"_CS_"VA080"
"RTN","RORHL15",161,0)
 . S I=0
"RTN","RORHL15",162,0)
 . F  S I=$O(@NODE@("SOL",I))  Q:I'>0  D
"RTN","RORHL15",163,0)
 . . S SOL=$P($G(@NODE@("SOL",I,.01)),U,2)
"RTN","RORHL15",164,0)
 . . D:SOL'="" SETOBX(SOL,ID,$P($G(@NODE@("SOL",I,1)),U))
"RTN","RORHL15",165,0)
 ;
"RTN","RORHL15",166,0)
 Q ERRCNT
"RTN","RORHL15",167,0)
 ;
"RTN","RORHL15",168,0)
 ;***** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL15",169,0)
SETOBX(OBX5,OBX3,OBX7) ;
"RTN","RORHL15",170,0)
 N RORSEG
"RTN","RORHL15",171,0)
 ;--- Initialize the segment
"RTN","RORHL15",172,0)
 S RORSEG(0)="OBX"
"RTN","RORHL15",173,0)
 ;--- OBX-2 - Value Type
"RTN","RORHL15",174,0)
 S RORSEG(2)="FT"
"RTN","RORHL15",175,0)
 ;--- OBX-3 - Obervation Identifier
"RTN","RORHL15",176,0)
 S RORSEG(3)=OBX3
"RTN","RORHL15",177,0)
 ;--- OBX-5 - Observation Value
"RTN","RORHL15",178,0)
 S RORSEG(5)=$$ESCAPE^RORHL7(OBX5)
"RTN","RORHL15",179,0)
 ;--- OBX-7 - Strength (additives) or volume (solutions)
"RTN","RORHL15",180,0)
 S:$G(OBX7)'="" RORSEG(7)=OBX7
"RTN","RORHL15",181,0)
 ;--- OBX-11 - Observation Result Status
"RTN","RORHL15",182,0)
 S RORSEG(11)="F"
"RTN","RORHL15",183,0)
 ;--- Store the segment
"RTN","RORHL15",184,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL15",185,0)
 Q
"RTN","RORLOCK")
0^42^B28241178^B21824053
"RTN","RORLOCK",1,0)
RORLOCK ;HCIOFO/SG - LOCKS AND TRANSACTIONS ; 11/17/06 11:37am
"RTN","RORLOCK",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORLOCK",3,0)
 ;
"RTN","RORLOCK",4,0)
 Q
"RTN","RORLOCK",5,0)
 ;
"RTN","RORLOCK",6,0)
 ;***** FINDS THE LOCK DESCRIPTOR FOR THE GLOBAL NODE
"RTN","RORLOCK",7,0)
LDSC(NODELIST) ;
"RTN","RORLOCK",8,0)
 N DESCR,IENS,L,NDX,NODE,RORMSG,SP,TMP
"RTN","RORLOCK",9,0)
 S:$D(NODELIST)<10 NODELIST(NODELIST)=""
"RTN","RORLOCK",10,0)
 S (DESCR,NODE)=""
"RTN","RORLOCK",11,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RORLOCK",12,0)
 . ;--- The Node itself
"RTN","RORLOCK",13,0)
 . S SP=$$XLNDX(NODE),TMP=$G(^XTMP("RORLOCK",SP))
"RTN","RORLOCK",14,0)
 . S:TMP>DESCR DESCR=TMP
"RTN","RORLOCK",15,0)
 . ;--- Left Siblings and Ancestors
"RTN","RORLOCK",16,0)
 . S NDX=SP
"RTN","RORLOCK",17,0)
 . F  S NDX=$O(^XTMP("RORLOCK",NDX),-1),L=$L(NDX)  Q:(NDX="")!(NDX'=$E(SP,1,L))  D
"RTN","RORLOCK",18,0)
 . . S TMP=$G(^XTMP("RORLOCK",NDX))  S:TMP>DESCR DESCR=TMP
"RTN","RORLOCK",19,0)
 . ;--- Right Siblings and Descendants
"RTN","RORLOCK",20,0)
 . S NDX=SP,L=$L(SP)
"RTN","RORLOCK",21,0)
 . F  S NDX=$O(^XTMP("RORLOCK",NDX))  Q:(NDX="")!($E(NDX,1,L)'=SP)  D
"RTN","RORLOCK",22,0)
 . . S TMP=$G(^XTMP("RORLOCK",NDX))  S:TMP>DESCR DESCR=TMP
"RTN","RORLOCK",23,0)
 ;--- Prepare the lock descriptor
"RTN","RORLOCK",24,0)
 S:'DESCR $P(DESCR,U)=$$NOW^XLFDT
"RTN","RORLOCK",25,0)
 D:$P(DESCR,U,3)>0
"RTN","RORLOCK",26,0)
 . S IENS=+$P(DESCR,U,3)_","
"RTN","RORLOCK",27,0)
 . S $P(DESCR,U,2)=$$GET1^DIQ(200,IENS,.01,,,"RORMSG")
"RTN","RORLOCK",28,0)
 . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,200,IENS)
"RTN","RORLOCK",29,0)
 S:$P(DESCR,U,2)="" $P(DESCR,U,2)="UNKNOWN USER"
"RTN","RORLOCK",30,0)
 Q $P(DESCR,U,1,5)
"RTN","RORLOCK",31,0)
 ;
"RTN","RORLOCK",32,0)
 ;***** LOCKS THE (SUB)FILE, RECORD OR FIELD NODE
"RTN","RORLOCK",33,0)
 ;
"RTN","RORLOCK",34,0)
 ; FILE          File/subfile number
"RTN","RORLOCK",35,0)
 ; [IENS]        IENS of the record or subfile
"RTN","RORLOCK",36,0)
 ; [FIELD]       Field number
"RTN","RORLOCK",37,0)
 ; [TO]          Timeout (1 sec, by default)
"RTN","RORLOCK",38,0)
 ; [NAME]        Process name
"RTN","RORLOCK",39,0)
 ;
"RTN","RORLOCK",40,0)
 ; Return Values:
"RTN","RORLOCK",41,0)
 ;       <0  Error code
"RTN","RORLOCK",42,0)
 ;        0  Ok (the object has been locked)
"RTN","RORLOCK",43,0)
 ;       >0  The object is locked by another user. A lock descriptor
"RTN","RORLOCK",44,0)
 ;           is returned in this case:
"RTN","RORLOCK",45,0)
 ;             ^01: Date/Time (FileMan)
"RTN","RORLOCK",46,0)
 ;             ^02: User/Process name
"RTN","RORLOCK",47,0)
 ;             ^03: User IEN (DUZ)
"RTN","RORLOCK",48,0)
 ;             ^04: $JOB
"RTN","RORLOCK",49,0)
 ;             ^05: Task number
"RTN","RORLOCK",50,0)
 ;
"RTN","RORLOCK",51,0)
 ; If the third field is empty then the object is locked by a
"RTN","RORLOCK",52,0)
 ; registry background process (see the name in the 2nd field).
"RTN","RORLOCK",53,0)
 ;
"RTN","RORLOCK",54,0)
LOCK(FILE,IENS,FIELD,TO,NAME) ;
"RTN","RORLOCK",55,0)
 N DESCR,NDX,NODELIST,NODE,PI,RC,TMP
"RTN","RORLOCK",56,0)
 I $D(FILE)<10  S RC=0  D:$G(FILE)>0  Q RC
"RTN","RORLOCK",57,0)
 . S RC=$$LOCK1(FILE,$G(IENS),$G(FIELD),$G(TO),$G(NAME))
"RTN","RORLOCK",58,0)
 ;--- Compile the list of global nodes
"RTN","RORLOCK",59,0)
 S RC=$$NODELIST(.NODELIST,.FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",60,0)
 Q:RC<0 RC  Q:NODELIST="" 0
"RTN","RORLOCK",61,0)
 ;--- Try to lock the object(s)
"RTN","RORLOCK",62,0)
 X "L +("_NODELIST_"):"_$S($G(TO)>0:TO,1:3)  E  Q $$LDSC(.NODELIST)
"RTN","RORLOCK",63,0)
 ;--- Create the lock descriptor(s)
"RTN","RORLOCK",64,0)
 S DESCR=$$NOW^XLFDT_U_$G(NAME)_U_U_$JOB_U_$G(ZTSK)
"RTN","RORLOCK",65,0)
 S:$G(NAME)="" $P(DESCR,U,3)=$G(DUZ)
"RTN","RORLOCK",66,0)
 S NODE=""
"RTN","RORLOCK",67,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RORLOCK",68,0)
 . S NDX=$$XLNDX(NODE)
"RTN","RORLOCK",69,0)
 . ;--- Calculate the lock counter
"RTN","RORLOCK",70,0)
 . S TMP=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",71,0)
 . S $P(DESCR,U,6)=$S($P(TMP,U,4)=$JOB:$P(TMP,U,6)+1,1:1)
"RTN","RORLOCK",72,0)
 . ;--- Store the descriptor
"RTN","RORLOCK",73,0)
 . S ^XTMP("RORLOCK",NDX)=DESCR
"RTN","RORLOCK",74,0)
 Q 0
"RTN","RORLOCK",75,0)
 ;
"RTN","RORLOCK",76,0)
LOCK1(FILE,IENS,FIELD,TO,NAME) ;
"RTN","RORLOCK",77,0)
 N DESCR,NDX,NODE,TMP
"RTN","RORLOCK",78,0)
 S NODE=$$NODE(FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",79,0)
 Q:NODE<0 NODE
"RTN","RORLOCK",80,0)
 ;--- Try to lock the object
"RTN","RORLOCK",81,0)
 L +@NODE:$S($G(TO)>0:TO,1:3)  E  Q $$LDSC(NODE)
"RTN","RORLOCK",82,0)
 ;--- Create the lock descriptor
"RTN","RORLOCK",83,0)
 S DESCR=$$NOW^XLFDT_U_$G(NAME)_U_U_$JOB_U_$G(ZTSK)
"RTN","RORLOCK",84,0)
 S:$G(NAME)="" $P(DESCR,U,3)=$G(DUZ)
"RTN","RORLOCK",85,0)
 ;--- Calculate the lock counter
"RTN","RORLOCK",86,0)
 S NDX=$$XLNDX(NODE),TMP=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",87,0)
 S $P(DESCR,U,6)=$S($P(TMP,U,4)=$JOB:$P(TMP,U,6)+1,1:1)
"RTN","RORLOCK",88,0)
 ;--- Store the descriptor
"RTN","RORLOCK",89,0)
 S ^XTMP("RORLOCK",NDX)=DESCR
"RTN","RORLOCK",90,0)
 Q 0
"RTN","RORLOCK",91,0)
 ;
"RTN","RORLOCK",92,0)
 ;***** RETURNS THE GLOBAL NODE OF THE OBJECT
"RTN","RORLOCK",93,0)
 ;
"RTN","RORLOCK",94,0)
 ; FILE          File/subfile number
"RTN","RORLOCK",95,0)
 ; IENS          IENS of the record or subfile
"RTN","RORLOCK",96,0)
 ; FIELD         Field number
"RTN","RORLOCK",97,0)
 ;
"RTN","RORLOCK",98,0)
 ; Return Values:
"RTN","RORLOCK",99,0)
 ;       <0  Error code
"RTN","RORLOCK",100,0)
 ;           Closed root
"RTN","RORLOCK",101,0)
 ;
"RTN","RORLOCK",102,0)
NODE(FILE,IENS,FIELD) ;
"RTN","RORLOCK",103,0)
 N FGL,IEN,NODE,RC
"RTN","RORLOCK",104,0)
 S IEN=+IENS  S:IEN $P(IENS,",")=""
"RTN","RORLOCK",105,0)
 ;--- Closed root of the (sub)file
"RTN","RORLOCK",106,0)
 S NODE=$$ROOT^DILFD(FILE,IENS,1)
"RTN","RORLOCK",107,0)
 I NODE=""  D  Q RC
"RTN","RORLOCK",108,0)
 . S RC=$$ERROR^RORERR(-98,,,,FILE,IENS)
"RTN","RORLOCK",109,0)
 Q:'IEN NODE
"RTN","RORLOCK",110,0)
 ;--- The record node
"RTN","RORLOCK",111,0)
 S NODE=$NA(@NODE@(IEN))
"RTN","RORLOCK",112,0)
 Q:'FIELD NODE
"RTN","RORLOCK",113,0)
 ;--- Field node
"RTN","RORLOCK",114,0)
 S FGL=$$GET1^DID(FILE,FIELD,,"GLOBAL SUBSCRIPT LOCATION",,"RORMSG")
"RTN","RORLOCK",115,0)
 I $G(DIERR)  D  Q RC
"RTN","RORLOCK",116,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,FILE)
"RTN","RORLOCK",117,0)
 S:$P(FGL,";")'="" NODE=$NA(@NODE@($P(FGL,";")))
"RTN","RORLOCK",118,0)
 Q NODE
"RTN","RORLOCK",119,0)
 ;
"RTN","RORLOCK",120,0)
 ;***** COMPILES THE LIST OF GLOBAL NODES
"RTN","RORLOCK",121,0)
NODELIST(NODELIST,FILE,IENS,FIELD) ;
"RTN","RORLOCK",122,0)
 N NODE,PI,RC  K NODELIST
"RTN","RORLOCK",123,0)
 S NODELIST="",RC=0
"RTN","RORLOCK",124,0)
 ;--- Main object
"RTN","RORLOCK",125,0)
 I $G(FILE)>0  D  Q:RC<0 RC
"RTN","RORLOCK",126,0)
 . S NODE=$$NODE(FILE,IENS,FIELD)
"RTN","RORLOCK",127,0)
 . I NODE<0  S RC=+NODE  Q
"RTN","RORLOCK",128,0)
 . S NODELIST=NODELIST_","_NODE
"RTN","RORLOCK",129,0)
 . S NODELIST(NODE)=""
"RTN","RORLOCK",130,0)
 ;--- Linked objects
"RTN","RORLOCK",131,0)
 S PI="FILE"
"RTN","RORLOCK",132,0)
 F  S PI=$Q(@PI)  Q:PI=""  D  Q:RC<0
"RTN","RORLOCK",133,0)
 . S NODE=$$NODE($QS(PI,1),$QS(PI,2),$QS(PI,3))
"RTN","RORLOCK",134,0)
 . I NODE<0  S RC=+NODE  Q
"RTN","RORLOCK",135,0)
 . S NODELIST=NODELIST_","_NODE
"RTN","RORLOCK",136,0)
 . S NODELIST(NODE)=""
"RTN","RORLOCK",137,0)
 Q:RC<0 RC
"RTN","RORLOCK",138,0)
 ;---
"RTN","RORLOCK",139,0)
 S NODELIST=$P(NODELIST,",",2,999)
"RTN","RORLOCK",140,0)
 Q RC
"RTN","RORLOCK",141,0)
 ;
"RTN","RORLOCK",142,0)
 ;***** GENERATES A TEXT DESCRIPTION FROM THE LOCK DESCRIPTOR
"RTN","RORLOCK",143,0)
 ;
"RTN","RORLOCK",144,0)
 ; LDSC          Lock descriptor returned by the $$LOCK^RORLOCK
"RTN","RORLOCK",145,0)
 ;
"RTN","RORLOCK",146,0)
TEXT(LDSC) ;
"RTN","RORLOCK",147,0)
 N LTEXT
"RTN","RORLOCK",148,0)
 S LTEXT=$P(LDSC,U,2)_" about "_$$FMTE^XLFDT(+LDSC)
"RTN","RORLOCK",149,0)
 S:$P(LDSC,U,4) LTEXT=LTEXT_"; Job #"_$P(LDSC,U,4)
"RTN","RORLOCK",150,0)
 S:$P(LDSC,U,5) LTEXT=LTEXT_"; Task #"_$P(LDSC,U,5)
"RTN","RORLOCK",151,0)
 Q LTEXT
"RTN","RORLOCK",152,0)
 ;
"RTN","RORLOCK",153,0)
 ;***** UNLOCKS THE (SUB)FILE, RECORD OR FIELD NODE
"RTN","RORLOCK",154,0)
 ;
"RTN","RORLOCK",155,0)
 ; FILE          File/subfile number
"RTN","RORLOCK",156,0)
 ; [IENS]        IENS of the record or subfile
"RTN","RORLOCK",157,0)
 ; [FIELD]       Field number
"RTN","RORLOCK",158,0)
 ;
"RTN","RORLOCK",159,0)
 ; Return Values:
"RTN","RORLOCK",160,0)
 ;       <0  Error code
"RTN","RORLOCK",161,0)
 ;        0  Ok
"RTN","RORLOCK",162,0)
 ;
"RTN","RORLOCK",163,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RORLOCK",164,0)
 ;       D UNLOCK^RORLOCK(...) if you do not need its return value.
"RTN","RORLOCK",165,0)
 ;
"RTN","RORLOCK",166,0)
UNLOCK(FILE,IENS,FIELD) ;
"RTN","RORLOCK",167,0)
 N DESCR,NDX,NODELIST,NODE,PI,RC
"RTN","RORLOCK",168,0)
 I $D(FILE)<10  S RC=0  D:$G(FILE)>0  Q:$QUIT RC  Q
"RTN","RORLOCK",169,0)
 . S RC=$$UNLOCK1(FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",170,0)
 ;--- Compile the list of global nodes
"RTN","RORLOCK",171,0)
 S RC=$$NODELIST(.NODELIST,.FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",172,0)
 I RC<0  Q:$QUIT RC  Q
"RTN","RORLOCK",173,0)
 I NODELIST=""  Q:$QUIT 0  Q
"RTN","RORLOCK",174,0)
 ;--- Remove the lock descriptor(s)
"RTN","RORLOCK",175,0)
 S NODE=""
"RTN","RORLOCK",176,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RORLOCK",177,0)
 . S NDX=$$XLNDX(NODE),DESCR=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",178,0)
 . Q:$P(DESCR,U,4)'=$JOB
"RTN","RORLOCK",179,0)
 . I $P(DESCR,U,6)>1  D
"RTN","RORLOCK",180,0)
 . . S $P(^XTMP("RORLOCK",NDX),U,6)=$P(DESCR,U,6)-1
"RTN","RORLOCK",181,0)
 . E  K ^XTMP("RORLOCK",NDX)
"RTN","RORLOCK",182,0)
 ;--- Unlock the object(s)
"RTN","RORLOCK",183,0)
 X "L -("_NODELIST_")"
"RTN","RORLOCK",184,0)
 Q:$QUIT 0  Q
"RTN","RORLOCK",185,0)
 ;
"RTN","RORLOCK",186,0)
UNLOCK1(FILE,IENS,FIELD) ;
"RTN","RORLOCK",187,0)
 N DESCR,NDX,NODE
"RTN","RORLOCK",188,0)
 S NODE=$$NODE(FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",189,0)
 Q:NODE<0 NODE
"RTN","RORLOCK",190,0)
 ;--- Remove the lock descriptor
"RTN","RORLOCK",191,0)
 S NDX=$$XLNDX(NODE),DESCR=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",192,0)
 D:$P(DESCR,U,4)=$JOB
"RTN","RORLOCK",193,0)
 . I $P(DESCR,U,6)>1  D
"RTN","RORLOCK",194,0)
 . . S $P(^XTMP("RORLOCK",NDX),U,6)=$P(DESCR,U,6)-1
"RTN","RORLOCK",195,0)
 . E  K ^XTMP("RORLOCK",NDX)
"RTN","RORLOCK",196,0)
 ;--- Unlock the object
"RTN","RORLOCK",197,0)
 L -@NODE
"RTN","RORLOCK",198,0)
 Q 0
"RTN","RORLOCK",199,0)
 ;
"RTN","RORLOCK",200,0)
 ;***** RETURNS SUBSCRIPT OF THE NODE IN THE DESCRIPTOR TABLE
"RTN","RORLOCK",201,0)
XLNDX(NODE) ;
"RTN","RORLOCK",202,0)
 N L  S L=$L(NODE)
"RTN","RORLOCK",203,0)
 Q $S($E(NODE,L)=")":$E(NODE,1,L-1),1:NODE)
"RTN","RORNTEG")
0^40^B18682538^B19432116
"RTN","RORNTEG",1,0)
RORNTEG ;ISC/XTSUMBLD KERNEL - Package checksum checker ; 10/20/06 4:10pm
"RTN","RORNTEG",2,0)
 ;;0.0;;**1**;;Build 24
"RTN","RORNTEG",3,0)
 ;;7.3;3060622.15354
"RTN","RORNTEG",4,0)
 S XT4="I 1",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG",5,0)
CONT F XT1=1:1 S XT2=$T(ROU+XT1) Q:XT2=""  S X=$P(XT2," ",1),XT3=$P(XT2,";",3) X XT4 I $T W !,X X ^%ZOSF("TEST") S:'$T XT3=0 X:XT3 ^%ZOSF("RSUM") W ?10,$S('XT3:"Routine not in UCI",XT3'=Y:"Calculated "_$C(7)_Y_", off by "_(Y-XT3),1:"ok")
"RTN","RORNTEG",6,0)
 G CONT^RORNTEG0
"RTN","RORNTEG",7,0)
 K %1,%2,%3,X,Y,XT1,XT2,XT3,XT4 Q
"RTN","RORNTEG",8,0)
ONE S XT4="I $D(^UTILITY($J,X))",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG",9,0)
 W !,"Check a subset of routines:" K ^UTILITY($J) X ^%ZOSF("RSEL")
"RTN","RORNTEG",10,0)
 W ! G CONT
"RTN","RORNTEG",11,0)
ROU ;;
"RTN","RORNTEG",12,0)
ROR ;;2717781
"RTN","RORNTEG",13,0)
ROR01 ;;1117
"RTN","RORNTEG",14,0)
ROR02 ;;1122
"RTN","RORNTEG",15,0)
ROR10 ;;7730208
"RTN","RORNTEG",16,0)
ROR11 ;;8580380
"RTN","RORNTEG",17,0)
RORAPI01 ;;1957725
"RTN","RORNTEG",18,0)
RORBIN ;;2967124
"RTN","RORNTEG",19,0)
RORDD ;;4656034
"RTN","RORNTEG",20,0)
RORDD01 ;;3739193
"RTN","RORNTEG",21,0)
RORERR ;;4405971
"RTN","RORNTEG",22,0)
RORERR20 ;;14492523
"RTN","RORNTEG",23,0)
ROREVT01 ;;2008294
"RTN","RORNTEG",24,0)
ROREXPR ;;5694255
"RTN","RORNTEG",25,0)
ROREXT ;;3147105
"RTN","RORNTEG",26,0)
ROREXT01 ;;8425154
"RTN","RORNTEG",27,0)
ROREXT02 ;;5834876
"RTN","RORNTEG",28,0)
ROREXT03 ;;4554817
"RTN","RORNTEG",29,0)
ROREXTUT ;;5555893
"RTN","RORNTEG",30,0)
RORHDT ;;3387490
"RTN","RORNTEG",31,0)
RORHDT01 ;;1390687
"RTN","RORNTEG",32,0)
RORHDT02 ;;2997526
"RTN","RORNTEG",33,0)
RORHDT03 ;;4297815
"RTN","RORNTEG",34,0)
RORHDT04 ;;9379124
"RTN","RORNTEG",35,0)
RORHDT05 ;;2711736
"RTN","RORNTEG",36,0)
RORHDT06 ;;3568354
"RTN","RORNTEG",37,0)
RORHDTAC ;;2854289
"RTN","RORNTEG",38,0)
RORHDTUT ;;5831331
"RTN","RORNTEG",39,0)
RORHIV03 ;;4806950
"RTN","RORNTEG",40,0)
RORHIVUT ;;357536
"RTN","RORNTEG",41,0)
RORHL01 ;;1491461
"RTN","RORNTEG",42,0)
RORHL02 ;;5546944
"RTN","RORNTEG",43,0)
RORHL03 ;;5627421
"RTN","RORNTEG",44,0)
RORHL031 ;;6064797
"RTN","RORNTEG",45,0)
RORHL04 ;;5297245
"RTN","RORNTEG",46,0)
RORHL05 ;;4084796
"RTN","RORNTEG",47,0)
RORHL06 ;;4217993
"RTN","RORNTEG",48,0)
RORHL07 ;;2524507
"RTN","RORNTEG",49,0)
RORHL071 ;;2486458
"RTN","RORNTEG",50,0)
RORHL08 ;;5887870
"RTN","RORNTEG",51,0)
RORHL081 ;;7585616
"RTN","RORNTEG",52,0)
RORHL09 ;;6026195
"RTN","RORNTEG",53,0)
RORHL10 ;;5509115
"RTN","RORNTEG",54,0)
RORHL11 ;;4565613
"RTN","RORNTEG",55,0)
RORHL12 ;;2399116
"RTN","RORNTEG",56,0)
RORHL121 ;;9878360
"RTN","RORNTEG",57,0)
RORHL13 ;;3466976
"RTN","RORNTEG",58,0)
RORHL14 ;;5357488
"RTN","RORNTEG",59,0)
RORHL15 ;;3649245
"RTN","RORNTEG",60,0)
RORHL16 ;;3252430
"RTN","RORNTEG",61,0)
RORHL17 ;;4936158
"RTN","RORNTEG",62,0)
RORHL7 ;;4806448
"RTN","RORNTEG",63,0)
RORHL7A ;;4554021
"RTN","RORNTEG",64,0)
RORHLUT1 ;;1806943
"RTN","RORNTEG",65,0)
RORKIDS ;;6182684
"RTN","RORNTEG",66,0)
RORLOCK ;;4943216
"RTN","RORNTEG",67,0)
RORLOG ;;6030893
"RTN","RORNTEG",68,0)
RORLOG01 ;;3716383
"RTN","RORNTEG",69,0)
RORPUT01 ;;4800327
"RTN","RORNTEG",70,0)
RORPUT02 ;;5936706
"RTN","RORNTEG",71,0)
RORREP01 ;;9158405
"RTN","RORNTEG",72,0)
RORREP02 ;;10911089
"RTN","RORNTEG",73,0)
RORRP007 ;;4442755
"RTN","RORNTEG",74,0)
RORRP010 ;;1881192
"RTN","RORNTEG",75,0)
RORRP011 ;;2555508
"RTN","RORNTEG",76,0)
RORRP012 ;;1144389
"RTN","RORNTEG",77,0)
RORRP013 ;;4665100
"RTN","RORNTEG",78,0)
RORRP014 ;;2785597
"RTN","RORNTEG",79,0)
RORRP015 ;;3365112
"RTN","RORNTEG",80,0)
RORRP016 ;;6117318
"RTN","RORNTEG",81,0)
RORRP017 ;;1924388
"RTN","RORNTEG",82,0)
RORRP018 ;;1666201
"RTN","RORNTEG",83,0)
RORRP019 ;;6121598
"RTN","RORNTEG",84,0)
RORRP020 ;;4475572
"RTN","RORNTEG",85,0)
RORRP021 ;;3721454
"RTN","RORNTEG",86,0)
RORRP022 ;;1262090
"RTN","RORNTEG",87,0)
RORRP023 ;;2273081
"RTN","RORNTEG",88,0)
RORRP024 ;;3821351
"RTN","RORNTEG",89,0)
RORRP025 ;;4917408
"RTN","RORNTEG",90,0)
RORRP026 ;;10244091
"RTN","RORNTEG",91,0)
RORRP027 ;;6675003
"RTN","RORNTEG",92,0)
RORRP029 ;;1527601
"RTN","RORNTEG",93,0)
RORRP030 ;;1101835
"RTN","RORNTEG",94,0)
RORRP031 ;;4897990
"RTN","RORNTEG",95,0)
RORRP032 ;;5035421
"RTN","RORNTEG",96,0)
RORRP033 ;;2395118
"RTN","RORNTEG",97,0)
RORRP034 ;;3041648
"RTN","RORNTEG",98,0)
RORRP035 ;;1597804
"RTN","RORNTEG",99,0)
RORRP036 ;;1773818
"RTN","RORNTEG",100,0)
RORRP037 ;;2638742
"RTN","RORNTEG",101,0)
RORRP038 ;;4339809
"RTN","RORNTEG",102,0)
RORRP040 ;;4049054
"RTN","RORNTEG",103,0)
RORRP041 ;;2687037
"RTN","RORNTEG",104,0)
RORRP042 ;;2333070
"RTN","RORNTEG",105,0)
RORSET01 ;;4563146
"RTN","RORNTEG",106,0)
RORSETU1 ;;2833894
"RTN","RORNTEG",107,0)
RORSETU2 ;;2447593
"RTN","RORNTEG",108,0)
RORTMP ;;679112
"RTN","RORNTEG",109,0)
RORTSK ;;3964693
"RTN","RORNTEG",110,0)
RORTSK01 ;;7070947
"RTN","RORNTEG",111,0)
RORTSK02 ;;4523778
"RTN","RORNTEG",112,0)
RORTSK03 ;;2058050
"RTN","RORNTEG",113,0)
RORTSK10 ;;5996899
"RTN","RORNTEG",114,0)
RORTSK11 ;;3147053
"RTN","RORNTEG",115,0)
RORTSK12 ;;2274583
"RTN","RORNTEG",116,0)
RORTSK13 ;;6727870
"RTN","RORNTEG",117,0)
RORTSK14 ;;2157270
"RTN","RORNTEG",118,0)
RORTXT ;;141117
"RTN","RORNTEG",119,0)
RORUPD ;;3118364
"RTN","RORNTEG",120,0)
RORUPD01 ;;7989261
"RTN","RORNTEG",121,0)
RORUPD04 ;;5421758
"RTN","RORNTEG",122,0)
RORUPD05 ;;7081275
"RTN","RORNTEG",123,0)
RORUPD06 ;;3084967
"RTN","RORNTEG",124,0)
RORUPD07 ;;2356625
"RTN","RORNTEG",125,0)
RORUPD08 ;;4579765
"RTN","RORNTEG",126,0)
RORUPD09 ;;2869944
"RTN","RORNTEG",127,0)
RORUPD50 ;;3764045
"RTN","RORNTEG",128,0)
RORUPD51 ;;8479975
"RTN","RORNTEG",129,0)
RORUPD52 ;;2557167
"RTN","RORNTEG",130,0)
RORUPD62 ;;1941130
"RTN","RORNTEG",131,0)
RORUPDUT ;;7113425
"RTN","RORNTEG",132,0)
RORUPEX ;;3382608
"RTN","RORNTEG",133,0)
RORUPP01 ;;3620688
"RTN","RORNTEG",134,0)
RORUPP02 ;;3149282
"RTN","RORNTEG",135,0)
RORUPR ;;5364149
"RTN","RORNTEG",136,0)
RORUPR1 ;;10955587
"RTN","RORNTEG",137,0)
RORUTL01 ;;4692322
"RTN","RORNTEG",138,0)
RORUTL02 ;;5296575
"RTN","RORNTEG",139,0)
RORUTL03 ;;8066801
"RTN","RORNTEG",140,0)
RORUTL04 ;;2076790
"RTN","RORNTEG",141,0)
RORUTL05 ;;7047621
"RTN","RORNTEG",142,0)
RORUTL06 ;;10075666
"RTN","RORNTEG",143,0)
RORUTL07 ;;2099977
"RTN","RORNTEG",144,0)
RORUTL08 ;;3164502
"RTN","RORNTEG",145,0)
RORUTL09 ;;1836557
"RTN","RORNTEG",146,0)
RORUTL10 ;;5740794
"RTN","RORNTEG",147,0)
RORUTL11 ;;942933
"RTN","RORNTEG",148,0)
RORUTL14 ;;1375993
"RTN","RORNTEG",149,0)
RORUTL15 ;;6511088
"RTN","RORNTEG",150,0)
RORUTL16 ;;2364514
"RTN","RORNTEG",151,0)
RORUTL17 ;;6994520
"RTN","RORNTEG",152,0)
RORUTL18 ;;3250231
"RTN","RORNTEG",153,0)
RORUTL19 ;;1203624
"RTN","RORNTEG",154,0)
RORVM001 ;;609363
"RTN","RORNTEG",155,0)
RORX000 ;;2233772
"RTN","RORNTEG",156,0)
RORX001 ;;5778832
"RTN","RORNTEG",157,0)
RORX002 ;;3845106
"RTN","RORNTEG",158,0)
RORX003 ;;5545892
"RTN","RORNTEG",159,0)
RORX003A ;;7545014
"RTN","RORNTEG",160,0)
RORX004 ;;3369267
"RTN","RORNTEG",161,0)
RORX005 ;;1558283
"RTN","RORNTEG",162,0)
RORX005A ;;5728919
"RTN","RORNTEG",163,0)
RORX005B ;;2068516
"RTN","RORNTEG0")
0^41^B4460463^B4347507
"RTN","RORNTEG0",1,0)
RORNTEG0 ;ISC/XTSUMBLD KERNEL - Package checksum checker ; 7/19/06 12:36pm
"RTN","RORNTEG0",2,0)
 ;;0.0;;**1**;;Build 24
"RTN","RORNTEG0",3,0)
 ;;7.3;3060622.15354
"RTN","RORNTEG0",4,0)
 S XT4="I 1",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG0",5,0)
CONT F XT1=1:1 S XT2=$T(ROU+XT1) Q:XT2=""  S X=$P(XT2," ",1),XT3=$P(XT2,";",3) X XT4 I $T W !,X X ^%ZOSF("TEST") S:'$T XT3=0 X:XT3 ^%ZOSF("RSUM") W ?10,$S('XT3:"Routine not in UCI",XT3'=Y:"Calculated "_$C(7)_Y_", off by "_(Y-XT3),1:"ok")
"RTN","RORNTEG0",6,0)
 ;
"RTN","RORNTEG0",7,0)
 K %1,%2,%3,X,Y,XT1,XT2,XT3,XT4 Q
"RTN","RORNTEG0",8,0)
ONE S XT4="I $D(^UTILITY($J,X))",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG0",9,0)
 W !,"Check a subset of routines:" K ^UTILITY($J) X ^%ZOSF("RSEL")
"RTN","RORNTEG0",10,0)
 W ! G CONT
"RTN","RORNTEG0",11,0)
ROU ;;
"RTN","RORNTEG0",12,0)
RORX005C ;;6689502
"RTN","RORNTEG0",13,0)
RORX006 ;;1957749
"RTN","RORNTEG0",14,0)
RORX006A ;;4045076
"RTN","RORNTEG0",15,0)
RORX006C ;;4479620
"RTN","RORNTEG0",16,0)
RORX007 ;;6378955
"RTN","RORNTEG0",17,0)
RORX007A ;;2467042
"RTN","RORNTEG0",18,0)
RORX008 ;;2076427
"RTN","RORNTEG0",19,0)
RORX008A ;;7092822
"RTN","RORNTEG0",20,0)
RORX009 ;;3203627
"RTN","RORNTEG0",21,0)
RORX009A ;;10011538
"RTN","RORNTEG0",22,0)
RORX009C ;;9417785
"RTN","RORNTEG0",23,0)
RORX010 ;;6851839
"RTN","RORNTEG0",24,0)
RORX011 ;;8741230
"RTN","RORNTEG0",25,0)
RORX012 ;;3000028
"RTN","RORNTEG0",26,0)
RORX012A ;;10697075
"RTN","RORNTEG0",27,0)
RORX013 ;;1815134
"RTN","RORNTEG0",28,0)
RORX013A ;;7019975
"RTN","RORNTEG0",29,0)
RORX013C ;;3235328
"RTN","RORNTEG0",30,0)
RORX014 ;;2137320
"RTN","RORNTEG0",31,0)
RORX014A ;;6097645
"RTN","RORNTEG0",32,0)
RORX015 ;;2476351
"RTN","RORNTEG0",33,0)
RORX015A ;;8934895
"RTN","RORNTEG0",34,0)
RORX015C ;;5096395
"RTN","RORNTEG0",35,0)
RORX016 ;;1551044
"RTN","RORNTEG0",36,0)
RORX016A ;;2574228
"RTN","RORNTEG0",37,0)
RORX016B ;;2976507
"RTN","RORNTEG0",38,0)
RORX016C ;;4657732
"RTN","RORNTEG0",39,0)
RORXU001 ;;2567828
"RTN","RORNTEG0",40,0)
RORXU002 ;;7826593
"RTN","RORNTEG0",41,0)
RORXU003 ;;5929587
"RTN","RORNTEG0",42,0)
RORXU004 ;;405249
"RTN","RORNTEG0",43,0)
RORXU005 ;;3236020
"RTN","RORNTEG0",44,0)
RORXU006 ;;5450262
"RTN","RORNTEG0",45,0)
RORXU007 ;;6706394
"RTN","RORNTEG0",46,0)
RORXU008 ;;2215188
"RTN","RORP000")
1^16^^B65292418
"RTN","RORP000A")
1^17^^B50265344
"RTN","RORP000B")
1^18^^B67791275
"RTN","RORP001")
0^^B5732732^n/a
"RTN","RORP001",1,0)
RORP001 ;HCIOFO/SG - PATCH ROR*1.5*1 INSTALLATION ROUTINE ; 7/18/06 9:38am
"RTN","RORP001",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORP001",3,0)
 ;
"RTN","RORP001",4,0)
 ;***** ENVIRONMENT CHECK
"RTN","RORP001",5,0)
 N RC
"RTN","RORP001",6,0)
 ;--- Check the User ID
"RTN","RORP001",7,0)
 I $G(DUZ)'>0  D  S XPDABORT=2  Q
"RTN","RORP001",8,0)
 . W !!,"The DUZ variable must be defined!",!
"RTN","RORP001",9,0)
 ;--- Check the required security key
"RTN","RORP001",10,0)
 I '$D(^XUSEC("ROR VA IRM",DUZ))  D  S XPDABORT=2  Q
"RTN","RORP001",11,0)
 . W !!,"You must have the ROR VA IRM security key!",!
"RTN","RORP001",12,0)
 ;
"RTN","RORP001",13,0)
 ;=== Installation section
"RTN","RORP001",14,0)
 Q:'$G(XPDENV)
"RTN","RORP001",15,0)
 ;--- Check the scheduled option
"RTN","RORP001",16,0)
 I $$CHKOPT^RORKIDS("ROR TASK")<0  S XPDABORT=2  Q
"RTN","RORP001",17,0)
 ;--- Override the "Want to DISABLE Options, and Protocols?" question
"RTN","RORP001",18,0)
 S XPDDIQ("XPZ1")=0
"RTN","RORP001",19,0)
 Q
"RTN","RORP001",20,0)
 ;
"RTN","RORP001",21,0)
 ;***** ERROR PROCESSING
"RTN","RORP001",22,0)
ERROR ;
"RTN","RORP001",23,0)
 N TMP  S XPDABORT=1
"RTN","RORP001",24,0)
 I $D(ZTQUEUED)  D  D ALERT^RORKIDS(DUZ,-43,REGNAME,,TMP)
"RTN","RORP001",25,0)
 . S TMP=+$G(RORPARM("KIDS"))
"RTN","RORP001",26,0)
 . S TMP=$S(TMP=1:"pre-",TMP=2:"post-",1:"")_"install"
"RTN","RORP001",27,0)
 D DSPSTK^RORERR(),ABTMSG^RORKIDS()
"RTN","RORP001",28,0)
 Q
"RTN","RORP001",29,0)
 ;
"RTN","RORP001",30,0)
 ;***** POST-INSTALL ENTRY POINT
"RTN","RORP001",31,0)
POS ;
"RTN","RORP001",32,0)
 N RORERROR      ; Error processing data
"RTN","RORP001",33,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","RORP001",34,0)
 N RORPARM       ; Application parameters
"RTN","RORP001",35,0)
 ;
"RTN","RORP001",36,0)
 N DA,RC,RORHIV,TMP
"RTN","RORP001",37,0)
 S RORPARM("DEVELOPER")=1   ; Enable modifications
"RTN","RORP001",38,0)
 S RORPARM("ERR")=1         ; Enable error processing
"RTN","RORP001",39,0)
 S RORPARM("KIDS")=2        ; Post-install indicator
"RTN","RORP001",40,0)
 S RORPARM("LOG")=1         ; Enable log recording
"RTN","RORP001",41,0)
 ;
"RTN","RORP001",42,0)
 ;--- Open a new log
"RTN","RORP001",43,0)
 K TMP  S TMP("VA HIV")=""
"RTN","RORP001",44,0)
 S TMP=$$OPEN^RORLOG(.TMP,0,XPDNM_" POST-INSTALL STARTED")
"RTN","RORP001",45,0)
 K TMP
"RTN","RORP001",46,0)
 ;
"RTN","RORP001",47,0)
 ;--- Initialize variables
"RTN","RORP001",48,0)
 S RORHIV=$$REGIEN^RORUTL02("VA HIV")  G:RORHIV<0 ERROR
"RTN","RORP001",49,0)
 S RORHIV=RORHIV_U_"VA HIV"
"RTN","RORP001",50,0)
 ;
"RTN","RORP001",51,0)
 ;--- ROR GENERIC DRUG file (#799.51)
"RTN","RORP001",52,0)
 G:$$CP^RORKIDS("POS05","$$RS79951^RORPUT02")<0 ERROR
"RTN","RORP001",53,0)
 ;
"RTN","RORP001",54,0)
 ;--- Restore the CDC definition
"RTN","RORP001",55,0)
 G:$$CP^RORKIDS("POS10","$$CDCDEF^RORPUT01")<0 ERROR
"RTN","RORP001",56,0)
 ;
"RTN","RORP001",57,0)
 ;--- Restore predefined report templates
"RTN","RORP001",58,0)
 G:$$CP^RORKIDS("POS15","$$RSPRT^RORPUT02")<0 ERROR
"RTN","RORP001",59,0)
 ;
"RTN","RORP001",60,0)
 ;--- Close the log
"RTN","RORP001",61,0)
 D CLOSE^RORLOG(XPDNM_" POST-INSTALL COMPLETED")
"RTN","RORP001",62,0)
 Q
"RTN","RORP001",63,0)
 ;
"RTN","RORP001",64,0)
 ;***** PRE-TRANSPORTATION ENTRY POINT
"RTN","RORP001",65,0)
PTR ;
"RTN","RORP001",66,0)
 N RORBUF,TMP
"RTN","RORP001",67,0)
 ;--- Copy the CDC definition to the transport global
"RTN","RORP001",68,0)
 D GETPARM^RORRP038(.RORBUF,"ICRCDCDEF","PKG")
"RTN","RORP001",69,0)
 K RORBUF(0)  M @XPDGREF@("RORCDCDEF")=RORBUF
"RTN","RORP001",70,0)
 ;--- Load the records of the ROR GENERIG DRUG file
"RTN","RORP001",71,0)
 D LD79951^RORPUT02()
"RTN","RORP001",72,0)
 ;--- Load predefined report templates
"RTN","RORP001",73,0)
 D LDPRT^RORPUT02()
"RTN","RORP001",74,0)
 Q
"RTN","RORPUT01")
0^28^B26910260^B36828175
"RTN","RORPUT01",1,0)
RORPUT01 ;HCIOFO/SG - EDIT LOINC AND DRUG CODE MULTIPLES ; 5/19/06 11:48am
"RTN","RORPUT01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORPUT01",3,0)
 ;
"RTN","RORPUT01",4,0)
 Q
"RTN","RORPUT01",5,0)
 ;
"RTN","RORPUT01",6,0)
 ;***** ADDS THE RECORDS TO THE MULTIPLE
"RTN","RORPUT01",7,0)
 ;
"RTN","RORPUT01",8,0)
 ; REGIEN        Registry IEN
"RTN","RORPUT01",9,0)
 ; SUBFILE       Subfile number
"RTN","RORPUT01",10,0)
 ; LSTREF        Reference to a list or the list itself (see the
"RTN","RORPUT01",11,0)
 ;               $$COMPNEXT^RORPUT01 function for more details).
"RTN","RORPUT01",12,0)
 ;
"RTN","RORPUT01",13,0)
 ; Return Values:
"RTN","RORPUT01",14,0)
 ;       <0  Error code
"RTN","RORPUT01",15,0)
 ;        0  Ok
"RTN","RORPUT01",16,0)
 ;
"RTN","RORPUT01",17,0)
ADD(REGIEN,SUBFILE,LSTREF) ;
"RTN","RORPUT01",18,0)
 N BUF,IENS,ITEM,LI,NEXT,RC,RORFDA,RORMSG,TLI
"RTN","RORPUT01",19,0)
 S NEXT=$$COMPNEXT(LSTREF)  Q:NEXT<0 NEXT
"RTN","RORPUT01",20,0)
 S IENS="?+1,"_(+REGIEN)_",",RC=0
"RTN","RORPUT01",21,0)
 F TLI=1:1  X NEXT  Q:$G(BUF)'[";;"  D  Q:RC<0
"RTN","RORPUT01",22,0)
 . S BUF=$P(BUF,";;",2)
"RTN","RORPUT01",23,0)
 . D MES^RORKIDS(BUF)
"RTN","RORPUT01",24,0)
 . S BUF=$TR(BUF," ")
"RTN","RORPUT01",25,0)
 . F LI=1:1  S ITEM=$P(BUF,",",LI)  Q:ITEM=""  D  Q:RC<0
"RTN","RORPUT01",26,0)
 . . S RORFDA(SUBFILE,IENS,.01)=ITEM
"RTN","RORPUT01",27,0)
 . . D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORPUT01",28,0)
 . . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,SUBFILE,IENS)
"RTN","RORPUT01",29,0)
 Q RC
"RTN","RORPUT01",30,0)
 ;
"RTN","RORPUT01",31,0)
 ;***** RESTORES THE CDC DEFINITION
"RTN","RORPUT01",32,0)
 ;
"RTN","RORPUT01",33,0)
 ; Return Values:
"RTN","RORPUT01",34,0)
 ;       <0  Error code
"RTN","RORPUT01",35,0)
 ;        0  Ok
"RTN","RORPUT01",36,0)
 ;
"RTN","RORPUT01",37,0)
CDCDEF() ;
"RTN","RORPUT01",38,0)
 N RC,RESULTS,RORBUF
"RTN","RORPUT01",39,0)
 D BMES^RORKIDS("Restoring the CDC definition...")
"RTN","RORPUT01",40,0)
 ;--- Restore the definition from the transport global
"RTN","RORPUT01",41,0)
 M RORBUF=@XPDGREF@("RORCDCDEF")
"RTN","RORPUT01",42,0)
 S RORBUF="HIV CDC Form Template"
"RTN","RORPUT01",43,0)
 D SETPARM^RORRP038(.RESULTS,"ICRCDCDEF","PKG",.RORBUF)
"RTN","RORPUT01",44,0)
 Q:$G(RESULTS(0))<0 +RESULTS(0)
"RTN","RORPUT01",45,0)
 ;--- Success
"RTN","RORPUT01",46,0)
 D MES^RORKIDS("The definition has been restored successfully.")
"RTN","RORPUT01",47,0)
 Q 0
"RTN","RORPUT01",48,0)
 ;
"RTN","RORPUT01",49,0)
 ;***** COMPILES THE 'NEXT' LOGIC
"RTN","RORPUT01",50,0)
 ;
"RTN","RORPUT01",51,0)
 ; PARAM         Parameter defining the list of codes. It should be
"RTN","RORPUT01",52,0)
 ;               either a list of codes separated by commas or a full
"RTN","RORPUT01",53,0)
 ;               reference (TAG^ROUTINE) to a routine label after
"RTN","RORPUT01",54,0)
 ;               which the list is located. In the latter case, the
"RTN","RORPUT01",55,0)
 ;               list itself should look like this:
"RTN","RORPUT01",56,0)
 ;
"RTN","RORPUT01",57,0)
 ;                         ;
"RTN","RORPUT01",58,0)
 ;                         ;***** SHORT DESCRIPTION OF THE LIST
"RTN","RORPUT01",59,0)
 ;                 LABEL   ;
"RTN","RORPUT01",60,0)
 ;                         ;;  Code1, Code2, ...
"RTN","RORPUT01",61,0)
 ;                         ;;  CodeN, ...
"RTN","RORPUT01",62,0)
 ;                         ;
"RTN","RORPUT01",63,0)
 ;
"RTN","RORPUT01",64,0)
 ;               There should be at least one line that does not
"RTN","RORPUT01",65,0)
 ;               contain ";;" after the list (or no lines at all).
"RTN","RORPUT01",66,0)
 ;
"RTN","RORPUT01",67,0)
 ; Return Values:
"RTN","RORPUT01",68,0)
 ;       <0  Error code
"RTN","RORPUT01",69,0)
 ;       ""  The list is empty
"RTN","RORPUT01",70,0)
 ;     '=""  A string that should be XECUTE'd to get the next
"RTN","RORPUT01",71,0)
 ;           buffer with the list data
"RTN","RORPUT01",72,0)
 ;
"RTN","RORPUT01",73,0)
COMPNEXT(PARAM) ;
"RTN","RORPUT01",74,0)
 N I,N,NEXT,RC  Q:PARAM?." " ""
"RTN","RORPUT01",75,0)
 ;--- Reference to a routine label
"RTN","RORPUT01",76,0)
 I PARAM?1.8UN1"^"1.8UN  D  Q NEXT
"RTN","RORPUT01",77,0)
 . S NEXT="S BUF=$T("_$P(PARAM,U)_"+TLI"_U_$P(PARAM,U,2)_")"
"RTN","RORPUT01",78,0)
 ;--- List of codes separated by commas
"RTN","RORPUT01",79,0)
 S N=$L(PARAM,","),RC=0
"RTN","RORPUT01",80,0)
 F I=1:1:N  I '($P(PARAM,",",I)?." "1.N." ")  S RC=-88  Q
"RTN","RORPUT01",81,0)
 I RC<0,I=N  S:$P(PARAM,",",N)?." " RC=0,N=N-1
"RTN","RORPUT01",82,0)
 I N>0,RC'<0  D  Q NEXT
"RTN","RORPUT01",83,0)
 . S NEXT="S BUF=$P("""_";;"_$P(PARAM,",",1,N)_""",U,TLI)"
"RTN","RORPUT01",84,0)
 ;--- Invalid parameter
"RTN","RORPUT01",85,0)
 Q $$ERROR^RORERR(-88,,,,"List of Codes",PARAM)
"RTN","RORPUT01",86,0)
 ;
"RTN","RORPUT01",87,0)
 ;***** ADDS ITEMS TO 'EXTRACTED RESULT' MULTIPLE OF FILE #798.1
"RTN","RORPUT01",88,0)
 ;
"RTN","RORPUT01",89,0)
 ; [RORREG]      Registry IEN and registry name separated by the '^'
"RTN","RORPUT01",90,0)
 ;               (RegistryIEN^RegistryName).
"RTN","RORPUT01",91,0)
 ;
"RTN","RORPUT01",92,0)
 ; [RORLNCAD]    Either a list of LOINC codes (without check digits)
"RTN","RORPUT01",93,0)
 ;               separated by commas or a full reference (TAG^ROUTINE)
"RTN","RORPUT01",94,0)
 ;               to a routine label after which the list is located.
"RTN","RORPUT01",95,0)
 ;
"RTN","RORPUT01",96,0)
 ;               All spaces are removed from the lines of the list.
"RTN","RORPUT01",97,0)
 ;               See the $$COMPNEXT^RORPUT01 function for more
"RTN","RORPUT01",98,0)
 ;               details.
"RTN","RORPUT01",99,0)
 ;
"RTN","RORPUT01",100,0)
 ; If some of these parameters are omitted or equal to an empty
"RTN","RORPUT01",101,0)
 ; strings, their values must be defined as the RORPARM("KIDS")
"RTN","RORPUT01",102,0)
 ; sub-nodes of the same name.
"RTN","RORPUT01",103,0)
 ;
"RTN","RORPUT01",104,0)
 ; Return Values:
"RTN","RORPUT01",105,0)
 ;       <0  Error code
"RTN","RORPUT01",106,0)
 ;        0  Ok
"RTN","RORPUT01",107,0)
 ;
"RTN","RORPUT01",108,0)
LOINCADD(RORREG,RORLNCAD) ;
"RTN","RORPUT01",109,0)
 N RC
"RTN","RORPUT01",110,0)
 D BMES^RORKIDS("Adding new LOINC codes to the EXTRACTED RESULT multiple...")
"RTN","RORPUT01",111,0)
 ;--- Get the parameters
"RTN","RORPUT01",112,0)
 S:'$G(RORREG) RORREG=$$PARAM^RORKIDS("RORREG")
"RTN","RORPUT01",113,0)
 S:$G(RORLNCAD)="" RORLNCAD=$$PARAM^RORKIDS("RORLNCAD")
"RTN","RORPUT01",114,0)
 ;--- Add new LOINC codes
"RTN","RORPUT01",115,0)
 S RC=$$ADD(+RORREG,798.112,RORLNCAD)  Q:RC<0 RC
"RTN","RORPUT01",116,0)
 ;--- Success
"RTN","RORPUT01",117,0)
 D MES^RORKIDS("The LOINC list has been updated successfully.")
"RTN","RORPUT01",118,0)
 Q 0
"RTN","RORPUT01",119,0)
 ;
"RTN","RORPUT01",120,0)
 ;***** REMOVES ITEMS FROM 'EXTRACTED RESULT' MULTIPLE OF FILE #798.1
"RTN","RORPUT01",121,0)
 ;
"RTN","RORPUT01",122,0)
 ; [RORREG]      Registry IEN and registry name separated by the '^'
"RTN","RORPUT01",123,0)
 ;               (RegistryIEN^RegistryName).
"RTN","RORPUT01",124,0)
 ;
"RTN","RORPUT01",125,0)
 ; [RORLNCRM]    Either a list of LOINC codes (without check digits)
"RTN","RORPUT01",126,0)
 ;               separated by commas or a full reference (TAG^ROUTINE)
"RTN","RORPUT01",127,0)
 ;               to a routine label after which the list is located.
"RTN","RORPUT01",128,0)
 ;
"RTN","RORPUT01",129,0)
 ;               All spaces are removed from the lines of the list.
"RTN","RORPUT01",130,0)
 ;               See the $$COMPNEXT^RORPUT01 function for more
"RTN","RORPUT01",131,0)
 ;               details.
"RTN","RORPUT01",132,0)
 ;
"RTN","RORPUT01",133,0)
 ; If some of these parameters are omitted or equal to an empty
"RTN","RORPUT01",134,0)
 ; strings, their values must be defined as the RORPARM("KIDS")
"RTN","RORPUT01",135,0)
 ; sub-nodes of the same name.
"RTN","RORPUT01",136,0)
 ;
"RTN","RORPUT01",137,0)
 ; Return Values:
"RTN","RORPUT01",138,0)
 ;       <0  Error code
"RTN","RORPUT01",139,0)
 ;        0  Ok
"RTN","RORPUT01",140,0)
 ;
"RTN","RORPUT01",141,0)
LOINCREM(RORREG,RORLNCRM) ;
"RTN","RORPUT01",142,0)
 N BUF,DA,DIK,IENS,IR,LCI,LOINC,NEXT,RC,RORBUF,RORMSG,TLI
"RTN","RORPUT01",143,0)
 D BMES^RORKIDS("Removing obsolete codes from the EXTRACTED RESULT multiple...")
"RTN","RORPUT01",144,0)
 ;--- Get the parameters
"RTN","RORPUT01",145,0)
 S:'$G(RORREG) RORREG=$$PARAM^RORKIDS("RORREG")
"RTN","RORPUT01",146,0)
 S:$G(RORLNCRM)="" RORLNCRM=$$PARAM^RORKIDS("RORLNCRM")
"RTN","RORPUT01",147,0)
 ;--- Delete unnecessary LOINC codes
"RTN","RORPUT01",148,0)
 S RC=$$REMOVE(+RORREG,798.112,RORLNCRM)  Q:RC<0 RC
"RTN","RORPUT01",149,0)
 ;--- Success
"RTN","RORPUT01",150,0)
 D MES^RORKIDS("The LOINC list has been updated successfully.")
"RTN","RORPUT01",151,0)
 Q 0
"RTN","RORPUT01",152,0)
 ;
"RTN","RORPUT01",153,0)
 ;***** REMOVES THE RECORDS FROM THE MULTIPLE
"RTN","RORPUT01",154,0)
 ;
"RTN","RORPUT01",155,0)
 ; REGIEN        Registry IEN
"RTN","RORPUT01",156,0)
 ; SUBFILE       Subfile number
"RTN","RORPUT01",157,0)
 ; LSTREF        Reference to a list or the list itself (see the
"RTN","RORPUT01",158,0)
 ;               $$COMPNEXT^RORPUT01 function for more details).
"RTN","RORPUT01",159,0)
 ;
"RTN","RORPUT01",160,0)
 ; Return Values:
"RTN","RORPUT01",161,0)
 ;       <0  Error code
"RTN","RORPUT01",162,0)
 ;        0  Ok
"RTN","RORPUT01",163,0)
 ;
"RTN","RORPUT01",164,0)
REMOVE(REGIEN,SUBFILE,LSTREF) ;
"RTN","RORPUT01",165,0)
 N BUF,DA,DIK,IENS,IR,ITEM,LI,NEXT,RC,RORBUF,RORMSG,TLI
"RTN","RORPUT01",166,0)
 S NEXT=$$COMPNEXT(LSTREF)  Q:NEXT<0 NEXT
"RTN","RORPUT01",167,0)
 S IENS=","_(+REGIEN)_",",RC=0
"RTN","RORPUT01",168,0)
 F TLI=1:1  X NEXT  Q:$G(BUF)'[";;"  D  Q:RC<0
"RTN","RORPUT01",169,0)
 . S BUF=$P(BUF,";;",2)
"RTN","RORPUT01",170,0)
 . D MES^RORKIDS(BUF)
"RTN","RORPUT01",171,0)
 . S BUF=$TR(BUF," ")
"RTN","RORPUT01",172,0)
 . F LI=1:1  S ITEM=$P(BUF,",",LI)  Q:ITEM=""  D  Q:RC<0
"RTN","RORPUT01",173,0)
 . . K RORBUF
"RTN","RORPUT01",174,0)
 . . D FIND^DIC(SUBFILE,IENS,"@","QX",ITEM,,"B",,,"RORBUF","RORMSG")
"RTN","RORPUT01",175,0)
 . . I $G(DIERR)  S RC=$$DBS^RORERR("RORMSG",-9,,,SUBFILE,IENS)  Q
"RTN","RORPUT01",176,0)
 . . S IR="",DIK=$$ROOT^DILFD(SUBFILE,IENS),DA(1)=+REGIEN
"RTN","RORPUT01",177,0)
 . . F  S IR=$O(RORBUF("DILIST",2,IR))  Q:IR=""  D
"RTN","RORPUT01",178,0)
 . . . S DA=RORBUF("DILIST",2,IR)  D ^DIK
"RTN","RORPUT01",179,0)
 Q RC
"RTN","RORPUT01",180,0)
 ;
"RTN","RORPUT01",181,0)
 ;***** UPDATES (POPULATES) THE LOCAL REGISTRY
"RTN","RORPUT01",182,0)
 ;
"RTN","RORPUT01",183,0)
 ; [RORREG]      Registry IEN and registry name separated by the '^'
"RTN","RORPUT01",184,0)
 ;               (RegistryIEN^RegistryName).
"RTN","RORPUT01",185,0)
 ; [MAXNTSK]     Maximum number of registry update subtasks
"RTN","RORPUT01",186,0)
 ; [SUSPEND]     Suspend update (sub)tasks during the peak hours
"RTN","RORPUT01",187,0)
 ;               (StartTime^EndTime)
"RTN","RORPUT01",188,0)
 ;
"RTN","RORPUT01",189,0)
 ; If some of these parameters are omitted or equal to an empty
"RTN","RORPUT01",190,0)
 ; strings, their values must be defined as the RORPARM("KIDS")
"RTN","RORPUT01",191,0)
 ; sub-nodes of the same name.
"RTN","RORPUT01",192,0)
 ;
"RTN","RORPUT01",193,0)
 ; Return Values:
"RTN","RORPUT01",194,0)
 ;       <0  Error code
"RTN","RORPUT01",195,0)
 ;        0  Ok
"RTN","RORPUT01",196,0)
 ;
"RTN","RORPUT01",197,0)
UPDATE(RORREG,MAXNTSK,SUSPEND) ;
"RTN","RORPUT01",198,0)
 N EC,REGLST
"RTN","RORPUT01",199,0)
 D BMES^RORKIDS("Updating the local registry...")
"RTN","RORPUT01",200,0)
 ;--- Get the parameters
"RTN","RORPUT01",201,0)
 S:'$G(RORREG) RORREG=$$PARAM^RORKIDS("RORREG")
"RTN","RORPUT01",202,0)
 S:RORREG REGLST($P(RORREG,U,2))=+RORREG
"RTN","RORPUT01",203,0)
 S:$G(MAXNTSK)="" MAXNTSK=$$PARAM^RORKIDS("MAXNTSK")
"RTN","RORPUT01",204,0)
 S:$G(SUSPEND)="" SUSPEND=$$PARAM^RORKIDS("SUSPEND")
"RTN","RORPUT01",205,0)
 ;--- Update the registry
"RTN","RORPUT01",206,0)
 S RC=$$UPDATE^RORUPD(.REGLST,,MAXNTSK,SUSPEND)  Q:RC<0 RC
"RTN","RORPUT01",207,0)
 ;--- Success
"RTN","RORPUT01",208,0)
 D MES^RORKIDS("Registry update completed.")
"RTN","RORPUT01",209,0)
 Q 0
"RTN","RORRP015")
0^6^B22232247^B22373114
"RTN","RORRP015",1,0)
RORRP015 ;HCIOFO/SG - RPC: DIVISIONS AND HOSPITAL LOCATIONS ; 3/13/06 9:25am
"RTN","RORRP015",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORRP015",3,0)
 ;
"RTN","RORRP015",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP015",5,0)
 ;
"RTN","RORRP015",6,0)
 ; #1246         WIN^DGPMDDCF (supported)
"RTN","RORRP015",7,0)
 ; #2438         Access to the file #40.8 (controlled)
"RTN","RORRP015",8,0)
 ; #10040        Access to the HOSPITAL LOCATION file (supported)
"RTN","RORRP015",9,0)
 ;
"RTN","RORRP015",10,0)
 Q
"RTN","RORRP015",11,0)
 ;
"RTN","RORRP015",12,0)
 ;***** CHECKS IF THE HOSPITAL LOCATION IS ACTIVE
"RTN","RORRP015",13,0)
 ;
"RTN","RORRP015",14,0)
 ; LOCIEN        IEN of the hospital location
"RTN","RORRP015",15,0)
 ;
"RTN","RORRP015",16,0)
ACTLOC(LOCIEN) ;
"RTN","RORRP015",17,0)
 N D0,DGPMOS,RDT,X
"RTN","RORRP015",18,0)
 Q:$G(^SC(LOCIEN,"OOS")) 0              ; An OOS entry
"RTN","RORRP015",19,0)
 S D0=+$G(^SC(LOCIEN,42))
"RTN","RORRP015",20,0)
 I D0>0  D WIN^DGPMDDCF  Q 'X           ; Check if ward is inactive
"RTN","RORRP015",21,0)
 S X=$G(^SC(LOCIEN,"I"))  Q:'$P(X,U) 1  ; No inactivation date
"RTN","RORRP015",22,0)
 S RDT=+$P(X,U,2)
"RTN","RORRP015",23,0)
 I DT>$P(X,U)  Q:'RDT!(DT<RDT) 0        ; Check reactivation date
"RTN","RORRP015",24,0)
 Q 1
"RTN","RORRP015",25,0)
 ;
"RTN","RORRP015",26,0)
 ;***** RETURNS THE LIST OF DIVISIONS
"RTN","RORRP015",27,0)
 ; RPC: [ROR LIST DIVISIONS]
"RTN","RORRP015",28,0)
 ;
"RTN","RORRP015",29,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP015",30,0)
 ;               are returned to.
"RTN","RORRP015",31,0)
 ;
"RTN","RORRP015",32,0)
 ; [PART]        The partial match restriction.
"RTN","RORRP015",33,0)
 ;
"RTN","RORRP015",34,0)
 ; [FLAGS]       Flags that control the execution (can be combined)
"RTN","RORRP015",35,0)
 ;                 B  Backwards. Traverses the index in the opposite
"RTN","RORRP015",36,0)
 ;                    direction of normal traversal.
"RTN","RORRP015",37,0)
 ;
"RTN","RORRP015",38,0)
 ; [NUMBER]      Maximum number of entries to return. A value of "*"
"RTN","RORRP015",39,0)
 ;               or no value in this parameter designates all entries.
"RTN","RORRP015",40,0)
 ;
"RTN","RORRP015",41,0)
 ; [FROM]        The index entry(s) from which to begin the list
"RTN","RORRP015",42,0)
 ;                 ^01: FromName
"RTN","RORRP015",43,0)
 ;                 ^02: FromIEN
"RTN","RORRP015",44,0)
 ;
"RTN","RORRP015",45,0)
 ;               For example, a FROM value of "VA" would list entries
"RTN","RORRP015",46,0)
 ;               following VA. You can use the 2-nd and 3-rd "^"-
"RTN","RORRP015",47,0)
 ;               pieces of the @RESULTS@(0) node to continue the
"RTN","RORRP015",48,0)
 ;               listing in the subsequent procedure calls.
"RTN","RORRP015",49,0)
 ;
"RTN","RORRP015",50,0)
 ;               NOTE: The FROM value itself is not included in
"RTN","RORRP015",51,0)
 ;                     the resulting list.
"RTN","RORRP015",52,0)
 ;
"RTN","RORRP015",53,0)
 ; The ^TMP("DILIST",$J) global node is used by the procedure.
"RTN","RORRP015",54,0)
 ;
"RTN","RORRP015",55,0)
 ; See description of the LIST^DIC for more details about the
"RTN","RORRP015",56,0)
 ; PART, NUMBER and FROM parameters.
"RTN","RORRP015",57,0)
 ;
"RTN","RORRP015",58,0)
 ; Return Values:
"RTN","RORRP015",59,0)
 ;
"RTN","RORRP015",60,0)
 ; A negative value of the first "^"-piece of the @RESULTS@(0)
"RTN","RORRP015",61,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP015",62,0)
 ; details).
"RTN","RORRP015",63,0)
 ;
"RTN","RORRP015",64,0)
 ; Otherwise, number of divisions and the value of the FROM parameter
"RTN","RORRP015",65,0)
 ; for the next procedure call are returned in the @RESULTS@(0) and
"RTN","RORRP015",66,0)
 ; the subsequent nodes of the global array contain the divisions.
"RTN","RORRP015",67,0)
 ; 
"RTN","RORRP015",68,0)
 ; @RESULTS@(0)          Result Descriptor
"RTN","RORRP015",69,0)
 ;                         ^01: Number of divisions
"RTN","RORRP015",70,0)
 ;                         ^02: FromName
"RTN","RORRP015",71,0)
 ;                         ^03: FromIEN
"RTN","RORRP015",72,0)
 ;
"RTN","RORRP015",73,0)
 ; @RESULTS@(i)          Division
"RTN","RORRP015",74,0)
 ;                         ^01: IEN
"RTN","RORRP015",75,0)
 ;                         ^02: Name
"RTN","RORRP015",76,0)
 ;                         ^03: Facility Number
"RTN","RORRP015",77,0)
 ;                         ^04: Institution IEN
"RTN","RORRP015",78,0)
 ;
"RTN","RORRP015",79,0)
DIVLIST(RESULTS,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP015",80,0)
 N BUF,RC,RORERRDL,RORMSG,TMP
"RTN","RORRP015",81,0)
 D CLEAR^RORERR("DIVLIST^RORRP015",1)
"RTN","RORRP015",82,0)
 K RESULTS  S RESULTS=$NA(^TMP("DILIST",$J))  K @RESULTS
"RTN","RORRP015",83,0)
 ;--- Check the parameters
"RTN","RORRP015",84,0)
 S PART=$G(PART),FLAGS=$G(FLAGS)
"RTN","RORRP015",85,0)
 S NUMBER=$S($G(NUMBER)>0:+NUMBER,1:"*")
"RTN","RORRP015",86,0)
 ;--- Setup the start point
"RTN","RORRP015",87,0)
 I $G(FROM)'=""  D  S FROM=$P(FROM,U)
"RTN","RORRP015",88,0)
 . S:$P(FROM,U,2)>0 FROM("IEN")=+$P(FROM,U,2)
"RTN","RORRP015",89,0)
 ;--- Get the list of divisions
"RTN","RORRP015",90,0)
 S BUF="@;.01;1;.07I",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP015",91,0)
 D LIST^DIC(40.8,,BUF,TMP,NUMBER,.FROM,PART,"B",,,,"RORMSG")
"RTN","RORRP015",92,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP015",93,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,40.8)
"RTN","RORRP015",94,0)
 . K ^TMP("DILIST",$J)
"RTN","RORRP015",95,0)
 ;--- Success
"RTN","RORRP015",96,0)
 S TMP=$G(^TMP("DILIST",$J,0)),BUF=+$P(TMP,U)
"RTN","RORRP015",97,0)
 K ^TMP("DILIST",$J,0)
"RTN","RORRP015",98,0)
 S:$P(TMP,U,3) $P(BUF,U,2,3)=$G(FROM)_U_$G(FROM("IEN"))
"RTN","RORRP015",99,0)
 S @RESULTS@(0)=BUF
"RTN","RORRP015",100,0)
 Q
"RTN","RORRP015",101,0)
 ;
"RTN","RORRP015",102,0)
 ;***** RETURNS THE LIST OF HOSPITAL LOCATIONS
"RTN","RORRP015",103,0)
 ; RPC: [ROR LIST HOSPITAL LOCATIONS]
"RTN","RORRP015",104,0)
 ;
"RTN","RORRP015",105,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP015",106,0)
 ;               are returned to.
"RTN","RORRP015",107,0)
 ;
"RTN","RORRP015",108,0)
 ; [HLTYPES]     List of location types separated by commas (internal
"RTN","RORRP015",109,0)
 ;               values of the TYPE field of the HOSPITAL LOCATION
"RTN","RORRP015",110,0)
 ;               file). Only locations of the types defined by this
"RTN","RORRP015",111,0)
 ;               parameter are selected by the procedure. By default
"RTN","RORRP015",112,0)
 ;               ($G(HLTYPES)=""), all locations are selected.
"RTN","RORRP015",113,0)
 ;
"RTN","RORRP015",114,0)
 ; [DIVIEN]      Division IEN. If this parameter is defined and
"RTN","RORRP015",115,0)
 ;               greater than zero then only the locations associated 
"RTN","RORRP015",116,0)
 ;               with this division will be selected.
"RTN","RORRP015",117,0)
 ;
"RTN","RORRP015",118,0)
 ; [PART]        The partial match restriction.
"RTN","RORRP015",119,0)
 ;
"RTN","RORRP015",120,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORRP015",121,0)
 ;                 A  Include active locations (default)
"RTN","RORRP015",122,0)
 ;                 B  Backwards. Traverses the index in the opposite
"RTN","RORRP015",123,0)
 ;                    direction of normal traversal.
"RTN","RORRP015",124,0)
 ;                 I  Include inactive locations
"RTN","RORRP015",125,0)
 ;
"RTN","RORRP015",126,0)
 ; [NUMBER]      Maximum number of entries to return. A value of "*"
"RTN","RORRP015",127,0)
 ;               or no value in this parameter designates all entries.
"RTN","RORRP015",128,0)
 ;
"RTN","RORRP015",129,0)
 ; [FROM]        The index entry(s) from which to begin the list
"RTN","RORRP015",130,0)
 ;                 ^01: FromName
"RTN","RORRP015",131,0)
 ;                 ^02: FromIEN
"RTN","RORRP015",132,0)
 ;
"RTN","RORRP015",133,0)
 ;               For example, a FROM value of "VA" would list entries
"RTN","RORRP015",134,0)
 ;               following VA. You can use the 2-nd and 3-rd "^"-
"RTN","RORRP015",135,0)
 ;               pieces of the @RESULTS@(0) node to continue the
"RTN","RORRP015",136,0)
 ;               listing in the subsequent procedure calls.
"RTN","RORRP015",137,0)
 ;
"RTN","RORRP015",138,0)
 ;               NOTE: The FROM value itself is not included in
"RTN","RORRP015",139,0)
 ;                     the resulting list.
"RTN","RORRP015",140,0)
 ;
"RTN","RORRP015",141,0)
 ; The ^TMP("DILIST",$J) global node is used by the procedure.
"RTN","RORRP015",142,0)
 ;
"RTN","RORRP015",143,0)
 ; See description of the LIST^DIC for more details about the
"RTN","RORRP015",144,0)
 ; PART, NUMBER and FROM parameters.
"RTN","RORRP015",145,0)
 ;
"RTN","RORRP015",146,0)
 ; Return Values:
"RTN","RORRP015",147,0)
 ;
"RTN","RORRP015",148,0)
 ; A negative value of the first "^"-piece of the @RESULTS@(0)
"RTN","RORRP015",149,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP015",150,0)
 ; details).
"RTN","RORRP015",151,0)
 ;
"RTN","RORRP015",152,0)
 ; Otherwise, number of hospital locations and the value of the
"RTN","RORRP015",153,0)
 ; FROM parameter for the next procedure call are returned in
"RTN","RORRP015",154,0)
 ; the @RESULTS@(0) and the subsequent nodes of the global array
"RTN","RORRP015",155,0)
 ; contain the locations.
"RTN","RORRP015",156,0)
 ; 
"RTN","RORRP015",157,0)
 ; @RESULTS@(0)          Result Descriptor
"RTN","RORRP015",158,0)
 ;                         ^01: Number of locations
"RTN","RORRP015",159,0)
 ;                         ^02: FromName
"RTN","RORRP015",160,0)
 ;                         ^03: FromIEN
"RTN","RORRP015",161,0)
 ;
"RTN","RORRP015",162,0)
 ; @RESULTS@(i)          Hospital Location
"RTN","RORRP015",163,0)
 ;                         ^01: IEN
"RTN","RORRP015",164,0)
 ;                         ^02: Name
"RTN","RORRP015",165,0)
 ;                         ^03: Type (internal)
"RTN","RORRP015",166,0)
 ;                         ^04: Institution IEN
"RTN","RORRP015",167,0)
 ;                         ^05: Division IEN
"RTN","RORRP015",168,0)
 ;                         ^06: Active (0/1)
"RTN","RORRP015",169,0)
 ;
"RTN","RORRP015",170,0)
 ; NOTE: The 6th "^"-piece of the location record (Active) is
"RTN","RORRP015",171,0)
 ;       populated only if both "A" and "I" flags are used.
"RTN","RORRP015",172,0)
 ;
"RTN","RORRP015",173,0)
HLOCLIST(RESULTS,HLTYPES,DIVIEN,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP015",174,0)
 N BUF,I,RC,RORERRDL,RORHLT,RORMSG,SCR,TMP
"RTN","RORRP015",175,0)
 D CLEAR^RORERR("HLOCLIST^RORRP015",1)
"RTN","RORRP015",176,0)
 K RESULTS  S RESULTS=$NA(^TMP("DILIST",$J))  K @RESULTS
"RTN","RORRP015",177,0)
 ;--- Check the parameters
"RTN","RORRP015",178,0)
 S HLTYPES=$$UP^XLFSTR($TR($G(HLTYPES)," "))
"RTN","RORRP015",179,0)
 F I=1:1  S TMP=$P(HLTYPES,",",I)  Q:TMP=""  S RORHLT(TMP)=""
"RTN","RORRP015",180,0)
 S DIVIEN=$S($G(DIVIEN)>0:+DIVIEN,1:0)
"RTN","RORRP015",181,0)
 S PART=$G(PART),FLAGS=$G(FLAGS)
"RTN","RORRP015",182,0)
 S NUMBER=$S($G(NUMBER)>0:+NUMBER,1:"*")
"RTN","RORRP015",183,0)
 ;--- If neither "A" nor "I" flag is provided, add the "A" (default)
"RTN","RORRP015",184,0)
 S:$TR(FLAGS,"AI")=FLAGS FLAGS=FLAGS_"A"
"RTN","RORRP015",185,0)
 ;--- Setup the start point
"RTN","RORRP015",186,0)
 I $G(FROM)'=""  D  S FROM=$P(FROM,U)
"RTN","RORRP015",187,0)
 . S:$P(FROM,U,2)>0 FROM("IEN")=+$P(FROM,U,2)
"RTN","RORRP015",188,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP015",189,0)
 S SCR=""
"RTN","RORRP015",190,0)
 D:$D(RORHLT)>1
"RTN","RORRP015",191,0)
 . S SCR=SCR_"S D=$P($G(^(0)),U,3) I D'="""",$D(RORHLT(D)) "
"RTN","RORRP015",192,0)
 S:DIVIEN SCR=SCR_"I $P($G(^(0)),U,15)=DIVIEN "
"RTN","RORRP015",193,0)
 S:FLAGS'["A" SCR=SCR_"I '$$ACTLOC^RORRP015(+Y) "
"RTN","RORRP015",194,0)
 S:FLAGS'["I" SCR=SCR_"I $$ACTLOC^RORRP015(+Y) "
"RTN","RORRP015",195,0)
 ;--- Get the list of locations
"RTN","RORRP015",196,0)
 S BUF="@;.01;2I;3I;3.5I",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP015",197,0)
 D LIST^DIC(44,,BUF,TMP,NUMBER,.FROM,PART,"B",SCR,,,"RORMSG")
"RTN","RORRP015",198,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP015",199,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,44)
"RTN","RORRP015",200,0)
 . K ^TMP("DILIST",$J)
"RTN","RORRP015",201,0)
 ;--- Populate the Active field if both flags are used
"RTN","RORRP015",202,0)
 I FLAGS["I",FLAGS["A"  S I=0  D
"RTN","RORRP015",203,0)
 . F  S I=$O(@RESULTS@(I))  Q:I=""  D
"RTN","RORRP015",204,0)
 . . S $P(@RESULTS@(I,0),U,6)=$$ACTLOC(+@RESULTS@(I,0))
"RTN","RORRP015",205,0)
 ;--- Success
"RTN","RORRP015",206,0)
 S TMP=$G(^TMP("DILIST",$J,0)),BUF=+$P(TMP,U)
"RTN","RORRP015",207,0)
 K ^TMP("DILIST",$J,0)
"RTN","RORRP015",208,0)
 S:$P(TMP,U,3) $P(BUF,U,2,3)=$G(FROM)_U_$G(FROM("IEN"))
"RTN","RORRP015",209,0)
 S @RESULTS@(0)=BUF
"RTN","RORRP015",210,0)
 Q
"RTN","RORRP016")
0^35^B43771782^B18769051
"RTN","RORRP016",1,0)
RORRP016 ;HCIOFO/SG - RPC: LIST OF ICD-9 CODES ; 6/16/06 2:16pm
"RTN","RORRP016",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORRP016",3,0)
 ;
"RTN","RORRP016",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP016",5,0)
 ;
"RTN","RORRP016",6,0)
 ; #3990         $$ICDDX^ICDCODE, $$ICDOP^ICDCODE, and
"RTN","RORRP016",7,0)
 ;               $$ICDD^ICDCODE (supported)
"RTN","RORRP016",8,0)
 ; #10082        Access to the file #80 (supported)
"RTN","RORRP016",9,0)
 ; #10083        Access to the file #80.1 (supported)
"RTN","RORRP016",10,0)
 ;
"RTN","RORRP016",11,0)
 Q
"RTN","RORRP016",12,0)
 ;
"RTN","RORRP016",13,0)
 ;***** RETURNS THE LIST OF ICD-9 CODES (DIAGNOSES OR PROCEDURES)
"RTN","RORRP016",14,0)
 ; RPC: [ROR LIST ICD-9]
"RTN","RORRP016",15,0)
 ;
"RTN","RORRP016",16,0)
 ; .RORESULT     Reference to a local variable where the results
"RTN","RORRP016",17,0)
 ;               are returned to.
"RTN","RORRP016",18,0)
 ;
"RTN","RORRP016",19,0)
 ; [DATE]        Date for the code set versioning.
"RTN","RORRP016",20,0)
 ;
"RTN","RORRP016",21,0)
 ; [PART]        The partial match restriction.
"RTN","RORRP016",22,0)
 ;
"RTN","RORRP016",23,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORRP016",24,0)
 ;                 A  Exclude active codes
"RTN","RORRP016",25,0)
 ;                 B  Backwards. Traverses the index in the opposite
"RTN","RORRP016",26,0)
 ;                    direction of normal traversal
"RTN","RORRP016",27,0)
 ;                 D  Full search by description
"RTN","RORRP016",28,0)
 ;                 F  Exclude codes applicable to females only
"RTN","RORRP016",29,0)
 ;                 I  Exclude inactive codes
"RTN","RORRP016",30,0)
 ;                 K  Search in description keywords
"RTN","RORRP016",31,0)
 ;                 M  Exclude codes applicable to males only
"RTN","RORRP016",32,0)
 ;                 O  Return operation/procedure codes from file #80.1
"RTN","RORRP016",33,0)
 ;                    instead of diagnosis codes from the file #80
"RTN","RORRP016",34,0)
 ;                 P  Exclude codes that are not acceptable
"RTN","RORRP016",35,0)
 ;                    as primary diagnoses
"RTN","RORRP016",36,0)
 ;
"RTN","RORRP016",37,0)
 ; [NUMBER]      Maximum number of entries to return. A value of "*"
"RTN","RORRP016",38,0)
 ;               or no value in this parameter designates all entries.
"RTN","RORRP016",39,0)
 ;
"RTN","RORRP016",40,0)
 ; [FROM]        The index entry(s) from which to begin the list
"RTN","RORRP016",41,0)
 ;                 ^01: FromName
"RTN","RORRP016",42,0)
 ;                 ^02: FromIEN
"RTN","RORRP016",43,0)
 ;
"RTN","RORRP016",44,0)
 ;               For example, a FROM value of "51" would list entries
"RTN","RORRP016",45,0)
 ;               following 51. You can use the 2-nd and 3-rd "^"-
"RTN","RORRP016",46,0)
 ;               pieces of the @RORESULT@(0) node to continue the
"RTN","RORRP016",47,0)
 ;               listing in the subsequent procedure calls.
"RTN","RORRP016",48,0)
 ;
"RTN","RORRP016",49,0)
 ;               NOTE: The FROM value itself is not included in
"RTN","RORRP016",50,0)
 ;                     the resulting list.
"RTN","RORRP016",51,0)
 ;
"RTN","RORRP016",52,0)
 ; See description of the LIST^DIC for more details about the
"RTN","RORRP016",53,0)
 ; PART, NUMBER and FROM parameters.
"RTN","RORRP016",54,0)
 ;
"RTN","RORRP016",55,0)
 ; The ^TMP("RORRP016",$J) global node is used by this procedure.
"RTN","RORRP016",56,0)
 ;
"RTN","RORRP016",57,0)
 ; Return Values:
"RTN","RORRP016",58,0)
 ;
"RTN","RORRP016",59,0)
 ; A negative value of the first "^"-piece of the @RORESULT@(0)
"RTN","RORRP016",60,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP016",61,0)
 ; details).
"RTN","RORRP016",62,0)
 ;
"RTN","RORRP016",63,0)
 ; Otherwise, number of ICD-9 codes and the value of the FROM
"RTN","RORRP016",64,0)
 ; parameter for the next procedure call are returned in the
"RTN","RORRP016",65,0)
 ; @RORESULT@(0) and the subsequent nodes of the global array
"RTN","RORRP016",66,0)
 ; contain the codes.
"RTN","RORRP016",67,0)
 ; 
"RTN","RORRP016",68,0)
 ; @RORESULT@(0)         Result Descriptor
"RTN","RORRP016",69,0)
 ;                         ^01: Number of codes
"RTN","RORRP016",70,0)
 ;                         ^02: FromName
"RTN","RORRP016",71,0)
 ;                         ^03: FromIEN
"RTN","RORRP016",72,0)
 ;
"RTN","RORRP016",73,0)
 ; @RORESULT@(i)         ICD-9
"RTN","RORRP016",74,0)
 ;                         ^01: IEN
"RTN","RORRP016",75,0)
 ;                         ^02: Diagnosis or operation/procedure
"RTN","RORRP016",76,0)
 ;                         ^03: Code
"RTN","RORRP016",77,0)
 ;                         ^04: Use only with Sex
"RTN","RORRP016",78,0)
 ;                         ^05: Inactive {0|1}
"RTN","RORRP016",79,0)
 ;                         ^06: Inactivation Date (FileMan)
"RTN","RORRP016",80,0)
 ;
"RTN","RORRP016",81,0)
 ; @RORESULT@(i+1)       ICD-9 Description
"RTN","RORRP016",82,0)
 ;
"RTN","RORRP016",83,0)
ICD9LIST(RORESULT,DATE,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP016",84,0)
 N BUF,RC,RORERRDL,TMP
"RTN","RORRP016",85,0)
 D CLEAR^RORERR("ICD9LIST^RORRP016",1)
"RTN","RORRP016",86,0)
 K RORESULT  S RORESULT=$NA(^TMP("RORRP016",$J))  K @RORESULT
"RTN","RORRP016",87,0)
 ;--- Check the parameters
"RTN","RORRP016",88,0)
 S PART=$G(PART),FLAGS=$G(FLAGS)
"RTN","RORRP016",89,0)
 S NUMBER=$S($G(NUMBER)>0:+NUMBER,1:"*")
"RTN","RORRP016",90,0)
 ;--- Setup the start point
"RTN","RORRP016",91,0)
 I $G(FROM)'=""  D  S FROM=$P(FROM,U)
"RTN","RORRP016",92,0)
 . S:$P(FROM,U,2)>0 FROM("IEN")=+$P(FROM,U,2)
"RTN","RORRP016",93,0)
 ;--- Compile the list
"RTN","RORRP016",94,0)
 I FLAGS["O"  D
"RTN","RORRP016",95,0)
 . ;--- Get the list of operation/procedure codes
"RTN","RORRP016",96,0)
 . S RC=$$QUERY1(PART,FLAGS,NUMBER,.FROM)  Q:RC<0
"RTN","RORRP016",97,0)
 . S RORESULT=$NA(@RORESULT@("DILIST"))
"RTN","RORRP016",98,0)
 . ;--- Load remaining data and refine the list
"RTN","RORRP016",99,0)
 . D REFINE1(PART,FLAGS,$G(DATE))
"RTN","RORRP016",100,0)
 E  D
"RTN","RORRP016",101,0)
 . ;--- Get the list of diagnosis codes
"RTN","RORRP016",102,0)
 . S RC=$$QUERY(PART,FLAGS,NUMBER,.FROM)  Q:RC<0
"RTN","RORRP016",103,0)
 . S RORESULT=$NA(@RORESULT@("DILIST"))
"RTN","RORRP016",104,0)
 . ;--- Load remaining data and refine the list
"RTN","RORRP016",105,0)
 . D REFINE(PART,FLAGS,$G(DATE))
"RTN","RORRP016",106,0)
 I RC<0  D RPCSTK^RORERR(.RORESULT,RC)  Q
"RTN","RORRP016",107,0)
 ;--- Success
"RTN","RORRP016",108,0)
 S TMP=$G(@RORESULT@(0)),BUF=+$P(TMP,U)
"RTN","RORRP016",109,0)
 S:$P(TMP,U,3) $P(BUF,U,2,3)=$G(FROM)_U_$G(FROM("IEN"))
"RTN","RORRP016",110,0)
 K @RORESULT@(0)  S @RORESULT@(0)=BUF
"RTN","RORRP016",111,0)
 Q
"RTN","RORRP016",112,0)
 ;
"RTN","RORRP016",113,0)
 ;***** QUERIES THE ICD DIAGNOSIS FILE (#80)
"RTN","RORRP016",114,0)
QUERY(PART,FLAGS,NR,FROM) ;
"RTN","RORRP016",115,0)
 N FLDS,RORMSG,SCR,TMP,XREF
"RTN","RORRP016",116,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP016",117,0)
 S SCR=""
"RTN","RORRP016",118,0)
 I FLAGS["D"  S:PART'="" SCR=SCR_"I $P(D,U,3)["""_PART_""" ",PART=""
"RTN","RORRP016",119,0)
 S:FLAGS["F" SCR=SCR_"I $P(D,U,10)'=""F"" "
"RTN","RORRP016",120,0)
 S:FLAGS["M" SCR=SCR_"I $P(D,U,10)'=""M"" "
"RTN","RORRP016",121,0)
 S:FLAGS["P" SCR=SCR_"I '$P(D,U,4) "
"RTN","RORRP016",122,0)
 S:SCR'="" SCR="S D=$G(^(0)) "_SCR
"RTN","RORRP016",123,0)
 ;--- Get the list of codes and some data
"RTN","RORRP016",124,0)
 S FLDS="@;3;.01;9.5I;IXI",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP016",125,0)
 S XREF=$S(FLAGS["D":"#",FLAGS["K":"D",1:"BA")
"RTN","RORRP016",126,0)
 D LIST^DIC(80,,FLDS,TMP,NR,.FROM,PART,XREF,SCR,,RORESULT,"RORMSG")
"RTN","RORRP016",127,0)
 I $G(DIERR)  K @RORESULT  Q $$DBS^RORERR("RORMSG",-9,,,80)
"RTN","RORRP016",128,0)
 ;--- Success
"RTN","RORRP016",129,0)
 Q 0
"RTN","RORRP016",130,0)
 ;
"RTN","RORRP016",131,0)
 ;***** QUERIES THE ICD OPERATION/PROCEDURE FILE (#80.1)
"RTN","RORRP016",132,0)
QUERY1(PART,FLAGS,NR,FROM) ;
"RTN","RORRP016",133,0)
 N FLDS,RORMSG,SCR,TMP,XREF
"RTN","RORRP016",134,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP016",135,0)
 S SCR=""
"RTN","RORRP016",136,0)
 I FLAGS["D"  S:PART'="" SCR=SCR_"I $P(D,U,4)["""_PART_""" ",PART=""
"RTN","RORRP016",137,0)
 S:FLAGS["F" SCR=SCR_"I $P(D,U,10)'=""F"" "
"RTN","RORRP016",138,0)
 S:FLAGS["M" SCR=SCR_"I $P(D,U,10)'=""M"" "
"RTN","RORRP016",139,0)
 S:SCR'="" SCR="S D=$G(^(0)) "_SCR
"RTN","RORRP016",140,0)
 ;--- Get the list of codes and some data
"RTN","RORRP016",141,0)
 S FLDS="@;4;.01;9.5I;IXI",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP016",142,0)
 S XREF=$S(FLAGS["D":"#",FLAGS["K":"D",1:"BA")
"RTN","RORRP016",143,0)
 D LIST^DIC(80.1,,FLDS,TMP,NR,.FROM,PART,XREF,SCR,,RORESULT,"RORMSG")
"RTN","RORRP016",144,0)
 I $G(DIERR)  K @RORESULT  Q $$DBS^RORERR("RORMSG",-9,,,80.1)
"RTN","RORRP016",145,0)
 ;--- Success
"RTN","RORRP016",146,0)
 Q 0
"RTN","RORRP016",147,0)
 ;
"RTN","RORRP016",148,0)
 ;***** REFINES THE LIST OF DIAGNOSES
"RTN","RORRP016",149,0)
REFINE(PART,FLAGS,DATE) ;
"RTN","RORRP016",150,0)
 N BUF,CNT,ICDINFO,MODE,RORDESC,SUBS,TMP
"RTN","RORRP016",151,0)
 S MODE=($TR(FLAGS,"DK")=FLAGS)
"RTN","RORRP016",152,0)
 S (CNT,SUBS)=0
"RTN","RORRP016",153,0)
 F  S SUBS=$O(@RORESULT@(SUBS)) Q:SUBS'>0  D
"RTN","RORRP016",154,0)
 . S BUF=@RORESULT@(SUBS,0)
"RTN","RORRP016",155,0)
 . ;--- Remove duplicates created by the logic of the "BAA" xref
"RTN","RORRP016",156,0)
 . I MODE  D  I '(TMP?1.E1" ")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",157,0)
 . . S TMP=$P(BUF,U,5)
"RTN","RORRP016",158,0)
 . ;--- Load the additional data
"RTN","RORRP016",159,0)
 . S ICDINFO=$$ICDDX^ICDCODE(+$P(BUF,U),DATE)
"RTN","RORRP016",160,0)
 . I ICDINFO<0  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",161,0)
 . ;--- Screen active/inactive records
"RTN","RORRP016",162,0)
 . S TMP=+$P(ICDINFO,U,10)                      ; Status
"RTN","RORRP016",163,0)
 . I $S(TMP:FLAGS["A",1:FLAGS["I")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",164,0)
 . S $P(BUF,U,5)=TMP
"RTN","RORRP016",165,0)
 . S $P(BUF,U,6)=$S(TMP:$P(ICDINFO,U,12),1:"")  ; Inactivation Date
"RTN","RORRP016",166,0)
 . ;--- Versioned diagnosis
"RTN","RORRP016",167,0)
 . S TMP=$P(ICDINFO,U,4)  S:TMP'="" $P(BUF,U,2)=TMP
"RTN","RORRP016",168,0)
 . ;--- Store the data
"RTN","RORRP016",169,0)
 . S CNT=CNT+1,@RORESULT@(SUBS,0)=BUF
"RTN","RORRP016",170,0)
 . ;--- Versioned description
"RTN","RORRP016",171,0)
 . S TMP=$$ICDD^ICDCODE($P(BUF,U,3),"RORDESC")
"RTN","RORRP016",172,0)
 . S @RORESULT@(SUBS,1)=$S($G(RORDESC(1))'="":RORDESC(1),1:$P(BUF,U,2))
"RTN","RORRP016",173,0)
 . K RORDESC
"RTN","RORRP016",174,0)
 ;---
"RTN","RORRP016",175,0)
 S $P(@RORESULT@(0),U)=CNT
"RTN","RORRP016",176,0)
 Q
"RTN","RORRP016",177,0)
 ;
"RTN","RORRP016",178,0)
 ;***** REFINES THE LIST OF OPERATION/PROCEDURES
"RTN","RORRP016",179,0)
REFINE1(PART,FLAGS,DATE) ;
"RTN","RORRP016",180,0)
 N BUF,CNT,ICDINFO,MODE,RORDESC,SUBS,TMP
"RTN","RORRP016",181,0)
 S MODE=($TR(FLAGS,"DK")=FLAGS)
"RTN","RORRP016",182,0)
 S (CNT,SUBS)=0
"RTN","RORRP016",183,0)
 F  S SUBS=$O(@RORESULT@(SUBS)) Q:SUBS'>0  D
"RTN","RORRP016",184,0)
 . S BUF=@RORESULT@(SUBS,0)
"RTN","RORRP016",185,0)
 . ;--- Remove duplicates created by the logic of the "BAA" xref
"RTN","RORRP016",186,0)
 . I MODE  D  I '(TMP?1.E1" ")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",187,0)
 . . S TMP=$P(BUF,U,5)
"RTN","RORRP016",188,0)
 . ;--- Load the additional data
"RTN","RORRP016",189,0)
 . S ICDINFO=$$ICDOP^ICDCODE(+$P(BUF,U),DATE)
"RTN","RORRP016",190,0)
 . I ICDINFO<0  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",191,0)
 . ;--- Screen active/inactive records
"RTN","RORRP016",192,0)
 . S TMP=+$P(ICDINFO,U,10)                      ; Status
"RTN","RORRP016",193,0)
 . I $S(TMP:FLAGS["A",1:FLAGS["I")  K @RORESULT@(SUBS)  Q
"RTN","RORRP016",194,0)
 . S $P(BUF,U,5)=TMP
"RTN","RORRP016",195,0)
 . S $P(BUF,U,6)=$S(TMP:$P(ICDINFO,U,12),1:"")  ; Inactivation Date
"RTN","RORRP016",196,0)
 . ;--- Versioned operation/procedure
"RTN","RORRP016",197,0)
 . S TMP=$P(ICDINFO,U,5)  S:TMP'="" $P(BUF,U,2)=TMP
"RTN","RORRP016",198,0)
 . ;--- Store the data
"RTN","RORRP016",199,0)
 . S CNT=CNT+1,@RORESULT@(SUBS,0)=BUF
"RTN","RORRP016",200,0)
 . ;--- Versioned description
"RTN","RORRP016",201,0)
 . S TMP=$$ICDD^ICDCODE($P(BUF,U,3),"RORDESC")
"RTN","RORRP016",202,0)
 . S @RORESULT@(SUBS,1)=$S($G(RORDESC(1))'="":RORDESC(1),1:$P(BUF,U,2))
"RTN","RORRP016",203,0)
 . K RORDESC
"RTN","RORRP016",204,0)
 ;---
"RTN","RORRP016",205,0)
 S $P(@RORESULT@(0),U)=CNT
"RTN","RORRP016",206,0)
 Q
"RTN","RORRP019")
0^33^B43614139^B40743189
"RTN","RORRP019",1,0)
RORRP019 ;HCIOFO/SG - RPC: LIST OF PATIENTS ; 5/26/06 12:03pm
"RTN","RORRP019",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORRP019",3,0)
 ;
"RTN","RORRP019",4,0)
 Q
"RTN","RORRP019",5,0)
 ;
"RTN","RORRP019",6,0)
 ;***** RETURNS THE LIST OF PATIENTS (EITHER FROM #798 OR #2)
"RTN","RORRP019",7,0)
 ; RPC: [ROR LIST PATIENTS]
"RTN","RORRP019",8,0)
 ;
"RTN","RORRP019",9,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP019",10,0)
 ;               are returned to.
"RTN","RORRP019",11,0)
 ;
"RTN","RORRP019",12,0)
 ; REGIEN        Registry IEN
"RTN","RORRP019",13,0)
 ;
"RTN","RORRP019",14,0)
 ; [DATE]        If the value of this parameter is greater than 0
"RTN","RORRP019",15,0)
 ;               and the 'C' flag is defined, then patients who
"RTN","RORRP019",16,0)
 ;               were confrmed in the registry before this date,
"RTN","RORRP019",17,0)
 ;               will be skipped.
"RTN","RORRP019",18,0)
 ;
"RTN","RORRP019",19,0)
 ; [PART]        The search pattern (partial match restriction).
"RTN","RORRP019",20,0)
 ;               If this parameter is a number preceded by the '`',
"RTN","RORRP019",21,0)
 ;               then a list containing only the patient with this
"RTN","RORRP019",22,0)
 ;               IEN is compiled.
"RTN","RORRP019",23,0)
 ;
"RTN","RORRP019",24,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORRP019",25,0)
 ;                 2  Search in the PATIENT file. By default, the
"RTN","RORRP019",26,0)
 ;                    ROR REGISTRY RECORD and ROR PATIENT files are
"RTN","RORRP019",27,0)
 ;                    queried. This flag overrides the 'C' and 'P'
"RTN","RORRP019",28,0)
 ;                    flags.
"RTN","RORRP019",29,0)
 ;                 B  Backwards. Traverses the index in the opposite
"RTN","RORRP019",30,0)
 ;                    direction of normal traversal.
"RTN","RORRP019",31,0)
 ;                 C  Include confirmed patients
"RTN","RORRP019",32,0)
 ;                 O  Add values of the optional fields
"RTN","RORRP019",33,0)
 ;                 P  Include pending patients
"RTN","RORRP019",34,0)
 ;
"RTN","RORRP019",35,0)
 ; [NUMBER]      Maximum number of entries to return. A value of "*"
"RTN","RORRP019",36,0)
 ;               or no value in this parameter designates all entries.
"RTN","RORRP019",37,0)
 ;
"RTN","RORRP019",38,0)
 ; [FROM]        The index entry(s) from which to begin the list.
"RTN","RORRP019",39,0)
 ;               You should use the pieces of the @RESULTS@(0) node
"RTN","RORRP019",40,0)
 ;               (starting from the second one) to continue the
"RTN","RORRP019",41,0)
 ;               listing in the subsequent procedure calls.
"RTN","RORRP019",42,0)
 ;
"RTN","RORRP019",43,0)
 ;               NOTE: The FROM value itself is not included in
"RTN","RORRP019",44,0)
 ;                     the resulting list.
"RTN","RORRP019",45,0)
 ;
"RTN","RORRP019",46,0)
 ; The ^TMP("DILIST",$J) global node is used by the procedure.
"RTN","RORRP019",47,0)
 ;
"RTN","RORRP019",48,0)
 ; See description of the LIST^DIC for more details about the
"RTN","RORRP019",49,0)
 ; PART, NUMBER and FROM parameters.
"RTN","RORRP019",50,0)
 ;
"RTN","RORRP019",51,0)
 ; Return Values:
"RTN","RORRP019",52,0)
 ;
"RTN","RORRP019",53,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP019",54,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP019",55,0)
 ; details).
"RTN","RORRP019",56,0)
 ;
"RTN","RORRP019",57,0)
 ; Otherwise, number of patients and the value of the FROM
"RTN","RORRP019",58,0)
 ; parameter for the next procedure call are returned in the
"RTN","RORRP019",59,0)
 ; @RESULTS@(0) and the subsequent nodes of the global array
"RTN","RORRP019",60,0)
 ; contain the patients.
"RTN","RORRP019",61,0)
 ; 
"RTN","RORRP019",62,0)
 ; @RESULTS@(0)          Result Descriptor
"RTN","RORRP019",63,0)
 ;                         ^01: Number of patients
"RTN","RORRP019",64,0)
 ;                         ^02: Values that comprise the FROM
"RTN","RORRP019",65,0)
 ;                         ^nn: parameter for the subsequent call
"RTN","RORRP019",66,0)
 ;
"RTN","RORRP019",67,0)
 ; @RESULTS@(i)          Patient
"RTN","RORRP019",68,0)
 ;                         ...  See the $$LOAD2^RORRP020 (RORDEM)
"RTN","RORRP019",69,0)
 ;
"RTN","RORRP019",70,0)
 ; @RESULTS@(i+1)        Optional fields (these nodes are created only
"RTN","RORRP019",71,0)
 ;                       if the FLAGS parameter contains the 'O' flag)
"RTN","RORRP019",72,0)
 ;                         ^01: "O" (letter O)
"RTN","RORRP019",73,0)
 ;                         ...  See the $$LOAD798^RORRP020
"RTN","RORRP019",74,0)
 ;
"RTN","RORRP019",75,0)
PTLIST(RESULTS,REGIEN,DATE,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP019",76,0)
 N BUF,I,RC,RORERRDL,RORMSG,TMP
"RTN","RORRP019",77,0)
 D CLEAR^RORERR("PTLIST^RORRP019",1)
"RTN","RORRP019",78,0)
 K RESULTS  S RESULTS=$NA(^TMP("DILIST",$J))  K @RESULTS
"RTN","RORRP019",79,0)
 ;
"RTN","RORRP019",80,0)
 ;=== Check the parameters
"RTN","RORRP019",81,0)
 S RC=0  D  I RC<0  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP019",82,0)
 . ;--- Registry IEN
"RTN","RORRP019",83,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP019",84,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP019",85,0)
 . S REGIEN=+REGIEN
"RTN","RORRP019",86,0)
 . ;--- Flags and date
"RTN","RORRP019",87,0)
 . S FLAGS=$$UP^XLFSTR($G(FLAGS)),DATE=+$G(DATE)
"RTN","RORRP019",88,0)
 . S TMP=$TR(FLAGS,"CP")
"RTN","RORRP019",89,0)
 . ;- The '2' flag overrides all flags related to the CCR files.
"RTN","RORRP019",90,0)
 . I FLAGS["2"  S FLAGS=TMP
"RTN","RORRP019",91,0)
 . ;- By default, all registry patients are included
"RTN","RORRP019",92,0)
 . ;- (except those who are marked for deletion).
"RTN","RORRP019",93,0)
 . E  I TMP=FLAGS  S FLAGS=FLAGS_"CP"
"RTN","RORRP019",94,0)
 . ;- If the date is provided, then make sure that confirmed
"RTN","RORRP019",95,0)
 . ;- registry patients are included in the search (the 'C' flag).
"RTN","RORRP019",96,0)
 . E  S:DATE>0 FLAGS=FLAGS_"C"
"RTN","RORRP019",97,0)
 . ;--- Others
"RTN","RORRP019",98,0)
 . S PART=$G(PART),FROM=$G(FROM)
"RTN","RORRP019",99,0)
 . S NUMBER=$S($G(NUMBER)>0:+NUMBER,1:"*")
"RTN","RORRP019",100,0)
 ;
"RTN","RORRP019",101,0)
 ;=== Setup the starting point
"RTN","RORRP019",102,0)
 F I=1:1  S TMP=$P(FROM,U,I)  Q:TMP=""  S FROM(I)=TMP
"RTN","RORRP019",103,0)
 S FROM=$G(FROM(1))
"RTN","RORRP019",104,0)
 ;
"RTN","RORRP019",105,0)
 ;=== Query the file
"RTN","RORRP019",106,0)
 S RC=0  D
"RTN","RORRP019",107,0)
 . ;--- Decode coded SSN of a registry patient
"RTN","RORRP019",108,0)
 . I PART?1"#"1.11N.1"P"  D
"RTN","RORRP019",109,0)
 . . S PART=$$XOR^RORUTL03($P(PART,"#",2))
"RTN","RORRP019",110,0)
 . . S TMP=$S(PART["P":10,1:9)
"RTN","RORRP019",111,0)
 . . S:$L(PART)<TMP PART=$TR($J(PART,TMP)," ","0")
"RTN","RORRP019",112,0)
 . . S FLAGS=$TR(FLAGS,"2CP")_"CP"
"RTN","RORRP019",113,0)
 . ;--- Load a single patient with the provided IEN
"RTN","RORRP019",114,0)
 . I PART?1"`"1.N  D  Q
"RTN","RORRP019",115,0)
 . . I FLAGS'["2"  Q:$$PRRIEN^RORUTL01($P(PART,"`",2),REGIEN)'>0
"RTN","RORRP019",116,0)
 . . D FIND^DIC(2,,"@","P",PART,"*","#",,,,"RORMSG")
"RTN","RORRP019",117,0)
 . . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,2)
"RTN","RORRP019",118,0)
 . ;--- List of patients from PATIENT file (#2)
"RTN","RORRP019",119,0)
 . I FLAGS["2"  D  Q
"RTN","RORRP019",120,0)
 . . S RC=$$LST2(REGIEN,PART,FLAGS,NUMBER,.FROM)
"RTN","RORRP019",121,0)
 . ;--- List of registry patients
"RTN","RORRP019",122,0)
 . S RC=$$LST798(REGIEN,DATE,PART,FLAGS,NUMBER,.FROM)
"RTN","RORRP019",123,0)
 ;
"RTN","RORRP019",124,0)
 ;=== Check for the error(s)
"RTN","RORRP019",125,0)
 I RC<0  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP019",126,0)
 . K ^TMP("DILIST",$J)
"RTN","RORRP019",127,0)
 ;
"RTN","RORRP019",128,0)
 ;=== Post-processing
"RTN","RORRP019",129,0)
 S RC=$$POSTPROC^RORRP020(RESULTS,REGIEN,FLAGS)
"RTN","RORRP019",130,0)
 I RC<0  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP019",131,0)
 ;
"RTN","RORRP019",132,0)
 ;=== Success
"RTN","RORRP019",133,0)
 S TMP=$G(^TMP("DILIST",$J,0)),BUF=+$P(TMP,U)
"RTN","RORRP019",134,0)
 K ^TMP("DILIST",$J,0)
"RTN","RORRP019",135,0)
 I $P(TMP,U,3)  S I=0  D
"RTN","RORRP019",136,0)
 . F  S I=$O(FROM(I))  Q:I'>0  S TMP=FROM(I)  S:TMP'="" BUF=BUF_U_TMP
"RTN","RORRP019",137,0)
 S @RESULTS@(0)=BUF
"RTN","RORRP019",138,0)
 Q
"RTN","RORRP019",139,0)
 ;
"RTN","RORRP019",140,0)
 ;***** QUERIES THE 'PATIENT' FILE (#2)
"RTN","RORRP019",141,0)
 ;
"RTN","RORRP019",142,0)
 ; RORREG        Registry IEN
"RTN","RORRP019",143,0)
 ;
"RTN","RORRP019",144,0)
 ; PART          The partial match restriction
"RTN","RORRP019",145,0)
 ;
"RTN","RORRP019",146,0)
 ; FLAGS         Flags that control the execution
"RTN","RORRP019",147,0)
 ;
"RTN","RORRP019",148,0)
 ; NUMBER        Maximum number of entries to return
"RTN","RORRP019",149,0)
 ;
"RTN","RORRP019",150,0)
 ; .FROM         Reference to a local variable that contains the
"RTN","RORRP019",151,0)
 ;               starting point for the LIST^DIC. The new point is
"RTN","RORRP019",152,0)
 ;               returned in this variable as well.
"RTN","RORRP019",153,0)
 ;
"RTN","RORRP019",154,0)
 ; Return Values:
"RTN","RORRP019",155,0)
 ;       <0  Error code
"RTN","RORRP019",156,0)
 ;        0  Ok
"RTN","RORRP019",157,0)
 ;
"RTN","RORRP019",158,0)
LST2(RORREG,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP019",159,0)
 N RC,RORMSG,SCR,TMP,XREF
"RTN","RORRP019",160,0)
 ;--- Select the cross-reference
"RTN","RORRP019",161,0)
 S XREF=$S(PART?4N:"BS",PART?1U4N:"BS5",PART?9N.1"P":"SSN",1:"B")
"RTN","RORRP019",162,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP019",163,0)
 S SCR="I '$$SKIPEMPL^RORUTL02(+Y,.RORREG)"
"RTN","RORRP019",164,0)
 ;--- Get the list of patients
"RTN","RORRP019",165,0)
 S TMP="P"_$S(FLAGS["B":"B",1:"")_$S(XREF="B":"M",1:"")
"RTN","RORRP019",166,0)
 D LIST^DIC(2,,"@",TMP,NUMBER,.FROM,PART,XREF,SCR,,,"RORMSG")
"RTN","RORRP019",167,0)
 S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,2)
"RTN","RORRP019",168,0)
 ;---
"RTN","RORRP019",169,0)
 Q $S($G(RC)<0:RC,1:0)
"RTN","RORRP019",170,0)
 ;
"RTN","RORRP019",171,0)
 ;***** QUERIES THE CCR FILES (#798 OR #798.4)
"RTN","RORRP019",172,0)
 ;
"RTN","RORRP019",173,0)
 ; REGIEN        Registry IEN
"RTN","RORRP019",174,0)
 ;
"RTN","RORRP019",175,0)
 ; RORDT         Ignore patients who were confirmed in the registry
"RTN","RORRP019",176,0)
 ;               before the provided date (if the FLAGS parameter
"RTN","RORRP019",177,0)
 ;               contains the "C" flag)
"RTN","RORRP019",178,0)
 ;
"RTN","RORRP019",179,0)
 ; PART          The partial match restriction
"RTN","RORRP019",180,0)
 ;
"RTN","RORRP019",181,0)
 ; FLAGS         Flags that control the execution
"RTN","RORRP019",182,0)
 ;
"RTN","RORRP019",183,0)
 ; NUMBER        Maximum number of entries to return
"RTN","RORRP019",184,0)
 ;
"RTN","RORRP019",185,0)
 ; .FROM         Reference to a local variable that contains the
"RTN","RORRP019",186,0)
 ;               starting point for the LIST^DIC. The new point is
"RTN","RORRP019",187,0)
 ;               returned in this variable as well.
"RTN","RORRP019",188,0)
 ;
"RTN","RORRP019",189,0)
 ; Return Values:
"RTN","RORRP019",190,0)
 ;       <0  Error code
"RTN","RORRP019",191,0)
 ;        0  Ok
"RTN","RORRP019",192,0)
 ;
"RTN","RORRP019",193,0)
LST798(REGIEN,RORDT,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP019",194,0)
 N APART,RC,RORMSG,RORPS,SCR,TMP,XREF
"RTN","RORRP019",195,0)
 S RC=0
"RTN","RORRP019",196,0)
 ;--- Analyze the parameters
"RTN","RORRP019",197,0)
 S:FLAGS["C" RORPS(0)=""  ; Confirmed
"RTN","RORRP019",198,0)
 S:FLAGS["P" RORPS(4)=""  ; Pending
"RTN","RORRP019",199,0)
 S XREF=$S(PART?4N:"BS",PART?1U4N:"BS5",PART?9N.1"P":"SSN",1:"")
"RTN","RORRP019",200,0)
 ;--- Select the appropriate CCR file and perform the query
"RTN","RORRP019",201,0)
 I XREF'=""  D
"RTN","RORRP019",202,0)
 . S SCR="S D=$O(^RORDATA(798,""KEY"",+Y,"_REGIEN_",0)) "
"RTN","RORRP019",203,0)
 . S SCR=SCR_"I D>0 S D=$G(^RORDATA(798,D,0)) "
"RTN","RORRP019",204,0)
 . S SCR=SCR_"I $D(RORPS(+$P(D,U,5))) "
"RTN","RORRP019",205,0)
 . ;--- If the confirmation threshold is provided, add the
"RTN","RORRP019",206,0)
 . ;    screen code and check if there is at least one record
"RTN","RORRP019",207,0)
 . ;--- that conforms the confirmation date criterion
"RTN","RORRP019",208,0)
 . I RORDT>0  D  Q:'$D(SCR)
"RTN","RORRP019",209,0)
 . . I FLAGS["B"  D  Q
"RTN","RORRP019",210,0)
 . . . S SCR=SCR_"I $P(D,U,4)'>RORDT "
"RTN","RORRP019",211,0)
 . . . K:$O(^RORDATA(798,"ARCP",REGIEN_"#",""))>RORDT SCR
"RTN","RORRP019",212,0)
 . . ;---
"RTN","RORRP019",213,0)
 . . S SCR=SCR_"I $P(D,U,4)'<RORDT "
"RTN","RORRP019",214,0)
 . . K:$O(^RORDATA(798,"ARCP",REGIEN_"#",""),-1)<RORDT SCR
"RTN","RORRP019",215,0)
 . ;--- Query the ROR PATIENT file
"RTN","RORRP019",216,0)
 . S TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP019",217,0)
 . D LIST^DIC(798.4,,"@",TMP,NUMBER,.FROM,PART,XREF,SCR,,,"RORMSG")
"RTN","RORRP019",218,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798.4)
"RTN","RORRP019",219,0)
 E  D
"RTN","RORRP019",220,0)
 . S APART(1)=REGIEN_"#"
"RTN","RORRP019",221,0)
 . S FROM(1)=$S(FLAGS["B":"~",1:" ")
"RTN","RORRP019",222,0)
 . S SCR="S D=+$P($G(^(0)),U,5) I $D(RORPS(D)) "
"RTN","RORRP019",223,0)
 . ;---
"RTN","RORRP019",224,0)
 . I RORDT>0  S XREF="ARCP",APART(3)=PART  D:$G(FROM(2))=""
"RTN","RORRP019",225,0)
 . . S FROM(2)=$$FMADD^XLFDT(RORDT,,,,$S(FLAGS["B":1,1:-1))
"RTN","RORRP019",226,0)
 . E  S XREF="ARP",APART(2)=PART
"RTN","RORRP019",227,0)
 . ;--- Query the ROR REGISTRY RECORD file
"RTN","RORRP019",228,0)
 . S TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP019",229,0)
 . D LIST^DIC(798,,"@;.01I",TMP,NUMBER,.FROM,.APART,XREF,SCR,,,"RORMSG")
"RTN","RORRP019",230,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798)
"RTN","RORRP019",231,0)
 ;---
"RTN","RORRP019",232,0)
 Q $S($G(RC)<0:RC,1:0)
"RTN","RORRP020")
0^21^B26441857^B23181298
"RTN","RORRP020",1,0)
RORRP020 ;HCIOFO/SG - RPC: PATIENT DATA UTILITIES ; 5/11/06 2:55pm
"RTN","RORRP020",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORRP020",3,0)
 ;
"RTN","RORRP020",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP020",5,0)
 ;
"RTN","RORRP020",6,0)
 ; #10035        Fields and x-refs of the PATIENT file (supported)
"RTN","RORRP020",7,0)
 ;
"RTN","RORRP020",8,0)
 Q
"RTN","RORRP020",9,0)
 ;
"RTN","RORRP020",10,0)
 ;***** LOADS THE DATA FROM THE 'PATIENT' FILE (#2)
"RTN","RORRP020",11,0)
 ;
"RTN","RORRP020",12,0)
 ; DFN           Patient IEN
"RTN","RORRP020",13,0)
 ;
"RTN","RORRP020",14,0)
 ; .RORDEM       Reference to a local variable where the demographic
"RTN","RORRP020",15,0)
 ;               information is returned to:
"RTN","RORRP020",16,0)
 ;
"RTN","RORRP020",17,0)
 ;                 ^01: Patient IEN (DFN)
"RTN","RORRP020",18,0)
 ;                 ^02: Patient Name
"RTN","RORRP020",19,0)
 ;                 ^03: Date of Birth (FileMan)
"RTN","RORRP020",20,0)
 ;                 ^04: SSN
"RTN","RORRP020",21,0)
 ;                 ^05: Date of Death (FileMan)
"RTN","RORRP020",22,0)
 ;                 ^06: Sex (F/M)
"RTN","RORRP020",23,0)
 ;
"RTN","RORRP020",24,0)
 ; [.RORADR]     Reference to a local variable where the patient's
"RTN","RORRP020",25,0)
 ;               address is returned to:
"RTN","RORRP020",26,0)
 ;
"RTN","RORRP020",27,0)
 ;                 ^01: Address (1)
"RTN","RORRP020",28,0)
 ;                 ^02: Address (2)
"RTN","RORRP020",29,0)
 ;                 ^03: Address (3)
"RTN","RORRP020",30,0)
 ;                 ^04: City
"RTN","RORRP020",31,0)
 ;                 ^05: State (IEN)
"RTN","RORRP020",32,0)
 ;                 ^06: State (Name)
"RTN","RORRP020",33,0)
 ;                 ^07: ZIP
"RTN","RORRP020",34,0)
 ;                 ^08: ZIP+4
"RTN","RORRP020",35,0)
 ;                 ^09: County (IEN)
"RTN","RORRP020",36,0)
 ;                 ^10: County (Name)
"RTN","RORRP020",37,0)
 ;                 ^11: Home Phone
"RTN","RORRP020",38,0)
 ;
"RTN","RORRP020",39,0)
 ; [.VADM]       Reference to a local array that is populated by
"RTN","RORRP020",40,0)
 ;               the 4^VADM API inside this function
"RTN","RORRP020",41,0)
 ;
"RTN","RORRP020",42,0)
 ; Return Values:
"RTN","RORRP020",43,0)
 ;       <0  Error code
"RTN","RORRP020",44,0)
 ;        0  Ok
"RTN","RORRP020",45,0)
 ;
"RTN","RORRP020",46,0)
LOAD2(DFN,RORDEM,RORADR,VADM) ;
"RTN","RORRP020",47,0)
 N I,VA,VAHOW,VAPA,VAROOT  D 4^VADPT
"RTN","RORRP020",48,0)
 ;--- Demographic information
"RTN","RORRP020",49,0)
 S RORDEM=DFN                          ; DFN
"RTN","RORRP020",50,0)
 S $P(RORDEM,U,2)=$G(VADM(1))          ; Name
"RTN","RORRP020",51,0)
 S $P(RORDEM,U,3)=$P($G(VADM(3)),U)    ; DOB
"RTN","RORRP020",52,0)
 S $P(RORDEM,U,4)=$P($G(VADM(2)),U)    ; SSN
"RTN","RORRP020",53,0)
 S $P(RORDEM,U,5)=$P($G(VADM(6)),U)    ; DOD
"RTN","RORRP020",54,0)
 S $P(RORDEM,U,6)=$P($G(VADM(5)),U)    ; Sex
"RTN","RORRP020",55,0)
 ;--- Patient's address
"RTN","RORRP020",56,0)
 S RORADR=$G(VAPA(1))                  ; Address (1)
"RTN","RORRP020",57,0)
 S $P(RORADR,U,2)=$G(VAPA(2))          ; Address (2)
"RTN","RORRP020",58,0)
 S $P(RORADR,U,3)=$G(VAPA(3))          ; Address (3)
"RTN","RORRP020",59,0)
 S $P(RORADR,U,4)=$G(VAPA(4))          ; City
"RTN","RORRP020",60,0)
 S $P(RORADR,U,5)=$P($G(VAPA(5)),U,1)  ; State IEN
"RTN","RORRP020",61,0)
 S $P(RORADR,U,6)=$P($G(VAPA(5)),U,2)  ; State Name
"RTN","RORRP020",62,0)
 S $P(RORADR,U,7)=$P($G(VAPA(6)),U,1)  ; ZIP
"RTN","RORRP020",63,0)
 S $P(RORADR,U,8)=$P($G(VAPA(6)),U,2)  ; ZIP+4
"RTN","RORRP020",64,0)
 S $P(RORADR,U,9)=$P($G(VAPA(7)),U,1)  ; County IEN
"RTN","RORRP020",65,0)
 S $P(RORADR,U,10)=$P($G(VAPA(7)),U,2) ; County Name
"RTN","RORRP020",66,0)
 S $P(RORADR,U,11)=$G(VAPA(8))         ; Home Phone Number
"RTN","RORRP020",67,0)
 Q 0
"RTN","RORRP020",68,0)
 ;
"RTN","RORRP020",69,0)
 ;***** LOADS THE REGISTRY DATA FOR THE PATIENT
"RTN","RORRP020",70,0)
 ;
"RTN","RORRP020",71,0)
 ; IEN           IEN of the registry record (file #798)
"RTN","RORRP020",72,0)
 ;
"RTN","RORRP020",73,0)
 ; .ROR8DST      Reference to a local variable where the results
"RTN","RORRP020",74,0)
 ;               are returned to:
"RTN","RORRP020",75,0)
 ;
"RTN","RORRP020",76,0)
 ;                 ^01: Date Entered (FileMan)
"RTN","RORRP020",77,0)
 ;                 ^02: Status Code (Field 3, File #798)
"RTN","RORRP020",78,0)
 ;                 ^03: Active (0/1)
"RTN","RORRP020",79,0)
 ;                 ^04: Do not Send (0/1)
"RTN","RORRP020",80,0)
 ;                 ^05: Data Acknowledged Until (FileMan)
"RTN","RORRP020",81,0)
 ;                 ^06: Data Extracted Until (FileMan)
"RTN","RORRP020",82,0)
 ;                 ^07: Date Selected (FileMan)
"RTN","RORRP020",83,0)
 ;                 ^08: Date Confirmed (FileMan)
"RTN","RORRP020",84,0)
 ;                 ^09: Location Selected (Institution Name)
"RTN","RORRP020",85,0)
 ;                 ^10: Description of the Earliest Selection Rule
"RTN","RORRP020",86,0)
 ;                 ^11: reserved
"RTN","RORRP020",87,0)
 ;                 ^12: reserved
"RTN","RORRP020",88,0)
 ;                 ^13: Action Flags (see the description below)
"RTN","RORRP020",89,0)
 ;
"RTN","RORRP020",90,0)
 ;               The Action Flags field indicates the actions that
"RTN","RORRP020",91,0)
 ;               can be performed on the patient's record in the
"RTN","RORRP020",92,0)
 ;               registry:
"RTN","RORRP020",93,0)
 ;
"RTN","RORRP020",94,0)
 ;                   C  CDC form can be edited/printed
"RTN","RORRP020",95,0)
 ;                   D  The record can be deleted
"RTN","RORRP020",96,0)
 ;                   E  The record can be edited
"RTN","RORRP020",97,0)
 ;                   O  Read-only mode
"RTN","RORRP020",98,0)
 ;
"RTN","RORRP020",99,0)
 ; DOD           Date of Death (for deceased patients)
"RTN","RORRP020",100,0)
 ;
"RTN","RORRP020",101,0)
 ; Return Values:
"RTN","RORRP020",102,0)
 ;       <0  Error code
"RTN","RORRP020",103,0)
 ;        0  Ok
"RTN","RORRP020",104,0)
 ;
"RTN","RORRP020",105,0)
LOAD798(IEN,ROR8DST,DOD) ;
"RTN","RORRP020",106,0)
 N FLAGS,IENS,RC,RORBUF,RORMSG,TMP
"RTN","RORRP020",107,0)
 S ROR8DST=""
"RTN","RORRP020",108,0)
 ;
"RTN","RORRP020",109,0)
 ;--- Check if the patient is in the registry
"RTN","RORRP020",110,0)
 I (IEN'>0)!($D(^RORDATA(798,+IEN))<10)  D  Q 0
"RTN","RORRP020",111,0)
 . S $P(ROR8DST,U,13)=""
"RTN","RORRP020",112,0)
 ;
"RTN","RORRP020",113,0)
 ;--- Load values from the registry record
"RTN","RORRP020",114,0)
 S IENS=(+IEN)_","
"RTN","RORRP020",115,0)
 D GETS^DIQ(798,IENS,"1;2;3;8;9.1;9.2;11","I","RORBUF","RORMSG")
"RTN","RORRP020",116,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORRP020",117,0)
 ;
"RTN","RORRP020",118,0)
 ;--- Registry data
"RTN","RORRP020",119,0)
 S ROR8DST=$G(RORBUF(798,IENS,1,"I"))            ; DATE ENTERED
"RTN","RORRP020",120,0)
 S $P(ROR8DST,U,2)=+$G(RORBUF(798,IENS,3,"I"))   ; STATUS
"RTN","RORRP020",121,0)
 S $P(ROR8DST,U,3)=+$G(RORBUF(798,IENS,8,"I"))   ; ACTIVE
"RTN","RORRP020",122,0)
 S $P(ROR8DST,U,4)=+$G(RORBUF(798,IENS,11,"I"))  ; DON'T SEND
"RTN","RORRP020",123,0)
 S $P(ROR8DST,U,5)=$G(RORBUF(798,IENS,9.1,"I"))  ; ACKNOWLEDGED UNTIL
"RTN","RORRP020",124,0)
 S $P(ROR8DST,U,6)=$G(RORBUF(798,IENS,9.2,"I"))  ; EXTRACTED UNTIL
"RTN","RORRP020",125,0)
 S $P(ROR8DST,U,8)=$G(RORBUF(798,IENS,2,"I"))    ; DATE CONFIRMED
"RTN","RORRP020",126,0)
 ;
"RTN","RORRP020",127,0)
 ;--- Earliest selection rule
"RTN","RORRP020",128,0)
 S IENS=","_IENS,TMP="@;.01I;1I;2E"  K RORBUF
"RTN","RORRP020",129,0)
 D LIST^DIC(798.01,IENS,TMP,"PU",1,,,"AD",,,"RORBUF","RORMSG")
"RTN","RORRP020",130,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.01,IENS)
"RTN","RORRP020",131,0)
 I $G(RORBUF("DILIST",0))>0  S RC=0  D  Q:RC<0 RC
"RTN","RORRP020",132,0)
 . S TMP=$G(RORBUF("DILIST",1,0))
"RTN","RORRP020",133,0)
 . S $P(ROR8DST,U,7)=$P(TMP,U,3)                 ; DATE
"RTN","RORRP020",134,0)
 . S $P(ROR8DST,U,9)=$P(TMP,U,4)                 ; LOCATION
"RTN","RORRP020",135,0)
 . S IENS=+$P(TMP,U,2)_","
"RTN","RORRP020",136,0)
 . S TMP=$$GET1^DIQ(798.2,IENS,4,,,"RORMSG")
"RTN","RORRP020",137,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798.2,IENS)
"RTN","RORRP020",138,0)
 . S $P(ROR8DST,U,10)=TMP                        ; SELECTION RULE
"RTN","RORRP020",139,0)
 ;
"RTN","RORRP020",140,0)
 ;--- Action flags
"RTN","RORRP020",141,0)
 ; The actions and modes are enabled/disabled according to the
"RTN","RORRP020",142,0)
 ; following table:
"RTN","RORRP020",143,0)
 ;-----------------------------------------------------;
"RTN","RORRP020",144,0)
 ;   Actions    ;        Status of the patient         ;
"RTN","RORRP020",145,0)
 ;     and      ;--------------------------------------;
"RTN","RORRP020",146,0)
 ;    Modes     ;Not Added;Pending;Active;Inactive;Dead;
"RTN","RORRP020",147,0)
 ;--------------+---------+-------+------+--------+----;
"RTN","RORRP020",148,0)
 ; (C)DC        ;    D    ;   D   ;      ;        ;    ;
"RTN","RORRP020",149,0)
 ; (D)elete     ;    D    ;       ;      ;        ;    ;
"RTN","RORRP020",150,0)
 ; (E)dit       ;    D    ;       ;      ;        ;    ;
"RTN","RORRP020",151,0)
 ; Read (O)nly  ;         ;       ;      ;        ;    ;
"RTN","RORRP020",152,0)
 ;-----------------------------------------------------;
"RTN","RORRP020",153,0)
 ; D  the action is disabled if at least one of the marked
"RTN","RORRP020",154,0)
 ;    conditions is true;
"RTN","RORRP020",155,0)
 ;
"RTN","RORRP020",156,0)
 ; E  the action is enabled if at least one of the marked
"RTN","RORRP020",157,0)
 ;    conditions is true.
"RTN","RORRP020",158,0)
 ;---
"RTN","RORRP020",159,0)
 D
"RTN","RORRP020",160,0)
 . I $P(ROR8DST,U,2)=4  S FLAGS="DE"  Q    ; Pending
"RTN","RORRP020",161,0)
 . S FLAGS="CDE"
"RTN","RORRP020",162,0)
 S $P(ROR8DST,U,13)=FLAGS
"RTN","RORRP020",163,0)
 Q 0
"RTN","RORRP020",164,0)
 ;
"RTN","RORRP020",165,0)
 ;***** PERFORMS THE POST-PROCESSING OF THE LISTS
"RTN","RORRP020",166,0)
 ;
"RTN","RORRP020",167,0)
 ; RESULTS       Closed root of the array that contains the
"RTN","RORRP020",168,0)
 ;               results of the query
"RTN","RORRP020",169,0)
 ;
"RTN","RORRP020",170,0)
 ; REGIEN        Registry IEN
"RTN","RORRP020",171,0)
 ;
"RTN","RORRP020",172,0)
 ; FLAGS         Flags that control the execution
"RTN","RORRP020",173,0)
 ;
"RTN","RORRP020",174,0)
 ; Return Values:
"RTN","RORRP020",175,0)
 ;       <0  Error code
"RTN","RORRP020",176,0)
 ;        0  Ok
"RTN","RORRP020",177,0)
 ;
"RTN","RORRP020",178,0)
POSTPROC(RESULTS,REGIEN,FLAGS) ;
"RTN","RORRP020",179,0)
 N BUF,DOD,FNP,FO,IEN,IR,PATIEN,RC,TMP
"RTN","RORRP020",180,0)
 S FNP=($TR(FLAGS,"P")'=FLAGS),FO=(FLAGS["O")
"RTN","RORRP020",181,0)
 ;--- Process the resulting records
"RTN","RORRP020",182,0)
 S (IR,RC)=0
"RTN","RORRP020",183,0)
 F  S IR=$O(@RESULTS@(IR))  Q:IR'>0  D  Q:RC<0
"RTN","RORRP020",184,0)
 . S BUF=$G(@RESULTS@(IR,0)),PATIEN=+$P(BUF,U,2)
"RTN","RORRP020",185,0)
 . I PATIEN'>0  S PATIEN=+BUF  Q:PATIEN'>0
"RTN","RORRP020",186,0)
 . ;--- Load the required fields from the PATIENT file
"RTN","RORRP020",187,0)
 . Q:$$LOAD2(PATIEN,.BUF)<0
"RTN","RORRP020",188,0)
 . S DOD=$P(BUF,U,5)
"RTN","RORRP020",189,0)
 . S @RESULTS@(IR,0)=BUF
"RTN","RORRP020",190,0)
 . ;--- Add optional registry fields if necessary
"RTN","RORRP020",191,0)
 . I FO  D  Q:RC<0
"RTN","RORRP020",192,0)
 . . ;--- Get the IEN of the registry record
"RTN","RORRP020",193,0)
 . . S IEN=$$PRRIEN^RORUTL01(PATIEN,REGIEN)
"RTN","RORRP020",194,0)
 . . ;--- Try to load the data from the ROR REGISTRY RECORD file
"RTN","RORRP020",195,0)
 . . S RC=$$LOAD798(IEN,.BUF,DOD)
"RTN","RORRP020",196,0)
 . . S:RC'<0 @RESULTS@(IR,1)="O^"_BUF
"RTN","RORRP020",197,0)
 ;---
"RTN","RORRP020",198,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORRP026")
0^29^B70133465^B69411455
"RTN","RORRP026",1,0)
RORRP026 ;HCIOFO/SG - RPC: CDC UTILITIES ; 5/19/06 2:52pm
"RTN","RORRP026",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORRP026",3,0)
 ;
"RTN","RORRP026",4,0)
 ;--------------------------------------------------------------------
"RTN","RORRP026",5,0)
 ; Registry: [VA HIV]
"RTN","RORRP026",6,0)
 ;--------------------------------------------------------------------
"RTN","RORRP026",7,0)
 Q
"RTN","RORRP026",8,0)
 ;
"RTN","RORRP026",9,0)
 ;***** POPULATES THE FDA WITH THE CDC DATA
"RTN","RORRP026",10,0)
 ;
"RTN","RORRP026",11,0)
 ; IENS          IENS of the record in the ROR HIV STUDY file
"RTN","RORRP026",12,0)
 ;
"RTN","RORRP026",13,0)
 ; TBLREF        Reference to a field table in the source code
"RTN","RORRP026",14,0)
 ;
"RTN","RORRP026",15,0)
 ; SRCBUF        Source data segment
"RTN","RORRP026",16,0)
 ;
"RTN","RORRP026",17,0)
 ; .FDA          Reference to a local variable where the FDA
"RTN","RORRP026",18,0)
 ;               nodes are created
"RTN","RORRP026",19,0)
 ;
"RTN","RORRP026",20,0)
 ; [.CACHE]      Reference to a local variable where the field
"RTN","RORRP026",21,0)
 ;               lists are cached.
"RTN","RORRP026",22,0)
 ;
"RTN","RORRP026",23,0)
 ; Return Values:
"RTN","RORRP026",24,0)
 ;       <0  Error code
"RTN","RORRP026",25,0)
 ;        0  Ok
"RTN","RORRP026",26,0)
 ;
"RTN","RORRP026",27,0)
CDCFDA(IENS,TBLREF,SRCBUF,RORFDA,CACHE) ;
"RTN","RORRP026",28,0)
 N BUF,FLD,I,POS,RC,RESULT,RORMSG,TGET,TMP,VAL
"RTN","RORRP026",29,0)
 S RC=0
"RTN","RORRP026",30,0)
 ;--- Prepare the fields (if they are not in the cache already)
"RTN","RORRP026",31,0)
 I $D(CACHE("CDCFLDS",TBLREF))<10  D  Q:RC<0 RC
"RTN","RORRP026",32,0)
 . S TGET="S BUF=$T("_$P(TBLREF,"^")_"+I^"_$P(TBLREF,"^",2)_")"
"RTN","RORRP026",33,0)
 . F I=1:1  X TGET  S BUF=$P(BUF,";;",2,999)  Q:BUF=""  D
"RTN","RORRP026",34,0)
 . . S FLD=$TR($P(BUF,U,2)," ")  Q:FLD'>0
"RTN","RORRP026",35,0)
 . . S TMP=+$TR($P(BUF,U)," ")
"RTN","RORRP026",36,0)
 . . I TMP'>0  S CACHE("CDCFLDS",TBLREF,+FLD)=""  Q
"RTN","RORRP026",37,0)
 . . S:FLD["D" TMP=TMP_"D" ; MM/YY field
"RTN","RORRP026",38,0)
 . . S:FLD["R" TMP=TMP_"R" ; Read-only field
"RTN","RORRP026",39,0)
 . . S CACHE("CDCFLDS",TBLREF,+FLD,$S(FLD["E":"E",1:"I"))=TMP
"RTN","RORRP026",40,0)
 ;--- Store the data into the FDA
"RTN","RORRP026",41,0)
 S FLD="",RC=0
"RTN","RORRP026",42,0)
 F  S FLD=$O(CACHE("CDCFLDS",TBLREF,FLD))  Q:FLD=""  D  Q:RC
"RTN","RORRP026",43,0)
 . S POS=$G(CACHE("CDCFLDS",TBLREF,FLD,"I"))
"RTN","RORRP026",44,0)
 . I POS'>0  S POS=$G(CACHE("CDCFLDS",TBLREF,FLD,"E"))  Q:POS'>0
"RTN","RORRP026",45,0)
 . Q:POS["R"  ; Skip read-only fields
"RTN","RORRP026",46,0)
 . S VAL=$P(SRCBUF,U,+POS)
"RTN","RORRP026",47,0)
 . I VAL=""  S RORFDA(799.4,IENS,FLD)=""  Q
"RTN","RORRP026",48,0)
 . ;--- Process the 'YY/MM' date field
"RTN","RORRP026",49,0)
 . I POS["D"  D  Q
"RTN","RORRP026",50,0)
 . . S TMP=$$DATE1(VAL)
"RTN","RORRP026",51,0)
 . . I TMP<0  S RC=(+POS)_U_$P(SRCBUF,U)  Q
"RTN","RORRP026",52,0)
 . . S RORFDA(799.4,IENS,FLD)=TMP
"RTN","RORRP026",53,0)
 . ;--- Precede the internal pointer value with the "`"
"RTN","RORRP026",54,0)
 . I +VAL=VAL  S:$$GET1^DID(799.4,FLD,,"TYPE")="POINTER" VAL="`"_VAL
"RTN","RORRP026",55,0)
 . ;--- Validate the value and store it into the FDA
"RTN","RORRP026",56,0)
 . D VAL^DIE(799.4,IENS,FLD,"FU",VAL,.RESULT,"RORFDA","RORMSG")
"RTN","RORRP026",57,0)
 . S:RESULT="^" RC=(+POS)_U_$P(SRCBUF,U)
"RTN","RORRP026",58,0)
 Q RC
"RTN","RORRP026",59,0)
 ;
"RTN","RORRP026",60,0)
 ;***** FORMATS THE FILEMAN DATE AS 'MM/YY' OR 'YYYY'
"RTN","RORRP026",61,0)
DATE(DATE) ;
"RTN","RORRP026",62,0)
 Q:DATE'>0 ""
"RTN","RORRP026",63,0)
 N MMYY,MONTH
"RTN","RORRP026",64,0)
 S MMYY=$TR($$FMTE^XLFDT(DATE,"6DF")," ","0")
"RTN","RORRP026",65,0)
 S MONTH=$P(MMYY,"/",2)
"RTN","RORRP026",66,0)
 Q $S(MONTH'="00":MONTH_"/"_$E($P(MMYY,"/",3),3,4),1:$P(MMYY,"/",3))
"RTN","RORRP026",67,0)
 ;
"RTN","RORRP026",68,0)
 ;***** CONVERTS THE 'MM/YY' OR 'YYYY' INTO THE FILEMAN DATE
"RTN","RORRP026",69,0)
DATE1(MMYY) ;
"RTN","RORRP026",70,0)
 Q:$G(MMYY)="" ""
"RTN","RORRP026",71,0)
 N DATE
"RTN","RORRP026",72,0)
 ;--- Just a year (YY or YYYY)
"RTN","RORRP026",73,0)
 I MMYY?.1(2N)2N  D  Q $G(DATE,-1)
"RTN","RORRP026",74,0)
 . D DT^DILF("EP",MMYY,.DATE)
"RTN","RORRP026",75,0)
 ;--- Month and year
"RTN","RORRP026",76,0)
 D DT^DILF("EP",$P(MMYY,"/",2),.DATE)
"RTN","RORRP026",77,0)
 I $G(DATE)>0  D  D DT^DILF("P",MMYY,.DATE)
"RTN","RORRP026",78,0)
 . S $P(MMYY,"/",2)=$G(DATE(0))
"RTN","RORRP026",79,0)
 Q $G(DATE,-1)
"RTN","RORRP026",80,0)
 ;
"RTN","RORRP026",81,0)
 ;***** LOADS THE DATA FROM THE 'ROR HIV STUDY' FILE
"RTN","RORRP026",82,0)
 ;
"RTN","RORRP026",83,0)
 ; IENS          IENS of the record in the ROR HIV STUDY file
"RTN","RORRP026",84,0)
 ;
"RTN","RORRP026",85,0)
 ; TBLREF        Reference to a field table in the source code
"RTN","RORRP026",86,0)
 ;
"RTN","RORRP026",87,0)
 ; DSTBUF        Reference to a local variable where the data
"RTN","RORRP026",88,0)
 ;               is returned to
"RTN","RORRP026",89,0)
 ;
"RTN","RORRP026",90,0)
 ; [.RORBUF]     Reference to a local variable where the source
"RTN","RORRP026",91,0)
 ;               field values are returned to (by GETS^DIQ)
"RTN","RORRP026",92,0)
 ;
"RTN","RORRP026",93,0)
 ; [.CACHE]      Reference to a local variable where the field
"RTN","RORRP026",94,0)
 ;               lists are cached.
"RTN","RORRP026",95,0)
 ;
"RTN","RORRP026",96,0)
 ; Return Values:
"RTN","RORRP026",97,0)
 ;       <0  Error code
"RTN","RORRP026",98,0)
 ;        0  Ok
"RTN","RORRP026",99,0)
 ;
"RTN","RORRP026",100,0)
LOAD(IENS,TBLREF,DSTBUF,RORBUF,CACHE) ;
"RTN","RORRP026",101,0)
 N BUF,FLD,I,RC,RORMSG,TGET,TMP
"RTN","RORRP026",102,0)
 S RC=0
"RTN","RORRP026",103,0)
 ;--- Prepare the fields (if they are not in the cache already)
"RTN","RORRP026",104,0)
 I $D(CACHE("CDCFLDS",TBLREF))<10  D  Q:RC<0 RC
"RTN","RORRP026",105,0)
 . S TGET="S BUF=$T("_$P(TBLREF,"^")_"+I^"_$P(TBLREF,"^",2)_")"
"RTN","RORRP026",106,0)
 . F I=1:1  X TGET  S BUF=$P(BUF,";;",2,999)  Q:BUF=""  D
"RTN","RORRP026",107,0)
 . . S FLD=$TR($P(BUF,U,2)," ")  Q:FLD'>0
"RTN","RORRP026",108,0)
 . . S TMP=+$TR($P(BUF,U)," ")
"RTN","RORRP026",109,0)
 . . I TMP'>0  S CACHE("CDCFLDS",TBLREF,+FLD)=""  Q
"RTN","RORRP026",110,0)
 . . S:FLD["D" TMP=TMP_"D"
"RTN","RORRP026",111,0)
 . . S CACHE("CDCFLDS",TBLREF,+FLD,$S(FLD["E":"E",1:"I"))=TMP
"RTN","RORRP026",112,0)
 . ;--- Create the list of fields for the GETS^DIQ
"RTN","RORRP026",113,0)
 . S (CACHE("CDCFLDS",TBLREF),FLD)=""
"RTN","RORRP026",114,0)
 . F  S FLD=$O(CACHE("CDCFLDS",TBLREF,FLD))  Q:FLD=""  D
"RTN","RORRP026",115,0)
 . . S CACHE("CDCFLDS",TBLREF)=CACHE("CDCFLDS",TBLREF)_FLD_";"
"RTN","RORRP026",116,0)
 ;--- Load the data from the file
"RTN","RORRP026",117,0)
 D GETS^DIQ(799.4,IENS,CACHE("CDCFLDS",TBLREF),"EI","RORBUF","RORMSG")
"RTN","RORRP026",118,0)
 I $G(DIERR)  D  Q RC
"RTN","RORRP026",119,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,799.4,IENS)
"RTN","RORRP026",120,0)
 ;--- Store the data into the output buffer
"RTN","RORRP026",121,0)
 S FLD=""
"RTN","RORRP026",122,0)
 F  S FLD=$O(CACHE("CDCFLDS",TBLREF,FLD))  Q:FLD=""  D
"RTN","RORRP026",123,0)
 . S I=""
"RTN","RORRP026",124,0)
 . F  S I=$O(CACHE("CDCFLDS",TBLREF,FLD,I))  Q:I=""  D
"RTN","RORRP026",125,0)
 . . S TMP=CACHE("CDCFLDS",TBLREF,FLD,I)
"RTN","RORRP026",126,0)
 . . I '(TMP["D")  S $P(DSTBUF,U,+TMP)=$G(RORBUF(799.4,IENS,FLD,I))  Q
"RTN","RORRP026",127,0)
 . . S $P(DSTBUF,U,+TMP)=$$DATE($G(RORBUF(799.4,IENS,FLD,"I")))
"RTN","RORRP026",128,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORRP026",129,0)
 ;
"RTN","RORRP026",130,0)
 ;***** RETURNS DATE FIELD NUMBER FOR THE POSITIVE HIV DETECTION TEST
"RTN","RORRP026",131,0)
PHIVFLD(TYPE) ;
"RTN","RORRP026",132,0)
 Q $S(TYPE=1:18.01,TYPE=2:18.02,TYPE=3:18.03,1:0)
"RTN","RORRP026",133,0)
 Q
"RTN","RORRP026",134,0)
 ;
"RTN","RORRP026",135,0)
CDCFLDS ;***** CDC FIELD TABLE
"RTN","RORRP026",136,0)
HDR ;
"RTN","RORRP026",137,0)
 ;;  3 ^  9.01I  ^ DATE CDC FORM COMPLETED
"RTN","RORRP026",138,0)
 ;;  4 ^         ^ CDC FORM COMPLETED BY (DUZ)
"RTN","RORRP026",139,0)
 ;;  5 ^         ^ CDC FORM COMPLETED BY (Name)
"RTN","RORRP026",140,0)
 ;;  6 ^         ^ Phone number of the person completed the form
"RTN","RORRP026",141,0)
CDM ;
"RTN","RORRP026",142,0)
 ;;  3 ^  9.02I  ^ STATUS AT REPORT
"RTN","RORRP026",143,0)
 ;;    ^  9.03I  ^ AGE AT HIV DIAGNOSIS
"RTN","RORRP026",144,0)
 ;;    ^  9.04I  ^ AGE AT AIDS DIAGNOSIS
"RTN","RORRP026",145,0)
 ;;  5 ^  9.9ER  ^ PATIENT STATUS
"RTN","RORRP026",146,0)
 ;;  6 ^  9.06I  ^ STATE/TERRITORY OF DEATH
"RTN","RORRP026",147,0)
 ;;  7 ^  9.07I  ^ COUNTRY OF BIRTH
"RTN","RORRP026",148,0)
 ;;    ^  9.08I  ^ DEPENDENCY OR POSSESSION NAME
"RTN","RORRP026",149,0)
 ;;    ^  9.09I  ^ OTHER COUNTRY DESCRIPTION
"RTN","RORRP026",150,0)
 ;;  9 ^  9.1I   ^ ONSET OF ILLNESS/AIDS- CITY
"RTN","RORRP026",151,0)
 ;; 10 ^  9.11I  ^ ONSET OF ILLNESS/AIDS- COUNTY
"RTN","RORRP026",152,0)
 ;; 11 ^  9.12I  ^ ONSET OF ILLNESS/AIDS- STATE (IEN)
"RTN","RORRP026",153,0)
 ;; 12 ^  9.12E  ^ ONSET OF ILLNESS/AIDS- STATE (Name)
"RTN","RORRP026",154,0)
 ;; 13 ^  9.13I  ^ ONSET OF ILLNESS/AIDS- COUNTRY
"RTN","RORRP026",155,0)
 ;; 14 ^  9.14I  ^ ONSET OF ILLNESS/AIDS- ZIP
"RTN","RORRP026",156,0)
FD ;
"RTN","RORRP026",157,0)
 ;;  3 ^ 12.01I  ^ AIDS DX - HOSPITAL
"RTN","RORRP026",158,0)
 ;;  4 ^ 12.02I  ^ AIDS DX - CITY
"RTN","RORRP026",159,0)
 ;;  5 ^ 12.03I  ^ AIDS DX - STATE (IEN)
"RTN","RORRP026",160,0)
 ;;  6 ^ 12.03E  ^ AIDS DX - STATE (Name)
"RTN","RORRP026",161,0)
 ;;  7 ^ 12.04I  ^ AIDS DX - COUNTRY
"RTN","RORRP026",162,0)
 ;;  8 ^ 12.05I  ^ AIDS DX - FACILITY SETTING
"RTN","RORRP026",163,0)
 ;;  9 ^ 12.06I  ^ AIDS DX - FACILITY TYPE
"RTN","RORRP026",164,0)
 ;; 10 ^ 12.07I  ^ AIDS DX - OTHER FACILITY TYPE
"RTN","RORRP026",165,0)
 ;
"RTN","RORRP026",166,0)
PH ;
"RTN","RORRP026",167,0)
 ;;  3 ^ 14.01I  ^ SEX RELATIONS W/MALE PARTNER
"RTN","RORRP026",168,0)
 ;;  4 ^ 14.02I  ^ SEX RELATIONS W/FEMALE PARTNER
"RTN","RORRP026",169,0)
 ;;  5 ^ 14.03I  ^ IV DRUGS AFTER 77 AND PRE HIV
"RTN","RORRP026",170,0)
 ;;  6 ^ 14.04I  ^ REC'D CLOTTING FACTORS
"RTN","RORRP026",171,0)
 ;;  7 ^ 14.05I  ^ TYPE OF HEMOPHILIA
"RTN","RORRP026",172,0)
 ;;  8 ^ 14.06I  ^ OTHER HEMOPHILIA DESCRIPTION
"RTN","RORRP026",173,0)
 ;;  9 ^ 14.07I  ^ SR WITH IV DRUG USER
"RTN","RORRP026",174,0)
 ;; 10 ^ 14.08I  ^ SR WITH BISEXUAL MAN
"RTN","RORRP026",175,0)
 ;; 11 ^ 14.09I  ^ SR W HEMOPHILIA/COAG DISORDER
"RTN","RORRP026",176,0)
 ;; 12 ^ 14.1I   ^ SR W TRANS RECIPIENT WITH AIDS
"RTN","RORRP026",177,0)
 ;; 13 ^ 14.11I  ^ TRANSPLANT RECIP-DOCUMNTD HIV
"RTN","RORRP026",178,0)
 ;; 14 ^ 14.12I  ^ SR W AIDS/HIV INFECTION
"RTN","RORRP026",179,0)
 ;; 15 ^ 14.13I  ^ TRANS AFTER 77 AND BEFORE HIV
"RTN","RORRP026",180,0)
 ;; 16 ^ 14.14ID ^ DATE OF FIRST TRANSFUSION
"RTN","RORRP026",181,0)
 ;; 17 ^ 14.15ID ^ DATE OF LAST TRANSFUSION
"RTN","RORRP026",182,0)
 ;; 18 ^ 14.16I  ^ TRANSPLANT OR ARTIF INSEMIN
"RTN","RORRP026",183,0)
 ;; 19 ^ 14.17I  ^ WORK IN HEALTH CARE OR LAB
"RTN","RORRP026",184,0)
 ;; 20 ^ 14.18I  ^ OCCUPATION
"RTN","RORRP026",185,0)
LD1 ;
"RTN","RORRP026",186,0)
 ;;  3 ^ 16.01I  ^ HIV-1 EIA
"RTN","RORRP026",187,0)
 ;;  4 ^ 16.02ID ^ HIV-1 EIA DATE
"RTN","RORRP026",188,0)
 ;;  5 ^ 16.03I  ^ HIV-1/HIV-2 EIA
"RTN","RORRP026",189,0)
 ;;  6 ^ 16.04ID ^ HIV-1/HIV-2 EIA DATE
"RTN","RORRP026",190,0)
 ;;  7 ^ 16.05I  ^ HIV-1 WESTERN BLOT/IFA
"RTN","RORRP026",191,0)
 ;;  8 ^ 16.06ID ^ HIV-1 WESTERN BLOT/IFA DATE
"RTN","RORRP026",192,0)
 ;;  9 ^ 16.07I  ^ OTHER HIV ANTIBODY TEST
"RTN","RORRP026",193,0)
 ;; 10 ^ 16.08ID ^ OTHER HIV ANTIBODY TEST DATE
"RTN","RORRP026",194,0)
 ;; 11 ^ 16.09I  ^ OTHER HIV ANTIBODY TEST DESC
"RTN","RORRP026",195,0)
 ;; 12 ^ 18.13I  ^ POSITIVE HIV DETECTION TEST
"RTN","RORRP026",196,0)
 ;;    ^ 18.01I  ^ HIV CULTURE DETECTION TEST
"RTN","RORRP026",197,0)
 ;;    ^ 18.02I  ^ HIV ANTIGEN DETECTION TEST
"RTN","RORRP026",198,0)
 ;;    ^ 18.03I  ^ HIV PCR, DNA, OR RNA PROBE
"RTN","RORRP026",199,0)
 ;; 14 ^ 18.04I  ^ TYPE OF OTHER POSITIVE TEST
"RTN","RORRP026",200,0)
 ;; 15 ^ 18.05ID ^ DATE OTHER POS DETECTION TEST
"RTN","RORRP026",201,0)
 ;; 16 ^ 18.1I   ^ DETECTABLE VIRAL LOAD TEST
"RTN","RORRP026",202,0)
 ;; 17 ^ 18.11I  ^ DETECTABLE VIRAL LOAD RESULT
"RTN","RORRP026",203,0)
 ;; 18 ^ 18.12ID ^ DETECTABLE VIRAL LOAD DATE
"RTN","RORRP026",204,0)
LD2 ;
"RTN","RORRP026",205,0)
 ;;  3 ^ 18.07I  ^ TYPE FOR LAST NEG TEST
"RTN","RORRP026",206,0)
 ;;  4 ^ 18.06ID ^ LAST DOCUMNTD NEG HIV TEST
"RTN","RORRP026",207,0)
 ;;  5 ^ 18.08I  ^ PHYS DOCUMNTD DIAGNOSIS?
"RTN","RORRP026",208,0)
 ;;  6 ^ 18.09ID ^ DATE PHYS DOCUMNTD DIAG
"RTN","RORRP026",209,0)
 ;;  7 ^ 20.01I  ^ CD4+ COUNT FOR CDC
"RTN","RORRP026",210,0)
 ;;  8 ^ 20.02ID ^ CD4+ COUNT FOR CDC DATE
"RTN","RORRP026",211,0)
 ;;  9 ^ 20.03I  ^ CD4+ PERCENT FOR CDC
"RTN","RORRP026",212,0)
 ;; 10 ^ 20.04ID ^ CD4+ PERCENT FOR CDC DATE
"RTN","RORRP026",213,0)
 ;; 11 ^ 20.05I  ^ CD4 COUNT FIRST <200
"RTN","RORRP026",214,0)
 ;; 12 ^ 20.06ID ^ CD4 COUNT FIRST <200 DATE
"RTN","RORRP026",215,0)
 ;; 13 ^ 20.07I  ^ CD4 PERCENT FIRST <14%
"RTN","RORRP026",216,0)
 ;; 14 ^ 20.08ID ^ CD4 PERCENT FIRST <14% DATE
"RTN","RORRP026",217,0)
CS ;
"RTN","RORRP026",218,0)
 ;;  3 ^ 11.01I  ^ RECORD REVIEWED
"RTN","RORRP026",219,0)
 ;;  4 ^ 11.02ID ^ DATE ASYMPTOMATIC
"RTN","RORRP026",220,0)
 ;;  5 ^ 11.03ID ^ DATE SYMPTOMATIC
"RTN","RORRP026",221,0)
 ;;  6 ^ 11.05I  ^ RVCT CASE NO.
"RTN","RORRP026",222,0)
 ;;  7 ^ 11.04I  ^ IMMUNODEF THAT DISQUALIFIES
"RTN","RORRP026",223,0)
TS1 ;
"RTN","RORRP026",224,0)
 ;;  3 ^ 22.01I  ^ PATIENT BEEN INFORMED OF HIV
"RTN","RORRP026",225,0)
 ;;  4 ^ 22.02I  ^ PARTNERS NOTIFIED BY
"RTN","RORRP026",226,0)
 ;;  5 ^ 22.03I  ^ HIV RELATED MED SERVICES
"RTN","RORRP026",227,0)
 ;;  6 ^ 22.09I  ^ SUBSTANCE ABUSE TREATMENT
"RTN","RORRP026",228,0)
 ;;  7 ^ 22.04I  ^ RCVD ANTI-RETROVIRAL THERAPY
"RTN","RORRP026",229,0)
 ;;  8 ^ 22.05I  ^ RECEIVED PCP PROPHYLAXIS
"RTN","RORRP026",230,0)
 ;;  9 ^ 22.06I  ^ ENROLLED AT CLINCAL TRIAL
"RTN","RORRP026",231,0)
 ;; 10 ^ 22.07I  ^ ENROLLED AT CLINIC
"RTN","RORRP026",232,0)
 ;; 11 ^ 22.08I  ^ PRIMARY REIMBURSER FOR MED RX
"RTN","RORRP026",233,0)
TS2 ;
"RTN","RORRP026",234,0)
 ;;  3 ^ 23.01I  ^ GYNECOLOGY OR OBSTETRIC CARE
"RTN","RORRP026",235,0)
 ;;  4 ^ 23.02I  ^ CURRENTLY PREGNANT
"RTN","RORRP026",236,0)
 ;;  5 ^ 23.03I  ^ DELIVERED LIVE BORN INFANT
"RTN","RORRP026",237,0)
 ;;  6 ^ 23.04I  ^ CHILD'S DATE OF BIRTH
"RTN","RORRP026",238,0)
 ;;  7 ^ 23.05I  ^ CHILD'S HOSPITAL OF BIRTH
"RTN","RORRP026",239,0)
 ;;  8 ^ 23.06I  ^ CHILD'S HOSPITAL - CITY
"RTN","RORRP026",240,0)
 ;;  9 ^ 23.07I  ^ CHILD'S HOSPITAL - STATE
"RTN","RORRP027")
0^48^B53199724^B51310426
"RTN","RORRP027",1,0)
RORRP027 ;HCIOFO/SG - RPC: RORICR CDC SAVE ; 10/16/06 1:58pm
"RTN","RORRP027",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORRP027",3,0)
 ;
"RTN","RORRP027",4,0)
 ;--------------------------------------------------------------------
"RTN","RORRP027",5,0)
 ; Registry: [VA HIV]
"RTN","RORRP027",6,0)
 ;--------------------------------------------------------------------
"RTN","RORRP027",7,0)
 Q
"RTN","RORRP027",8,0)
 ;
"RTN","RORRP027",9,0)
 ;***** AIDS INDICATOR DISEASE (VIII)
"RTN","RORRP027",10,0)
AID(IENS) ;
"RTN","RORRP027",11,0)
 N CODE,RC,TMP
"RTN","RORRP027",12,0)
 S CODE=+$P(RORDATA(RORPTR),U,2)
"RTN","RORRP027",13,0)
 Q:CODE'>0 "2^AID"_U_CODE
"RTN","RORRP027",14,0)
 ;--- Initial diagnosis
"RTN","RORRP027",15,0)
 S RORAILST(CODE)=$P(RORDATA(RORPTR),U,3)
"RTN","RORRP027",16,0)
 ;--- Initial date
"RTN","RORRP027",17,0)
 S TMP=$$DATE1^RORRP026($P(RORDATA(RORPTR),U,4))
"RTN","RORRP027",18,0)
 Q:TMP<0 "4^AID"_U_CODE
"RTN","RORRP027",19,0)
 S $P(RORAILST(CODE),U,2)=TMP
"RTN","RORRP027",20,0)
 Q 0
"RTN","RORRP027",21,0)
 ;
"RTN","RORRP027",22,0)
 ;***** STORES THE AIDS INDICATOR DICEASES INTO THE FDA
"RTN","RORRP027",23,0)
AIDSTORE() ;
"RTN","RORRP027",24,0)
 N CODE,DATE,DTMIN,II,NODE,RC,TMP
"RTN","RORRP027",25,0)
 S NODE=$$ROOT^DILFD(799.41,","_IENS,1)
"RTN","RORRP027",26,0)
 S RC=0,DTMIN=""
"RTN","RORRP027",27,0)
 ;--- Mark the old records for removal
"RTN","RORRP027",28,0)
 S CODE=0
"RTN","RORRP027",29,0)
 F  S CODE=$O(@NODE@(CODE))  Q:CODE'>0  D:'$D(RORAILST(CODE))
"RTN","RORRP027",30,0)
 . S RORFDAFI(799.41,CODE_","_IENS,.01)="@"
"RTN","RORRP027",31,0)
 ;--- Prepare the records to be added/updated
"RTN","RORRP027",32,0)
 S II=+$O(RORIEN(""),-1)
"RTN","RORRP027",33,0)
 S CODE=0
"RTN","RORRP027",34,0)
 F  S CODE=$O(RORAILST(CODE))  Q:CODE'>0  D
"RTN","RORRP027",35,0)
 . S DATE=$P(RORAILST(CODE),U,2)
"RTN","RORRP027",36,0)
 . I DATE>0  S:(DATE<DTMIN)!(DTMIN'>0) DTMIN=DATE
"RTN","RORRP027",37,0)
 . ;--- Update the record
"RTN","RORRP027",38,0)
 . I $D(@NODE@(CODE))  D  Q
"RTN","RORRP027",39,0)
 . . S TMP=CODE_","_IENS
"RTN","RORRP027",40,0)
 . . S RORFDAFI(799.41,TMP,.02)=$P(RORAILST(CODE),U,1)
"RTN","RORRP027",41,0)
 . . S RORFDAFI(799.41,TMP,.03)=DATE
"RTN","RORRP027",42,0)
 . ;--- Add the record
"RTN","RORRP027",43,0)
 . S II=II+1,RORIEN(II)=CODE,TMP="?+"_II_","_IENS
"RTN","RORRP027",44,0)
 . S RORFDAUP(799.41,TMP,.01)=CODE
"RTN","RORRP027",45,0)
 . S RORFDAUP(799.41,TMP,.02)=$P(RORAILST(CODE),U,1)
"RTN","RORRP027",46,0)
 . S RORFDAUP(799.41,TMP,.03)=DATE
"RTN","RORRP027",47,0)
 ;--- Populate the CLINICAL AIDS fields (if they are empty)
"RTN","RORRP027",48,0)
 K TMP  S TMP(1)=+IENS
"RTN","RORRP027",49,0)
 D AIDSOI^RORDD01(.TMP,DTMIN)
"RTN","RORRP027",50,0)
 ;---
"RTN","RORRP027",51,0)
 Q RC
"RTN","RORRP027",52,0)
 ;
"RTN","RORRP027",53,0)
 ;***** CANCELS THE EDITING
"RTN","RORRP027",54,0)
 ; RPC: [RORICR CDC CANCEL]
"RTN","RORRP027",55,0)
 ;
"RTN","RORRP027",56,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP027",57,0)
 ;               are returned to.
"RTN","RORRP027",58,0)
 ;
"RTN","RORRP027",59,0)
 ; REGIEN        Registry IEN
"RTN","RORRP027",60,0)
 ;
"RTN","RORRP027",61,0)
 ; PATIEN        IEN of the registry patient (DFN)
"RTN","RORRP027",62,0)
 ;
"RTN","RORRP027",63,0)
 ; Return Values:
"RTN","RORRP027",64,0)
 ;
"RTN","RORRP027",65,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP027",66,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP027",67,0)
 ; details).
"RTN","RORRP027",68,0)
 ;
"RTN","RORRP027",69,0)
 ; Otherwise, zero is returned in the RESULTS(0).
"RTN","RORRP027",70,0)
 ;
"RTN","RORRP027",71,0)
CANCEL(RESULTS,REGIEN,PATIEN) ;
"RTN","RORRP027",72,0)
 N IENS,RC,RORERRDL
"RTN","RORRP027",73,0)
 D CLEAR^RORERR("CANCEL^RORRP027",1)  K RESULTS
"RTN","RORRP027",74,0)
 ;--- Check the parameters
"RTN","RORRP027",75,0)
 S RC=0  D  I RC<0  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP027",76,0)
 . ;--- Registry IEN
"RTN","RORRP027",77,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP027",78,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP027",79,0)
 . S REGIEN=+REGIEN
"RTN","RORRP027",80,0)
 . ;--- Patient IEN
"RTN","RORRP027",81,0)
 . I $G(PATIEN)'>0  D  Q
"RTN","RORRP027",82,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"PATIEN",$G(PATIEN))
"RTN","RORRP027",83,0)
 . S PATIEN=+PATIEN
"RTN","RORRP027",84,0)
 ;
"RTN","RORRP027",85,0)
 ;--- Get the IENS of the registry record
"RTN","RORRP027",86,0)
 S IENS=$$PRRIEN^RORUTL01(PATIEN,REGIEN)_","
"RTN","RORRP027",87,0)
 ;
"RTN","RORRP027",88,0)
 ;--- Unlock the records
"RTN","RORRP027",89,0)
 I IENS>0  D  I RC<0  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP027",90,0)
 . S RC=$$UNLOCK^RORLOCK(799.4,IENS)
"RTN","RORRP027",91,0)
 S RESULTS(0)=0
"RTN","RORRP027",92,0)
 Q
"RTN","RORRP027",93,0)
 ;
"RTN","RORRP027",94,0)
 ;***** DEMOGRAPHIC INFORMATION (III)
"RTN","RORRP027",95,0)
CDM(IENS) ;
"RTN","RORRP027",96,0)
 N BUF,RC,TMP
"RTN","RORRP027",97,0)
 S BUF=RORDATA(RORPTR)
"RTN","RORRP027",98,0)
 S RC=$$CDCFDA^RORRP026(IENS,"CDM^RORRP026",BUF,.RORFDAFI)
"RTN","RORRP027",99,0)
 Q:RC RC
"RTN","RORRP027",100,0)
 ;--- Default values
"RTN","RORRP027",101,0)
 F TMP=9.04,9.08,9.09  S RORFDAFI(799.4,IENS,TMP)=""
"RTN","RORRP027",102,0)
 ;--- Age at diagnosis
"RTN","RORRP027",103,0)
 S TMP=+$P(BUF,U,3)
"RTN","RORRP027",104,0)
 I TMP  Q:$P(BUF,U,4)'?.2N "4^CDM"  D
"RTN","RORRP027",105,0)
 . S:TMP=1 RORFDAFI(799.4,IENS,9.03)=$P(BUF,U,4)
"RTN","RORRP027",106,0)
 . S:TMP=2 RORFDAFI(799.4,IENS,9.04)=$P(BUF,U,4)
"RTN","RORRP027",107,0)
 ;--- Country of birth
"RTN","RORRP027",108,0)
 S TMP=+$P(BUF,U,7)
"RTN","RORRP027",109,0)
 S:TMP=7 RORFDAFI(799.4,IENS,9.08)=$P(BUF,U,8)
"RTN","RORRP027",110,0)
 S:TMP=8 RORFDAFI(799.4,IENS,9.09)=$P(BUF,U,8)
"RTN","RORRP027",111,0)
 Q 0
"RTN","RORRP027",112,0)
 ;
"RTN","RORRP027",113,0)
 ;***** COMMENTS (X)
"RTN","RORRP027",114,0)
CMT(IENS) ;
"RTN","RORRP027",115,0)
 N CNT,NE,PTR,RC,SEG,TMP  K RORCMT
"RTN","RORRP027",116,0)
 ;--- Load the comments
"RTN","RORRP027",117,0)
 S PTR=RORPTR,(CNT,NE,RC)=0
"RTN","RORRP027",118,0)
 F  D  Q:RC!(SEG'="CMT")  S PTR=$O(RORDATA(PTR))  Q:PTR=""
"RTN","RORRP027",119,0)
 . S SEG=$P(RORDATA(PTR),U)  Q:SEG'="CMT"
"RTN","RORRP027",120,0)
 . S RORPTR=PTR  Q:CNT'<3
"RTN","RORRP027",121,0)
 . S TMP=$P(RORDATA(RORPTR),U,3)
"RTN","RORRP027",122,0)
 . S CNT=CNT+1,RORCMT(CNT)=TMP
"RTN","RORRP027",123,0)
 . S:TMP'="" NE=NE+1
"RTN","RORRP027",124,0)
 ;--- Store the reference into the FDA
"RTN","RORRP027",125,0)
 S RORFDAFI(799.4,IENS,25)=$S(NE>0:"RORCMT",1:"@")
"RTN","RORRP027",126,0)
 Q RC
"RTN","RORRP027",127,0)
 ;
"RTN","RORRP027",128,0)
 ;***** CLINICAL STATUS (VIII)
"RTN","RORRP027",129,0)
CS(IENS) ;
"RTN","RORRP027",130,0)
 N RC,TMP
"RTN","RORRP027",131,0)
 S RC=$$CDCFDA^RORRP026(IENS,"CS^RORRP026",RORDATA(RORPTR),.RORFDAFI)
"RTN","RORRP027",132,0)
 Q RC
"RTN","RORRP027",133,0)
 ;
"RTN","RORRP027",134,0)
 ;***** PROCESSES THE ERROR(S) AND UNLOCKS THE RECORDS
"RTN","RORRP027",135,0)
ERROR(RESULTS,RC) ;
"RTN","RORRP027",136,0)
 D RPCSTK^RORERR(.RESULTS,RC)
"RTN","RORRP027",137,0)
 D UNLOCK^RORLOCK(.RORLOCK)
"RTN","RORRP027",138,0)
 Q
"RTN","RORRP027",139,0)
 ;
"RTN","RORRP027",140,0)
 ;***** FACILITY OF DIAGNOSIS (IV)
"RTN","RORRP027",141,0)
FD(IENS) ;
"RTN","RORRP027",142,0)
 N RC,TMP
"RTN","RORRP027",143,0)
 S RC=$$CDCFDA^RORRP026(IENS,"FD^RORRP026",RORDATA(RORPTR),.RORFDAFI)
"RTN","RORRP027",144,0)
 Q RC
"RTN","RORRP027",145,0)
 ;
"RTN","RORRP027",146,0)
 ;***** FORM HEADERS
"RTN","RORRP027",147,0)
HDR(IENS) ;
"RTN","RORRP027",148,0)
 N RC,TMP
"RTN","RORRP027",149,0)
 S RC=$$CDCFDA^RORRP026(IENS,"HDR^RORRP026",RORDATA(RORPTR),.RORFDAFI)
"RTN","RORRP027",150,0)
 ;--- Person who completed the form
"RTN","RORRP027",151,0)
 S RORFDAFI(799.4,IENS,9.05)=DUZ
"RTN","RORRP027",152,0)
 Q RC
"RTN","RORRP027",153,0)
 ;
"RTN","RORRP027",154,0)
 ;***** LABORATORY DATA (VI)
"RTN","RORRP027",155,0)
LD1(IENS) ;
"RTN","RORRP027",156,0)
 N BUF,FLD,DATE,RC,TMP
"RTN","RORRP027",157,0)
 S BUF=RORDATA(RORPTR)
"RTN","RORRP027",158,0)
 S RC=$$CDCFDA^RORRP026(IENS,"LD1^RORRP026",BUF,.RORFDAFI)
"RTN","RORRP027",159,0)
 Q:RC RC
"RTN","RORRP027",160,0)
 ;--- Positive HIV detection test
"RTN","RORRP027",161,0)
 S FLD=$$PHIVFLD^RORRP026($P(BUF,U,12))
"RTN","RORRP027",162,0)
 I FLD  S RC=0  D  Q:RC RC
"RTN","RORRP027",163,0)
 . S DATE=$$DATE1^RORRP026($P(BUF,U,13))
"RTN","RORRP027",164,0)
 . I DATE<0  S RC="13^LD1"  Q
"RTN","RORRP027",165,0)
 . S RORFDAFI(799.4,IENS,FLD)=DATE
"RTN","RORRP027",166,0)
 Q 0
"RTN","RORRP027",167,0)
 ;
"RTN","RORRP027",168,0)
LD2(IENS) ;
"RTN","RORRP027",169,0)
 N RC,TMP
"RTN","RORRP027",170,0)
 S RC=$$CDCFDA^RORRP026(IENS,"LD2^RORRP026",RORDATA(RORPTR),.RORFDAFI)
"RTN","RORRP027",171,0)
 Q RC
"RTN","RORRP027",172,0)
 ;
"RTN","RORRP027",173,0)
 ;***** PATIENT HISTORY (V)
"RTN","RORRP027",174,0)
PH(IENS) ;
"RTN","RORRP027",175,0)
 N RC,TMP
"RTN","RORRP027",176,0)
 S RC=$$CDCFDA^RORRP026(IENS,"PH^RORRP026",RORDATA(RORPTR),.RORFDAFI)
"RTN","RORRP027",177,0)
 Q RC
"RTN","RORRP027",178,0)
 ;
"RTN","RORRP027",179,0)
 ;***** UPDATES THE CDC DATA
"RTN","RORRP027",180,0)
 ; RPC: [RORICR CDC SAVE]
"RTN","RORRP027",181,0)
 ;
"RTN","RORRP027",182,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP027",183,0)
 ;               are returned to.
"RTN","RORRP027",184,0)
 ;
"RTN","RORRP027",185,0)
 ; REGIEN        Registry IEN
"RTN","RORRP027",186,0)
 ;
"RTN","RORRP027",187,0)
 ; PATIEN        IEN of the registry patient (DFN)
"RTN","RORRP027",188,0)
 ;
"RTN","RORRP027",189,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORRP027",190,0)
 ;                 H  Update the patient history. If this flag is
"RTN","RORRP027",191,0)
 ;                    not provided, the PH data segment is ignored.
"RTN","RORRP027",192,0)
 ;
"RTN","RORRP027",193,0)
 ; .RORDATA      Reference to a local array that contains the CDC
"RTN","RORRP027",194,0)
 ;               data in the same format as the output of the RORICR
"RTN","RORRP027",195,0)
 ;               CDC LOAD remote procedure (see the LOADCDC^RORRP025
"RTN","RORRP027",196,0)
 ;               and description of the RPC for more details).
"RTN","RORRP027",197,0)
 ;
"RTN","RORRP027",198,0)
 ; NOTE #1: The CS data segment must be always included before the
"RTN","RORRP027",199,0)
 ;          AID segments. Otherwise, the latter will be ignored.
"RTN","RORRP027",200,0)
 ;
"RTN","RORRP027",201,0)
 ; NOTE #2: Any AIDS indicator disease, which has empty 3rd piece
"RTN","RORRP027",202,0)
 ;          in the corresponding AID segment (or no segment at all),
"RTN","RORRP027",203,0)
 ;          will be removed from the patient record.
"RTN","RORRP027",204,0)
 ;
"RTN","RORRP027",205,0)
 ; NOTE #3: There should be at least one empty comment (i.e. the
"RTN","RORRP027",206,0)
 ;          "CMT^1" segment) among the data if you want to clear
"RTN","RORRP027",207,0)
 ;          the CDC comments. Otherwise, they will not be updated.
"RTN","RORRP027",208,0)
 ;
"RTN","RORRP027",209,0)
 ; Return Values:
"RTN","RORRP027",210,0)
 ;
"RTN","RORRP027",211,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP027",212,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP027",213,0)
 ; details).
"RTN","RORRP027",214,0)
 ;
"RTN","RORRP027",215,0)
 ; Positive value of the first "^"-piece of the RESULTS(0) indicates
"RTN","RORRP027",216,0)
 ; an error in the CDC data. The value is the number of the erroneous
"RTN","RORRP027",217,0)
 ; piece of the data segment whose name is returned in the second
"RTN","RORRP027",218,0)
 ; piece of the RESULTS(0). For example, the "11^CDM" means that the
"RTN","RORRP027",219,0)
 ; 11th piece of the CDM data segment (ONSET OF ILLNESS/AIDS- STATE)
"RTN","RORRP027",220,0)
 ; contains an invalid value.
"RTN","RORRP027",221,0)
 ;
"RTN","RORRP027",222,0)
 ; Otherwise, zero is returned in the RESULTS(0).
"RTN","RORRP027",223,0)
 ;
"RTN","RORRP027",224,0)
SAVECDC(RESULTS,REGIEN,PATIEN,FLAGS,RORDATA) ;
"RTN","RORRP027",225,0)
 N RORAILST      ; List of AIDS indicator diseases
"RTN","RORRP027",226,0)
 N RORCMT        ; Buffer for the CDC comments (WP field)
"RTN","RORRP027",227,0)
 N RORFDAFI      ; FDA for FILE^DIE
"RTN","RORRP027",228,0)
 N RORFDAUP      ; FDA for UPDATE^DIE
"RTN","RORRP027",229,0)
 N RORIEN        ; List of IEN's to be assigned
"RTN","RORRP027",230,0)
 ;
"RTN","RORRP027",231,0)
 N I,IEN,IENS,RC,RORERRDL,RORMSG,RORPTR,SEG,SEGLST
"RTN","RORRP027",232,0)
 D CLEAR^RORERR("SAVECDC^RORRP027",1)
"RTN","RORRP027",233,0)
 K RESULTS  S (RESULTS(0),RORPTR)=0
"RTN","RORRP027",234,0)
 ;--- Check the parameters
"RTN","RORRP027",235,0)
 S RC=0  D  I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP027",236,0)
 . ;--- Registry IEN
"RTN","RORRP027",237,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP027",238,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP027",239,0)
 . S REGIEN=+REGIEN
"RTN","RORRP027",240,0)
 . ;--- Patient IEN
"RTN","RORRP027",241,0)
 . I $G(PATIEN)'>0  D  Q
"RTN","RORRP027",242,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"PATIEN",$G(PATIEN))
"RTN","RORRP027",243,0)
 . S PATIEN=+PATIEN
"RTN","RORRP027",244,0)
 . ;--- Flags
"RTN","RORRP027",245,0)
 . S FLAGS=$$UP^XLFSTR($G(FLAGS))
"RTN","RORRP027",246,0)
 ;
"RTN","RORRP027",247,0)
 ;--- Get IEN of the registry record
"RTN","RORRP027",248,0)
 S IEN=$$PRRIEN^RORUTL01(PATIEN,REGIEN)  Q:IEN'>0
"RTN","RORRP027",249,0)
 S IENS=IEN_","
"RTN","RORRP027",250,0)
 S RORLOCK(799.4,IENS)=""
"RTN","RORRP027",251,0)
 ;
"RTN","RORRP027",252,0)
 ;--- Prepare the data
"RTN","RORRP027",253,0)
 S SEGLST=",HDR,CDM,FD,LD1,LD2,CS,AID,TS1,TS2,CMT,"
"RTN","RORRP027",254,0)
 S:FLAGS["H" SEGLST=SEGLST_"PH,"
"RTN","RORRP027",255,0)
 S (RC,RORPTR)=0
"RTN","RORRP027",256,0)
 F  S RORPTR=$O(RORDATA(RORPTR))  Q:RORPTR'>0  D  Q:RC
"RTN","RORRP027",257,0)
 . S SEG=$TR($P(RORDATA(RORPTR),U)," ")
"RTN","RORRP027",258,0)
 . X:SEGLST[(","_SEG_",") "S RC=$$"_SEG_"(IENS)"
"RTN","RORRP027",259,0)
 I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP027",260,0)
 I RC>0  S RESULTS(0)=RC  Q
"RTN","RORRP027",261,0)
 ;
"RTN","RORRP027",262,0)
 ;--- Process the list of AIDS indicator diseases
"RTN","RORRP027",263,0)
 S RC=$$AIDSTORE()
"RTN","RORRP027",264,0)
 I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP027",265,0)
 ;
"RTN","RORRP027",266,0)
 ;--- Update the record(s)
"RTN","RORRP027",267,0)
 I $D(RORFDAFI)>1  D  I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP027",268,0)
 . D FILE^DIE(,"RORFDAFI","RORMSG")
"RTN","RORRP027",269,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PATIEN,799.4,IENS)
"RTN","RORRP027",270,0)
 ;--- Add the record(s)
"RTN","RORRP027",271,0)
 I $D(RORFDAUP)>1  D  I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP027",272,0)
 . D UPDATE^DIE(,"RORFDAUP","RORIEN","RORMSG")
"RTN","RORRP027",273,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PATIEN,799.4,IENS)
"RTN","RORRP027",274,0)
 ;
"RTN","RORRP027",275,0)
 ;--- Unlock the records
"RTN","RORRP027",276,0)
 S RC=$$UNLOCK^RORLOCK(.RORLOCK)
"RTN","RORRP027",277,0)
 I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP027",278,0)
 S RESULTS(0)=0
"RTN","RORRP027",279,0)
 Q
"RTN","RORRP027",280,0)
 ;
"RTN","RORRP027",281,0)
 ;***** TREATMENT/SERVICES REFERRALS (IX)
"RTN","RORRP027",282,0)
TS1(IENS) ;
"RTN","RORRP027",283,0)
 N RC,TMP
"RTN","RORRP027",284,0)
 S RC=$$CDCFDA^RORRP026(IENS,"TS1^RORRP026",RORDATA(RORPTR),.RORFDAFI)
"RTN","RORRP027",285,0)
 Q RC
"RTN","RORRP027",286,0)
 ;
"RTN","RORRP027",287,0)
TS2(IENS) ;
"RTN","RORRP027",288,0)
 N RC,TMP
"RTN","RORRP027",289,0)
 S RC=$$CDCFDA^RORRP026(IENS,"TS2^RORRP026",RORDATA(RORPTR),.RORFDAFI)
"RTN","RORRP027",290,0)
 Q RC
"RTN","RORTSK10")
0^51^B41068806^B40092056
"RTN","RORTSK10",1,0)
RORTSK10 ;HCIOFO/SG - REPORT RETRIEVING UTILITIES ; 11/14/06 1:11pm
"RTN","RORTSK10",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORTSK10",3,0)
 ;
"RTN","RORTSK10",4,0)
 Q
"RTN","RORTSK10",5,0)
 ;
"RTN","RORTSK10",6,0)
 ;***** TRACES THE PATH FROM THE ELEMENT TO THE ROOT
"RTN","RORTSK10",7,0)
 ;
"RTN","RORTSK10",8,0)
 ; IEN           IEN of the report element
"RTN","RORTSK10",9,0)
 ;
"RTN","RORTSK10",10,0)
 ; .STACK        Reference to a local variable where the path will
"RTN","RORTSK10",11,0)
 ;               be stored to.
"RTN","RORTSK10",12,0)
 ;
"RTN","RORTSK10",13,0)
 ;  STACK                Number of elements in the path (n)
"RTN","RORTSK10",14,0)
 ;  STACK(i)             Identifiers of the elements (i=1 - the source
"RTN","RORTSK10",15,0)
 ;                       element; i=n - the root element)
"RTN","RORTSK10",16,0)
 ;                         ^1: IEN of the report element
"RTN","RORTSK10",17,0)
 ;                         ^2: Where exactly the rendering process
"RTN","RORTSK10",18,0)
 ;                             has stopped (see $$XMLSTR for details)
"RTN","RORTSK10",19,0)
 ;                         ^3: IEN of the text line
"RTN","RORTSK10",20,0)
 ;
"RTN","RORTSK10",21,0)
PATH(IEN,STACK) ;
"RTN","RORTSK10",22,0)
 K STACK  S STACK=0
"RTN","RORTSK10",23,0)
 F  D  Q:IEN'>0
"RTN","RORTSK10",24,0)
 . S STACK=STACK+1,STACK(STACK)=IEN
"RTN","RORTSK10",25,0)
 . S:'$P(IEN,U,2) $P(STACK(STACK),U,2)=4
"RTN","RORTSK10",26,0)
 . S IEN=$P($G(@RORSRC@(+IEN,0)),U,2)
"RTN","RORTSK10",27,0)
 Q
"RTN","RORTSK10",28,0)
 ;
"RTN","RORTSK10",29,0)
 ;***** RENDERS THE REPORT INTO XML
"RTN","RORTSK10",30,0)
 ;
"RTN","RORTSK10",31,0)
 ; ROR8DST       Closed root of the destination buffer
"RTN","RORTSK10",32,0)
 ;
"RTN","RORTSK10",33,0)
 ; TASK          Task number
"RTN","RORTSK10",34,0)
 ;
"RTN","RORTSK10",35,0)
 ; [.SORT]       Sort modes for the report
"RTN","RORTSK10",36,0)
 ;
"RTN","RORTSK10",37,0)
 ; [.FROM]       Where to start/continue the rendering process
"RTN","RORTSK10",38,0)
 ;                 ^1: IEN of the report element
"RTN","RORTSK10",39,0)
 ;                 ^2: Where exactly the rendering process has stopped
"RTN","RORTSK10",40,0)
 ;                     (see the $$XMLSTR function for details)
"RTN","RORTSK10",41,0)
 ;                 ^3: IEN of the text line (if the 2nd piece = 3)
"RTN","RORTSK10",42,0)
 ;
"RTN","RORTSK10",43,0)
 ;               You must not make any assumptions about structure of 
"RTN","RORTSK10",44,0)
 ;               this parameter (it can be changed at any time without
"RTN","RORTSK10",45,0)
 ;               warning). The only exception is the IEN of the report
"RTN","RORTSK10",46,0)
 ;               element. You can assign a positive value to this
"RTN","RORTSK10",47,0)
 ;               parameter before the call to start the rendering from
"RTN","RORTSK10",48,0)
 ;               the corresponding element.
"RTN","RORTSK10",49,0)
 ;
"RTN","RORTSK10",50,0)
 ; [MAXSIZE]     Either the maximum number of lines to retrieve or
"RTN","RORTSK10",51,0)
 ;               the maximum size of the output in bytes (append the
"RTN","RORTSK10",52,0)
 ;               "B" to the number). By default (if $G(MAXSIZE)'>0,)
"RTN","RORTSK10",53,0)
 ;               the whole report (starting from the point indicated
"RTN","RORTSK10",54,0)
 ;               by the FROM parameter if it is defined) is retrieved.
"RTN","RORTSK10",55,0)
 ;
"RTN","RORTSK10",56,0)
 ;               Examples:
"RTN","RORTSK10",57,0)
 ;                 500    Retrieve no more than 500 lines
"RTN","RORTSK10",58,0)
 ;                 4096B  Retrieve no more than 4Kb
"RTN","RORTSK10",59,0)
 ;
"RTN","RORTSK10",60,0)
 ;         NOTE: If the "B" suffix is used, the size of the retrieved
"RTN","RORTSK10",61,0)
 ;               portion of the document can be somewhat bigger than
"RTN","RORTSK10",62,0)
 ;               MAXSIZE! The last line of the chunk is not truncated
"RTN","RORTSK10",63,0)
 ;               even if the size will be bigger than MAXSIZE.
"RTN","RORTSK10",64,0)
 ;
"RTN","RORTSK10",65,0)
 ; Return Values:
"RTN","RORTSK10",66,0)
 ;       <0  Error code
"RTN","RORTSK10",67,0)
 ;        0  Ok
"RTN","RORTSK10",68,0)
 ;       >0  Number of rendered lines
"RTN","RORTSK10",69,0)
 ;
"RTN","RORTSK10",70,0)
 ; If the maximum size (MAXSIZE) is reached, the identifiers
"RTN","RORTSK10",71,0)
 ; of the last item (it has not been added to the output buffer) are
"RTN","RORTSK10",72,0)
 ; returned via the FROM parameter. The next call of the function will
"RTN","RORTSK10",73,0)
 ; continue the rendering process starting from that item.
"RTN","RORTSK10",74,0)
 ;
"RTN","RORTSK10",75,0)
XMLREP(ROR8DST,TASK,SORT,FROM,MAXSIZE) ;
"RTN","RORTSK10",76,0)
 N RORNUM        ; Number of rendered lines of the report
"RTN","RORTSK10",77,0)
 N RORSIZE       ; Size of the output (in bytes)
"RTN","RORTSK10",78,0)
 N RORSORT       ; Sort modes for the report
"RTN","RORTSK10",79,0)
 N RORSTACK      ; Path from the FROM element to the root
"RTN","RORTSK10",80,0)
 N RORSRC        ; Closed root of the source report data
"RTN","RORTSK10",81,0)
 ;
"RTN","RORTSK10",82,0)
 N DIR,I,RC,SORTFLD,SORTLST  K @ROR8DST
"RTN","RORTSK10",83,0)
 S RORSRC=$$ROOT^DILFD(798.87,","_TASK_",",1)
"RTN","RORTSK10",84,0)
 ;--- Setup the size limits
"RTN","RORTSK10",85,0)
 S (RORNUM,RORSIZE)=0
"RTN","RORTSK10",86,0)
 S MAXSIZE=$$UP^XLFSTR($G(MAXSIZE))
"RTN","RORTSK10",87,0)
 I MAXSIZE["B"  S RORNUM(1)=0,RORSIZE(1)=+MAXSIZE
"RTN","RORTSK10",88,0)
 E  S RORNUM(1)=+MAXSIZE,RORSIZE(1)=0
"RTN","RORTSK10",89,0)
 ;--- Setup the starting point
"RTN","RORTSK10",90,0)
 I $G(FROM)>0  D
"RTN","RORTSK10",91,0)
 . S:$P(FROM,U,2)'>0 $P(FROM,U,2)=1
"RTN","RORTSK10",92,0)
 . D PATH(FROM,.RORSTACK)
"RTN","RORTSK10",93,0)
 E  S I=$$XMLSTR("<?xml version=""1.0""?>")
"RTN","RORTSK10",94,0)
 ;--- Setup the sorting
"RTN","RORTSK10",95,0)
 S (FROM,I)=""
"RTN","RORTSK10",96,0)
 F  S I=$O(SORT(I))  Q:I=""  D
"RTN","RORTSK10",97,0)
 . S SORTLST=$P(SORT(I),"=")            Q:SORTLST=""
"RTN","RORTSK10",98,0)
 . S SORTFLD=$P($P(SORT(I),"=",2),":")  Q:SORTFLD=""
"RTN","RORTSK10",99,0)
 . S DIR=$S($P(SORT(I),":",2)?1"D".1"ESC":-1,1:1)
"RTN","RORTSK10",100,0)
 . S RORSORT($$XEC^RORTSK11(SORTLST))=$$XEC^RORTSK11(SORTFLD)_U_DIR
"RTN","RORTSK10",101,0)
 ;--- Get the report
"RTN","RORTSK10",102,0)
 S RC=$$XMLREPI(0,0)
"RTN","RORTSK10",103,0)
 S:RC>0 FROM=$P(RC,U,2)_U_$P(RC,U)_U_$P(RC,U,3)
"RTN","RORTSK10",104,0)
 Q $S(RC'<0:RORNUM,1:RC)
"RTN","RORTSK10",105,0)
 ;
"RTN","RORTSK10",106,0)
 ;***** RECURSIVELY RENDERS THE REPORT INTO XML
"RTN","RORTSK10",107,0)
 ;
"RTN","RORTSK10",108,0)
 ; PARENT        IEN of the parent element
"RTN","RORTSK10",109,0)
 ; PELC          Type of the parent element
"RTN","RORTSK10",110,0)
 ;
"RTN","RORTSK10",111,0)
 ; Return Values:
"RTN","RORTSK10",112,0)
 ;       <0  Error code
"RTN","RORTSK10",113,0)
 ;        0  Ok
"RTN","RORTSK10",114,0)
 ;       >0  Number of rendered lines has reached the limit
"RTN","RORTSK10",115,0)
 ;           (see the $$XMLSTR function for details)
"RTN","RORTSK10",116,0)
 ;
"RTN","RORTSK10",117,0)
XMLREPI(PARENT,PELC) ;
"RTN","RORTSK10",118,0)
 N RORIEN        ; IEN of the report element being processed
"RTN","RORTSK10",119,0)
 ;
"RTN","RORTSK10",120,0)
 N BUF,DIR,LC,ELEMENT,I,LINE,MODE,RC,SVC,TMP,VAL,XREF
"RTN","RORTSK10",121,0)
 I $G(PELC)>0  D
"RTN","RORTSK10",122,0)
 . S BUF=$G(RORSORT(PELC)),SVC=+$P(BUF,U),DIR=$S($P(BUF,U,2)<0:-1,1:1)
"RTN","RORTSK10",123,0)
 E  S SVC=0,DIR=1
"RTN","RORTSK10",124,0)
 S XREF=$NA(@RORSRC@("APSV",PARENT,SVC))
"RTN","RORTSK10",125,0)
 ;--- Use order of creation if the xref is not available
"RTN","RORTSK10",126,0)
 S:$D(@XREF)<10 XREF=$NA(@RORSRC@("APSV",PARENT,0))
"RTN","RORTSK10",127,0)
 ;--- Determine the starting point (FROM)
"RTN","RORTSK10",128,0)
 I $G(RORSTACK)>0  S RC=0  D  Q:RC RC
"RTN","RORTSK10",129,0)
 . S RORIEN=+$P(RORSTACK(RORSTACK),U)
"RTN","RORTSK10",130,0)
 . S MODE=+$P(RORSTACK(RORSTACK),U,2)
"RTN","RORTSK10",131,0)
 . S LINE=+$P(RORSTACK(RORSTACK),U,3)
"RTN","RORTSK10",132,0)
 . S RORSTACK=RORSTACK-1
"RTN","RORTSK10",133,0)
 . S I=+$O(@RORSRC@("APSR",RORIEN,SVC,""))
"RTN","RORTSK10",134,0)
 . I I>0  D
"RTN","RORTSK10",135,0)
 . . S TMP=+$P($G(@RORSRC@(I,0)),U,3)
"RTN","RORTSK10",136,0)
 . . S VAL=$$SORTBY^RORDD01(TMP,$G(@RORSRC@(I,1)))
"RTN","RORTSK10",137,0)
 . E  S VAL=" "
"RTN","RORTSK10",138,0)
 . S RORIEN=$O(@RORSRC@("APSV",PARENT,SVC,VAL,RORIEN),-DIR)
"RTN","RORTSK10",139,0)
 . S VAL=$O(@RORSRC@("APSV",PARENT,SVC,VAL),-DIR)
"RTN","RORTSK10",140,0)
 E  K RORSTACK  S (LINE,MODE)=0,(RORIEN,VAL)=""
"RTN","RORTSK10",141,0)
 ;--- Render the report elements
"RTN","RORTSK10",142,0)
 S RC=0
"RTN","RORTSK10",143,0)
 F  S VAL=$O(@XREF@(VAL),DIR)  Q:VAL=""  D  Q:RC
"RTN","RORTSK10",144,0)
 . F  S RORIEN=$O(@XREF@(VAL,RORIEN),DIR)  Q:RORIEN=""  D  S MODE=0  Q:RC
"RTN","RORTSK10",145,0)
 . . S TMP=$G(@RORSRC@(RORIEN,0))  Q:$P(TMP,U,4)
"RTN","RORTSK10",146,0)
 . . S ELC=+$P(TMP,U)  Q:ELC'>0
"RTN","RORTSK10",147,0)
 . . S ELEMENT=$P(^ROR(799.31,ELC,0),U)
"RTN","RORTSK10",148,0)
 . . S I=0,BUF="<"_ELEMENT
"RTN","RORTSK10",149,0)
 . . ;--- Render the attributes of the element
"RTN","RORTSK10",150,0)
 . . F  S I=$O(@RORSRC@(RORIEN,2,I))  Q:I'>0  D
"RTN","RORTSK10",151,0)
 . . . S TMP=$P(@RORSRC@(RORIEN,2,I,0),U)
"RTN","RORTSK10",152,0)
 . . . S BUF=BUF_" "_$P(^ROR(799.31,TMP,0),U)
"RTN","RORTSK10",153,0)
 . . . S TMP=$G(@RORSRC@(RORIEN,2,I,1))
"RTN","RORTSK10",154,0)
 . . . S BUF=BUF_"="""_$$XMLENC^RORUTL03(TMP)_""""
"RTN","RORTSK10",155,0)
 . . ;--- Append the SORT attribute(s) to a table
"RTN","RORTSK10",156,0)
 . . D:$D(RORSORT(ELC))
"RTN","RORTSK10",157,0)
 . . . S TMP=+$P(RORSORT(ELC),U)  Q:TMP'>0
"RTN","RORTSK10",158,0)
 . . . S BUF=BUF_" SORT="""_$P(^ROR(799.31,TMP,0),U)_""""
"RTN","RORTSK10",159,0)
 . . . S TMP=+$P(RORSORT(ELC),U,2)
"RTN","RORTSK10",160,0)
 . . . S:TMP<0 BUF=BUF_" SORTDESC=""1"""
"RTN","RORTSK10",161,0)
 . . ;--- Leaf element (without children)
"RTN","RORTSK10",162,0)
 . . I $D(@RORSRC@("APSV",RORIEN))<10  D  Q
"RTN","RORTSK10",163,0)
 . . . ;--- <ELEMENT...>VALUE</ELEMENT>
"RTN","RORTSK10",164,0)
 . . . S TMP=$G(@RORSRC@(RORIEN,1))
"RTN","RORTSK10",165,0)
 . . . I TMP'=""  D:MODE'>2  Q
"RTN","RORTSK10",166,0)
 . . . . S BUF=BUF_">"_$$XMLENC^RORUTL03(TMP)_"</"_ELEMENT_">"
"RTN","RORTSK10",167,0)
 . . . . S RC=$$XMLSTR(BUF,2)
"RTN","RORTSK10",168,0)
 . . . ;--- <ELEMENT.../>
"RTN","RORTSK10",169,0)
 . . . S I=$O(@RORSRC@(RORIEN,3,0))
"RTN","RORTSK10",170,0)
 . . . I I'>0  S:MODE'>2 RC=$$XMLSTR(BUF_"/>",2)  Q
"RTN","RORTSK10",171,0)
 . . . ;--- <ELEMENT...>
"RTN","RORTSK10",172,0)
 . . . ;    TEXT
"RTN","RORTSK10",173,0)
 . . . ;--- </ELEMENT>
"RTN","RORTSK10",174,0)
 . . . I MODE'>3  D  Q:RC
"RTN","RORTSK10",175,0)
 . . . . S:MODE'>1 RC=$$XMLSTR(BUF_">",1)
"RTN","RORTSK10",176,0)
 . . . . S:LINE>0 I=LINE,LINE=0
"RTN","RORTSK10",177,0)
 . . . . F  Q:RC  D  S I=$O(@RORSRC@(RORIEN,3,I))  Q:I'>0
"RTN","RORTSK10",178,0)
 . . . . . S RC=$$XMLSTR($G(@RORSRC@(RORIEN,3,I,0)),3,I)
"RTN","RORTSK10",179,0)
 . . . S RC=$$XMLSTR("</"_ELEMENT_">",5)
"RTN","RORTSK10",180,0)
 . . ;--- Parent element and all children (recursively)
"RTN","RORTSK10",181,0)
 . . I MODE'>4  D  Q:RC
"RTN","RORTSK10",182,0)
 . . . I MODE'>1  S RC=$$XMLSTR(BUF_">",1)  Q:RC
"RTN","RORTSK10",183,0)
 . . . S RC=$$XMLREPI(RORIEN,ELC)
"RTN","RORTSK10",184,0)
 . . S RC=$$XMLSTR("</"_ELEMENT_">",5)
"RTN","RORTSK10",185,0)
 . S RORIEN=""
"RTN","RORTSK10",186,0)
 Q RC
"RTN","RORTSK10",187,0)
 ;
"RTN","RORTSK10",188,0)
 ;***** APPENDS THE STRING TO THE OUTPUT BUFFER
"RTN","RORTSK10",189,0)
 ;
"RTN","RORTSK10",190,0)
 ; STR           String that should be appended to the document
"RTN","RORTSK10",191,0)
 ; TYPE          Type of the rendered item
"RTN","RORTSK10",192,0)
 ; [LINE]        IEN of the text line
"RTN","RORTSK10",193,0)
 ;
"RTN","RORTSK10",194,0)
 ; Return Values:
"RTN","RORTSK10",195,0)
 ;        0  Ok
"RTN","RORTSK10",196,0)
 ;       >0  Number of rendered lines has reached the limit
"RTN","RORTSK10",197,0)
 ;             ^1: Where exactly the rendering process has stopped
"RTN","RORTSK10",198,0)
 ;                   1  Opening tag
"RTN","RORTSK10",199,0)
 ;                   2  Single value
"RTN","RORTSK10",200,0)
 ;                   3  Multiline text value
"RTN","RORTSK10",201,0)
 ;                   4  Nested tag
"RTN","RORTSK10",202,0)
 ;                   5  Closing tag
"RTN","RORTSK10",203,0)
 ;             ^2: IEN of the report element
"RTN","RORTSK10",204,0)
 ;             ^3: IEN of the text line (if the 1st piece = 3)
"RTN","RORTSK10",205,0)
 ;
"RTN","RORTSK10",206,0)
XMLSTR(STR,TYPE,LINE) ;
"RTN","RORTSK10",207,0)
 N SL  S SL=$L(STR)+2
"RTN","RORTSK10",208,0)
 I RORNUM(1)>0  Q:RORNUM'<RORNUM(1) TYPE_U_RORIEN_U_$G(LINE)
"RTN","RORTSK10",209,0)
 I RORSIZE(1)>0  Q:RORSIZE'<RORSIZE(1) TYPE_U_RORIEN_U_$G(LINE)
"RTN","RORTSK10",210,0)
 S RORNUM=RORNUM+1,@ROR8DST@(RORNUM)=STR
"RTN","RORTSK10",211,0)
 S RORSIZE=RORSIZE+SL
"RTN","RORTSK10",212,0)
 Q 0
"RTN","RORTSK10",213,0)
 ;
"RTN","RORTSK10",214,0)
 ;*****
"RTN","RORTSK10",215,0)
XREFNODE(TASK,PARENT,SORT) ;
"RTN","RORTSK10",216,0)
 N NODE
"RTN","RORTSK10",217,0)
 S NODE=$$ROOT^DILFD(798.87,","_TASK_",",1)
"RTN","RORTSK10",218,0)
 S SORT=$$XEC^RORTSK11(SORT)
"RTN","RORTSK10",219,0)
 Q $S(SORT>0:$NA(@NODE@("APSV",PARENT,SORT)),1:"")
"RTN","RORTSK11")
0^52^B19016382^B20505407
"RTN","RORTSK11",1,0)
RORTSK11 ;HCIOFO/SG - REPORT CREATION UTILITIES ; 11/14/06 1:16pm
"RTN","RORTSK11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORTSK11",3,0)
 ;
"RTN","RORTSK11",4,0)
 Q
"RTN","RORTSK11",5,0)
 ;
"RTN","RORTSK11",6,0)
 ;***** ADDS THE ATTRIBUTE TO THE ELEMENT
"RTN","RORTSK11",7,0)
 ;
"RTN","RORTSK11",8,0)
 ; TASK          Task number
"RTN","RORTSK11",9,0)
 ;
"RTN","RORTSK11",10,0)
 ; ELMTIEN       IEN of the element
"RTN","RORTSK11",11,0)
 ;
"RTN","RORTSK11",12,0)
 ; NAME          Attribute name
"RTN","RORTSK11",13,0)
 ;
"RTN","RORTSK11",14,0)
 ; VALUE         Value of the attribute
"RTN","RORTSK11",15,0)
 ;
"RTN","RORTSK11",16,0)
 ; Return Values:
"RTN","RORTSK11",17,0)
 ;       <0  Error code
"RTN","RORTSK11",18,0)
 ;        0  Invalid attribute name
"RTN","RORTSK11",19,0)
 ;       >0  Attribute IEN
"RTN","RORTSK11",20,0)
 ;
"RTN","RORTSK11",21,0)
ADDATTR(TASK,ELMTIEN,NAME,VALUE) ;
"RTN","RORTSK11",22,0)
 I $G(ELMTIEN)<0  Q:$QUIT 0  Q
"RTN","RORTSK11",23,0)
 N IENS,RC,RORFDA,RORIEN,RORMSG
"RTN","RORTSK11",24,0)
 I $D(^RORDATA(798.8,+TASK,"RI",+ELMTIEN))<10  Q:$QUIT 0  Q
"RTN","RORTSK11",25,0)
 S IENS="?+1,"_(+ELMTIEN)_","_(+TASK)_","
"RTN","RORTSK11",26,0)
 S (RORIEN(1),RORFDA(798.872,IENS,.01))=$$XEC(NAME)
"RTN","RORTSK11",27,0)
 I RORIEN(1)'>0  Q:$QUIT 0  Q
"RTN","RORTSK11",28,0)
 S RORFDA(798.872,IENS,1)=VALUE
"RTN","RORTSK11",29,0)
 D UPDATE^DIE(,"RORFDA","RORIEN","RORMSG")
"RTN","RORTSK11",30,0)
 I $G(DIERR)  D  Q:$QUIT RC  Q
"RTN","RORTSK11",31,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,798.872,IENS)
"RTN","RORTSK11",32,0)
 Q:$QUIT +$G(RORIEN(1))  Q
"RTN","RORTSK11",33,0)
 ;
"RTN","RORTSK11",34,0)
 ;***** ADDS THE TEXT ELEMENT TO THE REPORT
"RTN","RORTSK11",35,0)
 ;
"RTN","RORTSK11",36,0)
 ; TASK          Task number
"RTN","RORTSK11",37,0)
 ;
"RTN","RORTSK11",38,0)
 ; NAME          Element name
"RTN","RORTSK11",39,0)
 ;
"RTN","RORTSK11",40,0)
 ; [.]ROR8TXT    Either a closed root or a reference to an array
"RTN","RORTSK11",41,0)
 ;               that contains the text in word processing format.
"RTN","RORTSK11",42,0)
 ;
"RTN","RORTSK11",43,0)
 ; [PARENT]      IEN of the parent element
"RTN","RORTSK11",44,0)
 ;
"RTN","RORTSK11",45,0)
 ; The text should be properly encoded beforehand (use the
"RTN","RORTSK11",46,0)
 ; $$XMLENC^RORUTL03 function).
"RTN","RORTSK11",47,0)
 ;
"RTN","RORTSK11",48,0)
 ; Return Values:
"RTN","RORTSK11",49,0)
 ;       <0  Error code
"RTN","RORTSK11",50,0)
 ;        0  Invalid element name
"RTN","RORTSK11",51,0)
 ;       >0  IEN of the report element
"RTN","RORTSK11",52,0)
 ;
"RTN","RORTSK11",53,0)
ADDTEXT(TASK,NAME,ROR8TXT,PARENT) ;
"RTN","RORTSK11",54,0)
 I $G(PARENT)<0  Q:$QUIT 0  Q
"RTN","RORTSK11",55,0)
 N IENS,RC,RORFDA,RORIEN,RORMSG,TMP
"RTN","RORTSK11",56,0)
 S IENS="+1,"_(+TASK)_","
"RTN","RORTSK11",57,0)
 S (RORFDA(798.87,IENS,.01),TMP)=$$XEC(NAME)
"RTN","RORTSK11",58,0)
 I TMP'>0  Q:$QUIT 0  Q
"RTN","RORTSK11",59,0)
 S RORFDA(798.87,IENS,.02)=+$G(PARENT)
"RTN","RORTSK11",60,0)
 S RORFDA(798.87,IENS,3)=$S($D(ROR8TXT)>1:"ROR8TXT",1:ROR8TXT)
"RTN","RORTSK11",61,0)
 D UPDATE^DIE(,"RORFDA","RORIEN","RORMSG")
"RTN","RORTSK11",62,0)
 I $G(DIERR)  D  Q:$QUIT RC  Q
"RTN","RORTSK11",63,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,798.87,IENS)
"RTN","RORTSK11",64,0)
 Q:$QUIT +$G(RORIEN(1))  Q
"RTN","RORTSK11",65,0)
 ;
"RTN","RORTSK11",66,0)
 ;***** ADDS THE SINGLE-LINE ELEMENT TO THE REPORT
"RTN","RORTSK11",67,0)
 ;
"RTN","RORTSK11",68,0)
 ; TASK          Task number
"RTN","RORTSK11",69,0)
 ;
"RTN","RORTSK11",70,0)
 ; NAME          Element name
"RTN","RORTSK11",71,0)
 ;
"RTN","RORTSK11",72,0)
 ; [VALUE]       Value of the element
"RTN","RORTSK11",73,0)
 ;
"RTN","RORTSK11",74,0)
 ; [PARENT]      IEN of the parent element
"RTN","RORTSK11",75,0)
 ;
"RTN","RORTSK11",76,0)
 ; [SORTBY]      Parent element is sorted by the value of the element
"RTN","RORTSK11",77,0)
 ;               that is being added:
"RTN","RORTSK11",78,0)
 ;                 1  Sort "as is"
"RTN","RORTSK11",79,0)
 ;                 2  Sort as strings
"RTN","RORTSK11",80,0)
 ;                 3  Sort as numbers
"RTN","RORTSK11",81,0)
 ;
"RTN","RORTSK11",82,0)
 ; Return Values:
"RTN","RORTSK11",83,0)
 ;       <0  Error code
"RTN","RORTSK11",84,0)
 ;        0  Invalid element name
"RTN","RORTSK11",85,0)
 ;       >0  IEN of the report element
"RTN","RORTSK11",86,0)
 ;
"RTN","RORTSK11",87,0)
ADDVAL(TASK,NAME,VALUE,PARENT,SORTBY,ID) ;
"RTN","RORTSK11",88,0)
 I $G(PARENT)<0  Q:$QUIT 0  Q
"RTN","RORTSK11",89,0)
 N IENS,RC,RORFDA,RORIEN,RORMSG,TMP
"RTN","RORTSK11",90,0)
 S IENS="+1,"_(+TASK)_","
"RTN","RORTSK11",91,0)
 S (RORFDA(798.87,IENS,.01),TMP)=$$XEC(NAME)
"RTN","RORTSK11",92,0)
 I TMP'>0  Q:$QUIT 0  Q
"RTN","RORTSK11",93,0)
 S RORFDA(798.87,IENS,.02)=+$G(PARENT)
"RTN","RORTSK11",94,0)
 S:$G(SORTBY) RORFDA(798.87,IENS,.03)=SORTBY
"RTN","RORTSK11",95,0)
 S:$G(VALUE)'="" RORFDA(798.87,IENS,1)=VALUE
"RTN","RORTSK11",96,0)
 D:$G(ID)'=""
"RTN","RORTSK11",97,0)
 . S TMP="+2,"_IENS
"RTN","RORTSK11",98,0)
 . S (RORIEN(2),RORFDA(798.872,TMP,.01))=$$XEC("ID")
"RTN","RORTSK11",99,0)
 . S RORFDA(798.872,TMP,1)=ID
"RTN","RORTSK11",100,0)
 D UPDATE^DIE(,"RORFDA","RORIEN","RORMSG")
"RTN","RORTSK11",101,0)
 I $G(DIERR)  D  Q:$QUIT RC  Q
"RTN","RORTSK11",102,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,798.87,IENS)
"RTN","RORTSK11",103,0)
 Q:$QUIT +$G(RORIEN(1))  Q
"RTN","RORTSK11",104,0)
 ;
"RTN","RORTSK11",105,0)
 ;***** CHECKS IF THE ELEMENT HAS "CHILDREN"
"RTN","RORTSK11",106,0)
 ;
"RTN","RORTSK11",107,0)
 ; TASK          Task number
"RTN","RORTSK11",108,0)
 ;
"RTN","RORTSK11",109,0)
 ; ELMTIEN       IEN of the element
"RTN","RORTSK11",110,0)
 ;
"RTN","RORTSK11",111,0)
 ; Return Values:
"RTN","RORTSK11",112,0)
 ;        0  Leaf element
"RTN","RORTSK11",113,0)
 ;       >0  Has children
"RTN","RORTSK11",114,0)
 ;
"RTN","RORTSK11",115,0)
HASCHLD(TASK,ELMTIEN) ;
"RTN","RORTSK11",116,0)
 Q:ELMTIEN<0 0
"RTN","RORTSK11",117,0)
 Q $D(^RORDATA(798.8,+TASK,"RI","APSV",+ELMTIEN))>1
"RTN","RORTSK11",118,0)
 ;
"RTN","RORTSK11",119,0)
 ;***** UPDATES VALUE OF THE ELEMENT
"RTN","RORTSK11",120,0)
 ;
"RTN","RORTSK11",121,0)
 ; TASK          Task number
"RTN","RORTSK11",122,0)
 ;
"RTN","RORTSK11",123,0)
 ; ELMTIEN       IEN of the element
"RTN","RORTSK11",124,0)
 ;
"RTN","RORTSK11",125,0)
 ; [VALUE]       Value of the element
"RTN","RORTSK11",126,0)
 ;
"RTN","RORTSK11",127,0)
 ; [SORTBY]      Parent element is sorted by the value of the element
"RTN","RORTSK11",128,0)
 ;               that is being added:
"RTN","RORTSK11",129,0)
 ;                 1  Sort "as is"
"RTN","RORTSK11",130,0)
 ;                 2  Sort as strings
"RTN","RORTSK11",131,0)
 ;                 3  Sort as numbers
"RTN","RORTSK11",132,0)
 ;
"RTN","RORTSK11",133,0)
 ; [IGNORE]      Do not render this element into the resulting XML
"RTN","RORTSK11",134,0)
 ;               document.
"RTN","RORTSK11",135,0)
 ;
"RTN","RORTSK11",136,0)
 ; Return Values:
"RTN","RORTSK11",137,0)
 ;       <0  Error code
"RTN","RORTSK11",138,0)
 ;       >0  IEN of the report element
"RTN","RORTSK11",139,0)
 ;
"RTN","RORTSK11",140,0)
UPDVAL(TASK,ELMTIEN,VALUE,SORTBY,IGNORE) ;
"RTN","RORTSK11",141,0)
 I $G(ELMTIEN)<0  Q:$QUIT 0  Q
"RTN","RORTSK11",142,0)
 N IENS,RORFDA,RORIEN,RORMSG,TMP
"RTN","RORTSK11",143,0)
 I $D(^RORDATA(798.8,+TASK,"RI",+ELMTIEN))<10  Q:$QUIT 0  Q
"RTN","RORTSK11",144,0)
 S IENS=(+ELMTIEN)_","_(+TASK)_","
"RTN","RORTSK11",145,0)
 S:$G(SORTBY) RORFDA(798.87,IENS,.03)=SORTBY
"RTN","RORTSK11",146,0)
 S RORFDA(798.87,IENS,.04)=$S($G(IGNORE):1,1:"")
"RTN","RORTSK11",147,0)
 S RORFDA(798.87,IENS,1)=$G(VALUE)
"RTN","RORTSK11",148,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORTSK11",149,0)
 I $G(DIERR)  D  Q:$QUIT RC  Q
"RTN","RORTSK11",150,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,798.87,IENS)
"RTN","RORTSK11",151,0)
 Q:$QUIT +$G(RORIEN(1))  Q
"RTN","RORTSK11",152,0)
 ;
"RTN","RORTSK11",153,0)
 ;***** DUMPS THE VARIABLE
"RTN","RORTSK11",154,0)
 ;
"RTN","RORTSK11",155,0)
 ; TASK          Task number
"RTN","RORTSK11",156,0)
 ;
"RTN","RORTSK11",157,0)
 ; ROOT          Closed root of the variable
"RTN","RORTSK11",158,0)
 ;
"RTN","RORTSK11",159,0)
 ; [PARENT]      IEN of the parent element (0, by default)
"RTN","RORTSK11",160,0)
 ;
"RTN","RORTSK11",161,0)
 ; [NAME]        Element name ("VARDUMP", by default)
"RTN","RORTSK11",162,0)
 ;
"RTN","RORTSK11",163,0)
 ; Return Values:
"RTN","RORTSK11",164,0)
 ;       <0  Error code
"RTN","RORTSK11",165,0)
 ;       >0  IEN of the element
"RTN","RORTSK11",166,0)
 ;
"RTN","RORTSK11",167,0)
VARDUMP(TASK,ROOT,PARENT,NAME) ;
"RTN","RORTSK11",168,0)
 N DUMP,FLT,LFLT,PI
"RTN","RORTSK11",169,0)
 S:$G(NAME)="" NAME="VARDUMP"
"RTN","RORTSK11",170,0)
 S:$G(PARENT)'>0 PARENT=0
"RTN","RORTSK11",171,0)
 ;---
"RTN","RORTSK11",172,0)
 S LFLT=$L(ROOT)
"RTN","RORTSK11",173,0)
 S:$E(ROOT,LFLT)=")" LFLT=LFLT-1
"RTN","RORTSK11",174,0)
 S FLT=$E(ROOT,1,LFLT)
"RTN","RORTSK11",175,0)
 ;---
"RTN","RORTSK11",176,0)
 S DUMP=$$ADDVAL^RORTSK11(TASK,NAME,,PARENT)
"RTN","RORTSK11",177,0)
 I DUMP<0  Q:$QUIT DUMP  Q
"RTN","RORTSK11",178,0)
 S PI=ROOT
"RTN","RORTSK11",179,0)
 F  S PI=$Q(@PI)  Q:$E(PI,1,LFLT)'=FLT  D
"RTN","RORTSK11",180,0)
 . D ADDVAL^RORTSK11(TASK,"ITEM",PI_"="_@PI,DUMP)
"RTN","RORTSK11",181,0)
 Q:$QUIT DUMP  Q
"RTN","RORTSK11",182,0)
 ;
"RTN","RORTSK11",183,0)
 ;***** RETURNS TYPE (CODE) OF THE ELEMENT
"RTN","RORTSK11",184,0)
 ;
"RTN","RORTSK11",185,0)
 ; NAME          Element name
"RTN","RORTSK11",186,0)
 ;
"RTN","RORTSK11",187,0)
XEC(NAME) ;
"RTN","RORTSK11",188,0)
 S:'$D(RORCACHE("XMLENT",NAME)) RORCACHE("XMLENT",NAME)=+$O(^ROR(799.31,"B",$E(NAME,1,30),0))
"RTN","RORTSK11",189,0)
 Q RORCACHE("XMLENT",NAME)
"RTN","RORTSK13")
0^22^B43389000^B33904309
"RTN","RORTSK13",1,0)
RORTSK13 ;HCIOFO/SG - PARSER FOR REPORT PARAMETERS ; 6/23/06 1:45pm
"RTN","RORTSK13",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORTSK13",3,0)
 ;
"RTN","RORTSK13",4,0)
 ; This routine uses the following IAs:
"RTN","RORTSK13",5,0)
 ;
"RTN","RORTSK13",6,0)
 ; #1995         $$CODEN^ICPTCOD (supported)
"RTN","RORTSK13",7,0)
 ; #3990         $$CODEN^ICDCODE (supported)
"RTN","RORTSK13",8,0)
 ; #4543         IEN^PSN50P65 (supported)
"RTN","RORTSK13",9,0)
 ;
"RTN","RORTSK13",10,0)
 ; RORXML -------------- DESCRIPTOR FOR THE XML PARSING
"RTN","RORTSK13",11,0)
 ;
"RTN","RORTSK13",12,0)
 ; RORXML(
"RTN","RORTSK13",13,0)
 ;
"RTN","RORTSK13",14,0)
 ;   "ERR")              Number of parsing errors
"RTN","RORTSK13",15,0)
 ;
"RTN","RORTSK13",16,0)
 ;   "PATH")             Path to the current XML tag
"RTN","RORTSK13",17,0)
 ;
"RTN","RORTSK13",18,0)
 ;   "RXGRP")            Name of the current drug group
"RTN","RORTSK13",19,0)
 ;
"RTN","RORTSK13",20,0)
 ;   "TI")               Number of the current text line of
"RTN","RORTSK13",21,0)
 ;                       the current tag value
"RTN","RORTSK13",22,0)
 ;
"RTN","RORTSK13",23,0)
 Q
"RTN","RORTSK13",24,0)
 ;
"RTN","RORTSK13",25,0)
 ;***** START DOCUMENT CALLBACK FOR THE SAX PARSER
"RTN","RORTSK13",26,0)
DOCSTART ;
"RTN","RORTSK13",27,0)
 S RORXML("PATH")="",RORXML("ERR")=0
"RTN","RORTSK13",28,0)
 K RORXML("RXGRP")
"RTN","RORTSK13",29,0)
 Q
"RTN","RORTSK13",30,0)
 ;
"RTN","RORTSK13",31,0)
 ;***** DUMMY CALLBACKS FOR THE SAX PARSER
"RTN","RORTSK13",32,0)
DUMMY(DUMMY1,DUMMY2,DUMMY3) ;
"RTN","RORTSK13",33,0)
DUMMY1 Q
"RTN","RORTSK13",34,0)
 ;
"RTN","RORTSK13",35,0)
 ;***** END ELEMENT CALLBACK FOR THE SAX PARSER
"RTN","RORTSK13",36,0)
 ;
"RTN","RORTSK13",37,0)
 ; ELMT          Name of the element
"RTN","RORTSK13",38,0)
 ;
"RTN","RORTSK13",39,0)
ELEND(ELMT) ;
"RTN","RORTSK13",40,0)
 ;--- Reset the drug group name in the end of the group
"RTN","RORTSK13",41,0)
 K:RORXML("PATH")="PARAMS,DRUGS,GROUP" RORXML("RXGRP")
"RTN","RORTSK13",42,0)
 ;--- Reset the ICD-9 group name in the end of the group
"RTN","RORTSK13",43,0)
 K:RORXML("PATH")="PARAMS,ICD9LST,GROUP" RORXML("ICD9GRP")
"RTN","RORTSK13",44,0)
 ;--- Update the current element path
"RTN","RORTSK13",45,0)
 S RORXML("PATH")=$P(RORXML("PATH"),",",1,$L(RORXML("PATH"),",")-1)
"RTN","RORTSK13",46,0)
 Q
"RTN","RORTSK13",47,0)
 ;
"RTN","RORTSK13",48,0)
 ;***** START DOCUMENT CALLBACK FOR THE SAX PARSER
"RTN","RORTSK13",49,0)
 ;
"RTN","RORTSK13",50,0)
 ; ELMT          Name of the element
"RTN","RORTSK13",51,0)
 ; .ATTR         List of attributes and their values
"RTN","RORTSK13",52,0)
 ;
"RTN","RORTSK13",53,0)
ELSTART(ELMT,ATTR) ;
"RTN","RORTSK13",54,0)
 N GROUP,ID,IEN,ITEM,LIST,LVL,RC,SECTION,TMP
"RTN","RORTSK13",55,0)
 ;--- Update the current element path
"RTN","RORTSK13",56,0)
 S RORXML("PATH")=RORXML("PATH")_$S(RORXML("PATH")'="":",",1:"")_ELMT
"RTN","RORTSK13",57,0)
 S RORXML("TI")=1
"RTN","RORTSK13",58,0)
 ;--- Ignore everything except parameters
"RTN","RORTSK13",59,0)
 Q:$P(RORXML("PATH"),",")'="PARAMS"
"RTN","RORTSK13",60,0)
 S LVL=$L(RORXML("PATH"),",")
"RTN","RORTSK13",61,0)
 ;
"RTN","RORTSK13",62,0)
 ;=== Store 3-level lists
"RTN","RORTSK13",63,0)
 I LVL=5  D  Q
"RTN","RORTSK13",64,0)
 . S LIST=$P(RORXML("PATH"),",",LVL-3,LVL-1)
"RTN","RORTSK13",65,0)
 . ;--- Medications and drug classes
"RTN","RORTSK13",66,0)
 . I $P(LIST,",",1,2)="DRUGS,GROUP"  D  Q
"RTN","RORTSK13",67,0)
 . . S GROUP=$G(RORXML("RXGRP"))  Q:GROUP=""
"RTN","RORTSK13",68,0)
 . . S SECTION=$P(LIST,",",3)     Q:SECTION=""
"RTN","RORTSK13",69,0)
 . . S ID=$G(ATTR("ID"))          Q:ID=""
"RTN","RORTSK13",70,0)
 . . S RORTSK("PARAMS","DRUGS","G",GROUP,SECTION,ID)=$G(ATTR("CODE"))
"RTN","RORTSK13",71,0)
 ;
"RTN","RORTSK13",72,0)
 ;=== Store 2-level lists
"RTN","RORTSK13",73,0)
 I LVL=4  D  Q
"RTN","RORTSK13",74,0)
 . S LIST=$P(RORXML("PATH"),",",LVL-2,LVL-1)
"RTN","RORTSK13",75,0)
 . ;--- ICD-9 codes
"RTN","RORTSK13",76,0)
 . I LIST="ICD9LST,GROUP"  D  Q
"RTN","RORTSK13",77,0)
 . . S GROUP=$G(RORXML("ICD9GRP"))  Q:GROUP=""
"RTN","RORTSK13",78,0)
 . . S ID=$G(ATTR("ID"))            Q:ID=""
"RTN","RORTSK13",79,0)
 . . S TMP=$S($G(RORTSK("PARAMS","ICD9LST","A","PROCMODE")):80.1,1:80)
"RTN","RORTSK13",80,0)
 . . S IEN=+$$CODEN^ICDCODE(ID,TMP)
"RTN","RORTSK13",81,0)
 . . S:IEN>0 RORTSK("PARAMS","ICD9LST","G",GROUP,"C",IEN)=ID
"RTN","RORTSK13",82,0)
 ;
"RTN","RORTSK13",83,0)
 ;=== Store the lists
"RTN","RORTSK13",84,0)
 I LVL=3  D  Q
"RTN","RORTSK13",85,0)
 . S LIST=$P(RORXML("PATH"),",",LVL-1)
"RTN","RORTSK13",86,0)
 . ;--- List of ICD-9 codes
"RTN","RORTSK13",87,0)
 . I LIST="CPTLST"  D:ELMT="CPT"  Q
"RTN","RORTSK13",88,0)
 . . S ID=$G(ATTR("ID"))  Q:ID=""
"RTN","RORTSK13",89,0)
 . . S IEN=+$$CODEN^ICPTCOD(ID)
"RTN","RORTSK13",90,0)
 . . S:IEN>0 RORTSK("PARAMS",LIST,"C",IEN)=ID
"RTN","RORTSK13",91,0)
 . ;--- Name of the current drug group and its attributes
"RTN","RORTSK13",92,0)
 . I LIST="DRUGS"  D:ELMT="GROUP"  Q
"RTN","RORTSK13",93,0)
 . . S (RORXML("RXGRP"),ID)=$G(ATTR("ID"))  Q:ID=""
"RTN","RORTSK13",94,0)
 . . M RORTSK("PARAMS","DRUGS","G",ID,"A")=ATTR
"RTN","RORTSK13",95,0)
 . . K RORTSK("PARAMS","DRUGS","G",ID,"A","ID")
"RTN","RORTSK13",96,0)
 . ;--- Name of the current ICD-9 group
"RTN","RORTSK13",97,0)
 . I LIST="ICD9LST"  D:ELMT="GROUP"  Q
"RTN","RORTSK13",98,0)
 . . S RORXML("ICD9GRP")=$G(ATTR("ID"))
"RTN","RORTSK13",99,0)
 . ;--- List of ICD-9 codes
"RTN","RORTSK13",100,0)
 . ;I LIST="ICD9LST"  D:ELMT="ICD9"  Q
"RTN","RORTSK13",101,0)
 . ;. S ID=$G(ATTR("ID"))  Q:ID=""
"RTN","RORTSK13",102,0)
 . ;. S TMP=$S($G(RORTSK("PARAMS","ICD9LST","A","PROC")):80.1,1:80)
"RTN","RORTSK13",103,0)
 . ;. S IEN=+$$CODEN^ICDCODE(ID,TMP)
"RTN","RORTSK13",104,0)
 . ;. S:IEN>0 RORTSK("PARAMS",LIST,"C",IEN)=ID
"RTN","RORTSK13",105,0)
 . ;--- Lab tests
"RTN","RORTSK13",106,0)
 . I LIST="LABTESTS"  D:ELMT="LT"  Q
"RTN","RORTSK13",107,0)
 . . S ID=$G(ATTR("ID"))  Q:ID=""
"RTN","RORTSK13",108,0)
 . . S RORTSK("PARAMS","LABTESTS","C",ID)=""
"RTN","RORTSK13",109,0)
 . . S TMP=$G(ATTR("LOW"))
"RTN","RORTSK13",110,0)
 . . S:TMP'="" RORTSK("PARAMS","LABTESTS","C",ID,"L")=TMP
"RTN","RORTSK13",111,0)
 . . S TMP=$G(ATTR("HIGH"))
"RTN","RORTSK13",112,0)
 . . S:TMP'="" RORTSK("PARAMS","LABTESTS","C",ID,"H")=TMP
"RTN","RORTSK13",113,0)
 . ;--- Laboratory test ranges
"RTN","RORTSK13",114,0)
 . I LIST="LRGRANGES"  D:ELMT="LRGRANGE"  Q
"RTN","RORTSK13",115,0)
 . . S ID=$G(ATTR("ID"))  Q:'$G(ATTR("USE"))!(ID="")
"RTN","RORTSK13",116,0)
 . . S RORTSK("PARAMS",LIST,"C",ID)=""
"RTN","RORTSK13",117,0)
 . . S TMP=$G(ATTR("LOW"))
"RTN","RORTSK13",118,0)
 . . S:TMP'="" RORTSK("PARAMS",LIST,"C",ID,"L")=TMP
"RTN","RORTSK13",119,0)
 . . S TMP=$G(ATTR("HIGH"))
"RTN","RORTSK13",120,0)
 . . S:TMP'="" RORTSK("PARAMS",LIST,"C",ID,"H")=TMP
"RTN","RORTSK13",121,0)
 . ;--- "Include/Exclude" list processing
"RTN","RORTSK13",122,0)
 . I (LIST="LOCAL_FIELDS")!(LIST="OTHER_REGISTRIES")  D  Q
"RTN","RORTSK13",123,0)
 . . S ID=$G(ATTR("ID"))  Q:ID=""
"RTN","RORTSK13",124,0)
 . . S TMP=+$G(ATTR("MODE"))  ; 1 - Include; -1 - Exclude
"RTN","RORTSK13",125,0)
 . . S:TMP RORTSK("PARAMS",LIST,"C",ID)=TMP
"RTN","RORTSK13",126,0)
 . ;--- Default processing
"RTN","RORTSK13",127,0)
 . S TMP=","_LIST_","
"RTN","RORTSK13",128,0)
 . Q:'(",CLINICS,DIVISIONS,OPTIONAL_COLUMNS,PATIENTS,SELRULES,UTIL_TYPES,"[TMP)
"RTN","RORTSK13",129,0)
 . S ID=$G(ATTR("ID"))
"RTN","RORTSK13",130,0)
 . S:ID'="" RORTSK("PARAMS",LIST,"C",ID)=""
"RTN","RORTSK13",131,0)
 ;
"RTN","RORTSK13",132,0)
 ;=== Store the top-level attributes
"RTN","RORTSK13",133,0)
 I LVL=2  D  Q
"RTN","RORTSK13",134,0)
 . ;--- Date range(s)
"RTN","RORTSK13",135,0)
 . I ELMT?1"DATE_RANGE".1(1"_"1.N)  D  Q
"RTN","RORTSK13",136,0)
 . . N STDT,ENDT
"RTN","RORTSK13",137,0)
 . . S RC=$$DTRANGE^RORTSK14(.ATTR,.STDT,.ENDT)  Q:RC<0
"RTN","RORTSK13",138,0)
 . . S RORTSK("PARAMS",ELMT,"A","START")=STDT
"RTN","RORTSK13",139,0)
 . . S RORTSK("PARAMS",ELMT,"A","END")=ENDT
"RTN","RORTSK13",140,0)
 . ;--- Ignore internal nodes
"RTN","RORTSK13",141,0)
 . Q:ELMT="PANELS"
"RTN","RORTSK13",142,0)
 . ;--- Default processing
"RTN","RORTSK13",143,0)
 . M RORTSK("PARAMS",ELMT,"A")=ATTR
"RTN","RORTSK13",144,0)
 ;
"RTN","RORTSK13",145,0)
 ;--- Ignore everything else
"RTN","RORTSK13",146,0)
 Q
"RTN","RORTSK13",147,0)
 ;
"RTN","RORTSK13",148,0)
 ;***** TEXT CALLBACK FOR THE SAX PARSER
"RTN","RORTSK13",149,0)
 ;
"RTN","RORTSK13",150,0)
 ; TXT           Line of unmarked text
"RTN","RORTSK13",151,0)
 ;
"RTN","RORTSK13",152,0)
ELTEXT(TXT) ;
"RTN","RORTSK13",153,0)
 N ITEM,LIST,LVL
"RTN","RORTSK13",154,0)
 S LVL=$L(RORXML("PATH"),",")
"RTN","RORTSK13",155,0)
 ;--- Store top-level values
"RTN","RORTSK13",156,0)
 I LVL=2  D  Q
"RTN","RORTSK13",157,0)
 . S ITEM=$P(RORXML("PATH"),",",LVL)
"RTN","RORTSK13",158,0)
 . S RORTSK("PARAMS",ITEM)=$G(RORTSK("PARAMS",ITEM))_TXT
"RTN","RORTSK13",159,0)
 ;--- Ignore everything else
"RTN","RORTSK13",160,0)
 Q
"RTN","RORTSK13",161,0)
 ;
"RTN","RORTSK13",162,0)
 ;***** ERROR CALLBACK FOR THE SAX PARSER
"RTN","RORTSK13",163,0)
 ;
"RTN","RORTSK13",164,0)
 ; .ERR          Reference to a local variable containing
"RTN","RORTSK13",165,0)
 ;               informations about the error
"RTN","RORTSK13",166,0)
 ;
"RTN","RORTSK13",167,0)
ERROR(ERR) ;
"RTN","RORTSK13",168,0)
 N ERRCODE,RORINFO,TMP
"RTN","RORTSK13",169,0)
 I ERR("SEV")  D
"RTN","RORTSK13",170,0)
 . S ERRCODE=-105,RORXML("ERR")=$G(RORXML("ERR"))+1
"RTN","RORTSK13",171,0)
 E  S ERRCODE=-104
"RTN","RORTSK13",172,0)
 ;--- Prepare message details
"RTN","RORTSK13",173,0)
 S RORINFO(1)=$TR(ERR("MSG"),U,"~")
"RTN","RORTSK13",174,0)
 S TMP=$P("Warning^Validation Error^Conformance Error",U,ERR("SEV")+1)
"RTN","RORTSK13",175,0)
 S RORINFO(2)=TMP_" in line #"_ERR("LIN")_" (pos#"_ERR("POS")_")"
"RTN","RORTSK13",176,0)
 S RORINFO(3)=$TR(ERR("XML"),$C(9,10,13)," ")
"RTN","RORTSK13",177,0)
 ;--- Record the error message
"RTN","RORTSK13",178,0)
 D ERROR^RORERR(ERRCODE,,.RORINFO)
"RTN","RORTSK13",179,0)
 Q
"RTN","RORTSK13",180,0)
 ;
"RTN","RORTSK13",181,0)
 ;***** PARSES AND PREPARES THE REPORT PARAMETERS
"RTN","RORTSK13",182,0)
 ;
"RTN","RORTSK13",183,0)
 ; .PARAMS       Reference to a local variable that contains report
"RTN","RORTSK13",184,0)
 ;               parameters in XML format. This variable is KILL'ed
"RTN","RORTSK13",185,0)
 ;               by this function.
"RTN","RORTSK13",186,0)
 ;
"RTN","RORTSK13",187,0)
 ; .RORTSK       Reference to a local variable that contains a task
"RTN","RORTSK13",188,0)
 ;               descriptor.
"RTN","RORTSK13",189,0)
 ;
"RTN","RORTSK13",190,0)
 ; Return Values:
"RTN","RORTSK13",191,0)
 ;       <0  Error code
"RTN","RORTSK13",192,0)
 ;        0  Ok
"RTN","RORTSK13",193,0)
 ;
"RTN","RORTSK13",194,0)
PARSEPRM(PARAMS,RORTSK) ;
"RTN","RORTSK13",195,0)
 K RORTSK("PARAMS")
"RTN","RORTSK13",196,0)
 Q:$D(PARAMS)<10 0
"RTN","RORTSK13",197,0)
 ;---
"RTN","RORTSK13",198,0)
 N CBK,RORSRC,RORSUBS,RORTMP,RORXML
"RTN","RORTSK13",199,0)
 S RORSRC=$$ALLOC^RORTMP()          ; Source buffer for XML
"RTN","RORTSK13",200,0)
 S RORTMP=$$ALLOC^RORTMP(.RORSUBS)  ; Temporary buffer
"RTN","RORTSK13",201,0)
 ;--- Copy the XML document into a global since the parser
"RTN","RORTSK13",202,0)
 ;--- cannot read it from a local variable
"RTN","RORTSK13",203,0)
 M @RORSRC=PARAMS  K PARAMS
"RTN","RORTSK13",204,0)
 ;--- Parse the parameters
"RTN","RORTSK13",205,0)
 S CBK("CHARACTERS")="ELTEXT^RORTSK13"
"RTN","RORTSK13",206,0)
 S CBK("COMMENT")="DUMMY^RORTSK13"
"RTN","RORTSK13",207,0)
 S CBK("DOCTYPE")="DUMMY^RORTSK13"
"RTN","RORTSK13",208,0)
 S CBK("ENDDOCUMENT")="DUMMY1^RORTSK13"
"RTN","RORTSK13",209,0)
 S CBK("ENDELEMENT")="ELEND^RORTSK13"
"RTN","RORTSK13",210,0)
 S CBK("ERROR")="ERROR^RORTSK13"
"RTN","RORTSK13",211,0)
 S CBK("EXTERNAL")="DUMMY^RORTSK13"
"RTN","RORTSK13",212,0)
 S CBK("NOTATION")="DUMMY^RORTSK13"
"RTN","RORTSK13",213,0)
 S CBK("PI")="DUMMY^RORTSK13"
"RTN","RORTSK13",214,0)
 S CBK("STARTDOCUMENT")="DOCSTART^RORTSK13"
"RTN","RORTSK13",215,0)
 S CBK("STARTELEMENT")="ELSTART^RORTSK13"
"RTN","RORTSK13",216,0)
 D EN^MXMLPRSE(RORSRC,.CBK,"W")
"RTN","RORTSK13",217,0)
 ;--- Cleanup
"RTN","RORTSK13",218,0)
 D FREE^RORTMP(RORTMP),FREE^RORTMP(RORSRC)
"RTN","RORTSK13",219,0)
 Q $S($G(RORXML("ERR"))>0:$$ERROR^RORERR(-106),1:0)
"RTN","RORUPD05")
0^45^B44215296^B44214142
"RTN","RORUPD05",1,0)
RORUPD05 ;HCIOFO/SG - REGISTRY UPDATE (MULTITASK) ; 7/6/06 11:09am
"RTN","RORUPD05",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORUPD05",3,0)
 ;
"RTN","RORUPD05",4,0)
 Q
"RTN","RORUPD05",5,0)
 ;
"RTN","RORUPD05",6,0)
 ;***** MONITORS THE SUBTASKS
"RTN","RORUPD05",7,0)
 ;
"RTN","RORUPD05",8,0)
 ; Return Values:
"RTN","RORUPD05",9,0)
 ;       <0  Error code
"RTN","RORUPD05",10,0)
 ;      >=0  Combined statistics returned by the $$PROCESS^RORUPD01
"RTN","RORUPD05",11,0)
 ;           function of each subtask
"RTN","RORUPD05",12,0)
 ;
"RTN","RORUPD05",13,0)
MONITOR() ;
"RTN","RORUPD05",14,0)
 N CNT,ECNT,EXIT,RC,TASK,TIMEOUT,TSKCNT
"RTN","RORUPD05",15,0)
 S (CNT,ECNT,EXIT)=0,TIMEOUT=600 ; 10hrs = 600*60
"RTN","RORUPD05",16,0)
 F  H 60  D  Q:EXIT
"RTN","RORUPD05",17,0)
 . ;--- Exit if all subtasks finished
"RTN","RORUPD05",18,0)
 . I $D(@RORUPDPI@("T"))<10  S EXIT=1  Q
"RTN","RORUPD05",19,0)
 . ;--- Abort if some of the subtasks have not started during
"RTN","RORUPD05",20,0)
 . ;--- the predefined time frame.
"RTN","RORUPD05",21,0)
 . I TIMEOUT'>0  S EXIT=$$ERROR^RORERR(-78)  Q
"RTN","RORUPD05",22,0)
 . ;--- Check for a request to stop
"RTN","RORUPD05",23,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD  S EXIT=$$ERROR^RORERR(-42)  Q
"RTN","RORUPD05",24,0)
 . ;--- Browse through the list of subtasks
"RTN","RORUPD05",25,0)
 . S (TASK,TSKCNT)=0
"RTN","RORUPD05",26,0)
 . F  S TASK=$O(@RORUPDPI@("T",TASK))  Q:TASK=""  D
"RTN","RORUPD05",27,0)
 . . S RC=@RORUPDPI@("T",TASK),TSKCNT=TSKCNT+1
"RTN","RORUPD05",28,0)
 . . ;--- Skip a subtask that was scheduled but has not started yet
"RTN","RORUPD05",29,0)
 . . I RC="S"  S TSKCNT=TSKCNT-1  Q
"RTN","RORUPD05",30,0)
 . . ;--- Skip a running subtask
"RTN","RORUPD05",31,0)
 . . L +@RORUPDPI@("T",TASK):1  E  Q
"RTN","RORUPD05",32,0)
 . . L -@RORUPDPI@("T",TASK)
"RTN","RORUPD05",33,0)
 . . ;--- The subtask has crashed
"RTN","RORUPD05",34,0)
 . . I RC=-60  S EXIT=$$ERROR^RORERR(-60,,,,TASK)  Q
"RTN","RORUPD05",35,0)
 . . ;--- Fatal error in the subtask
"RTN","RORUPD05",36,0)
 . . I RC<0  S EXIT=+RC  D  Q
"RTN","RORUPD05",37,0)
 . . . S RC=$$ERROR^RORERR(-56,,,,+RC,"subtask #"_TASK)
"RTN","RORUPD05",38,0)
 . . ;--- The subtask is completed (accumulate the statistics)
"RTN","RORUPD05",39,0)
 . . S CNT=CNT+$P(RC,U),ECNT=ECNT+$P(RC,U,2)
"RTN","RORUPD05",40,0)
 . . K @RORUPDPI@("T",TASK)
"RTN","RORUPD05",41,0)
 . ;--- Timeout timer is ticking only if no subtasks are running
"RTN","RORUPD05",42,0)
 . S:TSKCNT'>0 TIMEOUT=TIMEOUT-1
"RTN","RORUPD05",43,0)
 Q $S(EXIT<0:EXIT,1:CNT_U_ECNT)
"RTN","RORUPD05",44,0)
 ;
"RTN","RORUPD05",45,0)
 ;***** PROCESSES THE DATA (SINGLE TASK OR MULTITASK MODE)
"RTN","RORUPD05",46,0)
 ;
"RTN","RORUPD05",47,0)
 ; [MAXNTSK]     Maximum number of data processing subtasks.
"RTN","RORUPD05",48,0)
 ;               If this parameter is less than 2, all patients
"RTN","RORUPD05",49,0)
 ;               will be processed by the single main task.
"RTN","RORUPD05",50,0)
 ;               Otherwise, all patients can be distributed among
"RTN","RORUPD05",51,0)
 ;               several subtasks.
"RTN","RORUPD05",52,0)
 ;
"RTN","RORUPD05",53,0)
 ;               If "N^M^AUTO" is passed as a value of this parameter
"RTN","RORUPD05",54,0)
 ;               and difference between the end and start dates is
"RTN","RORUPD05",55,0)
 ;               more than M days then N subtasks will be created.
"RTN","RORUPD05",56,0)
 ;
"RTN","RORUPD05",57,0)
 ; Return Values:
"RTN","RORUPD05",58,0)
 ;       <0  Error code
"RTN","RORUPD05",59,0)
 ;      >=0  Statistics returned by the $$MONITOR function
"RTN","RORUPD05",60,0)
 ;
"RTN","RORUPD05",61,0)
 ; The main task will wait for completion of the subtasks. If one
"RTN","RORUPD05",62,0)
 ; of them fails, all other (including the main one) will fail too.
"RTN","RORUPD05",63,0)
 ;
"RTN","RORUPD05",64,0)
PROCESS(MAXNTSK) ;
"RTN","RORUPD05",65,0)
 N COUNTERS,NTSK,OLDPI,RC,SUBSCR,TASKTBL,TMP
"RTN","RORUPD05",66,0)
 ;--- Calculate number of tasks and create the task table
"RTN","RORUPD05",67,0)
 D:$G(MAXNTSK)["AUTO"
"RTN","RORUPD05",68,0)
 . S TMP=$$FMDIFF^XLFDT(RORUPD("DSEND"),RORUPD("DSBEG"),1)
"RTN","RORUPD05",69,0)
 . S MAXNTSK=$S(TMP>$P(MAXNTSK,U,2):+MAXNTSK,1:0)
"RTN","RORUPD05",70,0)
 I $G(MAXNTSK)>1  D  Q:NTSK<0 NTSK
"RTN","RORUPD05",71,0)
 . S NTSK=$$TASKTBL(MAXNTSK,.TASKTBL)
"RTN","RORUPD05",72,0)
 ;--- Process all patients by the main task
"RTN","RORUPD05",73,0)
 Q:$G(NTSK)<2 $$PROCESS^RORUPD01()
"RTN","RORUPD05",74,0)
 ;
"RTN","RORUPD05",75,0)
 S RORUPD("JOB")=$J,OLDPI=RORUPDPI
"RTN","RORUPD05",76,0)
 ;--- Initialize the node in the ^XTMP global
"RTN","RORUPD05",77,0)
 I $G(RORPARM("SETUP"))  D
"RTN","RORUPD05",78,0)
 . S SUBSCR="RORUPDR"_+$O(RORUPD("LM2",""))
"RTN","RORUPD05",79,0)
 . S RORUPDPI=$NA(^XTMP(SUBSCR)),I=0
"RTN","RORUPD05",80,0)
 . F  S I=$O(@RORUPDPI@(I))  Q:I=""  K:I'="U" @RORUPDPI@(I)
"RTN","RORUPD05",81,0)
 E  D
"RTN","RORUPD05",82,0)
 . S SUBSCR="RORUPDJ"_$J
"RTN","RORUPD05",83,0)
 . S RORUPDPI=$NA(^XTMP(SUBSCR))
"RTN","RORUPD05",84,0)
 . K @RORUPDPI
"RTN","RORUPD05",85,0)
 D XTMPHDR^RORUTL01(SUBSCR,30,"PROCESS-RORUPD05")
"RTN","RORUPD05",86,0)
 M @RORUPDPI=@OLDPI
"RTN","RORUPD05",87,0)
 ;--- Indicate that the main task is running
"RTN","RORUPD05",88,0)
 L +@RORUPDPI@("T",0):7
"RTN","RORUPD05",89,0)
 E  Q $$ERROR^RORERR(-61)
"RTN","RORUPD05",90,0)
 ;
"RTN","RORUPD05",91,0)
 ;--- Start the subtasks
"RTN","RORUPD05",92,0)
 S RC=$$START(.TASKTBL)
"RTN","RORUPD05",93,0)
 ;--- Monitor the subtasks
"RTN","RORUPD05",94,0)
 S COUNTERS=$S(RC'<0:$$MONITOR(),1:RC)
"RTN","RORUPD05",95,0)
 ;
"RTN","RORUPD05",96,0)
 ;--- Clear "running" flag of the main task
"RTN","RORUPD05",97,0)
 ;    (request all unfinished subtasks to stop)
"RTN","RORUPD05",98,0)
 L -@RORUPDPI@("T",0)
"RTN","RORUPD05",99,0)
 ;--- Cleanup
"RTN","RORUPD05",100,0)
 I COUNTERS<0  D
"RTN","RORUPD05",101,0)
 . N TASK,ZTSK
"RTN","RORUPD05",102,0)
 . ;--- Dequeue subtasks that have not started yet
"RTN","RORUPD05",103,0)
 . S TASK=0
"RTN","RORUPD05",104,0)
 . F  S TASK=$O(@RORUPDPI@("T",TASK))  Q:TASK=""  D
"RTN","RORUPD05",105,0)
 . . S ZTSK=TASK  D DQ^%ZTLOAD
"RTN","RORUPD05",106,0)
 . ;--- Wait for all unfinished subtasks to stop
"RTN","RORUPD05",107,0)
 . L +@RORUPDPI@("T"):300  L -@RORUPDPI@("T")
"RTN","RORUPD05",108,0)
 K @RORUPDPI@("T")
"RTN","RORUPD05",109,0)
 Q COUNTERS
"RTN","RORUPD05",110,0)
 ;
"RTN","RORUPD05",111,0)
 ;***** STARTS THE SUBTASKS
"RTN","RORUPD05",112,0)
 ;
"RTN","RORUPD05",113,0)
 ; .TASKTBL      Reference to a local variable containing the table
"RTN","RORUPD05",114,0)
 ;               of subtask parameters. See the TASKSPLT and TASKTBL
"RTN","RORUPD05",115,0)
 ;               entry points for details.
"RTN","RORUPD05",116,0)
 ;
"RTN","RORUPD05",117,0)
 ; Return Values:
"RTN","RORUPD05",118,0)
 ;       <0  Error code
"RTN","RORUPD05",119,0)
 ;        0  Ok
"RTN","RORUPD05",120,0)
 ;
"RTN","RORUPD05",121,0)
START(TASKTBL) ;
"RTN","RORUPD05",122,0)
 N CNT,I,ZTDESC,ZTDTH,ZTIO,ZTPRI,ZTRTN,ZTSAVE,ZTSK
"RTN","RORUPD05",123,0)
 K @RORUPDPI@("T")
"RTN","RORUPD05",124,0)
 ;--- Do not allow subtasks to proceed before everything is ready
"RTN","RORUPD05",125,0)
 L +@RORUPDPI@("T"):7
"RTN","RORUPD05",126,0)
 E  Q $$ERROR^RORERR(-61)
"RTN","RORUPD05",127,0)
 ;--- Start the subtasks
"RTN","RORUPD05",128,0)
 S I=""
"RTN","RORUPD05",129,0)
 F CNT=1:1  S I=$O(TASKTBL(I))  Q:I=""  D
"RTN","RORUPD05",130,0)
 . S ZTRTN="SUBTASK^RORUPD05",ZTIO=""
"RTN","RORUPD05",131,0)
 . S ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,,,,CNT*30)
"RTN","RORUPD05",132,0)
 . S ZTDESC="Registry Update Subtask ("_$TR(TASKTBL(I),U,"-")_")"
"RTN","RORUPD05",133,0)
 . S ZTSAVE("RORIENS")=TASKTBL(I)
"RTN","RORUPD05",134,0)
 . S ZTSAVE("RORLRC(")=""
"RTN","RORUPD05",135,0)
 . S ZTSAVE("RORPARM(")=""
"RTN","RORUPD05",136,0)
 . S ZTSAVE("RORUPD(")=""
"RTN","RORUPD05",137,0)
 . S ZTSAVE("RORUPDPI")=""
"RTN","RORUPD05",138,0)
 . D ^%ZTLOAD
"RTN","RORUPD05",139,0)
 . ;--- Indicate that the subtask has been scheduled
"RTN","RORUPD05",140,0)
 . S @RORUPDPI@("T",ZTSK)="S"
"RTN","RORUPD05",141,0)
 . D LOG^RORERR(-62,,,ZTSK)
"RTN","RORUPD05",142,0)
 ;--- The subtasks may proceed now
"RTN","RORUPD05",143,0)
 L -@RORUPDPI@("T")
"RTN","RORUPD05",144,0)
 Q 0
"RTN","RORUPD05",145,0)
 ;
"RTN","RORUPD05",146,0)
 ;***** DATA PROCESSING SUBTASK
"RTN","RORUPD05",147,0)
 ;
"RTN","RORUPD05",148,0)
 ; RORIENS       Diapason of IENs in the 'PATIENT' file
"RTN","RORUPD05",149,0)
 ;                 ^1: Start IEN
"RTN","RORUPD05",150,0)
 ;                 ^2: End IEN
"RTN","RORUPD05",151,0)
 ; RORLRC        List of Lab result codes to check
"RTN","RORUPD05",152,0)
 ; RORPARM       Application parameters
"RTN","RORUPD05",153,0)
 ; RORUPD        Registry update descriptor
"RTN","RORUPD05",154,0)
 ; RORUPDPI      Closed root of the temporary storage
"RTN","RORUPD05",155,0)
 ;
"RTN","RORUPD05",156,0)
SUBTASK ;
"RTN","RORUPD05",157,0)
 N RORERROR      ; Error processing data
"RTN","RORUPD05",158,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","RORUPD05",159,0)
 ;
"RTN","RORUPD05",160,0)
 N RC,TASK,TMP
"RTN","RORUPD05",161,0)
 S TASK=ZTSK
"RTN","RORUPD05",162,0)
 ;--- We are not in the KIDS environment anymore
"RTN","RORUPD05",163,0)
 K RORPARM("KIDS")
"RTN","RORUPD05",164,0)
 ;--- Disable debug output (subtask has no device)
"RTN","RORUPD05",165,0)
 S:$G(RORPARM("DEBUG"))>1 RORPARM("DEBUG")=1
"RTN","RORUPD05",166,0)
 ;--- Indicate that the subtask is running
"RTN","RORUPD05",167,0)
 L +@RORUPDPI@("T",TASK):180
"RTN","RORUPD05",168,0)
 E  S RC=$$ERROR^RORERR(-61)  Q
"RTN","RORUPD05",169,0)
 ;--- Check if the main task is running
"RTN","RORUPD05",170,0)
 L +@RORUPDPI@("T",0):3
"RTN","RORUPD05",171,0)
 I  D
"RTN","RORUPD05",172,0)
 . ;--- Cleanup if the main task is not running
"RTN","RORUPD05",173,0)
 . L -@RORUPDPI@("T",0)
"RTN","RORUPD05",174,0)
 . K @RORUPDPI@("T",TASK)
"RTN","RORUPD05",175,0)
 E  D
"RTN","RORUPD05",176,0)
 . N REGIEN,REGLST
"RTN","RORUPD05",177,0)
 . ;--- Error code that will be in effect if the subtask crashes
"RTN","RORUPD05",178,0)
 . S @RORUPDPI@("T",TASK)=-60
"RTN","RORUPD05",179,0)
 . ;--- Initialize the variables
"RTN","RORUPD05",180,0)
 . D INIT^RORUTL01(),CLEAR^RORERR("SUBTASK^RORUPD05")
"RTN","RORUPD05",181,0)
 . S REGIEN=""
"RTN","RORUPD05",182,0)
 . F  S REGIEN=$O(@RORUPDPI@(2,REGIEN))  Q:REGIEN=""  D
"RTN","RORUPD05",183,0)
 . . S TMP=$P(@RORUPDPI@(2,REGIEN),U)  S:TMP'="" REGLST(TMP)=REGIEN
"RTN","RORUPD05",184,0)
 . S TMP="REGISTRY UPDATE SUBTASK #"_TASK_" STARTED"
"RTN","RORUPD05",185,0)
 . S TMP=$$OPEN^RORLOG(.REGLST,1,TMP)
"RTN","RORUPD05",186,0)
 . ;--- Process the patients from 'Start IEN' to 'End IEN'
"RTN","RORUPD05",187,0)
 . S RC=$$PROCESS^RORUPD01($P(RORIENS,U),$P(RORIENS,U,2))
"RTN","RORUPD05",188,0)
 . ;--- Set the error code returned by the registry update process
"RTN","RORUPD05",189,0)
 . S @RORUPDPI@("T",TASK)=RC
"RTN","RORUPD05",190,0)
 . ;--- Cleanup and error processing
"RTN","RORUPD05",191,0)
 . S:RC=-42 ZTSTOP=1
"RTN","RORUPD05",192,0)
 . S TMP="REGISTRY UPDATE SUBTASK "_$S(RC<0:"ABORTED",1:"COMPLETED")
"RTN","RORUPD05",193,0)
 . D CLOSE^RORLOG(TMP,$S(RC'<0:RC,1:""))
"RTN","RORUPD05",194,0)
 ;--- Clear "running" flag of the subtask
"RTN","RORUPD05",195,0)
 L -@RORUPDPI@("T",TASK)
"RTN","RORUPD05",196,0)
 S ZTREQ="@"
"RTN","RORUPD05",197,0)
 Q
"RTN","RORUPD05",198,0)
 ;
"RTN","RORUPD05",199,0)
 ;***** CALCULATES TABLE OF SUBTASKS
"RTN","RORUPD05",200,0)
 ;
"RTN","RORUPD05",201,0)
 ; MAXNTSK       Maximum number of data processing subtasks
"RTN","RORUPD05",202,0)
 ;
"RTN","RORUPD05",203,0)
 ; .TASKTBL      Reference to a local variable where table of
"RTN","RORUPD05",204,0)
 ;               subtask parameters is returned:
"RTN","RORUPD05",205,0)
 ;
"RTN","RORUPD05",206,0)
 ;               TASKTBL       Number of subtasks
"RTN","RORUPD05",207,0)
 ;               TASKTBL(I)    Subtask parameters
"RTN","RORUPD05",208,0)
 ;                               ^1: Start IEN
"RTN","RORUPD05",209,0)
 ;                               ^2: End IEN
"RTN","RORUPD05",210,0)
 ;
"RTN","RORUPD05",211,0)
 ; Return Values:
"RTN","RORUPD05",212,0)
 ;       <0  Error code
"RTN","RORUPD05",213,0)
 ;        0  Process all data by the main task
"RTN","RORUPD05",214,0)
 ;       >1  Number of subtasks
"RTN","RORUPD05",215,0)
 ;
"RTN","RORUPD05",216,0)
 ; If the PATIENT file contains more than 100,000 records, up to
"RTN","RORUPD05",217,0)
 ; MAXNTSK data processing subtasks may be defined. Otherwise, the
"RTN","RORUPD05",218,0)
 ; data should be processed by the main task.
"RTN","RORUPD05",219,0)
 ;
"RTN","RORUPD05",220,0)
TASKTBL(MAXNTSK,RORTBL) ;
"RTN","RORUPD05",221,0)
 N I,IEN,INC,LST,NR,RORTMP
"RTN","RORUPD05",222,0)
 K RORTBL
"RTN","RORUPD05",223,0)
 ;--- Get number of records in the PATIENT file
"RTN","RORUPD05",224,0)
 S NR=$$GET1^DID(2,,,"ENTRIES",,"RORMSG")
"RTN","RORUPD05",225,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9)
"RTN","RORUPD05",226,0)
 Q:NR'>10000 0
"RTN","RORUPD05",227,0)
 ;--- Generate IEN intervals (no more than 300)
"RTN","RORUPD05",228,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORUPD05",229,0)
 S INC=NR\300,NR=0  S:INC<1 INC=1
"RTN","RORUPD05",230,0)
 F IEN=0:INC  S IEN=$O(^DPT(IEN))  Q:IEN'>0  D
"RTN","RORUPD05",231,0)
 . S NR=NR+1,@RORTMP@(NR)=IEN
"RTN","RORUPD05",232,0)
 ;--- Generate the task table
"RTN","RORUPD05",233,0)
 S IEN=1,INC=NR/MAXNTSK
"RTN","RORUPD05",234,0)
 F RORTBL=1:1  D  Q:(RORTBL'<MAXNTSK)!(IEN'>0)
"RTN","RORUPD05",235,0)
 . S RORTBL(RORTBL)=IEN
"RTN","RORUPD05",236,0)
 . S I=$J(RORTBL*INC,0,0),IEN=$G(@RORTMP@(I))
"RTN","RORUPD05",237,0)
 . S $P(RORTBL(RORTBL),U,2)=IEN
"RTN","RORUPD05",238,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORUPD05",239,0)
 ;--- Analize the result
"RTN","RORUPD05",240,0)
 I $G(RORTBL)<2  K RORTBL
"RTN","RORUPD05",241,0)
 E  S $P(RORTBL(RORTBL),U,2)=$O(^DPT(" "),-1)
"RTN","RORUPD05",242,0)
 Q +$G(RORTBL)
"RTN","RORUPD51")
0^46^B43539129^B43538631
"RTN","RORUPD51",1,0)
RORUPD51 ;HCIOFO/SG - UPDATE PATIENT'S DEMOGRAPHIC DATA (1) ; 7/6/06 11:15am
"RTN","RORUPD51",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORUPD51",3,0)
 ;
"RTN","RORUPD51",4,0)
 Q
"RTN","RORUPD51",5,0)
 ;
"RTN","RORUPD51",6,0)
 ;***** MARKS REGISTRIES (UPDATE DEMOGRAPHICS)
"RTN","RORUPD51",7,0)
 ;
"RTN","RORUPD51",8,0)
 ; PTIEN         Patient IEN
"RTN","RORUPD51",9,0)
 ; [DOD]         Date of death
"RTN","RORUPD51",10,0)
 ;
"RTN","RORUPD51",11,0)
 ; Return Values:
"RTN","RORUPD51",12,0)
 ;       <0  Error code
"RTN","RORUPD51",13,0)
 ;        0  Ok
"RTN","RORUPD51",14,0)
 ;
"RTN","RORUPD51",15,0)
MARKREGS(PTIEN,DOD) ;
"RTN","RORUPD51",16,0)
 N ACTIVE,ECNT,I,IENS,RC,RI,TMP
"RTN","RORUPD51",17,0)
 N RORBUF,RORFDA,RORMSG,RORSRC
"RTN","RORUPD51",18,0)
 ;--- Compile a list of associated registries
"RTN","RORUPD51",19,0)
 D FIND^DIC(798,,"@","QUX",PTIEN,,"B",,,"RORBUF","RORMSG")
"RTN","RORUPD51",20,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,PTIEN,798)
"RTN","RORUPD51",21,0)
 ;--- Mark patient records of the registries
"RTN","RORUPD51",22,0)
 S RI="",ECNT=0
"RTN","RORUPD51",23,0)
 F  S RI=$O(RORBUF("DILIST",2,RI))  Q:RI=""  D  L -^RORDATA(798,+IENS)
"RTN","RORUPD51",24,0)
 . S IENS=RORBUF("DILIST",2,RI)_","
"RTN","RORUPD51",25,0)
 . K RORFDA,RORSRC
"RTN","RORUPD51",26,0)
 . ;--- Try to lock the record; if this fails, continue anyway
"RTN","RORUPD51",27,0)
 . L +^RORDATA(798,+IENS):3
"RTN","RORUPD51",28,0)
 . ;--- Load the field values
"RTN","RORUPD51",29,0)
 . D GETS^DIQ(798,IENS,"4;8","EI","RORSRC","RORMSG")
"RTN","RORUPD51",30,0)
 . I $G(DIERR)  D  S ECNT=ECNT+1  Q
"RTN","RORUPD51",31,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798,IENS)
"RTN","RORUPD51",32,0)
 . S ACTIVE=+$G(RORSRC(798,IENS,8,"E"))
"RTN","RORUPD51",33,0)
 . ;--- Do not mark again if already marked
"RTN","RORUPD51",34,0)
 . I '$G(RORSRC(798,IENS,4,"I"))  S RC=0  D  Q:RC<0
"RTN","RORUPD51",35,0)
 . . ;--- Mark only active records
"RTN","RORUPD51",36,0)
 . . S:ACTIVE RORFDA(798,IENS,4)=1
"RTN","RORUPD51",37,0)
 . ;--- Update registry data record
"RTN","RORUPD51",38,0)
 . I $D(RORFDA)>1  S RC=0  D  Q:RC<0
"RTN","RORUPD51",39,0)
 . . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORUPD51",40,0)
 . . I $G(DIERR)  D  S ECNT=ECNT+1
"RTN","RORUPD51",41,0)
 . . . S RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798,IENS)
"RTN","RORUPD51",42,0)
 Q $S(ECNT>0:-9,1:0)
"RTN","RORUPD51",43,0)
 ;
"RTN","RORUPD51",44,0)
 ;***** PROCESSES THE MERGED PATIENT RECORD
"RTN","RORUPD51",45,0)
 ;
"RTN","RORUPD51",46,0)
 ; DFN           IEN of the merged record (medrged from)
"RTN","RORUPD51",47,0)
 ; NEWDFN        New patient IEN (merged to)
"RTN","RORUPD51",48,0)
 ;
"RTN","RORUPD51",49,0)
 ; Return values:
"RTN","RORUPD51",50,0)
 ;       <0  Error code
"RTN","RORUPD51",51,0)
 ;        0  Ok
"RTN","RORUPD51",52,0)
 ;
"RTN","RORUPD51",53,0)
MERGE(DFN,NEWDFN) ;
"RTN","RORUPD51",54,0)
 N DA,DIK,DTNEW,DTOLD,IEN,IENS,IR,PTIEN,REGIEN,REGLST,RORBUF,RORFDA,RORMSG,TMP
"RTN","RORUPD51",55,0)
 D LOG^RORERR(-111,,,DFN,NEWDFN)
"RTN","RORUPD51",56,0)
 ;=== Get the lists of registry records associated with the
"RTN","RORUPD51",57,0)
 ;=== merged from ("from") and merged to ("to") patient data
"RTN","RORUPD51",58,0)
 F PTIEN=DFN,NEWDFN  D  Q:RC<0
"RTN","RORUPD51",59,0)
 . K RORBUF,RORMSG
"RTN","RORUPD51",60,0)
 . D FIND^DIC(798,,"@;.02I;1I","QUX",PTIEN,,"B",,,"RORBUF","RORMSG")
"RTN","RORUPD51",61,0)
 . I $G(DIERR)  S RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798)  Q
"RTN","RORUPD51",62,0)
 . S IR=0
"RTN","RORUPD51",63,0)
 . F  S IR=$O(RORBUF("DILIST",2,IR))  Q:IR'>0  D  Q:RC<0
"RTN","RORUPD51",64,0)
 . . S IEN=+RORBUF("DILIST",2,IR)
"RTN","RORUPD51",65,0)
 . . S REGIEN=+$G(RORBUF("DILIST","ID",IR,.02))
"RTN","RORUPD51",66,0)
 . . I REGIEN'>0  S RC=$$ERROR^RORERR(-95,,,PTIEN,798,IEN_",",.02)  Q
"RTN","RORUPD51",67,0)
 . . S TMP=+$G(RORBUF("DILIST","ID",IR,1))
"RTN","RORUPD51",68,0)
 . . I TMP'>0  S RC=$$ERROR^RORERR(-95,,,PTIEN,798,IEN_",",1)  Q
"RTN","RORUPD51",69,0)
 . . S REGLST(PTIEN,REGIEN)=IEN_U_TMP
"RTN","RORUPD51",70,0)
 Q:RC<0 RC
"RTN","RORUPD51",71,0)
 ;=== Compare the "from" and "to" registry records
"RTN","RORUPD51",72,0)
 S REGIEN=0
"RTN","RORUPD51",73,0)
 F  S REGIEN=$O(REGLST(DFN,REGIEN))  Q:REGIEN'>0  D
"RTN","RORUPD51",74,0)
 . K RORFDA,RORMSG  S RC=0
"RTN","RORUPD51",75,0)
 . S DTOLD=+$P(REGLST(DFN,REGIEN),U,2)
"RTN","RORUPD51",76,0)
 . S DTNEW=+$P($G(REGLST(NEWDFN,REGIEN)),U,2)
"RTN","RORUPD51",77,0)
 . I (DTNEW'>0)!(DTOLD<DTNEW)  D  Q:RC<0
"RTN","RORUPD51",78,0)
 . . ;--- Make sure that the "to" patient has a record
"RTN","RORUPD51",79,0)
 . . ;--- in the ROR PATIENT file.
"RTN","RORUPD51",80,0)
 . . S RC=$$ADDPDATA^RORUPD50(NEWDFN)  Q:RC<0
"RTN","RORUPD51",81,0)
 . . ;--- Replace the .01 value in the "from" registry record with
"RTN","RORUPD51",82,0)
 . . ;    the new patient pointer since there is either no other
"RTN","RORUPD51",83,0)
 . . ;--- record for this patient or it is newer than the "from" one.
"RTN","RORUPD51",84,0)
 . . S IENS=+$P(REGLST(DFN,REGIEN),U)_","
"RTN","RORUPD51",85,0)
 . . S RORFDA(798,IENS,.01)=NEWDFN
"RTN","RORUPD51",86,0)
 . . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORUPD51",87,0)
 . . I $G(DIERR)  S RC=$$DBS^RORERR("RORMSG",-9,,DFN,798,IENS)  Q
"RTN","RORUPD51",88,0)
 . . ;--- Delete the "to" registry record. It was created after
"RTN","RORUPD51",89,0)
 . . ;--- the original ("from") one and we should keep the latter.
"RTN","RORUPD51",90,0)
 . . S DA=+$P($G(REGLST(NEWDFN,REGIEN)),U)
"RTN","RORUPD51",91,0)
 . . I DA>0  S DIK=$$ROOT^DILFD(798)  D ^DIK
"RTN","RORUPD51",92,0)
 . E  D
"RTN","RORUPD51",93,0)
 . . ;--- Delete the "from" registry record since
"RTN","RORUPD51",94,0)
 . . ;--- the "to" record is actually older
"RTN","RORUPD51",95,0)
 . . S DIK=$$ROOT^DILFD(798),DA=+$P(REGLST(DFN,REGIEN),U)  D ^DIK
"RTN","RORUPD51",96,0)
 . ;--- Indicate successful merge
"RTN","RORUPD51",97,0)
 . K REGLST(DFN,REGIEN)
"RTN","RORUPD51",98,0)
 ;=== Done
"RTN","RORUPD51",99,0)
 Q 0
"RTN","RORUPD51",100,0)
 ;
"RTN","RORUPD51",101,0)
 ;***** SCANS PATIENTS AND UPDATES DEMOGRAPHIC DATA (IF NECESSARY)
"RTN","RORUPD51",102,0)
 ;
"RTN","RORUPD51",103,0)
 ; .REGLST       Reference to a local array containing
"RTN","RORUPD51",104,0)
 ;               registry names as subscripts
"RTN","RORUPD51",105,0)
 ;
"RTN","RORUPD51",106,0)
 ; Return Values:
"RTN","RORUPD51",107,0)
 ;       <0  Error code
"RTN","RORUPD51",108,0)
 ;        0  Ok
"RTN","RORUPD51",109,0)
 ;
"RTN","RORUPD51",110,0)
UPDDEM(REGLST) ;
"RTN","RORUPD51",111,0)
 N CNT,IR,PTIEN,RC,REGIEN,REGNAME,ROOT,SCR,UPD,UPDCNT
"RTN","RORUPD51",112,0)
 N RORLOR,RORLST,RORMSG
"RTN","RORUPD51",113,0)
 S ROOT=$$ROOT^DILFD(798,,1)
"RTN","RORUPD51",114,0)
 ;--- Compile a list of registry internal entry numbers
"RTN","RORUPD51",115,0)
 S REGNAME="",RC=0
"RTN","RORUPD51",116,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","RORUPD51",117,0)
 . S RC=+$G(REGLST(REGNAME))
"RTN","RORUPD51",118,0)
 . S:RC'>0 RC=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORUPD51",119,0)
 . S:RC>0 RORLOR(+RC)=""
"RTN","RORUPD51",120,0)
 Q:RC<0 RC
"RTN","RORUPD51",121,0)
 ;--- Loop through the patients of the registries
"RTN","RORUPD51",122,0)
 S PTIEN="",(CNT,RC)=0
"RTN","RORUPD51",123,0)
 F  S PTIEN=$O(@ROOT@("B",PTIEN))  Q:PTIEN=""  D  Q:RC<0
"RTN","RORUPD51",124,0)
 . ;--- Check if task stop has been requested
"RTN","RORUPD51",125,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD  D  Q
"RTN","RORUPD51",126,0)
 . . S RC=$$ERROR^RORERR(-42)
"RTN","RORUPD51",127,0)
 . S CNT=CNT+1
"RTN","RORUPD51",128,0)
 . I $G(RORPARM("DEBUG"))>1  W:$E($G(IOST),1,2)="C-" *13,CNT
"RTN","RORUPD51",129,0)
 . ;--- Check for "stray" items in the cross-reference
"RTN","RORUPD51",130,0)
 . S IR=""
"RTN","RORUPD51",131,0)
 . F  S IR=$O(@ROOT@("B",PTIEN,IR))  Q:IR=""  D
"RTN","RORUPD51",132,0)
 . . K:$P($G(@ROOT@(IR,0)),U)'>0 @ROOT@("B",PTIEN,IR)
"RTN","RORUPD51",133,0)
 . Q:$D(@ROOT@("B",PTIEN))<10
"RTN","RORUPD51",134,0)
 . ;--- Check for a merged patient record
"RTN","RORUPD51",135,0)
 . S RC=$$MERGED^RORUTL18(PTIEN)
"RTN","RORUPD51",136,0)
 . I RC  S:RC>0 RC=$$MERGE(PTIEN,RC)  S RC=0  Q
"RTN","RORUPD51",137,0)
 . ;--- Load a list of patient's registry records
"RTN","RORUPD51",138,0)
 . S SCR="S Y=+$P($G(^(0)),U,2) I Y,$D(RORLOR(Y))"
"RTN","RORUPD51",139,0)
 . D FIND^DIC(798,,"@;.02I;3I;8E","QUX",PTIEN,,"B",SCR,,"RORLST","RORMSG")
"RTN","RORUPD51",140,0)
 . I $G(DIERR)  D  Q
"RTN","RORUPD51",141,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798)
"RTN","RORUPD51",142,0)
 . ;--- Demographic data should be checked only if at least one of
"RTN","RORUPD51",143,0)
 . ;--- the registry records of the patient is active.
"RTN","RORUPD51",144,0)
 . S IR="",UPDCNT=0
"RTN","RORUPD51",145,0)
 . F  S IR=$O(RORLST("DILIST","ID",IR))  Q:IR=""  D
"RTN","RORUPD51",146,0)
 . . S UPD=+$G(RORLST("DILIST","ID",IR,8))
"RTN","RORUPD51",147,0)
 . . S REGIEN=+$G(RORLST("DILIST","ID",IR,.02))
"RTN","RORUPD51",148,0)
 . . S TMP=+$G(RORLST("DILIST","ID",IR,3))  ; STATUS
"RTN","RORUPD51",149,0)
 . . S CNT(REGIEN,TMP)=$G(CNT(REGIEN,TMP))+1
"RTN","RORUPD51",150,0)
 . . S:UPD UPDCNT=UPDCNT+1
"RTN","RORUPD51",151,0)
 . S:UPDCNT RC=$$UPDPTDEM(PTIEN)
"RTN","RORUPD51",152,0)
 D:RC'<0 UPDRCNT(.CNT)
"RTN","RORUPD51",153,0)
 ;---
"RTN","RORUPD51",154,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUPD51",155,0)
 ;
"RTN","RORUPD51",156,0)
 ;***** UPDATES DEMOGRAPHIC DATA OF THE PATIENT (IF NECESSARY)
"RTN","RORUPD51",157,0)
 ;
"RTN","RORUPD51",158,0)
 ; PTIEN         Patient IEN
"RTN","RORUPD51",159,0)
 ;
"RTN","RORUPD51",160,0)
 ; Return Values:
"RTN","RORUPD51",161,0)
 ;       <0  Error code
"RTN","RORUPD51",162,0)
 ;        0  Ok
"RTN","RORUPD51",163,0)
 ;
"RTN","RORUPD51",164,0)
UPDPTDEM(PTIEN) ;
"RTN","RORUPD51",165,0)
 N CF,DOD,IENS,RC,RORMSG,RORPAT
"RTN","RORUPD51",166,0)
 S IENS=PTIEN_",",CF=0
"RTN","RORUPD51",167,0)
 ;--- Try to lock the record of the ROR PATIENT file
"RTN","RORUPD51",168,0)
 L +^RORDATA(798.4,PTIEN):3
"RTN","RORUPD51",169,0)
 E  Q $$ERROR^RORERR(-11,,,PTIEN,"file #798.4")
"RTN","RORUPD51",170,0)
 D
"RTN","RORUPD51",171,0)
 . ;--- Compare demographic data
"RTN","RORUPD51",172,0)
 . S RC=$$PATDATA^RORUPD52(IENS,.RORPAT,IENS,.DOD)  Q:RC<0
"RTN","RORUPD51",173,0)
 . S:RC CF=1
"RTN","RORUPD51",174,0)
 . ;--- Mark registry records of the patient
"RTN","RORUPD51",175,0)
 . I CF  S RC=$$MARKREGS(PTIEN,$G(DOD))  Q:RC<0
"RTN","RORUPD51",176,0)
 . ;--- Update demographic data
"RTN","RORUPD51",177,0)
 . I CF,$D(RORPAT)>1  S RC=0  D  Q:RC<0
"RTN","RORUPD51",178,0)
 . . D FILE^DIE(,"RORPAT","RORMSG")  Q:'$G(DIERR)
"RTN","RORUPD51",179,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798.4)
"RTN","RORUPD51",180,0)
 ;
"RTN","RORUPD51",181,0)
 L -^RORDATA(798.4,PTIEN)
"RTN","RORUPD51",182,0)
 Q 0
"RTN","RORUPD51",183,0)
 ;
"RTN","RORUPD51",184,0)
 ;***** UPDATES RECORD COUNTERS IN THE 'ROR REGISTRY PARAMETERS' FILE
"RTN","RORUPD51",185,0)
 ;
"RTN","RORUPD51",186,0)
 ; .CNT(         Reference to a local array containg registry
"RTN","RORUPD51",187,0)
 ;               record counters
"RTN","RORUPD51",188,0)
 ;   Registry#,
"RTN","RORUPD51",189,0)
 ;     0)        Number of confirmed records
"RTN","RORUPD51",190,0)
 ;     4)        Number of pending records
"RTN","RORUPD51",191,0)
 ;
"RTN","RORUPD51",192,0)
UPDRCNT(CNT) ;
"RTN","RORUPD51",193,0)
 N IENS,RC,REGIEN,RORFDA,RORMSG
"RTN","RORUPD51",194,0)
 S REGIEN=0
"RTN","RORUPD51",195,0)
 F  S REGIEN=$O(CNT(REGIEN))  Q:REGIEN=""  D
"RTN","RORUPD51",196,0)
 . S IENS=REGIEN_","
"RTN","RORUPD51",197,0)
 . S RORFDA(798.1,IENS,19.1)=$G(CNT(REGIEN,0))
"RTN","RORUPD51",198,0)
 . S RORFDA(798.1,IENS,19.2)=$G(CNT(REGIEN,4))
"RTN","RORUPD51",199,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORUPD51",200,0)
 . I $G(DIERR)  D  Q
"RTN","RORUPD51",201,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,798.1,IENS)
"RTN","RORUPD51",202,0)
 Q
"RTN","RORUTL05")
0^4^B57340264^B57340264
"RTN","RORUTL05",1,0)
RORUTL05 ;HCIOFO/SG - MISCELLANEOUS UTILITIES ; 3/13/06 9:25am
"RTN","RORUTL05",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORUTL05",3,0)
 ;
"RTN","RORUTL05",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL05",5,0)
 ;
"RTN","RORUTL05",6,0)
 ; #4493         Read the .01 field of the file #771.7 (private)
"RTN","RORUTL05",7,0)
 ; #10040        Access to the HOSPITAL LOCATION file (supported)
"RTN","RORUTL05",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORUTL05",9,0)
 ;
"RTN","RORUTL05",10,0)
 Q
"RTN","RORUTL05",11,0)
 ;
"RTN","RORUTL05",12,0)
 ;***** CHECKS IF THE E-MAIL NOTIFICATION IS ENABLED
"RTN","RORUTL05",13,0)
 ;
"RTN","RORUTL05",14,0)
 ; REGIEN        Registry IEN
"RTN","RORUTL05",15,0)
 ;
"RTN","RORUTL05",16,0)
 ; Return Values:
"RTN","RORUTL05",17,0)
 ;        0  Do not send e-mail notifications
"RTN","RORUTL05",18,0)
 ;        1  E-mail notifications are enabled
"RTN","RORUTL05",19,0)
 ;
"RTN","RORUTL05",20,0)
CCRNTFY(REGIEN) ;
"RTN","RORUTL05",21,0)
 N DOMAIN,RC
"RTN","RORUTL05",22,0)
 ;--- Check if not a production account
"RTN","RORUTL05",23,0)
 I $T(PROD^XUPROD)'=""  Q:'$$PROD^XUPROD() 0
"RTN","RORUTL05",24,0)
 ;--- Check the domain name
"RTN","RORUTL05",25,0)
 S DOMAIN=$G(^XMB("NETNAME"))
"RTN","RORUTL05",26,0)
 Q:DOMAIN'?1.E1".VA.GOV" 0
"RTN","RORUTL05",27,0)
 Q:(DOMAIN?1"TEST.".E)!(DOMAIN?1"TST.".E) 0
"RTN","RORUTL05",28,0)
 ;--- Registry-specific checks
"RTN","RORUTL05",29,0)
 I $G(REGIEN)>0  S RC=1  D  Q:'RC 0
"RTN","RORUTL05",30,0)
 . N HL,HLECH,HLFS,HLQ,NAME,RORMSG
"RTN","RORUTL05",31,0)
 . ;--- Get the HL7 protocol name
"RTN","RORUTL05",32,0)
 . S NAME=$$GET1^DIQ(798.1,+REGIEN,13,,,"RORMSG")  Q:NAME=""
"RTN","RORUTL05",33,0)
 . ;--- Check the HL7 processing ID
"RTN","RORUTL05",34,0)
 . D INIT^HLFNC2(NAME,.HL)
"RTN","RORUTL05",35,0)
 . I $G(HL("PID"))'="",HL("PID")'="P"  S RC=0  Q
"RTN","RORUTL05",36,0)
 ;--- Notification is enabled (production account)
"RTN","RORUTL05",37,0)
 Q 1
"RTN","RORUTL05",38,0)
 ;
"RTN","RORUTL05",39,0)
 ;***** CHECK IF THE PATIENT'S RECORD IN FILE #2 IS VALID
"RTN","RORUTL05",40,0)
 ;
"RTN","RORUTL05",41,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORUTL05",42,0)
 ;
"RTN","RORUTL05",43,0)
 ; Return Values:
"RTN","RORUTL05",44,0)
 ;       <0  Error code
"RTN","RORUTL05",45,0)
 ;        0  Ok
"RTN","RORUTL05",46,0)
 ;
"RTN","RORUTL05",47,0)
CHKPTR(DFN,SILENT) ;
"RTN","RORUTL05",48,0)
 N RC,VA,VADM,VAERR
"RTN","RORUTL05",49,0)
 D VADEM(DFN)
"RTN","RORUTL05",50,0)
 I $G(VADM(1))=""  S RC=-102  D:'$G(SILENT)  Q RC
"RTN","RORUTL05",51,0)
 . D ERROR^RORERR(RC,,,,"PATIENT",DFN)
"RTN","RORUTL05",52,0)
 Q 0
"RTN","RORUTL05",53,0)
 ;
"RTN","RORUTL05",54,0)
 ;***** DELETES ALL RECORDS FROM THE (SUB)FILE
"RTN","RORUTL05",55,0)
 ;
"RTN","RORUTL05",56,0)
 ; FILE          File/Subfile number
"RTN","RORUTL05",57,0)
 ; [IENS]        IENS of the subfile
"RTN","RORUTL05",58,0)
 ;
"RTN","RORUTL05",59,0)
 ; Return Values:
"RTN","RORUTL05",60,0)
 ;       <0  Error code
"RTN","RORUTL05",61,0)
 ;        0  Ok
"RTN","RORUTL05",62,0)
 ;
"RTN","RORUTL05",63,0)
CLEAR(FILE,IENS) ;
"RTN","RORUTL05",64,0)
 Q:'$$VFILE^DILFD(FILE) 0
"RTN","RORUTL05",65,0)
 N DA,DIK,RC,ROOT,TMP
"RTN","RORUTL05",66,0)
 S IENS=$G(IENS)
"RTN","RORUTL05",67,0)
 ;--- Lock the (sub)file
"RTN","RORUTL05",68,0)
 S RC=$$LOCK^RORLOCK(FILE,IENS)
"RTN","RORUTL05",69,0)
 I RC  D  Q RC
"RTN","RORUTL05",70,0)
 . S TMP=$$GET1^DID(FILE,,,"NAME",,"RORMSG")
"RTN","RORUTL05",71,0)
 . S TMP=$S(TMP'="":"file",1:"subfile")_" #"_FILE
"RTN","RORUTL05",72,0)
 . S:IENS'="" TMP=TMP_"; IENS: '"_IENS_"'"
"RTN","RORUTL05",73,0)
 . S RC=$$ERROR^RORERR(-11,,"By "_$$TEXT^RORLOCK(RC),,TMP)
"RTN","RORUTL05",74,0)
 ;
"RTN","RORUTL05",75,0)
 ;--- Delete the records
"RTN","RORUTL05",76,0)
 S DIK=$$ROOT^DILFD(FILE,IENS)
"RTN","RORUTL05",77,0)
 S ROOT=$$CREF^DILF(DIK)
"RTN","RORUTL05",78,0)
 D DA^DILF(IENS,.DA)  S DA=0
"RTN","RORUTL05",79,0)
 F  S DA=$O(@ROOT@(DA))  Q:DA'>0  D ^DIK
"RTN","RORUTL05",80,0)
 ;
"RTN","RORUTL05",81,0)
 ;--- Unlock the (sub)file
"RTN","RORUTL05",82,0)
 D UNLOCK^RORLOCK(FILE,IENS)
"RTN","RORUTL05",83,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUTL05",84,0)
 ;
"RTN","RORUTL05",85,0)
 ;***** CLEARS THE FIELDS OF THE RECORDS FOUND BY NAME
"RTN","RORUTL05",86,0)
 ;
"RTN","RORUTL05",87,0)
 ; FILE          File number
"RTN","RORUTL05",88,0)
 ; [IENS]        IENS of the subfile
"RTN","RORUTL05",89,0)
 ; NAME          Name of the record (value of the .01 field)
"RTN","RORUTL05",90,0)
 ; FIELDS        List of field numbers separated by semicolons
"RTN","RORUTL05",91,0)
 ;
"RTN","RORUTL05",92,0)
 ; Return Values:
"RTN","RORUTL05",93,0)
 ;       <0  Error code
"RTN","RORUTL05",94,0)
 ;        0  Ok
"RTN","RORUTL05",95,0)
 ;
"RTN","RORUTL05",96,0)
CLRFLDS(FILE,IENS,NAME,FIELDS) ;
"RTN","RORUTL05",97,0)
 N FLD,I,IEN,IENS1,IS,RC,RORBUF,RORFDA,RORMSG
"RTN","RORUTL05",98,0)
 ;--- Find the record(s)
"RTN","RORUTL05",99,0)
 D FIND^DIC(FILE,$G(IENS),"@","X",NAME,,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL05",100,0)
 S RC=$$DBS^RORERR("RORMSG",-9,,,FILE)  Q:RC<0 RC
"RTN","RORUTL05",101,0)
 S:$G(IENS)="" IENS=","  S FIELDS=$TR(FIELDS," ")
"RTN","RORUTL05",102,0)
 ;--- Update the record(s)
"RTN","RORUTL05",103,0)
 S IS="",RC=0
"RTN","RORUTL05",104,0)
 F  S IS=$O(RORBUF("DILIST",2,IS))  Q:IS=""  D  Q:RC<0
"RTN","RORUTL05",105,0)
 . S IEN=RORBUF("DILIST",2,IS)  Q:IEN'>0
"RTN","RORUTL05",106,0)
 . S IENS1=IEN_IENS
"RTN","RORUTL05",107,0)
 . F I=1:1  S FLD=$P(FIELDS,";",I)  Q:FLD'>0  D
"RTN","RORUTL05",108,0)
 . . S RORFDA(FILE,IENS1,+FLD)="@"
"RTN","RORUTL05",109,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORUTL05",110,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,FILE,IENS1)
"RTN","RORUTL05",111,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUTL05",112,0)
 ;
"RTN","RORUTL05",113,0)
 ;***** RETURNS THE END DATE FOR THE EVENT PURGE
"RTN","RORUTL05",114,0)
EPDATE() ;
"RTN","RORUTL05",115,0)
 N DATE,IR,RC,RORBUF,RORMSG,TMP
"RTN","RORUTL05",116,0)
 D LIST^DIC(798.1,,"@;1I;2I","U",,,,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL05",117,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1)
"RTN","RORUTL05",118,0)
 ;--- Get the oldest date of registry updates
"RTN","RORUTL05",119,0)
 S IR="",DATE=$$DT^XLFDT
"RTN","RORUTL05",120,0)
 F  S IR=$O(RORBUF("DILIST","ID",IR))  Q:IR=""  D
"RTN","RORUTL05",121,0)
 . S TMP=$G(RORBUF("DILIST","ID",IR,1)) ; REGISTRY UPDATED UNTIL
"RTN","RORUTL05",122,0)
 . I TMP>0  S:TMP<DATE DATE=TMP
"RTN","RORUTL05",123,0)
 . ;S TMP=$G(RORBUF("DILIST","ID",IR,2)) ; DATA EXTRACTED UNTIL
"RTN","RORUTL05",124,0)
 . ;I TMP>0  S:TMP<DATE DATE=TMP
"RTN","RORUTL05",125,0)
 ;--- Subtract additional 14 days (just in case)
"RTN","RORUTL05",126,0)
 S DATE=$$FMADD^XLFDT(DATE\1,-14)
"RTN","RORUTL05",127,0)
 ;--- No more than 60 days in the past
"RTN","RORUTL05",128,0)
 S TMP=$$FMADD^XLFDT($$DT^XLFDT,-60)
"RTN","RORUTL05",129,0)
 Q $S(DATE>TMP:DATE,1:TMP)
"RTN","RORUTL05",130,0)
 ;
"RTN","RORUTL05",131,0)
 ;***** RETURNS NAME OF THE HOSPITAL LOCATION
"RTN","RORUTL05",132,0)
 ;
"RTN","RORUTL05",133,0)
 ; HLIEN         IEN of the hospital location
"RTN","RORUTL05",134,0)
 ;
"RTN","RORUTL05",135,0)
HLNAME(HLIEN) ;
"RTN","RORUTL05",136,0)
 N NAME
"RTN","RORUTL05",137,0)
 S NAME=$$GET1^DIQ(44,(+HLIEN)_",",.01,,,"RORMSG")
"RTN","RORUTL05",138,0)
 D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,(+HLIEN)_",")
"RTN","RORUTL05",139,0)
 Q NAME
"RTN","RORUTL05",140,0)
 ;
"RTN","RORUTL05",141,0)
 ;***** FORMATS THE TEXT THAT DESCRIBES STATUS OF THE HL7 MESSAGE
"RTN","RORUTL05",142,0)
 ;
"RTN","RORUTL05",143,0)
 ; MSGID         A valid ID of the HL7 message
"RTN","RORUTL05",144,0)
 ;
"RTN","RORUTL05",145,0)
 ; .RORDST       Reference to a local array that the text
"RTN","RORUTL05",146,0)
 ;               is appended to
"RTN","RORUTL05",147,0)
 ;
"RTN","RORUTL05",148,0)
 ; [TITLE]       Title of the output
"RTN","RORUTL05",149,0)
 ;
"RTN","RORUTL05",150,0)
 ; [DLGNUM]      Number of an entry in the DIALOG file that
"RTN","RORUTL05",151,0)
 ;               contains the text template (by default,
"RTN","RORUTL05",152,0)
 ;               the 7980000.004 is used)
"RTN","RORUTL05",153,0)
 ;
"RTN","RORUTL05",154,0)
 ; [.PARAMS]     Reference to a local variable containing
"RTN","RORUTL05",155,0)
 ;               additional parameters that substitute the
"RTN","RORUTL05",156,0)
 ;               placeholders in the text template
"RTN","RORUTL05",157,0)
 ; PARAMS(
"RTN","RORUTL05",158,0)
 ;  "NOR")       Number of retries to resend the message
"RTN","RORUTL05",159,0)
 ;  "REGISTRY")  Name of the registry
"RTN","RORUTL05",160,0)
 ;
"RTN","RORUTL05",161,0)
 ; [MSGSTAT]     Status of the message (result value of the
"RTN","RORUTL05",162,0)
 ;               $$MSGSTAT^HLUTIL function). If this parameter
"RTN","RORUTL05",163,0)
 ;               is undefined or equal to an empty string, the
"RTN","RORUTL05",164,0)
 ;               current status of the message is retrieved.
"RTN","RORUTL05",165,0)
 ;
"RTN","RORUTL05",166,0)
MSG7STS(MSGID,RORDST,TITLE,DLGNUM,PARAMS,MSGSTAT) ;
"RTN","RORUTL05",167,0)
 N RORMSG,TMP
"RTN","RORUTL05",168,0)
 Q:$G(MSGID)?." "
"RTN","RORUTL05",169,0)
 S:$G(MSGSTAT)="" MSGSTAT=$$MSGSTAT^HLUTIL(MSGID)
"RTN","RORUTL05",170,0)
 ;--- Prepare the parameters
"RTN","RORUTL05",171,0)
 S PARAMS("ID")=MSGID
"RTN","RORUTL05",172,0)
 S PARAMS("STATUS")=$$MSGSTXT^RORHL7A(MSGSTAT)
"RTN","RORUTL05",173,0)
 S TMP=+$P(MSGSTAT,U,2)
"RTN","RORUTL05",174,0)
 S:TMP>0 PARAMS("UPDATED")=$$FMTE^XLFDT(TMP)
"RTN","RORUTL05",175,0)
 S PARAMS("ERRMSG")=$P(MSGSTAT,U,3)
"RTN","RORUTL05",176,0)
 S TMP=+$P(MSGSTAT,U,4)
"RTN","RORUTL05",177,0)
 S:TMP>0 PARAMS("ERRTYPE")=$$GET1^DIQ(771.7,TMP_",",.01,,,"RORMSG")
"RTN","RORUTL05",178,0)
 S PARAMS($S(+MSGSTAT=1:"QPOS",1:"RETRIES"))=$P(MSGSTAT,U,5)
"RTN","RORUTL05",179,0)
 S PARAMS("OPENFAIL")=$P(MSGSTAT,U,6)
"RTN","RORUTL05",180,0)
 S PARAMS("ACK")=$P(MSGSTAT,U,7)
"RTN","RORUTL05",181,0)
 ;--- Additional parameters
"RTN","RORUTL05",182,0)
 I $G(DLGNUM)>0  D
"RTN","RORUTL05",183,0)
 . S PARAMS("STATCODE")=+MSGSTAT
"RTN","RORUTL05",184,0)
 . S TMP=+$P(MSGSTAT,U,2)
"RTN","RORUTL05",185,0)
 . S:TMP>0 PARAMS("STATUPD")=$$FMTHL7^XLFDT(TMP)
"RTN","RORUTL05",186,0)
 . S TMP=$$SITE^RORUTL03()
"RTN","RORUTL05",187,0)
 . S PARAMS("STNAME")=$P(TMP,U,2)
"RTN","RORUTL05",188,0)
 . S PARAMS("STNUM")=$P(TMP,U)
"RTN","RORUTL05",189,0)
 . S:$G(PARAMS("NOR"))'>0 PARAMS("NOR")="several"
"RTN","RORUTL05",190,0)
 . S:$G(PARAMS("REGISTRY"))="" PARAMS("REGISTRY")="<unknown>"
"RTN","RORUTL05",191,0)
 E  S DLGNUM=7980000.004
"RTN","RORUTL05",192,0)
 ;--- Build the text
"RTN","RORUTL05",193,0)
 S:$G(TITLE)'="" RORDST(1)=TITLE,RORDST(2)=" "
"RTN","RORUTL05",194,0)
 D BLD^DIALOG(DLGNUM,.PARAMS,,"RORDST","S")
"RTN","RORUTL05",195,0)
 Q
"RTN","RORUTL05",196,0)
 ;
"RTN","RORUTL05",197,0)
 ;***** CHECK IF THE ARGUMENT IS A NUMBER
"RTN","RORUTL05",198,0)
 ;
"RTN","RORUTL05",199,0)
 ; Return Values:
"RTN","RORUTL05",200,0)
 ;        1  Value starts from a number
"RTN","RORUTL05",201,0)
 ;        0  Otherwise
"RTN","RORUTL05",202,0)
 ;
"RTN","RORUTL05",203,0)
NUMERIC(VAL,NUMVAL) ;
"RTN","RORUTL05",204,0)
 S NUMVAL=$$TRIM^XLFSTR(VAL)
"RTN","RORUTL05",205,0)
 I NUMVAL?.1(1"+",1"-")1(1.N.1".".N,.N.1"."1.N).1(1"E".1(1"+",1"-")1.N)  S NUMVAL=+NUMVAL  Q 1
"RTN","RORUTL05",206,0)
 S NUMVAL=""
"RTN","RORUTL05",207,0)
 Q 0
"RTN","RORUTL05",208,0)
 ;
"RTN","RORUTL05",209,0)
 ;***** MARKS THE REGISTRY RECORDS FOR RESENDING THE LOCAL DATA
"RTN","RORUTL05",210,0)
 ;
"RTN","RORUTL05",211,0)
 ; .REGLST       Reference to a local array containing registry names 
"RTN","RORUTL05",212,0)
 ;               as subscripts and optional registry IENs as values
"RTN","RORUTL05",213,0)
 ;
"RTN","RORUTL05",214,0)
 ; WD            Number of days to wait before marking the records
"RTN","RORUTL05",215,0)
 ;               for resending the local registry data
"RTN","RORUTL05",216,0)
 ;
"RTN","RORUTL05",217,0)
 ; Return Values:
"RTN","RORUTL05",218,0)
 ;       <0  Error code
"RTN","RORUTL05",219,0)
 ;        0  Ok
"RTN","RORUTL05",220,0)
 ;
"RTN","RORUTL05",221,0)
REMARK(REGLST,WD) ;
"RTN","RORUTL05",222,0)
 N DATE,IEN,IENS,REGIEN,REGNAME,ROOT,RORFDA,RORMSG,TMP
"RTN","RORUTL05",223,0)
 S ROOT=$$ROOT^DILFD(798,,1),RC=0
"RTN","RORUTL05",224,0)
 S DATE=$$FMADD^XLFDT($$DT^XLFDT,-WD)
"RTN","RORUTL05",225,0)
 ;--- Process the registries from the list
"RTN","RORUTL05",226,0)
 S REGNAME=""
"RTN","RORUTL05",227,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D
"RTN","RORUTL05",228,0)
 . S REGIEN=+REGLST(REGNAME)
"RTN","RORUTL05",229,0)
 . I REGIEN'>0  S REGIEN=$$REGIEN^RORUTL02(REGNAME)  Q:REGIEN'>0
"RTN","RORUTL05",230,0)
 . S IENS=REGIEN_","
"RTN","RORUTL05",231,0)
 . ;--- Get the registry parameters
"RTN","RORUTL05",232,0)
 . D GETS^DIQ(798.1,IENS,"21.04;21.05","I","RORFDA","RORMSG")
"RTN","RORUTL05",233,0)
 . I $G(DIERR)  S TMP=$$DBS^RORERR("RORMSG",-9,,,798.1,IENS)  Q
"RTN","RORUTL05",234,0)
 . ;--- Local data has been resent already
"RTN","RORUTL05",235,0)
 . Q:$G(RORFDA(798.1,IENS,21.04,"I"))
"RTN","RORUTL05",236,0)
 . ;--- The registry has not been populated yet
"RTN","RORUTL05",237,0)
 . Q:'$G(RORFDA(798.1,IENS,21.05,"I"))
"RTN","RORUTL05",238,0)
 . ;--- It is too early for resending the local data
"RTN","RORUTL05",239,0)
 . Q:RORFDA(798.1,IENS,21.05,"I")>DATE
"RTN","RORUTL05",240,0)
 . K RORFDA,RORMSG
"RTN","RORUTL05",241,0)
 . ;--- Mark registry records as modified
"RTN","RORUTL05",242,0)
 . S IEN=0
"RTN","RORUTL05",243,0)
 . F  S IEN=$O(@ROOT@("AC",REGIEN,IEN))  Q:'IEN  D
"RTN","RORUTL05",244,0)
 . . S IENS=IEN_","
"RTN","RORUTL05",245,0)
 . . S RORFDA(798,IENS,4)=1  ; UPDATE DEMOGRAPHICS
"RTN","RORUTL05",246,0)
 . . S RORFDA(798,IENS,5)=1  ; UPDATE LOCAL REGISTRY DATA
"RTN","RORUTL05",247,0)
 . . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORUTL05",248,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORUTL05",249,0)
 . ;--- Update registry parameters
"RTN","RORUTL05",250,0)
 . S IENS=REGIEN_","
"RTN","RORUTL05",251,0)
 . S RORFDA(798.1,IENS,21.04)=$$NOW^XLFDT
"RTN","RORUTL05",252,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORUTL05",253,0)
 . I $G(DIERR)  S TMP=$$DBS^RORERR("RORMSG",-9,,,798.1,IENS)  Q
"RTN","RORUTL05",254,0)
 . ;--- Record the message
"RTN","RORUTL05",255,0)
 . S TMP="Local registry and demographic data will be resent to AAC"
"RTN","RORUTL05",256,0)
 . D LOG^RORLOG(2,TMP,,"Registry Name: "_REGNAME)
"RTN","RORUTL05",257,0)
 Q 0
"RTN","RORUTL05",258,0)
 ;
"RTN","RORUTL05",259,0)
 ;***** CALLS THE DEM^VADPT
"RTN","RORUTL05",260,0)
 ;
"RTN","RORUTL05",261,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORUTL05",262,0)
 ; VALIDATE      Make sure that required fields are not empty
"RTN","RORUTL05",263,0)
 ; VAPTYP
"RTN","RORUTL05",264,0)
 ; VAHOW
"RTN","RORUTL05",265,0)
 ;
"RTN","RORUTL05",266,0)
VADEM(DFN,VALIDATE,VAPTYP,VAHOW) ;
"RTN","RORUTL05",267,0)
 N I,J,X,A,K,K1,NC,NF,NQ,T,VAROOT
"RTN","RORUTL05",268,0)
 D DEM^VADPT
"RTN","RORUTL05",269,0)
 Q:'$G(VALIDATE)
"RTN","RORUTL05",270,0)
 ;--- Make sure that required fields are not empty
"RTN","RORUTL05",271,0)
 S:$G(VADM(1))="" VADM(1)="Unknown ("_DFN_")"
"RTN","RORUTL05",272,0)
 S:$G(VA("BID"))="" VA("BID")="UNKN"
"RTN","RORUTL05",273,0)
 Q
"RTN","RORX002")
0^49^B20071176^B20408394
"RTN","RORX002",1,0)
RORX002 ;HCIOFO/SG - CURRENT INPATIENT LIST ; 10/20/06 4:09pm
"RTN","RORX002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX002",3,0)
 ;
"RTN","RORX002",4,0)
 ; This routine uses the following IAs:
"RTN","RORX002",5,0)
 ;
"RTN","RORX002",6,0)
 ; #325          ADM^VADPT2 (controlled)
"RTN","RORX002",7,0)
 ; #10061        51^VADPT (supported)
"RTN","RORX002",8,0)
 ;
"RTN","RORX002",9,0)
 Q
"RTN","RORX002",10,0)
 ;
"RTN","RORX002",11,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX002",12,0)
 ;
"RTN","RORX002",13,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX002",14,0)
 ;
"RTN","RORX002",15,0)
 ; Return Values:
"RTN","RORX002",16,0)
 ;       <0  Error code
"RTN","RORX002",17,0)
 ;        0  Ok
"RTN","RORX002",18,0)
 ;
"RTN","RORX002",19,0)
HEADER(PARTAG) ;
"RTN","RORX002",20,0)
 ;;PATIENTS(#,NAME,LAST4,WARD,ROOM-BED)
"RTN","RORX002",21,0)
 ;
"RTN","RORX002",22,0)
 N HEADER,RC
"RTN","RORX002",23,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX002",24,0)
 Q:HEADER<0 HEADER
"RTN","RORX002",25,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX002",HEADER)
"RTN","RORX002",26,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX002",27,0)
 ;
"RTN","RORX002",28,0)
 ;***** COMPILES THE "CURRENT INPATIENT LIST"
"RTN","RORX002",29,0)
 ; REPORT CODE: 002
"RTN","RORX002",30,0)
 ;
"RTN","RORX002",31,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX002",32,0)
 ;
"RTN","RORX002",33,0)
 ; Return Values:
"RTN","RORX002",34,0)
 ;       <0  Error code
"RTN","RORX002",35,0)
 ;        0  Ok
"RTN","RORX002",36,0)
 ;
"RTN","RORX002",37,0)
INPTLST(RORTSK) ;
"RTN","RORX002",38,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX002",39,0)
 N RORREG        ; Registry IEN
"RTN","RORX002",40,0)
 N RORTMP        ; Closed root of the temporary buffer
"RTN","RORX002",41,0)
 ;
"RTN","RORX002",42,0)
 N BODY,ECNT,INPCNT,RC,REPORT,SFLAGS,TMP
"RTN","RORX002",43,0)
 ;--- Root node of the report
"RTN","RORX002",44,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX002",45,0)
 Q:REPORT<0 REPORT
"RTN","RORX002",46,0)
 ;
"RTN","RORX002",47,0)
 ;--- Get and prepare the report parameters
"RTN","RORX002",48,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX002",49,0)
 S RC=$$PARAMS^RORXU002(.RORTSK,REPORT,,,.SFLAGS)  Q:RC<0 RC
"RTN","RORX002",50,0)
 ;
"RTN","RORX002",51,0)
 ;--- Initialize constants and variables
"RTN","RORX002",52,0)
 S ECNT=0
"RTN","RORX002",53,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX002",54,0)
 ;
"RTN","RORX002",55,0)
 ;--- Report header
"RTN","RORX002",56,0)
 S RC=$$HEADER(REPORT)  Q:RC<0 RC
"RTN","RORX002",57,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORX002",58,0)
 D
"RTN","RORX002",59,0)
 . ;--- Query the registry
"RTN","RORX002",60,0)
 . D TPPSETUP^RORTSK01(50)
"RTN","RORX002",61,0)
 . S RC=$$QUERY(.INPCNT,SFLAGS)
"RTN","RORX002",62,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX002",63,0)
 . ;--- Generate the list of patients
"RTN","RORX002",64,0)
 . D TPPSETUP^RORTSK01(50)
"RTN","RORX002",65,0)
 . S RC=$$PTLIST(REPORT,INPCNT)
"RTN","RORX002",66,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX002",67,0)
 ;
"RTN","RORX002",68,0)
 ;--- Cleanup
"RTN","RORX002",69,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORX002",70,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX002",71,0)
 ;
"RTN","RORX002",72,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX002",73,0)
 ;
"RTN","RORX002",74,0)
 ; NODE          Closed root of the patient's node in the buffer
"RTN","RORX002",75,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX002",76,0)
 ;
"RTN","RORX002",77,0)
 ; Return Values:
"RTN","RORX002",78,0)
 ;       <0  Error code
"RTN","RORX002",79,0)
 ;        0  Ok
"RTN","RORX002",80,0)
 ;
"RTN","RORX002",81,0)
PATIENT(NODE,PARTAG) ;
"RTN","RORX002",82,0)
 N IEN,NAME,PATIEN,PTAG,PTBUF,RC,TMP
"RTN","RORX002",83,0)
 S PTBUF=@NODE,PATIEN=$P(PTBUF,U,2)
"RTN","RORX002",84,0)
 Q:PATIEN'>0 0
"RTN","RORX002",85,0)
 ;--- The <PATIENT> tag
"RTN","RORX002",86,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,PATIEN)
"RTN","RORX002",87,0)
 ;--- Patient data
"RTN","RORX002",88,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",$QS(NODE,4),PTAG,1)
"RTN","RORX002",89,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",$QS(NODE,5),PTAG,2)
"RTN","RORX002",90,0)
 S TMP=$$DATE^RORXU002($P(PTBUF,U,4)\1)
"RTN","RORX002",91,0)
 ;D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX002",92,0)
 D ADDVAL^RORTSK11(RORTSK,"WARD",$QS(NODE,3),PTAG,1)
"RTN","RORX002",93,0)
 D ADDVAL^RORTSK11(RORTSK,"ROOM-BED",$P(PTBUF,U,3),PTAG,1)
"RTN","RORX002",94,0)
 Q 0
"RTN","RORX002",95,0)
 ;
"RTN","RORX002",96,0)
 ;***** GENERATES THE LIST OF PATIENTS
"RTN","RORX002",97,0)
 ;
"RTN","RORX002",98,0)
 ; REPORT        IEN of the <REPORT> node
"RTN","RORX002",99,0)
 ; INPCNT        Number of inpatients
"RTN","RORX002",100,0)
 ;
"RTN","RORX002",101,0)
 ; Return Values:
"RTN","RORX002",102,0)
 ;       <0  Error code
"RTN","RORX002",103,0)
 ;        0  Ok
"RTN","RORX002",104,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX002",105,0)
 ;
"RTN","RORX002",106,0)
PTLIST(REPORT,INPCNT) ;
"RTN","RORX002",107,0)
 N BODY,CNT,ECNT,FLT,FLTLEN,NODE,RC,TCNT,TMP
"RTN","RORX002",108,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX002",109,0)
 S BODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX002",110,0)
 Q:BODY<0 BODY
"RTN","RORX002",111,0)
 D ADDATTR^RORTSK11(RORTSK,BODY,"TABLE","PATIENTS")
"RTN","RORX002",112,0)
 D:$D(@RORTMP)>1
"RTN","RORX002",113,0)
 . S NODE=RORTMP
"RTN","RORX002",114,0)
 . S FLTLEN=$L(NODE)-1,FLT=$E(NODE,1,FLTLEN)
"RTN","RORX002",115,0)
 . F  S NODE=$Q(@NODE)  Q:$E(NODE,1,FLTLEN)'=FLT  D  Q:RC<0
"RTN","RORX002",116,0)
 . . S TMP=$S(INPCNT>0:CNT/INPCNT,1:"")
"RTN","RORX002",117,0)
 . . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX002",118,0)
 . . S CNT=CNT+1
"RTN","RORX002",119,0)
 . . I $$PATIENT(NODE,BODY)<0  S ECNT=ECNT+1  Q
"RTN","RORX002",120,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX002",121,0)
 ;
"RTN","RORX002",122,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX002",123,0)
 ;
"RTN","RORX002",124,0)
 ; .INPCNT       Number of inpatients is returned in this parameter
"RTN","RORX002",125,0)
 ; SFLAGS        Flags for $$SKIP^RORXU005
"RTN","RORX002",126,0)
 ;
"RTN","RORX002",127,0)
 ; Return Values:
"RTN","RORX002",128,0)
 ;       <0  Error code
"RTN","RORX002",129,0)
 ;        0  Ok
"RTN","RORX002",130,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX002",131,0)
 ;
"RTN","RORX002",132,0)
QUERY(INPCNT,SFLAGS) ;
"RTN","RORX002",133,0)
 N CNT,DFN,ECNT,IEN,IENS,RC,TCNT,TMP,VA,VADM,VAHOW,VAIP,VAROOT,XREFNODE,WARD
"RTN","RORX002",134,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX002",135,0)
 S (CNT,ECNT,INPCNT,RC)=0
"RTN","RORX002",136,0)
 ;--- Browse through the registry records
"RTN","RORX002",137,0)
 S IEN=0
"RTN","RORX002",138,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX002",139,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX002",140,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX002",141,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX002",142,0)
 . ;--- Skip a patient
"RTN","RORX002",143,0)
 . Q:$$SKIP^RORXU005(IEN,SFLAGS)
"RTN","RORX002",144,0)
 . ;--- Process the registry record
"RTN","RORX002",145,0)
 . S DFN=$$PTIEN^RORUTL01(IEN)  Q:DFN'>0
"RTN","RORX002",146,0)
 . K VA,VADM,VAIP  S VAIP("D")=DT\1  D 51^VADPT
"RTN","RORX002",147,0)
 . S WARD=$P(VAIP(5),U,2)  Q:WARD=""
"RTN","RORX002",148,0)
 . S TMP=$S($G(VA("BID"))'="":VA("BID"),1:"UNKN") ; Last 4 of SSN
"RTN","RORX002",149,0)
 . S @RORTMP@(WARD,VADM(1),TMP)=IEN_U_DFN_U_$P(VAIP(6),U,2)_U_$P(VADM(6),U)
"RTN","RORX002",150,0)
 . S INPCNT=INPCNT+1
"RTN","RORX002",151,0)
 ;---
"RTN","RORX002",152,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX002",153,0)
 ;
"RTN","RORX002",154,0)
 ;***** CHECKS THE SUFFIX FOR VALIDITY
"RTN","RORX002",155,0)
 ;
"RTN","RORX002",156,0)
 ; SUFFIX        Suffix
"RTN","RORX002",157,0)
 ;
"RTN","RORX002",158,0)
 ; Return Values:
"RTN","RORX002",159,0)
 ;        0  Ok
"RTN","RORX002",160,0)
 ;        1  Invalid suffix
"RTN","RORX002",161,0)
VSUFFIX(SUFFIX) ;
"RTN","RORX002",162,0)
 Q '("9AA,9AB,9BB,A0,A4,A5,BU,BV,PA"[SUFFIX)
"RTN","RORX003")
0^53^B21537399^B21537399
"RTN","RORX003",1,0)
RORX003 ;HCIOFO/SG - GENERAL UTILIZATION AND DEMOGRAPHICS ; 11/14/06 8:50am
"RTN","RORX003",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX003",3,0)
 ;
"RTN","RORX003",4,0)
 Q
"RTN","RORX003",5,0)
 ;
"RTN","RORX003",6,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX003",7,0)
 ;
"RTN","RORX003",8,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX003",9,0)
 ;
"RTN","RORX003",10,0)
 ; Return Values:
"RTN","RORX003",11,0)
 ;       <0  Error code
"RTN","RORX003",12,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX003",13,0)
 ;
"RTN","RORX003",14,0)
HEADER(PARTAG) ;
"RTN","RORX003",15,0)
 N COLUMNS,HEADER,NAME,NOTES,TMP
"RTN","RORX003",16,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX003",17,0)
 Q:HEADER<0 HEADER
"RTN","RORX003",18,0)
 S NOTES=$$ADDVAL^RORTSK11(RORTSK,"NOTES",,HEADER)
"RTN","RORX003",19,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE_BASE_DATE",RORAGEDT,NOTES)
"RTN","RORX003",20,0)
 ;---
"RTN","RORX003",21,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX003",22,0)
 Q:COLUMNS<0 COLUMNS
"RTN","RORX003",23,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX003",24,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX003",25,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX003",26,0)
 S RORFL798=".01",RORFLICR=""
"RTN","RORX003",27,0)
 ;--- Required columns
"RTN","RORX003",28,0)
 F NAME="#","NAME"  D
"RTN","RORX003",29,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX003",30,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",NAME)
"RTN","RORX003",31,0)
 ;--- SSN or LAST4
"RTN","RORX003",32,0)
 S NAME=$S($$OPTCOL^RORXU006("SSN"):"SSN",1:"LAST4")
"RTN","RORX003",33,0)
 S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)  Q:TMP<0 TMP
"RTN","RORX003",34,0)
 D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",NAME)
"RTN","RORX003",35,0)
 ;--- Optional columns
"RTN","RORX003",36,0)
 F NAME="DOB","AGE","SEX","RACE","ETHN","RISK","SELDT","CONFDT","UTIL","DOD"  D
"RTN","RORX003",37,0)
 . Q:'$$OPTCOL^RORXU006(NAME)
"RTN","RORX003",38,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX003",39,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",NAME)
"RTN","RORX003",40,0)
 ;---
"RTN","RORX003",41,0)
 S:$$OPTCOL^RORXU006("CONFDT") RORFL798=RORFL798_";2"
"RTN","RORX003",42,0)
 S:$$OPTCOL^RORXU006("SELDT") RORFL798=RORFL798_";3.2"
"RTN","RORX003",43,0)
 Q HEADER
"RTN","RORX003",44,0)
 ;
"RTN","RORX003",45,0)
 ;***** COMPILES THE "GENERAL UTLIZATION AND DEMOGRAPHICS" REPORT
"RTN","RORX003",46,0)
 ; REPORT CODE: 003
"RTN","RORX003",47,0)
 ;
"RTN","RORX003",48,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX003",49,0)
 ;
"RTN","RORX003",50,0)
 ; Return Values:
"RTN","RORX003",51,0)
 ;       <0  Error code
"RTN","RORX003",52,0)
 ;        0  Ok
"RTN","RORX003",53,0)
 ;
"RTN","RORX003",54,0)
UTLDMG(RORTSK) ;
"RTN","RORX003",55,0)
 N RORAGEDT      ; Base date for age calculations
"RTN","RORX003",56,0)
 N RORDTE0       ; Beginning of the Date Entered "sliding window"
"RTN","RORX003",57,0)
 N ROREDT        ; End date
"RTN","RORX003",58,0)
 N RORFL798      ; Fields to load from the file #798
"RTN","RORX003",59,0)
 N RORFLICR      ; Fields to load from the file #799.4
"RTN","RORX003",60,0)
 N RORREG        ; Registry IEN
"RTN","RORX003",61,0)
 N RORRISK       ; Risk factor counters
"RTN","RORX003",62,0)
 N RORSDT        ; Start date
"RTN","RORX003",63,0)
 N RORSUM        ; Summary data
"RTN","RORX003",64,0)
 N RORUTIL       ; Requested utilization types
"RTN","RORX003",65,0)
 N RORUCNT       ; Utilization counters
"RTN","RORX003",66,0)
 ;
"RTN","RORX003",67,0)
 N CNT,ECNT,IEN,IENS,PARAMS,PATIENTS,RC,REPORT,RORPTN,SFLAGS,TMP,XREFNODE
"RTN","RORX003",68,0)
 ;--- Root node of the report
"RTN","RORX003",69,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX003",70,0)
 Q:REPORT<0 REPORT
"RTN","RORX003",71,0)
 ;
"RTN","RORX003",72,0)
 ;=== Get and prepare the report parameters
"RTN","RORX003",73,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX003",74,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS)
"RTN","RORX003",75,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX003",76,0)
 ;--- Default set of columns for the summary-only report
"RTN","RORX003",77,0)
 S XREFNODE=$NA(RORTSK("PARAMS","OPTIONAL_COLUMNS","C"))
"RTN","RORX003",78,0)
 I $$PARAM^RORTSK01("OPTIONS","SUMMARY")  D
"RTN","RORX003",79,0)
 . F TMP="RACE","RISK","AGE","SEX","UTIL"  D
"RTN","RORX003",80,0)
 . . S @XREFNODE@(TMP)=""
"RTN","RORX003",81,0)
 S:$$OPTCOL^RORXU006("RACE") @XREFNODE@("ETHN")=""
"RTN","RORX003",82,0)
 ;--- Construct the description of utilization types
"RTN","RORX003",83,0)
 I '$$PARAM^RORTSK01("UTIL_TYPES","ALL")  D
"RTN","RORX003",84,0)
 . M RORUTIL=RORTSK("PARAMS","UTIL_TYPES","C")
"RTN","RORX003",85,0)
 E  S RORUTIL("ALL")=1
"RTN","RORX003",86,0)
 S TMP=$$OPTXT^RORXU002(.RORUTIL,7980000.019)
"RTN","RORX003",87,0)
 D ADDVAL^RORTSK11(RORTSK,"UTIL_TYPES",TMP,PARAMS)
"RTN","RORX003",88,0)
 ;
"RTN","RORX003",89,0)
 ;=== Initialize constants and variables
"RTN","RORX003",90,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX003",91,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",RORREG)),ECNT=0
"RTN","RORX003",92,0)
 S TMP=$$FMDIFF^XLFDT(ROREDT,RORSDT)
"RTN","RORX003",93,0)
 S RORAGEDT=$$FMADD^XLFDT(RORSDT,TMP\2)
"RTN","RORX003",94,0)
 S RORDTE0=$P($$FMTE^XLFDT(DT,7),"/")-10  ; 10 year "sliding window"
"RTN","RORX003",95,0)
 ;
"RTN","RORX003",96,0)
 D
"RTN","RORX003",97,0)
 . ;=== Report header
"RTN","RORX003",98,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX003",99,0)
 . ;---
"RTN","RORX003",100,0)
 . S PATIENTS=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX003",101,0)
 . I PATIENTS<0  S RC=+PATIENTS  Q
"RTN","RORX003",102,0)
 . D ADDATTR^RORTSK11(RORTSK,PATIENTS,"TABLE","PATIENTS")
"RTN","RORX003",103,0)
 . ;=== Browse through the registry records
"RTN","RORX003",104,0)
 . D TPPSETUP^RORTSK01(95)
"RTN","RORX003",105,0)
 . S (CNT,IEN,RC)=0
"RTN","RORX003",106,0)
 . F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX003",107,0)
 . . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX003",108,0)
 . . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX003",109,0)
 . . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX003",110,0)
 . . ;--- Check if the patient should be skipped
"RTN","RORX003",111,0)
 . . Q:$$SKIP^RORXU005(IEN,SFLAGS,RORSDT,ROREDT)
"RTN","RORX003",112,0)
 . . ;--- Process the registry record
"RTN","RORX003",113,0)
 . . S TMP=$$PATIENT^RORX003A(IENS,PATIENTS)
"RTN","RORX003",114,0)
 . . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX003",115,0)
 . Q:RC<0
"RTN","RORX003",116,0)
 . ;
"RTN","RORX003",117,0)
 . ;=== Report summary
"RTN","RORX003",118,0)
 . D TPPSETUP^RORTSK01(5)
"RTN","RORX003",119,0)
 . S RC=$$SUMMARY^RORX003A(REPORT,PATIENTS)  Q:RC<0
"RTN","RORX003",120,0)
 . ;
"RTN","RORX003",121,0)
 . ;=== Summary only
"RTN","RORX003",122,0)
 . S TMP=$$PARAM^RORTSK01("OPTIONS","COMPLETE")
"RTN","RORX003",123,0)
 . D:'TMP UPDVAL^RORTSK11(RORTSK,PATIENTS,,,1)
"RTN","RORX003",124,0)
 ;
"RTN","RORX003",125,0)
 ;=== Cleanup
"RTN","RORX003",126,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX003A")
0^54^B45547475^B45547475
"RTN","RORX003A",1,0)
RORX003A ;HCIOFO/SG - GENERAL UTILIZATION AND DEMOGRAPHICS ; 11/14/06 8:50am
"RTN","RORX003A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX003A",3,0)
 ;
"RTN","RORX003A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX003A",5,0)
 ;
"RTN","RORX003A",6,0)
 ; #10061        2^VADPT (supported)
"RTN","RORX003A",7,0)
 ;
"RTN","RORX003A",8,0)
 Q
"RTN","RORX003A",9,0)
 ;
"RTN","RORX003A",10,0)
 ;***** INCREMENTS SUMMARY COUNTER
"RTN","RORX003A",11,0)
INCSUM(SUMMARY,VAL) ;
"RTN","RORX003A",12,0)
 S:$G(VAL)="" VAL="NO DATA"
"RTN","RORX003A",13,0)
 S RORSUM(SUMMARY,VAL)=$G(RORSUM(SUMMARY,VAL))+1
"RTN","RORX003A",14,0)
 Q
"RTN","RORX003A",15,0)
 ;
"RTN","RORX003A",16,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX003A",17,0)
 ;
"RTN","RORX003A",18,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX003A",19,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX003A",20,0)
 ;
"RTN","RORX003A",21,0)
 ; Return Values:
"RTN","RORX003A",22,0)
 ;       <0  Error code
"RTN","RORX003A",23,0)
 ;        0  Ok
"RTN","RORX003A",24,0)
 ;       >0  Skip the patient
"RTN","RORX003A",25,0)
 ;
"RTN","RORX003A",26,0)
PATIENT(IENS,PARTAG) ;
"RTN","RORX003A",27,0)
 N DFN,IEN,NAME,RC,RORBUF,RORMSG,TMP,UTIL,VA,VADM,VAERR,VAHOW,VAPTYP,VAROOT
"RTN","RORX003A",28,0)
 S RC=0
"RTN","RORX003A",29,0)
 ;
"RTN","RORX003A",30,0)
 ;--- Get the data from the ROR REGISTRY RECORD file
"RTN","RORX003A",31,0)
 I $G(RORFL798)'=""  D  Q:RC<0 RC
"RTN","RORX003A",32,0)
 . D GETS^DIQ(798,IENS,RORFL798,"I","RORBUF","RORMSG")
"RTN","RORX003A",33,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX003A",34,0)
 S DFN=$G(RORBUF(798,IENS,.01,"I"))
"RTN","RORX003A",35,0)
 ;
"RTN","RORX003A",36,0)
 ;--- Skip a patient without utilization
"RTN","RORX003A",37,0)
 S UTIL=$$UTIL^RORXU003(RORSDT,ROREDT,DFN,.RORUTIL)
"RTN","RORX003A",38,0)
 Q:'UTIL 1
"RTN","RORX003A",39,0)
 ;
"RTN","RORX003A",40,0)
 ;--- Get the data from the ROR HIV STUDY file
"RTN","RORX003A",41,0)
 I $G(RORFLICR)'=""  D  Q:RC<0 RC
"RTN","RORX003A",42,0)
 . D GETS^DIQ(799.4,IENS,RORFLICR,"I","RORBUF","RORMSG")
"RTN","RORX003A",43,0)
 . I $G(DIERR),'$D(RORMSG("DIERR","E",601))  D  Q
"RTN","RORX003A",44,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,799.4,IENS)
"RTN","RORX003A",45,0)
 ;
"RTN","RORX003A",46,0)
 ;--- Load the demographic data
"RTN","RORX003A",47,0)
 D 2^VADPT
"RTN","RORX003A",48,0)
 ;
"RTN","RORX003A",49,0)
 ;--- The <PATIENT> tag
"RTN","RORX003A",50,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,DFN)
"RTN","RORX003A",51,0)
 Q:PTAG<0 PTAG  S RORSUM=$G(RORSUM)+1
"RTN","RORX003A",52,0)
 ;--- Patient Name
"RTN","RORX003A",53,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX003A",54,0)
 ;--- SSN or LAST4
"RTN","RORX003A",55,0)
 I $$OPTCOL^RORXU006("SSN")  D
"RTN","RORX003A",56,0)
 . D ADDVAL^RORTSK11(RORTSK,"SSN",$P(VADM(2),U),PTAG,2)
"RTN","RORX003A",57,0)
 E  D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX003A",58,0)
 ;
"RTN","RORX003A",59,0)
 ;--- Date of Birth
"RTN","RORX003A",60,0)
 D:$$OPTCOL^RORXU006("DOB")
"RTN","RORX003A",61,0)
 . S TMP=$$DATE^RORXU002(VADM(3)\1)
"RTN","RORX003A",62,0)
 . D ADDVAL^RORTSK11(RORTSK,"DOB",TMP,PTAG,1)
"RTN","RORX003A",63,0)
 . S TMP=$P($$FMTE^XLFDT(TMP,7),"/")
"RTN","RORX003A",64,0)
 . D INCSUM("DOB",$S(TMP'<RORDTE0:TMP,TMP>0:0,1:""))
"RTN","RORX003A",65,0)
 ;
"RTN","RORX003A",66,0)
 ;--- Age
"RTN","RORX003A",67,0)
 D:$$OPTCOL^RORXU006("AGE")
"RTN","RORX003A",68,0)
 . S TMP=+$G(VADM(6))  ; Date of Death
"RTN","RORX003A",69,0)
 . S TMP=$S(TMP'>0:RORAGEDT,TMP<RORAGEDT:TMP,1:RORAGEDT)
"RTN","RORX003A",70,0)
 . S TMP=$$FMDIFF^XLFDT(TMP,+VADM(3))\365
"RTN","RORX003A",71,0)
 . D ADDVAL^RORTSK11(RORTSK,"AGE",$S(TMP>0:TMP,1:""),PTAG,1)
"RTN","RORX003A",72,0)
 . Q:TMP'>0
"RTN","RORX003A",73,0)
 . S RORSUM("AGE")=$G(RORSUM("AGE"))+1
"RTN","RORX003A",74,0)
 . S RORSUM("AGE","Average")=$G(RORSUM("AGE","Average"))+TMP
"RTN","RORX003A",75,0)
 . D INCSUM("AGE",TMP-(TMP#10))
"RTN","RORX003A",76,0)
 ;
"RTN","RORX003A",77,0)
 ;--- Sex
"RTN","RORX003A",78,0)
 D:$$OPTCOL^RORXU006("SEX")
"RTN","RORX003A",79,0)
 . S TMP=$P(VADM(5),U,2)
"RTN","RORX003A",80,0)
 . D ADDVAL^RORTSK11(RORTSK,"SEX",TMP,PTAG,1)
"RTN","RORX003A",81,0)
 . D INCSUM("SEX",TMP)
"RTN","RORX003A",82,0)
 ;
"RTN","RORX003A",83,0)
 ;--- Race
"RTN","RORX003A",84,0)
 D:$$OPTCOL^RORXU006("RACE")
"RTN","RORX003A",85,0)
 . N I,SUMVAL,TABLE
"RTN","RORX003A",86,0)
 . S TABLE=$$ADDVAL^RORTSK11(RORTSK,"RACES",,PTAG)
"RTN","RORX003A",87,0)
 . I $G(VADM(12))>0  S I=""  D
"RTN","RORX003A",88,0)
 . . F  S I=$O(VADM(12,I))  Q:I=""  D
"RTN","RORX003A",89,0)
 . . . S SUMVAL=$P(VADM(12,I),U,2)
"RTN","RORX003A",90,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"RACE",SUMVAL,TABLE)
"RTN","RORX003A",91,0)
 . . S:VADM(12)>1 SUMVAL="MULTIPLE VALUES"
"RTN","RORX003A",92,0)
 . E  D ADDVAL^RORTSK11(RORTSK,"RACE",,TABLE)
"RTN","RORX003A",93,0)
 . D INCSUM("RACE",$G(SUMVAL))
"RTN","RORX003A",94,0)
 ;
"RTN","RORX003A",95,0)
 ;--- Ethnicity
"RTN","RORX003A",96,0)
 D:$$OPTCOL^RORXU006("RACE")
"RTN","RORX003A",97,0)
 . N I,SUMVAL,TABLE
"RTN","RORX003A",98,0)
 . S TABLE=$$ADDVAL^RORTSK11(RORTSK,"ETHNS",,PTAG)
"RTN","RORX003A",99,0)
 . I $G(VADM(11))>0  S I=""  D
"RTN","RORX003A",100,0)
 . . F  S I=$O(VADM(11,I))  Q:I=""  D
"RTN","RORX003A",101,0)
 . . . S SUMVAL=$P(VADM(11,I),U,2)
"RTN","RORX003A",102,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"ETHN",SUMVAL,TABLE)
"RTN","RORX003A",103,0)
 . . S:VADM(11)>1 SUMVAL="MULTIPLE VALUES"
"RTN","RORX003A",104,0)
 . E  D ADDVAL^RORTSK11(RORTSK,"ETHN",,TABLE)
"RTN","RORX003A",105,0)
 . D INCSUM("ETHN",$G(SUMVAL))
"RTN","RORX003A",106,0)
 ;
"RTN","RORX003A",107,0)
 ;--- Risk factors
"RTN","RORX003A",108,0)
 D:$$OPTCOL^RORXU006("RISK")
"RTN","RORX003A",109,0)
 . N I,RISKS
"RTN","RORX003A",110,0)
 . S RISKS=$$RISKS^RORXU005(+IENS)  S:RISKS<0 RISKS=""
"RTN","RORX003A",111,0)
 . D ADDVAL^RORTSK11(RORTSK,"RISK",RISKS,PTAG)
"RTN","RORX003A",112,0)
 . S RISKS=$TR(RISKS," ")
"RTN","RORX003A",113,0)
 . F I=1:1  S TMP=$P(RISKS,",",I)  Q:TMP'>0  D
"RTN","RORX003A",114,0)
 . . S RORRISK(TMP)=$G(RORRISK(TMP))+1
"RTN","RORX003A",115,0)
 ;
"RTN","RORX003A",116,0)
 ;--- Date Selected
"RTN","RORX003A",117,0)
 D:$$OPTCOL^RORXU006("SELDT")
"RTN","RORX003A",118,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,3.2,"I"))\1)
"RTN","RORX003A",119,0)
 . D ADDVAL^RORTSK11(RORTSK,"SELDT",TMP,PTAG,1)
"RTN","RORX003A",120,0)
 . S TMP=$P($$FMTE^XLFDT(TMP,7),"/")
"RTN","RORX003A",121,0)
 . D INCSUM("SELDT",$S(TMP'<RORDTE0:TMP,TMP>0:0,1:""))
"RTN","RORX003A",122,0)
 ;
"RTN","RORX003A",123,0)
 ;--- Date Confirmed
"RTN","RORX003A",124,0)
 D:$$OPTCOL^RORXU006("CONFDT")
"RTN","RORX003A",125,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,2,"I"))\1)
"RTN","RORX003A",126,0)
 . D ADDVAL^RORTSK11(RORTSK,"CONFDT",TMP,PTAG,1)
"RTN","RORX003A",127,0)
 . S TMP=$P($$FMTE^XLFDT(TMP,7),"/")
"RTN","RORX003A",128,0)
 . D INCSUM("CONFDT",$S(TMP'<RORDTE0:TMP,TMP>0:0,1:""))
"RTN","RORX003A",129,0)
 ;
"RTN","RORX003A",130,0)
 ;--- Utilization
"RTN","RORX003A",131,0)
 D:$$OPTCOL^RORXU006("UTIL")
"RTN","RORX003A",132,0)
 . S TMP=$$UTLCODES($P(UTIL,U,2,999))
"RTN","RORX003A",133,0)
 . D ADDVAL^RORTSK11(RORTSK,"UTIL",TMP,PTAG)
"RTN","RORX003A",134,0)
 ;
"RTN","RORX003A",135,0)
 ;--- Date of Death
"RTN","RORX003A",136,0)
 D:$$OPTCOL^RORXU006("DOD")
"RTN","RORX003A",137,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX003A",138,0)
 . D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX003A",139,0)
 . S TMP=$P($$FMTE^XLFDT(TMP,7),"/")
"RTN","RORX003A",140,0)
 . D INCSUM("DOD",$S(TMP'<RORDTE0:TMP,TMP>0:0,1:""))
"RTN","RORX003A",141,0)
 Q 0
"RTN","RORX003A",142,0)
 ;
"RTN","RORX003A",143,0)
 ;***** GENERATES THE REPORT SUMMARY
"RTN","RORX003A",144,0)
 ;
"RTN","RORX003A",145,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX003A",146,0)
 ;
"RTN","RORX003A",147,0)
 ; PATIENTS      Reference (IEN) to the PATIENTS tag
"RTN","RORX003A",148,0)
 ;
"RTN","RORX003A",149,0)
 ; Return Values:
"RTN","RORX003A",150,0)
 ;       <0  Error code
"RTN","RORX003A",151,0)
 ;        0  Ok
"RTN","RORX003A",152,0)
 ;
"RTN","RORX003A",153,0)
SUMMARY(PARTAG,PATIENTS) ;
"RTN","RORX003A",154,0)
 N AGE,I,RC,RORBUF,SI,SUMMARY,TABLE,TAG,TMP
"RTN","RORX003A",155,0)
 S SUMMARY=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,PARTAG)
"RTN","RORX003A",156,0)
 Q:SUMMARY<0 SUMMARY
"RTN","RORX003A",157,0)
 ;
"RTN","RORX003A",158,0)
 ;--- Risk factors
"RTN","RORX003A",159,0)
 D:$D(RORRISK)>1
"RTN","RORX003A",160,0)
 . K RORBUF  D BLD^DIALOG(7980000.016,.RORRISK,,"RORBUF")
"RTN","RORX003A",161,0)
 . D ADDTEXT^RORTSK11(RORTSK,"RISK_FACTORS",.RORBUF,SUMMARY)
"RTN","RORX003A",162,0)
 ;
"RTN","RORX003A",163,0)
 ;--- Simple summaries
"RTN","RORX003A",164,0)
 F SI="RACE","ETHN","SEX"  D:$D(RORSUM(SI))>1
"RTN","RORX003A",165,0)
 . S TABLE=$$ADDVAL^RORTSK11(RORTSK,SI_"_SUMMARY",,SUMMARY)
"RTN","RORX003A",166,0)
 . S I=""
"RTN","RORX003A",167,0)
 . F  S I=$O(RORSUM(SI,I))  Q:I=""  D
"RTN","RORX003A",168,0)
 . . S TAG=$$ADDVAL^RORTSK11(RORTSK,SI,I,TABLE)
"RTN","RORX003A",169,0)
 . . D ADDATTR^RORTSK11(RORTSK,TAG,"COUNT",RORSUM(SI,I))
"RTN","RORX003A",170,0)
 ;
"RTN","RORX003A",171,0)
 ;--- Date summaries
"RTN","RORX003A",172,0)
 F SI="DOB","DOD","CONFDT","SELDT"  D:$D(RORSUM(SI))>1
"RTN","RORX003A",173,0)
 . S TABLE=$$ADDVAL^RORTSK11(RORTSK,SI_"_SUMMARY",,SUMMARY)
"RTN","RORX003A",174,0)
 . D:$G(RORSUM(SI,0))>0
"RTN","RORX003A",175,0)
 . . S TAG=$$ADDVAL^RORTSK11(RORTSK,SI,"Before "_RORDTE0,TABLE)
"RTN","RORX003A",176,0)
 . . D ADDATTR^RORTSK11(RORTSK,TAG,"COUNT",RORSUM(SI,0))
"RTN","RORX003A",177,0)
 . S I=0
"RTN","RORX003A",178,0)
 . F  S I=$O(RORSUM(SI,I))  Q:I=""  D
"RTN","RORX003A",179,0)
 . . S TAG=$$ADDVAL^RORTSK11(RORTSK,SI,I,TABLE)
"RTN","RORX003A",180,0)
 . . D ADDATTR^RORTSK11(RORTSK,TAG,"COUNT",RORSUM(SI,I))
"RTN","RORX003A",181,0)
 ;
"RTN","RORX003A",182,0)
 ;--- Age summary
"RTN","RORX003A",183,0)
 I $G(RORSUM("AGE"))>0  D
"RTN","RORX003A",184,0)
 . ;--- Average age
"RTN","RORX003A",185,0)
 . S TMP=$G(RORSUM("AGE","Average"))/RORSUM("AGE")
"RTN","RORX003A",186,0)
 . S RORSUM("AGE","Average")=$J(TMP,0,2)
"RTN","RORX003A",187,0)
 . ;--- Median age
"RTN","RORX003A",188,0)
 . S TMP=$$XREFNODE^RORTSK10(RORTSK,PATIENTS,"AGE")
"RTN","RORX003A",189,0)
 . S:TMP'="" TMP=$$XREFMDNV^RORXU004(TMP,RORSUM("AGE"))
"RTN","RORX003A",190,0)
 . S RORSUM("AGE","Median")=$S(TMP'="":$J(TMP,0,2),1:"")
"RTN","RORX003A",191,0)
 . ;--- Output the table
"RTN","RORX003A",192,0)
 . S TABLE=$$ADDVAL^RORTSK11(RORTSK,"AGE_SUMMARY",,SUMMARY)
"RTN","RORX003A",193,0)
 . S I=""
"RTN","RORX003A",194,0)
 . F  S I=$O(RORSUM("AGE",I))  Q:I=""  D
"RTN","RORX003A",195,0)
 . . S TAG=$$ADDVAL^RORTSK11(RORTSK,"AGE",$S(+I=I:I_"+",1:I),TABLE)
"RTN","RORX003A",196,0)
 . . D ADDATTR^RORTSK11(RORTSK,TAG,"COUNT",RORSUM("AGE",I))
"RTN","RORX003A",197,0)
 ;
"RTN","RORX003A",198,0)
 ;--- Utilization codes
"RTN","RORX003A",199,0)
 D:$D(RORUCNT)>1
"RTN","RORX003A",200,0)
 . K RORBUF  D BLD^DIALOG(7980000.017,.RORUCNT,,"RORBUF")
"RTN","RORX003A",201,0)
 . D ADDTEXT^RORTSK11(RORTSK,"UTIL_CODES",.RORBUF,SUMMARY)
"RTN","RORX003A",202,0)
 ;---
"RTN","RORX003A",203,0)
 Q 0
"RTN","RORX003A",204,0)
 ;
"RTN","RORX003A",205,0)
 ;***** PROCESSES UTILIZATION CODES
"RTN","RORX003A",206,0)
UTLCODES(UCSRC) ;
"RTN","RORX003A",207,0)
 N I,UCLST  S UCLST=""
"RTN","RORX003A",208,0)
 F I=1:1  S UC=$P(UCSRC,U,I)  Q:UC=""  D
"RTN","RORX003A",209,0)
 . S UCLST=UCLST_", "_UC,RORUCNT(UC)=$G(RORUCNT(UC))+1
"RTN","RORX003A",210,0)
 Q $P(UCLST,", ",2,999)
"RTN","RORX005A")
0^5^B28503229^B28503229
"RTN","RORX005A",1,0)
RORX005A ;HCIOFO/BH,SG - INPATIENT UTILIZATION (QUERY) ; 3/13/06 9:25am
"RTN","RORX005A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX005A",3,0)
 ;
"RTN","RORX005A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX005A",5,0)
 ;
"RTN","RORX005A",6,0)
 ; #92           Read access to the file #45 (controlled)
"RTN","RORX005A",7,0)
 ; #557          Read access to the file #40.7 (controlled)
"RTN","RORX005A",8,0)
 ; #2438         .01 field and "C" x-ref of file #40.8 (controlled)
"RTN","RORX005A",9,0)
 ; #10035        Read access to the file #2 (supported)
"RTN","RORX005A",10,0)
 ;
"RTN","RORX005A",11,0)
 Q
"RTN","RORX005A",12,0)
 ;
"RTN","RORX005A",13,0)
 ;***** ADDS THE INPATIENT STAY
"RTN","RORX005A",14,0)
 ;
"RTN","RORX005A",15,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",16,0)
 ; PTFIEN        IEN of the PTF record
"RTN","RORX005A",17,0)
 ; LOS           Length of stay
"RTN","RORX005A",18,0)
 ; BSID          Bed section ID
"RTN","RORX005A",19,0)
 ; DATE          Movement date/time (FileMan)
"RTN","RORX005A",20,0)
 ;
"RTN","RORX005A",21,0)
ADDSTAY(DFN,PTFIEN,LOS,BSID,DATE) ;
"RTN","RORX005A",22,0)
 N DST,I,TMP
"RTN","RORX005A",23,0)
 S:$G(BSID)="" BSID=0
"RTN","RORX005A",24,0)
 ;--- Number of patients for the bedsection
"RTN","RORX005A",25,0)
 I 'BSID  S DST=$NA(@RORDST@("IP",DFN))
"RTN","RORX005A",26,0)
 E  S DST=$NA(@RORDST@("IPB",BSID))  D:'$D(@DST@("P",DFN))
"RTN","RORX005A",27,0)
 . S @DST@("P")=$G(@DST@("P"))+1,@DST@("P",DFN)=""
"RTN","RORX005A",28,0)
 ;--- No bed section ID
"RTN","RORX005A",29,0)
 S:BSID<0 @RORDST@("IPNOBS",RORPNAME,DATE,PTFIEN,DFN)=""
"RTN","RORX005A",30,0)
 ;--- Short stays (visits)
"RTN","RORX005A",31,0)
 I LOS'>0  S @DST@("V")=$G(@DST@("V"))+1  Q
"RTN","RORX005A",32,0)
 ;--- Days and stays
"RTN","RORX005A",33,0)
 S @DST@("D")=$G(@DST@("D"))+LOS
"RTN","RORX005A",34,0)
 S @DST@("S")=$G(@DST@("S"))+1
"RTN","RORX005A",35,0)
 ;--- Lengths of stay for median value calculations
"RTN","RORX005A",36,0)
 S I=$O(@RORDST@("IPMLOS",BSID,LOS,""),-1)+1
"RTN","RORX005A",37,0)
 S @RORDST@("IPMLOS",BSID,LOS,I)=""
"RTN","RORX005A",38,0)
 Q
"RTN","RORX005A",39,0)
 ;
"RTN","RORX005A",40,0)
 ;***** LOADS AND PROCESSES THE INPATIENT DATA
"RTN","RORX005A",41,0)
 ;
"RTN","RORX005A",42,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",43,0)
 ;
"RTN","RORX005A",44,0)
 ; Return Values:
"RTN","RORX005A",45,0)
 ;       <0  Error code
"RTN","RORX005A",46,0)
 ;        0  Ok
"RTN","RORX005A",47,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",48,0)
 ;
"RTN","RORX005A",49,0)
IPDATA(DFN) ;
"RTN","RORX005A",50,0)
 N RORDST        ; Closed reference to the category node in ^TMP
"RTN","RORX005A",51,0)
 ;
"RTN","RORX005A",52,0)
 N BSID,DATE,DISDT,ENDT,FACILITY,LOS,PTFIEN,RC,RORMSG,STDT,SUFFIX,TMP,VAHOW,VAIP,VAROOT,XDATE
"RTN","RORX005A",53,0)
 S RORDST=$NA(^TMP("RORX005",$J))
"RTN","RORX005A",54,0)
 ;---
"RTN","RORX005A",55,0)
 S XDATE=RORSDT
"RTN","RORX005A",56,0)
 F  S RC=0  D  Q:RC<2  S XDATE=$O(^DGPT("AAD",DFN,XDATE))  Q:XDATE'>0
"RTN","RORX005A",57,0)
 . I XDATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",58,0)
 . K DATE,LOS,VAIP  S VAIP(16,1)=XDATE
"RTN","RORX005A",59,0)
 . F  D  Q:RC
"RTN","RORX005A",60,0)
 . . S VAIP("D")=+$G(VAIP(16,1))
"RTN","RORX005A",61,0)
 . . I VAIP("D")'>0  S RC=2  Q
"RTN","RORX005A",62,0)
 . . D IN5^VADPT
"RTN","RORX005A",63,0)
 . . I $G(VAIP(1))'>0  S RC=2  Q
"RTN","RORX005A",64,0)
 . . S DATE=+VAIP(3)
"RTN","RORX005A",65,0)
 . . Q:+$G(VAIP(4))=3
"RTN","RORX005A",66,0)
 . . ;--- Check the movement date
"RTN","RORX005A",67,0)
 . . I DATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",68,0)
 . . S:DATE<RORSDT DATE=RORSDT
"RTN","RORX005A",69,0)
 . . ;--- Check the PTF record
"RTN","RORX005A",70,0)
 . . S PTFIEN=+$G(VAIP(12))  Q:PTFIEN'>0
"RTN","RORX005A",71,0)
 . . I '$D(PTFIEN(PTFIEN))  D  Q:RC
"RTN","RORX005A",72,0)
 . . . S PTFIEN(PTFIEN)=0
"RTN","RORX005A",73,0)
 . . . Q:$$PTF^RORXU001(PTFIEN,"FP",,,.SUFFIX,,.FACILITY)
"RTN","RORX005A",74,0)
 . . . ;--- Check the suffix
"RTN","RORX005A",75,0)
 . . . ;I SUFFIX'=""  Q:$$VSUFFIX(SUFFIX)  ; ROR 1.5
"RTN","RORX005A",76,0)
 . . . ;--- Check the division
"RTN","RORX005A",77,0)
 . . . S TMP=$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORX005A",78,0)
 . . . I 'TMP  D  Q:'$D(RORTSK("PARAMS","DIVISIONS","C",DIVIEN))
"RTN","RORX005A",79,0)
 . . . . S TMP=FACILITY_SUFFIX
"RTN","RORX005A",80,0)
 . . . . S DIVIEN=$S(TMP'="":+$O(^DG(40.8,"C",TMP,"")),1:0)
"RTN","RORX005A",81,0)
 . . . S PTFIEN(PTFIEN)=1
"RTN","RORX005A",82,0)
 . . ;--- Skip the PTF record if necessary
"RTN","RORX005A",83,0)
 . . Q:'PTFIEN(PTFIEN)
"RTN","RORX005A",84,0)
 . . ;--- Process the admission (only once)
"RTN","RORX005A",85,0)
 . . I '$D(LOS)  D  Q:RC
"RTN","RORX005A",86,0)
 . . . S LOS=$$LOS(+$G(VAIP(13,1)),+$G(VAIP(17,1)))
"RTN","RORX005A",87,0)
 . . . D ADDSTAY(DFN,PTFIEN,LOS)
"RTN","RORX005A",88,0)
 . . ;--- Process the movement
"RTN","RORX005A",89,0)
 . . S ENDT=$G(VAIP(16,1))\1
"RTN","RORX005A",90,0)
 . . S:(ENDT'>0)!(ENDT'<ROREDT1) ENDT=ROREDT,RC=2
"RTN","RORX005A",91,0)
 . . Q:ENDT<RORSDT
"RTN","RORX005A",92,0)
 . . S LOS=$$FMDIFF^XLFDT(ENDT,DATE\1,1)  S:LOS'>0 LOS=0
"RTN","RORX005A",93,0)
 . . ;--- Use the IEN in the SPECIALTY file (#42.4) as the Bedsection 
"RTN","RORX005A",94,0)
 . . ;    ID if it is available (it should be). Otherwise, use the
"RTN","RORX005A",95,0)
 . . ;--- IEN in the FACILITY TREATING SPECIALTY file (#45.7).
"RTN","RORX005A",96,0)
 . . I $G(VAIP(8))>0  D
"RTN","RORX005A",97,0)
 . . . S TMP=$$GET1^DIQ(45.7,+VAIP(8),1,"I",,"RORMSG")
"RTN","RORX005A",98,0)
 . . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,DFN,45.7,+VAIP(8))
"RTN","RORX005A",99,0)
 . . . S BSID=$S(TMP>0:TMP_";42.4",1:+VAIP(8)_";45.7")
"RTN","RORX005A",100,0)
 . . E  S BSID=-1
"RTN","RORX005A",101,0)
 . . D ADDSTAY(DFN,PTFIEN,LOS,BSID,+VAIP(3))
"RTN","RORX005A",102,0)
 . S:$G(DATE)>XDATE XDATE=DATE
"RTN","RORX005A",103,0)
 ;---
"RTN","RORX005A",104,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX005A",105,0)
 ;
"RTN","RORX005A",106,0)
 ;***** CALCULATES THE LENGTH OF STAY
"RTN","RORX005A",107,0)
LOS(STDT,ENDT) ;
"RTN","RORX005A",108,0)
 N DAYS
"RTN","RORX005A",109,0)
 S:STDT<RORSDT STDT=RORSDT
"RTN","RORX005A",110,0)
 S:(ENDT'>0)!(ENDT>ROREDT) ENDT=ROREDT
"RTN","RORX005A",111,0)
 S DAYS=$$FMDIFF^XLFDT(ENDT\1,STDT\1,1)
"RTN","RORX005A",112,0)
 Q $S(DAYS'<0:DAYS,1:0)
"RTN","RORX005A",113,0)
 ;
"RTN","RORX005A",114,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX005A",115,0)
 ;
"RTN","RORX005A",116,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX005A",117,0)
 ;
"RTN","RORX005A",118,0)
 ; Return Values:
"RTN","RORX005A",119,0)
 ;       <0  Error code
"RTN","RORX005A",120,0)
 ;        0  Ok
"RTN","RORX005A",121,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",122,0)
 ;
"RTN","RORX005A",123,0)
QUERY(FLAGS) ;
"RTN","RORX005A",124,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX005A",125,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX005A",126,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX005A",127,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX005A",128,0)
 ;
"RTN","RORX005A",129,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX005A",130,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX005A",131,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX005A",132,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT,1)
"RTN","RORX005A",133,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX005A",134,0)
 ;--- Browse through the registry records
"RTN","RORX005A",135,0)
 S IEN=0
"RTN","RORX005A",136,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX005A",137,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX005A",138,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX005A",139,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX005A",140,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX005A",141,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX005A",142,0)
 . ;
"RTN","RORX005A",143,0)
 . ;--- Get the patient IEN (DFN)
"RTN","RORX005A",144,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX005A",145,0)
 . ;
"RTN","RORX005A",146,0)
 . ;--- Get the patient's data
"RTN","RORX005A",147,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX005A",148,0)
 . S RORPNAME=VADM(1),RORLAST4=VA("BID")
"RTN","RORX005A",149,0)
 . ;
"RTN","RORX005A",150,0)
 . ;--- Get the inpatient data
"RTN","RORX005A",151,0)
 . S RC=$$IPDATA(PATIEN)
"RTN","RORX005A",152,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",153,0)
 . ;
"RTN","RORX005A",154,0)
 . ;--- Calculate intermediate totals
"RTN","RORX005A",155,0)
 . S RC=$$TOTALS^RORX005B(PATIEN)
"RTN","RORX005A",156,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",157,0)
 ;---
"RTN","RORX005A",158,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX005A",159,0)
 ;
"RTN","RORX005A",160,0)
 ;***** CHECKS THE SUFFIX FOR VALIDITY
"RTN","RORX005A",161,0)
 ;
"RTN","RORX005A",162,0)
 ; SUFFIX        Suffix
"RTN","RORX005A",163,0)
 ;
"RTN","RORX005A",164,0)
 ; Return Values:
"RTN","RORX005A",165,0)
 ;        0  Ok
"RTN","RORX005A",166,0)
 ;        1  Invalid suffix
"RTN","RORX005A",167,0)
VSUFFIX(SUFFIX) ;
"RTN","RORX005A",168,0)
 Q '("9AA,9AB,9AC,9AD,9AE,9BB,A0,A4,A5,BU,BV,PA"[SUFFIX)
"RTN","RORX007A")
0^55^B11759892^B11759892
"RTN","RORX007A",1,0)
RORX007A ;HCIOFO/BH,SG - RADIOLOGY UTILIZATION (OVERFLOW) ; 11/14/06 8:51am
"RTN","RORX007A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX007A",3,0)
 ;
"RTN","RORX007A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX007A",5,0)
 ;
"RTN","RORX007A",6,0)
 ; #2043         EN1^RAO7PC1 (supported)
"RTN","RORX007A",7,0)
 ;
"RTN","RORX007A",8,0)
 Q
"RTN","RORX007A",9,0)
 ;
"RTN","RORX007A",10,0)
 ;***** APPENDS MODIFIERS TO THE CPT CODE
"RTN","RORX007A",11,0)
 ;
"RTN","RORX007A",12,0)
 ; CPT           CPT code
"RTN","RORX007A",13,0)
 ;
"RTN","RORX007A",14,0)
 ; NODE          Closed root of the exam data node returned
"RTN","RORX007A",15,0)
 ;               by the EN1^RAO7PC1
"RTN","RORX007A",16,0)
 ;
"RTN","RORX007A",17,0)
CPTMOD(CPT,NODE) ;
"RTN","RORX007A",18,0)
 N CPM,RORIM
"RTN","RORX007A",19,0)
 S RORIM=""
"RTN","RORX007A",20,0)
 F  S RORIM=$O(@NODE@("CMOD",RORIM))  Q:RORIM=""  D
"RTN","RORX007A",21,0)
 . S CPM=$P($G(@NODE@("CMOD",RORIM)),U)
"RTN","RORX007A",22,0)
 . S:CPM'="" CPT=CPT_"-"_CPM
"RTN","RORX007A",23,0)
 Q CPT
"RTN","RORX007A",24,0)
 ;
"RTN","RORX007A",25,0)
 ;***** LOADS AND PROCESSES THE RADILOGY DATA
"RTN","RORX007A",26,0)
 ;
"RTN","RORX007A",27,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX007A",28,0)
 ;
"RTN","RORX007A",29,0)
 ; Return Values:
"RTN","RORX007A",30,0)
 ;       <0  Error code
"RTN","RORX007A",31,0)
 ;        0  Ok
"RTN","RORX007A",32,0)
 ;
"RTN","RORX007A",33,0)
GETDATA(DFN) ;
"RTN","RORX007A",34,0)
 N CPT,EXAMID,NODE,PRNAME,RORBUF
"RTN","RORX007A",35,0)
 ;--- Get the data
"RTN","RORX007A",36,0)
 D EN1^RAO7PC1(DFN,RORSDT,ROREDT,999999)
"RTN","RORX007A",37,0)
 Q:'$D(^TMP($J,"RAE1",PATIEN)) 0
"RTN","RORX007A",38,0)
 ;
"RTN","RORX007A",39,0)
 ;--- Process the data
"RTN","RORX007A",40,0)
 S EXAMID=""
"RTN","RORX007A",41,0)
 F  S EXAMID=$O(^TMP($J,"RAE1",DFN,EXAMID))  Q:EXAMID=""  D
"RTN","RORX007A",42,0)
 . S NODE=$NA(^TMP($J,"RAE1",DFN,EXAMID))
"RTN","RORX007A",43,0)
 . S RORBUF=$G(@NODE),CPT=$$CPTMOD($P(RORBUF,U,10),NODE)
"RTN","RORX007A",44,0)
 . ;--- Get Procedure Name
"RTN","RORX007A",45,0)
 . S PRNAME=$E($P(RORBUF,U),1,30)  Q:PRNAME=""
"RTN","RORX007A",46,0)
 . S PRNAME=PRNAME_U_$S(CPT'="":CPT,1:" ")
"RTN","RORX007A",47,0)
 . ;--- Increment the counters
"RTN","RORX007A",48,0)
 . S ^(DFN)=$G(^TMP("RORX007",$J,"PROC",PRNAME,DFN))+1
"RTN","RORX007A",49,0)
 . S ^(PRNAME)=$G(^TMP("RORX007",$J,"PAT",DFN,PRNAME))+1
"RTN","RORX007A",50,0)
 ;
"RTN","RORX007A",51,0)
 ;--- Cleanup
"RTN","RORX007A",52,0)
 K ^TMP($J,"RAE1")
"RTN","RORX007A",53,0)
 Q 0
"RTN","RORX007A",54,0)
 ;
"RTN","RORX007A",55,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX007A",56,0)
 ;
"RTN","RORX007A",57,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX007A",58,0)
 ;
"RTN","RORX007A",59,0)
 ; Return Values:
"RTN","RORX007A",60,0)
 ;       <0  Error code
"RTN","RORX007A",61,0)
 ;        0  Ok
"RTN","RORX007A",62,0)
 ;
"RTN","RORX007A",63,0)
HEADER(PARTAG) ;
"RTN","RORX007A",64,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,TOTAL,UNIQUE)
"RTN","RORX007A",65,0)
 ;;PROCEDURES(#,NAME,CPT,PATIENTS,TOTAL)
"RTN","RORX007A",66,0)
 ;
"RTN","RORX007A",67,0)
 N HEADER,RC
"RTN","RORX007A",68,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX007A",69,0)
 Q:HEADER<0 HEADER
"RTN","RORX007A",70,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX007A",HEADER)
"RTN","RORX007A",71,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX007A",72,0)
 ;
"RTN","RORX007A",73,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX007A",74,0)
 ;
"RTN","RORX007A",75,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX007A",76,0)
 ;
"RTN","RORX007A",77,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX007A",78,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX007A",79,0)
 ;
"RTN","RORX007A",80,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX007A",81,0)
 ;               returned via this parameter
"RTN","RORX007A",82,0)
 ;
"RTN","RORX007A",83,0)
 ; Return Values:
"RTN","RORX007A",84,0)
 ;       <0  Error code
"RTN","RORX007A",85,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX007A",86,0)
 ;
"RTN","RORX007A",87,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX007A",88,0)
 N NAME,PARAMS,TMP
"RTN","RORX007A",89,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX007A",90,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX007A",91,0)
 ;--- Additional parameters
"RTN","RORX007A",92,0)
 F NAME="MAXUTNUM","MINRPNUM"  D
"RTN","RORX007A",93,0)
 . S TMP=$$PARAM^RORTSK01(NAME)
"RTN","RORX007A",94,0)
 . D:TMP'="" ADDVAL^RORTSK11(RORTSK,NAME,TMP,PARAMS)
"RTN","RORX007A",95,0)
 ;---
"RTN","RORX007A",96,0)
 Q PARAMS
"RTN","RORX007A",97,0)
 ;
"RTN","RORX007A",98,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX007A",99,0)
 ;
"RTN","RORX007A",100,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX007A",101,0)
 ;
"RTN","RORX007A",102,0)
 ; Return Values:
"RTN","RORX007A",103,0)
 ;       <0  Error code
"RTN","RORX007A",104,0)
 ;        0  Ok
"RTN","RORX007A",105,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX007A",106,0)
 ;
"RTN","RORX007A",107,0)
QUERY(FLAGS) ;
"RTN","RORX007A",108,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,RORMSG,TMP,XREFNODE
"RTN","RORX007A",109,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX007A",110,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX007A",111,0)
 ;--- Browse through the registry records
"RTN","RORX007A",112,0)
 S IEN=0
"RTN","RORX007A",113,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX007A",114,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX007A",115,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX007A",116,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX007A",117,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX007A",118,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX007A",119,0)
 . ;
"RTN","RORX007A",120,0)
 . ;--- Get the patient IEN (DFN)
"RTN","RORX007A",121,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX007A",122,0)
 . ;
"RTN","RORX007A",123,0)
 . ;--- Get the radiology data
"RTN","RORX007A",124,0)
 . S RC=$$GETDATA(PATIEN)
"RTN","RORX007A",125,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX007A",126,0)
 ;---
"RTN","RORX007A",127,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX007A",128,0)
 ;
"RTN","RORX007A",129,0)
 ;***** PLURAL/SINGULAR
"RTN","RORX007A",130,0)
SRPL(QNTY,WORD,SQ) ;
"RTN","RORX007A",131,0)
 Q $S('$G(SQ):QNTY_" ",1:"")_$P(WORD,U,$S(QNTY=1:1,1:2))
"RTN","RORX011")
0^32^B55424933^B48518702
"RTN","RORX011",1,0)
RORX011 ;HCIOFO/SG - PATIENT MEDICATION HISTORY ; 6/22/06 10:56am
"RTN","RORX011",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX011",3,0)
 ;
"RTN","RORX011",4,0)
 Q
"RTN","RORX011",5,0)
 ;
"RTN","RORX011",6,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX011",7,0)
 ;
"RTN","RORX011",8,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX011",9,0)
 ;
"RTN","RORX011",10,0)
 ; Return Values:
"RTN","RORX011",11,0)
 ;       <0  Error code
"RTN","RORX011",12,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX011",13,0)
 ;
"RTN","RORX011",14,0)
HEADER(PARTAG) ;
"RTN","RORX011",15,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,AGE,DOD)
"RTN","RORX011",16,0)
 ;;PTRXL(DATE,ORDER,TYPE,NAME,GENERIC,DAYSPLY,FILLTYPE)
"RTN","RORX011",17,0)
 ;
"RTN","RORX011",18,0)
 N HEADER,NOTES,RC
"RTN","RORX011",19,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX011",20,0)
 Q:HEADER<0 HEADER
"RTN","RORX011",21,0)
 S NOTES=$$ADDVAL^RORTSK11(RORTSK,"NOTES",,HEADER)
"RTN","RORX011",22,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE",$$DT^XLFDT,NOTES)
"RTN","RORX011",23,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX011",HEADER)
"RTN","RORX011",24,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX011",25,0)
 ;
"RTN","RORX011",26,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX011",27,0)
 ;
"RTN","RORX011",28,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX011",29,0)
 ;
"RTN","RORX011",30,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX011",31,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX011",32,0)
 ;
"RTN","RORX011",33,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX011",34,0)
 ;               returned via this parameter
"RTN","RORX011",35,0)
 ;
"RTN","RORX011",36,0)
 ; Return Values:
"RTN","RORX011",37,0)
 ;       <0  Error code
"RTN","RORX011",38,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX011",39,0)
 ;
"RTN","RORX011",40,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX011",41,0)
 N PARAMS,TMP
"RTN","RORX011",42,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX011",43,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX011",44,0)
 ;--- Process the drug list and options
"RTN","RORX011",45,0)
 S TMP=$$DRUGLST^RORXU007(.RORTSK,PARAMS,.RORXL,.RORXGRP)
"RTN","RORX011",46,0)
 Q:TMP<0 TMP
"RTN","RORX011",47,0)
 ;---
"RTN","RORX011",48,0)
 Q PARAMS
"RTN","RORX011",49,0)
 ;
"RTN","RORX011",50,0)
 ;***** PROCESS THE PATIENT'S DATA
"RTN","RORX011",51,0)
 ;
"RTN","RORX011",52,0)
 ; PTLIST        Reference (IEN) to the parent tag
"RTN","RORX011",53,0)
 ; PATIEN        Patient IEN in the file #2 (DFN)
"RTN","RORX011",54,0)
 ;
"RTN","RORX011",55,0)
 ; Return Values:
"RTN","RORX011",56,0)
 ;       <0  Error code
"RTN","RORX011",57,0)
 ;        0  Ok
"RTN","RORX011",58,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX011",59,0)
 ;
"RTN","RORX011",60,0)
PATIENT(PTLIST,PATIEN) ;
"RTN","RORX011",61,0)
 N BUF,FLT,FLTL,FQL,ITEM,NODE,PTAG,QSB,RC,TABLE,VA,VADM,VAERR
"RTN","RORX011",62,0)
 S (ECNT,RC)=0
"RTN","RORX011",63,0)
 ;--- Patient data
"RTN","RORX011",64,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLIST,,PATIEN)
"RTN","RORX011",65,0)
 Q:PTAG<0 PTAG
"RTN","RORX011",66,0)
 D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX011",67,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX011",68,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX011",69,0)
 D ADDVAL^RORTSK11(RORTSK,"DOB",$$DATE^RORXU002(VADM(3)\1),PTAG,1)
"RTN","RORX011",70,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE",VADM(4),PTAG,3)
"RTN","RORX011",71,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$$DATE^RORXU002(VADM(6)\1),PTAG,1)
"RTN","RORX011",72,0)
 ;--- List of drugs
"RTN","RORX011",73,0)
 S TABLE=$$ADDVAL^RORTSK11(RORTSK,"PTRXL",,PTAG)
"RTN","RORX011",74,0)
 Q:TABLE<0 TABLE
"RTN","RORX011",75,0)
 D ADDATTR^RORTSK11(RORTSK,TABLE,"TABLE","PTRXL")
"RTN","RORX011",76,0)
 ;---
"RTN","RORX011",77,0)
 S NODE=RORXDST,FLTL=$L(NODE)-1,FLT=$E(NODE,1,FLTL)
"RTN","RORX011",78,0)
 S QSB=$QL(NODE),FQL=QSB+5
"RTN","RORX011",79,0)
 F  S NODE=$Q(@NODE)  Q:$E(NODE,1,FLTL)'=FLT  D:$QL(NODE)=FQL
"RTN","RORX011",80,0)
 . ; NODE: @RORXDST@(DATE,DRUGNAME,DRUGIEN,RXNUM,RXCNT)
"RTN","RORX011",81,0)
 . S BUF=@NODE
"RTN","RORX011",82,0)
 . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,TABLE)
"RTN","RORX011",83,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$QS(NODE,QSB+1)\1,ITEM,1)
"RTN","RORX011",84,0)
 . D ADDVAL^RORTSK11(RORTSK,"ORDER",$QS(NODE,QSB+4),ITEM,1)
"RTN","RORX011",85,0)
 . S TMP=$P(BUF,U)
"RTN","RORX011",86,0)
 . S TMP=$S(TMP="O":"ORIGINAL",TMP="P":"PARTIAL",TMP="R":"REFILL",1:"")
"RTN","RORX011",87,0)
 . D ADDVAL^RORTSK11(RORTSK,"TYPE",TMP,ITEM,1)
"RTN","RORX011",88,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",$QS(NODE,QSB+2),ITEM,1)
"RTN","RORX011",89,0)
 . D ADDVAL^RORTSK11(RORTSK,"GENERIC",$P(BUF,U,4),ITEM,1)
"RTN","RORX011",90,0)
 . D ADDVAL^RORTSK11(RORTSK,"DAYSPLY",$P(BUF,U,5),ITEM,1)
"RTN","RORX011",91,0)
 . S TMP=$P(BUF,U,2)
"RTN","RORX011",92,0)
 . S TMP=$S(TMP="I":"INPATIENT",TMP="M":"MAIL",TMP="W":"WINDOW",1:"")
"RTN","RORX011",93,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILLTYPE",TMP,ITEM,1)
"RTN","RORX011",94,0)
 ;---
"RTN","RORX011",95,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX011",96,0)
 ;
"RTN","RORX011",97,0)
 ;***** PROCESSES THE LIST OF PATIENTS
"RTN","RORX011",98,0)
 ;
"RTN","RORX011",99,0)
 ; REPORT        Reference (IEN) to the parent tag
"RTN","RORX011",100,0)
 ;
"RTN","RORX011",101,0)
 ; Return Values:
"RTN","RORX011",102,0)
 ;       <0  Error code
"RTN","RORX011",103,0)
 ;        0  Ok
"RTN","RORX011",104,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX011",105,0)
 ;
"RTN","RORX011",106,0)
PROCESS(REPORT,FLAGS) ;
"RTN","RORX011",107,0)
 N CNT,ECNT,IEN798,PTIEN,PTLIST,PTNODE,RC,RORPTN,RORXDST,RXFLAGS,TMP
"RTN","RORX011",108,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX011",109,0)
 ;
"RTN","RORX011",110,0)
 ;--- Count patients in the list
"RTN","RORX011",111,0)
 I RORALL  D  S:RORPTN<0 RORPTN=0
"RTN","RORX011",112,0)
 . S PTNODE=$NA(^RORDATA(798,"ARP",RORREG_"#"))
"RTN","RORX011",113,0)
 . S RORPTN=$$REGSIZE^RORUTL02(+RORREG)
"RTN","RORX011",114,0)
 E  S (PTIEN,RORPTN)=0  D  Q:RORPTN'>0 0
"RTN","RORX011",115,0)
 . S PTNODE=$NA(RORTSK("PARAMS","PATIENTS","C"))
"RTN","RORX011",116,0)
 . F  S PTIEN=$O(@PTNODE@(PTIEN))  Q:PTIEN'>0  S RORPTN=RORPTN+1
"RTN","RORX011",117,0)
 ;---
"RTN","RORX011",118,0)
 S PTLIST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX011",119,0)
 Q:PTLIST<0 PTLIST
"RTN","RORX011",120,0)
 ;
"RTN","RORX011",121,0)
 ;--- Prepare parameters for the pharmacy search API
"RTN","RORX011",122,0)
 S RORXDST=$NA(^TMP("RORX011",$J))
"RTN","RORX011",123,0)
 S RORXDST("RORCB")="$$RXSCB^RORX011"
"RTN","RORX011",124,0)
 S RXFLAGS="E"
"RTN","RORX011",125,0)
 S:$$PARAM^RORTSK01("PATIENTS","INPATIENT") RXFLAGS=RXFLAGS_"IV"
"RTN","RORX011",126,0)
 S:$$PARAM^RORTSK01("PATIENTS","OUTPATIENT") RXFLAGS=RXFLAGS_"O"
"RTN","RORX011",127,0)
 ;
"RTN","RORX011",128,0)
 ;--- Browse through the list of patients
"RTN","RORX011",129,0)
 S (CNT,PTIEN)=0
"RTN","RORX011",130,0)
 F  S PTIEN=$O(@PTNODE@(PTIEN))  Q:PTIEN'>0  D  Q:RC<0
"RTN","RORX011",131,0)
 . S RC=$$LOOP^RORTSK01(CNT/RORPTN)  Q:RC<0
"RTN","RORX011",132,0)
 . S CNT=CNT+1,IEN798=$$PRRIEN^RORUTL01(PTIEN,RORREG)  Q:IEN798'>0
"RTN","RORX011",133,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX011",134,0)
 . I RORALL  Q:$$SKIP^RORXU005(IEN798,FLAGS,RORSDT,ROREDT)
"RTN","RORX011",135,0)
 . ;--- Search the pharmacy data
"RTN","RORX011",136,0)
 . K @RORXDST
"RTN","RORX011",137,0)
 . S TMP=$$RXSEARCH^RORUTL14(PTIEN,RORXL,.RORXDST,RXFLAGS,RORSDT,ROREDT1)
"RTN","RORX011",138,0)
 . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX011",139,0)
 . I RORALL  Q:TMP'>0
"RTN","RORX011",140,0)
 . ;--- Append the patient's data to the report
"RTN","RORX011",141,0)
 . S TMP=$$PATIENT(PTLIST,PTIEN)
"RTN","RORX011",142,0)
 . I TMP  S ECNT=ECNT+$S(TMP>0:TMP,1:1)  Q
"RTN","RORX011",143,0)
 ;
"RTN","RORX011",144,0)
 ;--- Cleanup
"RTN","RORX011",145,0)
 K @RORXDST
"RTN","RORX011",146,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX011",147,0)
 ;
"RTN","RORX011",148,0)
 ;***** COMPILES THE "PATIENT DRUG HISTORY" REPORT
"RTN","RORX011",149,0)
 ; REPORT CODE: 011
"RTN","RORX011",150,0)
 ;
"RTN","RORX011",151,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX011",152,0)
 ;
"RTN","RORX011",153,0)
 ; The ^TMP("RORX011",$J) global node is used by this function.
"RTN","RORX011",154,0)
 ;
"RTN","RORX011",155,0)
 ; Return Values:
"RTN","RORX011",156,0)
 ;       <0  Error code
"RTN","RORX011",157,0)
 ;        0  Ok
"RTN","RORX011",158,0)
 ;
"RTN","RORX011",159,0)
RXHIST(RORTSK) ;
"RTN","RORX011",160,0)
 N RORALL        ; Consider all registry patients
"RTN","RORX011",161,0)
 N ROREDT        ; End date
"RTN","RORX011",162,0)
 N ROREDT1       ; End date + 1
"RTN","RORX011",163,0)
 N RORREG        ; Registry IEN
"RTN","RORX011",164,0)
 N RORSDT        ; Start date
"RTN","RORX011",165,0)
 N RORXGRP       ; List of drug groups
"RTN","RORX011",166,0)
 N RORXL         ; Closed root of the medication list
"RTN","RORX011",167,0)
 ;
"RTN","RORX011",168,0)
 N ECNT,FLAGS,RC,REPORT,TMP
"RTN","RORX011",169,0)
 S RORXL="",(ECNT,RC)=0
"RTN","RORX011",170,0)
 K ^TMP("RORX011",$J)
"RTN","RORX011",171,0)
 ;
"RTN","RORX011",172,0)
 ;--- Root node of the report
"RTN","RORX011",173,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX011",174,0)
 Q:REPORT<0 REPORT
"RTN","RORX011",175,0)
 ;
"RTN","RORX011",176,0)
 D
"RTN","RORX011",177,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX011",178,0)
 . S RORREG=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORX011",179,0)
 . S RORALL=$$PARAM^RORTSK01("PATIENTS","ALL")
"RTN","RORX011",180,0)
 . S RC=$$PARAMS(REPORT,.RORSDT,.ROREDT,.FLAGS)  Q:RC<0
"RTN","RORX011",181,0)
 . S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1)
"RTN","RORX011",182,0)
 . ;
"RTN","RORX011",183,0)
 . ;--- Report header
"RTN","RORX011",184,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX011",185,0)
 . ;
"RTN","RORX011",186,0)
 . ;--- Process the data and generate the report
"RTN","RORX011",187,0)
 . S RC=$$PROCESS(REPORT,FLAGS)  S:RC>0 ECNT=ECNT+RC
"RTN","RORX011",188,0)
 ;
"RTN","RORX011",189,0)
 ;--- Cleanup
"RTN","RORX011",190,0)
 K ^TMP("RORX011",$J)
"RTN","RORX011",191,0)
 D FREE^RORTMP(RORXL)
"RTN","RORX011",192,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX011",193,0)
 ;
"RTN","RORX011",194,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX011",195,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX011",196,0)
 N DRUGIEN,DRUGNAME,FILLTYPE,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX011",197,0)
 S DRUGIEN=+DRUG,DRUGNAME=$P(DRUG,U,2)
"RTN","RORX011",198,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX011",199,0)
 ;--- Check the drug groups
"RTN","RORX011",200,0)
 S TMP=$$RXGRPCHK^RORXU007(.ROR8DST,+DRUG,RORXL)
"RTN","RORX011",201,0)
 Q:TMP TMP
"RTN","RORX011",202,0)
 ;--- Process the order
"RTN","RORX011",203,0)
 S:ROR8DST("RORXGEN")>0 $P(RXBUF,U,4)=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX011",204,0)
 S $P(RXBUF,U,5)=$P($G(^TMP("PS",$J,0)),U,7)  ; Days Supply
"RTN","RORX011",205,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX011",206,0)
 S FILLTYPE=$S(ORDFLG["I":"I",1:$P(TMP,U,3))
"RTN","RORX011",207,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX011",208,0)
 S RXCNT=0
"RTN","RORX011",209,0)
 ;--- Original prescription
"RTN","RORX011",210,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX011",211,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX011",212,0)
 . S $P(RXBUF,U,1,2)="I"_U_FILLTYPE,RXCNT=RXCNT+1
"RTN","RORX011",213,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",214,0)
 E  D             ;--- Outpatient
"RTN","RORX011",215,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX011",216,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX011",217,0)
 . S $P(RXBUF,U,1,2)="O"_U_FILLTYPE,RXCNT=RXCNT+1
"RTN","RORX011",218,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",219,0)
 ;--- Refills and partials
"RTN","RORX011",220,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX011",221,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX011",222,0)
 . S IRP=0
"RTN","RORX011",223,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX011",224,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX011",225,0)
 . . S $P(RXBUF,U,2)=$S(ORDFLG["I":"I",1:$P(TMP,U,5))
"RTN","RORX011",226,0)
 . . S $P(RXBUF,U,5)=$P(TMP,U,2)  ; Days Supply
"RTN","RORX011",227,0)
 . . I TMP>0  S RXCNT=RXCNT+1  D
"RTN","RORX011",228,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",229,0)
 Q 0
"RTN","RORX013")
0^36^B8643469^B7562823
"RTN","RORX013",1,0)
RORX013 ;HOIFO/SG - DIAGNOSIS CODES REPORT ; 6/21/06 3:05pm
"RTN","RORX013",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX013",3,0)
 ;
"RTN","RORX013",4,0)
 Q
"RTN","RORX013",5,0)
 ;
"RTN","RORX013",6,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX013",7,0)
 ;
"RTN","RORX013",8,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX013",9,0)
 ;
"RTN","RORX013",10,0)
 ; Return Values:
"RTN","RORX013",11,0)
 ;       <0  Error code
"RTN","RORX013",12,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX013",13,0)
 ;
"RTN","RORX013",14,0)
HEADER(PARTAG) ;
"RTN","RORX013",15,0)
 ;;ICD9LST(#,CODE,DIAG,NP,NC)
"RTN","RORX013",16,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,PTICDL(CODE,DIAG,DATE,SOURCE))
"RTN","RORX013",17,0)
 ;
"RTN","RORX013",18,0)
 N HEADER,RC
"RTN","RORX013",19,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX013",20,0)
 Q:HEADER<0 HEADER
"RTN","RORX013",21,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX013",HEADER)
"RTN","RORX013",22,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX013",23,0)
 ;
"RTN","RORX013",24,0)
 ;
"RTN","RORX013",25,0)
 ;***** COMPILES THE "DIAGNOSIS CODE" REPORT
"RTN","RORX013",26,0)
 ; REPORT CODE: 013
"RTN","RORX013",27,0)
 ;
"RTN","RORX013",28,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX013",29,0)
 ;
"RTN","RORX013",30,0)
 ; The ^TMP("VSIT",$J) global node is used by this function.
"RTN","RORX013",31,0)
 ;
"RTN","RORX013",32,0)
 ; @RORTMP@(
"RTN","RORX013",33,0)
 ;
"RTN","RORX013",34,0)
 ;   "PAT",              Number of patients
"RTN","RORX013",35,0)
 ;     DFN,              Descriptor
"RTN","RORX013",36,0)
 ;                         ^01: Las 4 digits of SSN
"RTN","RORX013",37,0)
 ;                         ^02: Name
"RTN","RORX013",38,0)
 ;                         ^03: Date of Death
"RTN","RORX013",39,0)
 ;       ICD9IEN,        Earliest Code Descriptor
"RTN","RORX013",40,0)
 ;                         ^01: Date
"RTN","RORX013",41,0)
 ;                         ^02: Source ("I", "O", or "PB")
"RTN","RORX013",42,0)
 ;         "C")          Quantity
"RTN","RORX013",43,0)
 ;         "I")          Inpatient quantity
"RTN","RORX013",44,0)
 ;         "O")          Outpatient quantity
"RTN","RORX013",45,0)
 ;         "PB")         Problem List quantity
"RTN","RORX013",46,0)
 ;
"RTN","RORX013",47,0)
 ;   "ICD",              Totals
"RTN","RORX013",48,0)
 ;                         ^01: Number of ICD-9 codes
"RTN","RORX013",49,0)
 ;                         ^02: Number of different codes
"RTN","RORX013",50,0)
 ;     ICD9IEN,          ICD-9 Descriptor
"RTN","RORX013",51,0)
 ;                         ^01: Code
"RTN","RORX013",52,0)
 ;                         ^02: Diagnosis (current version)
"RTN","RORX013",53,0)
 ;       "C")            Quantity
"RTN","RORX013",54,0)
 ;       "P")            Number of unique patients
"RTN","RORX013",55,0)
 ;
"RTN","RORX013",56,0)
 ; Return Values:
"RTN","RORX013",57,0)
 ;       <0  Error code
"RTN","RORX013",58,0)
 ;        0  Ok
"RTN","RORX013",59,0)
 ;
"RTN","RORX013",60,0)
ICD9LST(RORTSK) ;
"RTN","RORX013",61,0)
 N ROREDT        ; End date
"RTN","RORX013",62,0)
 N RORICDL       ; Prepared list of ICD-9 codes
"RTN","RORX013",63,0)
 N RORIGRP       ; List of ICD-9 groups
"RTN","RORX013",64,0)
 N RORREG        ; Registry IEN
"RTN","RORX013",65,0)
 N RORSDT        ; Start date
"RTN","RORX013",66,0)
 N RORTMP        ; Closed root of the temporary buffer
"RTN","RORX013",67,0)
 ;
"RTN","RORX013",68,0)
 N ECNT,RC,REPORT,SFLAGS,TMP
"RTN","RORX013",69,0)
 S RORICDL="",(ECNT,RC)=0
"RTN","RORX013",70,0)
 ;--- Root node of the report
"RTN","RORX013",71,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX013",72,0)
 Q:REPORT<0 REPORT
"RTN","RORX013",73,0)
 ;
"RTN","RORX013",74,0)
 ;--- Get and prepare the report parameters
"RTN","RORX013",75,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX013",76,0)
 S RC=$$PARAMS(REPORT,.RORSDT,.ROREDT,.SFLAGS)  Q:RC<0 RC
"RTN","RORX013",77,0)
 ;
"RTN","RORX013",78,0)
 ;--- Report header
"RTN","RORX013",79,0)
 S RC=$$HEADER(REPORT)  Q:RC<0 RC
"RTN","RORX013",80,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORX013",81,0)
 D
"RTN","RORX013",82,0)
 . ;--- Query the registry
"RTN","RORX013",83,0)
 . D TPPSETUP^RORTSK01(70)
"RTN","RORX013",84,0)
 . S RC=$$QUERY^RORX013A(SFLAGS)
"RTN","RORX013",85,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013",86,0)
 . ;--- Sort the data
"RTN","RORX013",87,0)
 . D TPPSETUP^RORTSK01(10)
"RTN","RORX013",88,0)
 . S RC=$$SORT^RORX013A()
"RTN","RORX013",89,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013",90,0)
 . ;--- Store the results
"RTN","RORX013",91,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX013",92,0)
 . S RC=$$STORE^RORX013C(REPORT)
"RTN","RORX013",93,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013",94,0)
 ;
"RTN","RORX013",95,0)
 ;--- Cleanup
"RTN","RORX013",96,0)
 D FREE^RORTMP(RORTMP),FREE^RORTMP(RORICDL)
"RTN","RORX013",97,0)
 K ^TMP("VSIT",$J)
"RTN","RORX013",98,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX013",99,0)
 ;
"RTN","RORX013",100,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX013",101,0)
 ;
"RTN","RORX013",102,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX013",103,0)
 ;
"RTN","RORX013",104,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX013",105,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX013",106,0)
 ;
"RTN","RORX013",107,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX013",108,0)
 ;               returned via this parameter
"RTN","RORX013",109,0)
 ;
"RTN","RORX013",110,0)
 ; Return Values:
"RTN","RORX013",111,0)
 ;       <0  Error code
"RTN","RORX013",112,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX013",113,0)
 ;
"RTN","RORX013",114,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX013",115,0)
 N PARAMS,TMP
"RTN","RORX013",116,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX013",117,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX013",118,0)
 ;--- Process the list of ICD9 codes
"RTN","RORX013",119,0)
 S TMP=$$ICD9LST^RORXU008(.RORTSK,PARAMS,.RORICDL,.RORIGRP)
"RTN","RORX013",120,0)
 Q:TMP<0 TMP
"RTN","RORX013",121,0)
 ;---
"RTN","RORX013",122,0)
 Q PARAMS
"RTN","RORX013A")
0^37^B48499761^B46112050
"RTN","RORX013A",1,0)
RORX013A ;HCIOFO/SG - DIAGNOSIS CODES (QUERY & SORT) ; 6/21/06 2:24pm
"RTN","RORX013A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX013A",3,0)
 ;
"RTN","RORX013A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX013A",5,0)
 ;
"RTN","RORX013A",6,0)
 ; #928          ACTIVE^GMPLUTL
"RTN","RORX013A",7,0)
 ; #1554         POV^PXAPIIB (controlled)
"RTN","RORX013A",8,0)
 ; #1900-F       SELECTED^VSIT (controlled)
"RTN","RORX013A",9,0)
 ; #2977         GETFLDS^GMPLEDT3
"RTN","RORX013A",10,0)
 ; #3157         RPC^DGPTFAPI (supported)
"RTN","RORX013A",11,0)
 ; #3545         Access to the "AAD" cross-reference and the field 80
"RTN","RORX013A",12,0)
 ; #3990         $$CODEN^ICDCODE and $$ICDDX^ICDCODE (supported)
"RTN","RORX013A",13,0)
 ; #10082        Read access to the file #80 (supported)
"RTN","RORX013A",14,0)
 ;
"RTN","RORX013A",15,0)
 Q
"RTN","RORX013A",16,0)
 ;
"RTN","RORX013A",17,0)
 ;**** STORES THE ICD-9 CODE
"RTN","RORX013A",18,0)
 ;
"RTN","RORX013A",19,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",20,0)
 ; SOURCE        ICD-9 source code ("I", "O", "PB")
"RTN","RORX013A",21,0)
 ; [ICD9IEN]     IEN of the ICD-9 descriptor in file #80
"RTN","RORX013A",22,0)
 ; DATE          Date when the code was entered
"RTN","RORX013A",23,0)
 ; [ICD9]        ICD-9 code
"RTN","RORX013A",24,0)
 ;
"RTN","RORX013A",25,0)
 ; Either the ICD9IEN or the ICD9 parameter must be provided.
"RTN","RORX013A",26,0)
 ;
"RTN","RORX013A",27,0)
ICD9SET(PATIEN,SOURCE,ICD9IEN,DATE,ICD9) ;
"RTN","RORX013A",28,0)
 Q:DATE'>0
"RTN","RORX013A",29,0)
 N TMP
"RTN","RORX013A",30,0)
 S ICD9IEN=+$G(ICD9IEN)
"RTN","RORX013A",31,0)
 I ICD9IEN'>0  Q:$G(ICD9)=""  D  Q:ICD9IEN'>0
"RTN","RORX013A",32,0)
 . S ICD9IEN=+$$CODEN^ICDCODE(ICD9,80)
"RTN","RORX013A",33,0)
 ;---
"RTN","RORX013A",34,0)
 Q:$$ICDGRCHK^RORXU008(.RORPTGRP,ICD9IEN,RORICDL)
"RTN","RORX013A",35,0)
 ;---
"RTN","RORX013A",36,0)
 S TMP=+$G(@RORTMP@("PAT",PATIEN,ICD9IEN))
"RTN","RORX013A",37,0)
 S:'TMP!(DATE<TMP) @RORTMP@("PAT",PATIEN,ICD9IEN)=DATE_U_SOURCE
"RTN","RORX013A",38,0)
 S ^(SOURCE)=$G(@RORTMP@("PAT",PATIEN,ICD9IEN,SOURCE))+1
"RTN","RORX013A",39,0)
 Q
"RTN","RORX013A",40,0)
 ;
"RTN","RORX013A",41,0)
 ;***** SEARCHES FOR INPATIENT DIAGNOSES
"RTN","RORX013A",42,0)
 ;
"RTN","RORX013A",43,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",44,0)
 ;
"RTN","RORX013A",45,0)
 ; Return Values:
"RTN","RORX013A",46,0)
 ;       <0  Error code
"RTN","RORX013A",47,0)
 ;        0  Ok
"RTN","RORX013A",48,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",49,0)
 ;
"RTN","RORX013A",50,0)
INPAT(PATIEN) ;
"RTN","RORX013A",51,0)
 N ADMDT,DISDT,I,IEN,NODE,RC,RORBUF,RORMSG,TMP
"RTN","RORX013A",52,0)
 S NODE=$NA(^DGPT("AAD",+PATIEN))
"RTN","RORX013A",53,0)
 S RC=0
"RTN","RORX013A",54,0)
 ;--- Browse through the admissions
"RTN","RORX013A",55,0)
 S ADMDT=ROREDT1
"RTN","RORX013A",56,0)
 F  S ADMDT=$O(@NODE@(ADMDT),-1)  Q:ADMDT'>0  D  Q:RC
"RTN","RORX013A",57,0)
 . S IEN=""
"RTN","RORX013A",58,0)
 . F  S IEN=$O(@NODE@(ADMDT,IEN),-1)  Q:IEN'>0  D  Q:RC
"RTN","RORX013A",59,0)
 . . Q:+$G(^DGPT(IEN,0))'=PATIEN
"RTN","RORX013A",60,0)
 . . Q:$$PTF^RORXU001(IEN,"FP",,.DISDT)
"RTN","RORX013A",61,0)
 . . ;--- Skip invalid and/or incomplete admissions
"RTN","RORX013A",62,0)
 . . I DISDT'>0  D  Q:TMP!(DISDT'>0)
"RTN","RORX013A",63,0)
 . . . S TMP=$$CHKADM^RORXU001(PATIEN,ADMDT,.DISDT)
"RTN","RORX013A",64,0)
 . . ;--- Check if any appropriate admissions are left
"RTN","RORX013A",65,0)
 . . I DISDT<RORSDT  S RC=1  Q
"RTN","RORX013A",66,0)
 . . Q:DISDT'<ROREDT1
"RTN","RORX013A",67,0)
 . . ;--- Load and process the admission data
"RTN","RORX013A",68,0)
 . . K RORBUF  D RPC^DGPTFAPI(.RORBUF,IEN)
"RTN","RORX013A",69,0)
 . . I $G(RORBUF(0))<0  D  Q
"RTN","RORX013A",70,0)
 . . . D ERROR^RORERR(-57,,,,RORBUF(0),"RPC^DGPTFAPI")
"RTN","RORX013A",71,0)
 . . S TMP=$P($G(RORBUF(1)),U,3)
"RTN","RORX013A",72,0)
 . . D:TMP'="" ICD9SET(PATIEN,"I",,DISDT,TMP)  ; ICD1
"RTN","RORX013A",73,0)
 . . D:$G(RORBUF(2))'=""                       ; ICD2 - ICD10
"RTN","RORX013A",74,0)
 . . . F I=1:1:9  S TMP=$P(RORBUF(2),U,I)  D:TMP'=""
"RTN","RORX013A",75,0)
 . . . . D ICD9SET(PATIEN,"I",,DISDT,TMP)
"RTN","RORX013A",76,0)
 . . S TMP=+$$GET1^DIQ(45,IEN,80,"I",,"RORMSG")
"RTN","RORX013A",77,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,45,IEN)
"RTN","RORX013A",78,0)
 . . D:TMP>0 ICD9SET(PATIEN,"I",TMP,DISDT)     ; PRINCIPAL DIAGNOSIS
"RTN","RORX013A",79,0)
 ;---
"RTN","RORX013A",80,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX013A",81,0)
 ;
"RTN","RORX013A",82,0)
 ;***** SEARCHES FOR OUTPATIENT DIAGNOSES
"RTN","RORX013A",83,0)
 ;
"RTN","RORX013A",84,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",85,0)
 ;
"RTN","RORX013A",86,0)
 ; Return Values:
"RTN","RORX013A",87,0)
 ;       <0  Error code
"RTN","RORX013A",88,0)
 ;        0  Ok
"RTN","RORX013A",89,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",90,0)
 ;
"RTN","RORX013A",91,0)
OUTPAT(PATIEN) ;
"RTN","RORX013A",92,0)
 N DATE,ICDIEN,RC,RORMSG,RORVPLST,TMP,VPIEN,VSIEN,VSIT
"RTN","RORX013A",93,0)
 D SELECTED^VSIT(PATIEN,RORSDT,ROREDT)
"RTN","RORX013A",94,0)
 ;--- Browse through the visits
"RTN","RORX013A",95,0)
 S (VSIEN,RC)=0
"RTN","RORX013A",96,0)
 F  S VSIEN=$O(^TMP("VSIT",$J,VSIEN))  Q:VSIEN=""  D  Q:RC<0
"RTN","RORX013A",97,0)
 . S TMP=+$O(^TMP("VSIT",$J,VSIEN,""))  Q:TMP'>0
"RTN","RORX013A",98,0)
 . S DATE=$P($G(^TMP("VSIT",$J,VSIEN,TMP)),U)  Q:DATE'>0
"RTN","RORX013A",99,0)
 . ;--- Get a list of V POV records
"RTN","RORX013A",100,0)
 . D POV^PXAPIIB(VSIEN,.RORVPLST)
"RTN","RORX013A",101,0)
 . ;--- Process the records
"RTN","RORX013A",102,0)
 . S (VPIEN,RC)=0
"RTN","RORX013A",103,0)
 . F  S VPIEN=$O(RORVPLST(VPIEN))  Q:VPIEN'>0  D  Q:RC
"RTN","RORX013A",104,0)
 . . S ICDIEN=+$P(RORVPLST(VPIEN),U)
"RTN","RORX013A",105,0)
 . . D:ICDIEN>0 ICD9SET(PATIEN,"O",ICDIEN,DATE)
"RTN","RORX013A",106,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX013A",107,0)
 ;
"RTN","RORX013A",108,0)
 ;***** SEARCHES FOR PROBLEMS
"RTN","RORX013A",109,0)
 ;
"RTN","RORX013A",110,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",111,0)
 ;
"RTN","RORX013A",112,0)
 ; Return Values:
"RTN","RORX013A",113,0)
 ;       <0  Error code
"RTN","RORX013A",114,0)
 ;        0  Ok
"RTN","RORX013A",115,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",116,0)
 ;
"RTN","RORX013A",117,0)
PROBLEM(PATIEN) ;
"RTN","RORX013A",118,0)
 N DATE,GMPFLD,GMPORIG,GMPROV,GMVAMC,ICDIEN,IEN,RC,RORPLST,TMP
"RTN","RORX013A",119,0)
 ;--- Load a list of active problems
"RTN","RORX013A",120,0)
 D ACTIVE^GMPLUTL(PATIEN,.RORPLST)
"RTN","RORX013A",121,0)
 ;--- Browse through the problems
"RTN","RORX013A",122,0)
 S (GMPVAMC,GMPROV)=0
"RTN","RORX013A",123,0)
 S (IS,RC)=0
"RTN","RORX013A",124,0)
 F  S IS=$O(RORPLST(IS))  Q:IS=""  D  Q:RC
"RTN","RORX013A",125,0)
 . S IEN=+$G(RORPLST(IS,0))  Q:IEN'>0
"RTN","RORX013A",126,0)
 . K GMPFLD,GMPORIG  D GETFLDS^GMPLEDT3(IEN)
"RTN","RORX013A",127,0)
 . S ICDIEN=+$G(GMPFLD(.01))  Q:ICDIEN'>0
"RTN","RORX013A",128,0)
 . S DATE=$P($G(GMPFLD(.08)),U)
"RTN","RORX013A",129,0)
 . D:(DATE'<RORSDT)&(DATE<ROREDT1) ICD9SET(PATIEN,"PB",ICDIEN,DATE)
"RTN","RORX013A",130,0)
 Q 0
"RTN","RORX013A",131,0)
 ;
"RTN","RORX013A",132,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX013A",133,0)
 ;
"RTN","RORX013A",134,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX013A",135,0)
 ;
"RTN","RORX013A",136,0)
 ; Return Values:
"RTN","RORX013A",137,0)
 ;       <0  Error code
"RTN","RORX013A",138,0)
 ;        0  Ok
"RTN","RORX013A",139,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",140,0)
 ;
"RTN","RORX013A",141,0)
QUERY(FLAGS) ;
"RTN","RORX013A",142,0)
 N RORDOD        ; Date of death
"RTN","RORX013A",143,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX013A",144,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX013A",145,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX013A",146,0)
 N RORPTGRP      ; Temporary list of ICD-9 groups
"RTN","RORX013A",147,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX013A",148,0)
 ;
"RTN","RORX013A",149,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX013A",150,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX013A",151,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX013A",152,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1)
"RTN","RORX013A",153,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX013A",154,0)
 ;
"RTN","RORX013A",155,0)
 ;--- Browse through the registry records
"RTN","RORX013A",156,0)
 S IEN=0
"RTN","RORX013A",157,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX013A",158,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX013A",159,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX013A",160,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX013A",161,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX013A",162,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX013A",163,0)
 . ;
"RTN","RORX013A",164,0)
 . ;--- Get the patient IEN (DFN)
"RTN","RORX013A",165,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX013A",166,0)
 . M RORPTGRP=RORIGRP("C")
"RTN","RORX013A",167,0)
 . ;
"RTN","RORX013A",168,0)
 . ;--- Inpatient codes
"RTN","RORX013A",169,0)
 . S RC=$$INPAT(PATIEN)
"RTN","RORX013A",170,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",171,0)
 . ;
"RTN","RORX013A",172,0)
 . ;--- Outpatient codes
"RTN","RORX013A",173,0)
 . S RC=$$OUTPAT(PATIEN)
"RTN","RORX013A",174,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",175,0)
 . ;
"RTN","RORX013A",176,0)
 . ;--- Problem list
"RTN","RORX013A",177,0)
 . S RC=$$PROBLEM(PATIEN)
"RTN","RORX013A",178,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",179,0)
 . ;
"RTN","RORX013A",180,0)
 . ;--- Skip the patient if no data has been found
"RTN","RORX013A",181,0)
 . Q:$D(@RORTMP@("PAT",PATIEN))<10
"RTN","RORX013A",182,0)
 . ;--- No ICD-9 from some groups
"RTN","RORX013A",183,0)
 . I $D(RORPTGRP)>1  K @RORTMP@("PAT",PATIEN)  Q
"RTN","RORX013A",184,0)
 . ;
"RTN","RORX013A",185,0)
 . ;--- Get the patient's data
"RTN","RORX013A",186,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX013A",187,0)
 . S RORPNAME=VADM(1),RORDOD=$P(VADM(6),U),RORLAST4=VA("BID")
"RTN","RORX013A",188,0)
 . ;
"RTN","RORX013A",189,0)
 . ;--- Calculate the patient's totals
"RTN","RORX013A",190,0)
 . S RC=$$TOTALS(PATIEN)
"RTN","RORX013A",191,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",192,0)
 ;---
"RTN","RORX013A",193,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX013A",194,0)
 ;
"RTN","RORX013A",195,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX013A",196,0)
 ;
"RTN","RORX013A",197,0)
 ; Return Values:
"RTN","RORX013A",198,0)
 ;       <0  Error code
"RTN","RORX013A",199,0)
 ;        0  Ok
"RTN","RORX013A",200,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",201,0)
 ;
"RTN","RORX013A",202,0)
SORT() ;
"RTN","RORX013A",203,0)
 N ICDIEN,TMP,TNC,TNDC
"RTN","RORX013A",204,0)
 ;---
"RTN","RORX013A",205,0)
 S ICDIEN=0,(TNC,TNDC)=0
"RTN","RORX013A",206,0)
 F  S ICDIEN=$O(@RORTMP@("ICD",ICDIEN))  Q:ICDIEN'>0  D
"RTN","RORX013A",207,0)
 . S TNC=TNC+$G(@RORTMP@("ICD",ICDIEN,"C"))
"RTN","RORX013A",208,0)
 . S TNDC=TNDC+1
"RTN","RORX013A",209,0)
 S @RORTMP@("ICD")=TNC_U_TNDC
"RTN","RORX013A",210,0)
 ;---
"RTN","RORX013A",211,0)
 Q 0
"RTN","RORX013A",212,0)
 ;
"RTN","RORX013A",213,0)
 ;***** CALCULATES INTERMEDIATE TOTALS
"RTN","RORX013A",214,0)
 ;
"RTN","RORX013A",215,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",216,0)
 ;
"RTN","RORX013A",217,0)
 ; Return Values:
"RTN","RORX013A",218,0)
 ;       <0  Error code
"RTN","RORX013A",219,0)
 ;        0  Ok
"RTN","RORX013A",220,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",221,0)
 ;
"RTN","RORX013A",222,0)
TOTALS(PATIEN) ;
"RTN","RORX013A",223,0)
 N CNT,ICD9,ICDIEN,PNODE,RC,TMP
"RTN","RORX013A",224,0)
 S PNODE=$NA(@RORTMP@("PAT",PATIEN))
"RTN","RORX013A",225,0)
 S @PNODE=RORLAST4_U_RORPNAME_U_RORDOD
"RTN","RORX013A",226,0)
 S ^("PAT")=$G(@RORTMP@("PAT"))+1
"RTN","RORX013A",227,0)
 ;
"RTN","RORX013A",228,0)
 S ICDIEN=0
"RTN","RORX013A",229,0)
 F  S ICDIEN=$O(@PNODE@(ICDIEN))  Q:ICDIEN'>0  D
"RTN","RORX013A",230,0)
 . S ICD9=$P($G(@RORTMP@("ICD",ICDIEN)),U)
"RTN","RORX013A",231,0)
 . I ICD9=""  D
"RTN","RORX013A",232,0)
 . . S TMP=$$ICDDX^ICDCODE(ICDIEN)
"RTN","RORX013A",233,0)
 . . I TMP'<0  S ICD9=$P(TMP,U,2),TMP=$P(TMP,U,4)
"RTN","RORX013A",234,0)
 . . E  S TMP=""
"RTN","RORX013A",235,0)
 . . S:ICD9="" ICD9="UNKN"
"RTN","RORX013A",236,0)
 . . S:TMP="" TMP="Unknown ("_ICDIEN_")"
"RTN","RORX013A",237,0)
 . . S @RORTMP@("ICD",ICDIEN)=ICD9_U_TMP
"RTN","RORX013A",238,0)
 . ;---
"RTN","RORX013A",239,0)
 . S CNT=0
"RTN","RORX013A",240,0)
 . F TMP="I","O","PB"  S CNT=CNT+$G(@PNODE@(ICDIEN,TMP))
"RTN","RORX013A",241,0)
 . S @PNODE@(ICDIEN,"C")=CNT
"RTN","RORX013A",242,0)
 . S ^("C")=$G(@RORTMP@("ICD",ICDIEN,"C"))+CNT
"RTN","RORX013A",243,0)
 . S ^("P")=$G(@RORTMP@("ICD",ICDIEN,"P"))+1
"RTN","RORX013A",244,0)
 Q 0
"RTN","RORX015")
0^27^B12843309^B7302265
"RTN","RORX015",1,0)
RORX015 ;HOIFO/SG - PROCEDURES REPORT ; 6/23/06 1:36pm
"RTN","RORX015",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX015",3,0)
 ;
"RTN","RORX015",4,0)
 Q
"RTN","RORX015",5,0)
 ;
"RTN","RORX015",6,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX015",7,0)
 ;
"RTN","RORX015",8,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX015",9,0)
 ;
"RTN","RORX015",10,0)
 ; Return Values:
"RTN","RORX015",11,0)
 ;       <0  Error code
"RTN","RORX015",12,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX015",13,0)
 ;
"RTN","RORX015",14,0)
HEADER(PARTAG) ;
"RTN","RORX015",15,0)
 ;;PROCLST(#,PROCODE,PROCNAME,NP,NC,SOURCE)
"RTN","RORX015",16,0)
 ;;PROCEDURES(#,NAME,LAST4,DOD,PROCODE,PROCNAME,DATE,SOURCE)
"RTN","RORX015",17,0)
 ;;PATIENTS(#,NAME,LAST4,DOD)
"RTN","RORX015",18,0)
 ;
"RTN","RORX015",19,0)
 N HEADER,RC
"RTN","RORX015",20,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX015",21,0)
 Q:HEADER<0 HEADER
"RTN","RORX015",22,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX015",HEADER)
"RTN","RORX015",23,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX015",24,0)
 ;
"RTN","RORX015",25,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX015",26,0)
 ;
"RTN","RORX015",27,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX015",28,0)
 ;
"RTN","RORX015",29,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX015",30,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX015",31,0)
 ;
"RTN","RORX015",32,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX015",33,0)
 ;               returned via this parameter
"RTN","RORX015",34,0)
 ;
"RTN","RORX015",35,0)
 ; Return Values:
"RTN","RORX015",36,0)
 ;       <0  Error code
"RTN","RORX015",37,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX015",38,0)
 ;
"RTN","RORX015",39,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX015",40,0)
 N PARAMS,TMP
"RTN","RORX015",41,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX015",42,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX015",43,0)
 ;--- Process the list of ICD-9 codes
"RTN","RORX015",44,0)
 I $$PARAM^RORTSK01("PATIENTS","INPATIENT")  D  Q:TMP<0 TMP
"RTN","RORX015",45,0)
 . S TMP=$$ICD9LST^RORXU008(.RORTSK,PARAMS,.RORICDL,.RORIGRP)
"RTN","RORX015",46,0)
 ;--- Process the list of CPT codes
"RTN","RORX015",47,0)
 I $$PARAM^RORTSK01("PATIENTS","OUTPATIENT")  D  Q:TMP<0 TMP
"RTN","RORX015",48,0)
 . S TMP=$$CPTLST^RORXU006(.RORTSK,PARAMS)
"RTN","RORX015",49,0)
 ;---
"RTN","RORX015",50,0)
 Q PARAMS
"RTN","RORX015",51,0)
 ;
"RTN","RORX015",52,0)
 ;***** COMPILES THE "PROCEDURES" REPORT
"RTN","RORX015",53,0)
 ; REPORT CODE: 015
"RTN","RORX015",54,0)
 ;
"RTN","RORX015",55,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX015",56,0)
 ;
"RTN","RORX015",57,0)
 ; @RORTMP@(
"RTN","RORX015",58,0)
 ;
"RTN","RORX015",59,0)
 ;   "PAT",              Number of patients
"RTN","RORX015",60,0)
 ;     DFN,              Descriptor
"RTN","RORX015",61,0)
 ;                         ^01: Las 4 digits of SSN
"RTN","RORX015",62,0)
 ;                         ^02: Name
"RTN","RORX015",63,0)
 ;                         ^03: Date of Death
"RTN","RORX015",64,0)
 ;       "I",
"RTN","RORX015",65,0)
 ;         ICDIEN,       Earliest Code Descriptor
"RTN","RORX015",66,0)
 ;                         ^01: Date
"RTN","RORX015",67,0)
 ;         "C")          Quantity
"RTN","RORX015",68,0)
 ;       "O",
"RTN","RORX015",69,0)
 ;         CPTIEN,       Earliest Code Descriptor
"RTN","RORX015",70,0)
 ;                         ^01: Date
"RTN","RORX015",71,0)
 ;           "C")        Quantity
"RTN","RORX015",72,0)
 ;
"RTN","RORX015",73,0)
 ;   "PROC",             Totals
"RTN","RORX015",74,0)
 ;                         ^01: Number of procedure codes
"RTN","RORX015",75,0)
 ;                         ^02: Number of different codes
"RTN","RORX015",76,0)
 ;     "B",
"RTN","RORX015",77,0)
 ;       ProcName,
"RTN","RORX015",78,0)
 ;         Source,
"RTN","RORX015",79,0)
 ;           IEN)        ""
"RTN","RORX015",80,0)
 ;     "I",
"RTN","RORX015",81,0)
 ;       ICDIEN,         Procedure Descriptor
"RTN","RORX015",82,0)
 ;                         ^01: Code
"RTN","RORX015",83,0)
 ;                         ^02: Short description (current version)
"RTN","RORX015",84,0)
 ;         "C")          Quantity
"RTN","RORX015",85,0)
 ;         "P")          Number of unique patients
"RTN","RORX015",86,0)
 ;     "O",
"RTN","RORX015",87,0)
 ;       CPTIEN,         Procedure Descriptor
"RTN","RORX015",88,0)
 ;                         ^01: Code
"RTN","RORX015",89,0)
 ;                         ^02: Short description (current version)
"RTN","RORX015",90,0)
 ;         "C")          Quantity
"RTN","RORX015",91,0)
 ;         "P")          Number of unique patients
"RTN","RORX015",92,0)
 ;
"RTN","RORX015",93,0)
 ; Return Values:
"RTN","RORX015",94,0)
 ;       <0  Error code
"RTN","RORX015",95,0)
 ;        0  Ok
"RTN","RORX015",96,0)
 ;
"RTN","RORX015",97,0)
PROCLST(RORTSK) ;
"RTN","RORX015",98,0)
 N RORPROC       ; Procedures mode (-1|1)
"RTN","RORX015",99,0)
 N ROREDT        ; End date
"RTN","RORX015",100,0)
 N RORICDL       ; Prepared list of ICD-9 codes
"RTN","RORX015",101,0)
 N RORIGRP       ; List of ICD-9 groups
"RTN","RORX015",102,0)
 N RORREG        ; Registry IEN
"RTN","RORX015",103,0)
 N RORSDT        ; Start date
"RTN","RORX015",104,0)
 N RORTMP        ; Closed root of the temporary buffer
"RTN","RORX015",105,0)
 ;
"RTN","RORX015",106,0)
 N ECNT,RC,REPORT,SFLAGS,TMP
"RTN","RORX015",107,0)
 S (ECNT,RC)=0,(RORICDL,RORTMP)=""
"RTN","RORX015",108,0)
 ;
"RTN","RORX015",109,0)
 ;--- Root node of the report
"RTN","RORX015",110,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX015",111,0)
 Q:REPORT<0 REPORT
"RTN","RORX015",112,0)
 ;
"RTN","RORX015",113,0)
 ;--- Get and prepare the report parameters
"RTN","RORX015",114,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX015",115,0)
 S RC=$$PARAMS(REPORT,.RORSDT,.ROREDT,.SFLAGS)  Q:RC<0 RC
"RTN","RORX015",116,0)
 S RORPROC=$$RPTMODE("PROC")
"RTN","RORX015",117,0)
 ;
"RTN","RORX015",118,0)
 ;--- Report header
"RTN","RORX015",119,0)
 S RC=$$HEADER(REPORT)  Q:RC<0 RC
"RTN","RORX015",120,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORX015",121,0)
 D
"RTN","RORX015",122,0)
 . ;--- Query the registry
"RTN","RORX015",123,0)
 . D TPPSETUP^RORTSK01(70)
"RTN","RORX015",124,0)
 . S RC=$$QUERY^RORX015A(SFLAGS)
"RTN","RORX015",125,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015",126,0)
 . ;--- Sort the data
"RTN","RORX015",127,0)
 . D TPPSETUP^RORTSK01(10)
"RTN","RORX015",128,0)
 . S RC=$$SORT^RORX015A()
"RTN","RORX015",129,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015",130,0)
 . ;--- Store the results
"RTN","RORX015",131,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX015",132,0)
 . S RC=$$STORE^RORX015C(REPORT)
"RTN","RORX015",133,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015",134,0)
 ;
"RTN","RORX015",135,0)
 ;--- Cleanup
"RTN","RORX015",136,0)
 D FREE^RORTMP(RORTMP),FREE^RORTMP(RORICDL)
"RTN","RORX015",137,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX015",138,0)
 ;
"RTN","RORX015",139,0)
 ;***** DETERMINES THE REPORT MODE FOR PROCEDURES
"RTN","RORX015",140,0)
 ;
"RTN","RORX015",141,0)
 ; NAME          Base name of the attribute ("PROC")
"RTN","RORX015",142,0)
 ;
"RTN","RORX015",143,0)
 ; Return Values:
"RTN","RORX015",144,0)
 ;       <0  "Did Not"
"RTN","RORX015",145,0)
 ;        0  Not selected
"RTN","RORX015",146,0)
 ;       >0  "Did"
"RTN","RORX015",147,0)
RPTMODE(NAME) ;
"RTN","RORX015",148,0)
 Q:$$PARAM^RORTSK01("PATIENTS",NAME) 1        ; "Did"
"RTN","RORX015",149,0)
 Q:$$PARAM^RORTSK01("PATIENTS","NO"_NAME) -1  ; "Did Not"
"RTN","RORX015",150,0)
 Q 0
"RTN","RORX015A")
0^25^B62875777^B24310638
"RTN","RORX015A",1,0)
RORX015A ;HCIOFO/SG - OUTPATIENT PROCEDURES (QUERY & SORT) ; 6/21/06 4:36pm
"RTN","RORX015A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX015A",3,0)
 ;
"RTN","RORX015A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX015A",5,0)
 ;
"RTN","RORX015A",6,0)
 ; #1995         $$CODEN^ICPTCOD and $$CPT^ICPTCOD (supported)
"RTN","RORX015A",7,0)
 ; #2548         SDQ routine (supported)
"RTN","RORX015A",8,0)
 ; #3990         $$CODEN^ICDCODE and $$ICDOP^ICDCODE (supported)
"RTN","RORX015A",9,0)
 ;
"RTN","RORX015A",10,0)
 Q
"RTN","RORX015A",11,0)
 ;
"RTN","RORX015A",12,0)
 ;***** SEARCHES FOR INPATIENT PROCEDURES
"RTN","RORX015A",13,0)
 ;
"RTN","RORX015A",14,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",15,0)
 ;
"RTN","RORX015A",16,0)
 ; Return Values:
"RTN","RORX015A",17,0)
 ;       <0  Error code
"RTN","RORX015A",18,0)
 ;        0  Ok
"RTN","RORX015A",19,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",20,0)
 ;
"RTN","RORX015A",21,0)
INPAT(PTIEN) ;
"RTN","RORX015A",22,0)
 N DATE,ERRCNT,FLDLST,IEN,IEN45,IENS,NODE,RC,RORBUF,RORMSG,XREF
"RTN","RORX015A",23,0)
 S (ERRCNT,RC)=0
"RTN","RORX015A",24,0)
 S XREF=$$ROOT^DILFD(45,,1),XREF=$NA(@XREF@("B",PTIEN))
"RTN","RORX015A",25,0)
 S IEN45=0
"RTN","RORX015A",26,0)
 F  S IEN45=$O(@XREF@(IEN45))  Q:IEN45'>0  D
"RTN","RORX015A",27,0)
 . ;Q:$$GET1^DIQ(45,IEN45_",",6,"I",,"RORMSG")<1  ; Skip open records
"RTN","RORX015A",28,0)
 . ;S IENS=IEN45_","
"RTN","RORX015A",29,0)
 . ;S FLDLST="45.01;45.02;45.03;45.04;45.05"
"RTN","RORX015A",30,0)
 . ;D GETS^DIQ(45,IENS,FLDLST,"I","RORBUF","RORMSG")
"RTN","RORX015A",31,0)
 . ;I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",32,0)
 . ;. D DBS^RORERR("RORMSG",-99,,PTIEN,45,IENS)
"RTN","RORX015A",33,0)
 . ;D INP(PTIEN,$NA(RORBUF(IENS)),FLDLST,???)
"RTN","RORX015A",34,0)
 . ;--- Surgical procedures
"RTN","RORX015A",35,0)
 . S NODE=$$ROOT^DILFD(45.01,","_IEN45_",",1)
"RTN","RORX015A",36,0)
 . S IEN=0
"RTN","RORX015A",37,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D
"RTN","RORX015A",38,0)
 . . S IENS=IEN_","_IEN45_","  K RORBUF
"RTN","RORX015A",39,0)
 . . S FLDLST="8;9;10;11;12"
"RTN","RORX015A",40,0)
 . . ;--- Load the data
"RTN","RORX015A",41,0)
 . . D GETS^DIQ(45.01,IENS,".01;"_FLDLST,"I","RORBUF","RORMSG")
"RTN","RORX015A",42,0)
 . . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",43,0)
 . . . D DBS^RORERR("RORMSG",-99,,PTIEN,45.01,IENS)
"RTN","RORX015A",44,0)
 . . S DATE=$G(RORBUF(45.01,IENS,.01,"I"))
"RTN","RORX015A",45,0)
 . . Q:(DATE<RORSDT)!(DATE'<ROREDT1)
"RTN","RORX015A",46,0)
 . . ;--- Generate the output
"RTN","RORX015A",47,0)
 . . D INP(PTIEN,$NA(RORBUF(45.01,IENS)),FLDLST,DATE)
"RTN","RORX015A",48,0)
 . ;--- Other procedures
"RTN","RORX015A",49,0)
 . S NODE=$$ROOT^DILFD(45.05,","_IEN45_",",1)
"RTN","RORX015A",50,0)
 . S IEN=0
"RTN","RORX015A",51,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D
"RTN","RORX015A",52,0)
 . . S IENS=IEN_","_IEN45_","  K RORBUF
"RTN","RORX015A",53,0)
 . . S FLDLST="4;5;6;7;8"
"RTN","RORX015A",54,0)
 . . ;--- Load the data
"RTN","RORX015A",55,0)
 . . D GETS^DIQ(45.05,IENS,".01;"_FLDLST,"I","RORBUF","RORMSG")
"RTN","RORX015A",56,0)
 . . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",57,0)
 . . . D DBS^RORERR("RORMSG",-99,,PTIEN,45.05,IENS)
"RTN","RORX015A",58,0)
 . . S DATE=$G(RORBUF(45.05,IENS,.01,"I"))
"RTN","RORX015A",59,0)
 . . Q:(DATE<RORSDT)!(DATE'<ROREDT1)
"RTN","RORX015A",60,0)
 . . ;--- Generate the output
"RTN","RORX015A",61,0)
 . . D INP(PTIEN,$NA(RORBUF(45.05,IENS)),FLDLST,DATE)
"RTN","RORX015A",62,0)
 ;---
"RTN","RORX015A",63,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORX015A",64,0)
 ;
"RTN","RORX015A",65,0)
 ;****
"RTN","RORX015A",66,0)
INP(PTIEN,ROR8BUF,FLDLST,DATE) ;
"RTN","RORX015A",67,0)
 N I,ICD9IEN,FLD
"RTN","RORX015A",68,0)
 F I=1:1  S FLD=$P(FLDLST,";",I)  Q:FLD=""  D
"RTN","RORX015A",69,0)
 . S ICD9IEN=+$G(@ROR8BUF@(FLD,"I"))
"RTN","RORX015A",70,0)
 . D:ICD9IEN>0 PROCSET(PTIEN,"I",ICD9IEN,DATE)
"RTN","RORX015A",71,0)
 Q
"RTN","RORX015A",72,0)
 ;
"RTN","RORX015A",73,0)
 ;***** CALL-BACK PROCEDURE FOR THE OUTPATIENT SEARCH
"RTN","RORX015A",74,0)
 ;
"RTN","RORX015A",75,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",76,0)
 ;
"RTN","RORX015A",77,0)
OPSCAN(PTIEN) ;
"RTN","RORX015A",78,0)
 N CPTIEN,DATE,IEN,RORCPT,VDATE
"RTN","RORX015A",79,0)
 D GETCPT^SDOE(Y,"RORCPT")
"RTN","RORX015A",80,0)
 Q:$G(RORCPT)'>0
"RTN","RORX015A",81,0)
 S VDATE=+$P(Y0,U)
"RTN","RORX015A",82,0)
 ;---
"RTN","RORX015A",83,0)
 S IEN=0
"RTN","RORX015A",84,0)
 F  S IEN=$O(RORCPT(IEN))  Q:IEN'>0  D
"RTN","RORX015A",85,0)
 . S CPTIEN=+$P(RORCPT(IEN),U),DATE=+$P($G(RORCPT(IEN,12)),U)
"RTN","RORX015A",86,0)
 . D:CPTIEN>0 PROCSET(PTIEN,"O",CPTIEN,$S(DATE>0:DATE,1:VDATE))
"RTN","RORX015A",87,0)
 Q
"RTN","RORX015A",88,0)
 ;
"RTN","RORX015A",89,0)
 ;***** SEARCHES FOR OUTPATIENT PROCEDURES
"RTN","RORX015A",90,0)
 ;
"RTN","RORX015A",91,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",92,0)
 ;
"RTN","RORX015A",93,0)
 ; Return Values:
"RTN","RORX015A",94,0)
 ;       <0  Error code
"RTN","RORX015A",95,0)
 ;        0  Ok
"RTN","RORX015A",96,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",97,0)
 ;
"RTN","RORX015A",98,0)
OUTPAT(PTIEN) ;
"RTN","RORX015A",99,0)
 N QUERY
"RTN","RORX015A",100,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORX015A",101,0)
 D INDEX^SDQ(.QUERY,"PATIENT/DATE","SET")
"RTN","RORX015A",102,0)
 D PAT^SDQ(.QUERY,PTIEN,"SET")
"RTN","RORX015A",103,0)
 D DATE^SDQ(.QUERY,RORSDT,ROREDT1,"SET")
"RTN","RORX015A",104,0)
 D SCANCB^SDQ(.QUERY,"D OPSCAN^RORX015A("_PTIEN_")","SET")
"RTN","RORX015A",105,0)
 D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORX015A",106,0)
 D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORX015A",107,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORX015A",108,0)
 Q 0
"RTN","RORX015A",109,0)
 ;
"RTN","RORX015A",110,0)
 ;**** STORES THE PROCEDURE CODE
"RTN","RORX015A",111,0)
 ;
"RTN","RORX015A",112,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",113,0)
 ; SOURCE        CPT source code ("O" or "I")
"RTN","RORX015A",114,0)
 ; [IEN]         IEN of the procedure descriptor (file #81 or #80.1)
"RTN","RORX015A",115,0)
 ; DATE          Date when the code was entered
"RTN","RORX015A",116,0)
 ; [CODE]        Procedure code (CPT or ICD-9)
"RTN","RORX015A",117,0)
 ;
"RTN","RORX015A",118,0)
 ; Either the IEN or the CODE parameter must be provided.
"RTN","RORX015A",119,0)
 ;
"RTN","RORX015A",120,0)
PROCSET(PTIEN,SOURCE,IEN,DATE,CODE) ;
"RTN","RORX015A",121,0)
 Q:DATE'>0
"RTN","RORX015A",122,0)
 N TMP
"RTN","RORX015A",123,0)
 S IEN=+$G(IEN)
"RTN","RORX015A",124,0)
 ;---
"RTN","RORX015A",125,0)
 I IEN'>0  Q:$G(CODE)=""  D  Q:IEN'>0
"RTN","RORX015A",126,0)
 . I SOURCE="O"  S IEN=+$$CODEN^ICPTCOD(CODE)       Q
"RTN","RORX015A",127,0)
 . I SOURCE="I"  S IEN=+$$CODEN^ICDCODE(CODE,80.1)  Q
"RTN","RORX015A",128,0)
 ;---
"RTN","RORX015A",129,0)
 I SOURCE="O",'$$PARAM^RORTSK01("CPTLST","ALL")  D  Q:'TMP
"RTN","RORX015A",130,0)
 . S TMP=$D(RORTSK("PARAMS","CPTLST","C",IEN))
"RTN","RORX015A",131,0)
 I SOURCE="I"  Q:$$ICDGRCHK^RORXU008(.RORPTGRP,IEN,RORICDL)
"RTN","RORX015A",132,0)
 ;---
"RTN","RORX015A",133,0)
 S TMP=+$G(@RORTMP@("PAT",PTIEN,SOURCE,IEN))
"RTN","RORX015A",134,0)
 S:'TMP!(DATE<TMP) @RORTMP@("PAT",PTIEN,SOURCE,IEN)=DATE
"RTN","RORX015A",135,0)
 S ^("C")=$G(@RORTMP@("PAT",PTIEN,SOURCE,IEN,"C"))+1
"RTN","RORX015A",136,0)
 Q
"RTN","RORX015A",137,0)
 ;
"RTN","RORX015A",138,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX015A",139,0)
 ;
"RTN","RORX015A",140,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX015A",141,0)
 ;
"RTN","RORX015A",142,0)
 ; Return Values:
"RTN","RORX015A",143,0)
 ;       <0  Error code
"RTN","RORX015A",144,0)
 ;        0  Ok
"RTN","RORX015A",145,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",146,0)
 ;
"RTN","RORX015A",147,0)
QUERY(FLAGS) ;
"RTN","RORX015A",148,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX015A",149,0)
 N RORPTGRP      ; Temporary list of ICD-9 groups
"RTN","RORX015A",150,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX015A",151,0)
 ;
"RTN","RORX015A",152,0)
 N CNT,ECNT,IEN,IENS,MODE,PTIEN,RC,SKIP,SKIPEDT,SKIPSDT,TMP,UTEDT,UTSDT,XREFNODE
"RTN","RORX015A",153,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX015A",154,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1)
"RTN","RORX015A",155,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX015A",156,0)
 S:$$PARAM^RORTSK01("PATIENTS","INPATIENT") MODE("I")=1
"RTN","RORX015A",157,0)
 S:$$PARAM^RORTSK01("PATIENTS","OUTPATIENT") MODE("O")=1
"RTN","RORX015A",158,0)
 ;--- Utilization date range
"RTN","RORX015A",159,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX015A",160,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX015A",161,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX015A",162,0)
 . ;--- Combined date range
"RTN","RORX015A",163,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,UTSDT)
"RTN","RORX015A",164,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,UTEDT)
"RTN","RORX015A",165,0)
 ;--- Number of patients in the registry
"RTN","RORX015A",166,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX015A",167,0)
 ;
"RTN","RORX015A",168,0)
 ;=== Browse through the registry records
"RTN","RORX015A",169,0)
 S IEN=0
"RTN","RORX015A",170,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX015A",171,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX015A",172,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX015A",173,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX015A",174,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX015A",175,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX015A",176,0)
 . ;
"RTN","RORX015A",177,0)
 . ;--- Get the patient IEN (DFN)
"RTN","RORX015A",178,0)
 . S PTIEN=$$PTIEN^RORUTL01(IEN)  Q:PTIEN'>0
"RTN","RORX015A",179,0)
 . M RORPTGRP=RORIGRP("C")
"RTN","RORX015A",180,0)
 . ;
"RTN","RORX015A",181,0)
 . ;--- Inpatient codes (ICD-9)
"RTN","RORX015A",182,0)
 . I $G(MODE("I"))   D  I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015A",183,0)
 . . S RC=$$INPAT(PTIEN)
"RTN","RORX015A",184,0)
 . ;--- Outpatient codes (CPT)
"RTN","RORX015A",185,0)
 . I $G(MODE("O"))  D  I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015A",186,0)
 . . S RC=$$OUTPAT(PTIEN)
"RTN","RORX015A",187,0)
 . ;
"RTN","RORX015A",188,0)
 . ;--- If ICD-9 codes from some groups have not been found,
"RTN","RORX015A",189,0)
 . ;--- then do not consider inpatient procedures at all
"RTN","RORX015A",190,0)
 . K:$D(RORPTGRP)>1 @RORTMP@("PAT",PTIEN,"I")
"RTN","RORX015A",191,0)
 . ;---
"RTN","RORX015A",192,0)
 . S SKIP=($D(@RORTMP@("PAT",PTIEN))<10)
"RTN","RORX015A",193,0)
 . S:RORPROC<0 SKIP='SKIP
"RTN","RORX015A",194,0)
 . ;
"RTN","RORX015A",195,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX015A",196,0)
 . I 'SKIP  D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX015A",197,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX015A",198,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PTIEN,.TMP)
"RTN","RORX015A",199,0)
 . . S:'UTIL SKIP=1
"RTN","RORX015A",200,0)
 . ;
"RTN","RORX015A",201,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX015A",202,0)
 . I SKIP  K @RORTMP@("PAT",PTIEN)  Q
"RTN","RORX015A",203,0)
 . ;
"RTN","RORX015A",204,0)
 . ;--- Calculate the patient's totals
"RTN","RORX015A",205,0)
 . S RC=$$TOTALS(PTIEN)
"RTN","RORX015A",206,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015A",207,0)
 ;---
"RTN","RORX015A",208,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX015A",209,0)
 ;
"RTN","RORX015A",210,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX015A",211,0)
 ;
"RTN","RORX015A",212,0)
 ; Return Values:
"RTN","RORX015A",213,0)
 ;       <0  Error code
"RTN","RORX015A",214,0)
 ;        0  Ok
"RTN","RORX015A",215,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",216,0)
 ;
"RTN","RORX015A",217,0)
SORT() ;
"RTN","RORX015A",218,0)
 N IEN,SRC,TMP,TNC,TNDC
"RTN","RORX015A",219,0)
 ;---
"RTN","RORX015A",220,0)
 S (TNC,TNDC)=0
"RTN","RORX015A",221,0)
 F SRC="I","O"  D
"RTN","RORX015A",222,0)
 . S IEN=0
"RTN","RORX015A",223,0)
 . F  S IEN=$O(@RORTMP@("PROC",SRC,IEN))  Q:IEN'>0  D
"RTN","RORX015A",224,0)
 . . S TMP=$P($G(@RORTMP@("PROC",SRC,IEN)),U,2)
"RTN","RORX015A",225,0)
 . . S:TMP'="" @RORTMP@("PROC","B",TMP,SRC,IEN)=""
"RTN","RORX015A",226,0)
 . . S TNC=TNC+$G(@RORTMP@("PROC",SRC,IEN,"C"))
"RTN","RORX015A",227,0)
 . . S TNDC=TNDC+1
"RTN","RORX015A",228,0)
 S @RORTMP@("PROC")=TNC_U_TNDC
"RTN","RORX015A",229,0)
 ;---
"RTN","RORX015A",230,0)
 Q 0
"RTN","RORX015A",231,0)
 ;
"RTN","RORX015A",232,0)
 ;***** CALCULATES INTERMEDIATE TOTALS
"RTN","RORX015A",233,0)
 ;
"RTN","RORX015A",234,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",235,0)
 ;
"RTN","RORX015A",236,0)
 ; Return Values:
"RTN","RORX015A",237,0)
 ;       <0  Error code
"RTN","RORX015A",238,0)
 ;        0  Ok
"RTN","RORX015A",239,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",240,0)
 ;
"RTN","RORX015A",241,0)
TOTALS(PTIEN) ;
"RTN","RORX015A",242,0)
 N CNT,CODE,IEN,NAME,PNODE,RC,SRC,TMP,VA,VADM
"RTN","RORX015A",243,0)
 S PNODE=$NA(@RORTMP@("PAT",PTIEN))
"RTN","RORX015A",244,0)
 ;--- Get and store the patient's data
"RTN","RORX015A",245,0)
 D VADEM^RORUTL05(PTIEN,1)
"RTN","RORX015A",246,0)
 S @PNODE=VA("BID")_U_VADM(1)_U_$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX015A",247,0)
 S ^("PAT")=$G(@RORTMP@("PAT"))+1
"RTN","RORX015A",248,0)
 ;
"RTN","RORX015A",249,0)
 F SRC="I","O"  D
"RTN","RORX015A",250,0)
 . S IEN=0
"RTN","RORX015A",251,0)
 . F  S IEN=$O(@PNODE@(SRC,IEN))  Q:IEN'>0  D
"RTN","RORX015A",252,0)
 . . S CODE=$P($G(@RORTMP@("PROC",SRC,IEN)),U),NAME=""
"RTN","RORX015A",253,0)
 . . D:CODE=""
"RTN","RORX015A",254,0)
 . . . I SRC="O"  D
"RTN","RORX015A",255,0)
 . . . . S TMP=$$CPT^ICPTCOD(IEN)
"RTN","RORX015A",256,0)
 . . . . S:TMP'<0 CODE=$P(TMP,U,2),NAME=$P(TMP,U,3)
"RTN","RORX015A",257,0)
 . . . E  D
"RTN","RORX015A",258,0)
 . . . . S TMP=$$ICDOP^ICDCODE(IEN)
"RTN","RORX015A",259,0)
 . . . . S:TMP'<0 CODE=$P(TMP,U,2),NAME=$P(TMP,U,5)
"RTN","RORX015A",260,0)
 . . . S:CODE="" CODE="UNKN"
"RTN","RORX015A",261,0)
 . . . S:NAME="" NAME="Unknown ("_IEN_")"
"RTN","RORX015A",262,0)
 . . . S @RORTMP@("PROC",SRC,IEN)=CODE_U_NAME
"RTN","RORX015A",263,0)
 . . ;---
"RTN","RORX015A",264,0)
 . . S CNT=+$G(@PNODE@(SRC,IEN,"C"))
"RTN","RORX015A",265,0)
 . . S ^("C")=$G(@RORTMP@("PROC",SRC,IEN,"C"))+CNT
"RTN","RORX015A",266,0)
 . . S ^("P")=$G(@RORTMP@("PROC",SRC,IEN,"P"))+1
"RTN","RORX015A",267,0)
 Q 0
"RTN","RORX015C")
0^26^B20478911^B12085093
"RTN","RORX015C",1,0)
RORX015C ;HCIOFO/SG - OUTPATIENT PROCEDURES (STORE) ; 6/27/06 10:54am
"RTN","RORX015C",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORX015C",3,0)
 ;
"RTN","RORX015C",4,0)
 ; This routine uses the following IAs:
"RTN","RORX015C",5,0)
 ;
"RTN","RORX015C",6,0)
 ; #1995         $$CPT^ICPTCOD (supported)
"RTN","RORX015C",7,0)
 ; #3990         $$ICDOP^ICDCODE (supported)
"RTN","RORX015C",8,0)
 ;
"RTN","RORX015C",9,0)
 Q
"RTN","RORX015C",10,0)
 ;
"RTN","RORX015C",11,0)
 ;***** STORES THE PROCEDURE CODE TABLE
"RTN","RORX015C",12,0)
 ;
"RTN","RORX015C",13,0)
 ; PTAG          IEN of the parent element
"RTN","RORX015C",14,0)
 ;
"RTN","RORX015C",15,0)
 ; NODE          Closed root of the node of the temporary global
"RTN","RORX015C",16,0)
 ;
"RTN","RORX015C",17,0)
 ; Return Values:
"RTN","RORX015C",18,0)
 ;       <0  Error code
"RTN","RORX015C",19,0)
 ;        0  Ok
"RTN","RORX015C",20,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015C",21,0)
 ;
"RTN","RORX015C",22,0)
CODES(PTAG,NODE) ;
"RTN","RORX015C",23,0)
 N IEN,ITEM,NAME,SRC,TABLE,TMP
"RTN","RORX015C",24,0)
 S TABLE=$$ADDVAL^RORTSK11(RORTSK,"PROCLST",,PTAG)
"RTN","RORX015C",25,0)
 Q:TABLE<0 TABLE
"RTN","RORX015C",26,0)
 D ADDATTR^RORTSK11(RORTSK,TABLE,"TABLE","PROCLST")
"RTN","RORX015C",27,0)
 S NAME=""
"RTN","RORX015C",28,0)
 F  S NAME=$O(@NODE@("PROC","B",NAME))  Q:NAME=""  D
"RTN","RORX015C",29,0)
 . S SRC=""
"RTN","RORX015C",30,0)
 . F  S SRC=$O(@NODE@("PROC","B",NAME,SRC))  Q:SRC=""  D
"RTN","RORX015C",31,0)
 . . S IEN=0
"RTN","RORX015C",32,0)
 . . F  S IEN=$O(@NODE@("PROC","B",NAME,SRC,IEN))  Q:IEN'>0  D
"RTN","RORX015C",33,0)
 . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PROCEDURE",,TABLE)
"RTN","RORX015C",34,0)
 . . . S TMP=@NODE@("PROC",SRC,IEN)
"RTN","RORX015C",35,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"PROCODE",$P(TMP,U,1),ITEM,2)
"RTN","RORX015C",36,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"PROCNAME",$P(TMP,U,2),ITEM,2)
"RTN","RORX015C",37,0)
 . . . S TMP=$G(@NODE@("PROC",SRC,IEN,"P"))
"RTN","RORX015C",38,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"NP",TMP,ITEM,3)
"RTN","RORX015C",39,0)
 . . . S TMP=$G(@NODE@("PROC",SRC,IEN,"C"))
"RTN","RORX015C",40,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"NC",TMP,ITEM,3)
"RTN","RORX015C",41,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"SOURCE",SRC,ITEM,1)
"RTN","RORX015C",42,0)
 Q 0
"RTN","RORX015C",43,0)
 ;
"RTN","RORX015C",44,0)
 ;***** STORES THE PATIENT TABLE
"RTN","RORX015C",45,0)
 ;
"RTN","RORX015C",46,0)
 ; PTAG          IEN of the parent element
"RTN","RORX015C",47,0)
 ;
"RTN","RORX015C",48,0)
 ; NODE          Closed root of the node of the temporary global
"RTN","RORX015C",49,0)
 ;
"RTN","RORX015C",50,0)
 ; Return Values:
"RTN","RORX015C",51,0)
 ;       <0  Error code
"RTN","RORX015C",52,0)
 ;        0  Ok
"RTN","RORX015C",53,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015C",54,0)
 ;
"RTN","RORX015C",55,0)
PATIENTS(PTAG,NODE) ;
"RTN","RORX015C",56,0)
 N DATE,DOD,IEN,ITEM,LAST4,PTIEN,PROCLST,PTCPTL,PTLST,PTNAME,SRC,TMP
"RTN","RORX015C",57,0)
 S (PROCLST,PTLST)=-1
"RTN","RORX015C",58,0)
 ;--- Table for patients with procedures
"RTN","RORX015C",59,0)
 I RORPROC>0  D  Q:PROCLST<0 PROCLST
"RTN","RORX015C",60,0)
 . S PROCLST=$$ADDVAL^RORTSK11(RORTSK,"PROCEDURES",,PTAG)
"RTN","RORX015C",61,0)
 . D ADDATTR^RORTSK11(RORTSK,PROCLST,"TABLE","PROCEDURES")
"RTN","RORX015C",62,0)
 . ;--- Force the privacy note
"RTN","RORX015C",63,0)
 . D ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG)
"RTN","RORX015C",64,0)
 ;--- Table for patients without procedures
"RTN","RORX015C",65,0)
 I RORPROC<0  D  Q:PTLST<0 PTLST
"RTN","RORX015C",66,0)
 . S PTLST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,PTAG)
"RTN","RORX015C",67,0)
 . D ADDATTR^RORTSK11(RORTSK,PTLST,"TABLE","PATIENTS")
"RTN","RORX015C",68,0)
 ;---
"RTN","RORX015C",69,0)
 S PTIEN=0
"RTN","RORX015C",70,0)
 F  S PTIEN=$O(@NODE@("PAT",PTIEN))  Q:PTIEN'>0  D
"RTN","RORX015C",71,0)
 . S TMP=@NODE@("PAT",PTIEN)
"RTN","RORX015C",72,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),DOD=$P(TMP,U,3)
"RTN","RORX015C",73,0)
 . ;--- Patient list
"RTN","RORX015C",74,0)
 . I RORPROC<0  D  Q
"RTN","RORX015C",75,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLST,,PTIEN)
"RTN","RORX015C",76,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,2)
"RTN","RORX015C",77,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX015C",78,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX015C",79,0)
 . ;--- Patients and procedures
"RTN","RORX015C",80,0)
 . F SRC="I","O"  D
"RTN","RORX015C",81,0)
 . . S IEN=0
"RTN","RORX015C",82,0)
 . . F  S IEN=$O(@NODE@("PAT",PTIEN,SRC,IEN))  Q:IEN'>0  D
"RTN","RORX015C",83,0)
 . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PROCEDURE",,PROCLST,,PTIEN)
"RTN","RORX015C",84,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,2)
"RTN","RORX015C",85,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX015C",86,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX015C",87,0)
 . . . S TMP=$G(@NODE@("PAT",PTIEN,SRC,IEN))
"RTN","RORX015C",88,0)
 . . . S DATE=$P(TMP,U)
"RTN","RORX015C",89,0)
 . . . I SRC="O"  D
"RTN","RORX015C",90,0)
 . . . . S TMP=$$CPT^ICPTCOD(IEN,DATE)  S:TMP<0 TMP=""
"RTN","RORX015C",91,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"PROCODE",$P(TMP,U,2),ITEM,2)
"RTN","RORX015C",92,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"PROCNAME",$P(TMP,U,3),ITEM,2)
"RTN","RORX015C",93,0)
 . . . E  D
"RTN","RORX015C",94,0)
 . . . . S TMP=$$ICDOP^ICDCODE(IEN,DATE)  S:TMP<0 TMP=""
"RTN","RORX015C",95,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"PROCODE",$P(TMP,U,2),ITEM,2)
"RTN","RORX015C",96,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"PROCNAME",$P(TMP,U,5),ITEM,2)
"RTN","RORX015C",97,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE^RORXU002(DATE\1),ITEM,1)
"RTN","RORX015C",98,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"SOURCE",SRC,ITEM,1)
"RTN","RORX015C",99,0)
 Q 0
"RTN","RORX015C",100,0)
 ;
"RTN","RORX015C",101,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX015C",102,0)
 ;
"RTN","RORX015C",103,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX015C",104,0)
 ;
"RTN","RORX015C",105,0)
 ; Return Values:
"RTN","RORX015C",106,0)
 ;       <0  Error code
"RTN","RORX015C",107,0)
 ;        0  Ok
"RTN","RORX015C",108,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015C",109,0)
 ;
"RTN","RORX015C",110,0)
STORE(REPORT) ;
"RTN","RORX015C",111,0)
 N ECNT,RC,SECTION,TMP
"RTN","RORX015C",112,0)
 S (ECNT,RC)=0
"RTN","RORX015C",113,0)
 ;--- Procedure codes
"RTN","RORX015C",114,0)
 I RORPROC>0  D  Q:RC<0 RC
"RTN","RORX015C",115,0)
 . S RC=$$CODES(REPORT,RORTMP)
"RTN","RORX015C",116,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015C",117,0)
 . S RC=$$LOOP^RORTSK01(.3)
"RTN","RORX015C",118,0)
 ;--- Patients
"RTN","RORX015C",119,0)
 S TMP=$$PARAM^RORTSK01("OPTIONS","COMPLETE")
"RTN","RORX015C",120,0)
 I TMP  D  I RC  Q:RC<0 RC  S ECNT=ECNT+RC
"RTN","RORX015C",121,0)
 . S RC=$$PATIENTS(REPORT,RORTMP)
"RTN","RORX015C",122,0)
 S RC=$$LOOP^RORTSK01(.99)  Q:RC<0 RC
"RTN","RORX015C",123,0)
 ;--- Totals
"RTN","RORX015C",124,0)
 S SECTION=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX015C",125,0)
 Q:SECTION<0 SECTION
"RTN","RORX015C",126,0)
 S TMP=$G(@RORTMP@("PROC"))
"RTN","RORX015C",127,0)
 D ADDVAL^RORTSK11(RORTSK,"NC",+$P(TMP,U,1),SECTION)
"RTN","RORX015C",128,0)
 D ADDVAL^RORTSK11(RORTSK,"NDC",+$P(TMP,U,2),SECTION)
"RTN","RORX015C",129,0)
 S TMP=$G(@RORTMP@("PAT"))
"RTN","RORX015C",130,0)
 D ADDVAL^RORTSK11(RORTSK,"NP",+TMP,SECTION)
"RTN","RORX015C",131,0)
 ;---
"RTN","RORX015C",132,0)
 Q ECNT
"RTN","RORXU002")
0^24^B55243922^B52378499
"RTN","RORXU002",1,0)
RORXU002 ;HCIOFO/SG - REPORT BUILDER UTILITIES ; 5/18/06 11:13am
"RTN","RORXU002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORXU002",3,0)
 ;
"RTN","RORXU002",4,0)
 Q
"RTN","RORXU002",5,0)
 ;
"RTN","RORXU002",6,0)
 ;***** SCANS THE TABLE DEFINITION (RORSRC) FOR COLUMN NAMES
"RTN","RORXU002",7,0)
 ;
"RTN","RORXU002",8,0)
 ; .TERM         Reference to a local variable where
"RTN","RORXU002",9,0)
 ;               is terminator is returned
"RTN","RORXU002",10,0)
 ;
"RTN","RORXU002",11,0)
 ; Return Values:
"RTN","RORXU002",12,0)
 ;       ""  End of definition
"RTN","RORXU002",13,0)
 ;      ...  Name of the column
"RTN","RORXU002",14,0)
 ;
"RTN","RORXU002",15,0)
COLSCAN(TERM) ;
"RTN","RORXU002",16,0)
 N CH,I,TOKEN
"RTN","RORXU002",17,0)
 F I=1:1  S TERM=$E(RORSRC,I)  Q:"(,)"[TERM
"RTN","RORXU002",18,0)
 S TOKEN=$E(RORSRC,1,I-1)
"RTN","RORXU002",19,0)
 F I=I+1:1  S CH=$E(RORSRC,I)  Q:(CH="")!("(,)"'[CH)
"RTN","RORXU002",20,0)
 S $E(RORSRC,1,I-1)=""
"RTN","RORXU002",21,0)
 Q TOKEN
"RTN","RORXU002",22,0)
 ;
"RTN","RORXU002",23,0)
 ;***** CHECKS THE FILEMAN DATE/TIME VALUE
"RTN","RORXU002",24,0)
DATE(DT) ;
"RTN","RORXU002",25,0)
 Q $S(DT>0:+DT,1:"")
"RTN","RORXU002",26,0)
 ;
"RTN","RORXU002",27,0)
 ;***** OUTPUTS THE BASIC HEADER TO THE REPORT
"RTN","RORXU002",28,0)
 ;
"RTN","RORXU002",29,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",30,0)
 ;
"RTN","RORXU002",31,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",32,0)
 ;
"RTN","RORXU002",33,0)
 ; Return Values:
"RTN","RORXU002",34,0)
 ;       <0  Error code
"RTN","RORXU002",35,0)
 ;       >0  IEN of the HEADER element
"RTN","RORXU002",36,0)
 ;
"RTN","RORXU002",37,0)
HEADER(RORTSK,PARTAG) ;
"RTN","RORXU002",38,0)
 N HEADER,IENS,REGIEN,RORBUF,RORMSG,TMP
"RTN","RORXU002",39,0)
 S HEADER=$$ADDVAL^RORTSK11(RORTSK,"HEADER",,PARTAG)
"RTN","RORXU002",40,0)
 Q:HEADER<0 HEADER
"RTN","RORXU002",41,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE($$NOW^XLFDT),HEADER)
"RTN","RORXU002",42,0)
 D ADDVAL^RORTSK11(RORTSK,"TASK_NUMBER",RORTSK,HEADER)
"RTN","RORXU002",43,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",44,0)
 ;---
"RTN","RORXU002",45,0)
 S IENS=REGIEN_","
"RTN","RORXU002",46,0)
 D GETS^DIQ(798.1,IENS,"1;2","I","RORBUF","RORMSG")
"RTN","RORXU002",47,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORXU002",48,0)
 S TMP=$G(RORBUF(798.1,IENS,1,"I"))
"RTN","RORXU002",49,0)
 D ADDVAL^RORTSK11(RORTSK,"UPDATED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",50,0)
 S TMP=$G(RORBUF(798.1,IENS,2,"I"))
"RTN","RORXU002",51,0)
 D ADDVAL^RORTSK11(RORTSK,"EXTRACTED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",52,0)
 Q HEADER
"RTN","RORXU002",53,0)
 ;
"RTN","RORXU002",54,0)
 ;***** PARSES THE COMMA-SEPARATED LIST
"RTN","RORXU002",55,0)
 ;
"RTN","RORXU002",56,0)
 ; .LIST         Reference to a local variable that contains a list.
"RTN","RORXU002",57,0)
 ;               Items of the list are returned as the subscripts of
"RTN","RORXU002",58,0)
 ;               this variable.
"RTN","RORXU002",59,0)
 ;
"RTN","RORXU002",60,0)
LIST(LIST) ;
"RTN","RORXU002",61,0)
 N I,TMP,VAL
"RTN","RORXU002",62,0)
 F I=1:1  S VAL=$P(LIST,",",I)  Q:VAL=""  D
"RTN","RORXU002",63,0)
 . S TMP=$$TRIM^XLFSTR(VAL)
"RTN","RORXU002",64,0)
 . S:TMP'="" LIST(TMP)=""
"RTN","RORXU002",65,0)
 Q
"RTN","RORXU002",66,0)
 ;
"RTN","RORXU002",67,0)
 ;***** COMPILES A TEXT DESCRIPTION FOR THE REPORT OPTIONS
"RTN","RORXU002",68,0)
 ;
"RTN","RORXU002",69,0)
 ; .OPTIONS      Reference to a local variable containing
"RTN","RORXU002",70,0)
 ;               the options as subscripts
"RTN","RORXU002",71,0)
 ;
"RTN","RORXU002",72,0)
 ; [DLGNUM]      Number of the dialog that contains the template
"RTN","RORXU002",73,0)
 ;               (7980000.018, by default).
"RTN","RORXU002",74,0)
 ;
"RTN","RORXU002",75,0)
 ; Return Values:
"RTN","RORXU002",76,0)
 ;      ...  Text description of the options
"RTN","RORXU002",77,0)
 ;
"RTN","RORXU002",78,0)
OPTXT(OPTIONS,DLGNUM) ;
"RTN","RORXU002",79,0)
 N I,J,NS,RORBUF,TEXT,TMP
"RTN","RORXU002",80,0)
 S:$G(DLGNUM)'>0 DLGNUM=7980000.018
"RTN","RORXU002",81,0)
 D BLD^DIALOG(DLGNUM,,,"RORBUF")
"RTN","RORXU002",82,0)
 S TEXT="",I=0
"RTN","RORXU002",83,0)
 F  S I=$O(RORBUF(I))  Q:I=""  D:$E(RORBUF(I),1)'=" "
"RTN","RORXU002",84,0)
 . S NS=0
"RTN","RORXU002",85,0)
 . F J=1:1  S TMP=$TR($P(RORBUF(I),",",J)," ")  Q:TMP=""  D
"RTN","RORXU002",86,0)
 . . S:$D(OPTIONS(TMP)) NS=2**(J-1)+NS
"RTN","RORXU002",87,0)
 . Q:'NS
"RTN","RORXU002",88,0)
 . S TMP=$$TRIM^XLFSTR($G(RORBUF(I+NS)))
"RTN","RORXU002",89,0)
 . S:TMP'="" TEXT=TEXT_", "_TMP
"RTN","RORXU002",90,0)
 Q $P(TEXT,", ",2,999)
"RTN","RORXU002",91,0)
 ;
"RTN","RORXU002",92,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORXU002",93,0)
 ;
"RTN","RORXU002",94,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",95,0)
 ;
"RTN","RORXU002",96,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",97,0)
 ;
"RTN","RORXU002",98,0)
 ; .STDT         Start and end dates of the report
"RTN","RORXU002",99,0)
 ; .ENDT         are returned via these parameters
"RTN","RORXU002",100,0)
 ;
"RTN","RORXU002",101,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this
"RTN","RORXU002",102,0)
 ;               parameter. The "D" (skip deceased patients) and "G"
"RTN","RORXU002",103,0)
 ;               (skip pending patients) flags are always added.
"RTN","RORXU002",104,0)
 ;
"RTN","RORXU002",105,0)
 ; Return Values:
"RTN","RORXU002",106,0)
 ;       <0  Error code
"RTN","RORXU002",107,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORXU002",108,0)
 ;
"RTN","RORXU002",109,0)
PARAMS(RORTSK,PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORXU002",110,0)
 N BUF,ELEMENT,I,LTAG,MODE,NAME,PARAMS,RC,REGIEN,RORMSG,TMP
"RTN","RORXU002",111,0)
 S PARAMS=$$ADDVAL^RORTSK11(RORTSK,"PARAMETERS",,PARTAG)
"RTN","RORXU002",112,0)
 S RC=0,(ENDT,STDT)="",FLAGS=""
"RTN","RORXU002",113,0)
 ;
"RTN","RORXU002",114,0)
 ;=== Registry name
"RTN","RORXU002",115,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",116,0)
 I REGIEN>0  D  Q:RC<0 RC
"RTN","RORXU002",117,0)
 . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORXU002",118,0)
 . I TMP=""  S RC=-1  Q
"RTN","RORXU002",119,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,PARAMS)
"RTN","RORXU002",120,0)
 ;
"RTN","RORXU002",121,0)
 ;=== Alternate date ranges
"RTN","RORXU002",122,0)
 F I=2:1:3  D  Q:RC<0
"RTN","RORXU002",123,0)
 . S STDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"START")\1  Q:STDT'>0
"RTN","RORXU002",124,0)
 . S ENDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"END")\1    Q:ENDT'>0
"RTN","RORXU002",125,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE_"_I,,PARAMS)
"RTN","RORXU002",126,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",127,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",128,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",129,0)
 Q:RC<0 RC
"RTN","RORXU002",130,0)
 ;
"RTN","RORXU002",131,0)
 ;=== Main date range
"RTN","RORXU002",132,0)
 S STDT=$$PARAM^RORTSK01("DATE_RANGE","START")\1
"RTN","RORXU002",133,0)
 S ENDT=$$PARAM^RORTSK01("DATE_RANGE","END")\1
"RTN","RORXU002",134,0)
 I STDT>0,ENDT>0  D  Q:RC<0 RC
"RTN","RORXU002",135,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE",,PARAMS)
"RTN","RORXU002",136,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",137,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",138,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",139,0)
 E  S (ENDT,STDT)=""
"RTN","RORXU002",140,0)
 ;
"RTN","RORXU002",141,0)
 ;=== Task comment
"RTN","RORXU002",142,0)
 S TMP=$$PARAM^RORTSK01("TASK_COMMENT")
"RTN","RORXU002",143,0)
 D:TMP'="" ADDVAL^RORTSK11(RORTSK,"TASK_COMMENT",TMP,PARAMS)
"RTN","RORXU002",144,0)
 ;
"RTN","RORXU002",145,0)
 ;=== Patient selection and Options
"RTN","RORXU002",146,0)
 F NAME="PATIENTS","OPTIONS"  D  Q:RC<0
"RTN","RORXU002",147,0)
 . K BUF  M BUF=RORTSK("PARAMS",NAME,"A")  Q:$D(BUF)<10
"RTN","RORXU002",148,0)
 . ;--- Generate the XML tags
"RTN","RORXU002",149,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,NAME,$$OPTXT(.BUF),PARAMS)
"RTN","RORXU002",150,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORXU002",151,0)
 . S TMP=""
"RTN","RORXU002",152,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORXU002",153,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,"1")
"RTN","RORXU002",154,0)
 . ;--- Compile the flags
"RTN","RORXU002",155,0)
 . D:NAME="PATIENTS"
"RTN","RORXU002",156,0)
 . . S:'$D(BUF("DE_BEFORE")) FLAGS=FLAGS_"P"
"RTN","RORXU002",157,0)
 . . S:'$D(BUF("DE_DURING")) FLAGS=FLAGS_"N"
"RTN","RORXU002",158,0)
 . . S:'$D(BUF("DE_AFTER")) FLAGS=FLAGS_"F"
"RTN","RORXU002",159,0)
 Q:RC<0 RC
"RTN","RORXU002",160,0)
 ;
"RTN","RORXU002",161,0)
 ;=== Other Registries
"RTN","RORXU002",162,0)
 I $D(RORTSK("PARAMS","OTHER_REGISTRIES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",163,0)
 . N NODE,REGIEN
"RTN","RORXU002",164,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"OTHER_REGISTRIES",,PARAMS)
"RTN","RORXU002",165,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",166,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU002",167,0)
 . S REGIEN=0
"RTN","RORXU002",168,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","RORXU002",169,0)
 . . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U,2)
"RTN","RORXU002",170,0)
 . . S MODE=+$G(@NODE@(REGIEN))
"RTN","RORXU002",171,0)
 . . I 'MODE!(TMP="")  K @NODE@(REGIEN)  Q
"RTN","RORXU002",172,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",173,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,LTAG)
"RTN","RORXU002",174,0)
 . S FLAGS=FLAGS_"R"
"RTN","RORXU002",175,0)
 ;
"RTN","RORXU002",176,0)
 ;=== Local Fields
"RTN","RORXU002",177,0)
 I $D(RORTSK("PARAMS","LOCAL_FIELDS","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",178,0)
 . N NODE,IEN,IENS
"RTN","RORXU002",179,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOCAL_FIELDS",,PARAMS)
"RTN","RORXU002",180,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",181,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU002",182,0)
 . S IEN=0
"RTN","RORXU002",183,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORXU002",184,0)
 . . S TMP=$$GET1^DIQ(799.53,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",185,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,799.53,IEN_",")
"RTN","RORXU002",186,0)
 . . S MODE=+$G(@NODE@(IEN))
"RTN","RORXU002",187,0)
 . . I 'MODE!(TMP="")  K @NODE@(IEN)  Q
"RTN","RORXU002",188,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",189,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"FIELD",TMP,LTAG)
"RTN","RORXU002",190,0)
 . S FLAGS=FLAGS_"O"
"RTN","RORXU002",191,0)
 ;
"RTN","RORXU002",192,0)
 ;=== Lab test ranges
"RTN","RORXU002",193,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",194,0)
 . N GRC,NODE
"RTN","RORXU002",195,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORXU002",196,0)
 . S GRC=0
"RTN","RORXU002",197,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORXU002",198,0)
 . . S RC=$$ITEMIEN^RORUTL09(3,REGIEN,GRC,.TMP)
"RTN","RORXU002",199,0)
 . . S:RC'<0 @NODE@(GRC)=TMP
"RTN","RORXU002",200,0)
 ;
"RTN","RORXU002",201,0)
 ;=== Defaults
"RTN","RORXU002",202,0)
 S TMP=$TR(FLAGS,"FNP")  S:$L(FLAGS)-$L(TMP)=3 FLAGS=TMP
"RTN","RORXU002",203,0)
 S FLAGS=FLAGS_"DG"
"RTN","RORXU002",204,0)
 ;
"RTN","RORXU002",205,0)
 ;=== Success
"RTN","RORXU002",206,0)
 Q PARAMS
"RTN","RORXU002",207,0)
 ;
"RTN","RORXU002",208,0)
 ;***** GENERATES TABLE DEFINITION
"RTN","RORXU002",209,0)
 ;
"RTN","RORXU002",210,0)
 ; TBLREF        Reference to the definition table in the source
"RTN","RORXU002",211,0)
 ;               code (TAG^ROUTINE). See the HEADER^RORX013 for
"RTN","RORXU002",212,0)
 ;               examples of table definitions.
"RTN","RORXU002",213,0)
 ;
"RTN","RORXU002",214,0)
 ; HEADER        IEN of the HEADER element
"RTN","RORXU002",215,0)
 ;
"RTN","RORXU002",216,0)
 ; Return Values:
"RTN","RORXU002",217,0)
 ;       <0  Error code
"RTN","RORXU002",218,0)
 ;        0  Ok
"RTN","RORXU002",219,0)
 ;
"RTN","RORXU002",220,0)
TBLDEF(TBLREF,HEADER) ;
"RTN","RORXU002",221,0)
 N COND,IT,NAME,RC,RORSRC,TBLDEF,TERM,TGET
"RTN","RORXU002",222,0)
 S TGET="S RORSRC=$T("_$P(TBLREF,"^")_"+IT^"_$P(TBLREF,"^",2)_")"
"RTN","RORXU002",223,0)
 S RC=0
"RTN","RORXU002",224,0)
 F IT=1:1  X TGET  S RORSRC=$P(RORSRC,";;",2)  Q:RORSRC=""  D  Q:RC<0
"RTN","RORXU002",225,0)
 . S COND=$$TRIM^XLFSTR($P(RORSRC,U,2,999))
"RTN","RORXU002",226,0)
 . I COND'=""  X COND  E  Q
"RTN","RORXU002",227,0)
 . S RORSRC=$$TRIM^XLFSTR($P(RORSRC,U))
"RTN","RORXU002",228,0)
 . S NAME=$$COLSCAN(.TERM)  Q:(NAME="")!(TERM'="(")
"RTN","RORXU002",229,0)
 . S TBLDEF=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORXU002",230,0)
 . I TBLDEF<0  S RC=TBLDEF  Q
"RTN","RORXU002",231,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"NAME",NAME)
"RTN","RORXU002",232,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"HEADER","1")
"RTN","RORXU002",233,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"FOOTER","1")
"RTN","RORXU002",234,0)
 . D TBLDEF1(TBLDEF)
"RTN","RORXU002",235,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORXU002",236,0)
 ;
"RTN","RORXU002",237,0)
 ;***** GENERATES <COLUMN> ELEMENTS FROM TABLE DEFINITION (RORSRC)
"RTN","RORXU002",238,0)
 ;
"RTN","RORXU002",239,0)
 ; PTAG          IEN of the parent element
"RTN","RORXU002",240,0)
 ;
"RTN","RORXU002",241,0)
TBLDEF1(PTAG) ;
"RTN","RORXU002",242,0)
 N COLUMN,NAME,TERM
"RTN","RORXU002",243,0)
 F  S NAME=$$COLSCAN(.TERM)  Q:NAME=""  D  Q:")"[TERM
"RTN","RORXU002",244,0)
 . S COLUMN=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,PTAG)
"RTN","RORXU002",245,0)
 . D ADDATTR^RORTSK11(RORTSK,COLUMN,"NAME",NAME)
"RTN","RORXU002",246,0)
 . D:TERM="(" TBLDEF1(COLUMN)
"RTN","RORXU002",247,0)
 Q
"RTN","RORXU003")
0^47^B50580247^B49999822
"RTN","RORXU003",1,0)
RORXU003 ;HCIOFO/BH,SG - REPORT BUILDER UTILITIES ; 7/19/06 12:34pm
"RTN","RORXU003",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORXU003",3,0)
 ;
"RTN","RORXU003",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU003",5,0)
 ;
"RTN","RORXU003",6,0)
 ; #1894         ENCEVENT^PXKENC (controlled)
"RTN","RORXU003",7,0)
 ;
"RTN","RORXU003",8,0)
 Q
"RTN","RORXU003",9,0)
 ;
"RTN","RORXU003",10,0)
 ;***** SEARCHES FOR UTLIZATION
"RTN","RORXU003",11,0)
 ;
"RTN","RORXU003",12,0)
 ; STDT          Start date for search (FileMan)
"RTN","RORXU003",13,0)
 ; ENDT          End date for search   (FileMan)
"RTN","RORXU003",14,0)
 ;
"RTN","RORXU003",15,0)
 ; RORDFN        Patient IEN in the PATIENT file (#2)
"RTN","RORXU003",16,0)
 ;
"RTN","RORXU003",17,0)
 ; CHK           Reference to a local array that identifies the
"RTN","RORXU003",18,0)
 ;               packages files that need to be checked i.e. CHK("O"):
"RTN","RORXU003",19,0)
 ;                 A   Allergy
"RTN","RORXU003",20,0)
 ;                 C   Cytopathology
"RTN","RORXU003",21,0)
 ;                 I   Inpatients
"RTN","RORXU003",22,0)
 ;                 IP  Inpatient Pharmacy
"RTN","RORXU003",23,0)
 ;                 IV  IV Medications
"RTN","RORXU003",24,0)
 ;                 L   Laboratory
"RTN","RORXU003",25,0)
 ;                 M   Microbiology
"RTN","RORXU003",26,0)
 ;                 O   Outpatient
"RTN","RORXU003",27,0)
 ;                 OP  Outpatient Pharmacy
"RTN","RORXU003",28,0)
 ;                 R   Radiology
"RTN","RORXU003",29,0)
 ;                 SP  Surgical Pathology
"RTN","RORXU003",30,0)
 ;
"RTN","RORXU003",31,0)
 ;               If set to "ALL", Outpatients, Inpatients, Radiology,
"RTN","RORXU003",32,0)
 ;               Allergy, Pharmacy, Microbiology, Surgical Pathology,
"RTN","RORXU003",33,0)
 ;               Cytopathology, and Lab data will be checked.
"RTN","RORXU003",34,0)
 ;
"RTN","RORXU003",35,0)
 ; Return Values:
"RTN","RORXU003",36,0)
 ;       0  No utilization has been found
"RTN","RORXU003",37,0)
 ;       1  The patient has had utilization. The subsequent "^"-pieces
"RTN","RORXU003",38,0)
 ;          will indicate the utilization areas (the same codes as
"RTN","RORXU003",39,0)
 ;          those for the CHK parameter)
"RTN","RORXU003",40,0)
 ;
"RTN","RORXU003",41,0)
 ;          For example, if a patient had utilization for Inpatients, 
"RTN","RORXU003",42,0)
 ;          Outpatient, Pharmacy, and Lab the string would look as
"RTN","RORXU003",43,0)
 ;          follows: 1^O^I^OP^L
"RTN","RORXU003",44,0)
 ;
"RTN","RORXU003",45,0)
UTIL(STDT,ENDT,RORDFN,CHK) ;
"RTN","RORXU003",46,0)
 N IEN,LRDFN,RES,RORMSG,RORVAL
"RTN","RORXU003",47,0)
 S RORVAL=""
"RTN","RORXU003",48,0)
 ;
"RTN","RORXU003",49,0)
 ;--- Outpatient data
"RTN","RORXU003",50,0)
 I $D(CHK("ALL"))!$D(CHK("O")) D
"RTN","RORXU003",51,0)
 . S RES=$$OUTPAT(STDT,ENDT,RORDFN)
"RTN","RORXU003",52,0)
 . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",53,0)
 ;
"RTN","RORXU003",54,0)
 ;--- Inpatient data
"RTN","RORXU003",55,0)
 I $D(CHK("ALL"))!$D(CHK("I")) D
"RTN","RORXU003",56,0)
 . S RES=$$INPAT(STDT,ENDT,RORDFN)
"RTN","RORXU003",57,0)
 . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",58,0)
 ;
"RTN","RORXU003",59,0)
 ;--- Radiology data
"RTN","RORXU003",60,0)
 I $D(CHK("ALL"))!$D(CHK("R")) D
"RTN","RORXU003",61,0)
 . S RES=$$RAD(STDT,ENDT,RORDFN)
"RTN","RORXU003",62,0)
 . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",63,0)
 ;
"RTN","RORXU003",64,0)
 ;--- Allergy data
"RTN","RORXU003",65,0)
 I $D(CHK("ALL"))!$D(CHK("A")) D
"RTN","RORXU003",66,0)
 . S RES=$$ALLERGY(STDT,ENDT,RORDFN)
"RTN","RORXU003",67,0)
 . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",68,0)
 ;
"RTN","RORXU003",69,0)
 ;--- Pharmacy data
"RTN","RORXU003",70,0)
 I $D(CHK("ALL"))!$D(CHK("IP"))!$D(CHK("OP"))!$D(CHK("IV")) D
"RTN","RORXU003",71,0)
 . S RES=$$PHARM(STDT,ENDT,RORDFN,.CHK)
"RTN","RORXU003",72,0)
 . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",73,0)
 ;
"RTN","RORXU003",74,0)
 S LRDFN=+$$LABREF^RORUTL18(RORDFN)
"RTN","RORXU003",75,0)
 ;
"RTN","RORXU003",76,0)
 I LRDFN>0  D
"RTN","RORXU003",77,0)
 . ;--- Microbiology
"RTN","RORXU003",78,0)
 . I $D(CHK("ALL"))!$D(CHK("M")) D
"RTN","RORXU003",79,0)
 . . S RES=$$MICRO(STDT,ENDT,LRDFN)
"RTN","RORXU003",80,0)
 . . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",81,0)
 . ;--- Surgical Pathology
"RTN","RORXU003",82,0)
 . I $D(CHK("ALL"))!$D(CHK("SP")) D
"RTN","RORXU003",83,0)
 . . S RES=$$SURGP(STDT,ENDT,LRDFN)
"RTN","RORXU003",84,0)
 . . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",85,0)
 . ;--- Cytopathology
"RTN","RORXU003",86,0)
 . I $D(CHK("ALL"))!$D(CHK("C")) D
"RTN","RORXU003",87,0)
 . . S RES=$$CYTO(STDT,ENDT,LRDFN)
"RTN","RORXU003",88,0)
 . . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",89,0)
 ;
"RTN","RORXU003",90,0)
 ;--- Lab data
"RTN","RORXU003",91,0)
 I $D(CHK("ALL"))!$D(CHK("L")) D
"RTN","RORXU003",92,0)
 . S RES=$$LAB(STDT,ENDT,RORDFN)
"RTN","RORXU003",93,0)
 . S:RES RORVAL=RORVAL_U_$P(RES,U,2,999)
"RTN","RORXU003",94,0)
 ;
"RTN","RORXU003",95,0)
 S $P(RORVAL,U)=(RORVAL'="")
"RTN","RORXU003",96,0)
 Q RORVAL
"RTN","RORXU003",97,0)
 ;
"RTN","RORXU003",98,0)
 ;***** CHECKS ALLERGY DATA
"RTN","RORXU003",99,0)
ALLERGY(STDT,ENDT,RORDFN) ;
"RTN","RORXU003",100,0)
 N DTE,IEN,RC
"RTN","RORXU003",101,0)
 S RC=0
"RTN","RORXU003",102,0)
 S DTE=$O(^GMR(120.8,"AODT",STDT),-1)
"RTN","RORXU003",103,0)
 S ENDT=ENDT_".999999"
"RTN","RORXU003",104,0)
 F  S DTE=$O(^GMR(120.8,"AODT",DTE))  Q:'DTE!(DTE'<ENDT)  D  Q:RC
"RTN","RORXU003",105,0)
 . S IEN=0
"RTN","RORXU003",106,0)
 . F  S IEN=$O(^GMR(120.8,"AODT",DTE,IEN))  Q:'IEN  D  Q:RC
"RTN","RORXU003",107,0)
 . . S:$D(^GMR(120.8,"B",RORDFN,IEN)) RC="1^A"
"RTN","RORXU003",108,0)
 Q RC
"RTN","RORXU003",109,0)
 ;
"RTN","RORXU003",110,0)
 ;***** CHECKS CYTOPATHOLOGY DATA
"RTN","RORXU003",111,0)
CYTO(STDT,ENDT,LRDFN) ;
"RTN","RORXU003",112,0)
 N IDT
"RTN","RORXU003",113,0)
 S IDT=$O(^LR(LRDFN,"CY",9999999-STDT))
"RTN","RORXU003",114,0)
 S IDT=$O(^LR(LRDFN,"CY",IDT),-1)
"RTN","RORXU003",115,0)
 Q $S(IDT&(IDT>(9999999-ENDT)):"1^C",1:0)
"RTN","RORXU003",116,0)
 ;
"RTN","RORXU003",117,0)
 ;***** CHECKS INPATIENT DATA
"RTN","RORXU003",118,0)
INPAT(STDT,ENDT,DFN) ;
"RTN","RORXU003",119,0)
 N ADMDT,DATE,DISDT,IEN,QUIT,RC,VAIP
"RTN","RORXU003",120,0)
 S STDT=STDT\1
"RTN","RORXU003",121,0)
 ;--- Check for an admission date inside the time frame
"RTN","RORXU003",122,0)
 S QUIT=0,DATE=(ENDT\1)_".999999"
"RTN","RORXU003",123,0)
 F  S DATE=$O(^DGPT("AAD",DFN,DATE),-1)  Q:'DATE!(DATE<STDT)  D  Q:QUIT
"RTN","RORXU003",124,0)
 . S IEN=""
"RTN","RORXU003",125,0)
 . F  S IEN=$O(^DGPT("AAD",DFN,DATE,IEN),-1)  Q:'IEN  D  Q:QUIT
"RTN","RORXU003",126,0)
 . . S:'$$PTF^RORXU001(IEN,"FP") QUIT=1
"RTN","RORXU003",127,0)
 Q:QUIT=1 "1^I"
"RTN","RORXU003",128,0)
 ;--- Check for an earlier admission that overlaps the date range
"RTN","RORXU003",129,0)
 S QUIT=0,VAIP("D")=STDT
"RTN","RORXU003",130,0)
 F  D  Q:QUIT
"RTN","RORXU003",131,0)
 . D IN5^VADPT
"RTN","RORXU003",132,0)
 . S VAIP("D")=+$G(VAIP(13,1))
"RTN","RORXU003",133,0)
 . I VAIP("D")'>0  S QUIT=2  Q
"RTN","RORXU003",134,0)
 . S VAIP("D")=$$FMADD^XLFDT(VAIP("D"),,,,-1)
"RTN","RORXU003",135,0)
 . S IEN=+$G(VAIP(12))  Q:IEN'>0
"RTN","RORXU003",136,0)
 . S RC=$$PTF^RORXU001(IEN,"FP",,.DISDT)
"RTN","RORXU003",137,0)
 . S QUIT=$S(RC:0,$G(DISDT)'>0:1,DISDT>STDT:1,1:2)
"RTN","RORXU003",138,0)
 Q $S(QUIT=1:"1^I",1:0)
"RTN","RORXU003",139,0)
 ;
"RTN","RORXU003",140,0)
 ;***** CHECKS LAB DATA
"RTN","RORXU003",141,0)
LAB(STDT,ENDT,RORDFN) ;
"RTN","RORXU003",142,0)
 N PTID,RC,RORMSG,RORTMP
"RTN","RORXU003",143,0)
 S PTID=$$PTID^RORUTL02(RORDFN)  Q:PTID<0 0
"RTN","RORXU003",144,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORXU003",145,0)
 ;--- Get the Lab data
"RTN","RORXU003",146,0)
 S ENDT=(ENDT\1+1)_"^CD",STDT=STDT_"^CD"
"RTN","RORXU003",147,0)
 S RC=$$GCPR^LA7QRY(PTID,STDT,ENDT,"CH","*",.RORMSG,RORTMP)
"RTN","RORXU003",148,0)
 S RC=$S(($D(RORMSG)>1)&(RC=""):0,$D(@RORTMP)>1:"1^L",1:0)
"RTN","RORXU003",149,0)
 ;--- Cleanup
"RTN","RORXU003",150,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORXU003",151,0)
 Q RC
"RTN","RORXU003",152,0)
 ;
"RTN","RORXU003",153,0)
 ;***** CHECKS MICROBIOLOGY DATA
"RTN","RORXU003",154,0)
MICRO(STDT,ENDT,LRDFN) ;
"RTN","RORXU003",155,0)
 N RC,RORTMP
"RTN","RORXU003",156,0)
 S RC=0,RORTMP=$$ALLOC^RORTMP()
"RTN","RORXU003",157,0)
 D:$$GETDATA^LA7UTL1A(LRDFN,STDT,ENDT,"CD",RORTMP)'<0
"RTN","RORXU003",158,0)
 . S:$D(@RORTMP@(LRDFN)) RC="1^M"
"RTN","RORXU003",159,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORXU003",160,0)
 Q RC
"RTN","RORXU003",161,0)
 ;
"RTN","RORXU003",162,0)
 ;***** CHECKS OUTPATIENT DATA
"RTN","RORXU003",163,0)
OUTPAT(STDT,ENDT,RORDFN) ;
"RTN","RORXU003",164,0)
 S STDT=$P(STDT,".",1),STDT=STDT-1,STDT=STDT+.9999
"RTN","RORXU003",165,0)
 S ENDT=$P(ENDT,".",1),ENDT=ENDT+1
"RTN","RORXU003",166,0)
 N QUERY,RORDST,RORECNT
"RTN","RORXU003",167,0)
 S RORECNT=0
"RTN","RORXU003",168,0)
 S RORDST=$NA(^TMP("RORXU003",$J,"OUT"))
"RTN","RORXU003",169,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORXU003",170,0)
 D INDEX^SDQ(.QUERY,"PATIENT/DATE","SET")
"RTN","RORXU003",171,0)
 D PAT^SDQ(.QUERY,RORDFN,"SET")
"RTN","RORXU003",172,0)
 D DATE^SDQ(.QUERY,STDT,ENDT,"SET")
"RTN","RORXU003",173,0)
 D SCANCB^SDQ(.QUERY,"D SCAN^RORXU003()","SET")
"RTN","RORXU003",174,0)
 D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORXU003",175,0)
 D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORXU003",176,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORXU003",177,0)
 Q $S(RORECNT:"1^O",1:0)
"RTN","RORXU003",178,0)
 ;
"RTN","RORXU003",179,0)
 ;***** CHECKS PHARMACY DATA
"RTN","RORXU003",180,0)
PHARM(STDT,ENDT,RORDFN,CHK) ;
"RTN","RORXU003",181,0)
 N BUF,II,IP,IV,OP,ORD,RC,RORLST,SKIP,TMP,TYPE
"RTN","RORXU003",182,0)
 S ENDT=$$FMADD^XLFDT(ENDT\1,1)
"RTN","RORXU003",183,0)
 I '$D(CHK("ALL"))  D
"RTN","RORXU003",184,0)
 . S IP='$D(CHK("IP"))
"RTN","RORXU003",185,0)
 . S IV='$D(CHK("IV"))
"RTN","RORXU003",186,0)
 . S OP='$D(CHK("OP"))
"RTN","RORXU003",187,0)
 E  S (OP,IP,IV)=0
"RTN","RORXU003",188,0)
 ;=== Get the list of orders
"RTN","RORXU003",189,0)
 K ^TMP("PS",$J)
"RTN","RORXU003",190,0)
 D OCL^PSOORRL(RORDFN,STDT,ENDT)
"RTN","RORXU003",191,0)
 Q:$D(^TMP("PS",$J))<10 0
"RTN","RORXU003",192,0)
 S RORLST=$$ALLOC^RORTMP()
"RTN","RORXU003",193,0)
 ;=== Preselect the orders
"RTN","RORXU003",194,0)
 S II=0
"RTN","RORXU003",195,0)
 F  S II=$O(^TMP("PS",$J,II))  Q:'II  D
"RTN","RORXU003",196,0)
 . S BUF=$G(^TMP("PS",$J,II,0)),ORD=$P(BUF,U)  Q:ORD'>0
"RTN","RORXU003",197,0)
 . S TMP=$L(ORD),TYPE=$E(ORD,TMP-2,TMP)
"RTN","RORXU003",198,0)
 . S TYPE=$S(TYPE="R;O":"R",TYPE="U;I":"U",TYPE="V;I":"V",1:"")
"RTN","RORXU003",199,0)
 . ;--- Check if this kind of orders should be processed
"RTN","RORXU003",200,0)
 . Q:$S(TYPE="R":OP,TYPE="U":IP,TYPE="V":IV,1:1)
"RTN","RORXU003",201,0)
 . ;--- Check the dates
"RTN","RORXU003",202,0)
 . I "UV"[TYPE  S TMP=$P(BUF,U,15)  Q:(TMP<STDT)!(TMP'<ENDT)
"RTN","RORXU003",203,0)
 . I TYPE="R"   S TMP=$P(BUF,U,10)  Q:TMP<STDT
"RTN","RORXU003",204,0)
 . ;--- Add the order to the list
"RTN","RORXU003",205,0)
 . S @RORLST@(II)=TYPE,@RORLST@(II,0)=BUF
"RTN","RORXU003",206,0)
 ;=== Process the preselected orders
"RTN","RORXU003",207,0)
 S II=0,RC=""
"RTN","RORXU003",208,0)
 F  S II=$O(@RORLST@(II))  Q:'II  D  Q:OP&IP&IV
"RTN","RORXU003",209,0)
 . S TYPE=@RORLST@(II),ORD=$P(@RORLST@(II,0),U)
"RTN","RORXU003",210,0)
 . ;--- Outpatient
"RTN","RORXU003",211,0)
 . I TYPE="R"  Q:OP  D  S:'SKIP OP=1,RC=RC_U_"OP"  Q
"RTN","RORXU003",212,0)
 . . ;--- Double-check the Rx date(s)
"RTN","RORXU003",213,0)
 . . K ^TMP("PS",$J)
"RTN","RORXU003",214,0)
 . . D OEL^PSOORRL(RORDFN,ORD)
"RTN","RORXU003",215,0)
 . . I $D(^TMP("PS",$J))<10  S SKIP=1  Q
"RTN","RORXU003",216,0)
 . . S SKIP=$$DTCHECK^RORUTL15(STDT,ENDT)
"RTN","RORXU003",217,0)
 . ;--- Inpatient
"RTN","RORXU003",218,0)
 . I TYPE="U"  Q:IP  S IP=1,RC=RC_U_"IP"  Q
"RTN","RORXU003",219,0)
 . ;--- IV
"RTN","RORXU003",220,0)
 . I TYPE="V"  Q:IV  S IV=1,RC=RC_U_"IV"  Q
"RTN","RORXU003",221,0)
 ;===
"RTN","RORXU003",222,0)
 D FREE^RORTMP(RORLST)
"RTN","RORXU003",223,0)
 K ^TMP("PS",$J)
"RTN","RORXU003",224,0)
 S $P(RC,U)=(RC'="")
"RTN","RORXU003",225,0)
 Q RC
"RTN","RORXU003",226,0)
 ;
"RTN","RORXU003",227,0)
 ;***** CHECKS RADIOLOGY DATA
"RTN","RORXU003",228,0)
RAD(STDT,ENDT,RORDFN) ;
"RTN","RORXU003",229,0)
 N RC
"RTN","RORXU003",230,0)
 K ^TMP($J,"RAE1")
"RTN","RORXU003",231,0)
 D EN1^RAO7PC1(RORDFN,STDT,ENDT,999999999)
"RTN","RORXU003",232,0)
 S RC=$S($D(^TMP($J,"RAE1",RORDFN))>1:"1^R",1:0)
"RTN","RORXU003",233,0)
 K ^TMP($J,"RAE1")
"RTN","RORXU003",234,0)
 Q RC
"RTN","RORXU003",235,0)
 ;
"RTN","RORXU003",236,0)
 ;*****
"RTN","RORXU003",237,0)
SCAN() ;
"RTN","RORXU003",238,0)
 S RORECNT=1
"RTN","RORXU003",239,0)
 Q
"RTN","RORXU003",240,0)
 ;
"RTN","RORXU003",241,0)
 ;***** CHECKS SURGICAL PATHOLOGY DATA
"RTN","RORXU003",242,0)
SURGP(STDT,ENDT,LRDFN) ;
"RTN","RORXU003",243,0)
 N IDT
"RTN","RORXU003",244,0)
 S IDT=$O(^LR(LRDFN,"SP",9999999-STDT))
"RTN","RORXU003",245,0)
 S IDT=$O(^LR(LRDFN,"SP",IDT),-1)
"RTN","RORXU003",246,0)
 Q $S(IDT&(IDT>(9999999-ENDT)):"1^SP",1:0)
"RTN","RORXU005")
0^23^B18041693^B16280481
"RTN","RORXU005",1,0)
RORXU005 ;HCIOFO/SG - REPORT BUILDER UTILITIES ; 5/17/06 1:45pm
"RTN","RORXU005",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORXU005",3,0)
 ;
"RTN","RORXU005",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU005",5,0)
 ;
"RTN","RORXU005",6,0)
 ; #10035        Direct read of the DOD field of the file #2
"RTN","RORXU005",7,0)
 ;
"RTN","RORXU005",8,0)
 Q
"RTN","RORXU005",9,0)
 ;
"RTN","RORXU005",10,0)
 ;***** CALLBACK FUNCTION FOR DRUG SEARCH API
"RTN","RORXU005",11,0)
REIMBCB(RORDST,ORDER,FLAGS,DRUG,DATE) ;
"RTN","RORXU005",12,0)
 S RORDST=1
"RTN","RORXU005",13,0)
 Q 2
"RTN","RORXU005",14,0)
 ;
"RTN","RORXU005",15,0)
 ;***** RETURNS THE REIMBURSEMENT LEVEL FOR THE PATIENT
"RTN","RORXU005",16,0)
 ;
"RTN","RORXU005",17,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",18,0)
 ;
"RTN","RORXU005",19,0)
 ; ROR8DRGS      Either closed root of the ARV drug list prepared by
"RTN","RORXU005",20,0)
 ;               the $$DRUGLIST^RORUTL16 or the Registry IEN. In the
"RTN","RORXU005",21,0)
 ;               latter case, the list will be compiled automatically.
"RTN","RORXU005",22,0)
 ;
"RTN","RORXU005",23,0)
 ; STDT          Start date
"RTN","RORXU005",24,0)
 ; ENDT          End date
"RTN","RORXU005",25,0)
 ;
"RTN","RORXU005",26,0)
 ; Return Values:
"RTN","RORXU005",27,0)
 ;       <0  Error code
"RTN","RORXU005",28,0)
 ;        0  Neither Clinical AIDS nor ARV drugs
"RTN","RORXU005",29,0)
 ;       10  ARV drugs
"RTN","RORXU005",30,0)
 ;       20  Clinical AIDS
"RTN","RORXU005",31,0)
 ;       30  Both Clinical AIDS and ARV drugs
"RTN","RORXU005",32,0)
 ;
"RTN","RORXU005",33,0)
REIMBLVL(RORIEN,ROR8DRGS,STDT,ENDT) ;
"RTN","RORXU005",34,0)
 N PATIEN,RC,RLVL,RORDST
"RTN","RORXU005",35,0)
 S RLVL=0
"RTN","RORXU005",36,0)
 ;--- Clinical AIDS
"RTN","RORXU005",37,0)
 S:$$CLINAIDS^RORHIVUT(+RORIEN,ENDT) RLVL=RLVL+20
"RTN","RORXU005",38,0)
 ;--- ARV Drugs
"RTN","RORXU005",39,0)
 S PATIEN=$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",40,0)
 S RORDST("RORCB")="$$REIMBCB^RORXU005"
"RTN","RORXU005",41,0)
 S RC=$$RXSEARCH^RORUTL14(PATIEN,ROR8DRGS,.RORDST,"IOV",STDT,ENDT)
"RTN","RORXU005",42,0)
 S:$G(RORDST)>0 RLVL=RLVL+10
"RTN","RORXU005",43,0)
 ;--- Reimbursement level
"RTN","RORXU005",44,0)
 Q $S(RC<0:RC,1:RLVL)
"RTN","RORXU005",45,0)
 ;
"RTN","RORXU005",46,0)
 ;***** RETURNS THE PATIENT'S LIST OF RISK FACTORS
"RTN","RORXU005",47,0)
 ;
"RTN","RORXU005",48,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",49,0)
 ;
"RTN","RORXU005",50,0)
 ; Return Values:
"RTN","RORXU005",51,0)
 ;       <0  Error code
"RTN","RORXU005",52,0)
 ;       ""  No risk factors have been found
"RTN","RORXU005",53,0)
 ;  " ... "  A string containing the risk factor numbers
"RTN","RORXU005",54,0)
 ;           separated by commas and spaces
"RTN","RORXU005",55,0)
 ;
"RTN","RORXU005",56,0)
RISKS(RORIEN) ;
"RTN","RORXU005",57,0)
 Q:'$D(^RORDATA(799.4,+RORIEN,0)) ""
"RTN","RORXU005",58,0)
 N FLD,FLDLST,I,RISKLST,RORBUF,RORMSG
"RTN","RORXU005",59,0)
 S FLDLST="14.01;14.02;14.03;14.04;14.08;14.07;14.09;14.1;14.11;14.12;14.13;14.16;14.17"
"RTN","RORXU005",60,0)
 ;--- Load the risk fields
"RTN","RORXU005",61,0)
 S IENS=(+RORIEN)_","
"RTN","RORXU005",62,0)
 D GETS^DIQ(799.4,IENS,FLDLST,"I","RORBUF","RORMSG")
"RTN","RORXU005",63,0)
 Q:$G(DIERR) $$DBS^RORERR(799.4,-9,,,799.4,IENS)
"RTN","RORXU005",64,0)
 ;--- Process the data
"RTN","RORXU005",65,0)
 S RISKLST=""
"RTN","RORXU005",66,0)
 F I=1:1  S FLD=$P(FLDLST,";",I)  Q:FLD=""  D:FLD>0
"RTN","RORXU005",67,0)
 . S:$G(RORBUF(799.4,IENS,FLD,"I"))=1 RISKLST=RISKLST_", "_I
"RTN","RORXU005",68,0)
 Q $P(RISKLST,", ",2,999)
"RTN","RORXU005",69,0)
 ;
"RTN","RORXU005",70,0)
 ;***** DETERMINES IF THE PATIENT SHOULD NOT BE INCLUDED IN THE REPORT
"RTN","RORXU005",71,0)
 ;
"RTN","RORXU005",72,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",73,0)
 ;
"RTN","RORXU005",74,0)
 ; FLAGS         Flags that control the execution (can be combined)
"RTN","RORXU005",75,0)
 ;
"RTN","RORXU005",76,0)
 ;                 C  Skip confirmed patients
"RTN","RORXU005",77,0)
 ;                 G  Skip pending patients
"RTN","RORXU005",78,0)
 ;
"RTN","RORXU005",79,0)
 ;                 D  Skip deceased patients
"RTN","RORXU005",80,0)
 ;                 L  Skip alive patients
"RTN","RORXU005",81,0)
 ;
"RTN","RORXU005",82,0)
 ;                 P  Skip patients confirmed before the start date
"RTN","RORXU005",83,0)
 ;                 N  Skip patients confirmed during the report
"RTN","RORXU005",84,0)
 ;                    time frame
"RTN","RORXU005",85,0)
 ;                 F  Skip patients added after the end date
"RTN","RORXU005",86,0)
 ;
"RTN","RORXU005",87,0)
 ;                 O  Process LOCAL_FIELDS
"RTN","RORXU005",88,0)
 ;                 R  Process OTHER_REGISTRIES
"RTN","RORXU005",89,0)
 ;
"RTN","RORXU005",90,0)
 ; [STDT]        Start date of the report (FileMan).
"RTN","RORXU005",91,0)
 ;               Time is ignored and the beginning of the day is
"RTN","RORXU005",92,0)
 ;               considered as the boundary (STDT\1).
"RTN","RORXU005",93,0)
 ;
"RTN","RORXU005",94,0)
 ;               If not defined or not greater than 0 then 0 is used.
"RTN","RORXU005",95,0)
 ;
"RTN","RORXU005",96,0)
 ; [ENDT]        End date of the report (FileMan).
"RTN","RORXU005",97,0)
 ;               Time is ignored and the end of the day is
"RTN","RORXU005",98,0)
 ;               considered as the boundary (ENDT\1+1).
"RTN","RORXU005",99,0)
 ;
"RTN","RORXU005",100,0)
 ;               If not defined or not greater than 0 then 9999999
"RTN","RORXU005",101,0)
 ;               is used.
"RTN","RORXU005",102,0)
 ;
"RTN","RORXU005",103,0)
 ; Return Values:
"RTN","RORXU005",104,0)
 ;        0  Include the patient's data in the report
"RTN","RORXU005",105,0)
 ;        1  Skip the patient
"RTN","RORXU005",106,0)
 ;
"RTN","RORXU005",107,0)
SKIP(RORIEN,FLAGS,STDT,ENDT) ;
"RTN","RORXU005",108,0)
 N DOD,IEN,MODE,NODE,PTIEN,REGIEN,SKIP,STATUS,TMP
"RTN","RORXU005",109,0)
 S SKIP=0
"RTN","RORXU005",110,0)
 ;--- Always skip patients marked for deletion
"RTN","RORXU005",111,0)
 Q:$$SKIPNA(RORIEN,FLAGS,.STATUS) 1
"RTN","RORXU005",112,0)
 ;---Include all registry patients if flags are not provided
"RTN","RORXU005",113,0)
 Q:FLAGS="" 0
"RTN","RORXU005",114,0)
 ;
"RTN","RORXU005",115,0)
 ;--- Confirmed
"RTN","RORXU005",116,0)
 I FLAGS["C"  Q:STATUS'=4 1
"RTN","RORXU005",117,0)
 ;
"RTN","RORXU005",118,0)
 ;--- Alive/Deceased patients
"RTN","RORXU005",119,0)
 S STDT=$S($G(STDT)>0:STDT\1,1:0)
"RTN","RORXU005",120,0)
 I $TR(FLAGS,"LD")'=FLAGS  D  Q:$S(TMP:FLAGS["L",1:FLAGS["D") 1
"RTN","RORXU005",121,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",122,0)
 . S DOD=+$P($G(^DPT(PTIEN,.35)),U)
"RTN","RORXU005",123,0)
 . S TMP=$S(DOD>0:DOD'<STDT,1:1)
"RTN","RORXU005",124,0)
 ;
"RTN","RORXU005",125,0)
 ;--- Confirmed before/during/after the date range
"RTN","RORXU005",126,0)
 S ENDT=$S($G(ENDT)>0:ENDT\1,1:9999999)+1
"RTN","RORXU005",127,0)
 I $TR(FLAGS,"PNF")'=FLAGS  D  Q:TMP 1
"RTN","RORXU005",128,0)
 . S TMP=+$$CONFDT^RORUTL18(RORIEN)  ; Date Confirmed
"RTN","RORXU005",129,0)
 . S TMP=$S(TMP<STDT:FLAGS["P",TMP>ENDT:FLAGS["F",1:FLAGS["N")
"RTN","RORXU005",130,0)
 ;
"RTN","RORXU005",131,0)
 ;--- Other registries
"RTN","RORXU005",132,0)
 I FLAGS["R"  D  Q:SKIP 1
"RTN","RORXU005",133,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU005",134,0)
 . Q:$D(@NODE)<10
"RTN","RORXU005",135,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",136,0)
 . S REGIEN=0
"RTN","RORXU005",137,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:SKIP
"RTN","RORXU005",138,0)
 . . S MODE=+$G(@NODE@(REGIEN))  Q:'MODE
"RTN","RORXU005",139,0)
 . . S IEN=$$PRRIEN^RORUTL01(PTIEN,REGIEN)
"RTN","RORXU005",140,0)
 . . I IEN'>0  S SKIP=1
"RTN","RORXU005",141,0)
 . . E  S:$$SKIPNA(IEN,FLAGS) SKIP=1
"RTN","RORXU005",142,0)
 . . S:MODE<0 SKIP='SKIP  ; Exclude
"RTN","RORXU005",143,0)
 ;
"RTN","RORXU005",144,0)
 ;--- Local Fields
"RTN","RORXU005",145,0)
 I FLAGS["O"  D  Q:SKIP 1
"RTN","RORXU005",146,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU005",147,0)
 . Q:$D(@NODE)<10
"RTN","RORXU005",148,0)
 . S IEN=0
"RTN","RORXU005",149,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:SKIP
"RTN","RORXU005",150,0)
 . . S MODE=+$G(@NODE@(IEN))  Q:'MODE
"RTN","RORXU005",151,0)
 . . S:'$D(^RORDATA(798,RORIEN,20,"B",IEN)) SKIP=1
"RTN","RORXU005",152,0)
 . . S:MODE<0 SKIP='SKIP  ; Exclude
"RTN","RORXU005",153,0)
 ;
"RTN","RORXU005",154,0)
 ;--- Include in the report
"RTN","RORXU005",155,0)
 Q 0
"RTN","RORXU005",156,0)
 ;
"RTN","RORXU005",157,0)
 ;***** CHECKS STATUS OF THE PATIENT'S REGISTRY RECORD (internal)
"RTN","RORXU005",158,0)
 ;
"RTN","RORXU005",159,0)
 ; IEN798        IEN of the patient's record in the registry
"RTN","RORXU005",160,0)
 ;
"RTN","RORXU005",161,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",162,0)
 ;
"RTN","RORXU005",163,0)
 ; [.STATUS]     Status code is returned via this parameter.
"RTN","RORXU005",164,0)
 ;
"RTN","RORXU005",165,0)
 ; Return Values:
"RTN","RORXU005",166,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",167,0)
 ;        1  Skip the patient
"RTN","RORXU005",168,0)
 ;
"RTN","RORXU005",169,0)
SKIPNA(IEN798,FLAGS,STATUS) ;
"RTN","RORXU005",170,0)
 Q:$$ACTIVE^RORDD(IEN798,,.STATUS) 0  ; Active patient
"RTN","RORXU005",171,0)
 Q:(STATUS=5)!(STATUS="") 1           ; Deleted patient
"RTN","RORXU005",172,0)
 Q:(STATUS=4)&(FLAGS["G") 1           ; Pending patient
"RTN","RORXU005",173,0)
 Q 0
"RTN","RORXU006")
0^7^B33479372^B40171673
"RTN","RORXU006",1,0)
RORXU006 ;HCIOFO/SG - REPORT PARAMETERS ; 6/21/06 1:41pm
"RTN","RORXU006",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORXU006",3,0)
 ;
"RTN","RORXU006",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU006",5,0)
 ;
"RTN","RORXU006",6,0)
 ; #91           Read access to the file #60 (controlled)
"RTN","RORXU006",7,0)
 ; #2438         The .01 field of file #40.8 (controlled)
"RTN","RORXU006",8,0)
 ; #2947         ATESTS^ORWLRR (controlled)
"RTN","RORXU006",9,0)
 ; #10035        Direct read of DOD field of file #2 (supported)
"RTN","RORXU006",10,0)
 ; #10040        Read access to HOSPITAL LOCATION file (suppotted)
"RTN","RORXU006",11,0)
 ;
"RTN","RORXU006",12,0)
 Q
"RTN","RORXU006",13,0)
 ;
"RTN","RORXU006",14,0)
 ;***** PROCESSES THE LIST OF CLINICS
"RTN","RORXU006",15,0)
 ;
"RTN","RORXU006",16,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",17,0)
 ;
"RTN","RORXU006",18,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",19,0)
 ;
"RTN","RORXU006",20,0)
 ; Return Values:
"RTN","RORXU006",21,0)
 ;       <0  Error code
"RTN","RORXU006",22,0)
 ;       >0  IEN of the CLINICS element
"RTN","RORXU006",23,0)
 ;
"RTN","RORXU006",24,0)
CLINLST(RORTSK,PARTAG) ;
"RTN","RORXU006",25,0)
 N IEN,LTAG,RORMSG,TMP
"RTN","RORXU006",26,0)
 I $D(RORTSK("PARAMS","CLINICS","C"))>1  D
"RTN","RORXU006",27,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",28,0)
 . S IEN=0
"RTN","RORXU006",29,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",30,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU006",31,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU006",32,0)
 . . Q:TMP=""
"RTN","RORXU006",33,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU006",34,0)
 E  D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU006",35,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARTAG)
"RTN","RORXU006",36,0)
 Q +$G(LTAG)
"RTN","RORXU006",37,0)
 ;
"RTN","RORXU006",38,0)
 ;***** PROCESSES THE LIST OF CPT CODES
"RTN","RORXU006",39,0)
 ;
"RTN","RORXU006",40,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",41,0)
 ;
"RTN","RORXU006",42,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",43,0)
 ;
"RTN","RORXU006",44,0)
 ; Return Values:
"RTN","RORXU006",45,0)
 ;       <0  Error code
"RTN","RORXU006",46,0)
 ;       >0  IEN of the CPTLST element
"RTN","RORXU006",47,0)
 ;
"RTN","RORXU006",48,0)
CPTLST(RORTSK,PARTAG) ;
"RTN","RORXU006",49,0)
 N CPT,IEN,LTAG,TMP
"RTN","RORXU006",50,0)
 I $D(RORTSK("PARAMS","CPTLST","C"))>1  D
"RTN","RORXU006",51,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CPTLST",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",52,0)
 . S IEN=0
"RTN","RORXU006",53,0)
 . F  S IEN=$O(RORTSK("PARAMS","CPTLST","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",54,0)
 . . S CPT=$P(RORTSK("PARAMS","CPTLST","C",IEN),U)  Q:CPT=""
"RTN","RORXU006",55,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CPT",CPT,LTAG,,IEN)
"RTN","RORXU006",56,0)
 E  D:$$PARAM^RORTSK01("CPTLST","ALL")
"RTN","RORXU006",57,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CPTLST","ALL",PARTAG)
"RTN","RORXU006",58,0)
 Q +$G(LTAG)
"RTN","RORXU006",59,0)
 ;
"RTN","RORXU006",60,0)
 ;***** PROCESSES THE LIST OF DIVISIONS
"RTN","RORXU006",61,0)
 ;
"RTN","RORXU006",62,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",63,0)
 ;
"RTN","RORXU006",64,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",65,0)
 ;
"RTN","RORXU006",66,0)
 ; Return Values:
"RTN","RORXU006",67,0)
 ;       <0  Error code
"RTN","RORXU006",68,0)
 ;       >0  IEN of the DIVISIONS element
"RTN","RORXU006",69,0)
 ;
"RTN","RORXU006",70,0)
DIVLST(RORTSK,PARTAG) ;
"RTN","RORXU006",71,0)
 N IEN,LTAG,RORMSG,TMP
"RTN","RORXU006",72,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C"))>1  D
"RTN","RORXU006",73,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",74,0)
 . S IEN=0
"RTN","RORXU006",75,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",76,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU006",77,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU006",78,0)
 . . Q:TMP=""
"RTN","RORXU006",79,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU006",80,0)
 E  D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU006",81,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARTAG)
"RTN","RORXU006",82,0)
 Q +$G(LTAG)
"RTN","RORXU006",83,0)
 ;
"RTN","RORXU006",84,0)
 ;***** PROCESSES THE LIST OF LAB TESTS
"RTN","RORXU006",85,0)
 ;
"RTN","RORXU006",86,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",87,0)
 ;
"RTN","RORXU006",88,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",89,0)
 ;
"RTN","RORXU006",90,0)
 ;
"RTN","RORXU006",91,0)
 ; .ROR8LST      Reference to a local variable, which contains a
"RTN","RORXU006",92,0)
 ;               closed root of an array. Descriptors of selected
"RTN","RORXU006",93,0)
 ;               lab tests will be returned into this array.
"RTN","RORXU006",94,0)
 ;
"RTN","RORXU006",95,0)
 ;                 @ROR8LTST@(ResultNode,TestIEN)
"RTN","RORXU006",96,0)
 ;                   ^01: Test IEN (in file #60)
"RTN","RORXU006",97,0)
 ;                   ^02: Test name
"RTN","RORXU006",98,0)
 ;                   ^03: 99
"RTN","RORXU006",99,0)
 ;                   ^04: "Other"
"RTN","RORXU006",100,0)
 ;                   ^05: Location subscript
"RTN","RORXU006",101,0)
 ;                   ^06: Result node
"RTN","RORXU006",102,0)
 ;
"RTN","RORXU006",103,0)
 ;               If this parameter is undefined or empty, then a
"RTN","RORXU006",104,0)
 ;               temporary buffer is allocated by the $$ALLOC^RORTMP
"RTN","RORXU006",105,0)
 ;               function and its root is returned via this parameter.
"RTN","RORXU006",106,0)
 ;
"RTN","RORXU006",107,0)
 ;               If all drugs are requested (the "ALL" attribute of
"RTN","RORXU006",108,0)
 ;               the "DRUGS" tag), then "*" is returned.
"RTN","RORXU006",109,0)
 ;
"RTN","RORXU006",110,0)
 ; [ROR8LRG]     Closed root of a node where the lab tests with
"RTN","RORXU006",111,0)
 ;               defined range values will be returned. By default
"RTN","RORXU006",112,0)
 ;               ($G(ROR8LRG)=""), this list is not compiled.
"RTN","RORXU006",113,0)
 ;
"RTN","RORXU006",114,0)
 ;                  @ROR8LRG@(TestIEN,
"RTN","RORXU006",115,0)
 ;                    "H") = Low
"RTN","RORXU006",116,0)
 ;                    "L") = High
"RTN","RORXU006",117,0)
 ;
"RTN","RORXU006",118,0)
 ;               "H", "L", or both will be defined.
"RTN","RORXU006",119,0)
 ;
"RTN","RORXU006",120,0)
 ; If the source list contains lab test panels, all corresponding
"RTN","RORXU006",121,0)
 ; lab tests are added to the @ROR8LST array but only a single tag
"RTN","RORXU006",122,0)
 ; is added to the XML list.
"RTN","RORXU006",123,0)
 ;
"RTN","RORXU006",124,0)
 ; Return Values:
"RTN","RORXU006",125,0)
 ;       <0  Error code
"RTN","RORXU006",126,0)
 ;       >0  IEN of the LABTESTS element
"RTN","RORXU006",127,0)
 ;
"RTN","RORXU006",128,0)
LTLST(RORTSK,PARTAG,ROR8LST,ROR8LRG) ;
"RTN","RORXU006",129,0)
 N ALL,BUF,I,LTAG,LTIEN,LTOPTS,TMP
"RTN","RORXU006",130,0)
 S ALL=+$$PARAM^RORTSK01("LABTESTS","ALL")
"RTN","RORXU006",131,0)
 S (LTAG,RC)=0
"RTN","RORXU006",132,0)
 ;
"RTN","RORXU006",133,0)
 ;=== Validate parameters
"RTN","RORXU006",134,0)
 I 'ALL  D  K @ROR8LST
"RTN","RORXU006",135,0)
 . S:$G(ROR8LST)="" ROR8LST=$$ALLOC^RORTMP()
"RTN","RORXU006",136,0)
 E  S ROR8LST="*"
"RTN","RORXU006",137,0)
 ;
"RTN","RORXU006",138,0)
 ;=== Process the drug options (if present)
"RTN","RORXU006",139,0)
 M LTOPTS=RORTSK("PARAMS","LABTESTS","A")
"RTN","RORXU006",140,0)
 I $D(LTOPTS)>1  D  Q:LTAG'>0 LTAG
"RTN","RORXU006",141,0)
 . N ATTR,REGIEN
"RTN","RORXU006",142,0)
 . S ATTR=$S(ALL:"ALL",1:"")
"RTN","RORXU006",143,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",ATTR,PARTAG)
"RTN","RORXU006",144,0)
 . Q:LTAG'>0
"RTN","RORXU006",145,0)
 . ;--- Output option attributes
"RTN","RORXU006",146,0)
 . S ATTR="",RC=0
"RTN","RORXU006",147,0)
 . F  S ATTR=$O(LTOPTS(ATTR))  Q:ATTR=""  D  Q:RC<0
"RTN","RORXU006",148,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,LTAG,ATTR,"1")
"RTN","RORXU006",149,0)
 . I RC<0  S LTAG=RC  Q
"RTN","RORXU006",150,0)
 . S ATTR=$$OPTXT^RORXU002(.LTOPTS)
"RTN","RORXU006",151,0)
 . D:ATTR'="" ADDATTR^RORTSK11(RORTSK,LTAG,"DESCR",ATTR)
"RTN","RORXU006",152,0)
 ;
"RTN","RORXU006",153,0)
 ;=== Process the list of tests (if present)
"RTN","RORXU006",154,0)
 I 'ALL,$D(RORTSK("PARAMS","LABTESTS","C"))>1  D
"RTN","RORXU006",155,0)
 . I LTAG'>0  D  Q:LTAG'>0
"RTN","RORXU006",156,0)
 . . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,PARTAG)
"RTN","RORXU006",157,0)
 . S LTIEN=0
"RTN","RORXU006",158,0)
 . F  S LTIEN=$O(RORTSK("PARAMS","LABTESTS","C",LTIEN))  Q:LTIEN'>0  D
"RTN","RORXU006",159,0)
 . . D LTLSTI(LTIEN,LTAG)
"RTN","RORXU006",160,0)
 ;
"RTN","RORXU006",161,0)
 Q $S(RC<0:RC,1:LTAG)
"RTN","RORXU006",162,0)
 ;
"RTN","RORXU006",163,0)
 ;***** CREATES THE LAB TEST ITEM(S)
"RTN","RORXU006",164,0)
 ;
"RTN","RORXU006",165,0)
 ; LTIEN         IEN of the lab test in the file #60
"RTN","RORXU006",166,0)
 ; [LTAG]        IEN of the parent tag
"RTN","RORXU006",167,0)
 ;
"RTN","RORXU006",168,0)
 ; This is an internal entry point. Do NOT call it directly.
"RTN","RORXU006",169,0)
 ;
"RTN","RORXU006",170,0)
LTLSTI(LTIEN,LTAG) ;
"RTN","RORXU006",171,0)
 N BUF,I,IENS,ITEM,LTNAME,LTNODE,PLTCNT,RORBUF,RORMSG,TMP
"RTN","RORXU006",172,0)
 ;--- Load the lab test parameters
"RTN","RORXU006",173,0)
 S IENS=LTIEN_","
"RTN","RORXU006",174,0)
 D GETS^DIQ(60,IENS,".01;5","EI","RORBUF","RORMSG")
"RTN","RORXU006",175,0)
 D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,60,IENS)
"RTN","RORXU006",176,0)
 S LTNAME=$G(RORBUF(60,IENS,.01,"E"))  Q:LTNAME=""
"RTN","RORXU006",177,0)
 ;--- Output the tag and update the list of ranges
"RTN","RORXU006",178,0)
 D:$G(LTAG)>0
"RTN","RORXU006",179,0)
 . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",LTNAME,LTAG,,LTIEN)
"RTN","RORXU006",180,0)
 . S TMP=$$UP^XLFSTR($G(RORTSK("PARAMS","LABTESTS","C",LTIEN,"L")))
"RTN","RORXU006",181,0)
 . D:TMP'=""
"RTN","RORXU006",182,0)
 . . D ADDATTR^RORTSK11(RORTSK,ITEM,"LOW",TMP)
"RTN","RORXU006",183,0)
 . . S:$G(ROR8LRG)'="" @ROR8LRG@(LTIEN,"L")=TMP
"RTN","RORXU006",184,0)
 . S TMP=$$UP^XLFSTR($G(RORTSK("PARAMS","LABTESTS","C",LTIEN,"H")))
"RTN","RORXU006",185,0)
 . D:TMP'=""
"RTN","RORXU006",186,0)
 . . D ADDATTR^RORTSK11(RORTSK,ITEM,"HIGH",TMP)
"RTN","RORXU006",187,0)
 . . S:$G(ROR8LRG)'="" @ROR8LRG@(LTIEN,"H")=TMP
"RTN","RORXU006",188,0)
 ;--- Process the panel
"RTN","RORXU006",189,0)
 D ATESTS^ORWLRR(.BUF,LTIEN)
"RTN","RORXU006",190,0)
 I $D(BUF)>1  S I="",PLTCNT=0  D  Q:PLTCNT>1
"RTN","RORXU006",191,0)
 . F  S I=$O(BUF(I))  Q:I=""  D
"RTN","RORXU006",192,0)
 . . S TMP=+$P(BUF(I),U),PLTCNT=PLTCNT+1
"RTN","RORXU006",193,0)
 . . D:TMP'=LTIEN LTLSTI(TMP)
"RTN","RORXU006",194,0)
 ;--- Create the reference
"RTN","RORXU006",195,0)
 S LTNODE=$P($G(RORBUF(60,IENS,5,"I")),";",2)  Q:LTNODE=""
"RTN","RORXU006",196,0)
 S BUF=LTIEN_U_LTNAME_U_"99^Other"
"RTN","RORXU006",197,0)
 S $P(BUF,U,5)=$P(RORBUF(60,IENS,5,"I"),";")  ; Subscript
"RTN","RORXU006",198,0)
 S $P(BUF,U,6)=LTNODE                         ; Result node
"RTN","RORXU006",199,0)
 S @ROR8LST@(LTNODE,LTIEN)=BUF
"RTN","RORXU006",200,0)
 Q
"RTN","RORXU006",201,0)
 ;
"RTN","RORXU006",202,0)
 ;***** CHECKS IF THE OPTIONAL COLUMN IS SELECTED
"RTN","RORXU006",203,0)
 ;
"RTN","RORXU006",204,0)
 ; NAME          Column name
"RTN","RORXU006",205,0)
 ;
"RTN","RORXU006",206,0)
 ; Return Values:
"RTN","RORXU006",207,0)
 ;        0  Skip the field
"RTN","RORXU006",208,0)
 ;       >0  Include in report
"RTN","RORXU006",209,0)
 ;
"RTN","RORXU006",210,0)
OPTCOL(NAME) ;
"RTN","RORXU006",211,0)
 Q $S($G(NAME)'="":$D(RORTSK("PARAMS","OPTIONAL_COLUMNS","C",NAME)),1:0)
"RTN","RORXU006",212,0)
 ;
"RTN","RORXU006",213,0)
 ;***** CHECK IF ONLY THE SUMMARY SHOULD BE GENERATED
"RTN","RORXU006",214,0)
SMRYONLY() ;
"RTN","RORXU006",215,0)
 Q:$$PARAM^RORTSK01("MAXUTNUM")'="" 0
"RTN","RORXU006",216,0)
 Q:$$PARAM^RORTSK01("MINRPNUM")'="" 0
"RTN","RORXU006",217,0)
 Q 1
"RTN","RORXU008")
0^38^B8451586^n/a
"RTN","RORXU008",1,0)
RORXU008 ;HCIOFO/SG - REPORT PARAMETERS (CONT.) ; 6/21/06 2:08pm
"RTN","RORXU008",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1**;Feb 17, 2006;Build 24
"RTN","RORXU008",3,0)
 ;
"RTN","RORXU008",4,0)
 Q
"RTN","RORXU008",5,0)
 ;
"RTN","RORXU008",6,0)
 ;***** PROCESSES THE LIST OF ICD-9 CODES
"RTN","RORXU008",7,0)
 ;
"RTN","RORXU008",8,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU008",9,0)
 ;
"RTN","RORXU008",10,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU008",11,0)
 ;
"RTN","RORXU008",12,0)
 ; .ROR8LST      Reference to a local variable, which contains a
"RTN","RORXU008",13,0)
 ;               closed root of an array. IEN's of ICD-9 codes
"RTN","RORXU008",14,0)
 ;               will be returned into this array.
"RTN","RORXU008",15,0)
 ;
"RTN","RORXU008",16,0)
 ;                 @ROR8LST@(IEN,Group#) = ""
"RTN","RORXU008",17,0)
 ;
"RTN","RORXU008",18,0)
 ;               If this parameter is undefined or empty, then a
"RTN","RORXU008",19,0)
 ;               temporary buffer is allocated by the $$ALLOC^RORTMP
"RTN","RORXU008",20,0)
 ;               function and its root is returned via this parameter.
"RTN","RORXU008",21,0)
 ;
"RTN","RORXU008",22,0)
 ;               If all ICD-9 codes are requested (the "ALL" attribute
"RTN","RORXU008",23,0)
 ;               of the "ICD9LST" tag), then "*" is returned.
"RTN","RORXU008",24,0)
 ;
"RTN","RORXU008",25,0)
 ; [.GRPLST]     Reference to a local variable that will contain
"RTN","RORXU008",26,0)
 ;               the list of ICD-9 groups.
"RTN","RORXU008",27,0)
 ;
"RTN","RORXU008",28,0)
 ;                 GRPLST(
"RTN","RORXU008",29,0)
 ;                   "C",Group#)    = GroupName
"RTN","RORXU008",30,0)
 ;                   "N",GroupName) = Group#
"RTN","RORXU008",31,0)
 ;
"RTN","RORXU008",32,0)
 ; Return Values:
"RTN","RORXU008",33,0)
 ;       <0  Error code
"RTN","RORXU008",34,0)
 ;       >0  IEN of the ICD9LST element
"RTN","RORXU008",35,0)
 ;
"RTN","RORXU008",36,0)
ICD9LST(RORTSK,PARTAG,ROR8LST,GRPLST) ;
"RTN","RORXU008",37,0)
 N ATTR,ICD9,ICD9ALL,ICD9OPTS,IEN,LTAG,RC,TMP
"RTN","RORXU008",38,0)
 S ICD9ALL=+$$PARAM^RORTSK01("ICD9LST","ALL")
"RTN","RORXU008",39,0)
 S (LTAG,RC)=0
"RTN","RORXU008",40,0)
 ;
"RTN","RORXU008",41,0)
 ;=== Validate parameters
"RTN","RORXU008",42,0)
 I 'ICD9ALL  D  K @ROR8LST
"RTN","RORXU008",43,0)
 . S:$G(ROR8LST)="" ROR8LST=$$ALLOC^RORTMP()
"RTN","RORXU008",44,0)
 E  S ROR8LST="*"
"RTN","RORXU008",45,0)
 ;
"RTN","RORXU008",46,0)
 ;=== Process the drug options (if present)
"RTN","RORXU008",47,0)
 M ICD9OPTS=RORTSK("PARAMS","ICD9LST","A")
"RTN","RORXU008",48,0)
 I $D(ICD9OPTS)>1  D  Q:LTAG'>0 LTAG
"RTN","RORXU008",49,0)
 . S ATTR=$S(ICD9ALL:"ALL",1:"")
"RTN","RORXU008",50,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"ICD9LST",ATTR,PARTAG)
"RTN","RORXU008",51,0)
 . Q:LTAG'>0
"RTN","RORXU008",52,0)
 . ;--- Output option attributes
"RTN","RORXU008",53,0)
 . S ATTR="",RC=0
"RTN","RORXU008",54,0)
 . F  S ATTR=$O(ICD9OPTS(ATTR))  Q:ATTR=""  D  Q:RC<0
"RTN","RORXU008",55,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,LTAG,ATTR,"1")
"RTN","RORXU008",56,0)
 . I RC<0  S LTAG=RC  Q
"RTN","RORXU008",57,0)
 . S ATTR=$$OPTXT^RORXU002(.ICD9OPTS)
"RTN","RORXU008",58,0)
 . D:ATTR'="" ADDATTR^RORTSK11(RORTSK,LTAG,"DESCR",ATTR)
"RTN","RORXU008",59,0)
 ;
"RTN","RORXU008",60,0)
 ;=== Process the list of ICD-9 codes (if present)
"RTN","RORXU008",61,0)
 I 'ICD9ALL  D:$D(RORTSK("PARAMS","ICD9LST","G"))>1
"RTN","RORXU008",62,0)
 . N GRPNAME,GRPTAG,IG,NODE
"RTN","RORXU008",63,0)
 . I LTAG'>0  D  Q:LTAG'>0
"RTN","RORXU008",64,0)
 . . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"ICD9LST",,PARTAG)
"RTN","RORXU008",65,0)
 . ;---
"RTN","RORXU008",66,0)
 . S NODE=$NA(RORTSK("PARAMS","ICD9LST","G"))
"RTN","RORXU008",67,0)
 . S GRPNAME="",RC=0
"RTN","RORXU008",68,0)
 . F  S GRPNAME=$O(@NODE@(GRPNAME))  Q:GRPNAME=""  D  Q:RC<0
"RTN","RORXU008",69,0)
 . . S IG=$O(GRPLST("C",""),-1)+1
"RTN","RORXU008",70,0)
 . . S GRPLST("C",IG)=GRPNAME,GRPLST("N",GRPNAME)=IG
"RTN","RORXU008",71,0)
 . . S GRPTAG=$$ADDVAL^RORTSK11(RORTSK,"GROUP",,LTAG)
"RTN","RORXU008",72,0)
 . . I GRPTAG'>0  S RC=GRPTAG  Q
"RTN","RORXU008",73,0)
 . . D ADDATTR^RORTSK11(RORTSK,GRPTAG,"NAME",GRPNAME)
"RTN","RORXU008",74,0)
 . . S IEN=0
"RTN","RORXU008",75,0)
 . . F  S IEN=$O(@NODE@(GRPNAME,"C",IEN))  Q:IEN'>0  D
"RTN","RORXU008",76,0)
 . . . S ICD9=$P(@NODE@(GRPNAME,"C",IEN),U)  Q:ICD9=""
"RTN","RORXU008",77,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"ICD9",ICD9,GRPTAG,,IEN)
"RTN","RORXU008",78,0)
 . . . S @ROR8LST@(IEN,IG)=""
"RTN","RORXU008",79,0)
 ;
"RTN","RORXU008",80,0)
 ;===
"RTN","RORXU008",81,0)
 Q $S(RC<0:RC,1:LTAG)
"RTN","RORXU008",82,0)
 ;
"RTN","RORXU008",83,0)
 ;***** FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORXU008",84,0)
 ;
"RTN","RORXU008",85,0)
 ; .GRPLST       Reference to a local variable that contains a list
"RTN","RORXU008",86,0)
 ;               of group codes. It is used to determine if codes
"RTN","RORXU008",87,0)
 ;               from all groups were found.
"RTN","RORXU008",88,0)
 ;
"RTN","RORXU008",89,0)
 ; ICD9IEN       IEN of the ICD-9 code
"RTN","RORXU008",90,0)
 ;
"RTN","RORXU008",91,0)
 ; ROR8LST       Closed root of the ICD-9 list generated by the
"RTN","RORXU008",92,0)
 ;               $$ICD9LST^RORXU008 function or "*" for all drugs.
"RTN","RORXU008",93,0)
 ;
"RTN","RORXU008",94,0)
 ; Return Values:
"RTN","RORXU008",95,0)
 ;        0  Ok
"RTN","RORXU008",96,0)
 ;        1  Skip the record
"RTN","RORXU008",97,0)
 ;
"RTN","RORXU008",98,0)
ICDGRCHK(GRPLST,ICD9IEN,ROR8LST) ;
"RTN","RORXU008",99,0)
 Q:ROR8LST="*" 0
"RTN","RORXU008",100,0)
 Q:$D(@ROR8LST@(ICD9IEN))<10 1
"RTN","RORXU008",101,0)
 N GRP  S GRP=""
"RTN","RORXU008",102,0)
 F  S GRP=$O(@ROR8LST@(ICD9IEN,GRP))  Q:GRP=""  K GRPLST(GRP)
"RTN","RORXU008",103,0)
 Q 0
"SEC","^DD",799.4,799.4,10,9)

"SEC","^DD",799.4,799.41,.01,8.5)

"SEC","^DD",799.4,799.41,.01,9)

"SEC","^DD",799.4,799.41,.02,8.5)

"SEC","^DD",799.4,799.41,.02,9)

"SEC","^DD",799.4,799.41,.03,8.5)

"SEC","^DD",799.4,799.41,.03,9)

"TEMP","ROR GENERIC DRUG",1,0)
1^ABACAVIR^VA HIV^99^3535^ABACAVIR^1
"TEMP","ROR GENERIC DRUG",2,0)
2^ABACAVIR/LAMIVUDINE/ZIDOVUDINE^VA HIV^99^3677^ABACAVIR/LAMIVUDINE/ZIDOVUDINE^1
"TEMP","ROR GENERIC DRUG",3,0)
3^AMPRENAVIR^VA HIV^99^3568^AMPRENAVIR^1
"TEMP","ROR GENERIC DRUG",4,0)
4^ATAZANAVIR^VA HIV^99^3890^ATAZANAVIR^1
"TEMP","ROR GENERIC DRUG",5,0)
33^DARUNAVIR^VA HIV^99^4140^DARUNAVIR^1
"TEMP","ROR GENERIC DRUG",6,0)
5^DELAVIRDINE^VA HIV^99^3395^DELAVIRDINE^1
"TEMP","ROR GENERIC DRUG",7,0)
6^DIDANOSINE^VA HIV^99^2576^DIDANOSINE^1
"TEMP","ROR GENERIC DRUG",8,0)
7^EFAVIRENZ^VA HIV^99^3528^EFAVIRENZ^1
"TEMP","ROR GENERIC DRUG",9,0)
34^EFAVIRENZ/EMTRICIT./TENOFOVIR^VA HIV^99^4188^EFAVIRENZ/EMTRICITABINE/TENOFOVIR^1
"TEMP","ROR GENERIC DRUG",10,0)
8^EMTRICITABINE^VA HIV^99^3888^EMTRICITABINE^1
"TEMP","ROR GENERIC DRUG",11,0)
9^ENFUVIRTIDE^VA HIV^99^3864^ENFUVIRTIDE^1
"TEMP","ROR GENERIC DRUG",12,0)
10^EPZICOM^VA HIV^99^3994^ABACAVIR/LAMIVUDINE^1
"TEMP","ROR GENERIC DRUG",13,0)
11^FOSAMPRENAVIR^VA HIV^99^3918^FOSAMPRENAVIR^1
"TEMP","ROR GENERIC DRUG",14,0)
12^INDINAVIR^VA HIV^99^3350^INDINAVIR^1
"TEMP","ROR GENERIC DRUG",15,0)
13^INTERFERON ALFA-2A^VA HEPC^99^183^INTERFERON ALFA-2A^1
"TEMP","ROR GENERIC DRUG",16,0)
14^INTERFERON ALFA-2B^VA HEPC^99^1139^INTERFERON ALFA-2B^1
"TEMP","ROR GENERIC DRUG",17,0)
15^INTERFERON ALFA-2B/RIBAVIRIN^VA HEPC^99^3510^INTERFERON ALFA-2B/RIBAVIRIN^1
"TEMP","ROR GENERIC DRUG",18,0)
16^INTERFERON ALFACON-1^VA HEPC^99^3454^INTERFERON ALFACON-1^1
"TEMP","ROR GENERIC DRUG",19,0)
17^LAMIVUDINE^VA HIV^99^3315^LAMIVUDINE^1
"TEMP","ROR GENERIC DRUG",20,0)
18^LAMIVUDINE/ZIDOVUDINE^VA HIV^99^3465^LAMIVUDINE/ZIDOVUDINE^1
"TEMP","ROR GENERIC DRUG",21,0)
19^LOPINAVIR/RITONAVIR^VA HIV^99^3660^LOPINAVIR/RITONAVIR^1
"TEMP","ROR GENERIC DRUG",22,0)
20^NELFINAVIR^VA HIV^99^3394^NELFINAVIR^1
"TEMP","ROR GENERIC DRUG",23,0)
21^NEVIRAPINE^VA HIV^99^3377^NEVIRAPINE^1
"TEMP","ROR GENERIC DRUG",24,0)
22^PEGINTERFERON^VA HEPC^99^3693^PEGINTERFERON^1
"TEMP","ROR GENERIC DRUG",25,0)
23^PEGINTERFERON/RIBAVIRIN^VA HEPC^99^3835^PEGINTERFERON/RIBAVIRIN^1
"TEMP","ROR GENERIC DRUG",26,0)
24^RIBAVIRIN^VA HEPC^99^1909^RIBAVIRIN^1
"TEMP","ROR GENERIC DRUG",27,0)
25^RITONAVIR^VA HIV^99^3349^RITONAVIR^1
"TEMP","ROR GENERIC DRUG",28,0)
26^SAQUINAVIR^VA HIV^99^3316^SAQUINAVIR^1
"TEMP","ROR GENERIC DRUG",29,0)
27^STAVUDINE (dT4)^VA HIV^99^3225^STAVUDINE (dT4)^1
"TEMP","ROR GENERIC DRUG",30,0)
28^TENOFOVIR^VA HIV^99^3724^TENOFOVIR^1
"TEMP","ROR GENERIC DRUG",31,0)
32^TIPRANAVIR^VA HIV^99^4059^TIPRANAVIR^1
"TEMP","ROR GENERIC DRUG",32,0)
29^TRUVADA^VA HIV^99^3990^EMTRICITABINE/TENOFOVIR^1
"TEMP","ROR GENERIC DRUG",33,0)
30^ZALCITABINE^VA HIV^99^2270^ZALCITABINE^1
"TEMP","ROR GENERIC DRUG",34,0)
31^ZIDOVUDINE^VA HIV^99^2147^ZIDOVUDINE^1
"TEMP","RORCDCDEF",1)

"TEMP","RORCDCDEF",2)
edt1_1=^^548^87^32^^49^^^^1^^^^^^Name
"TEMP","RORCDCDEF",3)
edt1_3=^^246^178^22^^49^^^^1^ADR^3^^13^^Address
"TEMP","RORCDCDEF",4)
edt1_4=^^1083^178^22^^49^^^^1^ADR^6^^13^^City
"TEMP","RORCDCDEF",5)
edt1_5=^^1512^178^22^^49^^^^1^ADR^12^^13^^County
"TEMP","RORCDCDEF",6)
edt1_6=^^2205^178^22^^49^^^^1^ADR^9^^13^^ZIP
"TEMP","RORCDCDEF",7)
cmbb1_1=^^1872^176^24^^49^^^^1^ADR^8^^13^^
"TEMP","RORCDCDEF",8)
edt1_2=^^2020^108^22^^49^^^^1^ADR^13^^13^^Phone
"TEMP","RORCDCDEF",9)
edt1_7=^^1872^178^22^^49^^^^1^ADR^^^^^State
"TEMP","RORCDCDEF",10)
dtp2_1=^^161^567^30^MMDDYY^49^117^^^1^HDR^3^^6^^Date form was Completed
"TEMP","RORCDCDEF",11)
edt2_1=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",12)
edt2_2=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",13)
edt2_3=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",14)
edt2_4=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",15)
edt2_5=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",16)
edt2_6=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",17)
chkb2_1=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",18)
chkb2_2=^^^^32^^49^^^^1^^^^^^
"TEMP","RORCDCDEF",19)
edt3_3_1=^^1985^871^22^^49^^^^1^CDM^6^^8^^Territory of death
"TEMP","RORCDCDEF",20)
chkb3_3_1=^^1301^910^25^^49^^^^1^CDM^1^^14^^Current Status Alive
"TEMP","RORCDCDEF",21)
chkb3_3_2=^^1393^910^25^^49^^^^1^CDM^2^^14^^Current Status Dead
"TEMP","RORCDCDEF",22)
chkb3_3_3=^^1485^910^25^^49^^^^1^CDM^9^^14^^Current Status Unk
"TEMP","RORCDCDEF",23)
edt3_3_2=^^1607^902^30^MMDDYY^58^116^^^1^DEM^7^^14^^Date of Death
"TEMP","RORCDCDEF",24)
edt3_2_1=^^885^902^30^MMDDYY^58^115^^^1^DEM^5^^8^^Date of Birth
"TEMP","RORCDCDEF",25)
edt3_1_2=^^574^910^30^BoxedLine^54^2^^^1^CDM^4^^14^^AIDS age
"TEMP","RORCDCDEF",26)
chkb3_1_1=^^126^868^25^^49^^^^1^CDM^3^1^14^^Diagnostic status HIV
"TEMP","RORCDCDEF",27)
chkb3_1_2=^^126^923^25^^49^^^^1^CDM^3^2^14^^Diagnostic status AIDS
"TEMP","RORCDCDEF",28)
edt3_1_1=^^574^848^30^BoxedLine^54^2^^^1^CDM^4^^14^^HIV Age
"TEMP","RORCDCDEF",29)
chkb3_5_1=^^355^1040^25^^49^^^^1^ETN^3^2135-2^6^^Ethnicity Hispanic
"TEMP","RORCDCDEF",30)
chkb3_5_2=^^543^1039^25^^49^^^^1^ETN^3^2186-5^6^^Ethnicity Unk
"TEMP","RORCDCDEF",31)
chkb3_5_3=^^355^1101^25^^49^^^^1^ETN^3^9999-4^6^^Ethnicity Not Hispanic
"TEMP","RORCDCDEF",32)
chkb3_4_1=^^127^1040^25^^49^^^^1^DEM^8^M^8^^Sex Male
"TEMP","RORCDCDEF",33)
chkb3_4_2=^^126^1106^25^^49^^^^1^DEM^8^F^8^^Sex Female
"TEMP","RORCDCDEF",34)
chkb3_6_1=^^730^1039^25^^49^^^^1^RCE^3^1002-5^6^^Race American
"TEMP","RORCDCDEF",35)
chkb3_6_2=^^730^1118^25^^49^^^^1^RCE^3^2028-9^6^^Race Asian
"TEMP","RORCDCDEF",36)
chkb3_6_4=^^864^1119^25^^49^^^^1^RCE^3^2054-5^6^^Race Hawaiian
"TEMP","RORCDCDEF",37)
chkb3_6_3=^^1001^1039^25^^49^^^^1^RCE^3^2076-8^6^^Race Black Am
"TEMP","RORCDCDEF",38)
chkb3_6_6=^^1334^1115^25^^49^^^^1^RCE^3^2106-3^6^^Race Unkn.
"TEMP","RORCDCDEF",39)
chkb3_6_5=^^1189^1114^25^^49^^^^1^RCE^3^9999-4^6^^Race White
"TEMP","RORCDCDEF",40)
chkb3_7_1=^^1501^1019^25^^49^^^^1^CDM^7^1^14^^Country of Birth USA
"TEMP","RORCDCDEF",41)
chkb3_7_2=^^1643^1018^25^^49^^^^1^CDM^7^7^14^^Country of Birth US Depend
"TEMP","RORCDCDEF",42)
chkb3_7_4=^^2339^1123^25^^49^^^^1^CDM^7^9^14^^Country of Birth Unk.
"TEMP","RORCDCDEF",43)
edt3_7_1=^^1811^1065^22^^49^^^^1^CDM^8^^14^^Country of Birth USA Dep Name
"TEMP","RORCDCDEF",44)
chkb3_7_3=^^1501^1119^25^^49^^^^1^CDM^7^8^14^^Country of Birth Other
"TEMP","RORCDCDEF",45)
edt3_7_2=^^1765^1122^22^^49^^^^1^CDM^8^^14^^Country of Birth Other Name
"TEMP","RORCDCDEF",46)
edt3_8_2=^^864^1234^22^^49^^^^1^CDM^10^^14^^Residence County
"TEMP","RORCDCDEF",47)
edt3_8_1=^^214^1234^22^^49^^^^1^CDM^9^^14^^Residence City
"TEMP","RORCDCDEF",48)
edt3_8_4=^^1974^1215^30^BoxedLine^49^9^^^1^CDM^14^^14^ZIP^Residence ZIP
"TEMP","RORCDCDEF",49)
edt3_8_5=^^1383^1234^22^^49^^^^1^CDM^13^^14^^Residence Country
"TEMP","RORCDCDEF",50)
cmbb3_8_1=^^1383^1234^22^^49^^^^1^CDM^11^^14^^Residence State
"TEMP","RORCDCDEF",51)
chkb4_3_1=^^130^1806^25^^49^^^^1^FD^9^01^10^^Diagnostic Facility Type Physitcan, HMO
"TEMP","RORCDCDEF",52)
chkb4_3_2=^^484^1806^25^^49^^^^1^FD^9^31^10^^Diagnostic Facility Type Inpatient
"TEMP","RORCDCDEF",53)
chkb4_3_3=^^129^1865^25^^49^^^^1^FD^9^88^10^^Diagnostic Facility Type Other
"TEMP","RORCDCDEF",54)
edt4_3_1=^^397^1859^22^^49^^^^1^FD^10^^10^^Diagnostic Facility Type Other Name
"TEMP","RORCDCDEF",55)
chkb4_2_1=^^130^1694^25^^49^^^^1^FD^8^1^10^^Diagnostic Facility Setting Public
"TEMP","RORCDCDEF",56)
chkb4_2_2=^^339^1694^25^^49^^^^1^FD^8^2^10^^Diagnostic Facility Setting Private
"TEMP","RORCDCDEF",57)
chkb4_2_3=^^551^1694^25^^49^^^^1^FD^8^3^10^^Diagnostic Facility Setting  Federal
"TEMP","RORCDCDEF",58)
chkb4_2_4=^^772^1694^25^^49^^^^1^FD^8^9^10^^Diagnostic Facility Setting Unk
"TEMP","RORCDCDEF",59)
edt4_1_1=^^125^1402^22^^49^^^^1^FD^3^^10^^Diagnostic Facility Name
"TEMP","RORCDCDEF",60)
edt4_1_2=^^125^1474^22^^49^^^^1^FD^4^^10^^Diagnostic Facility City
"TEMP","RORCDCDEF",61)
edt4_1_4=^^125^1550^22^^49^^^^1^FD^7^^10^^Facility Country
"TEMP","RORCDCDEF",62)
cmbb4_1_1=^^125^1550^22^^49^^^^1^FD^5^^10^^Diagnostic Facility Setting  State
"TEMP","RORCDCDEF",63)
chkb5_14_1=^^2228^2209^24^^49^^^^1^PH^19^1^20^^Work in Clinical Lab Yes
"TEMP","RORCDCDEF",64)
chkb5_14_2=^^2316^2209^24^^49^^^^1^PH^19^0^20^^Work in Clinical Lab No
"TEMP","RORCDCDEF",65)
chkb5_14_3=^^2399^2209^24^^49^^^^1^PH^19^9^20^^Work in Clinical Lab Unk.
"TEMP","RORCDCDEF",66)
edt5_14_1=^^1420^2257^22^^49^^^^1^PH^20^^20^^Work in Clinical Lab Name
"TEMP","RORCDCDEF",67)
chkb5_12_1=^^2228^2163^24^^49^^^^1^PH^18^1^20^^Received Transpalnt Yes
"TEMP","RORCDCDEF",68)
chkb5_12_2=^^2316^2163^24^^49^^^^1^PH^18^0^20^^Received Transpalnt No
"TEMP","RORCDCDEF",69)
chkb5_12_3=^^2398^2163^24^^49^^^^1^PH^18^9^20^^Received Transpalnt Unk
"TEMP","RORCDCDEF",70)
chkb5_11_1=^^2228^2038^24^^49^^^^1^PH^15^1^20^^Received Transfusion Yes
"TEMP","RORCDCDEF",71)
chkb5_11_2=^^2316^2038^24^^49^^^^1^PH^15^0^20^^Received Transfusion No
"TEMP","RORCDCDEF",72)
chkb5_11_3=^^2399^2038^24^^49^^^^1^PH^15^9^20^^Received Transfusion Unk
"TEMP","RORCDCDEF",73)
edV_FirstYear=^^1357^2107^30^MMYY^50^170^^^1^PH^16^^20^MM/YY^Received Transfusion First
"TEMP","RORCDCDEF",74)
edV_LastYear=^^1766^2107^30^MMYY^50^170^^^1^PH^17^^20^MM/YY^Received Transfusion Last
"TEMP","RORCDCDEF",75)
chkb5_10_1=^^2228^1992^24^^49^^^^1^PH^14^1^20^^Hetero SR with Person with AIDS Yes
"TEMP","RORCDCDEF",76)
chkb5_10_2=^^2316^1992^24^^49^^^^1^PH^14^0^20^^Hetero SR with Person with AIDS No
"TEMP","RORCDCDEF",77)
chkb5_10_3=^^2398^1992^24^^49^^^^1^PH^14^9^20^^Hetero SR with Person with AIDS Unk.
"TEMP","RORCDCDEF",78)
chkb5_9_1=^^2228^1946^25^^49^^^^1^PH^13^1^20^^Hetero SR with Transplant recepient Yes
"TEMP","RORCDCDEF",79)
chkb5_9_2=^^2315^1946^25^^49^^^^1^PH^13^0^20^^Hetero SR with Transplant recepient No
"TEMP","RORCDCDEF",80)
chkb5_9_3=^^2398^1946^25^^49^^^^1^PH^13^9^20^^Hetero SR with Transplant recepient Unk
"TEMP","RORCDCDEF",81)
chkb5_8_1=^^2228^1901^24^^49^^^^1^PH^12^1^20^^Hetero SR with Transfusion recepient Yes
"TEMP","RORCDCDEF",82)
chkb5_8_2=^^2316^1901^24^^49^^^^1^PH^12^0^20^^Hetero SR with Transfusion recepient No
"TEMP","RORCDCDEF",83)
chkb5_8_3=^^2399^1901^24^^49^^^^1^PH^12^9^20^^Hetero SR with Transfusion recepient Unk
"TEMP","RORCDCDEF",84)
chkb5_7_1=^^2228^1855^24^^49^^^^1^PH^11^1^20^^Hetero SR with Hemofilia Yes
"TEMP","RORCDCDEF",85)
chkb5_7_2=^^2316^1855^24^^49^^^^1^PH^11^0^20^^Hetero SR with Hemofilia  No
"TEMP","RORCDCDEF",86)
chkb5_7_3=^^2398^1855^24^^49^^^^1^PH^11^9^20^^Hetero SR with Hemofilia Unk
"TEMP","RORCDCDEF",87)
chkb5_6_1=^^2228^1809^24^^49^^^^1^PH^9^1^20^^Hetero SR with Bisexual  male Yes
"TEMP","RORCDCDEF",88)
chkb5_6_2=^^2316^1809^24^^49^^^^1^PH^9^0^20^^Hetero SR with Bisexual  male No
"TEMP","RORCDCDEF",89)
chkb5_6_3=^^2398^1809^24^^49^^^^1^PH^9^9^20^^Hetero SR with Bisexual  male Unk
"TEMP","RORCDCDEF",90)
chkb5_5_1=^^2228^1763^24^^49^^^^1^PH^10^1^20^^Hetero SR with Intravenoue Yes
"TEMP","RORCDCDEF",91)
chkb5_5_2=^^2316^1763^24^^49^^^^1^PH^10^0^20^^Hetero SR with Intravenoue No
"TEMP","RORCDCDEF",92)
chkb5_5_3=^^2398^1763^24^^49^^^^1^PH^10^9^20^^Hetero SR with Intravenoue Unk
"TEMP","RORCDCDEF",93)
chkb5_4_1=^^2228^1601^24^^49^^^^1^PH^6^1^20^^Receiving Clotting Factor  Yes
"TEMP","RORCDCDEF",94)
chkb5_4_2=^^2316^1601^24^^49^^^^1^PH^6^0^20^^Receiving Clotting Factor  No
"TEMP","RORCDCDEF",95)
chkb5_4_3=^^2399^1601^24^^49^^^^1^PH^6^9^20^^Receiving Clotting Factor  Unk
"TEMP","RORCDCDEF",96)
chkb5_4_4=^^1167^1642^27^^49^^^^1^PH^7^1^20^^Receiving Clotting Factor VIII
"TEMP","RORCDCDEF",97)
chkb5_4_5=^^1429^1642^27^^49^^^^1^PH^7^2^20^^Receiving Clotting Factor IX
"TEMP","RORCDCDEF",98)
chkb5_4_6=^^1708^1642^27^^49^^^^1^PH^7^8^20^^Receiving Clotting Factor  Other
"TEMP","RORCDCDEF",99)
edt5_4_1=^^1901^1672^22^^49^^^^1^PH^8^^20^^Receiving Clotting Factor  Other Name
"TEMP","RORCDCDEF",100)
chkb5_3_1=^^2228^1555^24^^49^^^^1^PH^5^1^20^^Injected Drug Yes
"TEMP","RORCDCDEF",101)
chkb5_3_2=^^2316^1555^24^^49^^^^1^PH^5^0^20^^Injected Drug No
"TEMP","RORCDCDEF",102)
chkb5_3_3=^^2398^1555^24^^49^^^^1^PH^5^9^20^^Injected Drug Unk
"TEMP","RORCDCDEF",103)
chkb5_2_1=^^2228^1509^24^^49^^^^1^PH^4^1^20^^Sex With Female Yes
"TEMP","RORCDCDEF",104)
chkb5_2_2=^^2316^1509^24^^49^^^^1^PH^4^0^20^^Sex With Female No
"TEMP","RORCDCDEF",105)
chkb5_2_3=^^2398^1509^24^^49^^^^1^PH^4^9^20^^Sex With Female Unk
"TEMP","RORCDCDEF",106)
chkb5_1_1=^^2228^1463^24^^49^^^^1^PH^3^1^20^^Sex With Male Yes
"TEMP","RORCDCDEF",107)
chkb5_1_2=^^2316^1463^24^^49^^^^1^PH^3^0^20^^Sex With Male No
"TEMP","RORCDCDEF",108)
chkb5_1_3=^^2399^1463^24^^49^^^^1^PH^3^9^20^^Sex With Male Unk
"TEMP","RORCDCDEF",109)
chkb6_8_1=^^2228^2563^24^^49^^^^1^LD2^5^1^14^^HIV-1 Yes
"TEMP","RORCDCDEF",110)
chkb6_8_2=^^2308^2563^24^^49^^^^1^LD2^5^0^14^^HIV-1 No
"TEMP","RORCDCDEF",111)
chkb6_8_3=^^2387^2563^24^^49^^^^1^LD2^5^9^14^^HIV-1 Unk
"TEMP","RORCDCDEF",112)
edt6_8_1=^^2230^2656^30^MMYY^50^170^^^1^LD2^6^^14^MM/YY^HIV Diagnosis by Physician Date
"TEMP","RORCDCDEF",113)
edt6_7_1=^^2230^2448^30^MMYY^50^170^^^1^LD2^4^^14^MM/YY^Lst Documented negative HIV Date
"TEMP","RORCDCDEF",114)
edt6_7_2=^^1557^2469^22^^49^^^^1^LD2^3^^14^^Lst Documented negative HIV Name
"TEMP","RORCDCDEF",115)
edt6_4_1=^^1046^2664^30^MMYY^50^170^^^1^LD1^10^^18^MM/YY^VI. Other HIV Test Date
"TEMP","RORCDCDEF",116)
chkb6_4_1=^^746^2671^27^^49^^^^1^LD1^9^1^18^^VI. Other HIV Test Pos
"TEMP","RORCDCDEF",117)
chkb6_4_2=^^821^2671^27^^49^^^^1^LD1^9^0^18^^VI. Other HIV Test Neg
"TEMP","RORCDCDEF",118)
chkb6_4_3=^^895^2671^27^^49^^^^1^LD1^9^8^18^^VI. Other HIV Test Ind
"TEMP","RORCDCDEF",119)
chkb6_4_4=^^966^2671^27^^49^^^^1^LD1^9^9^18^^VI. Other HIV Not Done
"TEMP","RORCDCDEF",120)
edt6_4_2=^^315^2718^22^^49^^^^1^LD1^11^^18^^VI. Other HIV Test Name
"TEMP","RORCDCDEF",121)
edt6_3_1=^^1046^2598^30^MMYY^50^170^^^1^LD1^8^^18^MM/YY^VI. HIV-1 Western Date
"TEMP","RORCDCDEF",122)
chkb6_3_1=^^746^2605^26^^49^^^^1^LD1^7^1^18^^VI. HIV-1 Western Yes
"TEMP","RORCDCDEF",123)
chkb6_3_2=^^821^2605^26^^49^^^^1^LD1^7^0^18^^VI. HIV-1 Western No
"TEMP","RORCDCDEF",124)
chkb6_3_3=^^896^2605^26^^49^^^^1^LD1^7^8^18^^VI. HIV-1 Western Ind
"TEMP","RORCDCDEF",125)
chkb6_3_4=^^967^2605^26^^49^^^^1^LD1^7^9^18^^VI. HIV-1 Western Not Done
"TEMP","RORCDCDEF",126)
edt6_2_1=^^1046^2531^30^MMYY^50^170^^^1^LD1^6^^18^MM/YY^VI. HIV-1/2 Date
"TEMP","RORCDCDEF",127)
chkb6_2_1=^^746^2538^27^^49^^^^1^LD1^5^1^18^^VI. HIV 1/2 Pos
"TEMP","RORCDCDEF",128)
chkb6_2_2=^^820^2538^27^^49^^^^1^LD1^5^0^18^^VI. HIV 1/2 Neg
"TEMP","RORCDCDEF",129)
chkb6_2_3=^^967^2538^27^^49^^^^1^LD1^5^9^18^^VI. HIV 1/2 Not Done
"TEMP","RORCDCDEF",130)
edt6_1_1=^^1046^2465^30^MMYY^50^170^^^1^LD1^4^^18^MM/YY^VI. HIV-1 EAI Date
"TEMP","RORCDCDEF",131)
chkb6_1_1=^^746^2471^27^^49^^^^1^LD1^3^1^18^^VI. HIV-1 EAI Pos
"TEMP","RORCDCDEF",132)
chkb6_1_2=^^821^2471^27^^49^^^^1^LD1^3^0^18^^VI. HIV-1 EAI Neg
"TEMP","RORCDCDEF",133)
chkb6_1_3=^^966^2471^27^^49^^^^1^LD1^3^9^18^^VI. HIV-1 EAI  Not Done
"TEMP","RORCDCDEF",134)
edt6_5_1=^^1046^2836^30^MMYY^50^170^^^1^LD1^13^^18^MM/YY^VI. Positive HIV Detection Date
"TEMP","RORCDCDEF",135)
edt6_5_2=^^399^2908^22^^49^^^^1^LD1^14^^18^^VI. Positive HIV Detection Other Test Type
"TEMP","RORCDCDEF",136)
edt6_5_3=^^1046^2902^30^MMYY^50^170^^^1^LD1^15^^18^MM/YY^VI. Positive HIV Detection Other Date
"TEMP","RORCDCDEF",137)
chkb6_5_1=^^162^2838^27^^49^^^^1^LD1^12^1^18^^VI. Positive HIV Detection Culture
"TEMP","RORCDCDEF",138)
chkb6_5_2=^^337^2838^27^^49^^^^1^LD1^12^2^18^^VI. Positive HIV Detection Antigen
"TEMP","RORCDCDEF",139)
chkb6_5_3=^^524^2838^27^^49^^^^1^LD1^12^3^18^^VI. Positive HIV Detection PCR, DNA or RNA Probe 
"TEMP","RORCDCDEF",140)
edt6_6_2=^^1046^3074^30^MMYY^50^170^^^1^LD1^18^^18^MM/YY^VI. VIRAL LOAD TEST DATE
"TEMP","RORCDCDEF",141)
cmbb6_6_1=^^301^3073^30^BoxedLine^49^2^^^1^LD1^16^^18^^VI. VIRAL LOAD TEST TYPE 
"TEMP","RORCDCDEF",142)
edt6_6_1=^^517^3073^30^N7^50^29^125^^1^LD1^17^^18^^VI. VIRAL LOAD  COPIES/ML
"TEMP","RORCDCDEF",143)
edt6_9_2=^^2230^2877^30^MMYY^50^170^^^1^LD2^8^^14^MM/YY^VI. IMMUNOLOGY LAB CD4 Count Date
"TEMP","RORCDCDEF",144)
edt6_9_4=^^2230^2944^30^MMYY^50^170^^^1^LD2^10^^14^MM/YY^VI. IMMUNOLOGY LAB CD4 Percent Date
"TEMP","RORCDCDEF",145)
edt6_9_6=^^2230^3058^30^MMYY^50^170^^^1^LD2^12^^14^MM/YY^VI. IMMUNOLOGY LAB First <200ml CD4 Count Date
"TEMP","RORCDCDEF",146)
edt6_9_8=^^2230^3123^30^MMYY^50^170^^^1^LD2^14^^14^MM/YY^VI. IMMUNOLOGY LAB First <200ml CD4 Percent Date
"TEMP","RORCDCDEF",147)
edt6_9_3=^^1938^2944^30^BoxedLine^49^2^^^1^LD2^9^^14^^VI. IMMUNOLOGY LAB CD4 Percent
"TEMP","RORCDCDEF",148)
edt6_9_1=^^1811^2877^30^N4^49^30^^^1^LD2^7^^14^^VI. IMMUNOLOGY LAB CD4 Count
"TEMP","RORCDCDEF",149)
edt6_9_5=^^1810^3057^30^N4^49^30^^^1^LD2^11^^14^^VI. IMMUNOLOGY LAB First <200ml CD4 Count
"TEMP","RORCDCDEF",150)
edt6_9_7=^^1939^3123^30^BoxedLine^49^2^^^1^LD2^13^^14^^VI. IMMUNOLOGY LAB First <200ml CD4 Percent
"TEMP","RORCDCDEF",151)
edt7_1=^^380^111^22^^49^^^^2^^^^^^VII. Physician
"TEMP","RORCDCDEF",152)
edt7_5=^^1320^184^22^PlainLine^49^^^^2^^^^^^VII. Person, compiling form
"TEMP","RORCDCDEF",153)
edt7_3=^^1455^111^22^^49^^^^2^^^^^^VII. Physician Phone
"TEMP","RORCDCDEF",154)
edt7_6=^^2005^184^22^^49^^^^2^^^^^^VII. Person compiling phone
"TEMP","RORCDCDEF",155)
edt7_4=^^355^184^22^^49^^^^2^^^^^^VII. Hospital
"TEMP","RORCDCDEF",156)
edt7_2=^^2140^111^22^^49^^^^2^^^^^^VII. Medical Record Num
"TEMP","RORCDCDEF",157)
edt8_27_1=^^2185^1640^30^MMYY^50^158^^26^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",158)
chkb8_27_1=^^2016^1642^27^^49^^^26^2^AID^3^1^4^^
"TEMP","RORCDCDEF",159)
edt8_26_1=^^2185^1553^30^MMYY^50^158^^25^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",160)
chkb8_26_1=^^2017^1555^26^^49^^^25^2^AID^3^1^4^^
"TEMP","RORCDCDEF",161)
chkb8_26_2=^^2100^1555^26^^49^^^25^2^AID^3^2^4^^
"TEMP","RORCDCDEF",162)
edt8_25_1=^^2185^1464^30^MMYY^50^158^^24^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",163)
chkb8_25_1=^^2016^1467^27^PlainLine^49^1^^24^2^AID^3^1^4^^
"TEMP","RORCDCDEF",164)
edt8_24_1=^^2185^1378^30^MMYY^50^158^^23^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",165)
chkb8_24_1=^^2016^1380^26^^49^^^23^2^AID^3^1^26^^
"TEMP","RORCDCDEF",166)
edt8_23_1=^^2185^1290^30^MMYY^50^158^^22^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",167)
chkb8_23_1=^^2016^1292^27^^49^^^22^2^AID^3^1^4^^
"TEMP","RORCDCDEF",168)
chkb8_23_2=^^2104^1292^27^^49^^^22^2^AID^3^2^4^^
"TEMP","RORCDCDEF",169)
edt8_22_1=^^2185^1204^30^MMYY^50^158^^21^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",170)
chkb8_22_1=^^2017^1205^26^^49^^^21^2^AID^3^1^4^^
"TEMP","RORCDCDEF",171)
chkb8_22_2=^^2104^1205^26^^49^^^21^2^AID^3^2^4^^
"TEMP","RORCDCDEF",172)
edt8_21_1=^^2185^1115^30^MMYY^50^158^^20^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",173)
chkb8_21_1=^^2016^1117^27^^49^^^20^2^AID^3^1^4^^
"TEMP","RORCDCDEF",174)
chkb8_21_2=^^2104^1117^27^^49^^^20^2^AID^3^2^4^^
"TEMP","RORCDCDEF",175)
edt8_20_1=^^2185^1028^30^MMYY^50^158^^19^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",176)
chkb8_20_1=^^2017^1034^26^^49^^^19^2^AID^3^1^4^^
"TEMP","RORCDCDEF",177)
chkb8_20_2=^^2104^1034^26^^49^^^19^2^AID^3^2^4^^
"TEMP","RORCDCDEF",178)
edt8_19_1=^^2185^941^30^MMYY^50^158^^18^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",179)
chkb8_19_1=^^2016^942^27^^49^^^18^2^AID^3^1^4^^
"TEMP","RORCDCDEF",180)
chkb8_19_2=^^2104^942^27^^49^^^18^2^AID^3^2^4^^
"TEMP","RORCDCDEF",181)
edt8_18_1=^^2185^853^30^MMYY^50^158^^17^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",182)
chkb8_18_1=^^2017^855^26^^49^^^17^2^AID^3^1^4^^
"TEMP","RORCDCDEF",183)
chkb8_18_2=^^2104^855^26^PlainLine^49^^^17^2^AID^3^2^4^^
"TEMP","RORCDCDEF",184)
edt8_17_1=^^2185^765^30^MMYY^50^158^^16^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",185)
chkb8_17_1=^^2016^767^27^^49^^^16^2^AID^3^1^4^^
"TEMP","RORCDCDEF",186)
edt8_16_1=^^2185^676^30^MMYY^50^158^^15^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",187)
chkb8_16_1=^^2017^680^26^^49^^^15^2^AID^3^1^4^^
"TEMP","RORCDCDEF",188)
edt8_15_1=^^2185^590^30^MMYY^50^158^^14^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",189)
chkb8_15_1=^^2016^592^27^^49^^^14^2^AID^3^1^4^^
"TEMP","RORCDCDEF",190)
edt8_14_1=^^1019^1640^30^MMYY^50^158^^13^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",191)
chkb8_14_1=^^846^1642^27^^49^^^13^2^AID^3^1^4^^
"TEMP","RORCDCDEF",192)
chkb8_14_2=^^933^1642^27^^49^^^13^2^AID^3^2^4^^
"TEMP","RORCDCDEF",193)
edt8_13_1=^^1019^1552^30^MMYY^50^158^^12^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",194)
chkb8_13_1=^^846^1555^26^^49^^^12^2^AID^3^1^4^^
"TEMP","RORCDCDEF",195)
edt8_12_1=^^1019^1465^30^MMYY^50^158^^11^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",196)
chkb8_12_1=^^845^1467^27^^49^^^11^2^AID^3^1^4^^
"TEMP","RORCDCDEF",197)
edt8_11_1=^^1019^1376^30^MMYY^50^158^^10^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",198)
chkb8_11_1=^^846^1380^26^^49^^^10^2^AID^3^1^4^^
"TEMP","RORCDCDEF",199)
edt8_10_1=^^1019^1289^30^MMYY^50^158^^9^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",200)
chkb8_10_1=^^846^1292^27^^49^^^9^2^AID^3^1^4^^
"TEMP","RORCDCDEF",201)
edt8_9_1=^^1019^1202^30^MMYY^50^158^^8^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",202)
chkb8_9_1=^^846^1205^26^^49^^^8^2^AID^3^1^4^^
"TEMP","RORCDCDEF",203)
chkb8_9_2=^^934^1205^26^^49^^^8^2^AID^3^2^4^^
"TEMP","RORCDCDEF",204)
edt8_8_1=^^1019^1115^30^MMYY^50^158^^7^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",205)
chkb8_8_1=^^846^1117^27^^49^^^7^2^AID^3^1^4^^
"TEMP","RORCDCDEF",206)
edt8_7_1=^^1019^1029^30^MMYY^50^158^^6^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",207)
chkb8_7_1=^^846^1034^26^^49^^^6^2^AID^3^1^4^^
"TEMP","RORCDCDEF",208)
edt8_6_1=^^1019^941^30^MMYY^50^158^^5^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",209)
chkb8_6_1=^^846^946^27^^49^^^5^2^AID^3^1^4^^
"TEMP","RORCDCDEF",210)
edt8_5_1=^^1019^853^30^MMYY^50^158^^4^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",211)
chkb8_5_1=^^846^855^26^^49^^^4^2^AID^3^1^4^^
"TEMP","RORCDCDEF",212)
edt8_4_1=^^1019^765^30^MMYY^50^158^^3^2^AID^4^^4^MM/YY^
"TEMP","RORCDCDEF",213)
chkb8_4_1=^^846^767^27^^49^^^3^2^AID^3^1^4^^
"TEMP","RORCDCDEF",214)
edt8_3_1=^^1019^678^30^MMYY^50^158^^2^2^AID^4^^4^MM/YY^VIII. Candidiasis, esophagel Date
"TEMP","RORCDCDEF",215)
chkb8_3_1=^^846^684^26^^49^^^2^2^AID^3^1^4^^VIII. Candidiasis, esophagel Def
"TEMP","RORCDCDEF",216)
chkb8_3_2=^^934^684^26^^49^^^2^2^AID^3^2^4^^VIII. Candidiasis, esophagel Pres
"TEMP","RORCDCDEF",217)
edt8_2_1=^^1019^591^30^MMYY^50^158^^1^2^AID^4^^4^MM/YY^VIII. Candidiasis, Bronchi, trachea Date
"TEMP","RORCDCDEF",218)
chkb8_2_1=^^846^596^27^^49^^^1^2^AID^3^1^4^^VIII. Candidiasis, Bronchi, trachea Def
"TEMP","RORCDCDEF",219)
chkb8_1=^^471^417^27^^49^^^^2^CS^3^1^7^^VIII. Record Rewieved yes
"TEMP","RORCDCDEF",220)
chkb8_2=^^566^417^27^^49^^^^2^CS^3^0^7^^VIII. Record Rewieved No
"TEMP","RORCDCDEF",221)
edt8_1_1=^^1667^420^30^MMYY^50^155^^^2^CS^4^^7^MM/YY^VIII Asymptomatic Date
"TEMP","RORCDCDEF",222)
edt8_1_2=^^2188^419^30^MMYY^50^155^^^2^CS^5^^7^MM/YY^Symptomatic Date
"TEMP","RORCDCDEF",223)
edt8_1=^^1622^1724^30^BoxedLine^46^9^^^2^CS^6^^7^^RVCT CASE NO
"TEMP","RORCDCDEF",224)
chkb8_28_1=^^1396^1813^27^PlainLine^49^^^^2^CS^7^1^7^^VIII. Immunideficiency disqualifying from AIDS Yes
"TEMP","RORCDCDEF",225)
chkb8_28_2=^^1563^1813^27^^49^^^^2^CS^7^0^7^^VIII. Immunideficiency disqualifying from AIDS No
"TEMP","RORCDCDEF",226)
chkb8_28_3=^^1712^1813^27^^49^^^^2^CS^7^9^7^^VIII. Immunideficiency disqualifying from AIDS Unk
"TEMP","RORCDCDEF",227)
chkb9_8_1=^^1142^2255^26^^49^^^^2^TS1^10^1^11^^Clinic (HRSA)
"TEMP","RORCDCDEF",228)
chkb9_8_2=^^1142^2305^26^^49^^^^2^TS1^10^2^11^^Clinic (Other)
"TEMP","RORCDCDEF",229)
chkb9_8_4=^^1142^2405^26^^49^^^^2^TS1^10^9^11^^Clinic (None)
"TEMP","RORCDCDEF",230)
chkb9_8_3=^^1142^2355^26^^49^^^^2^TS1^10^3^11^^Clinic (Unknown)
"TEMP","RORCDCDEF",231)
chkb9_6_1=^^467^2392^27^^49^^^^2^TS1^8^1^11^^PCP prophylaxis Yes
"TEMP","RORCDCDEF",232)
chkb9_6_2=^^550^2392^27^^49^^^^2^TS1^8^0^11^^PCP prophylaxis No
"TEMP","RORCDCDEF",233)
chkb9_6_3=^^632^2392^27^^49^^^^2^TS1^8^9^11^^PCP prophylaxis Unk
"TEMP","RORCDCDEF",234)
chkb9_12_1=^^1241^2588^27^^49^^^^2^TS2^5^1^9^^IX. Live Infant delivered  Yes
"TEMP","RORCDCDEF",235)
chkb9_12_2=^^2100^2588^27^^49^^^^2^TS2^5^0^9^^IX. Live Infant delivered  No
"TEMP","RORCDCDEF",236)
chkb9_12_3=^^2250^2588^27^^49^^^^2^TS2^5^3^9^^IX. Live Infant delivered  Unk
"TEMP","RORCDCDEF",237)
edt9_12_2=^^1417^2758^30^BoxedLine^49^4^^^2^TS2^^^9^^IX. Live Infant delivered Child SOUNDEX ????
"TEMP","RORCDCDEF",238)
edt9_12_5=^^1942^2751^30^BoxedLine^50^10^^^2^TS2^^^9^^IX. Live Infant delivered  Child State Patient # 
"TEMP","RORCDCDEF",239)
dtp9_12_1=^^164^2761^30^MMDDYY^49^106^^^2^TS2^6^^9^^IX. Live Infant delivered  Date of Birth
"TEMP","RORCDCDEF",240)
edt9_12_3=^^615^2772^22^^49^^^^2^TS2^8^^9^^IX. Live Infant delivered  City
"TEMP","RORCDCDEF",241)
edt9_12_1=^^769^2700^22^^49^^^^2^TS2^7^^9^^IX. Live Infant delivered  Hospital
"TEMP","RORCDCDEF",242)
cmbb9_12_1=^^1037^2772^22^^49^^^^2^TS2^9^^9^^IX. Live Infant delivered  State
"TEMP","RORCDCDEF",243)
chkb9_11_1=^^1934^2534^26^^49^^^^2^TS2^4^1^9^^IX. Is  patient pregnant Yes
"TEMP","RORCDCDEF",244)
chkb9_11_2=^^2101^2534^26^^49^^^^2^TS2^4^0^9^^IX. Is  patient pregnant No
"TEMP","RORCDCDEF",245)
chkb9_11_3=^^2251^2534^26^^49^^^^2^TS2^4^9^9^^IX. Is  patient pregnant Unk
"TEMP","RORCDCDEF",246)
chkb9_4_1=^^2146^2105^26^^49^^^^2^TS1^6^1^11^^Substance abuse Yes
"TEMP","RORCDCDEF",247)
chkb9_4_2=^^2229^2105^26^^49^^^^2^TS1^6^0^11^^Substance abuse No
"TEMP","RORCDCDEF",248)
chkb9_4_4=^^2392^2105^26^^49^^^^2^TS1^6^9^11^^Substance abuse Unk
"TEMP","RORCDCDEF",249)
chkb9_4_3=^^2313^2105^26^^49^^^^2^TS1^6^8^11^^Substance abuse NA
"TEMP","RORCDCDEF",250)
chkb9_3_1=^^2146^2050^27^^49^^^^2^TS1^5^1^11^^HIV med. services Yes
"TEMP","RORCDCDEF",251)
chkb9_3_2=^^2229^2050^27^^49^^^^2^TS1^5^0^11^^HIV med. services No
"TEMP","RORCDCDEF",252)
chkb9_3_3=^^2392^2050^27^^49^^^^2^TS1^5^9^11^^HIV med. services Unk
"TEMP","RORCDCDEF",253)
chkb9_2_1=^^229^2109^26^^49^^^^2^TS1^4^1^11^^Notified Health department
"TEMP","RORCDCDEF",254)
chkb9_2_3=^^625^2109^26^^49^^^^2^TS1^4^2^11^^Notified Physician/Provider
"TEMP","RORCDCDEF",255)
chkb9_2_2=^^1030^2109^26^^49^^^^2^TS1^4^3^11^^Notified Patient
"TEMP","RORCDCDEF",256)
chkb9_2_4=^^1263^2109^26^^49^^^^2^TS1^4^9^11^^Notified Unk
"TEMP","RORCDCDEF",257)
chkb9_1_1=^^996^1992^27^^49^^^^2^TS1^3^1^11^^Informed of HIV Yes
"TEMP","RORCDCDEF",258)
chkb9_1_2=^^1162^1992^27^^49^^^^2^TS1^3^0^11^^Informed of HIV No
"TEMP","RORCDCDEF",259)
chkb9_1_3=^^1312^1992^27^^49^^^^2^TS1^3^9^11^^Informed of HIV Unk
"TEMP","RORCDCDEF",260)
chkb9_5_1=^^468^2280^26^^49^^^^2^TS1^7^1^11^^ARV therapy Yes
"TEMP","RORCDCDEF",261)
chkb9_5_2=^^550^2280^26^^49^^^^2^TS1^7^0^11^^ARV therapy No
"TEMP","RORCDCDEF",262)
chkb9_5_3=^^634^2280^26^^49^^^^2^TS1^7^9^11^^ARV therapy Unk
"TEMP","RORCDCDEF",263)
chkb9_7_1=^^784^2255^26^^49^^^^2^TS1^9^1^11^^Clinical Trial NIH
"TEMP","RORCDCDEF",264)
chkb9_7_2=^^784^2305^26^^49^^^^2^TS1^9^2^11^^Clinical Trial Other
"TEMP","RORCDCDEF",265)
chkb9_7_4=^^784^2405^26^^49^^^^2^TS1^9^9^11^^Clinical Trial Unkn
"TEMP","RORCDCDEF",266)
chkb9_7_3=^^784^2355^26^^49^^^^2^TS1^9^3^11^^Clinical Trial None
"TEMP","RORCDCDEF",267)
chkb9_9_1=^^1621^2255^26^^49^^^^2^TS1^11^1^11^^Reimburse Medicaid
"TEMP","RORCDCDEF",268)
chkb9_9_3=^^1621^2309^26^^49^^^^2^TS1^11^3^11^^Reimbursed No coverage
"TEMP","RORCDCDEF",269)
chkb9_9_2=^^2000^2255^26^^49^^^^2^TS1^11^2^11^^Reimbursed HMO
"TEMP","RORCDCDEF",270)
chkb9_9_4=^^2001^2309^26^^49^^^^2^TS1^11^4^11^^Reimbursed Other
"TEMP","RORCDCDEF",271)
chkb9_9_5=^^1621^2363^27^^49^^^^2^TS1^11^7^11^^Reimbursed Trial
"TEMP","RORCDCDEF",272)
chkb9_9_6=^^2000^2363^27^^49^^^^2^TS1^11^9^11^^Reimbursed Unk
"TEMP","RORCDCDEF",273)
chkb9_10_1=^^1934^2480^26^^49^^^^2^TS2^3^1^9^^Gynecol. services Yes
"TEMP","RORCDCDEF",274)
chkb9_10_2=^^2101^2480^26^^49^^^^2^TS2^3^0^9^^Gynecol. services No
"TEMP","RORCDCDEF",275)
chkb9_10_3=^^2251^2480^26^^49^^^^2^TS2^3^9^9^^Gynecol. services Unk
"TEMP","RORCDCDEF",276)
mmComments=^^420^2864^30^MEMO^65^^^^2^CMT^3^^3^^
"TEMP","RORPRTDEF",1)
13::AIDS Defining Illness (1993)
"TEMP","RORPRTDEF",1,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",1,2)
<PARAMS>
"TEMP","RORPRTDEF",1,3)
<ICD9LST>
"TEMP","RORPRTDEF",1,4)
<GROUP ID="AIDS Defining Illness (1993)">
"TEMP","RORPRTDEF",1,5)
<ICD9 ID="003.1">SALMONELLA SEPTICEMIA</ICD9>
"TEMP","RORPRTDEF",1,6)
<ICD9 ID="007.2">COCCIDIOSIS</ICD9>
"TEMP","RORPRTDEF",1,7)
<ICD9 ID="007.4">OTH PROTOZO INTES DIS, CRYPTO</ICD9>
"TEMP","RORPRTDEF",1,8)
<ICD9 ID="013.00">TB MENINGITIS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,9)
<ICD9 ID="013.01">TB MENINGITIS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,10)
<ICD9 ID="013.02">TB MENINGITIS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,11)
<ICD9 ID="013.03">TB MENINGITIS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,12)
<ICD9 ID="013.04">TB MENINGITIS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,13)
<ICD9 ID="013.05">TB MENINGITIS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,14)
<ICD9 ID="013.06">TB MENINGITIS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,15)
<ICD9 ID="013.10">TUBRCLMA MENINGES-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,16)
<ICD9 ID="013.11">TUBRCLMA MENING-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,17)
<ICD9 ID="013.12">TUBRCLMA MENIN-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,18)
<ICD9 ID="013.13">TUBRCLMA MENING-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,19)
<ICD9 ID="013.14">TUBRCLMA MENING-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,20)
<ICD9 ID="013.15">TUBRCLMA MENING-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,21)
<ICD9 ID="013.16">TUBRCLMA MENING-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,22)
<ICD9 ID="013.20">TUBERCULOMA BRAIN-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,23)
<ICD9 ID="013.21">TUBRCLOMA BRAIN-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,24)
<ICD9 ID="013.22">TUBRCLMA BRAIN-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,25)
<ICD9 ID="013.23">TUBRCLOMA BRAIN-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,26)
<ICD9 ID="013.24">TUBRCLOMA BRAIN-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,27)
<ICD9 ID="013.25">TUBRCLOMA BRAIN-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,28)
<ICD9 ID="013.26">TUBRCLOMA BRAIN-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,29)
<ICD9 ID="013.30">TB BRAIN ABSCESS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,30)
<ICD9 ID="013.31">TB BRAIN ABSCESS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,31)
<ICD9 ID="013.32">TB BRAIN ABSC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,32)
<ICD9 ID="013.33">TB BRAIN ABSC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,33)
<ICD9 ID="013.34">TB BRAIN ABSCESS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,34)
<ICD9 ID="013.35">TB BRAIN ABSC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,35)
<ICD9 ID="013.36">TB BRAIN ABSC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,36)
<ICD9 ID="013.40">TUBRCLMA SP CORD-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,37)
<ICD9 ID="013.41">TUBRCLMA SP CORD-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,38)
<ICD9 ID="013.42">TUBRCLMA SP CD-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,39)
<ICD9 ID="013.43">TUBRCLMA SP CRD-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,40)
<ICD9 ID="013.44">TUBRCLMA SP CORD-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,41)
<ICD9 ID="013.45">TUBRCLMA SP CRD-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,42)
<ICD9 ID="013.46">TUBRCLMA SP CRD-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,43)
<ICD9 ID="013.50">TB SP CRD ABSCESS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,44)
<ICD9 ID="013.51">TB SP CRD ABSC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,45)
<ICD9 ID="013.52">TB SP CRD ABSC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,46)
<ICD9 ID="013.53">TB SP CRD ABSC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,47)
<ICD9 ID="013.54">TB SP CRD ABSC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,48)
<ICD9 ID="013.55">TB SP CRD ABSC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,49)
<ICD9 ID="013.56">TB SP CRD ABSC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,50)
<ICD9 ID="013.60">TB ENCEPHALITIS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,51)
<ICD9 ID="013.61">TB ENCEPHALITIS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,52)
<ICD9 ID="013.62">TB ENCEPHALIT-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,53)
<ICD9 ID="013.63">TB ENCEPHALITIS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,54)
<ICD9 ID="013.64">TB ENCEPHALITIS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,55)
<ICD9 ID="013.65">TB ENCEPHALITIS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,56)
<ICD9 ID="013.66">TB ENCEPHALITIS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,57)
<ICD9 ID="013.80">CNS TB NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,58)
<ICD9 ID="013.81">CNS TB NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,59)
<ICD9 ID="013.82">CNS TB NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,60)
<ICD9 ID="013.83">CNS TB NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,61)
<ICD9 ID="013.84">CNS TB NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,62)
<ICD9 ID="013.85">CNS TB NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,63)
<ICD9 ID="013.86">CNS TB NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,64)
<ICD9 ID="013.90">CNS TB NOS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,65)
<ICD9 ID="013.91">CNS TB NOS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,66)
<ICD9 ID="013.92">CNS TB NOS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,67)
<ICD9 ID="013.93">CNS TB NOS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,68)
<ICD9 ID="013.94">CNS TB NOS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,69)
<ICD9 ID="013.95">CNS TB NOS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,70)
<ICD9 ID="013.96">CNS TB NOS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,71)
<ICD9 ID="014.00">TB PERITONITIS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,72)
<ICD9 ID="014.01">TB PERITONITIS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,73)
<ICD9 ID="014.02">TB PERITONITIS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,74)
<ICD9 ID="014.03">TB PERITONITIS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,75)
<ICD9 ID="014.04">TB PERITONITIS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,76)
<ICD9 ID="014.05">TB PERITONITIS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,77)
<ICD9 ID="014.06">TB PERITONITIS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,78)
<ICD9 ID="014.80">INTESTINAL TB NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,79)
<ICD9 ID="014.81">INTESTIN TB NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,80)
<ICD9 ID="014.82">INTEST TB NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,81)
<ICD9 ID="014.83">INTESTIN TB NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,82)
<ICD9 ID="014.84">INTESTIN TB NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,83)
<ICD9 ID="014.85">INTESTIN TB NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,84)
<ICD9 ID="014.86">INTESTIN TB NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,85)
<ICD9 ID="015.00">TB OF VERTEBRA-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,86)
<ICD9 ID="015.01">TB OF VERTEBRA-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,87)
<ICD9 ID="015.02">TB OF VERTEBRA-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,88)
<ICD9 ID="015.03">TB OF VERTEBRA-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,89)
<ICD9 ID="015.04">TB OF VERTEBRA-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,90)
<ICD9 ID="015.05">TB OF VERTEBRA-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,91)
<ICD9 ID="015.06">TB OF VERTEBRA-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,92)
<ICD9 ID="015.10">TB OF HIP-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,93)
<ICD9 ID="015.11">TB OF HIP-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,94)
<ICD9 ID="015.12">TB OF HIP-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,95)
<ICD9 ID="015.13">TB OF HIP-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,96)
<ICD9 ID="015.14">TB OF HIP-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,97)
<ICD9 ID="015.15">TB OF HIP-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,98)
<ICD9 ID="015.16">TB OF HIP-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,99)
<ICD9 ID="015.20">TB OF KNEE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,100)
<ICD9 ID="015.21">TB OF KNEE-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,101)
<ICD9 ID="015.22">TB OF KNEE-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,102)
<ICD9 ID="015.23">TB OF KNEE-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,103)
<ICD9 ID="015.24">TB OF KNEE-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,104)
<ICD9 ID="015.25">TB OF KNEE-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,105)
<ICD9 ID="015.26">TB OF KNEE-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,106)
<ICD9 ID="015.50">TB OF LIMB BONES-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,107)
<ICD9 ID="015.51">TB LIMB BONES-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,108)
<ICD9 ID="015.52">TB LIMB BONES-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,109)
<ICD9 ID="015.53">TB LIMB BONES-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,110)
<ICD9 ID="015.54">TB LIMB BONES-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,111)
<ICD9 ID="015.55">TB LIMB BONES-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,112)
<ICD9 ID="015.56">TB LIMB BONES-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,113)
<ICD9 ID="015.60">TB OF MASTOID-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,114)
<ICD9 ID="015.61">TB OF MASTOID-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,115)
<ICD9 ID="015.62">TB OF MASTOID-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,116)
<ICD9 ID="015.63">TB OF MASTOID-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,117)
<ICD9 ID="015.64">TB OF MASTOID-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,118)
<ICD9 ID="015.65">TB OF MASTOID-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,119)
<ICD9 ID="015.66">TB OF MASTOID-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,120)
<ICD9 ID="015.70">TB OF BONE NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,121)
<ICD9 ID="015.71">TB OF BONE NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,122)
<ICD9 ID="015.72">TB OF BONE NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,123)
<ICD9 ID="015.73">TB OF BONE NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,124)
<ICD9 ID="015.74">TB OF BONE NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,125)
<ICD9 ID="015.75">TB OF BONE NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,126)
<ICD9 ID="015.76">TB OF BONE NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,127)
<ICD9 ID="015.80">TB OF JOINT NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,128)
<ICD9 ID="015.81">TB OF JOINT NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,129)
<ICD9 ID="015.82">TB JOINT NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,130)
<ICD9 ID="015.83">TB OF JOINT NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,131)
<ICD9 ID="015.84">TB OF JOINT NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,132)
<ICD9 ID="015.85">TB OF JOINT NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,133)
<ICD9 ID="015.86">TB OF JOINT NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,134)
<ICD9 ID="015.90">TB BONE/JOINT NOS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,135)
<ICD9 ID="015.91">TB BONE/JT NOS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,136)
<ICD9 ID="015.92">TB BONE/JT NOS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,137)
<ICD9 ID="015.93">TB BONE/JT NOS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,138)
<ICD9 ID="015.94">TB BONE/JT NOS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,139)
<ICD9 ID="015.95">TB BONE/JT NOS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,140)
<ICD9 ID="015.96">TB BONE/JT NOS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,141)
<ICD9 ID="016.00">TB OF KIDNEY-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,142)
<ICD9 ID="016.01">TB OF KIDNEY-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,143)
<ICD9 ID="016.02">TB OF KIDNEY-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,144)
<ICD9 ID="016.03">TB OF KIDNEY-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,145)
<ICD9 ID="016.04">TB OF KIDNEY-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,146)
<ICD9 ID="016.05">TB OF KIDNEY-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,147)
<ICD9 ID="016.06">TB OF KIDNEY-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,148)
<ICD9 ID="016.10">TB OF BLADDER-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,149)
<ICD9 ID="016.11">TB OF BLADDER-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,150)
<ICD9 ID="016.12">TB OF BLADDER-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,151)
<ICD9 ID="016.13">TB OF BLADDER-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,152)
<ICD9 ID="016.14">TB OF BLADDER-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,153)
<ICD9 ID="016.15">TB OF BLADDER-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,154)
<ICD9 ID="016.16">TB OF BLADDER-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,155)
<ICD9 ID="016.20">TB OF URETER-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,156)
<ICD9 ID="016.21">TB OF URETER-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,157)
<ICD9 ID="016.22">TB OF URETER-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,158)
<ICD9 ID="016.23">TB OF URETER-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,159)
<ICD9 ID="016.24">TB OF URETER-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,160)
<ICD9 ID="016.25">TB OF URETER-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,161)
<ICD9 ID="016.26">TB OF URETER-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,162)
<ICD9 ID="016.30">TB URINARY NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,163)
<ICD9 ID="016.31">TB URINARY NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,164)
<ICD9 ID="016.32">TB URINARY NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,165)
<ICD9 ID="016.33">TB URINARY NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,166)
<ICD9 ID="016.34">TB URINARY NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,167)
<ICD9 ID="016.35">TB URINARY NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,168)
<ICD9 ID="016.36">TB URINARY NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,169)
<ICD9 ID="016.40">TB EPIDIDYMIS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,170)
<ICD9 ID="016.41">TB EPIDIDYMIS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,171)
<ICD9 ID="016.42">TB EPIDIDYMIS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,172)
<ICD9 ID="016.43">TB EPIDIDYMIS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,173)
<ICD9 ID="016.44">TB EPIDIDYMIS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,174)
<ICD9 ID="016.45">TB EPIDIDYMIS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,175)
<ICD9 ID="016.46">TB EPIDIDYMIS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,176)
<ICD9 ID="016.50">TB MALE GENIT NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,177)
<ICD9 ID="016.51">TB MALE GEN NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,178)
<ICD9 ID="016.52">TB MALE GEN NEC-EX UNKN</ICD9>
"TEMP","RORPRTDEF",1,179)
<ICD9 ID="016.53">TB MALE GEN NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,180)
<ICD9 ID="016.54">TB MALE GEN NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,181)
<ICD9 ID="016.55">TB MALE GEN NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,182)
<ICD9 ID="016.56">TB MALE GEN NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,183)
<ICD9 ID="016.60">TB OVARY TUBE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,184)
<ICD9 ID="016.61">TB OVARY TUBE-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,185)
<ICD9 ID="016.62">TB OVARY/TUBE-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,186)
<ICD9 ID="016.63">TB OVARY TUBE-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,187)
<ICD9 ID="016.64">TB OVARY TUBE-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,188)
<ICD9 ID="016.65">TB OVARY TUBE-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,189)
<ICD9 ID="016.66">TB OVARY TUBE-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,190)
<ICD9 ID="016.70">TB FEMALE GEN NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,191)
<ICD9 ID="016.71">TB FEM GEN NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,192)
<ICD9 ID="016.72">TB FEM GEN NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,193)
<ICD9 ID="016.73">TB FEM GEN NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,194)
<ICD9 ID="016.74">TB FEM GEN NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,195)
<ICD9 ID="016.75">TB FEM GEN NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,196)
<ICD9 ID="016.76">TB FEM GEN NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,197)
<ICD9 ID="016.90">GU TB NOS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,198)
<ICD9 ID="016.91">GU TB NOS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,199)
<ICD9 ID="016.92">GU TB NOS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,200)
<ICD9 ID="016.93">GU TB NOS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,201)
<ICD9 ID="016.94">GU TB NOS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,202)
<ICD9 ID="016.95">GU TB NOS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,203)
<ICD9 ID="016.96">GU TB NOS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,204)
<ICD9 ID="017.00">TB SKIN/SUBCUTAN-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,205)
<ICD9 ID="017.01">TB SKIN/SUBCUT-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,206)
<ICD9 ID="017.02">TB SKIN/SUBCUT-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,207)
<ICD9 ID="017.03">TB SKIN/SUBCUT-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,208)
<ICD9 ID="017.04">TB SKIN/SUBCUT-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,209)
<ICD9 ID="017.05">TB SKIN/SUBCUT-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,210)
<ICD9 ID="017.06">TB SKIN/SUBCUT-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,211)
<ICD9 ID="017.10">ERYTHEMA NODOS TB-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,212)
<ICD9 ID="017.11">ERYTHEM NODOS TB-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,213)
<ICD9 ID="017.12">ERYTHEM NOD TB-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,214)
<ICD9 ID="017.13">ERYTHEM NOD TB-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,215)
<ICD9 ID="017.14">ERYTHEM NODOS TB-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,216)
<ICD9 ID="017.15">ERYTHEM NOD TB-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,217)
<ICD9 ID="017.16">ERYTHEM NOD TB-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,218)
<ICD9 ID="017.20">TB PERIPH LYMPH-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,219)
<ICD9 ID="017.21">TB PERIPH LYMPH-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,220)
<ICD9 ID="017.22">TB PERIPH LYMPH-EXAM UNK</ICD9>
"TEMP","RORPRTDEF",1,221)
<ICD9 ID="017.23">TB PERIPH LYMPH-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,222)
<ICD9 ID="017.24">TB PERIPH LYMPH-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,223)
<ICD9 ID="017.25">TB PERIPH LYMPH-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,224)
<ICD9 ID="017.26">TB PERIPH LYMPH-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,225)
<ICD9 ID="017.30">TB OF EYE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,226)
<ICD9 ID="017.31">TB OF EYE-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,227)
<ICD9 ID="017.32">TB OF EYE-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,228)
<ICD9 ID="017.33">TB OF EYE-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,229)
<ICD9 ID="017.34">TB OF EYE-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,230)
<ICD9 ID="017.35">TB OF EYE-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,231)
<ICD9 ID="017.36">TB OF EYE-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,232)
<ICD9 ID="017.40">TB OF EAR-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,233)
<ICD9 ID="017.41">TB OF EAR-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,234)
<ICD9 ID="017.42">TB OF EAR-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,235)
<ICD9 ID="017.43">TB OF EAR-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,236)
<ICD9 ID="017.44">TB OF EAR-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,237)
<ICD9 ID="017.45">TB OF EAR-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,238)
<ICD9 ID="017.46">TB OF EAR-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,239)
<ICD9 ID="017.50">TB OF THYROID-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,240)
<ICD9 ID="017.51">TB OF THYROID-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,241)
<ICD9 ID="017.52">TB OF THYROID-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,242)
<ICD9 ID="017.53">TB OF THYROID-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,243)
<ICD9 ID="017.54">TB OF THYROID-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,244)
<ICD9 ID="017.55">TB OF THYROID-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,245)
<ICD9 ID="017.56">TB OF THYROID-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,246)
<ICD9 ID="017.60">TB OF ADRENAL-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,247)
<ICD9 ID="017.61">TB OF ADRENAL-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,248)
<ICD9 ID="017.62">TB OF ADRENAL-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,249)
<ICD9 ID="017.63">TB OF ADRENAL-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,250)
<ICD9 ID="017.64">TB OF ADRENAL-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,251)
<ICD9 ID="017.65">TB OF ADRENAL-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,252)
<ICD9 ID="017.66">TB OF ADRENAL-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,253)
<ICD9 ID="017.70">TB OF SPLEEN-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,254)
<ICD9 ID="017.71">TB OF SPLEEN-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,255)
<ICD9 ID="017.72">TB OF SPLEEN-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,256)
<ICD9 ID="017.73">TB OF SPLEEN-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,257)
<ICD9 ID="017.74">TB OF SPLEEN-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,258)
<ICD9 ID="017.75">TB OF SPLEEN-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,259)
<ICD9 ID="017.76">TB OF SPLEEN-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,260)
<ICD9 ID="017.80">TB ESOPHAGUS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,261)
<ICD9 ID="017.81">TB ESOPHAGUS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,262)
<ICD9 ID="017.82">TB ESOPHAGUS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,263)
<ICD9 ID="017.83">TB ESOPHAGUS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,264)
<ICD9 ID="017.84">TB ESOPHAGUS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,265)
<ICD9 ID="017.85">TB ESOPHAGUS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,266)
<ICD9 ID="017.86">TB ESOPHAGUS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,267)
<ICD9 ID="017.90">TB OF ORGAN NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,268)
<ICD9 ID="017.91">TB OF ORGAN NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,269)
<ICD9 ID="017.92">TB ORGAN NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,270)
<ICD9 ID="017.93">TB OF ORGAN NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,271)
<ICD9 ID="017.94">TB OF ORGAN NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,272)
<ICD9 ID="017.95">TB OF ORGAN NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,273)
<ICD9 ID="017.96">TB OF ORGAN NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,274)
<ICD9 ID="018.00">ACUTE MILIARY TB-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,275)
<ICD9 ID="018.01">ACUTE MILIARY TB-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,276)
<ICD9 ID="018.02">AC MILIARY TB-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,277)
<ICD9 ID="018.03">AC MILIARY TB-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,278)
<ICD9 ID="018.04">ACUTE MILIARY TB-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,279)
<ICD9 ID="018.05">AC MILIARY TB-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,280)
<ICD9 ID="018.06">AC MILIARY TB-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,281)
<ICD9 ID="018.80">MILIARY TB NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,282)
<ICD9 ID="018.81">MILIARY TB NEC-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,283)
<ICD9 ID="018.82">MILIARY TB NEC-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,284)
<ICD9 ID="018.83">MILIARY TB NEC-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,285)
<ICD9 ID="018.84">MILIARY TB NEC-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,286)
<ICD9 ID="018.85">MILIARY TB NEC-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,287)
<ICD9 ID="018.86">MILIARY TB NEC-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,288)
<ICD9 ID="018.90">MILIARY TB NOS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,289)
<ICD9 ID="018.91">MILIARY TB NOS-NO EXAM</ICD9>
"TEMP","RORPRTDEF",1,290)
<ICD9 ID="018.92">MILIARY TB NOS-EXAM UNKN</ICD9>
"TEMP","RORPRTDEF",1,291)
<ICD9 ID="018.93">MILIARY TB NOS-MICRO DX</ICD9>
"TEMP","RORPRTDEF",1,292)
<ICD9 ID="018.94">MILIARY TB NOS-CULT DX</ICD9>
"TEMP","RORPRTDEF",1,293)
<ICD9 ID="018.95">MILIARY TB NOS-HISTO DX</ICD9>
"TEMP","RORPRTDEF",1,294)
<ICD9 ID="018.96">MILIARY TB NOS-OTH TEST</ICD9>
"TEMP","RORPRTDEF",1,295)
<ICD9 ID="031.0">PULMONARY MYCOBACTERIA</ICD9>
"TEMP","RORPRTDEF",1,296)
<ICD9 ID="031.1">CUTANEOUS MYCOBACTERIA</ICD9>
"TEMP","RORPRTDEF",1,297)
<ICD9 ID="031.2">DMAC, DISEASE DUE TO</ICD9>
"TEMP","RORPRTDEF",1,298)
<ICD9 ID="031.8">MYCOBACTERIAL DIS NEC</ICD9>
"TEMP","RORPRTDEF",1,299)
<ICD9 ID="031.9">MYCOBACTERIAL DIS NOS</ICD9>
"TEMP","RORPRTDEF",1,300)
<ICD9 ID="046.3">PROG MULTIFOC LEUKOENCEP</ICD9>
"TEMP","RORPRTDEF",1,301)
<ICD9 ID="046.8">CNS SLOW VIRUS INFEC NEC</ICD9>
"TEMP","RORPRTDEF",1,302)
<ICD9 ID="054.71">VISCERAL HERPES SIMPLEX</ICD9>
"TEMP","RORPRTDEF",1,303)
<ICD9 ID="078.5">CYTOMEGALOVIRAL DISEASE</ICD9>
"TEMP","RORPRTDEF",1,304)
<ICD9 ID="083.8">RICKETTSIOSES NEC</ICD9>
"TEMP","RORPRTDEF",1,305)
<ICD9 ID="112.4">CANDIDIASIS OF LUNG</ICD9>
"TEMP","RORPRTDEF",1,306)
<ICD9 ID="112.84">CANDIDAL ESOPHAGITIS</ICD9>
"TEMP","RORPRTDEF",1,307)
<ICD9 ID="114.1">PRIM CUTAN COCCIDIOID</ICD9>
"TEMP","RORPRTDEF",1,308)
<ICD9 ID="114.2">COCCIDIOIDAL MENINGITIS</ICD9>
"TEMP","RORPRTDEF",1,309)
<ICD9 ID="114.3">PROGRESS COCCIDIOID NEC</ICD9>
"TEMP","RORPRTDEF",1,310)
<ICD9 ID="115.01">HISTOPLASM CAPSUL MENING</ICD9>
"TEMP","RORPRTDEF",1,311)
<ICD9 ID="115.02">HISTOPLASM CAPSUL RETINA</ICD9>
"TEMP","RORPRTDEF",1,312)
<ICD9 ID="115.03">HISTOPLASM CAPS PERICARD</ICD9>
"TEMP","RORPRTDEF",1,313)
<ICD9 ID="115.04">HISTOPLASM CAPS ENDOCARD</ICD9>
"TEMP","RORPRTDEF",1,314)
<ICD9 ID="115.09">HISTOPLASMA CAPSULAT NEC</ICD9>
"TEMP","RORPRTDEF",1,315)
<ICD9 ID="115.11">HISTOPLASM DUBOIS MENING</ICD9>
"TEMP","RORPRTDEF",1,316)
<ICD9 ID="115.12">HISTOPLASM DUBOIS RETINA</ICD9>
"TEMP","RORPRTDEF",1,317)
<ICD9 ID="115.13">HISTOPLASM DUB PERICARD</ICD9>
"TEMP","RORPRTDEF",1,318)
<ICD9 ID="115.14">HISTOPLASM DUB ENDOCARD</ICD9>
"TEMP","RORPRTDEF",1,319)
<ICD9 ID="115.19">HISTOPLASMA DUBOISII NEC</ICD9>
"TEMP","RORPRTDEF",1,320)
<ICD9 ID="115.91">HISTOPLASMOSIS MENINGIT</ICD9>
"TEMP","RORPRTDEF",1,321)
<ICD9 ID="115.92">HISTOPLASMOSIS RETINITIS</ICD9>
"TEMP","RORPRTDEF",1,322)
<ICD9 ID="115.93">HISTOPLASMOSIS PERICARD</ICD9>
"TEMP","RORPRTDEF",1,323)
<ICD9 ID="115.94">HISTOPLASMOSIS ENDOCARD</ICD9>
"TEMP","RORPRTDEF",1,324)
<ICD9 ID="115.99">HISTOPLASMOSIS NEC</ICD9>
"TEMP","RORPRTDEF",1,325)
<ICD9 ID="117.5">CRYPTOCOCCOSIS</ICD9>
"TEMP","RORPRTDEF",1,326)
<ICD9 ID="130.0">TOXOPLASM MENINGOENCEPH</ICD9>
"TEMP","RORPRTDEF",1,327)
<ICD9 ID="136.3">PNEUMOCYSTOSIS</ICD9>
"TEMP","RORPRTDEF",1,328)
<ICD9 ID="136.8">INFECT/PARASITE DIS NEC</ICD9>
"TEMP","RORPRTDEF",1,329)
<ICD9 ID="176.0">KAPOSI'S SARCOMA, SKIN</ICD9>
"TEMP","RORPRTDEF",1,330)
<ICD9 ID="176.1">KAPOSI'S SARCOMA, SOFT TISSUE</ICD9>
"TEMP","RORPRTDEF",1,331)
<ICD9 ID="176.2">KAPOSI'S SARCOMA, PALATE</ICD9>
"TEMP","RORPRTDEF",1,332)
<ICD9 ID="176.3">KAPOSI'S SARCOMA, GI SITES</ICD9>
"TEMP","RORPRTDEF",1,333)
<ICD9 ID="176.4">KAPOSI'S SARCOMA, LUNG</ICD9>
"TEMP","RORPRTDEF",1,334)
<ICD9 ID="176.5">KAPOSI'S SARCOMA, LYMPH NODES</ICD9>
"TEMP","RORPRTDEF",1,335)
<ICD9 ID="176.8">KAPOSI'S SARCOMA, OTHER SITES</ICD9>
"TEMP","RORPRTDEF",1,336)
<ICD9 ID="176.9">KAPOSI'S SARCOMA, NOS</ICD9>
"TEMP","RORPRTDEF",1,337)
<ICD9 ID="180.0">MALIG NEO ENDOCERVIX</ICD9>
"TEMP","RORPRTDEF",1,338)
<ICD9 ID="180.1">MALIG NEO EXOCERVIX</ICD9>
"TEMP","RORPRTDEF",1,339)
<ICD9 ID="180.8">MALIG NEO CERVIX NEC</ICD9>
"TEMP","RORPRTDEF",1,340)
<ICD9 ID="180.9">MAL NEO CERVIX UTERI NOS</ICD9>
"TEMP","RORPRTDEF",1,341)
<ICD9 ID="200.20">BURKITT'S TUMOR UNSPEC</ICD9>
"TEMP","RORPRTDEF",1,342)
<ICD9 ID="200.21">BURKITT'S TUMOR HEAD</ICD9>
"TEMP","RORPRTDEF",1,343)
<ICD9 ID="200.22">BURKITT'S TUMOR THORAX</ICD9>
"TEMP","RORPRTDEF",1,344)
<ICD9 ID="200.23">BURKITT'S TUMOR ABDOM</ICD9>
"TEMP","RORPRTDEF",1,345)
<ICD9 ID="200.24">BURKITT'S TUMOR AXILLA</ICD9>
"TEMP","RORPRTDEF",1,346)
<ICD9 ID="200.25">BURKITT'S TUMOR INGUIN</ICD9>
"TEMP","RORPRTDEF",1,347)
<ICD9 ID="200.26">BURKITT'S TUMOR PELVIC</ICD9>
"TEMP","RORPRTDEF",1,348)
<ICD9 ID="200.27">BURKITT'S TUMOR SPLEEN</ICD9>
"TEMP","RORPRTDEF",1,349)
<ICD9 ID="200.28">BURKITT'S TUMOR MULT</ICD9>
"TEMP","RORPRTDEF",1,350)
<ICD9 ID="202.80">LYMPHOMA NEC UNSPEC SITE</ICD9>
"TEMP","RORPRTDEF",1,351)
<ICD9 ID="202.81">LYMPHOMAS NEC HEAD</ICD9>
"TEMP","RORPRTDEF",1,352)
<ICD9 ID="202.82">LYMPHOMAS NEC THORAX</ICD9>
"TEMP","RORPRTDEF",1,353)
<ICD9 ID="202.83">LYMPHOMAS NEC ABDOM</ICD9>
"TEMP","RORPRTDEF",1,354)
<ICD9 ID="202.84">LYMPHOMAS NEC AXILLA</ICD9>
"TEMP","RORPRTDEF",1,355)
<ICD9 ID="202.85">LYMPHOMAS NEC INGUIN</ICD9>
"TEMP","RORPRTDEF",1,356)
<ICD9 ID="202.86">LYMPHOMAS NEC PELVIC</ICD9>
"TEMP","RORPRTDEF",1,357)
<ICD9 ID="202.87">LYMPHOMAS NEC SPLEEN</ICD9>
"TEMP","RORPRTDEF",1,358)
<ICD9 ID="202.88">LYMPHOMAS NEC MULT</ICD9>
"TEMP","RORPRTDEF",1,359)
<ICD9 ID="484.1">PNEUM W CYTOMEG INCL DIS</ICD9>
"TEMP","RORPRTDEF",1,360)
</GROUP>
"TEMP","RORPRTDEF",1,361)
</ICD9LST>
"TEMP","RORPRTDEF",1,362)
<PANELS>
"TEMP","RORPRTDEF",1,363)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",1,364)
</PANELS>
"TEMP","RORPRTDEF",1,365)
</PARAMS>
"TEMP","RORPRTDEF",2)
13::Acute or Chronic Renal Failure
"TEMP","RORPRTDEF",2,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",2,2)
<PARAMS>
"TEMP","RORPRTDEF",2,3)
<ICD9LST>
"TEMP","RORPRTDEF",2,4)
<GROUP ID="Acute or Chronic Renal Failure">
"TEMP","RORPRTDEF",2,5)
<ICD9 ID="584.5">LOWER NEPHRON NEPHROSIS</ICD9>
"TEMP","RORPRTDEF",2,6)
<ICD9 ID="584.6">AC RENAL FAIL, CORT NECR</ICD9>
"TEMP","RORPRTDEF",2,7)
<ICD9 ID="584.7">AC REN FAIL, MEDULL NECR</ICD9>
"TEMP","RORPRTDEF",2,8)
<ICD9 ID="584.8">AC RENAL FAILURE NEC</ICD9>
"TEMP","RORPRTDEF",2,9)
<ICD9 ID="584.9">ACUTE RENAL FAILURE NOS</ICD9>
"TEMP","RORPRTDEF",2,10)
<ICD9 ID="585.">CHRONIC RENAL FAILURE</ICD9>
"TEMP","RORPRTDEF",2,11)
</GROUP>
"TEMP","RORPRTDEF",2,12)
</ICD9LST>
"TEMP","RORPRTDEF",2,13)
<PANELS>
"TEMP","RORPRTDEF",2,14)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",2,15)
</PANELS>
"TEMP","RORPRTDEF",2,16)
</PARAMS>
"TEMP","RORPRTDEF",3)
13::Alcohol
"TEMP","RORPRTDEF",3,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",3,2)
<PARAMS>
"TEMP","RORPRTDEF",3,3)
<ICD9LST>
"TEMP","RORPRTDEF",3,4)
<GROUP ID="Alcohol">
"TEMP","RORPRTDEF",3,5)
<ICD9 ID="291.0">DELIRIUM TREMENS</ICD9>
"TEMP","RORPRTDEF",3,6)
<ICD9 ID="291.1">ALCOHOL AMNESTIC DISORDR</ICD9>
"TEMP","RORPRTDEF",3,7)
<ICD9 ID="291.2">ALCOHOL PERSIST DEMENTIA</ICD9>
"TEMP","RORPRTDEF",3,8)
<ICD9 ID="291.3">ALCOH PSY DIS W HALLUCIN</ICD9>
"TEMP","RORPRTDEF",3,9)
<ICD9 ID="291.4">PATHOLOGIC ALCOHOL INTOX</ICD9>
"TEMP","RORPRTDEF",3,10)
<ICD9 ID="291.5">ALCOH PSYCH DIS W DELUS</ICD9>
"TEMP","RORPRTDEF",3,11)
<ICD9 ID="291.8">ALCOHOLIC PSYCHOSIS NEC</ICD9>
"TEMP","RORPRTDEF",3,12)
<ICD9 ID="291.81">ALCOHOL WITHDRAWAL</ICD9>
"TEMP","RORPRTDEF",3,13)
<ICD9 ID="291.89">ALCOHOL MENTAL DISOR NEC</ICD9>
"TEMP","RORPRTDEF",3,14)
<ICD9 ID="291.9">ALCOHOL MENTAL DISOR NOS</ICD9>
"TEMP","RORPRTDEF",3,15)
<ICD9 ID="303.00">AC ALCOHOL INTOX-UNSPEC</ICD9>
"TEMP","RORPRTDEF",3,16)
<ICD9 ID="303.01">AC ALCOHOL INTOX-CONTIN</ICD9>
"TEMP","RORPRTDEF",3,17)
<ICD9 ID="303.02">AC ALCOHOL INTOX-EPISOD</ICD9>
"TEMP","RORPRTDEF",3,18)
<ICD9 ID="303.03">AC ALCOHOL INTOX-REMISS</ICD9>
"TEMP","RORPRTDEF",3,19)
<ICD9 ID="303.90">ALCOH DEP NEC/NOS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",3,20)
<ICD9 ID="303.91">ALCOH DEP NEC/NOS-CONTIN</ICD9>
"TEMP","RORPRTDEF",3,21)
<ICD9 ID="303.92">ALCOH DEP NEC/NOS-EPISOD</ICD9>
"TEMP","RORPRTDEF",3,22)
<ICD9 ID="303.93">ALCOH DEP NEC/NOS-REMISS</ICD9>
"TEMP","RORPRTDEF",3,23)
<ICD9 ID="305.00">ALCOHOL ABUSE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",3,24)
<ICD9 ID="305.01">ALCOHOL ABUSE-CONTINUOUS</ICD9>
"TEMP","RORPRTDEF",3,25)
<ICD9 ID="305.02">ALCOHOL ABUSE-EPISODIC</ICD9>
"TEMP","RORPRTDEF",3,26)
<ICD9 ID="305.03">ALCOHOL ABUSE-IN REMISS</ICD9>
"TEMP","RORPRTDEF",3,27)
<ICD9 ID="357.5">ALCOHOLIC POLYNEUROPATHY</ICD9>
"TEMP","RORPRTDEF",3,28)
<ICD9 ID="425.5">ALCOHOLIC CARDIOMYOPATHY</ICD9>
"TEMP","RORPRTDEF",3,29)
<ICD9 ID="535.3">ALCOHOLIC GASTRITIS</ICD9>
"TEMP","RORPRTDEF",3,30)
<ICD9 ID="535.30">ALCOHOLIC GASTRITIS W/O HEMOR</ICD9>
"TEMP","RORPRTDEF",3,31)
<ICD9 ID="535.31">ALCOHOLIC GASTRITIS W HEMOR</ICD9>
"TEMP","RORPRTDEF",3,32)
<ICD9 ID="571.0">ALCOHOLIC FATTY LIVER</ICD9>
"TEMP","RORPRTDEF",3,33)
<ICD9 ID="571.1">AC ALCOHOLIC HEPATITIS</ICD9>
"TEMP","RORPRTDEF",3,34)
<ICD9 ID="571.2">ALCOHOL CIRRHOSIS LIVER</ICD9>
"TEMP","RORPRTDEF",3,35)
<ICD9 ID="571.3">ALCOHOL LIVER DAMAGE NOS</ICD9>
"TEMP","RORPRTDEF",3,36)
</GROUP>
"TEMP","RORPRTDEF",3,37)
</ICD9LST>
"TEMP","RORPRTDEF",3,38)
<PANELS>
"TEMP","RORPRTDEF",3,39)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",3,40)
</PANELS>
"TEMP","RORPRTDEF",3,41)
</PARAMS>
"TEMP","RORPRTDEF",4)
13::Bipolar - Mania
"TEMP","RORPRTDEF",4,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",4,2)
<PARAMS>
"TEMP","RORPRTDEF",4,3)
<ICD9LST>
"TEMP","RORPRTDEF",4,4)
<GROUP ID="Bipolar - Mania">
"TEMP","RORPRTDEF",4,5)
<ICD9 ID="296.00">BIPOL I SINGLE MANIC NOS</ICD9>
"TEMP","RORPRTDEF",4,6)
<ICD9 ID="296.01">BIPOL I SINGLE MANC-MILD</ICD9>
"TEMP","RORPRTDEF",4,7)
<ICD9 ID="296.02">BIPOL I SINGLE MANIC-MOD</ICD9>
"TEMP","RORPRTDEF",4,8)
<ICD9 ID="296.03">BIPOL I SING-SEV W/O PSY</ICD9>
"TEMP","RORPRTDEF",4,9)
<ICD9 ID="296.04">BIPO I SIN MAN-SEV W PSY</ICD9>
"TEMP","RORPRTDEF",4,10)
<ICD9 ID="296.05">BIPOL I SING MAN REM NOS</ICD9>
"TEMP","RORPRTDEF",4,11)
<ICD9 ID="296.06">BIPOL I SINGLE MANIC REM</ICD9>
"TEMP","RORPRTDEF",4,12)
<ICD9 ID="296.10">RECUR MANIC DIS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",4,13)
<ICD9 ID="296.11">RECUR MANIC DIS-MILD</ICD9>
"TEMP","RORPRTDEF",4,14)
<ICD9 ID="296.12">RECUR MANIC DIS-MOD</ICD9>
"TEMP","RORPRTDEF",4,15)
<ICD9 ID="296.13">RECUR MANIC DIS-SEVERE</ICD9>
"TEMP","RORPRTDEF",4,16)
<ICD9 ID="296.14">RECUR MANIC-SEV W PSYCHO</ICD9>
"TEMP","RORPRTDEF",4,17)
<ICD9 ID="296.15">RECUR MANIC-PART REMISS</ICD9>
"TEMP","RORPRTDEF",4,18)
<ICD9 ID="296.16">RECUR MANIC-FULL REMISS</ICD9>
"TEMP","RORPRTDEF",4,19)
<ICD9 ID="296.40">BIPOL I CURRNT MANIC NOS</ICD9>
"TEMP","RORPRTDEF",4,20)
<ICD9 ID="296.41">BIPOL I CURNT MANIC-MILD</ICD9>
"TEMP","RORPRTDEF",4,21)
<ICD9 ID="296.42">BIPOL I CURRNT MANIC-MOD</ICD9>
"TEMP","RORPRTDEF",4,22)
<ICD9 ID="296.43">BIPOL I MANC-SEV W/O PSY</ICD9>
"TEMP","RORPRTDEF",4,23)
<ICD9 ID="296.44">BIPOL I MANIC-SEV W PSY</ICD9>
"TEMP","RORPRTDEF",4,24)
<ICD9 ID="296.45">BIPOL I CUR MAN PART REM</ICD9>
"TEMP","RORPRTDEF",4,25)
<ICD9 ID="296.46">BIPOL I CUR MAN FULL REM</ICD9>
"TEMP","RORPRTDEF",4,26)
<ICD9 ID="296.50">BIPOL I CUR DEPRES NOS</ICD9>
"TEMP","RORPRTDEF",4,27)
<ICD9 ID="296.51">BIPOL I CUR DEPRESS-MILD</ICD9>
"TEMP","RORPRTDEF",4,28)
<ICD9 ID="296.52">BIPOL I CUR DEPRESS-MOD</ICD9>
"TEMP","RORPRTDEF",4,29)
<ICD9 ID="296.53">BIPOL I CURR DEP W/O PSY</ICD9>
"TEMP","RORPRTDEF",4,30)
<ICD9 ID="296.54">BIPOL I CURRNT DEP W PSY</ICD9>
"TEMP","RORPRTDEF",4,31)
<ICD9 ID="296.55">BIPOL I CUR DEP REM NOS</ICD9>
"TEMP","RORPRTDEF",4,32)
<ICD9 ID="296.56">BIPOL I CURRNT DEP REMIS</ICD9>
"TEMP","RORPRTDEF",4,33)
<ICD9 ID="296.60">BIPOL I CURRNT MIXED NOS</ICD9>
"TEMP","RORPRTDEF",4,34)
<ICD9 ID="296.61">BIPOL I CURRNT MIX-MILD</ICD9>
"TEMP","RORPRTDEF",4,35)
<ICD9 ID="296.62">BIPOL I CURRNT MIXED-MOD</ICD9>
"TEMP","RORPRTDEF",4,36)
<ICD9 ID="296.63">BIPOL I CUR MIX W/O PSY</ICD9>
"TEMP","RORPRTDEF",4,37)
<ICD9 ID="296.64">BIPOL I CUR MIXED W PSY</ICD9>
"TEMP","RORPRTDEF",4,38)
<ICD9 ID="296.65">BIPOL I CUR MIX-PART REM</ICD9>
"TEMP","RORPRTDEF",4,39)
<ICD9 ID="296.66">BIPOL I CUR MIXED REMISS</ICD9>
"TEMP","RORPRTDEF",4,40)
<ICD9 ID="296.7">BIPOLOR I CURRENT NOS</ICD9>
"TEMP","RORPRTDEF",4,41)
<ICD9 ID="296.80">BIPOLAR DISORDER NOS</ICD9>
"TEMP","RORPRTDEF",4,42)
<ICD9 ID="296.81">ATYPICAL MANIC DISORDER</ICD9>
"TEMP","RORPRTDEF",4,43)
<ICD9 ID="296.82">ATYPICAL DEPRESSIVE DIS</ICD9>
"TEMP","RORPRTDEF",4,44)
<ICD9 ID="296.89">BIPOLAR DISORDER NEC</ICD9>
"TEMP","RORPRTDEF",4,45)
</GROUP>
"TEMP","RORPRTDEF",4,46)
</ICD9LST>
"TEMP","RORPRTDEF",4,47)
<PANELS>
"TEMP","RORPRTDEF",4,48)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",4,49)
</PANELS>
"TEMP","RORPRTDEF",4,50)
</PARAMS>
"TEMP","RORPRTDEF",5)
13::Cirrhosis
"TEMP","RORPRTDEF",5,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",5,2)
<PARAMS>
"TEMP","RORPRTDEF",5,3)
<ICD9LST>
"TEMP","RORPRTDEF",5,4)
<GROUP ID="Cirrhosis">
"TEMP","RORPRTDEF",5,5)
<ICD9 ID="571.2">ALCOHOL CIRRHOSIS LIVER</ICD9>
"TEMP","RORPRTDEF",5,6)
<ICD9 ID="571.5">CIRRHOSIS OF LIVER NOS</ICD9>
"TEMP","RORPRTDEF",5,7)
</GROUP>
"TEMP","RORPRTDEF",5,8)
</ICD9LST>
"TEMP","RORPRTDEF",5,9)
<PANELS>
"TEMP","RORPRTDEF",5,10)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",5,11)
</PANELS>
"TEMP","RORPRTDEF",5,12)
</PARAMS>
"TEMP","RORPRTDEF",6)
13::Depression
"TEMP","RORPRTDEF",6,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",6,2)
<PARAMS>
"TEMP","RORPRTDEF",6,3)
<ICD9LST>
"TEMP","RORPRTDEF",6,4)
<GROUP ID="Depression">
"TEMP","RORPRTDEF",6,5)
<ICD9 ID="293.83">MOOD DISORDER OTHER DIS</ICD9>
"TEMP","RORPRTDEF",6,6)
<ICD9 ID="296.20">DEPRESS DISORDER-UNSPEC</ICD9>
"TEMP","RORPRTDEF",6,7)
<ICD9 ID="296.21">DEPRESS DISORDER-MILD</ICD9>
"TEMP","RORPRTDEF",6,8)
<ICD9 ID="296.22">DEPRESSIVE DISORDER-MOD</ICD9>
"TEMP","RORPRTDEF",6,9)
<ICD9 ID="296.23">DEPRESS DISORDER-SEV W/O PSYCH</ICD9>
"TEMP","RORPRTDEF",6,10)
<ICD9 ID="296.24">DEPR DISORDER-SEV W PSYCH</ICD9>
"TEMP","RORPRTDEF",6,11)
<ICD9 ID="296.25">DEPR DISORDER-PART REMISS</ICD9>
"TEMP","RORPRTDEF",6,12)
<ICD9 ID="296.26">DEPR DISORDER-FULL REMISS</ICD9>
"TEMP","RORPRTDEF",6,13)
<ICD9 ID="296.30">RECURR DEPR DISORDER-UNSP</ICD9>
"TEMP","RORPRTDEF",6,14)
<ICD9 ID="296.31">RECURR DEPR DISORDER-MILD</ICD9>
"TEMP","RORPRTDEF",6,15)
<ICD9 ID="296.32">RECURR DEPR DISORDER-MOD</ICD9>
"TEMP","RORPRTDEF",6,16)
<ICD9 ID="296.33">RECUR DEPR DISORDER-SEVERE</ICD9>
"TEMP","RORPRTDEF",6,17)
<ICD9 ID="296.34">REC DEPR DISORDER-PSYCHOTIC</ICD9>
"TEMP","RORPRTDEF",6,18)
<ICD9 ID="296.35">RECUR DEPR DISORDER-PART REM</ICD9>
"TEMP","RORPRTDEF",6,19)
<ICD9 ID="296.36">RECUR DEPR DISORDER-FULL REM</ICD9>
"TEMP","RORPRTDEF",6,20)
<ICD9 ID="296.50">BIPOL I CUR DEPRES NOS</ICD9>
"TEMP","RORPRTDEF",6,21)
<ICD9 ID="296.51">BIPOL I CUR DEPRESS-MILD</ICD9>
"TEMP","RORPRTDEF",6,22)
<ICD9 ID="296.52">BIPOL I CUR DEPRESS-MOD</ICD9>
"TEMP","RORPRTDEF",6,23)
<ICD9 ID="296.53">BIPOL I CURR DEP W/O PSY</ICD9>
"TEMP","RORPRTDEF",6,24)
<ICD9 ID="296.54">BIPOL I CURRNT DEP W PSY</ICD9>
"TEMP","RORPRTDEF",6,25)
<ICD9 ID="296.55">BIPOL I CUR DEP REM NOS</ICD9>
"TEMP","RORPRTDEF",6,26)
<ICD9 ID="296.56">BIPOL I CURRNT DEP REMIS</ICD9>
"TEMP","RORPRTDEF",6,27)
<ICD9 ID="309.0">ADJUSTMNT DIS W DEPRESSN</ICD9>
"TEMP","RORPRTDEF",6,28)
<ICD9 ID="309.1">PROLONG DEPRESSIVE REACT</ICD9>
"TEMP","RORPRTDEF",6,29)
<ICD9 ID="309.28">ADJUST DIS W ANXIETY/DEP</ICD9>
"TEMP","RORPRTDEF",6,30)
<ICD9 ID="311.">DEPRESSIVE DISORDER NEC</ICD9>
"TEMP","RORPRTDEF",6,31)
</GROUP>
"TEMP","RORPRTDEF",6,32)
</ICD9LST>
"TEMP","RORPRTDEF",6,33)
<PANELS>
"TEMP","RORPRTDEF",6,34)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",6,35)
</PANELS>
"TEMP","RORPRTDEF",6,36)
</PARAMS>
"TEMP","RORPRTDEF",7)
13::Diabetes Type I or II
"TEMP","RORPRTDEF",7,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",7,2)
<PARAMS>
"TEMP","RORPRTDEF",7,3)
<ICD9LST>
"TEMP","RORPRTDEF",7,4)
<GROUP ID="Diabetes Type I or II">
"TEMP","RORPRTDEF",7,5)
<ICD9 ID="250.00">DMII WO CMP NT ST UNCNTR</ICD9>
"TEMP","RORPRTDEF",7,6)
<ICD9 ID="250.01">DMI WO CMP NT ST UNCNTRL</ICD9>
"TEMP","RORPRTDEF",7,7)
<ICD9 ID="250.02">DMII WO CMP UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,8)
<ICD9 ID="250.03">DMI WO CMP UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,9)
<ICD9 ID="250.10">DMII KETO NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,10)
<ICD9 ID="250.11">DMI KETO NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,11)
<ICD9 ID="250.12">DMII KETOACD UNCONTROLD</ICD9>
"TEMP","RORPRTDEF",7,12)
<ICD9 ID="250.13">DMI KETOACD UNCONTROLD</ICD9>
"TEMP","RORPRTDEF",7,13)
<ICD9 ID="250.20">DMII HPRSM NT ST UNCNTRL</ICD9>
"TEMP","RORPRTDEF",7,14)
<ICD9 ID="250.21">DMI HPRSM NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,15)
<ICD9 ID="250.22">DMII HPROSMLR UNCONTROLD</ICD9>
"TEMP","RORPRTDEF",7,16)
<ICD9 ID="250.23">DMI HPROSMLR UNCONTROLD</ICD9>
"TEMP","RORPRTDEF",7,17)
<ICD9 ID="250.30">DMII O CM NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,18)
<ICD9 ID="250.31">DMI O CM NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,19)
<ICD9 ID="250.32">DMII OTH COMA UNCONTROLD</ICD9>
"TEMP","RORPRTDEF",7,20)
<ICD9 ID="250.33">DMI OTH COMA UNCONTROLD</ICD9>
"TEMP","RORPRTDEF",7,21)
<ICD9 ID="250.40">DMII RENL NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,22)
<ICD9 ID="250.41">DMI RENL NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,23)
<ICD9 ID="250.42">DMII RENAL UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,24)
<ICD9 ID="250.43">DMI RENAL UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,25)
<ICD9 ID="250.50">DMII OPHTH NT ST UNCNTRL</ICD9>
"TEMP","RORPRTDEF",7,26)
<ICD9 ID="250.51">DMI OPHTH NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,27)
<ICD9 ID="250.52">DMII OPHTH UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,28)
<ICD9 ID="250.53">DMI OPHTH UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,29)
<ICD9 ID="250.60">DMII NEURO NT ST UNCNTRL</ICD9>
"TEMP","RORPRTDEF",7,30)
<ICD9 ID="250.61">DMI NEURO NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,31)
<ICD9 ID="250.62">DMII NEURO UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,32)
<ICD9 ID="250.63">DMI NEURO UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,33)
<ICD9 ID="250.70">DMII CIRC NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,34)
<ICD9 ID="250.71">DMI CIRC NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,35)
<ICD9 ID="250.72">DMII CIRC UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,36)
<ICD9 ID="250.73">DMI CIRC UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,37)
<ICD9 ID="250.80">DMII OTH NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,38)
<ICD9 ID="250.81">DMI OTH NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,39)
<ICD9 ID="250.82">DMII OTH UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,40)
<ICD9 ID="250.83">DMI OTH UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,41)
<ICD9 ID="250.90">DMII UNSPF NT ST UNCNTRL</ICD9>
"TEMP","RORPRTDEF",7,42)
<ICD9 ID="250.91">DMI UNSPF NT ST UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,43)
<ICD9 ID="250.92">DMII UNSPF UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,44)
<ICD9 ID="250.93">DMI UNSPF UNCNTRLD</ICD9>
"TEMP","RORPRTDEF",7,45)
</GROUP>
"TEMP","RORPRTDEF",7,46)
</ICD9LST>
"TEMP","RORPRTDEF",7,47)
<PANELS>
"TEMP","RORPRTDEF",7,48)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",7,49)
</PANELS>
"TEMP","RORPRTDEF",7,50)
</PARAMS>
"TEMP","RORPRTDEF",8)
13::ESLD
"TEMP","RORPRTDEF",8,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",8,2)
<PARAMS>
"TEMP","RORPRTDEF",8,3)
<ICD9LST>
"TEMP","RORPRTDEF",8,4)
<GROUP ID="ESLD">
"TEMP","RORPRTDEF",8,5)
<ICD9 ID="456.0">ESOPHAG VARICES W BLEED</ICD9>
"TEMP","RORPRTDEF",8,6)
<ICD9 ID="456.1">ESOPH VARICES W/O BLEED</ICD9>
"TEMP","RORPRTDEF",8,7)
<ICD9 ID="456.20">BLEED ESOPH VAR OTH DIS</ICD9>
"TEMP","RORPRTDEF",8,8)
<ICD9 ID="456.21">ESOPH VARICE OTH DIS NOS</ICD9>
"TEMP","RORPRTDEF",8,9)
<ICD9 ID="456.8">VARICES OF OTHER SITES</ICD9>
"TEMP","RORPRTDEF",8,10)
<ICD9 ID="572.2">HEPATIC COMA</ICD9>
"TEMP","RORPRTDEF",8,11)
<ICD9 ID="572.3">PORTAL HYPERTENSION</ICD9>
"TEMP","RORPRTDEF",8,12)
<ICD9 ID="572.4">HEPATORENAL SYNDROME</ICD9>
"TEMP","RORPRTDEF",8,13)
<ICD9 ID="572.8">OTH SEQUELA, CHR LIV DIS</ICD9>
"TEMP","RORPRTDEF",8,14)
</GROUP>
"TEMP","RORPRTDEF",8,15)
</ICD9LST>
"TEMP","RORPRTDEF",8,16)
<PANELS>
"TEMP","RORPRTDEF",8,17)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",8,18)
</PANELS>
"TEMP","RORPRTDEF",8,19)
</PARAMS>
"TEMP","RORPRTDEF",9)
13::HIV+ Codes
"TEMP","RORPRTDEF",9,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",9,2)
<PARAMS>
"TEMP","RORPRTDEF",9,3)
<ICD9LST>
"TEMP","RORPRTDEF",9,4)
<GROUP ID="HIV+ Codes">
"TEMP","RORPRTDEF",9,5)
<ICD9 ID="042.">HIV DISEASE</ICD9>
"TEMP","RORPRTDEF",9,6)
<ICD9 ID="042.0">HIV WITH SPECIFIED INFECTIONS</ICD9>
"TEMP","RORPRTDEF",9,7)
<ICD9 ID="042.1">HIV CAUSING OTHER SPEC INF</ICD9>
"TEMP","RORPRTDEF",9,8)
<ICD9 ID="042.2">HIV WITH SPEC MALIGNANT NEO</ICD9>
"TEMP","RORPRTDEF",9,9)
<ICD9 ID="042.9">HIV-AIDS UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",9,10)
<ICD9 ID="043.0">HIV CAUSING LYMPHADENOPATHY</ICD9>
"TEMP","RORPRTDEF",9,11)
<ICD9 ID="043.1">HIV CAUSING SPEC DISEASE-CNS</ICD9>
"TEMP","RORPRTDEF",9,12)
<ICD9 ID="043.2">HIV CAUSE OTH IMMUNE DIS</ICD9>
"TEMP","RORPRTDEF",9,13)
<ICD9 ID="043.3">HIV CAUSE OTHER SPEC DISORDERS</ICD9>
"TEMP","RORPRTDEF",9,14)
<ICD9 ID="043.9">HIV-ARC, UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",9,15)
<ICD9 ID="044.0">OTHER HIV CAUSE SPEC ACUTE INF</ICD9>
"TEMP","RORPRTDEF",9,16)
<ICD9 ID="044.9">HIV INFECTION UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",9,17)
<ICD9 ID="795.8">POSITIVE SERO/VIRAL HIV</ICD9>
"TEMP","RORPRTDEF",9,18)
<ICD9 ID="V08.">ASYMPT HIV STATUS</ICD9>
"TEMP","RORPRTDEF",9,19)
</GROUP>
"TEMP","RORPRTDEF",9,20)
</ICD9LST>
"TEMP","RORPRTDEF",9,21)
<PANELS>
"TEMP","RORPRTDEF",9,22)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",9,23)
</PANELS>
"TEMP","RORPRTDEF",9,24)
</PARAMS>
"TEMP","RORPRTDEF",10)
13::Hepatitis B
"TEMP","RORPRTDEF",10,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",10,2)
<PARAMS>
"TEMP","RORPRTDEF",10,3)
<ICD9LST>
"TEMP","RORPRTDEF",10,4)
<GROUP ID="Hepatitis B">
"TEMP","RORPRTDEF",10,5)
<ICD9 ID="070.2">HEPATITIS B WITH COMA</ICD9>
"TEMP","RORPRTDEF",10,6)
<ICD9 ID="070.20">VIR HEP B W/COMA, W/O DELTA</ICD9>
"TEMP","RORPRTDEF",10,7)
<ICD9 ID="070.21">VIRAL HEPATITIS B W COMA/DELTA</ICD9>
"TEMP","RORPRTDEF",10,8)
<ICD9 ID="070.22">CH HEP B W/ H. COMA W/O DELTA</ICD9>
"TEMP","RORPRTDEF",10,9)
<ICD9 ID="070.23">CH HEP B W/ H. COMA W/ DELTA</ICD9>
"TEMP","RORPRTDEF",10,10)
<ICD9 ID="070.3">HEPATITIS B W/O COMA</ICD9>
"TEMP","RORPRTDEF",10,11)
<ICD9 ID="070.30">VIR HEP B W/O COMA, W/O DELTA</ICD9>
"TEMP","RORPRTDEF",10,12)
<ICD9 ID="070.31">VIR HEP B W/O COMA, W/DELTA</ICD9>
"TEMP","RORPRTDEF",10,13)
<ICD9 ID="070.32">CH HEP B W/O H. COMA W/O DELTA</ICD9>
"TEMP","RORPRTDEF",10,14)
<ICD9 ID="070.33">CH HEP B W/O H. COMA W/ DELTA</ICD9>
"TEMP","RORPRTDEF",10,15)
<ICD9 ID="V02.61">HEPATITIS B CARRIER</ICD9>
"TEMP","RORPRTDEF",10,16)
</GROUP>
"TEMP","RORPRTDEF",10,17)
</ICD9LST>
"TEMP","RORPRTDEF",10,18)
<PANELS>
"TEMP","RORPRTDEF",10,19)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",10,20)
</PANELS>
"TEMP","RORPRTDEF",10,21)
</PARAMS>
"TEMP","RORPRTDEF",11)
13::Hepatitis C
"TEMP","RORPRTDEF",11,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",11,2)
<PARAMS>
"TEMP","RORPRTDEF",11,3)
<ICD9LST>
"TEMP","RORPRTDEF",11,4)
<GROUP ID="Hepatitis C">
"TEMP","RORPRTDEF",11,5)
<ICD9 ID="070.44">CH HEP C W/ COMA</ICD9>
"TEMP","RORPRTDEF",11,6)
<ICD9 ID="070.54">CH HEP C W/O COMA</ICD9>
"TEMP","RORPRTDEF",11,7)
<ICD9 ID="070.70">HPT C W/O HEPAT COMA NOS</ICD9>
"TEMP","RORPRTDEF",11,8)
<ICD9 ID="070.71">HPT C W HEPATIC COMA NOS</ICD9>
"TEMP","RORPRTDEF",11,9)
<ICD9 ID="V02.62">HEPATITIS C CARRIER</ICD9>
"TEMP","RORPRTDEF",11,10)
</GROUP>
"TEMP","RORPRTDEF",11,11)
</ICD9LST>
"TEMP","RORPRTDEF",11,12)
<PANELS>
"TEMP","RORPRTDEF",11,13)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",11,14)
</PANELS>
"TEMP","RORPRTDEF",11,15)
</PARAMS>
"TEMP","RORPRTDEF",12)
13::Hypertension
"TEMP","RORPRTDEF",12,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",12,2)
<PARAMS>
"TEMP","RORPRTDEF",12,3)
<ICD9LST>
"TEMP","RORPRTDEF",12,4)
<GROUP ID="Hypertension">
"TEMP","RORPRTDEF",12,5)
<ICD9 ID="401.0">MALIGNANT HYPERTENSION</ICD9>
"TEMP","RORPRTDEF",12,6)
<ICD9 ID="401.1">BENIGN HYPERTENSION</ICD9>
"TEMP","RORPRTDEF",12,7)
<ICD9 ID="401.9">HYPERTENSION NOS</ICD9>
"TEMP","RORPRTDEF",12,8)
<ICD9 ID="402.00">HYP HEART DIS MALIGN W/O FAIL</ICD9>
"TEMP","RORPRTDEF",12,9)
<ICD9 ID="402.01">HYP HEART DIS MALIGN WITH FAIL</ICD9>
"TEMP","RORPRTDEF",12,10)
<ICD9 ID="402.10">HYP HEART DIS BENING W/0 FAIL</ICD9>
"TEMP","RORPRTDEF",12,11)
<ICD9 ID="402.11">HYP HEART DIS BENING WITH FAIL</ICD9>
"TEMP","RORPRTDEF",12,12)
<ICD9 ID="402.90">HYP HEART DIS UNSPECI W/O FAIL</ICD9>
"TEMP","RORPRTDEF",12,13)
<ICD9 ID="402.91">HYP HEART DIS UNSP WITH FAIL</ICD9>
"TEMP","RORPRTDEF",12,14)
<ICD9 ID="403.0">MAL HYPERTENS RENAL DIS</ICD9>
"TEMP","RORPRTDEF",12,15)
<ICD9 ID="403.00">MAL HYP REN W/O REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,16)
<ICD9 ID="403.01">MAL HYP REN W RENAL FAIL</ICD9>
"TEMP","RORPRTDEF",12,17)
<ICD9 ID="403.1">BENIGN HYPERT RENAL DIS</ICD9>
"TEMP","RORPRTDEF",12,18)
<ICD9 ID="403.10">BEN HYP REN W/O REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,19)
<ICD9 ID="403.11">BEN HYP RENAL W REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,20)
<ICD9 ID="403.9">HYPERTENS RENAL DIS NOS</ICD9>
"TEMP","RORPRTDEF",12,21)
<ICD9 ID="403.90">HYP REN NOS W/O REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,22)
<ICD9 ID="403.91">HYP REN NOS W REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,23)
<ICD9 ID="404.0">MAL HYPERT HRT/RENAL DIS</ICD9>
"TEMP","RORPRTDEF",12,24)
<ICD9 ID="404.00">HYP HRT &amp; REN DIS MALIG W/O ME</ICD9>
"TEMP","RORPRTDEF",12,25)
<ICD9 ID="404.01">HYP HRT &amp; REN DIS MAL W/ HEART</ICD9>
"TEMP","RORPRTDEF",12,26)
<ICD9 ID="404.02">MAL HY HT/REN W REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,27)
<ICD9 ID="404.03">HYP HRT &amp; REN MAL W/HRT &amp; RENL</ICD9>
"TEMP","RORPRTDEF",12,28)
<ICD9 ID="404.1">BEN HYPERT HRT/RENAL DIS</ICD9>
"TEMP","RORPRTDEF",12,29)
<ICD9 ID="404.10">HYP HRT &amp; REN DIS BENIGN W/O</ICD9>
"TEMP","RORPRTDEF",12,30)
<ICD9 ID="404.11">HYP HRT &amp; REN BENIGN W/ HEART</ICD9>
"TEMP","RORPRTDEF",12,31)
<ICD9 ID="404.12">BEN HY HT/REN W REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,32)
<ICD9 ID="404.13">HYP HRT &amp; REN BEN W/HRT &amp; REN</ICD9>
"TEMP","RORPRTDEF",12,33)
<ICD9 ID="404.9">HYPERT HRT/RENAL DIS NOS</ICD9>
"TEMP","RORPRTDEF",12,34)
<ICD9 ID="404.90">HYP HRT &amp; REN DIS UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",12,35)
<ICD9 ID="404.91">HYP HRT &amp; REN UNSP W/HEART</ICD9>
"TEMP","RORPRTDEF",12,36)
<ICD9 ID="404.92">HY HT/REN NOS W REN FAIL</ICD9>
"TEMP","RORPRTDEF",12,37)
<ICD9 ID="404.93">HYP HRT &amp; REN UNS W/HRT &amp; REN</ICD9>
"TEMP","RORPRTDEF",12,38)
<ICD9 ID="405.01">MAL RENOVASC HYPERTENS</ICD9>
"TEMP","RORPRTDEF",12,39)
<ICD9 ID="405.09">MAL SECOND HYPERTEN NEC</ICD9>
"TEMP","RORPRTDEF",12,40)
<ICD9 ID="405.91">RENOVASC HYPERTENSION</ICD9>
"TEMP","RORPRTDEF",12,41)
<ICD9 ID="405.99">SECOND HYPERTENSION NEC</ICD9>
"TEMP","RORPRTDEF",12,42)
</GROUP>
"TEMP","RORPRTDEF",12,43)
</ICD9LST>
"TEMP","RORPRTDEF",12,44)
<PANELS>
"TEMP","RORPRTDEF",12,45)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",12,46)
</PANELS>
"TEMP","RORPRTDEF",12,47)
</PARAMS>
"TEMP","RORPRTDEF",13)
13::Ischemic Heart Disease
"TEMP","RORPRTDEF",13,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",13,2)
<PARAMS>
"TEMP","RORPRTDEF",13,3)
<ICD9LST>
"TEMP","RORPRTDEF",13,4)
<GROUP ID="Ischemic Heart Disease">
"TEMP","RORPRTDEF",13,5)
<ICD9 ID="410.0">AMI ANTEROLATERAL WALL</ICD9>
"TEMP","RORPRTDEF",13,6)
<ICD9 ID="410.00">AMI ANTEROLATERAL, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,7)
<ICD9 ID="410.01">AMI ANTEROLATERAL, INIT</ICD9>
"TEMP","RORPRTDEF",13,8)
<ICD9 ID="410.02">AMI ANTEROLATERAL, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,9)
<ICD9 ID="410.1">AMI ANTERIOR WALL NEC</ICD9>
"TEMP","RORPRTDEF",13,10)
<ICD9 ID="410.10">AMI ANTERIOR WALL, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,11)
<ICD9 ID="410.11">AMI ANTERIOR WALL, INIT</ICD9>
"TEMP","RORPRTDEF",13,12)
<ICD9 ID="410.12">AMI ANTERIOR WALL, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,13)
<ICD9 ID="410.2">AMI INFEROLATERAL WALL</ICD9>
"TEMP","RORPRTDEF",13,14)
<ICD9 ID="410.20">AMI INFEROLATERAL, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,15)
<ICD9 ID="410.21">AMI INFEROLATERAL, INIT</ICD9>
"TEMP","RORPRTDEF",13,16)
<ICD9 ID="410.22">AMI INFEROLATERAL, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,17)
<ICD9 ID="410.3">AMI INFEROPOSTERIOR WALL</ICD9>
"TEMP","RORPRTDEF",13,18)
<ICD9 ID="410.30">AMI INFEROPOST, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,19)
<ICD9 ID="410.31">AMI INFEROPOST, INITIAL</ICD9>
"TEMP","RORPRTDEF",13,20)
<ICD9 ID="410.32">AMI INFEROPOST, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,21)
<ICD9 ID="410.4">AMI INFERIOR WALL NEC</ICD9>
"TEMP","RORPRTDEF",13,22)
<ICD9 ID="410.40">AMI INFERIOR WALL, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,23)
<ICD9 ID="410.41">AMI INFERIOR WALL, INIT</ICD9>
"TEMP","RORPRTDEF",13,24)
<ICD9 ID="410.42">AMI INFERIOR WALL, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,25)
<ICD9 ID="410.5">AMI LATERAL WALL NEC</ICD9>
"TEMP","RORPRTDEF",13,26)
<ICD9 ID="410.50">AMI LATERAL NEC, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,27)
<ICD9 ID="410.51">AMI LATERAL NEC, INITIAL</ICD9>
"TEMP","RORPRTDEF",13,28)
<ICD9 ID="410.52">AMI LATERAL NEC, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,29)
<ICD9 ID="410.6">TRUE POSTERIOR INFARCT</ICD9>
"TEMP","RORPRTDEF",13,30)
<ICD9 ID="410.60">TRUE POST INFARCT, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,31)
<ICD9 ID="410.61">TRUE POST INFARCT, INIT</ICD9>
"TEMP","RORPRTDEF",13,32)
<ICD9 ID="410.62">TRUE POST INFARCT, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,33)
<ICD9 ID="410.7">SUBENDOCARDIAL INFARCT</ICD9>
"TEMP","RORPRTDEF",13,34)
<ICD9 ID="410.70">SUBENDO INFARCT, UNSPEC</ICD9>
"TEMP","RORPRTDEF",13,35)
<ICD9 ID="410.71">SUBENDO INFARCT, INITIAL</ICD9>
"TEMP","RORPRTDEF",13,36)
<ICD9 ID="410.72">SUBENDO INFARCT, SUBSEQ</ICD9>
"TEMP","RORPRTDEF",13,37)
<ICD9 ID="410.8">MYOCARDIAL INFARCT NEC</ICD9>
"TEMP","RORPRTDEF",13,38)
<ICD9 ID="410.80">AMI NEC, UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",13,39)
<ICD9 ID="410.81">AMI NEC, INITIAL</ICD9>
"TEMP","RORPRTDEF",13,40)
<ICD9 ID="410.82">AMI NEC, SUBSEQUENT</ICD9>
"TEMP","RORPRTDEF",13,41)
<ICD9 ID="410.9">MYOCARDIAL INFARCT NOS</ICD9>
"TEMP","RORPRTDEF",13,42)
<ICD9 ID="410.90">AMI NOS, UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",13,43)
<ICD9 ID="410.91">AMI NOS, INITIAL</ICD9>
"TEMP","RORPRTDEF",13,44)
<ICD9 ID="410.92">AMI NOS, SUBSEQUENT</ICD9>
"TEMP","RORPRTDEF",13,45)
<ICD9 ID="411.0">POST MI SYNDROME</ICD9>
"TEMP","RORPRTDEF",13,46)
<ICD9 ID="411.1">INTERMED CORONARY SYND</ICD9>
"TEMP","RORPRTDEF",13,47)
<ICD9 ID="411.8">AC ISCHEMIC HRT DIS NEC</ICD9>
"TEMP","RORPRTDEF",13,48)
<ICD9 ID="411.81">AC CORONAR OCCL W/O MYO INFARC</ICD9>
"TEMP","RORPRTDEF",13,49)
<ICD9 ID="411.89">AC ISCHEMIC HRT DIS NEC</ICD9>
"TEMP","RORPRTDEF",13,50)
<ICD9 ID="412.">OLD MYOCARDIAL INFARCT</ICD9>
"TEMP","RORPRTDEF",13,51)
<ICD9 ID="413.0">ANGINA DECUBITUS</ICD9>
"TEMP","RORPRTDEF",13,52)
<ICD9 ID="413.1">PRINZMETAL ANGINA</ICD9>
"TEMP","RORPRTDEF",13,53)
<ICD9 ID="413.9">ANGINA PECTORIS NEC/NOS</ICD9>
"TEMP","RORPRTDEF",13,54)
<ICD9 ID="414.0">CORONARY ATHEROSCLEROSIS</ICD9>
"TEMP","RORPRTDEF",13,55)
<ICD9 ID="414.00">COR ATHEROSCL UNSP TYP-VES</ICD9>
"TEMP","RORPRTDEF",13,56)
<ICD9 ID="414.01">COR ATHEROSCL NATV C VSL</ICD9>
"TEMP","RORPRTDEF",13,57)
<ICD9 ID="414.02">COR ATHEROSCL AUTOL V BYP</ICD9>
"TEMP","RORPRTDEF",13,58)
<ICD9 ID="414.03">COR ATHEROSCL NONAUTO BIO BYP</ICD9>
"TEMP","RORPRTDEF",13,59)
<ICD9 ID="414.04">CORONARY ATHER/ART BYP GRFT</ICD9>
"TEMP","RORPRTDEF",13,60)
<ICD9 ID="414.05">CORONARY ATHER/UNSP TYP BYP GR</ICD9>
"TEMP","RORPRTDEF",13,61)
<ICD9 ID="414.06">COR ATH NATV ART TP HRT</ICD9>
"TEMP","RORPRTDEF",13,62)
<ICD9 ID="414.07">COR ATH BPS GRAFT TP HRT</ICD9>
"TEMP","RORPRTDEF",13,63)
<ICD9 ID="414.10">ANEURYSM OF HEART</ICD9>
"TEMP","RORPRTDEF",13,64)
<ICD9 ID="414.11">ANEURYSM OF CORONARY VESSELS</ICD9>
"TEMP","RORPRTDEF",13,65)
<ICD9 ID="414.12">DISSECTION OF CORONARY ARTERY</ICD9>
"TEMP","RORPRTDEF",13,66)
<ICD9 ID="414.19">OTHER ANEURYSM OF HEART</ICD9>
"TEMP","RORPRTDEF",13,67)
<ICD9 ID="414.8">CHR ISCHEMIC HRT DIS NEC</ICD9>
"TEMP","RORPRTDEF",13,68)
<ICD9 ID="414.9">CHR ISCHEMIC HRT DIS NOS</ICD9>
"TEMP","RORPRTDEF",13,69)
</GROUP>
"TEMP","RORPRTDEF",13,70)
</ICD9LST>
"TEMP","RORPRTDEF",13,71)
<PANELS>
"TEMP","RORPRTDEF",13,72)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",13,73)
</PANELS>
"TEMP","RORPRTDEF",13,74)
</PARAMS>
"TEMP","RORPRTDEF",14)
13::Schizophrenia
"TEMP","RORPRTDEF",14,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",14,2)
<PARAMS>
"TEMP","RORPRTDEF",14,3)
<ICD9LST>
"TEMP","RORPRTDEF",14,4)
<GROUP ID="Schizophrenia">
"TEMP","RORPRTDEF",14,5)
<ICD9 ID="295.00">SIMPL SCHIZOPHREN-UNSPEC</ICD9>
"TEMP","RORPRTDEF",14,6)
<ICD9 ID="295.01">SIMPL SCHIZOPHREN-SUBCHR</ICD9>
"TEMP","RORPRTDEF",14,7)
<ICD9 ID="295.02">SIMPLE SCHIZOPHREN-CHR</ICD9>
"TEMP","RORPRTDEF",14,8)
<ICD9 ID="295.03">SIMP SCHIZ-SUBCHR/EXACER</ICD9>
"TEMP","RORPRTDEF",14,9)
<ICD9 ID="295.04">SIMPL SCHIZO-CHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,10)
<ICD9 ID="295.05">SIMPL SCHIZOPHREN-REMISS</ICD9>
"TEMP","RORPRTDEF",14,11)
<ICD9 ID="295.10">DISORGANIZED SCHIZO-UNSP</ICD9>
"TEMP","RORPRTDEF",14,12)
<ICD9 ID="295.11">DISORGANIZED SCHIZO-SUBCHRONIC</ICD9>
"TEMP","RORPRTDEF",14,13)
<ICD9 ID="295.12">DISORGANIZED SCHIZO-CHRONIC</ICD9>
"TEMP","RORPRTDEF",14,14)
<ICD9 ID="295.13">DISORG SCHIZO-SUBCHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,15)
<ICD9 ID="295.14">DISORG SCHIZO-CHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,16)
<ICD9 ID="295.15">DISORGANIZED SCHIZO-REMISS</ICD9>
"TEMP","RORPRTDEF",14,17)
<ICD9 ID="295.20">CATATONIC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",14,18)
<ICD9 ID="295.21">CATATONIC-SUBCHRONIC</ICD9>
"TEMP","RORPRTDEF",14,19)
<ICD9 ID="295.22">CATATONIC-CHRONIC</ICD9>
"TEMP","RORPRTDEF",14,20)
<ICD9 ID="295.23">CATATONIC-SUBCHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,21)
<ICD9 ID="295.24">CATATONIC-CHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,22)
<ICD9 ID="295.25">CATATONIC-REMISSION</ICD9>
"TEMP","RORPRTDEF",14,23)
<ICD9 ID="295.30">PARANOID SCHIZO-UNSPEC</ICD9>
"TEMP","RORPRTDEF",14,24)
<ICD9 ID="295.31">PARANOID SCHIZO-SUBCHR</ICD9>
"TEMP","RORPRTDEF",14,25)
<ICD9 ID="295.32">PARANOID SCHIZO-CHRONIC</ICD9>
"TEMP","RORPRTDEF",14,26)
<ICD9 ID="295.33">PARAN SCHIZO-SUBCHR/EXAC</ICD9>
"TEMP","RORPRTDEF",14,27)
<ICD9 ID="295.34">PARAN SCHIZO-CHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,28)
<ICD9 ID="295.35">PARANOID SCHIZO-REMISS</ICD9>
"TEMP","RORPRTDEF",14,29)
<ICD9 ID="295.40">SCHIZOPHRENIFORM DIS NOS</ICD9>
"TEMP","RORPRTDEF",14,30)
<ICD9 ID="295.41">SCHIZOPHRENIC DIS-SUBCHR</ICD9>
"TEMP","RORPRTDEF",14,31)
<ICD9 ID="295.42">SCHIZOPHREN DIS-CHRONIC</ICD9>
"TEMP","RORPRTDEF",14,32)
<ICD9 ID="295.43">SCHIZO DIS-SUBCHR/EXACER</ICD9>
"TEMP","RORPRTDEF",14,33)
<ICD9 ID="295.44">SCHIZOPHR DIS-CHR/EXACER</ICD9>
"TEMP","RORPRTDEF",14,34)
<ICD9 ID="295.45">SCHIZOPHRENIC DIS-REMISS</ICD9>
"TEMP","RORPRTDEF",14,35)
<ICD9 ID="295.50">LATENT SCHIZOPHREN-UNSP</ICD9>
"TEMP","RORPRTDEF",14,36)
<ICD9 ID="295.51">LAT SCHIZOPHREN-SUBCHR</ICD9>
"TEMP","RORPRTDEF",14,37)
<ICD9 ID="295.52">LATENT SCHIZOPHREN-CHR</ICD9>
"TEMP","RORPRTDEF",14,38)
<ICD9 ID="295.53">LAT SCHIZO-SUBCHR/EXACER</ICD9>
"TEMP","RORPRTDEF",14,39)
<ICD9 ID="295.54">LATENT SCHIZO-CHR/EXACER</ICD9>
"TEMP","RORPRTDEF",14,40)
<ICD9 ID="295.55">LAT SCHIZOPHREN-REMISS</ICD9>
"TEMP","RORPRTDEF",14,41)
<ICD9 ID="295.60">SCHIZOPHR DIS RESID NOS</ICD9>
"TEMP","RORPRTDEF",14,42)
<ICD9 ID="295.61">SCHIZOPH DIS RESID-SUBCH</ICD9>
"TEMP","RORPRTDEF",14,43)
<ICD9 ID="295.62">SCHIZOPHR DIS RESID-CHR</ICD9>
"TEMP","RORPRTDEF",14,44)
<ICD9 ID="295.63">SCHIZO RESID SUBCHR/EXAC</ICD9>
"TEMP","RORPRTDEF",14,45)
<ICD9 ID="295.64">SCHIZOPH RESID-CHRO/EXAC</ICD9>
"TEMP","RORPRTDEF",14,46)
<ICD9 ID="295.65">SCHIZOPH DIS RESID-REMIS</ICD9>
"TEMP","RORPRTDEF",14,47)
<ICD9 ID="295.70">SCHIZOAFFECTIVE DIS NOS</ICD9>
"TEMP","RORPRTDEF",14,48)
<ICD9 ID="295.71">SCHIZOAFFECTV DIS-SUBCHR</ICD9>
"TEMP","RORPRTDEF",14,49)
<ICD9 ID="295.72">SCHIZOAFFECTIVE DIS-CHR</ICD9>
"TEMP","RORPRTDEF",14,50)
<ICD9 ID="295.73">SCHIZOAFF DIS-SUBCH/EXAC</ICD9>
"TEMP","RORPRTDEF",14,51)
<ICD9 ID="295.74">SCHIZOAFFTV DIS-CHR/EXAC</ICD9>
"TEMP","RORPRTDEF",14,52)
<ICD9 ID="295.75">SCHIZOAFFECTVE DIS-REMIS</ICD9>
"TEMP","RORPRTDEF",14,53)
<ICD9 ID="295.80">SCHIZOPHRENIA OTH-UNSPEC</ICD9>
"TEMP","RORPRTDEF",14,54)
<ICD9 ID="295.81">SCHIZOPHRENIA OTH-SUBCHR</ICD9>
"TEMP","RORPRTDEF",14,55)
<ICD9 ID="295.82">SCHIZOPHRENIA OTH-CHR</ICD9>
"TEMP","RORPRTDEF",14,56)
<ICD9 ID="295.83">SCHIZO OTH-SUBCHR/EXACER</ICD9>
"TEMP","RORPRTDEF",14,57)
<ICD9 ID="295.84">SCHIZO OTH-CHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,58)
<ICD9 ID="295.85">SCHIZOPHRENIA OTH-REMISS</ICD9>
"TEMP","RORPRTDEF",14,59)
<ICD9 ID="295.90">SCHIZOPHRENIA NOS-UNSPEC</ICD9>
"TEMP","RORPRTDEF",14,60)
<ICD9 ID="295.91">SCHIZOPHRENIA NOS-SUBCHR</ICD9>
"TEMP","RORPRTDEF",14,61)
<ICD9 ID="295.92">SCHIZOPHRENIA NOS-CHR</ICD9>
"TEMP","RORPRTDEF",14,62)
<ICD9 ID="295.93">SCHIZO NOS-SUBCHR/EXACER</ICD9>
"TEMP","RORPRTDEF",14,63)
<ICD9 ID="295.94">SCHIZO NOS-CHR/EXACERB</ICD9>
"TEMP","RORPRTDEF",14,64)
<ICD9 ID="295.95">SCHIZOPHRENIA NOS-REMISS</ICD9>
"TEMP","RORPRTDEF",14,65)
</GROUP>
"TEMP","RORPRTDEF",14,66)
</ICD9LST>
"TEMP","RORPRTDEF",14,67)
<PANELS>
"TEMP","RORPRTDEF",14,68)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",14,69)
</PANELS>
"TEMP","RORPRTDEF",14,70)
</PARAMS>
"TEMP","RORPRTDEF",15)
13::Substance use (non-alcohol)
"TEMP","RORPRTDEF",15,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",15,2)
<PARAMS>
"TEMP","RORPRTDEF",15,3)
<ICD9LST>
"TEMP","RORPRTDEF",15,4)
<GROUP ID="Substance use (non-alcohol)">
"TEMP","RORPRTDEF",15,5)
<ICD9 ID="304.00">OPIOID DEPENDENCE UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",15,6)
<ICD9 ID="304.01">OPIOID DEPENDENCE CONT</ICD9>
"TEMP","RORPRTDEF",15,7)
<ICD9 ID="304.02">OPIOID DEPENDENCE EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,8)
<ICD9 ID="304.03">OPIOID DEPENDENCE IN REMISSION</ICD9>
"TEMP","RORPRTDEF",15,9)
<ICD9 ID="304.09">OTHER OPIOID TYPE DEPEN, NEC</ICD9>
"TEMP","RORPRTDEF",15,10)
<ICD9 ID="304.10">SED,HYP,ANXIOLYT DEP-NOS</ICD9>
"TEMP","RORPRTDEF",15,11)
<ICD9 ID="304.11">SED,HYP,ANXIOLYT DEP-CON</ICD9>
"TEMP","RORPRTDEF",15,12)
<ICD9 ID="304.12">SED,HYP,ANXIOLYT DEP-EPI</ICD9>
"TEMP","RORPRTDEF",15,13)
<ICD9 ID="304.13">SED,HYP,ANXIOLYT DEP-REM</ICD9>
"TEMP","RORPRTDEF",15,14)
<ICD9 ID="304.14">PARALDEHYDE DEPENDENCE</ICD9>
"TEMP","RORPRTDEF",15,15)
<ICD9 ID="304.15">PLACIDYL, ETHCHLORUYNOL DEPEND</ICD9>
"TEMP","RORPRTDEF",15,16)
<ICD9 ID="304.16">VALIUM, DIAZEPAM DEPEND</ICD9>
"TEMP","RORPRTDEF",15,17)
<ICD9 ID="304.17">DORIDEN, GLUTETHIMIDE DEPEND</ICD9>
"TEMP","RORPRTDEF",15,18)
<ICD9 ID="304.18">BARBITURATE DEPENDENCE</ICD9>
"TEMP","RORPRTDEF",15,19)
<ICD9 ID="304.19">OTHER SEDATIVE OR HYPNOTIC</ICD9>
"TEMP","RORPRTDEF",15,20)
<ICD9 ID="304.20">COCAINE DEPEND-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,21)
<ICD9 ID="304.21">COCAINE DEPEND-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,22)
<ICD9 ID="304.22">COCAINE DEPEND-EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,23)
<ICD9 ID="304.23">COCAINE DEPEND-REMISS</ICD9>
"TEMP","RORPRTDEF",15,24)
<ICD9 ID="304.30">CANNABIS DEPENDENCE UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,25)
<ICD9 ID="304.31">CANNABIS DEPENDENCE CONTINUOUS</ICD9>
"TEMP","RORPRTDEF",15,26)
<ICD9 ID="304.32">CANNABIS DEPENDENCE EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,27)
<ICD9 ID="304.33">CANNABIS DEPENDENCE IN REMISS</ICD9>
"TEMP","RORPRTDEF",15,28)
<ICD9 ID="304.39">OTHER CANNABIS DEPEND, NEC</ICD9>
"TEMP","RORPRTDEF",15,29)
<ICD9 ID="304.40">AMPHETAMINE DEPENDENCE UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,30)
<ICD9 ID="304.41">AMPHETAMINE DEPENDENCE CONT</ICD9>
"TEMP","RORPRTDEF",15,31)
<ICD9 ID="304.42">AMPHETAMINE DEPENDENCE EPISOD</ICD9>
"TEMP","RORPRTDEF",15,32)
<ICD9 ID="304.43">AMPHETAMINE DEPENDENCE IN REM</ICD9>
"TEMP","RORPRTDEF",15,33)
<ICD9 ID="304.49">OTHER PSYCHOSTIM DEPEND</ICD9>
"TEMP","RORPRTDEF",15,34)
<ICD9 ID="304.50">HALLUCINOGEN DEPENDENCE UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,35)
<ICD9 ID="304.51">HALLUCINOGEN DEPENDENCE CONT</ICD9>
"TEMP","RORPRTDEF",15,36)
<ICD9 ID="304.52">HALLUCINOGEN DEPENDENCE EPISOD</ICD9>
"TEMP","RORPRTDEF",15,37)
<ICD9 ID="304.53">HALLUCINOGEN DEPENDENCE IN REM</ICD9>
"TEMP","RORPRTDEF",15,38)
<ICD9 ID="304.59">OTHER HALLUCINOGEN DEPEND</ICD9>
"TEMP","RORPRTDEF",15,39)
<ICD9 ID="304.60">DRUG DEPEND OTH-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,40)
<ICD9 ID="304.61">DRUG DEPEND OTH-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,41)
<ICD9 ID="304.62">DRUG DEPEND OTH-EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,42)
<ICD9 ID="304.63">DRUG DEPEND OTH-IN REM</ICD9>
"TEMP","RORPRTDEF",15,43)
<ICD9 ID="304.70">OPIOID+OTHER DEP-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,44)
<ICD9 ID="304.71">OPIOID+OTHER DEP-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,45)
<ICD9 ID="304.72">OPIOID+OTHER DEP-EPISOD</ICD9>
"TEMP","RORPRTDEF",15,46)
<ICD9 ID="304.73">OPIOID+OTHER DEP-REMISS</ICD9>
"TEMP","RORPRTDEF",15,47)
<ICD9 ID="304.80">COMB DRUG DEP NEC-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,48)
<ICD9 ID="304.81">COMB DRUG DEP NEC-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,49)
<ICD9 ID="304.82">COMB DRUG DEP NEC-EPISOD</ICD9>
"TEMP","RORPRTDEF",15,50)
<ICD9 ID="304.83">COMB DRUG DEP NEC-REMISS</ICD9>
"TEMP","RORPRTDEF",15,51)
<ICD9 ID="304.90">UNSPEC DRUG DEPEND NEC UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,52)
<ICD9 ID="304.91">UNSPEC DRUG DEPEND CONTIN</ICD9>
"TEMP","RORPRTDEF",15,53)
<ICD9 ID="304.92">DRUG DEPEND NOS-EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,54)
<ICD9 ID="304.93">DRUG DEPEND NOS-REMISS</ICD9>
"TEMP","RORPRTDEF",15,55)
<ICD9 ID="304.99">UNSPEC DRUG DEPEND, NEC</ICD9>
"TEMP","RORPRTDEF",15,56)
<ICD9 ID="305.20">CANNABIS ABUSE UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",15,57)
<ICD9 ID="305.21">CANNABIS ABUSE-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,58)
<ICD9 ID="305.22">CANNABIS ABUSE-EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,59)
<ICD9 ID="305.23">CANNABIS ABUSE-IN REMISS</ICD9>
"TEMP","RORPRTDEF",15,60)
<ICD9 ID="305.29">OTHER CANNABIS USE, NEC</ICD9>
"TEMP","RORPRTDEF",15,61)
<ICD9 ID="305.30">HALLUCINOG ABUSE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,62)
<ICD9 ID="305.31">HALLUCINOG ABUSE-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,63)
<ICD9 ID="305.32">HALLUCINOG ABUSE-EPISOD</ICD9>
"TEMP","RORPRTDEF",15,64)
<ICD9 ID="305.33">HALLUCINOG ABUSE-REMISS</ICD9>
"TEMP","RORPRTDEF",15,65)
<ICD9 ID="305.39">OTHER HALLUCINOGEN ABUSE, NEC</ICD9>
"TEMP","RORPRTDEF",15,66)
<ICD9 ID="305.40">SED,HYP,ANXIOLYTC AB-NOS</ICD9>
"TEMP","RORPRTDEF",15,67)
<ICD9 ID="305.41">SED,HYP,ANXIOLYTC AB-CON</ICD9>
"TEMP","RORPRTDEF",15,68)
<ICD9 ID="305.42">SED,HYP,ANXIOLYTC AB-EPI</ICD9>
"TEMP","RORPRTDEF",15,69)
<ICD9 ID="305.43">SED,HYP,ANXIOLYTC AB-REM</ICD9>
"TEMP","RORPRTDEF",15,70)
<ICD9 ID="305.44">PARALDEHYDE ABUSE</ICD9>
"TEMP","RORPRTDEF",15,71)
<ICD9 ID="305.45">PLACIDYL, ETHCHLORUYNOL ABUSE</ICD9>
"TEMP","RORPRTDEF",15,72)
<ICD9 ID="305.46">VALIUM, DIAZEPAM ABUSE</ICD9>
"TEMP","RORPRTDEF",15,73)
<ICD9 ID="305.47">DORIDEN, GLUTETHIMIDE ABUSE</ICD9>
"TEMP","RORPRTDEF",15,74)
<ICD9 ID="305.48">BARBITURATES ABUSE</ICD9>
"TEMP","RORPRTDEF",15,75)
<ICD9 ID="305.49">OTHER SEDATIVE OR HYPNOT, NEC</ICD9>
"TEMP","RORPRTDEF",15,76)
<ICD9 ID="305.50">OPIOID ABUSE UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",15,77)
<ICD9 ID="305.51">OPIOID ABUSE CONTINUOUS</ICD9>
"TEMP","RORPRTDEF",15,78)
<ICD9 ID="305.52">OPIOID ABUSE EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,79)
<ICD9 ID="305.53">OPIOID ABUSE IN REMISSION</ICD9>
"TEMP","RORPRTDEF",15,80)
<ICD9 ID="305.59">OTHER OPIOID ABUSE, NEC</ICD9>
"TEMP","RORPRTDEF",15,81)
<ICD9 ID="305.6">COCAINE ABUSE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,82)
<ICD9 ID="305.60">COCAINE ABUSE UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",15,83)
<ICD9 ID="305.61">COCAINE ABUSE-CONTINUOUS</ICD9>
"TEMP","RORPRTDEF",15,84)
<ICD9 ID="305.62">COCAINE ABUSE-EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,85)
<ICD9 ID="305.63">COCAINE ABUSE-IN REMISS</ICD9>
"TEMP","RORPRTDEF",15,86)
<ICD9 ID="305.70">AMPHETAMINE ABUSE-UNSPECIFIED</ICD9>
"TEMP","RORPRTDEF",15,87)
<ICD9 ID="305.71">AMPHETAMINE ABUSE-CONTINUOUS</ICD9>
"TEMP","RORPRTDEF",15,88)
<ICD9 ID="305.72">AMPHETAMINE ABUSE-EPISODIC</ICD9>
"TEMP","RORPRTDEF",15,89)
<ICD9 ID="305.73">AMPHETAMINE ABUSE-REMISS</ICD9>
"TEMP","RORPRTDEF",15,90)
<ICD9 ID="305.79">OTHER SYMPATHOMIMETIC, NEC</ICD9>
"TEMP","RORPRTDEF",15,91)
<ICD9 ID="305.80">ANTIDEPRESS ABUSE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,92)
<ICD9 ID="305.81">ANTIDEPRESS ABUSE-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,93)
<ICD9 ID="305.82">ANTIDEPRESS ABUSE-EPISOD</ICD9>
"TEMP","RORPRTDEF",15,94)
<ICD9 ID="305.83">ANTIDEPRESS ABUSE-REMISS</ICD9>
"TEMP","RORPRTDEF",15,95)
<ICD9 ID="305.90">OTHER DRUG ABUSE-UNSPEC</ICD9>
"TEMP","RORPRTDEF",15,96)
<ICD9 ID="305.91">OTHER DRUG ABUSE-CONTIN</ICD9>
"TEMP","RORPRTDEF",15,97)
<ICD9 ID="305.92">OTHER DRUG ABUSE-EPISOD</ICD9>
"TEMP","RORPRTDEF",15,98)
<ICD9 ID="305.93">OTHER DRUG ABUSE-REMISS</ICD9>
"TEMP","RORPRTDEF",15,99)
<ICD9 ID="305.99">OTHER, MIXED, UNSPEC, NEC</ICD9>
"TEMP","RORPRTDEF",15,100)
</GROUP>
"TEMP","RORPRTDEF",15,101)
</ICD9LST>
"TEMP","RORPRTDEF",15,102)
<PANELS>
"TEMP","RORPRTDEF",15,103)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",15,104)
</PANELS>
"TEMP","RORPRTDEF",15,105)
</PARAMS>
"TEMP","RORPRTDEF",16)
13::Tobacco Use
"TEMP","RORPRTDEF",16,1)
<?xml version="1.0" encoding="UTF-8"?>
"TEMP","RORPRTDEF",16,2)
<PARAMS>
"TEMP","RORPRTDEF",16,3)
<ICD9LST>
"TEMP","RORPRTDEF",16,4)
<GROUP ID="Tobacco Use">
"TEMP","RORPRTDEF",16,5)
<ICD9 ID="305.1">TOBACCO USE DISORDER</ICD9>
"TEMP","RORPRTDEF",16,6)
<ICD9 ID="989.84">TOXIC EFFECT OF TOBACCO</ICD9>
"TEMP","RORPRTDEF",16,7)
<ICD9 ID="V15.82">HX-TOBACCO USE</ICD9>
"TEMP","RORPRTDEF",16,8)
</GROUP>
"TEMP","RORPRTDEF",16,9)
</ICD9LST>
"TEMP","RORPRTDEF",16,10)
<PANELS>
"TEMP","RORPRTDEF",16,11)
<PANEL ID="160"/>
"TEMP","RORPRTDEF",16,12)
</PANELS>
"TEMP","RORPRTDEF",16,13)
</PARAMS>
"UP",798.8,798.87,-1)
798.8^RI
"UP",798.8,798.87,0)
798.87
"UP",799.4,799.41,-1)
799.4^10
"UP",799.4,799.41,0)
799.41
"VER")
8.0^22.0
"^DD",798.8,798.87,.03,0)
SORT BY^S^0:NO;1:AS-IS;2:STRING;3:NUMBER;^0;3^Q
"^DD",798.8,798.87,.03,8.5)
@
"^DD",798.8,798.87,.03,9)
@
"^DD",798.8,798.87,.03,21,0)
^.001^8^8^3061114^^
"^DD",798.8,798.87,.03,21,1,0)
The SORT field determines if the value of the 
"^DD",798.8,798.87,.03,21,2,0)
element should be included in the special index
"^DD",798.8,798.87,.03,21,3,0)
(APSV1) that allows report sorting on the server.
"^DD",798.8,798.87,.03,21,4,0)
It also controls how the value is transformed
"^DD",798.8,798.87,.03,21,5,0)
before adding to the index.
"^DD",798.8,798.87,.03,21,6,0)
 
"^DD",798.8,798.87,.03,21,7,0)
Only those elements that have single-line values 
"^DD",798.8,798.87,.03,21,8,0)
can be sorted.
"^DD",798.8,798.87,.03,23,0)
^.001^29^29^3061114^^
"^DD",798.8,798.87,.03,23,1,0)
For example, let us assume the report has the following
"^DD",798.8,798.87,.03,23,2,0)
structure:
"^DD",798.8,798.87,.03,23,3,0)
 
"^DD",798.8,798.87,.03,23,4,0)
  <REPORT>
"^DD",798.8,798.87,.03,23,5,0)
   <HEADER>
"^DD",798.8,798.87,.03,23,6,0)
   ...
"^DD",798.8,798.87,.03,23,7,0)
   </HEADER>
"^DD",798.8,798.87,.03,23,8,0)
   <PATIENTS>
"^DD",798.8,798.87,.03,23,9,0)
    <PATIENT>
"^DD",798.8,798.87,.03,23,10,0)
     <NAME> ... </NAME>
"^DD",798.8,798.87,.03,23,11,0)
     <DOB> ... </DOB>
"^DD",798.8,798.87,.03,23,12,0)
     <SELRULES>
"^DD",798.8,798.87,.03,23,13,0)
      <RULE>
"^DD",798.8,798.87,.03,23,14,0)
       <NAME> ... </NAME>
"^DD",798.8,798.87,.03,23,15,0)
       <DATE> ... </DATE>
"^DD",798.8,798.87,.03,23,16,0)
      </RULE>
"^DD",798.8,798.87,.03,23,17,0)
      ...
"^DD",798.8,798.87,.03,23,18,0)
     </SELRULES>
"^DD",798.8,798.87,.03,23,19,0)
    </PATIENT>
"^DD",798.8,798.87,.03,23,20,0)
    ...
"^DD",798.8,798.87,.03,23,21,0)
   </PATIENTS>
"^DD",798.8,798.87,.03,23,22,0)
  </REPORT>
"^DD",798.8,798.87,.03,23,23,0)
 
"^DD",798.8,798.87,.03,23,24,0)
If the SORT BY field is populated and greater than 0 
"^DD",798.8,798.87,.03,23,25,0)
for the NAME child element of each PATIENT element,
"^DD",798.8,798.87,.03,23,26,0)
then the patients will be sorted by their names.
"^DD",798.8,798.87,.03,23,27,0)
 
"^DD",798.8,798.87,.03,23,28,0)
See the $$SORTBY^RORDD01 function for details 
"^DD",798.8,798.87,.03,23,29,0)
regarding different types of sorting.
"^DD",798.8,798.87,.03,"DT")
3030819
"^DD",798.9,798.9,0)
FIELD^^2^4
"^DD",798.9,798.9,0,"DDA")
N
"^DD",798.9,798.9,0,"DT")
3031006
"^DD",798.9,798.9,0,"IX","ALN",798.92,.01)

"^DD",798.9,798.9,0,"IX","ANLT",798.92,.02)

"^DD",798.9,798.9,0,"NM","ROR LAB SEARCH")

"^DD",798.9,798.9,0,"VRPK")
ROR
"^DD",798.9,798.9,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(798.9,$G(DA))  K:$L(X)>30!($L(X)<3) X
"^DD",798.9,798.9,.01,1,0)
^.1^^0
"^DD",798.9,798.9,.01,3)
Enter a unique name spaced criterion name (3-30 characters).
"^DD",798.9,798.9,.01,8.5)
@
"^DD",798.9,798.9,.01,9)
@
"^DD",798.9,798.9,.01,21,0)
^^6^6^3011016^
"^DD",798.9,798.9,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.9,798.9,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.9,798.9,.01,21,3,0)
 
"^DD",798.9,798.9,.01,21,4,0)
The criterion name must be unique and name spaced.
"^DD",798.9,798.9,.01,21,5,0)
The names that are used for National Registries
"^DD",798.9,798.9,.01,21,6,0)
must start with "VA".
"^DD",798.9,798.9,.01,"DEL",1,0)
I $$VADEL^RORDD(798.9,$G(DA))
"^DD",798.9,798.9,.01,"DT")
3010720
"^DD",798.9,798.9,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;3^Q:$$VAEDT^RORDD(798.9,,-1)
"^DD",798.9,798.9,.09,8.5)
@
"^DD",798.9,798.9,.09,9)
@
"^DD",798.9,798.9,.09,21,0)
^^6^6^3060203^
"^DD",798.9,798.9,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.9,798.9,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.9,798.9,.09,21,3,0)
 
"^DD",798.9,798.9,.09,21,4,0)
The national registries must have this field set
"^DD",798.9,798.9,.09,21,5,0)
to "YES". This prevents local editing of other
"^DD",798.9,798.9,.09,21,6,0)
fields of national registry definitions.
"^DD",798.9,798.9,.09,"DEL",1,0)
I $$VADEL^RORDD(798.9,,-1)
"^DD",798.9,798.9,.09,"DT")
3011119
"^DD",798.9,798.9,1,0)
STATUS^S^0:ACTIVE;1:INACTIVE;^0;2^Q
"^DD",798.9,798.9,1,21,0)
^^2^2^3020403^
"^DD",798.9,798.9,1,21,1,0)
Select the "INACTIVE" code if you want to disable
"^DD",798.9,798.9,1,21,2,0)
the criterion temporarily.
"^DD",798.9,798.9,1,"DT")
3011016
"^DD",798.9,798.9,2,0)
LAB TEST^798.92^^1;0
"^DD",798.9,798.9,2,9)
@
"^DD",798.9,798.9,2,21,0)
^^9^9^3011119^
"^DD",798.9,798.9,2,21,1,0)
This multiple contains a list of the Lab search 
"^DD",798.9,798.9,2,21,2,0)
indicators used by the registry update process.
"^DD",798.9,798.9,2,21,3,0)
 
"^DD",798.9,798.9,2,21,4,0)
If at least one of the indicators is evaluated as 
"^DD",798.9,798.9,2,21,5,0)
True, the macro referencing the search criterion
"^DD",798.9,798.9,2,21,6,0)
will be evaluated as True as well.
"^DD",798.9,798.9,2,21,7,0)
 
"^DD",798.9,798.9,2,21,8,0)
This multiple can contain several records for the
"^DD",798.9,798.9,2,21,9,0)
same Lab test.
"^DD",798.9,798.92,0)
LAB TEST SUB-FIELD^^2^4
"^DD",798.9,798.92,0,"DT")
3031006
"^DD",798.9,798.92,0,"IX","B",798.92,.01)

"^DD",798.9,798.92,0,"NM","LAB TEST")

"^DD",798.9,798.92,0,"UP")
798.9
"^DD",798.9,798.92,.01,0)
LOINC CODE^MNJ7,0^^0;1^K:+X'=X!(X>9999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.9,798.92,.01,1,0)
^.1
"^DD",798.9,798.92,.01,1,1,0)
798.92^B
"^DD",798.9,798.92,.01,1,1,1)
S ^ROR(798.9,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",798.9,798.92,.01,1,1,2)
K ^ROR(798.9,DA(1),1,"B",$E(X,1,30),DA)
"^DD",798.9,798.92,.01,1,1,3)
Do not delete!
"^DD",798.9,798.92,.01,1,2,0)
798.9^ALN
"^DD",798.9,798.92,.01,1,2,1)
S ^ROR(798.9,"ALN",$E(X,1,30),DA(1),DA)=""
"^DD",798.9,798.92,.01,1,2,2)
K ^ROR(798.9,"ALN",$E(X,1,30),DA(1),DA)
"^DD",798.9,798.92,.01,1,2,3)
Do not delete!
"^DD",798.9,798.92,.01,1,2,"%D",0)
^^3^3^3060203^
"^DD",798.9,798.92,.01,1,2,"%D",1,0)
This cross-reference can be used to find all 
"^DD",798.9,798.92,.01,1,2,"%D",2,0)
criteria that look for Lab results with the
"^DD",798.9,798.92,.01,1,2,"%D",3,0)
specified LOINC code.
"^DD",798.9,798.92,.01,1,2,"DT")
3010621
"^DD",798.9,798.92,.01,3)
Enter the LOINC code without a control digit.
"^DD",798.9,798.92,.01,8.5)
@
"^DD",798.9,798.92,.01,9)
@
"^DD",798.9,798.92,.01,21,0)
^^2^2^3060202^
"^DD",798.9,798.92,.01,21,1,0)
Enter the numeric LOINC code (without the check
"^DD",798.9,798.92,.01,21,2,0)
digit) of the Lab result to be searched for. 
"^DD",798.9,798.92,.01,23,0)
^^2^2^3060202^
"^DD",798.9,798.92,.01,23,1,0)
If you want to use only NLT code, enter zero as the
"^DD",798.9,798.92,.01,23,2,0)
value of this field.
"^DD",798.9,798.92,.01,"DT")
3011119
"^DD",798.9,798.92,.02,0)
NLT CODE^F^^0;2^K:'(X?5N1"."4.5N) X
"^DD",798.9,798.92,.02,1,0)
^.1
"^DD",798.9,798.92,.02,1,1,0)
798.9^ANLT
"^DD",798.9,798.92,.02,1,1,1)
S ^ROR(798.9,"ANLT",$E(X,1,30),DA(1),DA)=""
"^DD",798.9,798.92,.02,1,1,2)
K ^ROR(798.9,"ANLT",$E(X,1,30),DA(1),DA)
"^DD",798.9,798.92,.02,1,1,3)
Do not delete!
"^DD",798.9,798.92,.02,1,1,"%D",0)
^^3^3^3060203^
"^DD",798.9,798.92,.02,1,1,"%D",1,0)
This cross-reference can be used to find all 
"^DD",798.9,798.92,.02,1,1,"%D",2,0)
criteria that look for Lab results with the
"^DD",798.9,798.92,.02,1,1,"%D",3,0)
specified NLT code.
"^DD",798.9,798.92,.02,1,1,"DT")
3010621
"^DD",798.9,798.92,.02,3)
Enter the NLT code (NNNNN.MMMM[M]).
"^DD",798.9,798.92,.02,8.5)
@
"^DD",798.9,798.92,.02,9)
@
"^DD",798.9,798.92,.02,21,0)
^.001^5^5^3011119^^^
"^DD",798.9,798.92,.02,21,1,0)
Enter the NLT code of the Lab result to be 
"^DD",798.9,798.92,.02,21,2,0)
searched for. Both LOINC and NLT codes (if
"^DD",798.9,798.92,.02,21,3,0)
available) are used for searching the Lab results.
"^DD",798.9,798.92,.02,21,4,0)
If you want to use only the LOINC code, leave this
"^DD",798.9,798.92,.02,21,5,0)
field empty.
"^DD",798.9,798.92,.02,"DT")
3011119
"^DD",798.9,798.92,1,0)
INDICATOR^RS^0:Ignore;1:Use Reference Range;2:Contains;3:Greater Than;4:Less Than;5:Equal To;6:Positive Result;^0;3^Q
"^DD",798.9,798.92,1,8.5)
@
"^DD",798.9,798.92,1,9)
@
"^DD",798.9,798.92,1,21,0)
^^35^35^3060203^
"^DD",798.9,798.92,1,21,1,0)
The value of this field indicates the comparison
"^DD",798.9,798.92,1,21,2,0)
operation applied to the Lab result. The Lab
"^DD",798.9,798.92,1,21,3,0)
result is compared to the value of the INDICATED 
"^DD",798.9,798.92,1,21,4,0)
VALUE field. 
"^DD",798.9,798.92,1,21,5,0)
 
"^DD",798.9,798.92,1,21,6,0)
NOTE: All string comparisons are case-insensitive.
"^DD",798.9,798.92,1,21,7,0)
 
"^DD",798.9,798.92,1,21,8,0)
For example, if the internal value of this field 
"^DD",798.9,798.92,1,21,9,0)
is equal to 3 ("Greater Than") and the value of
"^DD",798.9,798.92,1,21,10,0)
the INDICATED VALUE field is 5, then this 
"^DD",798.9,798.92,1,21,11,0)
indicator will be evaluated as True for all
"^DD",798.9,798.92,1,21,12,0)
numeric Lab results values greater than 5.
"^DD",798.9,798.92,1,21,13,0)
 
"^DD",798.9,798.92,1,21,14,0)
The "Contains" indicator checks if the indicated
"^DD",798.9,798.92,1,21,15,0)
value is contained in the Lab result value.
"^DD",798.9,798.92,1,21,16,0)
 
"^DD",798.9,798.92,1,21,17,0)
The only exceptions are the "Use Reference Range"
"^DD",798.9,798.92,1,21,18,0)
indicator, which checks if the result value is
"^DD",798.9,798.92,1,21,19,0)
outside of the reference range defined for the 
"^DD",798.9,798.92,1,21,20,0)
Lab test, and the "Positive Result".
"^DD",798.9,798.92,1,21,21,0)
 
"^DD",798.9,798.92,1,21,22,0)
The "Positive Result" indicator selects a test 
"^DD",798.9,798.92,1,21,23,0)
result if the value
"^DD",798.9,798.92,1,21,24,0)
 
"^DD",798.9,798.92,1,21,25,0)
  * is equal to "P"
"^DD",798.9,798.92,1,21,26,0)
 
"^DD",798.9,798.92,1,21,27,0)
    or
"^DD",798.9,798.92,1,21,28,0)
 
"^DD",798.9,798.92,1,21,29,0)
  * contains "POS", "DETEC" or "REA" and
"^DD",798.9,798.92,1,21,30,0)
    does not contain "NEG", "NO" or "IND".
"^DD",798.9,798.92,1,21,31,0)
 
"^DD",798.9,798.92,1,21,32,0)
For example, the "POSITIVE", "POS", "REACT", and 
"^DD",798.9,798.92,1,21,33,0)
"DETECTABLE" values will be picked up. At the same
"^DD",798.9,798.92,1,21,34,0)
time, the "NON-REACT", "INDETERMINATE", and "NEG"
"^DD",798.9,798.92,1,21,35,0)
values will be skipped.
"^DD",798.9,798.92,1,"DT")
3031006
"^DD",798.9,798.92,2,0)
INDICATED VALUE^F^^0;4^K:$L(X)>30!($L(X)<1) X
"^DD",798.9,798.92,2,3)
Answer must be 1-30 characters in length.
"^DD",798.9,798.92,2,8.5)
@
"^DD",798.9,798.92,2,9)
@
"^DD",798.9,798.92,2,21,0)
^^3^3^3060202^
"^DD",798.9,798.92,2,21,1,0)
This field holds the value that the Lab results
"^DD",798.9,798.92,2,21,2,0)
are compared to (except the "Use Reference Range"
"^DD",798.9,798.92,2,21,3,0)
and Positive Result indicators).
"^DD",798.9,798.92,2,"DT")
3010621
"^DD",799.31,799.31,0)
FIELD^^.01^1
"^DD",799.31,799.31,0,"DDA")
N
"^DD",799.31,799.31,0,"DT")
3021130
"^DD",799.31,799.31,0,"NM","ROR XML ITEM")

"^DD",799.31,799.31,0,"PT",798.87,.01)

"^DD",799.31,799.31,0,"PT",798.872,.01)

"^DD",799.31,799.31,0,"VRPK")
ROR
"^DD",799.31,799.31,0,"VRRV")
1.5^ROR 1.5
"^DD",799.31,799.31,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.31,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.31,799.31,.01,1,0)
^.1^^0
"^DD",799.31,799.31,.01,3)
Enter the tag name (2-30 characters).
"^DD",799.31,799.31,.01,8.5)
@
"^DD",799.31,799.31,.01,9)
@
"^DD",799.31,799.31,.01,21,0)
^.001^4^4^3030506^^
"^DD",799.31,799.31,.01,21,1,0)
This field stores the tag name. The name should 
"^DD",799.31,799.31,.01,21,2,0)
not contain spaces and any punctuation marks 
"^DD",799.31,799.31,.01,21,3,0)
except underscore. See an XML reference guide for
"^DD",799.31,799.31,.01,21,4,0)
more details.
"^DD",799.31,799.31,.01,23,0)
^^4^4^3060203^
"^DD",799.31,799.31,.01,23,1,0)
Please use shorter names for tags that will be used
"^DD",799.31,799.31,.01,23,2,0)
more often and/or will be repeated many times in the
"^DD",799.31,799.31,.01,23,3,0)
report. This will decrease amount of the overhead data
"^DD",799.31,799.31,.01,23,4,0)
transmitted from the server to the GUI.
"^DD",799.31,799.31,.01,"DEL",1,0)
I $$VADEL^RORDD(799.31,,-1)
"^DD",799.31,799.31,.01,"DT")
3050722
"^DD",799.34,799.34,0)
FIELD^^12^10
"^DD",799.34,799.34,0,"DDA")
N
"^DD",799.34,799.34,0,"DT")
3051121
"^DD",799.34,799.34,0,"IX","B",799.34,.01)

"^DD",799.34,799.34,0,"NM","ROR REPORT PARAMETERS")

"^DD",799.34,799.34,0,"PT",798.12,.01)

"^DD",799.34,799.34,0,"PT",798.8,.04)

"^DD",799.34,799.34,0,"VRPK")
ROR
"^DD",799.34,799.34,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:$L(X)>60!($L(X)<3)!'(X'?1P.E) X
"^DD",799.34,799.34,.01,1,0)
^.1
"^DD",799.34,799.34,.01,1,1,0)
799.34^B
"^DD",799.34,799.34,.01,1,1,1)
S ^ROR(799.34,"B",$E(X,1,30),DA)=""
"^DD",799.34,799.34,.01,1,1,2)
K ^ROR(799.34,"B",$E(X,1,30),DA)
"^DD",799.34,799.34,.01,1,1,3)
Do not delete!
"^DD",799.34,799.34,.01,3)
Enter the report name (3-60 characters).
"^DD",799.34,799.34,.01,8.5)
@
"^DD",799.34,799.34,.01,9)
@
"^DD",799.34,799.34,.01,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.01,21,3,0)
 
"^DD",799.34,799.34,.01,21,4,0)
The name of the report stored in the NAME field is
"^DD",799.34,799.34,.01,21,5,0)
displayed in the Reports sub-menu of the GUI.
"^DD",799.34,799.34,.01,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.01,"DT")
3021126
"^DD",799.34,799.34,.02,0)
BACKGROUND PROCESSING?^SX^0:NO;1:YES;^0;2^Q:$$VAEDT^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.02,8.5)
@
"^DD",799.34,799.34,.02,9)
@
"^DD",799.34,799.34,.02,21,0)
^^6^6^3030506^
"^DD",799.34,799.34,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.02,21,3,0)
 
"^DD",799.34,799.34,.02,21,4,0)
If the BACKGROUND PROCESSING? field is set to
"^DD",799.34,799.34,.02,21,5,0)
'YES' then the report will be scheduled to run as
"^DD",799.34,799.34,.02,21,6,0)
a background task.
"^DD",799.34,799.34,.02,23,0)
^^1^1^3030506^
"^DD",799.34,799.34,.02,23,1,0)
Only background processing is currently implemented.
"^DD",799.34,799.34,.02,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.02,"DT")
3021127
"^DD",799.34,799.34,.03,0)
SHARED TEMPLATES^SX^0:NO;1:YES;^0;3^Q:$$VAEDT^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.03,8.5)
@
"^DD",799.34,799.34,.03,9)
@
"^DD",799.34,799.34,.03,21,0)
^^7^7^3051121^
"^DD",799.34,799.34,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.03,21,3,0)
 
"^DD",799.34,799.34,.03,21,4,0)
If this field is set to 'YES', then report 
"^DD",799.34,799.34,.03,21,5,0)
parameter templates are shared between all 
"^DD",799.34,799.34,.03,21,6,0)
registries. Otherwise, the templates are 
"^DD",799.34,799.34,.03,21,7,0)
registry-specific.
"^DD",799.34,799.34,.03,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.03,"DT")
3051121
"^DD",799.34,799.34,.04,0)
CODE^RNJ3,0X^^0;4^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.34,799.34,.04,3)
Enter the unique report code (between 1 and 999, 0 Decimal Digits).
"^DD",799.34,799.34,.04,8.5)
@
"^DD",799.34,799.34,.04,9)
@
"^DD",799.34,799.34,.04,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.04,21,3,0)
 
"^DD",799.34,799.34,.04,21,4,0)
The CODE field stores the unique code of the
"^DD",799.34,799.34,.04,21,5,0)
report.
"^DD",799.34,799.34,.04,23,0)
^^19^19^3030507^
"^DD",799.34,799.34,.04,23,1,0)
The corresponding XSL templates for the report are 
"^DD",799.34,799.34,.04,23,2,0)
stored in the DIALOG file (#.84). The dialog number 
"^DD",799.34,799.34,.04,23,3,0)
of the template has the following structure:
"^DD",799.34,799.34,.04,23,4,0)
 
"^DD",799.34,799.34,.04,23,5,0)
 7981CCC.TTT
"^DD",799.34,799.34,.04,23,6,0)
 
"^DD",799.34,799.34,.04,23,7,0)
 'CCC' is the code of the report.
"^DD",799.34,799.34,.04,23,8,0)
 
"^DD",799.34,799.34,.04,23,9,0)
 'TTT' is the type of the template:
"^DD",799.34,799.34,.04,23,10,0)
        001 - HTML Preview,
"^DD",799.34,799.34,.04,23,11,0)
        002 - Delimited Format (CSV),
"^DD",799.34,799.34,.04,23,12,0)
        003 - Printer Output.
"^DD",799.34,799.34,.04,23,13,0)
 
"^DD",799.34,799.34,.04,23,14,0)
For example, the dialog 7981001.001 contains the HTML
"^DD",799.34,799.34,.04,23,15,0)
preview template for the List of Registry Patients
"^DD",799.34,799.34,.04,23,16,0)
(report code: 1).
"^DD",799.34,799.34,.04,23,17,0)
 
"^DD",799.34,799.34,.04,23,18,0)
If no template is defined for the report then the
"^DD",799.34,799.34,.04,23,19,0)
default template from dialog 7981000 is used.
"^DD",799.34,799.34,.04,"DT")
3030401
"^DD",799.34,799.34,.05,0)
DATE OF INACTIVATION^D^^0;5^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",799.34,799.34,.05,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.05,21,1,0)
If this field has a value, the report will be
"^DD",799.34,799.34,.05,21,2,0)
considered inactive after this date. Use this
"^DD",799.34,799.34,.05,21,3,0)
field to disable unnecessary reports (and hide
"^DD",799.34,799.34,.05,21,4,0)
them from the Report sub-menu of the GUI) instead
"^DD",799.34,799.34,.05,21,5,0)
of deleting them.
"^DD",799.34,799.34,.05,23,0)
^^3^3^3030505^
"^DD",799.34,799.34,.05,23,1,0)
The ROR REPORTS AVAILABLE remote procedure analyzes
"^DD",799.34,799.34,.05,23,2,0)
this field when it loads the list of available reports
"^DD",799.34,799.34,.05,23,3,0)
and skips the inactive ones.
"^DD",799.34,799.34,.05,"DT")
3021126
"^DD",799.34,799.34,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.34,,-1)
"^DD",799.34,799.34,.09,8.5)
@
"^DD",799.34,799.34,.09,9)
@
"^DD",799.34,799.34,.09,21,0)
^^7^7^3030506^
"^DD",799.34,799.34,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.34,799.34,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.34,799.34,.09,21,3,0)
 
"^DD",799.34,799.34,.09,21,4,0)
Reports distributed with the national registries
"^DD",799.34,799.34,.09,21,5,0)
must have this field set to "YES". This prevents
"^DD",799.34,799.34,.09,21,6,0)
local editing of other fields of report
"^DD",799.34,799.34,.09,21,7,0)
definitions.
"^DD",799.34,799.34,.09,"DEL",1,0)
I $$VADEL^RORDD(799.34,,,-1)
"^DD",799.34,799.34,.09,"DT")
3021126
"^DD",799.34,799.34,1,0)
PARAMETER PANELS^FX^^1;E1,250^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:$L(X)>250!($L(X)<1) X
"^DD",799.34,799.34,1,3)
Enter codes of dialog panels separated by commas (1-250 characters).
"^DD",799.34,799.34,1,8.5)
@
"^DD",799.34,799.34,1,9)
@
"^DD",799.34,799.34,1,21,0)
^^7^7^3030507^
"^DD",799.34,799.34,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,1,21,3,0)
 
"^DD",799.34,799.34,1,21,4,0)
The PARAMETER PANELS field stores the list of 
"^DD",799.34,799.34,1,21,5,0)
panel codes separated by commas. The panels are 
"^DD",799.34,799.34,1,21,6,0)
combined by the GUI into the dialog form that is
"^DD",799.34,799.34,1,21,7,0)
used to request values of the report parameters.
"^DD",799.34,799.34,1,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,1,"DT")
3030304
"^DD",799.34,799.34,10.01,0)
REPORT BUILDER^RFX^^10.01;E1,245^Q:$$VAEDT^RORDD(799.34,$G(DA))  Q:$$EP^RORDD(1)
"^DD",799.34,799.34,10.01,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",799.34,799.34,10.01,8.5)
@
"^DD",799.34,799.34,10.01,9)
@
"^DD",799.34,799.34,10.01,21,0)
^.001^6^6^3060106^^
"^DD",799.34,799.34,10.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,10.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,10.01,21,3,0)
 
"^DD",799.34,799.34,10.01,21,4,0)
The REPORT BUILDER field stores a reference to the
"^DD",799.34,799.34,10.01,21,5,0)
function that is used to build the report (the
"^DD",799.34,799.34,10.01,21,6,0)
report builder).
"^DD",799.34,799.34,10.01,23,0)
^^24^24^3060106^
"^DD",799.34,799.34,10.01,23,1,0)
The call-back entry point is called with a single
"^DD",799.34,799.34,10.01,23,2,0)
parameter. The parameter is a reference to a local
"^DD",799.34,799.34,10.01,23,3,0)
variable that contains values of the report parameters.
"^DD",799.34,799.34,10.01,23,4,0)
 
"^DD",799.34,799.34,10.01,23,5,0)
 RORTSK(            Task Number
"^DD",799.34,799.34,10.01,23,6,0)
 
"^DD",799.34,799.34,10.01,23,7,0)
   "EP")            Entry Point ($$TAG^ROUTINE)
"^DD",799.34,799.34,10.01,23,8,0)
 
"^DD",799.34,799.34,10.01,23,9,0)
   "PARAMS",...)    See the CCR Programmer's Reference 
"^DD",799.34,799.34,10.01,23,10,0)
                    Manual for details
"^DD",799.34,799.34,10.01,23,11,0)
 
"^DD",799.34,799.34,10.01,23,12,0)
   "REGIEN")        Registry IEN
"^DD",799.34,799.34,10.01,23,13,0)
 
"^DD",799.34,799.34,10.01,23,14,0)
   "TYPE")          Type of the Task
"^DD",799.34,799.34,10.01,23,15,0)
   "REPORT")        Code of the Report
"^DD",799.34,799.34,10.01,23,16,0)
   "SCHCODE")       Rescheduling Code
"^DD",799.34,799.34,10.01,23,17,0)
 
"^DD",799.34,799.34,10.01,23,18,0)
The function must return 0 in the case of successful
"^DD",799.34,799.34,10.01,23,19,0)
completion. Otherwise, a negative error code must be 
"^DD",799.34,799.34,10.01,23,20,0)
returned.
"^DD",799.34,799.34,10.01,23,21,0)
 
"^DD",799.34,799.34,10.01,23,22,0)
See description of the ROR REPORT SCHEDULE remote
"^DD",799.34,799.34,10.01,23,23,0)
procedure and source code of the RORTSK01 routine for
"^DD",799.34,799.34,10.01,23,24,0)
more details.
"^DD",799.34,799.34,10.01,"DT")
3021126
"^DD",799.34,799.34,11,0)
DEFAULT PARAMETERS^799.3411^^11;0
"^DD",799.34,799.34,11,9)
@
"^DD",799.34,799.34,11,21,0)
^.001^2^2^3040124^^
"^DD",799.34,799.34,11,21,1,0)
This field stores the default values for the 
"^DD",799.34,799.34,11,21,2,0)
report parameters (in the NAME=VALUE format).
"^DD",799.34,799.34,12,0)
DEFAULT SORTING^799.3412^^12;0
"^DD",799.34,799.34,12,9)
@
"^DD",799.34,799.34,12,21,0)
^^2^2^3040121^
"^DD",799.34,799.34,12,21,1,0)
This field stores the default sorting modes for
"^DD",799.34,799.34,12,21,2,0)
the report (in the TABLE=FIELD format).
"^DD",799.34,799.3411,0)
DEFAULT PARAMETERS SUB-FIELD^^.01^1
"^DD",799.34,799.3411,0,"DT")
3030918
"^DD",799.34,799.3411,0,"NM","DEFAULT PARAMETERS")

"^DD",799.34,799.3411,0,"UP")
799.34
"^DD",799.34,799.3411,.01,0)
DEFAULT PARAMETERS^WL^^0;1^Q
"^DD",799.34,799.3411,.01,8.5)
@
"^DD",799.34,799.3411,.01,9)
@
"^DD",799.34,799.3411,.01,"DT")
3030918
"^DD",799.34,799.3412,0)
DEFAULT SORTING SUB-FIELD^^.01^1
"^DD",799.34,799.3412,0,"DT")
3031103
"^DD",799.34,799.3412,0,"NM","DEFAULT SORTING")

"^DD",799.34,799.3412,0,"UP")
799.34
"^DD",799.34,799.3412,.01,0)
DEFAULT SORTING^WL^^0;1^Q
"^DD",799.34,799.3412,.01,8.5)
@
"^DD",799.34,799.3412,.01,9)
@
"^DD",799.34,799.3412,.01,"DT")
3031103
"^DD",799.4,799.4,10,0)
AIDS INDICATOR DISEASE^799.41P^^10;0
"^DD",799.4,799.4,10,20,0)
^.3LA^1^1
"^DD",799.4,799.4,10,20,1,0)
CDC FORM (VIII)
"^DD",799.4,799.4,10,21,0)
^^2^2^3060203^
"^DD",799.4,799.4,10,21,1,0)
The AIDS INDICATOR DISEASE multiple contains a 
"^DD",799.4,799.4,10,21,2,0)
list of disease diagnoses that indicate AIDS.
"^DD",799.4,799.4,10,23,0)
^.001^3^3^3060203^^
"^DD",799.4,799.4,10,23,1,0)
The records of the multiple have the same internal
"^DD",799.4,799.4,10,23,2,0)
entry numbers as the corresponding diseases from
"^DD",799.4,799.4,10,23,3,0)
the ROR AIDS INDICATOR DISEASE file (#799.49).
"^DD",799.4,799.4,22.09,0)
SUBSTANCE ABUSE TREATMENT^S^1:YES;0:NO;8:N/A;9:UNKNOWN;^22;9^Q
"^DD",799.4,799.4,22.09,3)
Indicate if this patient is receiving or has been referred for substance abuse treatment services.
"^DD",799.4,799.4,22.09,20,0)
^.3LA^1^1
"^DD",799.4,799.4,22.09,20,1,0)
CDC FORM (IX)
"^DD",799.4,799.4,22.09,21,0)
^.001^5^5^3060519^^
"^DD",799.4,799.4,22.09,21,1,0)
This field is used to hold the response related to
"^DD",799.4,799.4,22.09,21,2,0)
whether the patient is receiving or has been
"^DD",799.4,799.4,22.09,21,3,0)
referred to receive substance abuse tratment 
"^DD",799.4,799.4,22.09,21,4,0)
services. This information is used in preparing
"^DD",799.4,799.4,22.09,21,5,0)
the CDC HIV/AIDS form.
"^DD",799.4,799.4,22.09,"DT")
3060519
"^DD",799.4,799.41,0)
AIDS INDICATOR DISEASE SUB-FIELD^^.03^3
"^DD",799.4,799.41,0,"NM","AIDS INDICATOR DISEASE")

"^DD",799.4,799.41,.01,0)
AIDS INDICATOR DISEASE^M*P799.49'X^ROR(799.49,^0;1^S DIC("S")="I $P($G(^(0)),U,3)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X S:$D(X) DINUM=X
"^DD",799.4,799.41,.01,1,0)
^.1
"^DD",799.4,799.41,.01,1,1,0)
799.41^B
"^DD",799.4,799.41,.01,1,1,1)
S ^RORDATA(799.4,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",799.4,799.41,.01,1,1,2)
K ^RORDATA(799.4,DA(1),10,"B",$E(X,1,30),DA)
"^DD",799.4,799.41,.01,12)
Only active indicator diseases can be selected.
"^DD",799.4,799.41,.01,12.1)
S DIC("S")="I $P($G(^(0)),U,3)"
"^DD",799.4,799.41,.01,20,0)
^.3LA^1^1
"^DD",799.4,799.41,.01,20,1,0)
CDC FORM (VIII)
"^DD",799.4,799.41,.01,21,0)
^.001^2^2^3030507^^^
"^DD",799.4,799.41,.01,21,1,0)
The AIDS INDICATOR DISEASE field references the 
"^DD",799.4,799.41,.01,21,2,0)
AIDS indicator disease.
"^DD",799.4,799.41,.01,23,0)
^^6^6^3030507^
"^DD",799.4,799.41,.01,23,1,0)
Only diseases that have values in the SEQUENTIAL NUMBER
"^DD",799.4,799.41,.01,23,2,0)
field can be selected from the ROR AIDS INDICATOR
"^DD",799.4,799.41,.01,23,3,0)
DISEASE file.
"^DD",799.4,799.41,.01,23,4,0)
 
"^DD",799.4,799.41,.01,23,5,0)
Internal value of this field is used as the internal 
"^DD",799.4,799.41,.01,23,6,0)
entry number of the record (the 'DINUM' feature).
"^DD",799.4,799.41,.01,"DT")
3030207
"^DD",799.4,799.41,.02,0)
INITIAL DIAGNOSIS^*S^1:Definitive;2:Presumptive;^0;2^Q
"^DD",799.4,799.41,.02,3)

"^DD",799.4,799.41,.02,12)
Each indicator disease have its own set of initial diagnoses.
"^DD",799.4,799.41,.02,12.1)
S DIC("S")="N RORV S RORV=+$G(^RORDATA(799.4,DA(1),10,DA,0)) I RORV>0 S RORV=$P($G(^ROR(799.49,RORV,0)),U,2) I ("";""_RORV)[("";""_Y_"":"")"
"^DD",799.4,799.41,.02,20,0)
^.3LA^1^1
"^DD",799.4,799.41,.02,20,1,0)
CDC FORM (VIII)
"^DD",799.4,799.41,.02,21,0)
^^2^2^3030507^
"^DD",799.4,799.41,.02,21,1,0)
The INITIAL DIAGNOSIS field stores a diagnosis for
"^DD",799.4,799.41,.02,21,2,0)
the disease. 
"^DD",799.4,799.41,.02,23,0)
^^5^5^3030507^
"^DD",799.4,799.41,.02,23,1,0)
The set of codes is screened according to the value of
"^DD",799.4,799.41,.02,23,2,0)
the INITIAL DIAGNOSIS VALUES field (.02) from the
"^DD",799.4,799.41,.02,23,3,0)
record of the ROR AIDS INDICATOR DISEASE file
"^DD",799.4,799.41,.02,23,4,0)
(#799.49) that is referenced by the AIDS INDICATOR 
"^DD",799.4,799.41,.02,23,5,0)
DISEASE field (.01) of this multiple.
"^DD",799.4,799.41,.02,"DT")
3060614
"^DD",799.4,799.41,.03,0)
DATE^D^^0;3^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",799.4,799.41,.03,20,0)
^.3LA^1^1
"^DD",799.4,799.41,.03,20,1,0)
CDC FORM (VIII)
"^DD",799.4,799.41,.03,21,0)
^^2^2^3030507^
"^DD",799.4,799.41,.03,21,1,0)
The DATE field stores the date when the disease 
"^DD",799.4,799.41,.03,21,2,0)
was diagnosed.
"^DD",799.4,799.41,.03,"DT")
3060614
"^DIC",798.9,798.9,0)
ROR LAB SEARCH^798.9
"^DIC",798.9,798.9,0,"GL")
^ROR(798.9,
"^DIC",798.9,798.9,"%",0)
^1.005^^0
"^DIC",798.9,798.9,"%D",0)
^^10^10^3020403^
"^DIC",798.9,798.9,"%D",1,0)
Lab search criteria are stored in this file. These
"^DIC",798.9,798.9,"%D",2,0)
criteria are referenced by the selection rules and
"^DIC",798.9,798.9,"%D",3,0)
used in the search for Lab results.
"^DIC",798.9,798.9,"%D",4,0)
 
"^DIC",798.9,798.9,"%D",5,0)
It is possible but not recommended to use the same
"^DIC",798.9,798.9,"%D",6,0)
criterion for several different registries.
"^DIC",798.9,798.9,"%D",7,0)
 
"^DIC",798.9,798.9,"%D",8,0)
Records of the file are uniquely identified by the
"^DIC",798.9,798.9,"%D",9,0)
criterion name. The "A" primary key and the "B"
"^DIC",798.9,798.9,"%D",10,0)
uniqueness index are used for this purpose.
"^DIC",798.9,"B","ROR LAB SEARCH",798.9)

"^DIC",799.31,799.31,0)
ROR XML ITEM^799.31
"^DIC",799.31,799.31,0,"GL")
^ROR(799.31,
"^DIC",799.31,799.31,"%",0)
^1.005^^0
"^DIC",799.31,799.31,"%D",0)
^^7^7^3040124^
"^DIC",799.31,799.31,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.31,799.31,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.31,799.31,"%D",3,0)
THIS FILE!
"^DIC",799.31,799.31,"%D",4,0)
 
"^DIC",799.31,799.31,"%D",5,0)
The ROR XML ELEMENT file contains a list of XML 
"^DIC",799.31,799.31,"%D",6,0)
tags and attributes that can be used in the 
"^DIC",799.31,799.31,"%D",7,0)
reports.
"^DIC",799.31,"B","ROR XML ITEM",799.31)

"^DIC",799.34,799.34,0)
ROR REPORT PARAMETERS^799.34
"^DIC",799.34,799.34,0,"GL")
^ROR(799.34,
"^DIC",799.34,799.34,"%",0)
^1.005^^0
"^DIC",799.34,799.34,"%D",0)
^^7^7^3030814^^
"^DIC",799.34,799.34,"%D",1,0)
The ROR REPORT PARAMETERS file stores the report
"^DIC",799.34,799.34,"%D",2,0)
definitions that are used by the ROR REPORT 
"^DIC",799.34,799.34,"%D",3,0)
SCHEDULE remote procedure to schedule the reports.
"^DIC",799.34,799.34,"%D",4,0)
 
"^DIC",799.34,799.34,"%D",5,0)
Records of the file are uniquely identified by the
"^DIC",799.34,799.34,"%D",6,0)
report code (the "A" primary key and the
"^DIC",799.34,799.34,"%D",7,0)
uniqueness index "KEY" are used for that purpose).
"^DIC",799.34,"B","ROR REPORT PARAMETERS",799.34)

"BLD",6002,6)
^1
**END**
**END**
