Released XU*8*407 SEQ #354
Extracted from mail message
**KIDS**:XU*8.0*407^

**INSTALL NAME**
XU*8.0*407
"BLD",5878,0)
XU*8.0*407^KERNEL^0^3060811^y
"BLD",5878,4,0)
^9.64PA^4.005^2
"BLD",5878,4,4.001,0)
4.001
"BLD",5878,4,4.001,222)
y^n^f^^y^^y^o^n
"BLD",5878,4,4.005,0)
4.005
"BLD",5878,4,4.005,222)
y^n^f^^y^^y^o^n
"BLD",5878,4,"B",4.001,4.001)

"BLD",5878,4,"B",4.005,4.005)

"BLD",5878,6)
7^
"BLD",5878,6.3)
8
"BLD",5878,"KRN",0)
^9.67PA^8989.52^19
"BLD",5878,"KRN",.4,0)
.4
"BLD",5878,"KRN",.401,0)
.401
"BLD",5878,"KRN",.402,0)
.402
"BLD",5878,"KRN",.403,0)
.403
"BLD",5878,"KRN",.5,0)
.5
"BLD",5878,"KRN",.84,0)
.84
"BLD",5878,"KRN",3.6,0)
3.6
"BLD",5878,"KRN",3.8,0)
3.8
"BLD",5878,"KRN",9.2,0)
9.2
"BLD",5878,"KRN",9.8,0)
9.8
"BLD",5878,"KRN",9.8,"NM",0)
^9.68A^8^7
"BLD",5878,"KRN",9.8,"NM",1,0)
XUMF0^^0^B25080823
"BLD",5878,"KRN",9.8,"NM",3,0)
XUMFQR^^0^B34910260
"BLD",5878,"KRN",9.8,"NM",4,0)
XUMFMD5^^0^B3864794
"BLD",5878,"KRN",9.8,"NM",5,0)
XUMF5I^^0^B74082492
"BLD",5878,"KRN",9.8,"NM",6,0)
XUMF5II^^0^B13619076
"BLD",5878,"KRN",9.8,"NM",7,0)
XUMF1H^^0^B101437978
"BLD",5878,"KRN",9.8,"NM",8,0)
XUMFXHL7^^0^B7394501
"BLD",5878,"KRN",9.8,"NM","B","XUMF0",1)

"BLD",5878,"KRN",9.8,"NM","B","XUMF1H",7)

"BLD",5878,"KRN",9.8,"NM","B","XUMF5I",5)

"BLD",5878,"KRN",9.8,"NM","B","XUMF5II",6)

"BLD",5878,"KRN",9.8,"NM","B","XUMFMD5",4)

"BLD",5878,"KRN",9.8,"NM","B","XUMFQR",3)

"BLD",5878,"KRN",9.8,"NM","B","XUMFXHL7",8)

"BLD",5878,"KRN",19,0)
19
"BLD",5878,"KRN",19,"NM",0)
^9.68A^^
"BLD",5878,"KRN",19.1,0)
19.1
"BLD",5878,"KRN",101,0)
101
"BLD",5878,"KRN",101,"NM",0)
^9.68A^6^6
"BLD",5878,"KRN",101,"NM",1,0)
XUMF QUERY EVENT^^0
"BLD",5878,"KRN",101,"NM",2,0)
XUMF MD5 EVENT^^0
"BLD",5878,"KRN",101,"NM",3,0)
XUMF MD5 HANDLER^^0
"BLD",5878,"KRN",101,"NM",4,0)
XUMF QUERY HANDLER^^0
"BLD",5878,"KRN",101,"NM",5,0)
XUMF VETS UPDATE^^0
"BLD",5878,"KRN",101,"NM",6,0)
XUMF UPDATE^^0
"BLD",5878,"KRN",101,"NM","B","XUMF MD5 EVENT",2)

"BLD",5878,"KRN",101,"NM","B","XUMF MD5 HANDLER",3)

"BLD",5878,"KRN",101,"NM","B","XUMF QUERY EVENT",1)

"BLD",5878,"KRN",101,"NM","B","XUMF QUERY HANDLER",4)

"BLD",5878,"KRN",101,"NM","B","XUMF UPDATE",6)

"BLD",5878,"KRN",101,"NM","B","XUMF VETS UPDATE",5)

"BLD",5878,"KRN",409.61,0)
409.61
"BLD",5878,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",5878,"KRN",771,0)
771
"BLD",5878,"KRN",771,"NM",0)
^9.68A^7^6
"BLD",5878,"KRN",771,"NM",1,0)
VETS DATA^^0
"BLD",5878,"KRN",771,"NM",3,0)
VETS MD5^^0
"BLD",5878,"KRN",771,"NM",4,0)
XUMF MD5^^0
"BLD",5878,"KRN",771,"NM",5,0)
XUMF DATA^^0
"BLD",5878,"KRN",771,"NM",6,0)
XUMF UPDATE^^0
"BLD",5878,"KRN",771,"NM",7,0)
VETS UPDATE^^0
"BLD",5878,"KRN",771,"NM","B","VETS DATA",1)

"BLD",5878,"KRN",771,"NM","B","VETS MD5",3)

"BLD",5878,"KRN",771,"NM","B","VETS UPDATE",7)

"BLD",5878,"KRN",771,"NM","B","XUMF DATA",5)

"BLD",5878,"KRN",771,"NM","B","XUMF MD5",4)

"BLD",5878,"KRN",771,"NM","B","XUMF UPDATE",6)

"BLD",5878,"KRN",870,0)
870
"BLD",5878,"KRN",870,"NM",0)
^9.68A^^
"BLD",5878,"KRN",8989.51,0)
8989.51
"BLD",5878,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",5878,"KRN",8989.52,0)
8989.52
"BLD",5878,"KRN",8994,0)
8994
"BLD",5878,"KRN","B",.4,.4)

"BLD",5878,"KRN","B",.401,.401)

"BLD",5878,"KRN","B",.402,.402)

"BLD",5878,"KRN","B",.403,.403)

"BLD",5878,"KRN","B",.5,.5)

"BLD",5878,"KRN","B",.84,.84)

"BLD",5878,"KRN","B",3.6,3.6)

"BLD",5878,"KRN","B",3.8,3.8)

"BLD",5878,"KRN","B",9.2,9.2)

"BLD",5878,"KRN","B",9.8,9.8)

"BLD",5878,"KRN","B",19,19)

"BLD",5878,"KRN","B",19.1,19.1)

"BLD",5878,"KRN","B",101,101)

"BLD",5878,"KRN","B",409.61,409.61)

"BLD",5878,"KRN","B",771,771)

"BLD",5878,"KRN","B",870,870)

"BLD",5878,"KRN","B",8989.51,8989.51)

"BLD",5878,"KRN","B",8989.52,8989.52)

"BLD",5878,"KRN","B",8994,8994)

"BLD",5878,"QUES",0)
^9.62^^
"BLD",5878,"REQB",0)
^9.611^1^1
"BLD",5878,"REQB",1,0)
XU*8.0*383^0
"BLD",5878,"REQB","B","XU*8.0*383",1)

"DATA",4.001,4.005,0)
4.005^RDT^MD5 Signature^PRE^MD5^1255^MD5 Signature
"DATA",4.001,4.005,1,0)
^4.011^1^1
"DATA",4.001,4.005,1,1,0)
debugLevel^6^4^^^^^^1
"DATA",4.001,4.005,"MFE")
.01^.01^ERT^.01^.01^VA^16^B^VA^^2^1^^1^1^NULL^POST
"DATA",4.001,4.009,0)
4.009^RDT^STANDARD TERMINOLOGY VERSION^PRE^^1255^VERSION
"DATA",4.001,4.009,1,0)
^4.011^2^2
"DATA",4.001,4.009,1,1,0)
versionName^.01^1^^^^^^50
"DATA",4.001,4.009,1,2,0)
version^1^1^^^^^^7
"DATA",4.001,4.009,"MFE")
.01^.01^ERT^.01^.01^VA^16^B^VA^^2^1^^1^1^NULL^POST
"DATA",4.001,50.416,0)
50.416^ZRT^Ingredient^NULL^NULL^1255^Ingredient
"DATA",4.001,50.416,1,0)
^4.011^5^5
"DATA",4.001,50.416,1,1,0)
Term^.01^1^^^^^^80^^^^^^1
"DATA",4.001,50.416,1,2,0)
VA_Drug_Identifier^.01^1^50.4161^^VA_Drug_Identifier^^1^45^^^0^^^3
"DATA",4.001,50.416,1,3,0)
Has_Child^2^1^^^^^^^^^^VUID^^2
"DATA",4.001,50.416,1,4,0)
Status^.02^4^50.4169^^^^^^^^^^^4
"DATA",4.001,50.416,1,5,0)
status^.02^^50.4169^^effectiveDate
"DATA",4.001,50.416,5)
D ZRT^PSNDFXXX
"DATA",4.001,50.416,"MFE")
.01^.01^VA^.01^.01^VA^16^B^VA^^1^1^^1^1^NULL^NULL
"DATA",4.001,50.6,0)
50.6^ZRT^Generic^NULL^NULL^1255^Generic
"DATA",4.001,50.6,1,0)
^4.011^2^2
"DATA",4.001,50.6,1,1,0)
Term^.01^1^^^^^^99^^^^^^1
"DATA",4.001,50.6,1,2,0)
Status^.02^4^50.6009^^^^^1^^^^^^2
"DATA",4.001,50.6,5)
D ZRT^PSNDFXXX
"DATA",4.001,50.6,"MFE")
.01^.01^VA^.01^.01^VA^16^B^VA^^1^1^^1^1^NULL^NULL
"DATA",4.001,50.605,0)
50.605^ZRT^DrugClass^NULL^NULL^1255^DrugClass
"DATA",4.001,50.605,1,0)
^4.011^5^5
"DATA",4.001,50.605,1,1,0)
Term^.01^1^^^^^^50^^^^^^1
"DATA",4.001,50.605,1,2,0)
VA_Class_Name^1^1^^^^^^^^^^^^2
"DATA",4.001,50.605,1,3,0)
Has_Child^2^1^^^^^^^^^^VUID
"DATA",4.001,50.605,1,4,0)
VA_Class_Type^3^1^^^^^^^^^^^^3
"DATA",4.001,50.605,1,5,0)
Status^.02^4^50.60509^^Status^^^1^^^^^^4
"DATA",4.001,50.605,5)
D ZRT^PSNDFXXX
"DATA",4.001,50.605,"MFE")
.01^.01^VA^.01^.01^VA^16^B^VA^^1^1^^1^1^NULL^NULL
"DATA",4.001,50.68,0)
50.68^ZRT^Product^NULL^NULL^1255^Product
"DATA",4.001,50.68,1,0)
^4.011^3^3
"DATA",4.001,50.68,1,1,0)
Term^.01^1^^^^^^64^^^^^^1
"DATA",4.001,50.68,1,2,0)
Status^.02^4^50.6899^^^^^^^^^^^3
"DATA",4.001,50.68,1,3,0)
NDF_Transmit_to_CMOP^7^1^^^^^^^^^^^^2
"DATA",4.001,50.68,2)
D ^PSNDFZZZ
"DATA",4.001,50.68,3)
D ADD^PSNDFXXX
"DATA",4.001,50.68,5)
D ZRT^PSNDFXXX
"DATA",4.001,50.68,"MFE")
.01^.01^VA^.01^.01^VA^16^B^VA^^1^1^^1^1^NULL^NULL
"DATA",4.001,100.01,0)
100.01^^Order Status^^^^Order Status
"DATA",4.001,100.01,1,0)
^4.011^5^5
"DATA",4.001,100.01,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,100.01,1,2,0)
VistA_Short_Name^.02^^^^^^^^^^^^^2
"DATA",4.001,100.01,1,3,0)
VistA_Abbreviation^.1^^^^^^^^^^^^^3
"DATA",4.001,100.01,1,4,0)
VistA_Description^2^^^^^^^^^^^^^4^1
"DATA",4.001,100.01,1,5,0)
Status^.02^^100.0199^^Status^^^^^^^^^5
"DATA",4.001,100.01,2)
D MFSUP^HDISVF09(100.01,$G(ERROR))
"DATA",4.001,100.01,"MFE")
^^^^^^^B
"DATA",4.001,100.02,0)
100.02^^Nature of Order^^^^Nature of Order
"DATA",4.001,100.02,1,0)
^4.011^9^8
"DATA",4.001,100.02,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,100.02,1,2,0)
VistA_Abbreviation^.02^^^^^^^^^^^^^2
"DATA",4.001,100.02,1,3,0)
VistA_Interaction^.03^^^^^^^^^^^^^3
"DATA",4.001,100.02,1,4,0)
VistA_Door^.05^^^^^^^^^^^^^4
"DATA",4.001,100.02,1,5,0)
VistA_Discontinued^.06^^^^^^^^^^^^^5
"DATA",4.001,100.02,1,6,0)
VistA_Create_Action^.11^^^^^^^^^^^^^6
"DATA",4.001,100.02,1,7,0)
VistA_Signature_Status^.14^^^^^^^^^^^^^7
"DATA",4.001,100.02,1,9,0)
Status^.02^^100.0299^^Status^^^^^^^^^8
"DATA",4.001,100.02,2)
D MFSUP^HDISVF09(100.02,$G(ERROR))
"DATA",4.001,100.02,"MFE")
^^^^^^^B
"DATA",4.001,120.51,0)
120.51^RDT^GMRV Vital Type^PRE^POST^1255^Vital Types
"DATA",4.001,120.51,1,0)
^4.011^17^15
"DATA",4.001,120.51,1,2,0)
Term^.01^1^^^^^^50^^^^^^1
"DATA",4.001,120.51,1,3,0)
VistA_Short_Name^1^1^^^^^^5^^^^^^2
"DATA",4.001,120.51,1,4,0)
VistA_Type_Rate^3^4^^^^^^1^^^^^^3
"DATA",4.001,120.51,1,5,0)
VistA_Rate_Input_Transform^4^1^^^^^^99^^^^^^4
"DATA",4.001,120.51,1,6,0)
VistA_Type_Rate_Help^5^1^^^^^^30^^^^^^5
"DATA",4.001,120.51,1,7,0)
VistA_PCE_Abbreviation^7^1^^^^^^10^^^^^^6
"DATA",4.001,120.51,1,9,0)
Status^.02^4^120.5199^^effectiveDate^^^1^^^^^^7
"DATA",4.001,120.51,1,10,0)
name^.01^1^^^^^^50
"DATA",4.001,120.51,1,11,0)
abbreviation^1^1^^^^^^5
"DATA",4.001,120.51,1,12,0)
rate^3^1^^^^^^1
"DATA",4.001,120.51,1,13,0)
rateInputTransform^4^1^^^^^^99
"DATA",4.001,120.51,1,14,0)
rateHelp^5^1^^^^^^30
"DATA",4.001,120.51,1,15,0)
pceAbbreviation^7^1^^^^^^10
"DATA",4.001,120.51,1,16,0)
effectiveDate^.01^5^120.5199^^effectiveDate^^^10^^^^^L
"DATA",4.001,120.51,1,17,0)
status^.02^^120.5199^^effectiveDate
"DATA",4.001,120.51,2)
D MFSUP^HDISVF09(120.51,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.51,"MFE")
99.99^.01^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.52,0)
120.52^RDT^GMRV Vital Qualifier^PRE^POST^1255^Vital Qualifiers
"DATA",4.001,120.52,1,0)
^4.011^13^11
"DATA",4.001,120.52,1,2,0)
Term^.01^1^^^^^^50^^^^^^1
"DATA",4.001,120.52,1,3,0)
VistA_Short_Name^.02^1^^^^^^3^^^^^^2
"DATA",4.001,120.52,1,4,0)
has_qualifier^.01^1^120.521^^has_qualifier^^1^50^^0^0^VUID^^3
"DATA",4.001,120.52,1,4,1,0)
^4.111^2^2
"DATA",4.001,120.52,1,4,1,1,0)
1^has_qualifier^.01
"DATA",4.001,120.52,1,4,1,2,0)
2^has_VistA_category^.02
"DATA",4.001,120.52,1,5,0)
has_VistA_category^.02^1^120.521^^has_qualifier^^1^40^^^0^VUID^^4
"DATA",4.001,120.52,1,5,1,0)
^4.111
"DATA",4.001,120.52,1,7,0)
Status^.02^4^120.5299^^effectiveDate^^^1^^^^^^5
"DATA",4.001,120.52,1,8,0)
qualifier^.01^1^^^^^^50
"DATA",4.001,120.52,1,9,0)
synonym^.02^1^^^^^^3
"DATA",4.001,120.52,1,10,0)
vitalType^.01^1^120.521^^vitalType^^^50^^^1^VUID
"DATA",4.001,120.52,1,11,0)
category^.02^1^120.521^^category^^^40^^^^VUID
"DATA",4.001,120.52,1,12,0)
effectiveDate^.01^5^120.5299^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.52,1,13,0)
status^.02^^120.5299^^effectiveDate^^^^^^^^^
"DATA",4.001,120.52,2)
D MFSUP^HDISVF09(120.52,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.52,4)
S ^TMP("XUMF IMPLIED LOGIC",$J)=1
"DATA",4.001,120.52,"MFE")
99.99^.01^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.53,0)
120.53^RDT^GMRV Vital Category^PRE^POST^^Vital Categories
"DATA",4.001,120.53,1,0)
^4.011^11^10
"DATA",4.001,120.53,1,2,0)
Term^.01^1^^^^^^40^^^^^^1
"DATA",4.001,120.53,1,3,0)
vitalType^.01^1^120.531^^vitalType^^^50^^^^VUID
"DATA",4.001,120.53,1,4,0)
maximumEntries^.03^4^120.531^^vitalType^^^2
"DATA",4.001,120.53,1,5,0)
printOrder^.05^4^120.531^^vitalType^^^1
"DATA",4.001,120.53,1,6,0)
editOrder^.06^4^120.531^^vitalType^^^1
"DATA",4.001,120.53,1,7,0)
defaultQualifier^.07^1^120.531^^vitalType^^^50^^^^VUID
"DATA",4.001,120.53,1,8,0)
effectiveDate^.01^5^120.5399^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.53,1,9,0)
Status^.02^4^120.5399^^effectiveDate^^^1^^^^^^2
"DATA",4.001,120.53,1,10,0)
category^.01^1^^^^^^40
"DATA",4.001,120.53,1,11,0)
status^.02^^120.5399^^effectiveDate
"DATA",4.001,120.53,2)
D MFSUP^HDISVF09(120.53,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.53,"MFE")
99.99^vuid^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.82,0)
120.82^RDT^GMR Allergies^NULL^NULL^1255^Reactants
"DATA",4.001,120.82,1,0)
^4.011^19^14
"DATA",4.001,120.82,1,2,0)
Term^.01^1^^^^^^30^^^^^^1
"DATA",4.001,120.82,1,4,0)
Search_Term^.01^1^120.823^^Search_Term^^1^30^^^0^^^3
"DATA",4.001,120.82,1,8,0)
Status^.02^4^120.8299^^effectiveDate^^^1^^^^^^6
"DATA",4.001,120.82,1,9,0)
Allergy_Type^1^^^^^^^^^^^^^2
"DATA",4.001,120.82,1,10,0)
has_drug_ingredient^.01^1^120.824^^has_drug_ingredient^^1^80^^^0^VUID^^4
"DATA",4.001,120.82,1,11,0)
has_drug_class^.01^1^120.8205^^has_drug_class^^1^80^^^0^VUID^^5
"DATA",4.001,120.82,1,12,0)
name^.01^1^^^^^^30
"DATA",4.001,120.82,1,13,0)
allergyType^1^1^^^^^^20
"DATA",4.001,120.82,1,14,0)
synonym^.01^1^120.823^^synonym^^^30^^^1
"DATA",4.001,120.82,1,15,0)
drugIngredients^.01^1^120.824^^drugIngredients^^^64^^^1^VUID
"DATA",4.001,120.82,1,16,0)
vaDrugClasses^.01^1^120.8205^^vaDrugClasses^^^5^^^1^VUID
"DATA",4.001,120.82,1,17,0)
effectiveDate^.01^5^120.8299^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.82,1,18,0)
nationalAllergy^2^1^^^^^^1
"DATA",4.001,120.82,1,19,0)
status^.02^^120.8299^^effectiveDate
"DATA",4.001,120.82,2)
D MFSUP^HDISVF09(120.82,$G(ERROR))
"DATA",4.001,120.82,"MFE")
99.99^vuid^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.83,0)
120.83^RDT^Sign/Symptoms^PRE^POST^1255^Reactions
"DATA",4.001,120.83,1,0)
^4.011^13^8
"DATA",4.001,120.83,1,2,0)
Term^.01^1^^^^^^30^^^^^^1
"DATA",4.001,120.83,1,3,0)
Search_Term^.01^1^120.832^^Search_Term^^1^30^^^0^^^2
"DATA",4.001,120.83,1,8,0)
Status^.02^4^120.8399^^effectiveDate^^^1^^^^^^3
"DATA",4.001,120.83,1,9,0)
name^.01^1^^^^^^30
"DATA",4.001,120.83,1,10,0)
synonym^.01^1^120.832^^synonym^^^30^^^1
"DATA",4.001,120.83,1,11,0)
nationalSignSymptom^1^1^^^^^^1
"DATA",4.001,120.83,1,12,0)
effectiveDate^.01^5^120.8399^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.83,1,13,0)
status^.02^^120.8399^^effectiveDate
"DATA",4.001,120.83,2)
D MFSUP^HDISVF09(120.83,$G(ERROR)),TOP10^GMRAUTL2
"DATA",4.001,120.83,"MFE")
99.99^vuid^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,8925.6,0)
8925.6^^TIU Status^^^^TIU Status
"DATA",4.001,8925.6,1,0)
^4.011^5^5
"DATA",4.001,8925.6,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,8925.6,1,2,0)
VistA_Abbreviation^.02^^^^^^^^^^^^^2
"DATA",4.001,8925.6,1,3,0)
VistA_Interaction^.04^^^^^^^^^^^^^3
"DATA",4.001,8925.6,1,4,0)
VistA_Description^1^^8925.61^^^^^^^^^^^4^1
"DATA",4.001,8925.6,1,5,0)
Status^.02^^8925.699^^Status^^^^^^^^^5
"DATA",4.001,8925.6,2)
D MFSUP^HDISVF09(8925.6,$G(ERROR))
"DATA",4.001,8925.6,"MFE")
^^^^^^^B
"DATA",4.001,8926.1,0)
8926.1^^TIU Titles^^^^TIU Titles
"DATA",4.001,8926.1,1,0)
^4.011^7^7
"DATA",4.001,8926.1,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,8926.1,1,2,0)
has_SMD^.04^^^^^^^^^^^VUID^^2
"DATA",4.001,8926.1,1,3,0)
has_role^.05^^^^^^^^^^^VUID^^3
"DATA",4.001,8926.1,1,4,0)
has_setting^.06^^^^^^^^^^^VUID^^4
"DATA",4.001,8926.1,1,5,0)
has_service^.07^^^^^^^^^^^VUID^^5
"DATA",4.001,8926.1,1,6,0)
has_doctype^.08^^^^^^^^^^^VUID^^6
"DATA",4.001,8926.1,1,7,0)
Status^.02^^8926.199^^Status^^^^^^^^^7
"DATA",4.001,8926.1,2)
D MFSUP^HDISVF09(8926.1,$G(ERROR))
"DATA",4.001,8926.1,"MFE")
^^^^^^^B
"DATA",4.001,8926.2,0)
8926.2^^TIU SMD^^^^TIU SMD
"DATA",4.001,8926.2,1,0)
^4.011^2^2
"DATA",4.001,8926.2,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,8926.2,1,2,0)
Status^.02^^8926.299^^Status^^^^^^^^^2
"DATA",4.001,8926.2,2)
D MFSUP^HDISVF09(8926.2,$G(ERROR))
"DATA",4.001,8926.2,"MFE")
^^^^^^^B
"DATA",4.001,8926.3,0)
8926.3^^TIU Role^^^^TIU Role
"DATA",4.001,8926.3,1,0)
^4.011^2^2
"DATA",4.001,8926.3,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,8926.3,1,2,0)
Status^.02^^8926.399^^Status^^^^^^^^^2
"DATA",4.001,8926.3,2)
D MFSUP^HDISVF09(8926.3,$G(ERROR))
"DATA",4.001,8926.3,"MFE")
^^^^^^^B
"DATA",4.001,8926.4,0)
8926.4^^TIU Setting^^^^TIU Setting
"DATA",4.001,8926.4,1,0)
^4.011^2^2
"DATA",4.001,8926.4,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,8926.4,1,2,0)
Status^.02^^8926.499^^Status^^^^^^^^^2
"DATA",4.001,8926.4,2)
D MFSUP^HDISVF09(8926.4,$G(ERROR))
"DATA",4.001,8926.4,"MFE")
^^^^^^^B
"DATA",4.001,8926.5,0)
8926.5^^TIU Service^^^^TIU Service
"DATA",4.001,8926.5,1,0)
^4.011^2^2
"DATA",4.001,8926.5,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,8926.5,1,2,0)
Status^.02^^8926.599^^Status^^^^^^^^^2
"DATA",4.001,8926.5,2)
D MFSUP^HDISVF09(8926.5,$G(ERROR))
"DATA",4.001,8926.5,"MFE")
^^^^^^^B
"DATA",4.001,8926.6,0)
8926.6^^TIU Doctype^^^^TIU Doctype
"DATA",4.001,8926.6,1,0)
^4.011^2^2
"DATA",4.001,8926.6,1,1,0)
Term^.01^^^^^^^^^^^^^1
"DATA",4.001,8926.6,1,2,0)
Status^.02^^8926.699^^Status^^^^^^^^^2
"DATA",4.001,8926.6,2)
D MFSUP^HDISVF09(8926.6,$G(ERROR))
"DATA",4.001,8926.6,"MFE")
^^^^^^^B
"DATA",4.005,4,0)
DrugClass^0
"DATA",4.005,4,1,0)
^4.0051^50.605^1
"DATA",4.005,4,1,50.605,0)
50.605
"DATA",4.005,4,1,50.605,1,0)
^4.00511^99.99^5
"DATA",4.005,4,1,50.605,1,.01,0)
.01^100^E
"DATA",4.005,4,1,50.605,1,1,0)
1^110^E
"DATA",4.005,4,1,50.605,1,2,0)
2^130^E
"DATA",4.005,4,1,50.605,1,3,0)
3^120^E
"DATA",4.005,4,1,50.605,1,99.99,0)
99.99^90^I
"DATA",4.005,4,2)
^^3060505.12034^44affaede9e0c83939d2b62f765e5242
"DATA",4.005,5,0)
Ingredient^0
"DATA",4.005,5,1,0)
^4.0051^50.416^1
"DATA",4.005,5,1,50.416,0)
50.416
"DATA",4.005,5,1,50.416,1,0)
^4.00511^99.99^4
"DATA",4.005,5,1,50.416,1,.01,0)
.01^100^E
"DATA",4.005,5,1,50.416,1,1,0)
1^110^E
"DATA",4.005,5,1,50.416,1,2,0)
2^120^E
"DATA",4.005,5,1,50.416,1,99.99,0)
99.99^90^I
"DATA",4.005,5,2)
^^3060518.115212^6c20cc5a3db02b1ba12cb81067456d28
"DATA",4.005,6,0)
Product^0
"DATA",4.005,6,1,0)
^4.0051^50.68^1
"DATA",4.005,6,1,50.68,0)
50.68
"DATA",4.005,6,1,50.68,1,0)
^4.00511^99.99^3
"DATA",4.005,6,1,50.68,1,.01,0)
.01^100^E
"DATA",4.005,6,1,50.68,1,7,0)
7^110^E
"DATA",4.005,6,1,50.68,1,99.99,0)
99.99^90^I
"DATA",4.005,6,2)
^^3060518.115728^d53ca6754336d10b178f20223b42abeb
"DATA",4.005,7,0)
Generic
"DATA",4.005,7,1,0)
^4.0051^50.6^1
"DATA",4.005,7,1,50.6,0)
50.6
"DATA",4.005,7,1,50.6,1,0)
^4.00511^99.99^2
"DATA",4.005,7,1,50.6,1,.01,0)
.01^100^E
"DATA",4.005,7,1,50.6,1,99.99,0)
99.99^90^I
"DATA",4.005,7,2)
^^3060518.115124^37842b2a00a0e86bcbcfe2da6eb72526
"DATA",4.005,8,0)
Reactants
"DATA",4.005,8,1,0)
^4.0051^120.824^4
"DATA",4.005,8,1,120.82,0)
120.82
"DATA",4.005,8,1,120.82,1,0)
^4.00511^99.99^3
"DATA",4.005,8,1,120.82,1,.01,0)
.01^20
"DATA",4.005,8,1,120.82,1,1,0)
1^30^E
"DATA",4.005,8,1,120.82,1,99.99,0)
99.99^10
"DATA",4.005,8,1,120.8205,0)
120.8205
"DATA",4.005,8,1,120.8205,1,0)
^4.00511^.01^1
"DATA",4.005,8,1,120.8205,1,.01,0)
.01^60^E^50.605
"DATA",4.005,8,1,120.823,0)
120.823
"DATA",4.005,8,1,120.823,1,0)
^4.00511^.01^1
"DATA",4.005,8,1,120.823,1,.01,0)
.01^40
"DATA",4.005,8,1,120.824,0)
120.824
"DATA",4.005,8,1,120.824,1,0)
^4.00511^.01^1
"DATA",4.005,8,1,120.824,1,.01,0)
.01^50^E^50.416
"DATA",4.005,8,2)
^^3060811.134347^e851270df114fbb52a0a40750ec159ce
"DATA",4.005,9,0)
Reactions
"DATA",4.005,9,1,0)
^4.0051^120.832^2
"DATA",4.005,9,1,120.83,0)
120.83
"DATA",4.005,9,1,120.83,1,0)
^4.00511^99.99^2
"DATA",4.005,9,1,120.83,1,.01,0)
.01^20
"DATA",4.005,9,1,120.83,1,99.99,0)
99.99^10
"DATA",4.005,9,1,120.832,0)
120.832
"DATA",4.005,9,1,120.832,1,0)
^4.00511^.01^1
"DATA",4.005,9,1,120.832,1,.01,0)
.01^30
"DATA",4.005,9,2)
^^3060714.115111^9a5723da2b3d79510eedc8b1788e08bd
"DATA",4.005,10,0)
Vital Types
"DATA",4.005,10,1,0)
^4.0051^120.51^1
"DATA",4.005,10,1,120.51,0)
120.51
"DATA",4.005,10,1,120.51,1,0)
^4.00511^99.99^7
"DATA",4.005,10,1,120.51,1,.01,0)
.01^20
"DATA",4.005,10,1,120.51,1,1,0)
1^30
"DATA",4.005,10,1,120.51,1,3,0)
3^40
"DATA",4.005,10,1,120.51,1,4,0)
4^50
"DATA",4.005,10,1,120.51,1,5,0)
5^60
"DATA",4.005,10,1,120.51,1,7,0)
7^70
"DATA",4.005,10,1,120.51,1,99.99,0)
99.99^10
"DATA",4.005,10,2)
^^3060714.115209^d940a435a0bffbc02adc051bd232b8cd
"DATA",4.005,12,0)
Vital Qualifiers
"DATA",4.005,12,1,0)
^4.0051^120.521^2
"DATA",4.005,12,1,120.52,0)
120.52
"DATA",4.005,12,1,120.52,1,0)
^4.00511^999999^4
"DATA",4.005,12,1,120.52,1,.01,0)
.01^20
"DATA",4.005,12,1,120.52,1,.02,0)
.02^30
"DATA",4.005,12,1,120.52,1,99.99,0)
99.99^10
"DATA",4.005,12,1,120.52,1,999999,0)
999999^45
"DATA",4.005,12,1,120.521,0)
120.521
"DATA",4.005,12,1,120.521,1,0)
^4.00511^.02^2
"DATA",4.005,12,1,120.521,1,.01,0)
.01^40^^120.51
"DATA",4.005,12,1,120.521,1,.02,0)
.02^50^^120.53^1
"DATA",4.005,12,2)
^^3060714.115209^519200a90ea204d9458c7d515ed6e585
"DATA",4.005,13,0)
TIU Doctype
"DATA",4.005,13,1,0)
^4.0051^8926.6^1
"DATA",4.005,13,1,8926.6,0)
8926.6
"DATA",4.005,13,1,8926.6,1,0)
^4.00511^99.99^2
"DATA",4.005,13,1,8926.6,1,.01,0)
.01^20
"DATA",4.005,13,1,8926.6,1,99.99,0)
99.99^10
"DATA",4.005,13,2)
^^3060714.115111^b31a4e815109028f6e35fb2130142d26
"DATA",4.005,14,0)
TIU Role
"DATA",4.005,14,1,0)
^4.0051^8926.3^1
"DATA",4.005,14,1,8926.3,0)
8926.3
"DATA",4.005,14,1,8926.3,1,0)
^4.00511^99.99^2
"DATA",4.005,14,1,8926.3,1,.01,0)
.01^20
"DATA",4.005,14,1,8926.3,1,99.99,0)
99.99^10
"DATA",4.005,14,2)
^^3060714.115111^2ef23229fc0473622d208a250bafa15c
"DATA",4.005,15,0)
TIU Service
"DATA",4.005,15,1,0)
^4.0051^8926.5^1
"DATA",4.005,15,1,8926.5,0)
8926.5
"DATA",4.005,15,1,8926.5,1,0)
^4.00511^99.99^2
"DATA",4.005,15,1,8926.5,1,.01,0)
.01^20
"DATA",4.005,15,1,8926.5,1,99.99,0)
99.99^10
"DATA",4.005,15,2)
^^3060714.115113^888026f3307f05cdd15087ab48391af0
"DATA",4.005,16,0)
TIU Setting
"DATA",4.005,16,1,0)
^4.0051^8926.4^1
"DATA",4.005,16,1,8926.4,0)
8926.4
"DATA",4.005,16,1,8926.4,1,0)
^4.00511^99.99^2
"DATA",4.005,16,1,8926.4,1,.01,0)
.01^20
"DATA",4.005,16,1,8926.4,1,99.99,0)
99.99^10
"DATA",4.005,16,2)
^^3060714.115113^68affc512ac706d8fed1a4a6864077fd
"DATA",4.005,17,0)
TIU SMD
"DATA",4.005,17,1,0)
^4.0051^8926.2^1
"DATA",4.005,17,1,8926.2,0)
8926.2
"DATA",4.005,17,1,8926.2,1,0)
^4.00511^99.99^2
"DATA",4.005,17,1,8926.2,1,.01,0)
.01^20
"DATA",4.005,17,1,8926.2,1,99.99,0)
99.99^10
"DATA",4.005,17,2)
^^3060714.115112^f6aaead75a5830a6ec2c0d9136a0a5fd
"DATA",4.005,18,0)
TIU Titles
"DATA",4.005,18,1,0)
^4.0051^8926.1^1
"DATA",4.005,18,1,8926.1,0)
8926.1
"DATA",4.005,18,1,8926.1,1,0)
^4.00511^99.99^7
"DATA",4.005,18,1,8926.1,1,.01,0)
.01^20^E
"DATA",4.005,18,1,8926.1,1,.04,0)
.04^30^^8926.2
"DATA",4.005,18,1,8926.1,1,.05,0)
.05^40^^8926.3
"DATA",4.005,18,1,8926.1,1,.06,0)
.06^50^^8926.4
"DATA",4.005,18,1,8926.1,1,.07,0)
.07^60^^8926.5
"DATA",4.005,18,1,8926.1,1,.08,0)
.08^70^^8926.6
"DATA",4.005,18,1,8926.1,1,99.99,0)
99.99^10
"DATA",4.005,18,2)
^^3060714.115207^d768d7ebab5d45490be79f2e3420bb53
"DATA",4.005,19,0)
Order Status
"DATA",4.005,19,1,0)
^4.0051^100.01^1
"DATA",4.005,19,1,100.01,0)
100.01
"DATA",4.005,19,1,100.01,1,0)
^4.00511^99.99^5
"DATA",4.005,19,1,100.01,1,.01,0)
.01^20
"DATA",4.005,19,1,100.01,1,.02,0)
.02^30
"DATA",4.005,19,1,100.01,1,.1,0)
.1^40
"DATA",4.005,19,1,100.01,1,2,0)
2^50
"DATA",4.005,19,1,100.01,1,99.99,0)
99.99^10
"DATA",4.005,19,2)
^^3060714.115031^0ab21d138bd130fd70a7cb8e816fd9d6
"DATA",4.005,20,0)
Nature of Order
"DATA",4.005,20,1,0)
^4.0051^100.02^1
"DATA",4.005,20,1,100.02,0)
100.02
"DATA",4.005,20,1,100.02,1,0)
^4.00511^99.99^8
"DATA",4.005,20,1,100.02,1,.01,0)
.01^20
"DATA",4.005,20,1,100.02,1,.02,0)
.02^30
"DATA",4.005,20,1,100.02,1,.03,0)
.03^40
"DATA",4.005,20,1,100.02,1,.05,0)
.05^50
"DATA",4.005,20,1,100.02,1,.06,0)
.06^60
"DATA",4.005,20,1,100.02,1,.11,0)
.11^70
"DATA",4.005,20,1,100.02,1,.14,0)
.14^80
"DATA",4.005,20,1,100.02,1,99.99,0)
99.99^10
"DATA",4.005,20,2)
^^3060714.115026^5d84e3d347f46cc2c3e1bf2297ea2cf4
"DATA",4.005,21,0)
TIU Status
"DATA",4.005,21,1,0)
^4.0051^8925.6^1
"DATA",4.005,21,1,8925.6,0)
8925.6
"DATA",4.005,21,1,8925.6,1,0)
^4.00511^99.99^5
"DATA",4.005,21,1,8925.6,1,.01,0)
.01^20
"DATA",4.005,21,1,8925.6,1,.02,0)
.02^30^E
"DATA",4.005,21,1,8925.6,1,.04,0)
.04^40^E
"DATA",4.005,21,1,8925.6,1,1,0)
1^50
"DATA",4.005,21,1,8925.6,1,99.99,0)
99.99^10
"DATA",4.005,21,2)
^^3060811.141923^cc9dd2d94d0d9ea73e661ca4ea074581
"DATA",4.005,22,0)
ALLERGY CODESYSTEM^0
"DATA",4.005,22,1,0)
^4.0051^120.8399^8
"DATA",4.005,22,1,120.82,0)
120.82
"DATA",4.005,22,1,120.82,1,0)
^4.00511^99.99^3
"DATA",4.005,22,1,120.82,1,.01,0)
.01^20
"DATA",4.005,22,1,120.82,1,1,0)
1^30^I
"DATA",4.005,22,1,120.82,1,99.99,0)
99.99^10
"DATA",4.005,22,1,120.8205,0)
120.8205
"DATA",4.005,22,1,120.8205,1,0)
^4.00511^.01^1
"DATA",4.005,22,1,120.8205,1,.01,0)
.01^70
"DATA",4.005,22,1,120.823,0)
120.823
"DATA",4.005,22,1,120.823,1,0)
^4.00511^.01^1
"DATA",4.005,22,1,120.823,1,.01,0)
.01^50
"DATA",4.005,22,1,120.824,0)
120.824
"DATA",4.005,22,1,120.824,1,0)
^4.00511^.01^1
"DATA",4.005,22,1,120.824,1,.01,0)
.01^60
"DATA",4.005,22,1,120.8299,0)
120.8299
"DATA",4.005,22,1,120.8299,1,0)
^4.00511^.02^1
"DATA",4.005,22,1,120.8299,1,.02,0)
.02^90
"DATA",4.005,22,1,120.83,0)
120.83
"DATA",4.005,22,1,120.83,1,0)
^4.00511^99.99^2
"DATA",4.005,22,1,120.83,1,.01,0)
.01^110
"DATA",4.005,22,1,120.83,1,99.99,0)
99.99^100
"DATA",4.005,22,1,120.832,0)
120.832
"DATA",4.005,22,1,120.832,1,0)
^4.00511^.01^1
"DATA",4.005,22,1,120.832,1,.01,0)
.01^130
"DATA",4.005,22,1,120.8399,0)
120.8399
"DATA",4.005,22,1,120.8399,1,0)
^4.00511^.02^1
"DATA",4.005,22,1,120.8399,1,.02,0)
.02^150
"DATA",4.005,22,2)
^^3060518.114835^ddaf3b98dc0ab0a872ebcfbc9c5ddb6a
"DATA",4.005,23,0)
VITALS CODESYSTEM^0
"DATA",4.005,23,1,0)
^4.0051^120.5399^7
"DATA",4.005,23,1,120.51,0)
120.51
"DATA",4.005,23,1,120.51,1,0)
^4.00511^99.99^7
"DATA",4.005,23,1,120.51,1,.01,0)
.01^20
"DATA",4.005,23,1,120.51,1,1,0)
1^30
"DATA",4.005,23,1,120.51,1,3,0)
3^40
"DATA",4.005,23,1,120.51,1,4,0)
4^50
"DATA",4.005,23,1,120.51,1,5,0)
5^60
"DATA",4.005,23,1,120.51,1,7,0)
7^70
"DATA",4.005,23,1,120.51,1,99.99,0)
99.99^10
"DATA",4.005,23,1,120.5199,0)
120.5199
"DATA",4.005,23,1,120.5199,1,0)
^4.00511^.02^1
"DATA",4.005,23,1,120.5199,1,.02,0)
.02^80
"DATA",4.005,23,1,120.52,0)
120.52
"DATA",4.005,23,1,120.52,1,0)
^4.00511^777^4
"DATA",4.005,23,1,120.52,1,.01,0)
.01^130
"DATA",4.005,23,1,120.52,1,.02,0)
.02^140
"DATA",4.005,23,1,120.52,1,99.99,0)
99.99^120
"DATA",4.005,23,1,120.52,1,777,0)
777^155
"DATA",4.005,23,1,120.521,0)
120.521
"DATA",4.005,23,1,120.521,1,0)
^4.00511^.02^2
"DATA",4.005,23,1,120.521,1,.01,0)
.01^150^^
"DATA",4.005,23,1,120.521,1,.02,0)
.02^160^^^0
"DATA",4.005,23,1,120.5299,0)
120.5299
"DATA",4.005,23,1,120.5299,1,0)
^4.00511^.02^1
"DATA",4.005,23,1,120.5299,1,.02,0)
.02^170
"DATA",4.005,23,1,120.53,0)
120.53
"DATA",4.005,23,1,120.53,1,0)
^4.00511^99.99^2
"DATA",4.005,23,1,120.53,1,.01,0)
.01^100
"DATA",4.005,23,1,120.53,1,99.99,0)
99.99^90
"DATA",4.005,23,1,120.5399,0)
120.5399
"DATA",4.005,23,1,120.5399,1,0)
^4.00511^.02^1
"DATA",4.005,23,1,120.5399,1,.02,0)
.02^110
"DATA",4.005,23,2)
^^3060703.164805^296af039315e0b250c7b93560fc23235
"DATA",4.005,24,0)
Vital Categories
"DATA",4.005,24,1,0)
^4.0051^120.53^1
"DATA",4.005,24,1,120.53,0)
120.53
"DATA",4.005,24,1,120.53,1,0)
^4.00511^99.99^2
"DATA",4.005,24,1,120.53,1,.01,0)
.01^20
"DATA",4.005,24,1,120.53,1,99.99,0)
99.99^10
"DATA",4.005,24,2)
^^3060714.115207^6c892dc411bcb769f965cdb620408c31
"FIA",4.001)
MASTER FILE PARAMETERS
"FIA",4.001,0)
^DIC(4.001,
"FIA",4.001,0,0)
4.001P
"FIA",4.001,0,1)
y^n^f^^y^^y^o^n
"FIA",4.001,0,10)

"FIA",4.001,0,11)

"FIA",4.001,0,"RLRO")

"FIA",4.001,0,"VR")
8.0^XU
"FIA",4.001,4.001)
0
"FIA",4.001,4.011)
0
"FIA",4.001,4.111)
0
"FIA",4.005)
MD5 Signature
"FIA",4.005,0)
^DIC(4.005,
"FIA",4.005,0,0)
4.005
"FIA",4.005,0,1)
y^n^f^^y^^y^o^n
"FIA",4.005,0,10)

"FIA",4.005,0,11)

"FIA",4.005,0,"RLRO")

"FIA",4.005,0,"VR")
8.0^XU
"FIA",4.005,4.005)
0
"FIA",4.005,4.0051)
0
"FIA",4.005,4.00511)
0
"FRV1",4.001,"120.51,""MFE""",7)
CE
"FRV1",4.001,"120.51,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",11)
NM
"FRV1",4.001,"120.51,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",12)
ST
"FRV1",4.001,"120.51,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",14)
ST
"FRV1",4.001,"120.51,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",15)
ST
"FRV1",4.001,"120.51,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.51,0",6)
XUMF ERROR
"FRV1",4.001,"120.51,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"120.51,1,10,0",3)
ST
"FRV1",4.001,"120.51,1,10,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,11,0",3)
ST
"FRV1",4.001,"120.51,1,11,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,12,0",3)
ST
"FRV1",4.001,"120.51,1,12,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,13,0",3)
ST
"FRV1",4.001,"120.51,1,13,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,14,0",3)
ST
"FRV1",4.001,"120.51,1,14,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,15,0",3)
ST
"FRV1",4.001,"120.51,1,15,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,16,0",3)
DT
"FRV1",4.001,"120.51,1,16,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,2,0",3)
ST
"FRV1",4.001,"120.51,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,3,0",3)
ST
"FRV1",4.001,"120.51,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,4,0",3)
NM
"FRV1",4.001,"120.51,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,5,0",3)
ST
"FRV1",4.001,"120.51,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,6,0",3)
ST
"FRV1",4.001,"120.51,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,7,0",3)
ST
"FRV1",4.001,"120.51,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,9,0",3)
NM
"FRV1",4.001,"120.51,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",7)
CE
"FRV1",4.001,"120.52,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",11)
NM
"FRV1",4.001,"120.52,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",12)
ST
"FRV1",4.001,"120.52,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",14)
ST
"FRV1",4.001,"120.52,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",15)
ST
"FRV1",4.001,"120.52,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.52,0",6)
XUMF ERROR
"FRV1",4.001,"120.52,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"120.52,1,10,0",3)
ST
"FRV1",4.001,"120.52,1,10,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,11,0",3)
ST
"FRV1",4.001,"120.52,1,11,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,12,0",3)
DT
"FRV1",4.001,"120.52,1,12,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,2,0",3)
ST
"FRV1",4.001,"120.52,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,3,0",3)
ST
"FRV1",4.001,"120.52,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,4,0",3)
ST
"FRV1",4.001,"120.52,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,5,0",3)
ST
"FRV1",4.001,"120.52,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,7,0",3)
NM
"FRV1",4.001,"120.52,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,8,0",3)
ST
"FRV1",4.001,"120.52,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,9,0",3)
ST
"FRV1",4.001,"120.52,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",7)
CE
"FRV1",4.001,"120.53,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",11)
NM
"FRV1",4.001,"120.53,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",12)
ST
"FRV1",4.001,"120.53,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",14)
ST
"FRV1",4.001,"120.53,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",15)
ST
"FRV1",4.001,"120.53,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,10,0",3)
ST
"FRV1",4.001,"120.53,1,10,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,2,0",3)
ST
"FRV1",4.001,"120.53,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,3,0",3)
ST
"FRV1",4.001,"120.53,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,4,0",3)
NM
"FRV1",4.001,"120.53,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,5,0",3)
NM
"FRV1",4.001,"120.53,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,6,0",3)
NM
"FRV1",4.001,"120.53,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,7,0",3)
ST
"FRV1",4.001,"120.53,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,8,0",3)
DT
"FRV1",4.001,"120.53,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,9,0",3)
NM
"FRV1",4.001,"120.53,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",7)
CE
"FRV1",4.001,"120.82,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",11)
NM
"FRV1",4.001,"120.82,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",12)
ST
"FRV1",4.001,"120.82,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",14)
ST
"FRV1",4.001,"120.82,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",15)
ST
"FRV1",4.001,"120.82,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.82,0",6)
XUMF ERROR
"FRV1",4.001,"120.82,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"120.82,1,10,0",3)
ST
"FRV1",4.001,"120.82,1,10,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,11,0",3)
ST
"FRV1",4.001,"120.82,1,11,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,12,0",3)
ST
"FRV1",4.001,"120.82,1,12,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,13,0",3)
ST
"FRV1",4.001,"120.82,1,13,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,14,0",3)
ST
"FRV1",4.001,"120.82,1,14,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,15,0",3)
ST
"FRV1",4.001,"120.82,1,15,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,16,0",3)
ST
"FRV1",4.001,"120.82,1,16,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,17,0",3)
DT
"FRV1",4.001,"120.82,1,17,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,18,0",3)
ST
"FRV1",4.001,"120.82,1,18,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,2,0",3)
ST
"FRV1",4.001,"120.82,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,4,0",3)
ST
"FRV1",4.001,"120.82,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,8,0",3)
NM
"FRV1",4.001,"120.82,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",7)
CE
"FRV1",4.001,"120.83,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",11)
NM
"FRV1",4.001,"120.83,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",12)
ST
"FRV1",4.001,"120.83,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",14)
ST
"FRV1",4.001,"120.83,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",15)
ST
"FRV1",4.001,"120.83,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.83,0",6)
XUMF ERROR
"FRV1",4.001,"120.83,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"120.83,1,10,0",3)
ST
"FRV1",4.001,"120.83,1,10,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,11,0",3)
ST
"FRV1",4.001,"120.83,1,11,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,12,0",3)
DT
"FRV1",4.001,"120.83,1,12,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,2,0",3)
ST
"FRV1",4.001,"120.83,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,3,0",3)
ST
"FRV1",4.001,"120.83,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,8,0",3)
NM
"FRV1",4.001,"120.83,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,9,0",3)
ST
"FRV1",4.001,"120.83,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",7)
CE
"FRV1",4.001,"4.005,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",11)
TX
"FRV1",4.001,"4.005,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",12)
ST
"FRV1",4.001,"4.005,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",14)
ST
"FRV1",4.001,"4.005,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",15)
ST
"FRV1",4.001,"4.005,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"4.005,0",6)
XUMF ERROR
"FRV1",4.001,"4.005,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"4.005,1,1,0",3)
NM
"FRV1",4.001,"4.005,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",7)
CE
"FRV1",4.001,"4.009,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",11)
TX
"FRV1",4.001,"4.009,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",12)
ST
"FRV1",4.001,"4.009,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",14)
ST
"FRV1",4.001,"4.009,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",15)
ST
"FRV1",4.001,"4.009,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"4.009,0",6)
XUMF ERROR
"FRV1",4.001,"4.009,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"4.009,1,1,0",3)
ST
"FRV1",4.001,"4.009,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.009,1,2,0",3)
ST
"FRV1",4.001,"4.009,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.416,""MFE""",7)
CE
"FRV1",4.001,"50.416,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"50.416,""MFE""",11)
ST
"FRV1",4.001,"50.416,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"50.416,""MFE""",12)
ST
"FRV1",4.001,"50.416,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"50.416,""MFE""",14)
ST
"FRV1",4.001,"50.416,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"50.416,""MFE""",15)
ST
"FRV1",4.001,"50.416,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"50.416,0",6)
XUMF ERROR
"FRV1",4.001,"50.416,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"50.416,1,1,0",3)
ST
"FRV1",4.001,"50.416,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.416,1,2,0",3)
ST
"FRV1",4.001,"50.416,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.416,1,3,0",3)
ST
"FRV1",4.001,"50.416,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.416,1,4,0",3)
NM
"FRV1",4.001,"50.416,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.6,""MFE""",7)
CE
"FRV1",4.001,"50.6,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"50.6,""MFE""",11)
ST
"FRV1",4.001,"50.6,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"50.6,""MFE""",12)
ST
"FRV1",4.001,"50.6,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"50.6,""MFE""",14)
ST
"FRV1",4.001,"50.6,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"50.6,""MFE""",15)
ST
"FRV1",4.001,"50.6,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"50.6,0",6)
XUMF ERROR
"FRV1",4.001,"50.6,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"50.6,1,1,0",3)
ST
"FRV1",4.001,"50.6,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.6,1,2,0",3)
NM
"FRV1",4.001,"50.6,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.605,""MFE""",7)
CE
"FRV1",4.001,"50.605,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"50.605,""MFE""",11)
ST
"FRV1",4.001,"50.605,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"50.605,""MFE""",12)
ST
"FRV1",4.001,"50.605,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"50.605,""MFE""",14)
ST
"FRV1",4.001,"50.605,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"50.605,""MFE""",15)
ST
"FRV1",4.001,"50.605,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"50.605,0",6)
XUMF ERROR
"FRV1",4.001,"50.605,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"50.605,1,1,0",3)
ST
"FRV1",4.001,"50.605,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.605,1,2,0",3)
ST
"FRV1",4.001,"50.605,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.605,1,3,0",3)
ST
"FRV1",4.001,"50.605,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.605,1,4,0",3)
ST
"FRV1",4.001,"50.605,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.605,1,5,0",3)
NM
"FRV1",4.001,"50.605,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.68,""MFE""",7)
CE
"FRV1",4.001,"50.68,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"50.68,""MFE""",11)
ST
"FRV1",4.001,"50.68,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"50.68,""MFE""",12)
ST
"FRV1",4.001,"50.68,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"50.68,""MFE""",14)
ST
"FRV1",4.001,"50.68,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"50.68,""MFE""",15)
ST
"FRV1",4.001,"50.68,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"50.68,0",6)
XUMF ERROR
"FRV1",4.001,"50.68,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"50.68,1,1,0",3)
ST
"FRV1",4.001,"50.68,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.68,1,2,0",3)
NM
"FRV1",4.001,"50.68,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"50.68,1,3,0",3)
ST
"FRV1",4.001,"50.68,1,3,0",3,"F")
;HL(771.4,
"IX",4.005,4.005,"AC",0)
4.005^AC^Sequence for XUMF5I routine^R^^R^IR^W^4.00511^^^^^S
"IX",4.005,4.005,"AC",1)
S ^DIC(4.005,"AC",X(1),$E(X(2),1,5),DA(2),DA(1),DA)=""
"IX",4.005,4.005,"AC",2)
K ^DIC(4.005,"AC",X(1),$E(X(2),1,5),DA(2),DA(1),DA)
"IX",4.005,4.005,"AC",2.5)
K ^DIC(4.005,"AC")
"IX",4.005,4.005,"AC",11.1,0)
^.114IA^2^2
"IX",4.005,4.005,"AC",11.1,1,0)
1^C^^^^1
"IX",4.005,4.005,"AC",11.1,1,1.5)
S X=DA(2)
"IX",4.005,4.005,"AC",11.1,2,0)
2^F^4.00511^1^5^2^F
"IX",4.005,4.005,"AC",11.1,2,3)

"KRN",101,6977,-1)
0^1
"KRN",101,6977,0)
XUMF QUERY EVENT^VETS data query^^E^^^^^^^^
"KRN",101,6977,1,0)
^^1^1^3060306^
"KRN",101,6977,1,1,0)
This protocol is the VETS data query event driver for the NTRT.
"KRN",101,6977,99)
60488,47184
"KRN",101,6977,770)
VETS DATA^^MFQ^M01^i^P^^AL^AL^2.4^MFR
"KRN",101,6977,772)
Q
"KRN",101,6977,775,0)
^101.0775PA^1^1
"KRN",101,6977,775,1,0)
6978
"KRN",101,6977,775,1,"^")
XUMF QUERY HANDLER
"KRN",101,6978,-1)
0^4
"KRN",101,6978,0)
XUMF QUERY HANDLER^VETS query response^^S^^^^^^^^
"KRN",101,6978,1,0)
^^2^2^3060306^
"KRN",101,6978,1,1,0)
This protocol handles Master File Query messages from
"KRN",101,6978,1,2,0)
the VETS service.
"KRN",101,6978,99)
60488,47184
"KRN",101,6978,770)
^XUMF DATA^MFQ^M01^^P^XUMF ACK^AL^AL^2.4^MFR
"KRN",101,6978,771)
D MAIN^XUMFQR
"KRN",101,6978,773)
1^1^^1
"KRN",101,6978,774)
Q
"KRN",101,6979,-1)
0^2
"KRN",101,6979,0)
XUMF MD5 EVENT^VETS MD5 query^^E^^^^^^^^
"KRN",101,6979,1,0)
^^1^1^3060306^
"KRN",101,6979,1,1,0)
This protocol is the VETS MD5 query event driver for the NTRT.
"KRN",101,6979,99)
60488,47184
"KRN",101,6979,770)
VETS MD5^^MFQ^M01^i^P^^AL^AL^2.4^MFR
"KRN",101,6979,772)
Q
"KRN",101,6979,775,0)
^101.0775PA^1^1
"KRN",101,6979,775,1,0)
6980
"KRN",101,6979,775,1,"^")
XUMF MD5 HANDLER
"KRN",101,6980,-1)
0^3
"KRN",101,6980,0)
XUMF MD5 HANDLER^VETS MD5 query response^^S^^^^^^^^
"KRN",101,6980,1,0)
^^3^3^3060306^
"KRN",101,6980,1,1,0)
This protocol handles Master File Query messages from
"KRN",101,6980,1,2,0)
the VETS service.  It returns the MD5 value for the
"KRN",101,6980,1,3,0)
standard file specified in the query definition.
"KRN",101,6980,99)
60488,47184
"KRN",101,6980,770)
^XUMF MD5^MFQ^M01^^P^XUMF ACK^AL^AL^2.4^MFR
"KRN",101,6980,771)
D MAIN^XUMFMD5
"KRN",101,6980,773)
1^1^^1
"KRN",101,6980,774)
Q
"KRN",101,6981,-1)
0^5
"KRN",101,6981,0)
XUMF VETS UPDATE^VETS update^^E^^^^^^^^
"KRN",101,6981,1,0)
^101.06^1^1^3060321^^^^
"KRN",101,6981,1,1,0)
This protocol is the Master File Notification event driver for the MFS.
"KRN",101,6981,99)
60488,47184
"KRN",101,6981,770)
VETS UPDATE^^MFN^M01^i^P^^AL^AL^2.4^MFK
"KRN",101,6981,772)
Q
"KRN",101,6981,775,0)
^101.0775PA^1^1
"KRN",101,6981,775,1,0)
6982
"KRN",101,6981,775,1,"^")
XUMF UPDATE
"KRN",101,6982,-1)
0^6
"KRN",101,6982,0)
XUMF UPDATE^VETS update handler^^S^^^^^^^^
"KRN",101,6982,1,0)
^101.06^2^2^3060321^^^^
"KRN",101,6982,1,1,0)
This protocol handles Master File Notification messages for
"KRN",101,6982,1,2,0)
the Master File Server mechanism.
"KRN",101,6982,99)
60488,47184
"KRN",101,6982,770)
^XUMF UPDATE^MFN^M01^^P^XUMF ACK^AL^AL^2.4^MFK
"KRN",101,6982,771)
D MAIN^XUMF1H
"KRN",101,6982,773)
1^1^^1
"KRN",101,6982,774)
Q
"KRN",771,160,-1)
0^1
"KRN",771,160,0)
VETS DATA^a^MFS^XUMF SERVER^^^USA
"KRN",771,160,"MSG",0)
^771.06P^1^1
"KRN",771,160,"MSG",1,0)
MSA
"KRN",771,160,"MSG",1,"R")
NONE
"KRN",771,160,"SEG",0)
^771.05P^1^1
"KRN",771,160,"SEG",1,0)
MSH
"KRN",771,160,"SEG",1,"F")
.01
"KRN",771,161,-1)
0^5
"KRN",771,161,0)
XUMF DATA^a^MFS^XUMF SERVER^^^USA
"KRN",771,161,"MSG",0)
^771.06P^1^1
"KRN",771,161,"MSG",1,0)
MSA
"KRN",771,161,"MSG",1,"R")
NONE
"KRN",771,161,"SEG",0)
^771.05P^1^1
"KRN",771,161,"SEG",1,0)
MSH
"KRN",771,161,"SEG",1,"F")
.01
"KRN",771,162,-1)
0^3
"KRN",771,162,0)
VETS MD5^a^MFS^XUMF SERVER^^^USA
"KRN",771,162,"MSG",0)
^771.06P^1^1
"KRN",771,162,"MSG",1,0)
MSA
"KRN",771,162,"MSG",1,"R")
NONE
"KRN",771,162,"SEG",0)
^771.05P^1^1
"KRN",771,162,"SEG",1,0)
MSH
"KRN",771,162,"SEG",1,"F")
.01
"KRN",771,163,-1)
0^4
"KRN",771,163,0)
XUMF MD5^a^MFS^XUMF SERVER^^^USA
"KRN",771,163,"MSG",0)
^771.06P^1^1
"KRN",771,163,"MSG",1,0)
MSA
"KRN",771,163,"MSG",1,"R")
NONE
"KRN",771,163,"SEG",0)
^771.05P^1^1
"KRN",771,163,"SEG",1,0)
MSH
"KRN",771,163,"SEG",1,"F")
.01
"KRN",771,164,-1)
0^6
"KRN",771,164,0)
XUMF UPDATE^a^MFS^XUMF SERVER^^^USA
"KRN",771,164,"MSG",0)
^771.06P^1^1
"KRN",771,164,"MSG",1,0)
MSA
"KRN",771,164,"MSG",1,"R")
NONE
"KRN",771,164,"SEG",0)
^771.05P^1^1
"KRN",771,164,"SEG",1,0)
MSH
"KRN",771,164,"SEG",1,"F")
.01
"KRN",771,165,-1)
0^7
"KRN",771,165,0)
VETS UPDATE^a^MFS^XUMF SERVER^^^USA
"KRN",771,165,"MSG",0)
^771.06P^1^1
"KRN",771,165,"MSG",1,0)
MSA
"KRN",771,165,"MSG",1,"R")
NONE
"KRN",771,165,"SEG",0)
^771.05P^1^1
"KRN",771,165,"SEG",1,0)
MSH
"KRN",771,165,"SEG",1,"F")
.01
"MBREQ")
0
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PGL",4.001,0,6,.06)
MAIL GROUP^P3.8X^XMB(3.8,^0;6^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",7,4.7)
MFE PKV TYPE^RP771.4'X^HL(771.4,^MFE;7^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",11,4.11)
MFE ID TYPE^RP771.4'X^HL(771.4,^MFE;11^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",12,4.12)
MFE TEXT TYPE^RP771.4'X^HL(771.4,^MFE;12^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",14,4.14)
MFE ALT ID TYPE^RP771.4'X^HL(771.4,^MFE;14^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",15,4.15)
MFE ALT TEXT TYPE^RP771.4'X^HL(771.4,^MFE;15^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.011,0,3,.03)
HL7 DATA TYPE^RP771.4'X^HL(771.4,^0;3^;K:'$$F^XUMF(+$G(XUMF)) X
"PKG",173,-1)
1^1
"PKG",173,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",173,20,0)
^9.402P^^
"PKG",173,22,0)
^9.49I^1^1
"PKG",173,22,1,0)
8.0^2950703^2951015^1
"PKG",173,22,1,"PAH",1,0)
407^3060811^520642422
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","XUMF0")
0^1^B25080823^n/a
"RTN","XUMF0",1,0)
XUMF0 ;ISS/RAM - XUMF API's;04/15/02
"RTN","XUMF0",2,0)
 ;;8.0;KERNEL;**407**;Jul 10, 1995;Build 8
"RTN","XUMF0",3,0)
 ;
"RTN","XUMF0",4,0)
 Q
"RTN","XUMF0",5,0)
 ;
"RTN","XUMF0",6,0)
 ;
"RTN","XUMF0",7,0)
MFE(IFN,VUID,IEN,ERROR) ; -- update
"RTN","XUMF0",8,0)
 ;
"RTN","XUMF0",9,0)
 ;N IENS,MFE,I,X,ID,XREF,NAME,FLD,FDA,DIC,Y
"RTN","XUMF0",10,0)
 ;
"RTN","XUMF0",11,0)
 I 'IFN S ERROR="1^Error - IFN required HLNODE: "_HLNODE Q
"RTN","XUMF0",12,0)
 I IFN=4.009 S IEN=$$FIND1^DIC(IFN,,"B","GLOBAL VERSION") Q
"RTN","XUMF0",13,0)
 I 'VUID S ERROR="1^Error - VUID required HLNODE: "_HLNODE Q
"RTN","XUMF0",14,0)
 ;
"RTN","XUMF0",15,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMF0",16,0)
 S IEN=$O(@ROOT@("AMASTERVUID",VUID,1,0))
"RTN","XUMF0",17,0)
 ;
"RTN","XUMF0",18,0)
 ;reactivate an existing inactive VUID
"RTN","XUMF0",19,0)
 I 'IEN D
"RTN","XUMF0",20,0)
 .S IEN=$O(@ROOT@("AMASTERVUID",VUID,0,0)) Q:'IEN
"RTN","XUMF0",21,0)
 .K FDA,ERR
"RTN","XUMF0",22,0)
 .S IENS=IEN_","
"RTN","XUMF0",23,0)
 .S FDA(IFN,IENS,99.98)=1
"RTN","XUMF0",24,0)
 .D FILE^DIE("E","FDA","ERR")
"RTN","XUMF0",25,0)
 .I $D(ERR) D
"RTN","XUMF0",26,0)
 ..S ERROR="1^flag update error for IFN: "_IFN_" IEN: "_IEN_" PKV: "_PKV
"RTN","XUMF0",27,0)
 ..D EM^XUMF1H(ERROR,.ERR) K ERR
"RTN","XUMF0",28,0)
 ;
"RTN","XUMF0",29,0)
 Q
"RTN","XUMF0",30,0)
 ;
"RTN","XUMF0",31,0)
STUB ; -- create record and update VUID with master flag
"RTN","XUMF0",32,0)
 ;
"RTN","XUMF0",33,0)
 S XREF="B"
"RTN","XUMF0",34,0)
 S NAME=$$UNESC($P(HLNODE,HLFS,3),.HL)
"RTN","XUMF0",35,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMF0",36,0)
 S IEN=$O(@ROOT@(XREF,NAME,0))
"RTN","XUMF0",37,0)
 ;
"RTN","XUMF0",38,0)
 I 'IEN D  Q:ERROR
"RTN","XUMF0",39,0)
 .D CHK^DIE(IFN,.01,,NAME,.X)
"RTN","XUMF0",40,0)
 .I X="^" S ERROR="1^Error - .01 is invalid"_" File #: "_IFN_" HLNODE="_HLNODE Q
"RTN","XUMF0",41,0)
 .K DIC S DIC=IFN,DIC(0)="F" D FILE^DICN K DIC
"RTN","XUMF0",42,0)
 .I Y="-1" S ERROR="1^Error - stub entry IFN: "_IFN_" failed HLNODE: "_HLNODE Q
"RTN","XUMF0",43,0)
 .S IEN=+Y
"RTN","XUMF0",44,0)
 ;
"RTN","XUMF0",45,0)
 S IENS=IEN_","
"RTN","XUMF0",46,0)
 ;
"RTN","XUMF0",47,0)
 ;I $L($P(MFE,U)),$P(MFE,U)'=99.99 Q
"RTN","XUMF0",48,0)
 S FDA(IFN,IENS,99.99)=VUID
"RTN","XUMF0",49,0)
 S FDA(IFN,IENS,99.98)=1
"RTN","XUMF0",50,0)
 ;
"RTN","XUMF0",51,0)
 K ERR
"RTN","XUMF0",52,0)
 ;
"RTN","XUMF0",53,0)
 D FILE^DIE("E","FDA","ERR")
"RTN","XUMF0",54,0)
 I $D(ERR) D
"RTN","XUMF0",55,0)
 .S ERROR="1^VUID update error IFN: "_IFN_" IEN: "_IEN_" VUID: "_VUID_" HLNODE: "_HLNODE
"RTN","XUMF0",56,0)
 .D EM^XUMF1H(ERROR,.ERR) K ERR
"RTN","XUMF0",57,0)
 ;
"RTN","XUMF0",58,0)
 D ADD^XUMF1H
"RTN","XUMF0",59,0)
 ;
"RTN","XUMF0",60,0)
 ; clean multiple flag
"RTN","XUMF0",61,0)
 K:'$D(XIEN(IEN)) XIEN
"RTN","XUMF0",62,0)
 S XIEN(IEN)=$G(XIEN(IEN))+1
"RTN","XUMF0",63,0)
 ;
"RTN","XUMF0",64,0)
 Q
"RTN","XUMF0",65,0)
 ;
"RTN","XUMF0",66,0)
VUID(FILE,FIELD,VUID1,X) ; -- If value type pointer and VUID may be used,
"RTN","XUMF0",67,0)
 ; get IEN and set it as internal value
"RTN","XUMF0",68,0)
 N X1
"RTN","XUMF0",69,0)
 Q:'$L(FILE)!'FIELD!'$L(VUID1) 0
"RTN","XUMF0",70,0)
 D FIELD^DID(FILE,FIELD,,"POINTER","X1")
"RTN","XUMF0",71,0)
 S X1=$G(X1("POINTER"))
"RTN","XUMF0",72,0)
 Q:'$L(X1) 0
"RTN","XUMF0",73,0)
 S X1=U_X1_"""AMASTERVUID"",X,1,0)"
"RTN","XUMF0",74,0)
 S X1=$O(@X1)
"RTN","XUMF0",75,0)
 Q +X1
"RTN","XUMF0",76,0)
 ;
"RTN","XUMF0",77,0)
VAL(FILE,FIELD,VUID1,VALUE,IENS) ; convert to internal
"RTN","XUMF0",78,0)
 ;
"RTN","XUMF0",79,0)
 N RESULT,ERR
"RTN","XUMF0",80,0)
 ;
"RTN","XUMF0",81,0)
 I $G(VALUE)="" Q "^"
"RTN","XUMF0",82,0)
 I $G(VALUE)="""""" Q ""
"RTN","XUMF0",83,0)
 ;
"RTN","XUMF0",84,0)
 I $L(VUID1) D  Q RESULT
"RTN","XUMF0",85,0)
 .S RESULT=$$VUID(FILE,FIELD,VUID,VALUE)
"RTN","XUMF0",86,0)
 .I 'RESULT S RESULT="^",ERROR="1^VUID lookup failed on "_VALUE
"RTN","XUMF0",87,0)
 ;
"RTN","XUMF0",88,0)
 D VAL^DIE(FILE,IENS,FIELD,,VALUE,.RESULT,,"ERR")
"RTN","XUMF0",89,0)
 I $D(ERR)!(RESULT="^") D
"RTN","XUMF0",90,0)
 .S ERROR="1^data validation error"
"RTN","XUMF0",91,0)
 .D EM^XUMF1H(ERROR,.ERR)
"RTN","XUMF0",92,0)
 ;
"RTN","XUMF0",93,0)
 Q RESULT
"RTN","XUMF0",94,0)
 ;
"RTN","XUMF0",95,0)
UNESC(VALUE,HL) ;Unescape value
"RTN","XUMF0",96,0)
 N RESULT,ESC,ESCFS,ESCCMP,ESCSUB,ESCREP,ESCESC,ESCSEQ,CVRT
"RTN","XUMF0",97,0)
 S ESC=$E(HL("ECH"),3)
"RTN","XUMF0",98,0)
 S ESCFS=ESC_"F"_ESC S CVRT(ESCFS)=HL("FS")
"RTN","XUMF0",99,0)
 S ESCCMP=ESC_"S"_ESC S CVRT(ESCCMP)=$E(HL("ECH"),1)
"RTN","XUMF0",100,0)
 S ESCREP=ESC_"R"_ESC S CVRT(ESCREP)=$E(HL("ECH"),2)
"RTN","XUMF0",101,0)
 S ESCESC=ESC_"E"_ESC S CVRT(ESCESC)=ESC
"RTN","XUMF0",102,0)
 S ESCSUB=ESC_"T"_ESC S CVRT(ESCSUB)=$E(HL("ECH"),4)
"RTN","XUMF0",103,0)
 F ESCSEQ=ESCFS,ESCCMP,ESCSUB,ESCREP,ESCESC D
"RTN","XUMF0",104,0)
 .F  Q:VALUE'[ESCSEQ  D
"RTN","XUMF0",105,0)
 ..S VALUE=$P(VALUE,ESCSEQ,1)_CVRT(ESCSEQ)_$P(VALUE,ESCSEQ,2,9999)
"RTN","XUMF0",106,0)
 Q VALUE
"RTN","XUMF0",107,0)
 ;
"RTN","XUMF0",108,0)
UNESCWP(TEXT,HL) ;Unescape word processing field
"RTN","XUMF0",109,0)
 N ESC,NODE,NXTNODE,BNDBEG,BNDEND,CHECK,SPOT
"RTN","XUMF0",110,0)
 S ESC=$E(HL("ECH"),3)
"RTN","XUMF0",111,0)
 S NODE=0
"RTN","XUMF0",112,0)
 F  S NODE=+$O(TEXT(NODE)) Q:'NODE  D
"RTN","XUMF0",113,0)
 .S TEXT(NODE)=$$UNESC(TEXT(NODE),.HL)
"RTN","XUMF0",114,0)
 .S BNDBEG=$E(TEXT(NODE),$L(TEXT(NODE))-1,$L(TEXT(NODE)))
"RTN","XUMF0",115,0)
 .I BNDBEG[ESC D
"RTN","XUMF0",116,0)
 ..S NXTNODE=$O(TEXT(NODE)) Q:'NXTNODE
"RTN","XUMF0",117,0)
 ..S BNDEND=$E(TEXT(NXTNODE),1,2)
"RTN","XUMF0",118,0)
 ..Q:(BNDEND'[ESC)
"RTN","XUMF0",119,0)
 ..S CHECK=$$UNESC(BNDBEG_BNDEND,.HL)
"RTN","XUMF0",120,0)
 ..Q:($L(CHECK)=4)
"RTN","XUMF0",121,0)
 ..I $E(BNDBEG,1)=ESC D  Q
"RTN","XUMF0",122,0)
 ...S TEXT(NODE)=$E(TEXT(NODE),1,$L(TEXT(NODE))-2)_$E(CHECK,1)
"RTN","XUMF0",123,0)
 ...S TEXT(NXTNODE)=$E(CHECK,2)_$E(TEXT(NXTNODE),3,$L(TEXT(NXTNODE)))
"RTN","XUMF0",124,0)
 ..S TEXT(NODE)=$E(TEXT(NODE),1,$L(TEXT(NODE))-2)_CHECK
"RTN","XUMF0",125,0)
 ..S TEXT(NXTNODE)=$E(TEXT(NXTNODE),3,$L(TEXT(NXTNODE)))
"RTN","XUMF0",126,0)
 Q
"RTN","XUMF0",127,0)
 ;
"RTN","XUMF0",128,0)
EM ; -- error message
"RTN","XUMF0",129,0)
 ;
"RTN","XUMF0",130,0)
 N X,XMTEXT,XMDUZ,GROUP,XMSUB,XMY
"RTN","XUMF0",131,0)
 ;
"RTN","XUMF0",132,0)
 D MSG^DIALOG("AM",.X,80,,"ERR")
"RTN","XUMF0",133,0)
 ;
"RTN","XUMF0",134,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID"))
"RTN","XUMF0",135,0)
 S X(.11)="",X(.12)="This message was generated by the NTRT process and MFS.  No action is required on your part."
"RTN","XUMF0",136,0)
 S X(.13)="This message is informational and may be used in some instances as a troubleshooting tool."
"RTN","XUMF0",137,0)
 S X(.2)="",X(.3)=$G(ERROR)
"RTN","XUMF0",138,0)
 S X(.4)="",X(.5)="VUID: "_$G(VUID),X(.6)=""
"RTN","XUMF0",139,0)
 S:$G(XMSUB)="" XMSUB="MFS ERROR/WARNING/INFO"
"RTN","XUMF0",140,0)
 S XMY("G.XUMF ERROR")="",XMDUZ=.5
"RTN","XUMF0",141,0)
 S GROUP=$P($G(^DIC(4.001,+IFN,0)),U,6)
"RTN","XUMF0",142,0)
 I GROUP'="" S GROUP="G."_GROUP,XMY(GROUP)=""
"RTN","XUMF0",143,0)
 S XMTEXT="X("
"RTN","XUMF0",144,0)
 ;
"RTN","XUMF0",145,0)
 M X=^TMP("XUMF ERROR",$J)
"RTN","XUMF0",146,0)
 ;
"RTN","XUMF0",147,0)
 D ^XMD
"RTN","XUMF0",148,0)
 ;
"RTN","XUMF0",149,0)
 Q
"RTN","XUMF0",150,0)
 ;
"RTN","XUMF1H")
0^7^B101437978^n/a
"RTN","XUMF1H",1,0)
XUMF1H ;ISS/RAM - MFS Handler ;6/27/06  07:50
"RTN","XUMF1H",2,0)
 ;;8.0;KERNEL;**407**;Jul 10, 1995;Build 8
"RTN","XUMF1H",3,0)
 ;
"RTN","XUMF1H",4,0)
 ; This routine handles Master File HL7 messages.
"RTN","XUMF1H",5,0)
 ;
"RTN","XUMF1H",6,0)
MAIN ; -- entry point
"RTN","XUMF1H",7,0)
 ;
"RTN","XUMF1H",8,0)
 N CNT,ERR,I,X,HLFS,HLCS,ERROR,HLRESLTA,IFN,IEN,MTPE,TYPE,ARRAY
"RTN","XUMF1H",9,0)
 N HDT,KEY,MID,REASON,VALUE,XREF,ALL,GROUP,PARAM,ROOT,SEG,QRD,XUMF
"RTN","XUMF1H",10,0)
 N QID,WHAT,WHO,HLSCS,CDSYS,EXIT,HLREP,NUMBER,Y,XXX,YYY,XIEN
"RTN","XUMF1H",11,0)
 N XUMFSDS,FDA,LIST,ERRCNT,PKV,MKEY,MKEY1,TYP,MFI,IMPLY
"RTN","XUMF1H",12,0)
 ;
"RTN","XUMF1H",13,0)
 D INIT,PROCESS,REPLY,EXIT
"RTN","XUMF1H",14,0)
 ;
"RTN","XUMF1H",15,0)
 Q
"RTN","XUMF1H",16,0)
 ;
"RTN","XUMF1H",17,0)
INIT ; -- initialize
"RTN","XUMF1H",18,0)
 ;
"RTN","XUMF1H",19,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","XUMF1H",20,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMF1H",21,0)
 K ^TMP("XUMF MFS",$J),^TMP("XUMF ERROR",$J)
"RTN","XUMF1H",22,0)
 ;
"RTN","XUMF1H",23,0)
 S XUMF=1,DUZ(0)="@"
"RTN","XUMF1H",24,0)
 ;
"RTN","XUMF1H",25,0)
 S (ERROR,CNT,TYPE,ARRAY,EXIT,ERRCNT)=0
"RTN","XUMF1H",26,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH"))
"RTN","XUMF1H",27,0)
 S HLSCS=$E(HL("ECH"),4),HLREP=$E(HL("ECH"),2)
"RTN","XUMF1H",28,0)
 ;
"RTN","XUMF1H",29,0)
 Q
"RTN","XUMF1H",30,0)
 ;
"RTN","XUMF1H",31,0)
PROCESS ; -- pull message text
"RTN","XUMF1H",32,0)
 ;
"RTN","XUMF1H",33,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMF1H",34,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMF1H",35,0)
 .Q:"^MSH^MSA^QRD^MFI^MFE^ZRT^"'[(U_$P(HLNODE,HLFS)_U)
"RTN","XUMF1H",36,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMF1H",37,0)
 I $D(LIST) D LIST
"RTN","XUMF1H",38,0)
 I $D(FDA) D UPDATE
"RTN","XUMF1H",39,0)
 I $D(IFN) D POST
"RTN","XUMF1H",40,0)
 ;
"RTN","XUMF1H",41,0)
 Q
"RTN","XUMF1H",42,0)
 ;
"RTN","XUMF1H",43,0)
MSH ; -- MSH segment
"RTN","XUMF1H",44,0)
 ;
"RTN","XUMF1H",45,0)
 Q
"RTN","XUMF1H",46,0)
 ;
"RTN","XUMF1H",47,0)
MSA ; -- MSA segment
"RTN","XUMF1H",48,0)
 ;
"RTN","XUMF1H",49,0)
 N CODE
"RTN","XUMF1H",50,0)
 ;
"RTN","XUMF1H",51,0)
 S CODE=$P(HLNODE,HLFS,2)
"RTN","XUMF1H",52,0)
 ;
"RTN","XUMF1H",53,0)
 I CODE="AE"!(CODE="AR") D
"RTN","XUMF1H",54,0)
 .S ERROR=ERROR_U_$P(HLNODE,HLFS,4)_U_$G(ERR)
"RTN","XUMF1H",55,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMF1H",56,0)
 ;
"RTN","XUMF1H",57,0)
 Q
"RTN","XUMF1H",58,0)
 ;
"RTN","XUMF1H",59,0)
MFI ; -- MFI segment
"RTN","XUMF1H",60,0)
 ;
"RTN","XUMF1H",61,0)
 Q:ERROR
"RTN","XUMF1H",62,0)
 Q:EXIT
"RTN","XUMF1H",63,0)
 ;
"RTN","XUMF1H",64,0)
 Q
"RTN","XUMF1H",65,0)
 ;
"RTN","XUMF1H",66,0)
MFE ; -- MFE SEGMENT
"RTN","XUMF1H",67,0)
 ;
"RTN","XUMF1H",68,0)
 Q:ERROR
"RTN","XUMF1H",69,0)
 Q:EXIT
"RTN","XUMF1H",70,0)
 ;
"RTN","XUMF1H",71,0)
 S PKV=$P(HLNODE,HLFS,5),MFI=$P(PKV,"@")
"RTN","XUMF1H",72,0)
 ;
"RTN","XUMF1H",73,0)
 I $D(LIST) D LIST K LIST,LISTVUID
"RTN","XUMF1H",74,0)
 I $D(FDA) D UPDATE K FDA
"RTN","XUMF1H",75,0)
 I $D(IFN),(IFN'=$O(^DIC(4.001,"MFID",MFI,0))) D POST
"RTN","XUMF1H",76,0)
 ;
"RTN","XUMF1H",77,0)
 K IFN,IEN,PRE,POST,VUID,IMPLY
"RTN","XUMF1H",78,0)
 K ^TMP("XUMF IMPLIED LOGIC",$J)
"RTN","XUMF1H",79,0)
 ;
"RTN","XUMF1H",80,0)
 I MFI="" S ERROR="1^MFI not resolved HLNODE: "_HLNODE Q
"RTN","XUMF1H",81,0)
 S IFN=$O(^DIC(4.001,"MFID",MFI,0))
"RTN","XUMF1H",82,0)
 I 'IFN S ERROR="1^IFN not resolved HLNODE: "_HLNODE Q
"RTN","XUMF1H",83,0)
 ;
"RTN","XUMF1H",84,0)
 S VUID=$P($P(PKV,"@",2),HLCS)
"RTN","XUMF1H",85,0)
 ;
"RTN","XUMF1H",86,0)
 Q:ARRAY
"RTN","XUMF1H",87,0)
 ;
"RTN","XUMF1H",88,0)
 D MFE^XUMF0(IFN,VUID,.IEN,.ERROR) Q:ERROR
"RTN","XUMF1H",89,0)
 ;
"RTN","XUMF1H",90,0)
 D MFE0
"RTN","XUMF1H",91,0)
 ;
"RTN","XUMF1H",92,0)
 ;Implied logic flag - must be set by MFE-Processing Logic field (#4)
"RTN","XUMF1H",93,0)
 S IMPLY=+$G(^TMP("XUMF IMPLIED LOGIC",$J))
"RTN","XUMF1H",94,0)
 S IMPLY("KILL")=0
"RTN","XUMF1H",95,0)
 K ^TMP("XUMF IMPLIED LOGIC",$J)
"RTN","XUMF1H",96,0)
 ;
"RTN","XUMF1H",97,0)
 I IEN D
"RTN","XUMF1H",98,0)
 .; clean multiple flag
"RTN","XUMF1H",99,0)
 .K:'$D(XIEN(IFN,IEN)) XIEN
"RTN","XUMF1H",100,0)
 .S XIEN(IFN,IEN)=$G(XIEN(IFN,IEN))+1
"RTN","XUMF1H",101,0)
 ;
"RTN","XUMF1H",102,0)
 Q
"RTN","XUMF1H",103,0)
 ;
"RTN","XUMF1H",104,0)
ZRT ; -- data segments
"RTN","XUMF1H",105,0)
 ;
"RTN","XUMF1H",106,0)
 Q:ERROR
"RTN","XUMF1H",107,0)
 Q:EXIT
"RTN","XUMF1H",108,0)
 ;
"RTN","XUMF1H",109,0)
 I $G(ARRAY) D ARRAY Q
"RTN","XUMF1H",110,0)
 ;
"RTN","XUMF1H",111,0)
 N COL,X,Y,Z,DTYP,IDX,SEQ,DATA,NAME,VUID1,LIST1
"RTN","XUMF1H",112,0)
 N FIELD,SUBFILE,LKUP,REPEAT,CLEAN,TIMEZONE,WP
"RTN","XUMF1H",113,0)
 ;
"RTN","XUMF1H",114,0)
 S NAME=$P(HLNODE,HLFS,2)
"RTN","XUMF1H",115,0)
 ;
"RTN","XUMF1H",116,0)
 I 'IEN,NAME="Term" D STUB^XUMF0 Q
"RTN","XUMF1H",117,0)
 I 'IEN S ERROR="1^IEN not defined IFN: "_IFN_" VUID: "_VUID Q
"RTN","XUMF1H",118,0)
 ;
"RTN","XUMF1H",119,0)
 D ZRT0 Q:ERROR
"RTN","XUMF1H",120,0)
 ;
"RTN","XUMF1H",121,0)
 S IENS=IEN_","
"RTN","XUMF1H",122,0)
 ;
"RTN","XUMF1H",123,0)
 S IDX=$O(^DIC(4.001,+IFN,1,"B",NAME,0))
"RTN","XUMF1H",124,0)
 I 'IDX S ERROR="1^parameter "_NAME_" not defined IFN: "_IFN Q
"RTN","XUMF1H",125,0)
 S DATA=$G(^DIC(4.001,+IFN,1,+IDX,0))
"RTN","XUMF1H",126,0)
 S TYP=$P(DATA,U,3),TYP=$$GET1^DIQ(771.4,(+TYP_","),.01)
"RTN","XUMF1H",127,0)
 S FIELD=$P(DATA,U,2),SUBFILE=$P(DATA,U,4),MKEY=$P(DATA,U,6)
"RTN","XUMF1H",128,0)
 S LKUP=$P(DATA,U,7),TIMEZONE=$P(DATA,U,14),LIST1=$P(DATA,U,8)
"RTN","XUMF1H",129,0)
 S REPEAT=$P(DATA,U,11),CLEAN=$P(DATA,U,12),VUID1=$P(DATA,U,13)
"RTN","XUMF1H",130,0)
 S WP=$P(DATA,U,16)
"RTN","XUMF1H",131,0)
 ;
"RTN","XUMF1H",132,0)
 I WP D WP Q
"RTN","XUMF1H",133,0)
 ;
"RTN","XUMF1H",134,0)
 S VALUE=$$UNESC^XUMF0($P(HLNODE,HLFS,3),.HL)
"RTN","XUMF1H",135,0)
 S VALUE=$$DTYP^XUMFXP(VALUE,TYP,HLCS,0,TIMEZONE)
"RTN","XUMF1H",136,0)
 ;
"RTN","XUMF1H",137,0)
 I NAME="Status" D STATUS Q
"RTN","XUMF1H",138,0)
 ;
"RTN","XUMF1H",139,0)
 I 'SUBFILE D  Q
"RTN","XUMF1H",140,0)
 .S VALUE=$$VAL^XUMF0(IFN,FIELD,VUID1,VALUE,IENS) Q:VALUE="^"
"RTN","XUMF1H",141,0)
 .S FDA(IFN,IENS,FIELD)=VALUE
"RTN","XUMF1H",142,0)
 ;
"RTN","XUMF1H",143,0)
 N IENS1
"RTN","XUMF1H",144,0)
 ;
"RTN","XUMF1H",145,0)
 I LIST1 D  Q
"RTN","XUMF1H",146,0)
 .S VALUE=$$VAL^XUMF0(SUBFILE,FIELD,VUID1,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMF1H",147,0)
 .I MKEY=NAME S ZKEY=VALUE ;S:VUID1'="" LISTVUID(SUBFILE)=1
"RTN","XUMF1H",148,0)
 .I '$D(ZKEY) S ERROR="1^ZKEY error "_SUBFILE_" VUID: "_VUID Q
"RTN","XUMF1H",149,0)
 .I ((ZKEY="")!(ZKEY=$C(34,34))) S LIST(SUBFILE)="" Q
"RTN","XUMF1H",150,0)
 .S LIST(SUBFILE,ZKEY,FIELD)=VALUE
"RTN","XUMF1H",151,0)
 .I IMPLY D IMPLY
"RTN","XUMF1H",152,0)
 ;
"RTN","XUMF1H",153,0)
 I CLEAN,$G(XIEN(IFN,IEN))'>1 D
"RTN","XUMF1H",154,0)
 .N ROOT,IDX
"RTN","XUMF1H",155,0)
 .S ROOT=$$ROOT^DILFD(SUBFILE,","_IENS,1)
"RTN","XUMF1H",156,0)
 .S IDX=0 F  S IDX=$O(@ROOT@(IDX)) Q:'IDX  D
"RTN","XUMF1H",157,0)
 ..D
"RTN","XUMF1H",158,0)
 ...N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMF1H",159,0)
 ;
"RTN","XUMF1H",160,0)
 I MKEY=NAME Q:VALUE=""  D
"RTN","XUMF1H",161,0)
 .N FDA,IEN
"RTN","XUMF1H",162,0)
 .
"RTN","XUMF1H",163,0)
 .S VALUE=$$VAL^XUMF0(SUBFILE,FIELD,VUID1,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMF1H",164,0)
 .S FDA(SUBFILE,"?+1,"_IENS,.01)=VALUE
"RTN","XUMF1H",165,0)
 .D UPDATE^DIE(,"FDA","IEN","ERR")
"RTN","XUMF1H",166,0)
 .I $D(ERR) D  Q
"RTN","XUMF1H",167,0)
 ..S ERROR="1^subfile update error SUBFILE#: "_SUBFILE
"RTN","XUMF1H",168,0)
 ..D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",169,0)
 .S IENS1=IEN(1)_","_IENS,MKEY(NAME)=IENS1
"RTN","XUMF1H",170,0)
 ;
"RTN","XUMF1H",171,0)
 I MKEY'="",MKEY'=NAME S IENS1=$G(MKEY(MKEY)) Q:IENS1=""
"RTN","XUMF1H",172,0)
 S:MKEY'=NAME VALUE=$$VAL^XUMF0(SUBFILE,FIELD,VUID1,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMF1H",173,0)
 S:$D(IENS1) FDA(SUBFILE,IENS1,FIELD)=VALUE
"RTN","XUMF1H",174,0)
 I IMPLY D IMPLY
"RTN","XUMF1H",175,0)
 ;
"RTN","XUMF1H",176,0)
 Q
"RTN","XUMF1H",177,0)
 ;
"RTN","XUMF1H",178,0)
IMPLY ; -- Implied value logic
"RTN","XUMF1H",179,0)
 N PREV,ARR
"RTN","XUMF1H",180,0)
 S ARR=$S(LIST1:"LIST",1:"FDA")
"RTN","XUMF1H",181,0)
 S PREV=$S(LIST1:ZKEY,1:IENS1)
"RTN","XUMF1H",182,0)
 I MKEY=NAME D  Q
"RTN","XUMF1H",183,0)
 .I IMPLY("KILL") K IMPLY("PREV") S IMPLY("KILL")=0
"RTN","XUMF1H",184,0)
 .S IMPLY("PREV",PREV)=""
"RTN","XUMF1H",185,0)
 S PREV="" F  S PREV=$O(IMPLY("PREV",PREV)) Q:PREV=""  D
"RTN","XUMF1H",186,0)
 .S @ARR@(SUBFILE,PREV,FIELD)=VALUE
"RTN","XUMF1H",187,0)
 S IMPLY("KILL")=1
"RTN","XUMF1H",188,0)
 Q
"RTN","XUMF1H",189,0)
 ;
"RTN","XUMF1H",190,0)
LIST ; -- process list
"RTN","XUMF1H",191,0)
 ;
"RTN","XUMF1H",192,0)
 N SUBFILE,ZKEY,FIELD,VALUE,IENS,CNT
"RTN","XUMF1H",193,0)
 ;
"RTN","XUMF1H",194,0)
 S IENS=IEN_","
"RTN","XUMF1H",195,0)
 ;
"RTN","XUMF1H",196,0)
 ;remove non-standard sub-records (not in message)
"RTN","XUMF1H",197,0)
 S SUBFILE=0
"RTN","XUMF1H",198,0)
 F  S SUBFILE=$O(LIST(SUBFILE)) Q:'SUBFILE  D
"RTN","XUMF1H",199,0)
 .N ROOT,IDX
"RTN","XUMF1H",200,0)
 .S ROOT=$$ROOT^DILFD(SUBFILE,","_IENS,1)
"RTN","XUMF1H",201,0)
 .S IDX=0 F  S IDX=$O(@ROOT@(IDX)) Q:'IDX  D
"RTN","XUMF1H",202,0)
 ..S VALUE=$$GET1^DIQ(SUBFILE,IDX_","_IENS,.01,"I")
"RTN","XUMF1H",203,0)
 ..I '$D(LIST(SUBFILE,VALUE)) D
"RTN","XUMF1H",204,0)
 ...N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMF1H",205,0)
 ;
"RTN","XUMF1H",206,0)
 ;update sub-records
"RTN","XUMF1H",207,0)
 S SUBFILE=0
"RTN","XUMF1H",208,0)
 F  S SUBFILE=$O(LIST(SUBFILE)) Q:'SUBFILE  D
"RTN","XUMF1H",209,0)
 .S ZKEY="",CNT=0
"RTN","XUMF1H",210,0)
 .F  S ZKEY=$O(LIST(SUBFILE,ZKEY)) Q:ZKEY=""  D
"RTN","XUMF1H",211,0)
 ..N IDX,ROOT
"RTN","XUMF1H",212,0)
 ..S ROOT=$$ROOT^DILFD(SUBFILE,","_IENS,1)
"RTN","XUMF1H",213,0)
 ..S IDX=$O(@ROOT@("B",ZKEY,0))
"RTN","XUMF1H",214,0)
 ..I $O(@ROOT@("B",ZKEY,IDX)) D DELLIST(IDX)
"RTN","XUMF1H",215,0)
 ..I 'IDX D ADDLIST Q
"RTN","XUMF1H",216,0)
 ..S FIELD=0
"RTN","XUMF1H",217,0)
 ..F  S FIELD=$O(LIST(SUBFILE,ZKEY,FIELD)) Q:'FIELD  D
"RTN","XUMF1H",218,0)
 ...N X S X=$$GET1^DIQ(SUBFILE,IDX_","_IENS,FIELD)
"RTN","XUMF1H",219,0)
 ...S VALUE=LIST(SUBFILE,ZKEY,FIELD)
"RTN","XUMF1H",220,0)
 ...Q:VALUE=X  Q:(VALUE=""""&X="")
"RTN","XUMF1H",221,0)
 ...S FDA(SUBFILE,IDX_","_IENS,FIELD)=VALUE
"RTN","XUMF1H",222,0)
 ;
"RTN","XUMF1H",223,0)
 Q
"RTN","XUMF1H",224,0)
 ;
"RTN","XUMF1H",225,0)
ADDLIST ; -- add new sub-record
"RTN","XUMF1H",226,0)
 ;
"RTN","XUMF1H",227,0)
 N FDA
"RTN","XUMF1H",228,0)
 ;
"RTN","XUMF1H",229,0)
 S CNT=$G(CNT)+1
"RTN","XUMF1H",230,0)
 S FIELD=0
"RTN","XUMF1H",231,0)
 F  S FIELD=$O(LIST(SUBFILE,ZKEY,FIELD)) Q:'FIELD  D
"RTN","XUMF1H",232,0)
 .S VALUE=LIST(SUBFILE,ZKEY,FIELD) Q:VALUE=""
"RTN","XUMF1H",233,0)
 .S FDA(SUBFILE,"+"_CNT_","_IENS,FIELD)=VALUE
"RTN","XUMF1H",234,0)
 ;
"RTN","XUMF1H",235,0)
 Q:'$D(FDA)
"RTN","XUMF1H",236,0)
 ;
"RTN","XUMF1H",237,0)
 D UPDATE^DIE(,"FDA",,"ERR")
"RTN","XUMF1H",238,0)
 I $D(ERR) D  Q
"RTN","XUMF1H",239,0)
 .S ERROR="1^subfile update error SUBFILE#: "_SUBFILE
"RTN","XUMF1H",240,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",241,0)
 ;
"RTN","XUMF1H",242,0)
 Q
"RTN","XUMF1H",243,0)
 ;
"RTN","XUMF1H",244,0)
DELLIST(IDX) ; -- delete duplicate
"RTN","XUMF1H",245,0)
 ;
"RTN","XUMF1H",246,0)
 F  S IDX=$O(@ROOT@("B",ZKEY,IDX)) Q:'IDX  D
"RTN","XUMF1H",247,0)
 .N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMF1H",248,0)
 ;
"RTN","XUMF1H",249,0)
 Q
"RTN","XUMF1H",250,0)
 ;
"RTN","XUMF1H",251,0)
UPDATE ; -- FileMan update
"RTN","XUMF1H",252,0)
 ;
"RTN","XUMF1H",253,0)
 Q:ERROR
"RTN","XUMF1H",254,0)
 Q:EXIT
"RTN","XUMF1H",255,0)
 ;
"RTN","XUMF1H",256,0)
 D:$D(FDA) FILE^DIE(,"FDA","ERR")
"RTN","XUMF1H",257,0)
 I $D(ERR) D
"RTN","XUMF1H",258,0)
 .S ERROR="1^updating error"
"RTN","XUMF1H",259,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",260,0)
 ;
"RTN","XUMF1H",261,0)
 Q
"RTN","XUMF1H",262,0)
 ;
"RTN","XUMF1H",263,0)
ARRAY ; -- query data stored in array (not filed)
"RTN","XUMF1H",264,0)
 ;
"RTN","XUMF1H",265,0)
 S ^TMP("XUMF ARRAY",$J,IFN,VUID,$P(HLNODE,HLFS,2))=$P(HLNODE,HLFS,3)
"RTN","XUMF1H",266,0)
 ;
"RTN","XUMF1H",267,0)
 Q
"RTN","XUMF1H",268,0)
 ;
"RTN","XUMF1H",269,0)
ADD ; -- ADD-processing logic
"RTN","XUMF1H",270,0)
 ;
"RTN","XUMF1H",271,0)
 N X
"RTN","XUMF1H",272,0)
 ;
"RTN","XUMF1H",273,0)
 S X=$G(^DIC(4.001,+IFN,3)) X:X'="" X
"RTN","XUMF1H",274,0)
 ;
"RTN","XUMF1H",275,0)
 Q
"RTN","XUMF1H",276,0)
 ;
"RTN","XUMF1H",277,0)
MFE0 ; -- MFE-processing logic
"RTN","XUMF1H",278,0)
 ;
"RTN","XUMF1H",279,0)
 N X
"RTN","XUMF1H",280,0)
 ;
"RTN","XUMF1H",281,0)
 S X=$G(^DIC(4.001,+IFN,4)) X:X'="" X
"RTN","XUMF1H",282,0)
 ;
"RTN","XUMF1H",283,0)
 Q
"RTN","XUMF1H",284,0)
 ;
"RTN","XUMF1H",285,0)
ZRT0 ; -- ZRT-processing logic
"RTN","XUMF1H",286,0)
 ;
"RTN","XUMF1H",287,0)
 N X
"RTN","XUMF1H",288,0)
 ;
"RTN","XUMF1H",289,0)
 S X=$G(^DIC(4.001,+IFN,5)) X:X'="" X
"RTN","XUMF1H",290,0)
 ;
"RTN","XUMF1H",291,0)
 Q
"RTN","XUMF1H",292,0)
 ;
"RTN","XUMF1H",293,0)
POST ; -- post-processing logic
"RTN","XUMF1H",294,0)
 ;
"RTN","XUMF1H",295,0)
 N X
"RTN","XUMF1H",296,0)
 ;
"RTN","XUMF1H",297,0)
 S X=$G(^DIC(4.001,+IFN,2)) X:X'="" X
"RTN","XUMF1H",298,0)
 ;
"RTN","XUMF1H",299,0)
 Q
"RTN","XUMF1H",300,0)
 ;
"RTN","XUMF1H",301,0)
EXIT ; -- cleanup, and quit
"RTN","XUMF1H",302,0)
 ;
"RTN","XUMF1H",303,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J),^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMF1H",304,0)
 ;
"RTN","XUMF1H",305,0)
 K ^TMP("XUMF MFS",$J),^TMP("XUMF ERROR",$J)
"RTN","XUMF1H",306,0)
 ;
"RTN","XUMF1H",307,0)
 Q
"RTN","XUMF1H",308,0)
 ;
"RTN","XUMF1H",309,0)
REPLY ; -- MFK
"RTN","XUMF1H",310,0)
 ;
"RTN","XUMF1H",311,0)
 N X,I,I1,I2,CNT
"RTN","XUMF1H",312,0)
 ;
"RTN","XUMF1H",313,0)
 S CNT=1
"RTN","XUMF1H",314,0)
 S X="MSA"_HLFS_$S(ERROR:"AE",1:"AA")_HLFS_HL("MID")_HLFS_$P(ERROR,U,2)
"RTN","XUMF1H",315,0)
 S ^TMP("HLA",$J,CNT)=X
"RTN","XUMF1H",316,0)
 S CNT=CNT+1
"RTN","XUMF1H",317,0)
 ;
"RTN","XUMF1H",318,0)
 S I1="",I=0
"RTN","XUMF1H",319,0)
 F  S I1=$O(^TMP("XUMF ERROR",$J,I1)) Q:'$L(I1)  D
"RTN","XUMF1H",320,0)
 .S I2="" F  S I2=$O(^TMP("XUMF ERROR",$J,I1,I2)) Q:'$L(I2)  D
"RTN","XUMF1H",321,0)
 ..S X=$G(^(I2))
"RTN","XUMF1H",322,0)
 ..Q:'$L(X)
"RTN","XUMF1H",323,0)
 ..S I=I+1
"RTN","XUMF1H",324,0)
 ..S X="ERR"_HLFS_I_HLFS_$S($O(^TMP("XUMF ERROR",$J,I1))!$O(^TMP("XUMF ERROR",$J,I1,I2)):1,1:0)_HLFS_X
"RTN","XUMF1H",325,0)
 ..S ^TMP("HLA",$J,CNT)=X
"RTN","XUMF1H",326,0)
 ..S CNT=CNT+1
"RTN","XUMF1H",327,0)
 ;
"RTN","XUMF1H",328,0)
 D:ERROR EM^XUMF0
"RTN","XUMF1H",329,0)
 ;
"RTN","XUMF1H",330,0)
 D GENACK^HLMA1($G(HL("EID")),$G(HLMTIENS),$G(HL("EIDS")),"GM",1,.HLRESLT)
"RTN","XUMF1H",331,0)
 ;
"RTN","XUMF1H",332,0)
 ; check for error
"RTN","XUMF1H",333,0)
 ;I ($P($G(HLRESLT),U,3)'="") D  Q
"RTN","XUMF1H",334,0)
 ;.S ERROR=1_U_$P(HLRESLT,HLFS,3)_U_$P(HLRESLT,HLFS,2)_U_$P(HLRESLT,U)
"RTN","XUMF1H",335,0)
 ;
"RTN","XUMF1H",336,0)
 ; successful call, message ID returned
"RTN","XUMF1H",337,0)
 ;S ERROR="0^"_$P($G(HLRESLT),U,1)
"RTN","XUMF1H",338,0)
 ;
"RTN","XUMF1H",339,0)
 Q
"RTN","XUMF1H",340,0)
 ;
"RTN","XUMF1H",341,0)
EM(ERROR,ERR) ; -- error message
"RTN","XUMF1H",342,0)
 ;
"RTN","XUMF1H",343,0)
 N X,I,Y
"RTN","XUMF1H",344,0)
 ;
"RTN","XUMF1H",345,0)
 D MSG^DIALOG("AM",.X,80,,"ERR")
"RTN","XUMF1H",346,0)
 ;
"RTN","XUMF1H",347,0)
 S ERRCNT=ERRCNT+1
"RTN","XUMF1H",348,0)
 ;
"RTN","XUMF1H",349,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".01")=""
"RTN","XUMF1H",350,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".02")=""
"RTN","XUMF1H",351,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".03")=$G(ERROR)
"RTN","XUMF1H",352,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".04")=""
"RTN","XUMF1H",353,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".05")="VUID: "_$G(VUID)_"   IFN: "_$G(IFN)_"   IEN: "_IEN
"RTN","XUMF1H",354,0)
 S ^TMP("XUMF ERROR",$J,ERRCNT_".06")=""
"RTN","XUMF1H",355,0)
 S X=.9 F  S X=$O(X(X)) Q:'X  D
"RTN","XUMF1H",356,0)
 .S ^TMP("XUMF ERROR",$J,ERRCNT_"."_X)=X(X)
"RTN","XUMF1H",357,0)
 ;
"RTN","XUMF1H",358,0)
 Q
"RTN","XUMF1H",359,0)
 ;
"RTN","XUMF1H",360,0)
STATUS ;
"RTN","XUMF1H",361,0)
 ;
"RTN","XUMF1H",362,0)
 I VALUE=$P($$GETSTAT^XTID(IFN,,IEN_","),U) Q
"RTN","XUMF1H",363,0)
 ;
"RTN","XUMF1H",364,0)
 I SUBFILE="" S ERROR="1^status parameter error" Q
"RTN","XUMF1H",365,0)
 ;
"RTN","XUMF1H",366,0)
 N FDA
"RTN","XUMF1H",367,0)
 S FDA(SUBFILE,"?+1,"_IENS,.01)=$$NOW^XLFDT
"RTN","XUMF1H",368,0)
 S FDA(SUBFILE,"?+1,"_IENS,.02)=VALUE
"RTN","XUMF1H",369,0)
 D UPDATE^DIE(,"FDA",,"ERR")
"RTN","XUMF1H",370,0)
 I $D(ERR) D
"RTN","XUMF1H",371,0)
 .S ERROR="1^effective date and status error"
"RTN","XUMF1H",372,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",373,0)
 ;
"RTN","XUMF1H",374,0)
 Q
"RTN","XUMF1H",375,0)
 ;
"RTN","XUMF1H",376,0)
WP ;
"RTN","XUMF1H",377,0)
 ;
"RTN","XUMF1H",378,0)
 N X,Y,A,I,CNT,X1,X2,ESC
"RTN","XUMF1H",379,0)
 D SEGPRSE^XUMFXHL7("HLNODE","X",HLFS,60)
"RTN","XUMF1H",380,0)
 ;
"RTN","XUMF1H",381,0)
 S CNT=1
"RTN","XUMF1H",382,0)
 S A(CNT)=X(2)
"RTN","XUMF1H",383,0)
 S I=0
"RTN","XUMF1H",384,0)
 F  S I=$O(X(2,I)) Q:'I  D
"RTN","XUMF1H",385,0)
 .S Y=X(2,I)
"RTN","XUMF1H",386,0)
 .I $E(Y,1)=" " D  Q
"RTN","XUMF1H",387,0)
 ..S A(CNT)=A(CNT)_" "
"RTN","XUMF1H",388,0)
 ..Q:$P(Y," ",2)=""
"RTN","XUMF1H",389,0)
 ..S CNT=CNT+1
"RTN","XUMF1H",390,0)
 ..S A(CNT)=$P(Y," ",2,99)
"RTN","XUMF1H",391,0)
 .S X1=$P(Y," ",1)
"RTN","XUMF1H",392,0)
 .S X2=$P(Y," ",2,99)
"RTN","XUMF1H",393,0)
 .S A(CNT)=A(CNT)_X1_$S(X2="":"",1:" ")
"RTN","XUMF1H",394,0)
 .Q:X2=""
"RTN","XUMF1H",395,0)
 .S CNT=CNT+1
"RTN","XUMF1H",396,0)
 .S A(CNT)=X2
"RTN","XUMF1H",397,0)
 ;
"RTN","XUMF1H",398,0)
 D UNESCWP^XUMF0(.A,.HL)
"RTN","XUMF1H",399,0)
 ;
"RTN","XUMF1H",400,0)
 D WP^DIE(IFN,IENS,FIELD,"K","A","ERR")
"RTN","XUMF1H",401,0)
 ;
"RTN","XUMF1H",402,0)
 I $D(ERR) D
"RTN","XUMF1H",403,0)
 .S ERROR="1^wp field error"
"RTN","XUMF1H",404,0)
 .D EM(ERROR,.ERR) K ERR
"RTN","XUMF1H",405,0)
 ;
"RTN","XUMF1H",406,0)
 Q
"RTN","XUMF1H",407,0)
 ;
"RTN","XUMF5I")
0^5^B74082492^B83618831
"RTN","XUMF5I",1,0)
XUMF5I ;ISS/PAVEL - XUMF5 MD5 Hash Entry point ;5/19/06  06:15
"RTN","XUMF5I",2,0)
 ;;8.0;KERNEL;**383,407**;July 10, 1995;Build 8
"RTN","XUMF5I",3,0)
 ;
"RTN","XUMF5I",4,0)
 ;MD5 based on info from 4.005 SORT BY VUID
"RTN","XUMF5I",5,0)
 ;
"RTN","XUMF5I",6,0)
 Q
"RTN","XUMF5I",7,0)
EN(X0,MODE,IENCOUNT)  ;entry point to get MD5 algorithm
"RTN","XUMF5I",8,0)
 ; Lookup uses AMASTERVUID for files and B x-ref for subfiles....
"RTN","XUMF5I",9,0)
 ;
"RTN","XUMF5I",10,0)
 ; X0 = IEN or name of entry from 4.005 file
"RTN","XUMF5I",11,0)
 ; MODE = 0 regular mode.. last HASH value returned in Apl. ACK.
"RTN","XUMF5I",12,0)
 ;        1 debugging mode.. all values + hash codess returned in Apl ACK
"RTN","XUMF5I",13,0)
 ;        1.1 debugging mode.. all values (no hash codes) returned in Apl ACK
"RTN","XUMF5I",14,0)
 ;        2 debugging mode.. all fields values, all hash values, all hash codes returned in Apl. ACK.
"RTN","XUMF5I",15,0)
 ; IENCOUNT  = maximum entries for MD5 hash.. if NULL.. all entries counted...        
"RTN","XUMF5I",16,0)
 ;
"RTN","XUMF5I",17,0)
 ; TMP(sequence, def entry IEN, file/subfile #, field #)=""
"RTN","XUMF5I",18,0)
 ; TMP1(,"1,120.82,2,",2)="INTERNAL"
"RTN","XUMF5I",19,0)
 ; TMP2(FILE #,FIELD #)=""  if internal value requested...
"RTN","XUMF5I",20,0)
 N X,Y,X1,X2,X3,X20,X201,X1NEW,X2NEW,X2OLD,X0NAME,XP,H,CNT,CNTT,CNHT,XMD5,XDATE,XXP
"RTN","XUMF5I",21,0)
 N DIC,ERR,ROOT,ROOTX,ROOTB,ROOTB0,POINTER,JUMP,START,TMP,TMP1,TMP2,TMP3,TMP4,TMP5,TMP6,TMP7,FDA,VERSION
"RTN","XUMF5I",22,0)
 N SLEV,LEV,IENS,VAL,VALUE,SORT,SORT1,EXITMD5
"RTN","XUMF5I",23,0)
 N A,B,C,D,ABCD
"RTN","XUMF5I",24,0)
 D INIT^XUMF5II S X1=0
"RTN","XUMF5I",25,0)
2 F  S X1=$O(TMP(X1)) Q:'$$NEXTB1(LEV)!EXITMD5  S:'X1 X1=SLEV(LEV),X2OLD=0  S X2=$O(TMP(X1,X0,0)) Q:'X2  D
"RTN","XUMF5I",26,0)
 .S (XP,JUMP)=0,XXP=$O(TMP(X1,X0,X2,0))
"RTN","XUMF5I",27,0)
 .;************ File/subfile has changed ************
"RTN","XUMF5I",28,0)
 .D:X2'=X2OLD
"RTN","XUMF5I",29,0)
 ..;K ^TMP("UNIQUE",$J)
"RTN","XUMF5I",30,0)
 ..;
"RTN","XUMF5I",31,0)
 ..;************ File Level & Start ************
"RTN","XUMF5I",32,0)
 ..I $D(^DIC(X2)),START D  Q
"RTN","XUMF5I",33,0)
 ...S START=0,SLEV(1)=X1,X2OLD(1)=X2
"RTN","XUMF5I",34,0)
 ...K ROOT,ROOTB,ROOTB0,X02,X021,TMP1
"RTN","XUMF5I",35,0)
 ...S LEV=1,IENS=""
"RTN","XUMF5I",36,0)
 ...D GETONE(LEV,X2)
"RTN","XUMF5I",37,0)
 ..;
"RTN","XUMF5I",38,0)
 ..;************ Going Up ************
"RTN","XUMF5I",39,0)
 ..I $G(^DD(X2OLD,0,"UP"))=X2 D  Q
"RTN","XUMF5I",40,0)
 ...K ^TMP("UNIQUE",$J,X2OLD)
"RTN","XUMF5I",41,0)
 ...I $$NEXTB(LEV,X2OLD) S JUMP=2 Q
"RTN","XUMF5I",42,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),X2OLD(LEV)
"RTN","XUMF5I",43,0)
 ...S LEV=LEV-1,IENS=$P(IENS,",",$L(IENS,",")-LEV,9999),X2=X2OLD(LEV)
"RTN","XUMF5I",44,0)
 ..Q:JUMP
"RTN","XUMF5I",45,0)
 ..;
"RTN","XUMF5I",46,0)
 ..;************ Going DOWN ************
"RTN","XUMF5I",47,0)
 ..I $G(^DD(X2,0,"UP"))=X2OLD D  Q
"RTN","XUMF5I",48,0)
 ...S LEV=LEV+1,SLEV(LEV)=X1,X2OLD(LEV)=X2
"RTN","XUMF5I",49,0)
 ...D GETONE(LEV,X2)
"RTN","XUMF5I",50,0)
 ..;
"RTN","XUMF5I",51,0)
 ..;************ Same Level other multiple... ************
"RTN","XUMF5I",52,0)
 ..I $G(^DD(X2,0,"UP"))=$G(^DD(X2OLD,0,"UP")),+$G(^DD(X2OLD,0,"UP")),+$G(^DD(X2,0,"UP")) D  Q
"RTN","XUMF5I",53,0)
 ...I $$NEXTB(LEV,X2OLD) S JUMP=2 Q
"RTN","XUMF5I",54,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),X2OLD(LEV)
"RTN","XUMF5I",55,0)
 ...S IENS=$P(IENS,",",$L(IENS,",")-LEV+1,9999) ;B:'$L(IENS)
"RTN","XUMF5I",56,0)
 ...S SLEV(LEV)=X1
"RTN","XUMF5I",57,0)
 ...S X2OLD(LEV)=X2
"RTN","XUMF5I",58,0)
 ...;S X2=X2OLD
"RTN","XUMF5I",59,0)
 ...D GETONE(LEV,X2)
"RTN","XUMF5I",60,0)
 ..Q:JUMP
"RTN","XUMF5I",61,0)
 ..;
"RTN","XUMF5I",62,0)
 ..;************ New File not start... ************
"RTN","XUMF5I",63,0)
 ..I $D(^DIC(X2)) D  Q
"RTN","XUMF5I",64,0)
 ...S:'$D(X2NEW) X2NEW=X2,X1NEW=X1
"RTN","XUMF5I",65,0)
 ...I $$NEXTB(LEV,X2OLD(LEV)) S JUMP=2 Q
"RTN","XUMF5I",66,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),SLEV(LEV),X2OLD(LEV)
"RTN","XUMF5I",67,0)
 ...S IENS=$P(IENS,",",$L(IENS,",")-LEV+1,9999) ;B:'$L(IENS)
"RTN","XUMF5I",68,0)
 ...I LEV=1 S (X1,SLEV(1))=X1NEW,(X2,X2OLD(1))=X2NEW K X1NEW,X2NEW D GETONE(LEV,X2) Q  ;;;;;;;;GET TO THE BOTTOM LEVEL = 1 NOT ANY OTHRER'S B X-REF
"RTN","XUMF5I",69,0)
 ...S LEV=LEV-1,X1=SLEV(LEV)-1,X2=+$G(X2OLD(LEV-1)),XP=1
"RTN","XUMF5I",70,0)
 ..;
"RTN","XUMF5I",71,0)
 ..;************ Last sequence number ************
"RTN","XUMF5I",72,0)
 ..I X2OLD=0 D  Q
"RTN","XUMF5I",73,0)
21 ...I $$NEXTB(LEV,X2) S JUMP=2 Q
"RTN","XUMF5I",74,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),X2OLD(LEV)
"RTN","XUMF5I",75,0)
 ...Q:LEV=1
"RTN","XUMF5I",76,0)
 ...S LEV=LEV-1,IENS=$P(IENS,",",$L(IENS,",")-LEV,9999),X2=X2OLD(LEV) ;,X1=SLEV(LEV)-1,XP=1
"RTN","XUMF5I",77,0)
 ...G 21
"RTN","XUMF5I",78,0)
 ..Q
"RTN","XUMF5I",79,0)
 ..;
"RTN","XUMF5I",80,0)
 .S X2OLD=X2
"RTN","XUMF5I",81,0)
 .Q:JUMP
"RTN","XUMF5I",82,0)
 .;************ Get value & MD5 ************
"RTN","XUMF5I",83,0)
 .S X3=$O(TMP(X1+XP,X0,X2,0)) Q:'X3
"RTN","XUMF5I",84,0)
 .S VAL=$S($L(IENS):$G(TMP1(LEV,X2,IENS,X3)),1:"")
"RTN","XUMF5I",85,0)
 .Q:'$L(VAL)
"RTN","XUMF5I",86,0)
 .D:$O(TMP1(LEV,X2,IENS,X3,0))
"RTN","XUMF5I",87,0)
 ..N X4 S X4=0,VAL="" F  S X4=$O(TMP1(LEV,X2,IENS,X3,X4)) Q:'X4  S VAL=VAL_$G(TMP1(LEV,X2,IENS,X3,X4))
"RTN","XUMF5I",88,0)
 .;If value set as uniqueue and already exist dont take it into MD5
"RTN","XUMF5I",89,0)
 .Q:'$L(VAL)
"RTN","XUMF5I",90,0)
 .I $G(TMP5(X2,X3)) Q:$D(^TMP("UNIQUE",$J,X2,X3,VAL))  S ^TMP("UNIQUE",$J,X2,X3,VAL)=""
"RTN","XUMF5I",91,0)
 .D
"RTN","XUMF5I",92,0)
 ..N X,TMP,I
"RTN","XUMF5I",93,0)
 ..I X3=99.99,$D(^DIC(X2)) S CNTT=CNTT+1 I $G(IENCOUNT),CNTT>IENCOUNT S EXITMD5=1,CNTT=CNTT-1 Q
"RTN","XUMF5I",94,0)
 ..D:MODE>1.99 SETACK("File #: "_X2_" Field #: "_X3_" Value: "_VAL_" IENS: "_IENS)
"RTN","XUMF5I",95,0)
 ..S CNT=$G(CNT)+1
"RTN","XUMF5I",96,0)
 ..S VALUE=VALUE_VAL
"RTN","XUMF5I",97,0)
211 ..Q:$L(VALUE)<65
"RTN","XUMF5I",98,0)
 ..S X=$E(VALUE,65,$L(VALUE)),VALUE=$E(VALUE,1,64)
"RTN","XUMF5I",99,0)
 ..D:MODE
"RTN","XUMF5I",100,0)
 ...D SETACK($S(MODE=1.1:"",1:"Value: ")_VALUE)
"RTN","XUMF5I",101,0)
 ...D:MODE'=1.1 SETACK("HASH:  "_$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5E^XUMF5AU(ABCD,VALUE,0,CNHT+1*64))))
"RTN","XUMF5I",102,0)
 ..S ABCD=$$MD5E^XUMF5AU(ABCD,VALUE,1)
"RTN","XUMF5I",103,0)
 ..S VALUE=X,CNHT=CNHT+1
"RTN","XUMF5I",104,0)
 ..G 211
"RTN","XUMF5I",105,0)
 .Q
"RTN","XUMF5I",106,0)
 G END^XUMF5II
"RTN","XUMF5I",107,0)
 Q
"RTN","XUMF5I",108,0)
GETONE(LEV,X2)     ;GET DATA
"RTN","XUMF5I",109,0)
 S ROOT(LEV)=$$ROOT^DILFD(X2,"1,"_IENS,,"ERR")
"RTN","XUMF5I",110,0)
 Q:'$L(ROOT(LEV))
"RTN","XUMF5I",111,0)
 I $D(ERR) D  Q
"RTN","XUMF5I",112,0)
 .S ERROR="1^MD5 ROOT retrieval error, File/Subfile #: "_X2_" IENS: 1,"_IENS,EXITMD5=1,JUMP=2
"RTN","XUMF5I",113,0)
 .D EM^XUMFX("file DIE call error message in RDT",.ERR)
"RTN","XUMF5I",114,0)
 .K ERR
"RTN","XUMF5I",115,0)
 S ROOTX(LEV)=ROOT(LEV)_"X201(LEV))" ;FOR LOOKUP OF ENTRIES
"RTN","XUMF5I",116,0)
 S SORT1="",SORT="B" S:$D(^DIC(X2)) SORT="AMASTERVUID",SORT1="1,"
"RTN","XUMF5I",117,0)
 S ROOTB(LEV)=ROOT(LEV)_""""_SORT_""",X20(LEV))"
"RTN","XUMF5I",118,0)
 S X20(LEV)="",ROOTB0(LEV)=ROOT(LEV)_""""_SORT_""",X20(LEV),"_SORT1_"X201(LEV))"
"RTN","XUMF5I",119,0)
 S:SORT="B" POINTER=$G(TMP7(X2,XXP)) ;Pointer = pointer to file #
"RTN","XUMF5I",120,0)
 I SORT="B",+POINTER D  ;Handle poiter type of subfile...
"RTN","XUMF5I",121,0)
 .N BB S POINTER=$E(POINTER,2,$L(POINTER))
"RTN","XUMF5I",122,0)
 .; ^TMP("PROOT",$J,Subfile #,IEN from up level,"Name sorted",IEN level)=""
"RTN","XUMF5I",123,0)
 .; ^TMP("PROOT",$J,Subfile #,IEN from up level,X20(LEV),X201(LEV))=""
"RTN","XUMF5I",124,0)
 .K ^TMP("PROOT",$J,X2)
"RTN","XUMF5I",125,0)
 .;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
"RTN","XUMF5I",126,0)
 .S X201(LEV)=0 F  S X201(LEV)=$O(@(ROOTX(LEV)))  Q:'X201(LEV)  D
"RTN","XUMF5I",127,0)
 ..I $G(TMP4(X2,XXP)) D  ; If  sort By VUID
"RTN","XUMF5I",128,0)
 ...S BB=$$GET1^DIQ(X2,X201(LEV)_","_IENS,XXP,"I")     ;BB=IEN of poited to field
"RTN","XUMF5I",129,0)
 ...S:BB BB=$$GET1^DIQ(TMP4(X2,XXP),BB_",",99.99,"E")  ;BB=VUID
"RTN","XUMF5I",130,0)
 ..E  S BB=$$GET1^DIQ(X2,X201(LEV)_","_IENS,XXP,"E")   ; Else sort by .01    BB= .01
"RTN","XUMF5I",131,0)
 ..S:$L(BB) ^TMP("PROOT",$J,X2,BB,X201(LEV))=""
"RTN","XUMF5I",132,0)
 .;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
"RTN","XUMF5I",133,0)
 .S ROOTB(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV))"
"RTN","XUMF5I",134,0)
 .S ROOTB0(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV),X201(LEV))"
"RTN","XUMF5I",135,0)
 I SORT="B",LEV=2,X2=+$P(^DD(X2OLD(1),99.991,0),U,2) D  ;Handle Effective Date/Status multiple... only last date taken to HASH... TERMSTATUS
"RTN","XUMF5I",136,0)
 .K ^TMP("PROOT",$J,X2)
"RTN","XUMF5I",137,0)
 .S X20(LEV)=$O(@(ROOTB(LEV)),-1) ;Get last date..
"RTN","XUMF5I",138,0)
 .Q:'$L(X20(LEV))  ;No Data in Effective Date Multiple.
"RTN","XUMF5I",139,0)
 .S X201(LEV)=0,X201(LEV)=+$O(@ROOTB0(LEV))
"RTN","XUMF5I",140,0)
 .Q:'X201(LEV)
"RTN","XUMF5I",141,0)
 .S ROOTB(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV))"
"RTN","XUMF5I",142,0)
 .S ROOTB0(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV),X201(LEV))"
"RTN","XUMF5I",143,0)
 .S ^TMP("PROOT",$J,X2,X20(LEV),X201(LEV))=""
"RTN","XUMF5I",144,0)
 S X20(LEV)=""
"RTN","XUMF5I",145,0)
GET1 S X20(LEV)=$O(@(ROOTB(LEV))) Q:'$L(X20(LEV))  S X201(LEV)=0,X201(LEV)=$O(@(ROOTB0(LEV)))
"RTN","XUMF5I",146,0)
 I $D(^DIC(X2)),'$$ACTIVE(X2,X201(LEV)_","_IENS) G GET1 ;If not active entry.. skip it..
"RTN","XUMF5I",147,0)
 S IENS=X201(LEV)_","_IENS
"RTN","XUMF5I",148,0)
 Q:'X201(LEV)
"RTN","XUMF5I",149,0)
 D GETSIE(X2,IENS,LEV)
"RTN","XUMF5I",150,0)
 Q
"RTN","XUMF5I",151,0)
NEXTB(LEV,X2X)      ;Get next IEN from xref on current level.. if exist
"RTN","XUMF5I",152,0)
 ;Is there other entry at current level to be proceeded..  ?? get next "B" x-ref set old X2 = NEW X2 and go to loop
"RTN","XUMF5I",153,0)
 Q:'$D(X20(LEV)) 0
"RTN","XUMF5I",154,0)
N1 Q:'$L(X20(LEV)) 0
"RTN","XUMF5I",155,0)
 Q:'($O(@(ROOTB0(LEV)))!$L($O(@(ROOTB(LEV))))) 0
"RTN","XUMF5I",156,0)
 S:X201(LEV) X201(LEV)=$O(@(ROOTB0(LEV))) ;Try get new IEN fron B-xref
"RTN","XUMF5I",157,0)
 I 'X201(LEV) S X20(LEV)=$O(@(ROOTB(LEV))),X201(LEV)=0 S:$L(X20(LEV)) X201(LEV)=$O(@(ROOTB0(LEV)))
"RTN","XUMF5I",158,0)
 Q:'X201(LEV) 0
"RTN","XUMF5I",159,0)
 I $D(^DIC(X2X)),'$$ACTIVE(X2X,X201(LEV)_","_$P(IENS,",",2,99)) G N1 ;If not active entry.. skip it..
"RTN","XUMF5I",160,0)
 S $P(IENS,",",1)=X201(LEV)
"RTN","XUMF5I",161,0)
 S X2=X2X
"RTN","XUMF5I",162,0)
 D GETSIE(X2,IENS,LEV)
"RTN","XUMF5I",163,0)
 S X1=SLEV(LEV)-1,XP=1
"RTN","XUMF5I",164,0)
 Q 1
"RTN","XUMF5I",165,0)
NEXTB1(LEV)     ;See if some other entries in x-ref at any level exist...  no variable is set.
"RTN","XUMF5I",166,0)
 ;
"RTN","XUMF5I",167,0)
 Q:X1 1
"RTN","XUMF5I",168,0)
3 Q:LEV=0 0
"RTN","XUMF5I",169,0)
 I LEV>1,'$L($G(X20(LEV))) G 4
"RTN","XUMF5I",170,0)
 I LEV=1,'$L($G(X20(LEV))) Q 0
"RTN","XUMF5I",171,0)
 I LEV=1,'($O(@(ROOTB0(LEV)))!$L($O(@(ROOTB(LEV))))) Q 0
"RTN","XUMF5I",172,0)
 I LEV=1,'$$ACTALL() Q 0
"RTN","XUMF5I",173,0)
 I X201(LEV),$O(@(ROOTB0(LEV))) Q 1
"RTN","XUMF5I",174,0)
 Q:$L($O(@(ROOTB(LEV)))) 1 ;
"RTN","XUMF5I",175,0)
 Q:LEV=1 0
"RTN","XUMF5I",176,0)
4 S LEV=LEV-1 G 3
"RTN","XUMF5I",177,0)
 Q
"RTN","XUMF5I",178,0)
SETACK(X,MODE)      ;SET APPL. Acknowledgment + WRIGHT ?? 
"RTN","XUMF5I",179,0)
 W X,!
"RTN","XUMF5I",180,0)
 S:$G(MODE) ^TMP("XUMF ERROR",$J,XMD5,$O(^TMP("XUMF ERROR",$J,XMD5,9999999999999),-1)+1)=X
"RTN","XUMF5I",181,0)
 Q
"RTN","XUMF5I",182,0)
UP(X) ;Upercase conversion    
"RTN","XUMF5I",183,0)
 Q $TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XUMF5I",184,0)
ACTIVE(FILE,IEN)        ;GET 1 = Active 0 = Inactive
"RTN","XUMF5I",185,0)
 N TMP,BB,X,X1,X2,XT,XX
"RTN","XUMF5I",186,0)
 D GETS^DIQ(FILE,IEN,"99.991*","I","TMP","ERR")
"RTN","XUMF5I",187,0)
 S (XT,XX)=0,X="TMP"
"RTN","XUMF5I",188,0)
 F  S X=$Q(@(X)) Q:'$L(X)  S X1=$G(@(X)),X=$Q(@(X)),X2=$G(@(X)) S:X1>XT XT=X1,XX=+X2
"RTN","XUMF5I",189,0)
 Q XX
"RTN","XUMF5I",190,0)
GETSIE(X2,IENS,LEV)     ;GET Internal/External values + replace pointed field .01 with VUID
"RTN","XUMF5I",191,0)
 K TMP1(LEV) D GETS^DIQ(X2,IENS,"*","","TMP1(LEV)")
"RTN","XUMF5I",192,0)
 D:$D(TMP2(X2))!$D(TMP4(X2))
"RTN","XUMF5I",193,0)
 .N TMP3,I
"RTN","XUMF5I",194,0)
 .D GETS^DIQ(X2,IENS,"*","I","TMP3")
"RTN","XUMF5I",195,0)
 .S I="" F  S I=$O(TMP2(X2,I)) Q:'I  S:$D(TMP1(LEV,X2,IENS,I)) TMP1(LEV,X2,IENS,I)=TMP3(X2,IENS,I,"I")
"RTN","XUMF5I",196,0)
 .;+++++++++++++++ Replace pointed .01 field with VUID if indicate so in 4.005
"RTN","XUMF5I",197,0)
 .S I="" F  S I=$O(TMP4(X2,I)) Q:'I  S:$D(TMP1(LEV,X2,IENS,I)) TMP1(LEV,X2,IENS,I)=$$GET1^DIQ(TMP4(X2,I),TMP3(X2,IENS,I,"I")_",",99.99)
"RTN","XUMF5I",198,0)
 Q
"RTN","XUMF5I",199,0)
ACTALL() ;See if there is some active entry on the file....
"RTN","XUMF5I",200,0)
 N X1,X2,ACT
"RTN","XUMF5I",201,0)
 S ACT=0,X1=X20(1),X2=X201(1)
"RTN","XUMF5I",202,0)
 S:X20(1) X20(1)=X20(1)-.01
"RTN","XUMF5I",203,0)
 F  S X20(1)=$O(@(ROOTB(1))) Q:'X20(1)!ACT  F  S X201(1)=$O(@(ROOTB0(1))) Q:'X201(1)  I $$ACTIVE(X2OLD(1),X201(1)) S ACT=1 Q
"RTN","XUMF5I",204,0)
 S X20(1)=X1,X201(1)=X2
"RTN","XUMF5I",205,0)
 Q ACT
"RTN","XUMF5I",206,0)
 Q
"RTN","XUMF5II")
0^6^B13619076^n/a
"RTN","XUMF5II",1,0)
XUMF5II ;ISS/PAVEL - XUMF5 MD5 Hash Entry point ;5/9/06  11:01
"RTN","XUMF5II",2,0)
 ;;8.0;KERNEL;**407**;July 10, 1995;Build 8
"RTN","XUMF5II",3,0)
 ;
"RTN","XUMF5II",4,0)
 ;MD5 based on info from 4.005 SORT BY VUID
"RTN","XUMF5II",5,0)
 ;
"RTN","XUMF5II",6,0)
 Q
"RTN","XUMF5II",7,0)
INIT ;
"RTN","XUMF5II",8,0)
 K ^TMP("PROOT",$J) ;ROOT of file in the case of pointer...
"RTN","XUMF5II",9,0)
 K ^TMP("UNIQUE",$J) ; Global of unique Values
"RTN","XUMF5II",10,0)
 N X1,X11,X2,X20,X22,X3,X10,X21
"RTN","XUMF5II",11,0)
 ;TMP5(sequence #)= 1  if unique value
"RTN","XUMF5II",12,0)
 S DIC=4.005,X=$S(X0:"`",1:"")_X0,DIC(0)="Z",U="^" D ^DIC
"RTN","XUMF5II",13,0)
 I Y=-1 S ERROR="1^Unknown entry of 4.005 File: "_X0 Q
"RTN","XUMF5II",14,0)
 S X0=+Y,X0NAME=$P(Y(0),U) S:'$G(MODE) MODE=+$P(Y(0),U,2) K TMP M TMP=@($$ROOT^DILFD(4.005,,0)_"""AC"",X0)")
"RTN","XUMF5II",15,0)
 ; Set TMP5 if pointer type of field
"RTN","XUMF5II",16,0)
 S X1=0,(X10,X20)=0 F  S X1=$O(TMP(X1)) Q:'X1  S X2=$O(TMP(X1,X0,0)) D
"RTN","XUMF5II",17,0)
 .S X3=$O(TMP(X1,X0,X2,0))
"RTN","XUMF5II",18,0)
 .S X11=$O(TMP(X1)),X21=$O(TMP(+X11,X0,0))
"RTN","XUMF5II",19,0)
 .I X20'=X2,X2'=X21,'$D(^DIC(X2)),$G(^DD(X2,0))'["EFFECTIVE DATE/TIME" S TMP6(X2,X3)=1
"RTN","XUMF5II",20,0)
 .S X20=X2
"RTN","XUMF5II",21,0)
 .S POINTER=$$POINTER(X2,X3)
"RTN","XUMF5II",22,0)
 .S:POINTER TMP7(X2,X3)=POINTER
"RTN","XUMF5II",23,0)
 D GETS^DIQ(4.005,X0_",","**","","TMP1")
"RTN","XUMF5II",24,0)
 S A="" F  S A=$O(TMP1(4.00511,A)) Q:'$L(A)  D
"RTN","XUMF5II",25,0)
 .N X1,X2
"RTN","XUMF5II",26,0)
 .S X1=$P(A,",",2),X2=$P(A,",",1)
"RTN","XUMF5II",27,0)
 .S:TMP1(4.00511,A,2)="INTERNAL" TMP2(X1,X2)=""
"RTN","XUMF5II",28,0)
 .;+++++++++++++++Set array of fields of pointer type VUID into TMP4 +++++++++++++++++++++++++
"RTN","XUMF5II",29,0)
 .;TMP1(4.00511,A,3) = File Number Of Pointed to Field for VUID sort
"RTN","XUMF5II",30,0)
 .S:TMP1(4.00511,A,3) TMP4(X1,X2)=TMP1(4.00511,A,3)
"RTN","XUMF5II",31,0)
 .;+++++++++++++++Set array of columns with Unique value into TMP5 +++++++++++++++++++++++++
"RTN","XUMF5II",32,0)
 .;TMP1(4.00511,A,4) = Unique value YES
"RTN","XUMF5II",33,0)
 .S:TMP1(4.00511,A,4)="YES" TMP5(X1,X2)=1
"RTN","XUMF5II",34,0)
 ;
"RTN","XUMF5II",35,0)
 ;MODE set from input parameter or from file.
"RTN","XUMF5II",36,0)
 S A=$C(1,35,69,103)
"RTN","XUMF5II",37,0)
 S B=$C(137,171,205,239)
"RTN","XUMF5II",38,0)
 S C=$C(254,220,186,152)
"RTN","XUMF5II",39,0)
 S D=$C(118,84,50,16)
"RTN","XUMF5II",40,0)
 S ABCD=A_B_C_D
"RTN","XUMF5II",41,0)
 S (CNT,CNTT,CNHT)=0
"RTN","XUMF5II",42,0)
 S VALUE=""
"RTN","XUMF5II",43,0)
 ;X1 = SEQUENCE
"RTN","XUMF5II",44,0)
 ;X2 = FILE/SUBFILE #
"RTN","XUMF5II",45,0)
 ;X3 = Field #
"RTN","XUMF5II",46,0)
 ;TMP(MD5 Sequence ,IEN of entry from 4.005 file , File/Subfile#,field#)=""
"RTN","XUMF5II",47,0)
 ;TMP1 = FILE # ALL ENTRIES
"RTN","XUMF5II",48,0)
 ;TMP2(file#, field #)=""  Set.. if INTERNAL value required
"RTN","XUMF5II",49,0)
 ;TMP4(file#, field #)=Subfile #   Set if SORT by VUID for subfile = file #
"RTN","XUMF5II",50,0)
 ;TMP5(file#, field #)= 1  if unique value requested
"RTN","XUMF5II",51,0)
 ;TMP6(file#, field #)= 1  if column mode.. it's not used yet...
"RTN","XUMF5II",52,0)
 ;TMP7(file#, field #)=file # of pointer type field
"RTN","XUMF5II",53,0)
 S START=1,X1=0,LEV=0,X2OLD=0,XMD5=$O(^TMP("XUMF ERROR",$J,9999999999999),-1)+1,EXITMD5=0
"RTN","XUMF5II",54,0)
 Q
"RTN","XUMF5II",55,0)
END ;************ So get the final ABCD value... ************
"RTN","XUMF5II",56,0)
 S ABCD=$$MD5E^XUMF5AU(ABCD,VALUE,0,CNHT*64+$L(VALUE))
"RTN","XUMF5II",57,0)
 D:MODE
"RTN","XUMF5II",58,0)
 .W ! D SETACK^XUMF5I($S(MODE=1.1:"",1:"Last value: ")_VALUE)
"RTN","XUMF5II",59,0)
 .D SETACK^XUMF5I("LAST HASH:  "_$$MAIN^XUMF5BYT($$HEX^XUMF5AU(ABCD))) W !
"RTN","XUMF5II",60,0)
 .D SETACK^XUMF5I("Total number of Characters included in Hash : "_(CNHT*64+$L(VALUE)))
"RTN","XUMF5II",61,0)
 .D SETACK^XUMF5I("Length of last value: "_$L(VALUE))
"RTN","XUMF5II",62,0)
 .D SETACK^XUMF5I("Number of file entries: "_CNTT)
"RTN","XUMF5II",63,0)
 .D SETACK^XUMF5I("Number of hash entries: "_(CNHT+1))
"RTN","XUMF5II",64,0)
 .D SETACK^XUMF5I("Number of values: "_CNT)
"RTN","XUMF5II",65,0)
 .W !
"RTN","XUMF5II",66,0)
 ;************ Hex conversion + storage of the final ABCD value ************
"RTN","XUMF5II",67,0)
 S VALUE=$$MAIN^XUMF5BYT($$HEX^XUMF5AU(ABCD))
"RTN","XUMF5II",68,0)
 K FDA
"RTN","XUMF5II",69,0)
 S FDA(4.005,X0_",",4)=$$NOW^XLFDT
"RTN","XUMF5II",70,0)
 S FDA(4.005,X0_",",5)=VALUE
"RTN","XUMF5II",71,0)
 K ERR D FILE^DIE(,"FDA","ERR")
"RTN","XUMF5II",72,0)
 I $D(ERR) D
"RTN","XUMF5II",73,0)
 .S ERROR="1^MD5 Date updating error"
"RTN","XUMF5II",74,0)
 .D EM^XUMFX("file DIE call error message in RDT",.ERR)
"RTN","XUMF5II",75,0)
 .K ERR
"RTN","XUMF5II",76,0)
 D SETACK^XUMF5I("MD5 Signature Entry: "_X0NAME)
"RTN","XUMF5II",77,0)
 D SETACK^XUMF5I("Local Hash value: "_VALUE)
"RTN","XUMF5II",78,0)
 S ERROR=$G(ERROR)
"RTN","XUMF5II",79,0)
 S X1=$O(@($$ROOT^DILFD(4.009,,0,"ERR")_"0)"))_","
"RTN","XUMF5II",80,0)
 D GETS^DIQ(4.009,X1,"*",,"TMP3") S VERSION=$G(TMP3(4.009,X1,1))
"RTN","XUMF5II",81,0)
 S $P(ERROR,U,2)=$P(ERROR,U,2)_";CHECKSUM:"_VALUE_";VERSION:"_VERSION_";"
"RTN","XUMF5II",82,0)
 D SETACK^XUMF5I("ERROR variable: "_ERROR)
"RTN","XUMF5II",83,0)
 K ^TMP("PROOT",$J)
"RTN","XUMF5II",84,0)
 Q VALUE
"RTN","XUMF5II",85,0)
 Q
"RTN","XUMF5II",86,0)
POINTER(X2,XXP)     ;GET THE POINTER FILE #
"RTN","XUMF5II",87,0)
 N FTYPE,TT,I
"RTN","XUMF5II",88,0)
 S:'$G(XXP) XXP=.01
"RTN","XUMF5II",89,0)
 D FIELD^DID(X2,XXP,,"TYPE;POINTER","TT")
"RTN","XUMF5II",90,0)
 Q:$G(TT("TYPE"))'="POINTER" 0
"RTN","XUMF5II",91,0)
 Q:'$L($G(TT("POINTER"))) 0
"RTN","XUMF5II",92,0)
 S TT="1^"_TT("POINTER")
"RTN","XUMF5II",93,0)
 Q TT
"RTN","XUMFMD5")
0^4^B3864794^n/a
"RTN","XUMFMD5",1,0)
XUMFMD5 ;ISS/RAM - MD5 Handler ;06/28/00
"RTN","XUMFMD5",2,0)
 ;;8.0;KERNEL;**407**;Jul 10, 1995;Build 8
"RTN","XUMFMD5",3,0)
 ;
"RTN","XUMFMD5",4,0)
 ;
"RTN","XUMFMD5",5,0)
 Q
"RTN","XUMFMD5",6,0)
 ;
"RTN","XUMFMD5",7,0)
MAIN ; -- main
"RTN","XUMFMD5",8,0)
 ;
"RTN","XUMFMD5",9,0)
 N ERROR,CNT,HLFS,HLCS,MFI,QRD
"RTN","XUMFMD5",10,0)
 ;
"RTN","XUMFMD5",11,0)
 ;
"RTN","XUMFMD5",12,0)
 D INIT,PROCESS,MFR,SEND,EXIT
"RTN","XUMFMD5",13,0)
 ;
"RTN","XUMFMD5",14,0)
 Q
"RTN","XUMFMD5",15,0)
 ;
"RTN","XUMFMD5",16,0)
INIT ; -- initialize
"RTN","XUMFMD5",17,0)
 ;
"RTN","XUMFMD5",18,0)
 K ^TMP("HLA",$J)
"RTN","XUMFMD5",19,0)
 ;
"RTN","XUMFMD5",20,0)
 S ERROR=0,CNT=1
"RTN","XUMFMD5",21,0)
 ;
"RTN","XUMFMD5",22,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH")),HLSCS=$E(HL("ECH"),4)
"RTN","XUMFMD5",23,0)
 ;
"RTN","XUMFMD5",24,0)
 Q
"RTN","XUMFMD5",25,0)
 ;
"RTN","XUMFMD5",26,0)
PROCESS ; -- pull message text
"RTN","XUMFMD5",27,0)
 ;
"RTN","XUMFMD5",28,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMFMD5",29,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMFMD5",30,0)
 .Q:"^MSH^MSA^QRD^"'[(U_$P(HLNODE,HLFS)_U)
"RTN","XUMFMD5",31,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMFMD5",32,0)
 ;
"RTN","XUMFMD5",33,0)
 Q
"RTN","XUMFMD5",34,0)
 ;
"RTN","XUMFMD5",35,0)
MSH ; -- MSH segment
"RTN","XUMFMD5",36,0)
 ;
"RTN","XUMFMD5",37,0)
 Q
"RTN","XUMFMD5",38,0)
 ;
"RTN","XUMFMD5",39,0)
QRD ; -- QRD segment
"RTN","XUMFMD5",40,0)
 ;
"RTN","XUMFMD5",41,0)
 S MFI=$P(HLNODE,HLFS,10)
"RTN","XUMFMD5",42,0)
 I MFI="" S ERROR="1^MFI not resolved HLNODE: "_$TR(HLNODE,HLFS,"#") Q
"RTN","XUMFMD5",43,0)
 ;
"RTN","XUMFMD5",44,0)
 D EN^XUMF5I(MFI)
"RTN","XUMFMD5",45,0)
 ;
"RTN","XUMFMD5",46,0)
 S QRD=HLNODE
"RTN","XUMFMD5",47,0)
 ;
"RTN","XUMFMD5",48,0)
 Q
"RTN","XUMFMD5",49,0)
 ;
"RTN","XUMFMD5",50,0)
MFR ; -- response
"RTN","XUMFMD5",51,0)
 ;
"RTN","XUMFMD5",52,0)
 D MSA,QRD1
"RTN","XUMFMD5",53,0)
 ;
"RTN","XUMFMD5",54,0)
 Q
"RTN","XUMFMD5",55,0)
 ;
"RTN","XUMFMD5",56,0)
MSA ; -- Acknowledgement
"RTN","XUMFMD5",57,0)
 ;
"RTN","XUMFMD5",58,0)
 N X
"RTN","XUMFMD5",59,0)
 S X="MSA"_HLFS_$S(ERROR:"AE",1:"AA")_HLFS_HL("MID")_HLFS_$P(ERROR,U,2)
"RTN","XUMFMD5",60,0)
 S ^TMP("HLA",$J,CNT)=X
"RTN","XUMFMD5",61,0)
 S CNT=CNT+1
"RTN","XUMFMD5",62,0)
 ;
"RTN","XUMFMD5",63,0)
 Q
"RTN","XUMFMD5",64,0)
 ;
"RTN","XUMFMD5",65,0)
QRD1 ; -- query definition segment
"RTN","XUMFMD5",66,0)
 ;
"RTN","XUMFMD5",67,0)
 S ^TMP("HLA",$J,CNT)=QRD
"RTN","XUMFMD5",68,0)
 S CNT=CNT+1
"RTN","XUMFMD5",69,0)
 ;
"RTN","XUMFMD5",70,0)
 Q
"RTN","XUMFMD5",71,0)
 ;
"RTN","XUMFMD5",72,0)
SEND ; -- send HL7 message
"RTN","XUMFMD5",73,0)
 ;
"RTN","XUMFMD5",74,0)
 S HLP("PRIORITY")="I"
"RTN","XUMFMD5",75,0)
 D GENACK^HLMA1(HL("EID"),HLMTIENS,HL("EIDS"),"GM",1,.HLRESLT)
"RTN","XUMFMD5",76,0)
 ;
"RTN","XUMFMD5",77,0)
 ; check for error
"RTN","XUMFMD5",78,0)
 I ($P($G(HLRESLT),U,3)'="") D  Q
"RTN","XUMFMD5",79,0)
 .S ERROR=1_U_$P(HLRESLT,HLFS,3)_U_$P(HLRESLT,HLFS,2)_U_$P(HLRESLT,U)
"RTN","XUMFMD5",80,0)
 ;
"RTN","XUMFMD5",81,0)
 ; successful call, message ID returned
"RTN","XUMFMD5",82,0)
 S ERROR="0^"_$P($G(HLRESLT),U,1)
"RTN","XUMFMD5",83,0)
 ;
"RTN","XUMFMD5",84,0)
 Q
"RTN","XUMFMD5",85,0)
 ;
"RTN","XUMFMD5",86,0)
EXIT ; -- exit
"RTN","XUMFMD5",87,0)
 ;
"RTN","XUMFMD5",88,0)
 D CLEAN^DILF
"RTN","XUMFMD5",89,0)
 ;
"RTN","XUMFMD5",90,0)
 K ^TMP("HLA",$J)
"RTN","XUMFMD5",91,0)
 ;
"RTN","XUMFMD5",92,0)
 Q
"RTN","XUMFMD5",93,0)
 ;
"RTN","XUMFQR")
0^3^B34910260^n/a
"RTN","XUMFQR",1,0)
XUMFQR ;ISS/RAM - Master File Query Response ;06/28/00
"RTN","XUMFQR",2,0)
 ;;8.0;KERNEL;**407**;Jul 10, 1995;Build 8
"RTN","XUMFQR",3,0)
 ;
"RTN","XUMFQR",4,0)
 Q
"RTN","XUMFQR",5,0)
 ;
"RTN","XUMFQR",6,0)
MAIN ; -- main
"RTN","XUMFQR",7,0)
 ;
"RTN","XUMFQR",8,0)
 N FIELD1,IDX,IDX1,NAME1,SUBFILE1,DATA1,IEN1,TYP1,MKEY,MKEY1,TYP,VUID,VUID1
"RTN","XUMFQR",9,0)
 N MFI,SEQ,NAME,QRD,SEQ,SUBFILE,IEN,CNT,DATA,ERROR
"RTN","XUMFQR",10,0)
 ;
"RTN","XUMFQR",11,0)
 D INIT,PROCESS,MFR,SEND,EXIT
"RTN","XUMFQR",12,0)
 ;
"RTN","XUMFQR",13,0)
 Q
"RTN","XUMFQR",14,0)
 ;
"RTN","XUMFQR",15,0)
INIT ; -- initialize
"RTN","XUMFQR",16,0)
 ;
"RTN","XUMFQR",17,0)
 K ^TMP("HLA",$J)
"RTN","XUMFQR",18,0)
 ;
"RTN","XUMFQR",19,0)
 S ERROR=0,CNT=1
"RTN","XUMFQR",20,0)
 ;
"RTN","XUMFQR",21,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH")),HLSCS=$E(HL("ECH"),4)
"RTN","XUMFQR",22,0)
 ;
"RTN","XUMFQR",23,0)
 Q
"RTN","XUMFQR",24,0)
 ;
"RTN","XUMFQR",25,0)
PROCESS ; -- pull message text
"RTN","XUMFQR",26,0)
 ;
"RTN","XUMFQR",27,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMFQR",28,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMFQR",29,0)
 .Q:"^MSH^MSA^QRD^"'[(U_$P(HLNODE,HLFS)_U)
"RTN","XUMFQR",30,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMFQR",31,0)
 ;
"RTN","XUMFQR",32,0)
 Q
"RTN","XUMFQR",33,0)
 ;
"RTN","XUMFQR",34,0)
MSH ; -- MSH segment
"RTN","XUMFQR",35,0)
 ;
"RTN","XUMFQR",36,0)
 Q
"RTN","XUMFQR",37,0)
 ;
"RTN","XUMFQR",38,0)
QRD ; -- QRD segment
"RTN","XUMFQR",39,0)
 ;
"RTN","XUMFQR",40,0)
 S MFI=$P(HLNODE,HLFS,10)
"RTN","XUMFQR",41,0)
 I MFI="" S ERROR="1^MFI not resolved HLNODE: "_$TR(HLNODE,HLFS,"#") Q
"RTN","XUMFQR",42,0)
 S IFN=$O(^DIC(4.001,"MFID",MFI,0))
"RTN","XUMFQR",43,0)
 I 'IFN S ERROR="1^IFN not resolved HLNODE: "_$TR(HLNODE,HLFS,"#") Q
"RTN","XUMFQR",44,0)
 I '$$VFILE^DILFD(IFN) S ERROR="1^invalid file number" Q
"RTN","XUMFQR",45,0)
 ;
"RTN","XUMFQR",46,0)
 ; -- get root of file
"RTN","XUMFQR",47,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMFQR",48,0)
 ;
"RTN","XUMFQR",49,0)
 S QRD=HLNODE
"RTN","XUMFQR",50,0)
 ;
"RTN","XUMFQR",51,0)
 Q
"RTN","XUMFQR",52,0)
 ;
"RTN","XUMFQR",53,0)
MFR ; -- response
"RTN","XUMFQR",54,0)
 ;
"RTN","XUMFQR",55,0)
 D MSA,QRD1,MFI,MFE
"RTN","XUMFQR",56,0)
 ;
"RTN","XUMFQR",57,0)
 Q
"RTN","XUMFQR",58,0)
 ;
"RTN","XUMFQR",59,0)
MSA ; -- Acknowledgement
"RTN","XUMFQR",60,0)
 ;
"RTN","XUMFQR",61,0)
 N X
"RTN","XUMFQR",62,0)
 S X="MSA"_HLFS_$S(ERROR:"AE",1:"AA")_HLFS_HL("MID")_HLFS_$P(ERROR,U,2)
"RTN","XUMFQR",63,0)
 S ^TMP("HLA",$J,CNT)=X
"RTN","XUMFQR",64,0)
 S CNT=CNT+1
"RTN","XUMFQR",65,0)
 ;
"RTN","XUMFQR",66,0)
 Q
"RTN","XUMFQR",67,0)
 ;
"RTN","XUMFQR",68,0)
QRD1 ; -- query definition segment
"RTN","XUMFQR",69,0)
 ;
"RTN","XUMFQR",70,0)
 S ^TMP("HLA",$J,CNT)=QRD
"RTN","XUMFQR",71,0)
 S CNT=CNT+1
"RTN","XUMFQR",72,0)
 ;
"RTN","XUMFQR",73,0)
 Q
"RTN","XUMFQR",74,0)
 ;
"RTN","XUMFQR",75,0)
MFI ; master file identifier segment
"RTN","XUMFQR",76,0)
 ;
"RTN","XUMFQR",77,0)
 S ^TMP("HLA",$J,CNT)=$$MFI^XUMFMFI(MFI,"Standard Terminology","MUP",$$NOW^XLFDT,$$NOW^XLFDT,"NE")
"RTN","XUMFQR",78,0)
 S CNT=CNT+1
"RTN","XUMFQR",79,0)
 ;
"RTN","XUMFQR",80,0)
 Q
"RTN","XUMFQR",81,0)
 ;
"RTN","XUMFQR",82,0)
MFE ; master file entry segment
"RTN","XUMFQR",83,0)
 ;
"RTN","XUMFQR",84,0)
 S VUID=0 F  S VUID=$O(@ROOT@("AMASTERVUID",VUID)) Q:'VUID  D
"RTN","XUMFQR",85,0)
 .S IEN=$O(@ROOT@("AMASTERVUID",VUID,1,0)) Q:'IEN
"RTN","XUMFQR",86,0)
 .S ^TMP("HLA",$J,CNT)=$$MFE^XUMFMFE("MUP","",$$NOW^XLFDT,MFI_"@"_VUID)
"RTN","XUMFQR",87,0)
 .S CNT=CNT+1
"RTN","XUMFQR",88,0)
 .D ZRT
"RTN","XUMFQR",89,0)
 ;
"RTN","XUMFQR",90,0)
 Q
"RTN","XUMFQR",91,0)
 ;
"RTN","XUMFQR",92,0)
ZRT ; data segments
"RTN","XUMFQR",93,0)
 ;
"RTN","XUMFQR",94,0)
 S SEQ=0
"RTN","XUMFQR",95,0)
 F  S SEQ=$O(^DIC(4.001,IFN,1,"ASEQ",SEQ)) Q:'SEQ  D
"RTN","XUMFQR",96,0)
 .S IDX=$O(^DIC(4.001,IFN,1,"ASEQ",SEQ,0)) Q:'IDX
"RTN","XUMFQR",97,0)
 .S DATA=$G(^DIC(4.001,+IFN,1,+IDX,0)),NAME=$P(DATA,U)
"RTN","XUMFQR",98,0)
 .S TYP=$P(DATA,U,3),TYP=$$GET1^DIQ(771.4,(+TYP_","),.01)
"RTN","XUMFQR",99,0)
 .S FIELD=$P(DATA,U,2),SUBFILE=$P(DATA,U,4),MKEY=$P(DATA,U,6)
"RTN","XUMFQR",100,0)
 .S VUID1=$P(DATA,U,13),WP=$P(DATA,U,16)
"RTN","XUMFQR",101,0)
 .;
"RTN","XUMFQR",102,0)
 .I NAME="Status" D  Q
"RTN","XUMFQR",103,0)
 ..S ^TMP("HLA",$J,CNT)="ZRT"_HLFS_NAME_HLFS_(+$P($$GETSTAT^XTID(IFN,,IEN_","),U))
"RTN","XUMFQR",104,0)
 ..S CNT=CNT+1
"RTN","XUMFQR",105,0)
 .;
"RTN","XUMFQR",106,0)
 .I WP D WP Q
"RTN","XUMFQR",107,0)
 .;
"RTN","XUMFQR",108,0)
 .I SUBFILE D SUBFILE Q
"RTN","XUMFQR",109,0)
 .;
"RTN","XUMFQR",110,0)
 .S VALUE=$$VALUE(IFN,IEN_",",FIELD,VUID1,TYP) ;Q:VALUE=""
"RTN","XUMFQR",111,0)
 .;
"RTN","XUMFQR",112,0)
 .S ^TMP("HLA",$J,CNT)="ZRT"_HLFS_NAME_HLFS_VALUE
"RTN","XUMFQR",113,0)
 .S CNT=CNT+1
"RTN","XUMFQR",114,0)
 ;
"RTN","XUMFQR",115,0)
 Q
"RTN","XUMFQR",116,0)
 ;
"RTN","XUMFQR",117,0)
SUBFILE ;
"RTN","XUMFQR",118,0)
 ;
"RTN","XUMFQR",119,0)
 I NAME="Status" D  Q
"RTN","XUMFQR",120,0)
 .S ^TMP("HLA",$J,CNT)="ZRT"_HLFS_NAME_HLFS_+$$GETSTAT^XTID(IFN,,IEN_",")
"RTN","XUMFQR",121,0)
 .S CNT=CNT+1
"RTN","XUMFQR",122,0)
 ;
"RTN","XUMFQR",123,0)
 N ROOT
"RTN","XUMFQR",124,0)
 ;
"RTN","XUMFQR",125,0)
 S ROOT=$$ROOT^DILFD(SUBFILE,(","_IEN_","),1)
"RTN","XUMFQR",126,0)
 ;
"RTN","XUMFQR",127,0)
 I MKEY="" S ERROR="1^null lookup column parameter for subfile: "_SUBFILE Q
"RTN","XUMFQR",128,0)
 ;
"RTN","XUMFQR",129,0)
 S IEN1=0
"RTN","XUMFQR",130,0)
 F  S IEN1=$O(@ROOT@(IEN1)) Q:'IEN1  D  Q:ERROR
"RTN","XUMFQR",131,0)
 .;
"RTN","XUMFQR",132,0)
 .I $D(^DIC(4.001,IFN,1,IDX,1,"ASEQ1")) D SUBREC Q
"RTN","XUMFQR",133,0)
 .;
"RTN","XUMFQR",134,0)
 .S VALUE=$$VALUE(SUBFILE,IEN1_","_IEN_",",FIELD,VUID1,TYP) ;Q:VALUE=""
"RTN","XUMFQR",135,0)
 .;
"RTN","XUMFQR",136,0)
 .S ^TMP("HLA",$J,CNT)="ZRT"_HLFS_NAME_HLFS_VALUE
"RTN","XUMFQR",137,0)
 .S CNT=CNT+1
"RTN","XUMFQR",138,0)
 ;
"RTN","XUMFQR",139,0)
 Q
"RTN","XUMFQR",140,0)
 ;
"RTN","XUMFQR",141,0)
SUBREC ; -- sub-records
"RTN","XUMFQR",142,0)
 ;
"RTN","XUMFQR",143,0)
 N SEQ1,FIELD1,NAME1,VUID2,TYP2
"RTN","XUMFQR",144,0)
 ;
"RTN","XUMFQR",145,0)
 S SEQ1=0
"RTN","XUMFQR",146,0)
 F  S SEQ1=$O(^DIC(4.001,IFN,1,IDX,1,"ASEQ1",SEQ1)) Q:'SEQ1  D  Q:ERROR
"RTN","XUMFQR",147,0)
 .S IDX1=$O(^DIC(4.001,IFN,1,IDX,1,"ASEQ1",SEQ1,0))
"RTN","XUMFQR",148,0)
 .;
"RTN","XUMFQR",149,0)
 .S NAME1=$P(^DIC(4.001,IFN,1,IDX,1,IDX1,0),U,2)
"RTN","XUMFQR",150,0)
 .I NAME1="" S ERROR="1^subrecord sequence name missing SUBFILE : "_SUBFILE Q
"RTN","XUMFQR",151,0)
 .S FIELD1=$P(^DIC(4.001,IFN,1,IDX,1,IDX1,0),U,3)
"RTN","XUMFQR",152,0)
 .I FIELD1="" S ERROR="1^subrecord sequence number missing SUBFILE : "_SUBFILE Q
"RTN","XUMFQR",153,0)
 .S VUID2=$P(^DIC(4.001,IFN,1,IDX,1,IDX1,0),U,4)
"RTN","XUMFQR",154,0)
 .S TYP2=$P(^DIC(4.001,IFN,1,IDX,1,IDX1,0),U,5)
"RTN","XUMFQR",155,0)
 .;
"RTN","XUMFQR",156,0)
 .S VALUE=$$VALUE(SUBFILE,IEN1_","_IEN_",",FIELD1,VUID2,TYP2) ;Q:VALUE=""
"RTN","XUMFQR",157,0)
 .;
"RTN","XUMFQR",158,0)
 .S ^TMP("HLA",$J,CNT)="ZRT"_HLFS_NAME1_HLFS_VALUE
"RTN","XUMFQR",159,0)
 .S CNT=CNT+1
"RTN","XUMFQR",160,0)
 ;
"RTN","XUMFQR",161,0)
 Q
"RTN","XUMFQR",162,0)
 ;
"RTN","XUMFQR",163,0)
SEND ; -- send HL7 message
"RTN","XUMFQR",164,0)
 ;
"RTN","XUMFQR",165,0)
 S HLP("PRIORITY")="I"
"RTN","XUMFQR",166,0)
 D GENACK^HLMA1(HL("EID"),HLMTIENS,HL("EIDS"),"GM",1,.HLRESLT)
"RTN","XUMFQR",167,0)
 ;
"RTN","XUMFQR",168,0)
 ; check for error
"RTN","XUMFQR",169,0)
 I ($P($G(HLRESLT),U,3)'="") D  Q
"RTN","XUMFQR",170,0)
 .S ERROR=1_U_$P(HLRESLT,HLFS,3)_U_$P(HLRESLT,HLFS,2)_U_$P(HLRESLT,U)
"RTN","XUMFQR",171,0)
 ;
"RTN","XUMFQR",172,0)
 ; successful call, message ID returned
"RTN","XUMFQR",173,0)
 S ERROR="0^"_$P($G(HLRESLT),U,1)
"RTN","XUMFQR",174,0)
 ;
"RTN","XUMFQR",175,0)
 Q
"RTN","XUMFQR",176,0)
 ;
"RTN","XUMFQR",177,0)
EXIT ; -- exit
"RTN","XUMFQR",178,0)
 ;
"RTN","XUMFQR",179,0)
 D CLEAN^DILF
"RTN","XUMFQR",180,0)
 ;
"RTN","XUMFQR",181,0)
 K ^TMP("HLA",$J)
"RTN","XUMFQR",182,0)
 ;
"RTN","XUMFQR",183,0)
 Q
"RTN","XUMFQR",184,0)
 ;
"RTN","XUMFQR",185,0)
WP ;
"RTN","XUMFQR",186,0)
 ;
"RTN","XUMFQR",187,0)
 N WP,I,J
"RTN","XUMFQR",188,0)
 ;
"RTN","XUMFQR",189,0)
 S I=$$GET1^DIQ(IFN,IEN_",",FIELD,,"WP")
"RTN","XUMFQR",190,0)
 ;
"RTN","XUMFQR",191,0)
 Q:'$D(WP)
"RTN","XUMFQR",192,0)
 ;
"RTN","XUMFQR",193,0)
 S ^TMP("HLA",$J,CNT)="ZRT"_HLFS_NAME_HLFS_$G(WP(1))
"RTN","XUMFQR",194,0)
 ;
"RTN","XUMFQR",195,0)
 S I=1,J=1
"RTN","XUMFQR",196,0)
 F  S I=$O(WP(I)) Q:'I  D
"RTN","XUMFQR",197,0)
 .S ^TMP("HLA",$J,CNT,J)=WP(I)
"RTN","XUMFQR",198,0)
 .S J=J+1
"RTN","XUMFQR",199,0)
 ;
"RTN","XUMFQR",200,0)
 S CNT=CNT+1
"RTN","XUMFQR",201,0)
 ;
"RTN","XUMFQR",202,0)
 Q
"RTN","XUMFQR",203,0)
 ;
"RTN","XUMFQR",204,0)
ESC(VALUE) ;
"RTN","XUMFQR",205,0)
 ;
"RTN","XUMFQR",206,0)
 I VALUE["^" F  Q:VALUE'["^"  D
"RTN","XUMFQR",207,0)
 .S VALUE=$P(VALUE,"^")_"\F\"_$P(VALUE,"^",2,9999)
"RTN","XUMFQR",208,0)
 I VALUE["&" F  Q:VALUE'["&"  D
"RTN","XUMFQR",209,0)
 .S VALUE=$P(VALUE,"&")_"\T\"_$P(VALUE,"&",2,9999)
"RTN","XUMFQR",210,0)
 ;
"RTN","XUMFQR",211,0)
 Q VALUE
"RTN","XUMFQR",212,0)
 ;
"RTN","XUMFQR",213,0)
VALUE(IFN,IENS,FIELD,VUID,TYP) ;
"RTN","XUMFQR",214,0)
 ;
"RTN","XUMFQR",215,0)
 Q:IFN="" "" Q:FIELD="" "" Q:IENS="" ""
"RTN","XUMFQR",216,0)
 ;
"RTN","XUMFQR",217,0)
 S:$G(TYP)="" TYP="ST"
"RTN","XUMFQR",218,0)
 ;S VUID=$S($G(VUID)'="":":99.99",1:"")
"RTN","XUMFQR",219,0)
 ;
"RTN","XUMFQR",220,0)
 ;S VALUE=$$GET1^DIQ(IFN,IENS,FIELD_VUID) Q:VALUE="" ""
"RTN","XUMFQR",221,0)
 S VALUE=$$GET1^DIQ(IFN,IENS,FIELD) Q:VALUE="" ""
"RTN","XUMFQR",222,0)
 S VALUE=$$DTYP^XUMFP(VALUE,TYP,HLCS,1)
"RTN","XUMFQR",223,0)
 S VALUE=$$ESC(VALUE)
"RTN","XUMFQR",224,0)
 ;
"RTN","XUMFQR",225,0)
 Q VALUE
"RTN","XUMFQR",226,0)
 ;
"RTN","XUMFXHL7")
0^8^B7394501^B6997687
"RTN","XUMFXHL7",1,0)
XUMFXHL7 ;BPFO/JRP - IEMM UTILTIES (CONT);7/29/2002
"RTN","XUMFXHL7",2,0)
 ;;8.0;KERNEL;**299,407**;Jul 10, 1995;Build 8
"RTN","XUMFXHL7",3,0)
 ;
"RTN","XUMFXHL7",4,0)
 ;copied from SCMSVUT5
"RTN","XUMFXHL7",5,0)
 ;
"RTN","XUMFXHL7",6,0)
PARSE(INARR,OUTARR,SEP,SUB,MAX) ;Parse array into individual fields
"RTN","XUMFXHL7",7,0)
 ;Input  : INARR - Array containing data to parse (full global ref)
"RTN","XUMFXHL7",8,0)
 ;                   INARR = First 245 characters of data
"RTN","XUMFXHL7",9,0)
 ;                   INARR(1..n) = Continuation nodes
"RTN","XUMFXHL7",10,0)
 ;                        OR
"RTN","XUMFXHL7",11,0)
 ;                   INARR(x) = First 245 characters of data
"RTN","XUMFXHL7",12,0)
 ;                   INARR(x,1..n) = Continuation nodes
"RTN","XUMFXHL7",13,0)
 ;         OUTARR - Array to put parsed data into (full global ref)
"RTN","XUMFXHL7",14,0)
 ;         SEP - Field separator (defaults to ^) (1 character)
"RTN","XUMFXHL7",15,0)
 ;         SUB - Starting subscript of OUTARR (defaults to 0)
"RTN","XUMFXHL7",16,0)
 ;         MAX - Maximum length of output node (defaults to 245)
"RTN","XUMFXHL7",17,0)
 ;Output : None
"RTN","XUMFXHL7",18,0)
 ;         OUTARR(SUB) = First piece (MAX characters)
"RTN","XUMFXHL7",19,0)
 ;         OUTARR(SUB,1..n) = Continuation nodes
"RTN","XUMFXHL7",20,0)
 ;         OUTARR(SUB+X) = Xth piece (MAX characters)
"RTN","XUMFXHL7",21,0)
 ;         OUTARR(SUB+X,1..n) = Continuation nodes
"RTN","XUMFXHL7",22,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","XUMFXHL7",23,0)
 ;       : Assumes that INARR and OUTARR are defined and valid
"RTN","XUMFXHL7",24,0)
 ;
"RTN","XUMFXHL7",25,0)
 ;Declare variables
"RTN","XUMFXHL7",26,0)
 N NODE,STOP,DATA,INFO,FLD,SEPCNT,CN,OUT,TMP,ROOT,OUTNODE
"RTN","XUMFXHL7",27,0)
 K @OUTARR
"RTN","XUMFXHL7",28,0)
 S SEP=$G(SEP) S SEP=$E(SEP,1) S:SEP="" SEP="^"
"RTN","XUMFXHL7",29,0)
 S SUB=+$G(SUB)
"RTN","XUMFXHL7",30,0)
 S MAX=+$G(MAX) S:'MAX MAX=245
"RTN","XUMFXHL7",31,0)
 S NODE=INARR
"RTN","XUMFXHL7",32,0)
 S INFO=$G(@NODE)
"RTN","XUMFXHL7",33,0)
 S ROOT=$$OREF^DILF(INARR)
"RTN","XUMFXHL7",34,0)
 S FLD=1
"RTN","XUMFXHL7",35,0)
 S SEPCNT=$L(INFO,SEP)
"RTN","XUMFXHL7",36,0)
 S STOP=0
"RTN","XUMFXHL7",37,0)
 S OUTNODE=$NA(@OUTARR@(SUB))
"RTN","XUMFXHL7",38,0)
 S CN=0
"RTN","XUMFXHL7",39,0)
 F  S DATA=$P(INFO,SEP,FLD) D  Q:STOP
"RTN","XUMFXHL7",40,0)
 .I FLD=SEPCNT D  Q
"RTN","XUMFXHL7",41,0)
 ..D ADDNODE
"RTN","XUMFXHL7",42,0)
 ..S NODE=$Q(@NODE)
"RTN","XUMFXHL7",43,0)
 ..I (NODE="")!(NODE'[ROOT) S STOP=1 Q
"RTN","XUMFXHL7",44,0)
 ..S INFO=$G(@NODE)
"RTN","XUMFXHL7",45,0)
 ..S SEPCNT=$L(INFO,SEP)
"RTN","XUMFXHL7",46,0)
 ..S FLD=1
"RTN","XUMFXHL7",47,0)
 .D ADDNODE
"RTN","XUMFXHL7",48,0)
 .S SUB=SUB+1
"RTN","XUMFXHL7",49,0)
 .S CN=0
"RTN","XUMFXHL7",50,0)
 .S OUTNODE=$NA(@OUTARR@(SUB))
"RTN","XUMFXHL7",51,0)
 .S FLD=FLD+1
"RTN","XUMFXHL7",52,0)
 Q
"RTN","XUMFXHL7",53,0)
ADDNODE ;Used by PARSE to add data to output node (handles continuation nodes)
"RTN","XUMFXHL7",54,0)
 S TMP=$G(@OUTNODE)
"RTN","XUMFXHL7",55,0)
 I ($L(TMP)+$L(DATA))<(MAX+1) S @OUTNODE=TMP_DATA Q
"RTN","XUMFXHL7",56,0)
 S @OUTNODE=TMP_$E(DATA,1,(MAX-$L(TMP)))
"RTN","XUMFXHL7",57,0)
 S CN=CN+1
"RTN","XUMFXHL7",58,0)
 S DATA=$E(DATA,(MAX-$L(TMP)+1),$L(DATA))
"RTN","XUMFXHL7",59,0)
 S OUTNODE=$NA(@OUTARR@(SUB,CN))
"RTN","XUMFXHL7",60,0)
 I DATA'="" D ADDNODE
"RTN","XUMFXHL7",61,0)
 Q
"RTN","XUMFXHL7",62,0)
 ;
"RTN","XUMFXHL7",63,0)
 ;
"RTN","XUMFXHL7",64,0)
SEGPRSE(SEGMENT,OUTARR,FS,LENGTH)      ;Parse HL7 segment by field separator
"RTN","XUMFXHL7",65,0)
 ;Input  : SEGMENT - Array containing HL7 segment to parse
"RTN","XUMFXHL7",66,0)
 ;                   (full global ref)
"RTN","XUMFXHL7",67,0)
 ;                   SEGMENT = First 245 characters of segment
"RTN","XUMFXHL7",68,0)
 ;                   SEGMENT(1..n) = Continuation nodes
"RTN","XUMFXHL7",69,0)
 ;                        OR
"RTN","XUMFXHL7",70,0)
 ;                   SEGMENT(x) = First 245 characters of segment
"RTN","XUMFXHL7",71,0)
 ;                   SEGMENT(x,1..n) = Continuation nodes
"RTN","XUMFXHL7",72,0)
 ;         OUTARR - Array to put parsed segment into (full global ref)
"RTN","XUMFXHL7",73,0)
 ;         FS - HL7 field separator (defaults to ^) (1 character)
"RTN","XUMFXHL7",74,0)
 ;Output : None
"RTN","XUMFXHL7",75,0)
 ;         OUTARR(0) = Segment name
"RTN","XUMFXHL7",76,0)
 ;         OUTARR(seq#) = Data (first 245 characters)
"RTN","XUMFXHL7",77,0)
 ;         OUTARR(seq#,1..n) Continuation nodes
"RTN","XUMFXHL7",78,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","XUMFXHL7",79,0)
 ;       : Assumes SEGMENT and OUTARR are defined and valid
"RTN","XUMFXHL7",80,0)
 ;
"RTN","XUMFXHL7",81,0)
 S LENGTH=$S($G(LENGTH):LENGTH,1:245)
"RTN","XUMFXHL7",82,0)
 ;
"RTN","XUMFXHL7",83,0)
 D PARSE($G(SEGMENT),$G(OUTARR),$G(FS),0,LENGTH)
"RTN","XUMFXHL7",84,0)
 Q
"RTN","XUMFXHL7",85,0)
 ;
"RTN","XUMFXHL7",86,0)
SEQPRSE(SEQDATA,OUTARR,ENCODE)  ;Parse HL7 sequence by component
"RTN","XUMFXHL7",87,0)
 ;Input  : SEQDATA - Array containing seq to parse (full global ref)
"RTN","XUMFXHL7",88,0)
 ;                   SEQDATA = First 245 characters of sequence
"RTN","XUMFXHL7",89,0)
 ;                   SEQDATA(1..n) = Continuation nodes
"RTN","XUMFXHL7",90,0)
 ;                        OR
"RTN","XUMFXHL7",91,0)
 ;                   SEQDATA(x) = First 245 characters of sequence
"RTN","XUMFXHL7",92,0)
 ;                   SEQDATA(x,1..n) = Continuation nodes
"RTN","XUMFXHL7",93,0)
 ;         OUTARR - Array to put parsed sequence into (full global ref)
"RTN","XUMFXHL7",94,0)
 ;         ENCODE - HL7 encoding characters (defaults to ~|\&) (4 chars)
"RTN","XUMFXHL7",95,0)
 ;Output : None
"RTN","XUMFXHL7",96,0)
 ;         OUTARR(rep#,comp#) = Data (first 245 characters)
"RTN","XUMFXHL7",97,0)
 ;         OUTARR(rep#,comp#,1..n) = Continuation nodes
"RTN","XUMFXHL7",98,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","XUMFXHL7",99,0)
 ;       : Assumes SEQDATA and OUTARR are defined and valid
"RTN","XUMFXHL7",100,0)
 ;
"RTN","XUMFXHL7",101,0)
 ;Declare variables
"RTN","XUMFXHL7",102,0)
 N RS,CS,INFO,DATA,REP,COMP
"RTN","XUMFXHL7",103,0)
 S ENCODE=$G(ENCODE,"~|\&")
"RTN","XUMFXHL7",104,0)
 S ENCODE=$E(ENCODE,1,4) S:$L(ENCODE)'=4 ENCODE="~|\&"
"RTN","XUMFXHL7",105,0)
 S CS=$E(ENCODE,1)
"RTN","XUMFXHL7",106,0)
 S RS=$E(ENCODE,2)
"RTN","XUMFXHL7",107,0)
 S INFO=$NA(^TMP("XUMFXHL7",$J,"SEQPRSE"))
"RTN","XUMFXHL7",108,0)
 D PARSE($G(SEQDATA),INFO,RS,1,245)
"RTN","XUMFXHL7",109,0)
 S REP=0
"RTN","XUMFXHL7",110,0)
 F  S REP=+$O(@INFO@(REP)) Q:'REP  D PARSE($NA(@INFO@(REP)),$NA(@OUTARR@(REP)),CS,1,245)
"RTN","XUMFXHL7",111,0)
 K @INFO
"RTN","XUMFXHL7",112,0)
 Q
"RTN","XUMFXHL7",113,0)
        
"VER")
8.0^22.0
"^DD",4.001,4.001,0)
FIELD^^5^27
"^DD",4.001,4.001,0,"DDA")
N
"^DD",4.001,4.001,0,"DT")
3060525
"^DD",4.001,4.001,0,"IX","B",4.001,.01)

"^DD",4.001,4.001,0,"IX","MFI",4.001,.03)

"^DD",4.001,4.001,0,"IX","MFID",4.001,.07)

"^DD",4.001,4.001,0,"IX","ZZZ",4.001,.02)

"^DD",4.001,4.001,0,"NM","MASTER FILE PARAMETERS")

"^DD",4.001,4.001,0,"VRPK")
XU
"^DD",4.001,4.001,.01,0)
MASTER FILE^RP1X^DIC(^0;1^S DINUM=X
"^DD",4.001,4.001,.01,1,0)
^.1
"^DD",4.001,4.001,.01,1,1,0)
4.001^B
"^DD",4.001,4.001,.01,1,1,1)
S ^DIC(4.001,"B",$E(X,1,30),DA)=""
"^DD",4.001,4.001,.01,1,1,2)
K ^DIC(4.001,"B",$E(X,1,30),DA)
"^DD",4.001,4.001,.01,3)
Select file to be supported by the Master File Server (MFS) mechanism.
"^DD",4.001,4.001,.01,21,0)
^^3^3^3031223^
"^DD",4.001,4.001,.01,21,1,0)
This field is the Internal File Number (IFN) of the
"^DD",4.001,4.001,.01,21,2,0)
Master File table supported by the Master File Server
"^DD",4.001,4.001,.01,21,3,0)
(MFS).
"^DD",4.001,4.001,.01,"DT")
3031226
"^DD",4.001,4.001,.02,0)
SEGMENT NAME^RFX^^0;2^K:$L(X)>3!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.02,1,0)
^.1
"^DD",4.001,4.001,.02,1,1,0)
4.001^ZZZ
"^DD",4.001,4.001,.02,1,1,1)
S ^DIC(4.001,"ZZZ",$E(X,1,30),DA)=""
"^DD",4.001,4.001,.02,1,1,2)
K ^DIC(4.001,"ZZZ",$E(X,1,30),DA)
"^DD",4.001,4.001,.02,1,1,"%D",0)
^^3^3^3031223^
"^DD",4.001,4.001,.02,1,1,"%D",1,0)
This x-ref is the segment name.  The MFS handler
"^DD",4.001,4.001,.02,1,1,"%D",2,0)
checks incoming message data segments against this
"^DD",4.001,4.001,.02,1,1,"%D",3,0)
x-ref to verify the file is supported.
"^DD",4.001,4.001,.02,1,1,"DT")
3031223
"^DD",4.001,4.001,.02,3)
Enter the HL7 data segment or Z segment name.
"^DD",4.001,4.001,.02,21,0)
^^2^2^3031223^
"^DD",4.001,4.001,.02,21,1,0)
This field holds the name of the HL7 data segment
"^DD",4.001,4.001,.02,21,2,0)
that hold the actual table values.
"^DD",4.001,4.001,.02,"DT")
3031226
"^DD",4.001,4.001,.03,0)
MFI CODE^RFX^^0;3^K:$L(X)>60!($L(X)<2) X
"^DD",4.001,4.001,.03,1,0)
^.1
"^DD",4.001,4.001,.03,1,1,0)
4.001^MFI
"^DD",4.001,4.001,.03,1,1,1)
S ^DIC(4.001,"MFI",$E(X,1,60),DA)=""
"^DD",4.001,4.001,.03,1,1,2)
K ^DIC(4.001,"MFI",$E(X,1,60),DA)
"^DD",4.001,4.001,.03,1,1,"%D",0)
^^1^1^3031223^
"^DD",4.001,4.001,.03,1,1,"%D",1,0)
This x-ref is the Master File Identifier (MFI).
"^DD",4.001,4.001,.03,1,1,"DT")
3031223
"^DD",4.001,4.001,.03,3)
Answer must be 2-60 characters in length.
"^DD",4.001,4.001,.03,21,0)
^^1^1^3031224^^
"^DD",4.001,4.001,.03,21,1,0)
This code identifies the master file.
"^DD",4.001,4.001,.03,"DT")
3041220
"^DD",4.001,4.001,.04,0)
PRE-UPDATE ROUTINE^RFX^^0;4^K:$L(X)>20!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.04,3)
Enter the label of sub-routine in XUMFR to be executed prior to the MFS update.
"^DD",4.001,4.001,.04,21,0)
^^20^20^3031226^^^
"^DD",4.001,4.001,.04,21,1,0)
This field holds the label of the 
"^DD",4.001,4.001,.04,21,2,0)
sub-routine in XUMFR that gets called
"^DD",4.001,4.001,.04,21,3,0)
before an update by the MFS for a
"^DD",4.001,4.001,.04,21,4,0)
data type segment.  
"^DD",4.001,4.001,.04,21,5,0)
                                 
"^DD",4.001,4.001,.04,21,6,0)
Enter the label without '^XUMFR'.  The
"^DD",4.001,4.001,.04,21,7,0)
sub-routine can assume the presence of the
"^DD",4.001,4.001,.04,21,8,0)
variables IFN and IEN.  All local variables
"^DD",4.001,4.001,.04,21,9,0)
within the sub-routine must be NEW'd 
"^DD",4.001,4.001,.04,21,10,0)
before using them.
"^DD",4.001,4.001,.04,21,11,0)
                                 
"^DD",4.001,4.001,.04,21,12,0)
The default value for this field is 
"^DD",4.001,4.001,.04,21,13,0)
'PRE'.  The PRE sub-routine builds
"^DD",4.001,4.001,.04,21,14,0)
the current values of the entry in
"^DD",4.001,4.001,.04,21,15,0)
question (associated with the IEN)
"^DD",4.001,4.001,.04,21,16,0)
into an array (^TMP("XUMF PRE",$J,SEQ)
"^DD",4.001,4.001,.04,21,17,0)
=fieldLabel_": "_value). 
"^DD",4.001,4.001,.04,21,18,0)

"^DD",4.001,4.001,.04,21,19,0)
This field is required, so if you have
"^DD",4.001,4.001,.04,21,20,0)
no processing use NULL.
"^DD",4.001,4.001,.04,"DT")
3031226
"^DD",4.001,4.001,.05,0)
POST-UPDATE ROUTINE^FX^^0;5^K:$L(X)>20!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.05,3)
Enter the label of sub-routine in XUMFR to be executed after MFS updates.
"^DD",4.001,4.001,.05,21,0)
^.001^18^18^3050516^^^^
"^DD",4.001,4.001,.05,21,1,0)
This field holds the label of the sub-routine in XUMFR that gets called
"^DD",4.001,4.001,.05,21,2,0)
after an update by the MFS for a data type segment.
"^DD",4.001,4.001,.05,21,3,0)
 
"^DD",4.001,4.001,.05,21,4,0)
Enter the label without '^XUMFR'.  The sub-routine can assume the presence
"^DD",4.001,4.001,.05,21,5,0)
of the variables IFN and IEN.  All local variables within the sub-routine
"^DD",4.001,4.001,.05,21,6,0)
must be NEW'd before using them.
"^DD",4.001,4.001,.05,21,7,0)
 
"^DD",4.001,4.001,.05,21,8,0)
The default value for this field is 'POST'.  The POST sub-routine builds
"^DD",4.001,4.001,.05,21,9,0)
the new values of the entry in question (associated with the IEN) and
"^DD",4.001,4.001,.05,21,10,0)
compares them against the previous values (prior to update) to determine
"^DD",4.001,4.001,.05,21,11,0)
if any values changed.  If the values have changed a MailMan notification
"^DD",4.001,4.001,.05,21,12,0)
is sent to the XUMF SERVER mail group and the group identified by MAIL
"^DD",4.001,4.001,.05,21,13,0)
GROUP of this MASTER FILE PARAMERS entry.
"^DD",4.001,4.001,.05,21,14,0)
 
"^DD",4.001,4.001,.05,21,15,0)
Note: if the post-update routine calls POST^XUMFR then pre-update routine
"^DD",4.001,4.001,.05,21,16,0)
must call PRE^XUMFR.
"^DD",4.001,4.001,.05,21,17,0)

"^DD",4.001,4.001,.05,21,18,0)
This field is required, so if you have no processing use NULL.
"^DD",4.001,4.001,.05,"DT")
3050516
"^DD",4.001,4.001,.06,0)
MAIL GROUP^P3.8X^XMB(3.8,^0;6^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.06,3)
Enter the mail group that will receive update notifications.
"^DD",4.001,4.001,.06,21,0)
^^3^3^3031224^^
"^DD",4.001,4.001,.06,21,1,0)
This mail group will be notified when an HL7 unsolicited update
"^DD",4.001,4.001,.06,21,2,0)
message is received from the MFS server.  This group will be notified
"^DD",4.001,4.001,.06,21,3,0)
in addition to the group XUMF SERVER.
"^DD",4.001,4.001,.06,"DT")
3031226
"^DD",4.001,4.001,.07,0)
MASTER FILE IDENTIFIER^F^^0;7^K:$L(X)>30!($L(X)<2) X
"^DD",4.001,4.001,.07,1,0)
^.1
"^DD",4.001,4.001,.07,1,1,0)
4.001^MFID
"^DD",4.001,4.001,.07,1,1,1)
S ^DIC(4.001,"MFID",$E(X,1,30),DA)=""
"^DD",4.001,4.001,.07,1,1,2)
K ^DIC(4.001,"MFID",$E(X,1,30),DA)
"^DD",4.001,4.001,.07,1,1,"%D",0)
^^2^2^3060516^
"^DD",4.001,4.001,.07,1,1,"%D",1,0)
This identifier is used in the HL7 segment to identify the file
"^DD",4.001,4.001,.07,1,1,"%D",2,0)
to be updated.
"^DD",4.001,4.001,.07,1,1,"DT")
3060516
"^DD",4.001,4.001,.07,3)
Answer must be 2-30 characters in length.
"^DD",4.001,4.001,.07,21,0)
^^1^1^3060516^
"^DD",4.001,4.001,.07,21,1,0)
This field identifies the file to be updated.
"^DD",4.001,4.001,.07,"DT")
3060516
"^DD",4.001,4.001,1,0)
COLUMN^4.011^^1;0
"^DD",4.001,4.001,1,21,0)
^.001^4^4^3040420^^^^
"^DD",4.001,4.001,1,21,1,0)
The COLUMN DESCRIPTION multiple maps the data type segment fields
"^DD",4.001,4.001,1,21,2,0)
and components to FileMan fields for a standard table.  There are
"^DD",4.001,4.001,1,21,3,0)
additional fields within the sub-file to handle multiple field types
"^DD",4.001,4.001,1,21,4,0)
and extended references.
"^DD",4.001,4.001,1,"DT")
3040420
"^DD",4.001,4.001,2,0)
POST-PROCESSING LOGIC^K^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",4.001,4.001,2,3)
This is Standard MUMPS code.
"^DD",4.001,4.001,2,9)
@
"^DD",4.001,4.001,2,21,0)
^^1^1^3060207^
"^DD",4.001,4.001,2,21,1,0)
This is Standard MUMPS code that gets executed after message processing.
"^DD",4.001,4.001,2,"DT")
3060207
"^DD",4.001,4.001,3,0)
ADD-PROCESSING LOGIC^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",4.001,4.001,3,3)
This is Standard MUMPS code.
"^DD",4.001,4.001,3,9)
@
"^DD",4.001,4.001,3,21,0)
^^1^1^3060207^
"^DD",4.001,4.001,3,21,1,0)
This is Standard MUMPS code that gets executed before message processing.
"^DD",4.001,4.001,3,"DT")
3060522
"^DD",4.001,4.001,4,0)
MFE-PROCESSING LOGIC^K^^4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",4.001,4.001,4,3)
This is Standard MUMPS code.
"^DD",4.001,4.001,4,9)
@
"^DD",4.001,4.001,4,21,0)
^^1^1^3060207^
"^DD",4.001,4.001,4,21,1,0)
This is Standard MUMPS code that gets executed for each MFE segment.
"^DD",4.001,4.001,4,"DT")
3060207
"^DD",4.001,4.001,4.1,0)
MFE ID FIELD^RRNJ17,7X^^MFE;1^Q
"^DD",4.001,4.001,4.1,3)
Enter the field # that corresponds to the PKV id.
"^DD",4.001,4.001,4.1,21,0)
^^5^5^3031224^
"^DD",4.001,4.001,4.1,21,1,0)
This field holds the field number that corresponds to the ID
"^DD",4.001,4.001,4.1,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.1,21,3,0)
 
"^DD",4.001,4.001,4.1,21,4,0)
This field # is the SDS field added to the file to store the internal
"^DD",4.001,4.001,4.1,21,5,0)
identifier to the SDS database.
"^DD",4.001,4.001,4.1,"DT")
3031230
"^DD",4.001,4.001,4.11,0)
MFE ID TYPE^RP771.4'X^HL(771.4,^MFE;11^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.11,3)
Enter HL7 data type.
"^DD",4.001,4.001,4.11,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.11,21,1,0)
MFE ID HL7 data type.
"^DD",4.001,4.001,4.11,"DT")
3031226
"^DD",4.001,4.001,4.12,0)
MFE TEXT TYPE^RP771.4'X^HL(771.4,^MFE;12^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.12,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.12,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.12,21,1,0)
Enter the MFE TEXT HL7 data type.
"^DD",4.001,4.001,4.12,"DT")
3031226
"^DD",4.001,4.001,4.14,0)
MFE ALT ID TYPE^RP771.4'X^HL(771.4,^MFE;14^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.14,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.14,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.14,21,1,0)
Enter the MFE ID HL7 data type.
"^DD",4.001,4.001,4.14,"DT")
3031226
"^DD",4.001,4.001,4.15,0)
MFE ALT TEXT TYPE^RP771.4'X^HL(771.4,^MFE;15^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.15,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.15,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.15,21,1,0)
Enter the MFE ALT TEXT HL7 data type.
"^DD",4.001,4.001,4.15,"DT")
3031226
"^DD",4.001,4.001,4.16,0)
MFE PRE-UPDATE ROUTINE^RFX^^MFE;16^K:$L(X)>8!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.16,3)
Enter the subroutine label that executes prior to MFE.
"^DD",4.001,4.001,4.16,21,0)
^.001^6^6^3050516^^
"^DD",4.001,4.001,4.16,21,1,0)
This field holds the label of the sub-routine in XUMFRMFE that gets called
"^DD",4.001,4.001,4.16,21,2,0)
before an update by the MFS for an MFE segment.
"^DD",4.001,4.001,4.16,21,3,0)
 
"^DD",4.001,4.001,4.16,21,4,0)
Enter the label without '^XUMFRMFE'.  The sub-routine can assume the presence
"^DD",4.001,4.001,4.16,21,5,0)
of the variable IFN.  All local variables within the sub-routine
"^DD",4.001,4.001,4.16,21,6,0)
must be NEW'd before using the.
"^DD",4.001,4.001,4.16,"DT")
3031226
"^DD",4.001,4.001,4.17,0)
MFE POST-UPDATE ROUTINE^RFX^^MFE;17^K:$L(X)>8!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.17,3)
Enter the subroutine label that executes after the MFE segment.
"^DD",4.001,4.001,4.17,21,0)
^.001^6^6^3050516^^
"^DD",4.001,4.001,4.17,21,1,0)
This field holds the label of the sub-routine in XUMFRMFE that gets called
"^DD",4.001,4.001,4.17,21,2,0)
after an update by the MFS for an MFE segment.                             
"^DD",4.001,4.001,4.17,21,3,0)
 
"^DD",4.001,4.001,4.17,21,4,0)
Enter the label without '^XUMFRMFE'.  The sub-routine can assume the presence
"^DD",4.001,4.001,4.17,21,5,0)
of the variables IFN and IEN.  All local variables within the sub-routine
"^DD",4.001,4.001,4.17,21,6,0)
must be NEW'd before using them.
"^DD",4.001,4.001,4.17,"DT")
3031226
"^DD",4.001,4.001,4.2,0)
MFE TEXT FIELD^RNJ17,7X^^MFE;2^Q
"^DD",4.001,4.001,4.2,3)
Enter the field # that corresponds to the PKV text.
"^DD",4.001,4.001,4.2,21,0)
^^2^2^3031224^^
"^DD",4.001,4.001,4.2,21,1,0)
This field holds the field number that corresponds to the TEXT
"^DD",4.001,4.001,4.2,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.2,"DT")
3031230
"^DD",4.001,4.001,4.3,0)
MFE CODSYS^RFX^^MFE;3^K:$L(X)>20!($L(X)<1) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.3,3)
Enter the coding system for the MFE ID.
"^DD",4.001,4.001,4.3,21,0)
^^2^2^3031224^^
"^DD",4.001,4.001,4.3,21,1,0)
This field holds the coding system that corresponds to the ID
"^DD",4.001,4.001,4.3,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.3,"DT")
3031226
"^DD",4.001,4.001,4.4,0)
MFE ALT ID FIELD^RNJ17,7X^^MFE;4^Q
"^DD",4.001,4.001,4.4,3)
Enter the field # that corresponds to the PKV alternate id.
"^DD",4.001,4.001,4.4,21,0)
^^7^7^3031224^
"^DD",4.001,4.001,4.4,21,1,0)
This field holds the field number that corresponds to the
"^DD",4.001,4.001,4.4,21,2,0)
alternate ID of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.4,21,3,0)
 
"^DD",4.001,4.001,4.4,21,4,0)
The field # should be a key field to the file (not the SDS identifier
"^DD",4.001,4.001,4.4,21,5,0)
field).  This field will be used by MFS to determine which entry in
"^DD",4.001,4.001,4.4,21,6,0)
the file corresponds to the PKV id if it hasn't been already associated.
"^DD",4.001,4.001,4.4,21,7,0)
Ideally, this field is a unique key to the file.
"^DD",4.001,4.001,4.4,"DT")
3031230
"^DD",4.001,4.001,4.5,0)
MFE ALT TEXT FIELD^RNJ17,7X^^MFE;5^Q
"^DD",4.001,4.001,4.5,3)
Enter the field # that corresponds to the PKV alternate text.
"^DD",4.001,4.001,4.5,21,0)
^^2^2^3031224^
"^DD",4.001,4.001,4.5,21,1,0)
This field holds the field number that corresponds to the
"^DD",4.001,4.001,4.5,21,2,0)
alternate TEXT of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.5,"DT")
3031230
"^DD",4.001,4.001,4.6,0)
MFE ALT CODSYS^RFX^^MFE;6^K:$L(X)>20!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.6,3)
Enter the alternate coding system of the PKV.
"^DD",4.001,4.001,4.6,21,0)
^.001^2^2^3050331^^
"^DD",4.001,4.001,4.6,21,1,0)
This field holds the alternate coding system that corresponds
"^DD",4.001,4.001,4.6,21,2,0)
to the ID of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.6,"DT")
3031226
"^DD",4.001,4.001,4.7,0)
MFE PKV TYPE^RP771.4'X^HL(771.4,^MFE;7^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.7,3)
Enter the PKV type (i.e., CE or PL) CE or Composite Element.
"^DD",4.001,4.001,4.7,21,0)
^^3^3^3031224^^
"^DD",4.001,4.001,4.7,21,1,0)
This field holds the Primary Key Value data
"^DD",4.001,4.001,4.7,21,2,0)
type.  Valid values stored in HL7 Table 0355 -
"^DD",4.001,4.001,4.7,21,3,0)
Primary key value type.
"^DD",4.001,4.001,4.7,"DT")
3031226
"^DD",4.001,4.001,4.8,0)
MFE PKV X-REF^RFX^^MFE;8^K:$L(X)>10!($L(X)<1) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.8,3)
Enter the FM x-ref of non-SDS key field - MFE.4.4
"^DD",4.001,4.001,4.8,21,0)
^^6^6^3031224^^
"^DD",4.001,4.001,4.8,21,1,0)
This field hold the FileMan cross-reference of
"^DD",4.001,4.001,4.8,21,2,0)
the Primary Key Value (PKV).
"^DD",4.001,4.001,4.8,21,3,0)
 
"^DD",4.001,4.001,4.8,21,4,0)
Since MFE.4.1 is the SDS internal identifier then provide
"^DD",4.001,4.001,4.8,21,5,0)
the alternate ID (MFE.4.4) cross-reference.  The natural
"^DD",4.001,4.001,4.8,21,6,0)
FileMan key x-ref that corresponds to the alt id.
"^DD",4.001,4.001,4.8,"DT")
3031226
"^DD",4.001,4.001,4.9,0)
ASSIGNING AUTHORITY^RFX^^MFE;9^K:$L(X)>20!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.9,3)
Enter the entity responsible for assigning IDs for coding system.
"^DD",4.001,4.001,4.9,21,0)
^^11^11^3031226^^^
"^DD",4.001,4.001,4.9,21,1,0)
This field holds the assigning authority responsible for
"^DD",4.001,4.001,4.9,21,2,0)
the code system used in the HL7 MFE PKV segment sequence.
"^DD",4.001,4.001,4.9,21,3,0)
 
"^DD",4.001,4.001,4.9,21,4,0)
See QRD segment.  Who Subject Filter.
"^DD",4.001,4.001,4.9,21,5,0)

"^DD",4.001,4.001,4.9,21,6,0)
This field holds the code that identifies the standards
"^DD",4.001,4.001,4.9,21,7,0)
body, or in the case of VA specific data the routing
"^DD",4.001,4.001,4.9,21,8,0)
symbol (or other identifying code) of the data owner of
"^DD",4.001,4.001,4.9,21,9,0)
steward.
"^DD",4.001,4.001,4.9,21,10,0)

"^DD",4.001,4.001,4.9,21,11,0)
If all else fails, use 'VA' as the code.
"^DD",4.001,4.001,4.9,"DT")
3031226
"^DD",4.001,4.001,5,0)
ZRT-PROCESSING LOGIC^K^^5;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",4.001,4.001,5,3)
This is Standard MUMPS code.
"^DD",4.001,4.001,5,9)
@
"^DD",4.001,4.001,5,21,0)
^^1^1^3060207^
"^DD",4.001,4.001,5,21,1,0)
This is Standard MUMPS code that gets executed for each ZRT segment.
"^DD",4.001,4.001,5,"DT")
3060207
"^DD",4.001,4.011,0)
COLUMN SUB-FIELD^^1^16
"^DD",4.001,4.011,0,"DT")
3060525
"^DD",4.001,4.011,0,"IX","ASEQ",4.011,.15)

"^DD",4.001,4.011,0,"IX","B",4.011,.01)

"^DD",4.001,4.011,0,"NM","COLUMN")

"^DD",4.001,4.011,0,"UP")
4.001
"^DD",4.001,4.011,.01,0)
COLUMN DESCRIPTION^MF^^0;1^K:$L(X)>40!($L(X)<1) X
"^DD",4.001,4.011,.01,1,0)
^.1
"^DD",4.001,4.011,.01,1,1,0)
4.011^B
"^DD",4.001,4.011,.01,1,1,1)
S ^DIC(4.001,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.001,4.011,.01,1,1,2)
K ^DIC(4.001,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.001,4.011,.01,3)
Answer must be 1-40 characters in length.
"^DD",4.001,4.011,.01,21,0)
^.001^21^21^3040420^^^^
"^DD",4.001,4.011,.01,21,1,0)
The column description is the identifier that
"^DD",4.001,4.011,.01,21,2,0)
names the data element that gets mapped to a
"^DD",4.001,4.011,.01,21,3,0)
FileMan field.  The RDF segment (table row 
"^DD",4.001,4.011,.01,21,4,0)
definition) has a field (the 3rd sequence) that
"^DD",4.001,4.011,.01,21,5,0)
is a repeating element.  The 1st component of
"^DD",4.001,4.011,.01,21,6,0)
the element is the column description.  It is
"^DD",4.001,4.011,.01,21,7,0)
the column name in central repository master
"^DD",4.001,4.011,.01,21,8,0)
table.
"^DD",4.001,4.011,.01,21,9,0)

"^DD",4.001,4.011,.01,21,10,0)
(The 2nd component is the HL7 data type.  The
"^DD",4.001,4.011,.01,21,11,0)
3rd component is the length of the field.) 
"^DD",4.001,4.011,.01,21,12,0)
                                
"^DD",4.001,4.011,.01,21,13,0)
The RDF segment defines the format of
"^DD",4.001,4.011,.01,21,14,0)
subsequent RDT segment (table row data).  The
"^DD",4.001,4.011,.01,21,15,0)
sequence of column description fields in the
"^DD",4.001,4.011,.01,21,16,0)
RDF segment maps the sequence of the
"^DD",4.001,4.011,.01,21,17,0)
corresponding data values in the RDT segment.
"^DD",4.001,4.011,.01,21,18,0)

"^DD",4.001,4.011,.01,21,19,0)
(The 2nd field of the RDF segment is the number
"^DD",4.001,4.011,.01,21,20,0)
of columns or data elements passed in the RDF
"^DD",4.001,4.011,.01,21,21,0)
and RDT segments.) 
"^DD",4.001,4.011,.01,"DT")
3040420
"^DD",4.001,4.011,.02,0)
FIELD NUMBER^RNJ17,7X^^0;2^K:+X'=X!(X>999999999)!(X<.01)!(X?.E1"."8N.N) X ;  K:'$$ECHO^XUMF(DA(1),DA,X,+$G(XUMF)) X
"^DD",4.001,4.011,.02,3)
Enter the field number for the data element.
"^DD",4.001,4.011,.02,21,0)
^.001^6^6^3031224^^^
"^DD",4.001,4.011,.02,21,1,0)
This field holds the FileMan field number that corresponds to
"^DD",4.001,4.011,.02,21,2,0)
the segment sequence number in question.
"^DD",4.001,4.011,.02,21,3,0)
 
"^DD",4.001,4.011,.02,21,4,0)
If this sequence component maps to a FileMan sub-file (multiple)
"^DD",4.001,4.011,.02,21,5,0)
then the SUBFILE NUMBER (#.04) is required before FIELD NUMBER to
"^DD",4.001,4.011,.02,21,6,0)
be able to validate (input transform.)
"^DD",4.001,4.011,.02,"DT")
3040420
"^DD",4.001,4.011,.03,0)
HL7 DATA TYPE^RP771.4'X^HL(771.4,^0;3^;K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.03,3)
Enter the HL7 data type.
"^DD",4.001,4.011,.03,21,0)
^^1^1^3031224^
"^DD",4.001,4.011,.03,21,1,0)
This field holds the HL7 data type of the sequence.
"^DD",4.001,4.011,.03,"DT")
3040420
"^DD",4.001,4.011,.04,0)
SUBFILE NUMBER^NJ17,7X^^0;4^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."8.N) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.04,3)
If multiple field, enter sub-file number.
"^DD",4.001,4.011,.04,21,0)
^^2^2^3031224^
"^DD",4.001,4.011,.04,21,1,0)
This field holds the FileMan sub-file number.  ONLY if FIELD NUMBER
"^DD",4.001,4.011,.04,21,2,0)
relates to a field in a multiple.
"^DD",4.001,4.011,.04,"DT")
3031226
"^DD",4.001,4.011,.05,0)
SUBFILE LKUP LITERAL^FX^^0;5^K:$L(X)>30!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.05,3)
If subfile and .01 not in HL7 segment, enter literal value of the .01
"^DD",4.001,4.011,.05,21,0)
^^9^9^3031224^^
"^DD",4.001,4.011,.05,21,1,0)
If this sequence is a field in a subfile and the .01 of the multiple
"^DD",4.001,4.011,.05,21,2,0)
is not included in the HL7 segment but is some literal, then provide
"^DD",4.001,4.011,.05,21,3,0)
the literal string here.
"^DD",4.001,4.011,.05,21,4,0)
 
"^DD",4.001,4.011,.05,21,5,0)
If SUBFILE LKUP LITERAL is NULL then SUBFILE LKUP SEQUENCE must not
"^DD",4.001,4.011,.05,21,6,0)
be NULL.
"^DD",4.001,4.011,.05,21,7,0)

"^DD",4.001,4.011,.05,21,8,0)
If SUBFILE LKUP LITERAL is not NULL then SUBFILE LKUP SEQUENCE must
"^DD",4.001,4.011,.05,21,9,0)
be NULL.
"^DD",4.001,4.011,.05,"DT")
3031226
"^DD",4.001,4.011,.06,0)
SUBFILE LKUP COLUMN^F^^0;6^K:$L(X)>40!($L(X)<1) X
"^DD",4.001,4.011,.06,3)
Enter the COLUMN DESCRIPTION identifier that is the lookup (.01) to this field
"^DD",4.001,4.011,.06,21,0)
^.001^11^11^3050519^^^^
"^DD",4.001,4.011,.06,21,1,0)
If the FIELD NUMBER is associated with a multiple field, then this
"^DD",4.001,4.011,.06,21,2,0)
field holds the COLUMN DESCRIPTION of the .01 field of the multiple. 
"^DD",4.001,4.011,.06,21,3,0)
 
"^DD",4.001,4.011,.06,21,4,0)
If the .01 field is not a sequence, then leave this field blank and
"^DD",4.001,4.011,.06,21,5,0)
provide a value for SUBFILE LKUP LITERAL.
"^DD",4.001,4.011,.06,21,6,0)
 
"^DD",4.001,4.011,.06,21,7,0)
If SUBFILE LKUP LITERAL is NULL then SUBFILE LKUP SEQUENCE must not
"^DD",4.001,4.011,.06,21,8,0)
be NULL.
"^DD",4.001,4.011,.06,21,9,0)

"^DD",4.001,4.011,.06,21,10,0)
If SUBFILE LKUP LITERAL is not NULL then SUBFILE LKUP SEQUENCE must
"^DD",4.001,4.011,.06,21,11,0)
be NULL.
"^DD",4.001,4.011,.06,"DT")
3040525
"^DD",4.001,4.011,.07,0)
EXTENDED POINTER LKUP^NJ17,7X^^0;7^K:+X'=X!(X>999999999)!(X<.01)!(X?.E1"."8.N) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.07,3)
Enter the field number which is the key to the extended reference of FIELD NAME if other than .01
"^DD",4.001,4.011,.07,21,0)
^.001^8^8^3050516^^
"^DD",4.001,4.011,.07,21,1,0)
If FIELD NUMBER is a pointer and you want to look-up
"^DD",4.001,4.011,.07,21,2,0)
the entry by a field other than its .01, then enter
"^DD",4.001,4.011,.07,21,3,0)
that field number.
"^DD",4.001,4.011,.07,21,4,0)

"^DD",4.001,4.011,.07,21,5,0)
Example: Parent facility, in the association multiple
"^DD",4.001,4.011,.07,21,6,0)
of the Institution file points to Institution.  The
"^DD",4.001,4.011,.07,21,7,0)
Institution NAME may not be unique.  It would be more
"^DD",4.001,4.011,.07,21,8,0)
useful to look-up the Institution by STATION NUMBER.
"^DD",4.001,4.011,.07,"DT")
3031226
"^DD",4.001,4.011,.08,0)
LIST^S^1:YES;0:NO;^0;8^Q
"^DD",4.001,4.011,.08,3)
Is this a member of a sub-file to be compared against the message
"^DD",4.001,4.011,.08,"DT")
3060413
"^DD",4.001,4.011,.09,0)
COLUMN LENGTH^RNJ2,0^^0;9^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",4.001,4.011,.09,3)
Type the maximum column width
"^DD",4.001,4.011,.09,21,0)
^.001^4^4^3040525^^^^
"^DD",4.001,4.011,.09,21,1,0)
This field holds the maximum column width of the column in question.
"^DD",4.001,4.011,.09,21,2,0)
The column description is the 3rd sequence of the RDF segment.  It
"^DD",4.001,4.011,.09,21,3,0)
is a repeating element.  The maximum column width is the 3rd component
"^DD",4.001,4.011,.09,21,4,0)
of the element.
"^DD",4.001,4.011,.09,"DT")
3040525
"^DD",4.001,4.011,.11,0)
REPEATING FIELD^S^1:YES;0:NO;^0;11^Q
"^DD",4.001,4.011,.11,21,0)
^^5^5^3040817^
"^DD",4.001,4.011,.11,21,1,0)
If this field is repeating - a single valued multiple (a multiple
"^DD",4.001,4.011,.11,21,2,0)
field with only a .01 field) - field, then set the flag to YES.
"^DD",4.001,4.011,.11,21,3,0)

"^DD",4.001,4.011,.11,21,4,0)
If the multiple should be cleaned out first, then also set the CLEAN
"^DD",4.001,4.011,.11,21,5,0)
MULTIPLE flag too.
"^DD",4.001,4.011,.11,"DT")
3040817
"^DD",4.001,4.011,.12,0)
CLEAN MULTIPLE^S^1:YES;0:NO;^0;12^Q
"^DD",4.001,4.011,.12,3)
delete existing values before updating
"^DD",4.001,4.011,.12,21,0)
^^6^6^3040817^
"^DD",4.001,4.011,.12,21,1,0)
If this field is a single valued repeating element (see REPEATING FIELD)
"^DD",4.001,4.011,.12,21,2,0)
and the existing values should be deleted before the update occurs, then
"^DD",4.001,4.011,.12,21,3,0)
set this flag to YES.
"^DD",4.001,4.011,.12,21,4,0)

"^DD",4.001,4.011,.12,21,5,0)
By setting this flag, you indicate all the valid data is contained within
"^DD",4.001,4.011,.12,21,6,0)
the incoming message, so purge existing values and start clean.
"^DD",4.001,4.011,.12,"DT")
3040817
"^DD",4.001,4.011,.13,0)
VUID PREFIX^F^^0;13^K:$L(X)>10!($L(X)<1) X
"^DD",4.001,4.011,.13,3)
Enter string (i.e. "VUID") to indicate VUID value is passed instead of VALUE
"^DD",4.001,4.011,.13,21,0)
^.001^7^7^3050516^^
"^DD",4.001,4.011,.13,21,1,0)
String indicates that the field is a Pointer, and
"^DD",4.001,4.011,.13,21,2,0)
the VUID may be used instead of the value (.01).
"^DD",4.001,4.011,.13,21,3,0)

"^DD",4.001,4.011,.13,21,4,0)
Example:  Instead of Drug Class name, you may be use
"^DD",4.001,4.011,.13,21,5,0)
the VUID of the drug class such as "VUID123456", where
"^DD",4.001,4.011,.13,21,6,0)
123456 is the VUID of the Drug Class and "VUID" is the
"^DD",4.001,4.011,.13,21,7,0)
prefix.
"^DD",4.001,4.011,.13,"DT")
3041019
"^DD",4.001,4.011,.14,0)
TIME ZONE FLAG^S^L:LOCAL;U:UTC;^0;14^Q
"^DD",4.001,4.011,.14,3)
Should the local or UTC time be filed?
"^DD",4.001,4.011,.14,21,0)
^.001^7^7^3050317^^^^
"^DD",4.001,4.011,.14,21,1,0)
If this column/field represents a date data type then MFS
"^DD",4.001,4.011,.14,21,2,0)
needs to know how to handle the time zone.
"^DD",4.001,4.011,.14,21,3,0)
 
"^DD",4.001,4.011,.14,21,4,0)
This field indicates how FileMan should file the HL7 date --
"^DD",4.001,4.011,.14,21,5,0)
local time or UTC time.
"^DD",4.001,4.011,.14,21,6,0)

"^DD",4.001,4.011,.14,21,7,0)
Note: VUID effective date/time should always be flagged LOCAL.
"^DD",4.001,4.011,.14,"DT")
3050317
"^DD",4.001,4.011,.15,0)
SEQUENCE^NJ3,0^^0;15^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",4.001,4.011,.15,1,0)
^.1
"^DD",4.001,4.011,.15,1,1,0)
4.011^ASEQ
"^DD",4.001,4.011,.15,1,1,1)
S ^DIC(4.001,DA(1),1,"ASEQ",$E(X,1,30),DA)=""
"^DD",4.001,4.011,.15,1,1,2)
K ^DIC(4.001,DA(1),1,"ASEQ",$E(X,1,30),DA)
"^DD",4.001,4.011,.15,1,1,"%D",0)
^^2^2^3060301^
"^DD",4.001,4.011,.15,1,1,"%D",1,0)
The sequence number of the data segments returned in a query.  
"^DD",4.001,4.011,.15,1,1,"%D",2,0)
Sub-file entries should use fractional digits to group data.
"^DD",4.001,4.011,.15,1,1,"DT")
3060301
"^DD",4.001,4.011,.15,3)
Type a Number between 1 and 999
"^DD",4.001,4.011,.15,21,0)
^^6^6^3060306^
"^DD",4.001,4.011,.15,21,1,0)
The sequence number of the data segments returned in a query.
"^DD",4.001,4.011,.15,21,2,0)
 
"^DD",4.001,4.011,.15,21,3,0)
If this field is a Sub-file record, enter the sequence of the .01.
"^DD",4.001,4.011,.15,21,4,0)
If the sequence has associated sub-record fields, use the SUBFILE
"^DD",4.001,4.011,.15,21,5,0)
SEQUENCE of this sequence number to sequence the fields of the
"^DD",4.001,4.011,.15,21,6,0)
sub-record.
"^DD",4.001,4.011,.15,"DT")
3060306
"^DD",4.001,4.011,.16,0)
WP FIELD^S^1:YES;0:NO;^0;16^Q
"^DD",4.001,4.011,.16,3)
Is this a Word Processing field
"^DD",4.001,4.011,.16,21,0)
^^2^2^3060511^
"^DD",4.001,4.011,.16,21,1,0)
If this field is a word processing field then set this flag
"^DD",4.001,4.011,.16,21,2,0)
to YES.
"^DD",4.001,4.011,.16,"DT")
3060511
"^DD",4.001,4.011,1,0)
SUBFILE SEQUENCE^4.111^^1;0
"^DD",4.001,4.111,0)
SUBFILE SEQUENCE SUB-FIELD^^.05^5
"^DD",4.001,4.111,0,"DT")
3060525
"^DD",4.001,4.111,0,"IX","ASEQ1",4.111,.01)

"^DD",4.001,4.111,0,"IX","B",4.111,.01)

"^DD",4.001,4.111,0,"NM","SUBFILE SEQUENCE")

"^DD",4.001,4.111,0,"UP")
4.011
"^DD",4.001,4.111,.01,0)
SUBFILE SEQUENCE^MNJ2,0^^0;1^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",4.001,4.111,.01,1,0)
^.1
"^DD",4.001,4.111,.01,1,1,0)
4.111^B
"^DD",4.001,4.111,.01,1,1,1)
S ^DIC(4.001,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.001,4.111,.01,1,1,2)
K ^DIC(4.001,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.001,4.111,.01,1,2,0)
4.111^ASEQ1
"^DD",4.001,4.111,.01,1,2,1)
S ^DIC(4.001,DA(2),1,DA(1),1,"ASEQ1",$E(X,1,30),DA)=""
"^DD",4.001,4.111,.01,1,2,2)
K ^DIC(4.001,DA(2),1,DA(1),1,"ASEQ1",$E(X,1,30),DA)
"^DD",4.001,4.111,.01,1,2,"DT")
3060306
"^DD",4.001,4.111,.01,3)
Type a Number between 1 and 99
"^DD",4.001,4.111,.01,21,0)
^^2^2^3060306^
"^DD",4.001,4.111,.01,21,1,0)
If the SEQUENCE is a subfile, and it has associated fields at the
"^DD",4.001,4.111,.01,21,2,0)
sub-file level, enter the sequence of sub-record fields.
"^DD",4.001,4.111,.01,"DT")
3060306
"^DD",4.001,4.111,.02,0)
SUBFILE COLUMN NAME^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",4.001,4.111,.02,.1)

"^DD",4.001,4.111,.02,3)
Enter the subfile field # to be returned.
"^DD",4.001,4.111,.02,21,0)
^^2^2^3060525^
"^DD",4.001,4.111,.02,21,1,0)
Enter the field name associated with the sub-file sequence for
"^DD",4.001,4.111,.02,21,2,0)
the sequence.
"^DD",4.001,4.111,.02,"DT")
3060525
"^DD",4.001,4.111,.03,0)
SUBFILE FIELD NUMBER^NJ19,9^^0;3^K:+X'=X!(X>999999999)!(X<.001)!(X?.E1"."10N.N) X
"^DD",4.001,4.111,.03,3)
Enter the field number.
"^DD",4.001,4.111,.03,21,0)
^^2^2^3060525^
"^DD",4.001,4.111,.03,21,1,0)
Enter the field name associated with the sub-file sequence
"^DD",4.001,4.111,.03,21,2,0)
for the sequence.
"^DD",4.001,4.111,.03,"DT")
3060525
"^DD",4.001,4.111,.04,0)
SUBFILE FIELD VUID^S^1:YES;^0;4^Q
"^DD",4.001,4.111,.04,21,0)
^^2^2^3060525^
"^DD",4.001,4.111,.04,21,1,0)
If this field references another file entry by VUID set the flag
"^DD",4.001,4.111,.04,21,2,0)
to YES, otherwise leave empty.
"^DD",4.001,4.111,.04,"DT")
3060525
"^DD",4.001,4.111,.05,0)
SUBFILE FIELD TYPE^F^^0;5^K:$L(X)>2!($L(X)<2) X
"^DD",4.001,4.111,.05,3)
Enter the 2 character HL7 data type.
"^DD",4.001,4.111,.05,21,0)
^^1^1^3060525^
"^DD",4.001,4.111,.05,21,1,0)
This is the HL7 data type of the field.  The default is ST (string).
"^DD",4.001,4.111,.05,"DT")
3060525
"^DD",4.005,4.005,0)
FIELD^^6^7
"^DD",4.005,4.005,0,"DDA")
N
"^DD",4.005,4.005,0,"DT")
3060626
"^DD",4.005,4.005,0,"IX","B",4.005,.01)

"^DD",4.005,4.005,0,"NM","MD5 Signature")

"^DD",4.005,4.005,0,"VRPK")
XU
"^DD",4.005,4.005,.01,0)
MD5 CODE SYSTEM^RFX^^0;1^K:$L(X)>32!($L(X)<1) X
"^DD",4.005,4.005,.01,.1)
MD5 Code System
"^DD",4.005,4.005,.01,1,0)
^.1
"^DD",4.005,4.005,.01,1,1,0)
4.005^B
"^DD",4.005,4.005,.01,1,1,1)
S ^DIC(4.005,"B",$E(X,1,30),DA)=""
"^DD",4.005,4.005,.01,1,1,2)
K ^DIC(4.005,"B",$E(X,1,30),DA)
"^DD",4.005,4.005,.01,3)
Answer must be 1-32 characters in length.
"^DD",4.005,4.005,.01,21,0)
^^1^1^3050818^
"^DD",4.005,4.005,.01,21,1,0)
This field is the Domain name of SDS for which MD5 will be requested.
"^DD",4.005,4.005,.01,"DT")
3050818
"^DD",4.005,4.005,1,0)
FILE/SUBFILE NUMBER^4.0051^^1;0
"^DD",4.005,4.005,1,21,0)
^.001^2^2^3060705^^^^
"^DD",4.005,4.005,1,21,1,0)
This field is the Internal File Number (IFN) of the MD5 table supported 
"^DD",4.005,4.005,1,21,2,0)
by the Master File Server (MFS).
"^DD",4.005,4.005,2,0)
Vets Code System Version^NJ16,5^^2;1^K:+X'=X!(X>9999999999)!(X<1)!(X?.E1"."6N.N) X
"^DD",4.005,4.005,2,3)
Type a Number between 1 and 9999999999, 5 Decimal Digits
"^DD",4.005,4.005,2,21,0)
^^1^1^3050609^
"^DD",4.005,4.005,2,21,1,0)
Vets Code System Version
"^DD",4.005,4.005,2,"DT")
3050609
"^DD",4.005,4.005,3,0)
Vets MD5 Hash^F^^2;2^K:$L(X)>32!($L(X)<1) X
"^DD",4.005,4.005,3,3)
Answer must be 1-32 characters in length.
"^DD",4.005,4.005,3,21,0)
^^1^1^3050609^
"^DD",4.005,4.005,3,21,1,0)
Vets MD5 Hash ENTRY
"^DD",4.005,4.005,3,"DT")
3050609
"^DD",4.005,4.005,4,0)
Date of MD5 verification^D^^2;3^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",4.005,4.005,4,21,0)
^^1^1^3050609^
"^DD",4.005,4.005,4,21,1,0)
Date of MD5 verification
"^DD",4.005,4.005,4,"DT")
3050609
"^DD",4.005,4.005,5,0)
Computed MD5 value^F^^2;4^K:$L(X)>32!($L(X)<1) X
"^DD",4.005,4.005,5,3)
Don't enter the data.
"^DD",4.005,4.005,5,21,0)
^^1^1^3050818^
"^DD",4.005,4.005,5,21,1,0)
Computed MD5 checksum value, 32 cha long.
"^DD",4.005,4.005,5,"DT")
3050818
"^DD",4.005,4.005,6,0)
Debug Mode^NJ3,1^^0;2^K:+X'=X!(X>9)!(X<0)!(X?.E1"."2.N) X
"^DD",4.005,4.005,6,3)
Type a number between 0 and 9, 1 Decimal Digit
"^DD",4.005,4.005,6,21,0)
^^6^6^3050818^
"^DD",4.005,4.005,6,21,1,0)
Field indicates the level of response.
"^DD",4.005,4.005,6,21,2,0)
MODE = 0 regular mode.. last HASH value returned in Apl. ACK.
"^DD",4.005,4.005,6,21,3,0)
       1 debugging mode.. all values + hash codess returned in Apl ACK
"^DD",4.005,4.005,6,21,4,0)
       1.1 debugging mode.. all values (no hash codes) returned in Apl ACK
"^DD",4.005,4.005,6,21,5,0)
       2 debugging mode.. all fields values, all hash values,all hash 
"^DD",4.005,4.005,6,21,6,0)
         codes returned in Apl. ACK.
"^DD",4.005,4.005,6,"DT")
3050818
"^DD",4.005,4.0051,0)
FILE/SUBFILE NUMBER SUB-FIELD^^1^2
"^DD",4.005,4.0051,0,"DT")
3060626
"^DD",4.005,4.0051,0,"IX","B",4.0051,.01)

"^DD",4.005,4.0051,0,"NM","FILE/SUBFILE NUMBER")

"^DD",4.005,4.0051,0,"UP")
4.005
"^DD",4.005,4.0051,.01,0)
FILE/SUBFILE NUMBER^MFX^^0;1^K:$L(X)>15!($L(X)<1) X S:$D(X) DINUM=X
"^DD",4.005,4.0051,.01,.1)
File/Subfile Number
"^DD",4.005,4.0051,.01,1,0)
^.1
"^DD",4.005,4.0051,.01,1,1,0)
4.0051^B
"^DD",4.005,4.0051,.01,1,1,1)
S ^DIC(4.005,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.005,4.0051,.01,1,1,2)
K ^DIC(4.005,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.005,4.0051,.01,3)
Select file/subfile number to be included in MD5 procedure of the Master File Server (MFS) mechanism
"^DD",4.005,4.0051,.01,21,0)
^^2^2^3050818^
"^DD",4.005,4.0051,.01,21,1,0)
This field is the Internal File Number (IFN) of the MD5 table supported 
"^DD",4.005,4.0051,.01,21,2,0)
by the Master File Server (MFS).
"^DD",4.005,4.0051,.01,"DT")
3060517
"^DD",4.005,4.0051,1,0)
FIELD NUMBER^4.00511^^1;0
"^DD",4.005,4.0051,1,21,0)
^.001^2^2^3060705^^^^
"^DD",4.005,4.0051,1,21,1,0)
This is the field number of file/subfile to be included in MD5 procedure 
"^DD",4.005,4.0051,1,21,2,0)
of the Master File Server (MFS).
"^DD",4.005,4.00511,0)
FIELD NUMBER SUB-FIELD^^4^5
"^DD",4.005,4.00511,0,"DT")
3060626
"^DD",4.005,4.00511,0,"IX","B",4.00511,.01)

"^DD",4.005,4.00511,0,"NM","FIELD NUMBER")

"^DD",4.005,4.00511,0,"UP")
4.0051
"^DD",4.005,4.00511,.01,0)
FIELD NUMBER^MFX^^0;1^K:+X'=X!(X>999999)!(X<.001) X S:$D(X) DINUM=X
"^DD",4.005,4.00511,.01,1,0)
^.1
"^DD",4.005,4.00511,.01,1,1,0)
4.00511^B
"^DD",4.005,4.00511,.01,1,1,1)
S ^DIC(4.005,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.005,4.00511,.01,1,1,2)
K ^DIC(4.005,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.005,4.00511,.01,3)
Select field of file/subfile to be included in MD5 procedure of the Master File Server (MFS).
"^DD",4.005,4.00511,.01,"DT")
3060517
"^DD",4.005,4.00511,1,0)
SEQUNCE^NJ5,0^^0;2^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",4.005,4.00511,1,3)
Type the sequence # the field will be taken in MD5 hash.
"^DD",4.005,4.00511,1,21,0)
^^1^1^3050818^
"^DD",4.005,4.00511,1,21,1,0)
Order sequence, the field will be taken in MD5 hash.
"^DD",4.005,4.00511,1,"DT")
3050819
"^DD",4.005,4.00511,2,0)
External/Internal^S^I:INTERNAL;E:EXTERNAL;^0;3^Q
"^DD",4.005,4.00511,2,21,0)
^^1^1^3050802^
"^DD",4.005,4.00511,2,21,1,0)
Get External or internal Fileman value.. Default = Internal
"^DD",4.005,4.00511,2,"DT")
3050802
"^DD",4.005,4.00511,3,0)
VUID FROM FILE^NJ21,8^^0;4^K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."9N.N) X
"^DD",4.005,4.00511,3,3)
Enter the number of the file being pointed to.  Type '@' and press Enter to clear this setting
"^DD",4.005,4.00511,3,21,0)
^^2^2^3060426^
"^DD",4.005,4.00511,3,21,1,0)
If Pointer type field to .01 (Name), replace Name with VUID of pointed 
"^DD",4.005,4.00511,3,21,2,0)
file. Field holds Pointed File #.
"^DD",4.005,4.00511,3,"DT")
3060426
"^DD",4.005,4.00511,4,0)
Distinct values^S^0:NO;1:YES;^0;5^Q
"^DD",4.005,4.00511,4,"DT")
3060705
"^DIC",4.001,4.001,0)
MASTER FILE PARAMETERS^4.001P
"^DIC",4.001,4.001,0,"GL")
^DIC(4.001,
"^DIC",4.001,4.001,"%",0)
^1.005^^0
"^DIC",4.001,4.001,"%D",0)
^^9^9^3031228^^
"^DIC",4.001,4.001,"%D",1,0)
The file holds parameters related to the Master File Server (MFS).
"^DIC",4.001,4.001,"%D",2,0)
 
"^DIC",4.001,4.001,"%D",3,0)
DO NOT EDIT THIS FILE!
"^DIC",4.001,4.001,"%D",4,0)
 
"^DIC",4.001,4.001,"%D",5,0)
The parameters map HL7 segment data to standard
"^DIC",4.001,4.001,"%D",6,0)
FileMan data files.  Local modifications to this
"^DIC",4.001,4.001,"%D",7,0)
file will seriously disrupt standard file updating
"^DIC",4.001,4.001,"%D",8,0)
and have negative consequences to existing VistA
"^DIC",4.001,4.001,"%D",9,0)
applications.
"^DIC",4.001,"B","MASTER FILE PARAMETERS",4.001)

"^DIC",4.005,4.005,0)
MD5 Signature^4.005
"^DIC",4.005,4.005,0,"GL")
^DIC(4.005,
"^DIC",4.005,4.005,"%",0)
^1.005^^0
"^DIC",4.005,4.005,"%D",0)
^^9^9^3050818^
"^DIC",4.005,4.005,"%D",1,0)
The file holds parameters related to the MD5 signature of  the Master 
"^DIC",4.005,4.005,"%D",2,0)
File Server(MFS).
"^DIC",4.005,4.005,"%D",3,0)
 
"^DIC",4.005,4.005,"%D",4,0)
DO NOT EDIT THIS FILE!
"^DIC",4.005,4.005,"%D",5,0)
 
"^DIC",4.005,4.005,"%D",6,0)
For each domain (Allergy, Vitals),  The parameters defines the file's 
"^DIC",4.005,4.005,"%D",7,0)
fields to be included in MD5 hash procedure.  Local modifications to this 
"^DIC",4.005,4.005,"%D",8,0)
file will seriously disrupt standard file updating and have negative 
"^DIC",4.005,4.005,"%D",9,0)
consequences to existing VistA applications.  
"^DIC",4.005,"B","MD5 Signature",4.005)

"BLD",5878,6)
^354
**END**
**END**
