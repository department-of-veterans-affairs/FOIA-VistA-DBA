Released XU*8*41 SEQ #31
Extracted from mail message
**KIDS**:XU*8.0*41^

**INSTALL NAME**
XU*8.0*41
"BLD",114,0)
XU*8.0*41^KERNEL^0^2960829^n
"BLD",114,1,0)
^^61^61^2960829^^^^
"BLD",114,1,1,0)
 This patch contains the following features:
"BLD",114,1,2,0)

"BLD",114,1,3,0)
-Fixes problems when installing PCE 1.0; 
"BLD",114,1,4,0)
  When Options and Protocols are disabled and the Install is restarted, those
"BLD",114,1,5,0)
  Protocols remain disabled even when install finishes. Nois MAR-0896-20332
"BLD",114,1,6,0)
  Protocols are installed without pointer to the Package file.
"BLD",114,1,7,0)
  All routines were not being installed on all CPUs.
"BLD",114,1,8,0)
-Fixes bad expression error in DIK1 when loading patch GMRA*4*2 or DVBA*2.7*11
"BLD",114,1,9,0)
 Nois POR-0896-50403
"BLD",114,1,10,0)
-KIDS will now send an Alert if an Install encounters an error.
"BLD",114,1,11,0)
==============================================================================
"BLD",114,1,12,0)

"BLD",114,1,13,0)
This patch should be installed during off-peak hours. Users can be on the
"BLD",114,1,14,0)
system, but no user should be using KIDS during the install of this patch.
"BLD",114,1,15,0)
Since this patch is an update to KIDS, this patch should not be installed
"BLD",114,1,16,0)
with any other patch.
"BLD",114,1,17,0)

"BLD",114,1,18,0)
**MSM sites must manually move the routines XPDIJ and XPDCPU to their other
"BLD",114,1,19,0)
  CPUs. KIDS cannot automatically move this routines for you.**
"BLD",114,1,20,0)
==============================================================================
"BLD",114,1,21,0)
  
"BLD",114,1,22,0)
INSTALLATION:
"BLD",114,1,23,0)
  1.  These routines are usually mapped on systems that allow mapping,
"BLD",114,1,24,0)
      so you will need to disable mapping for the effected routines.
"BLD",114,1,25,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",114,1,26,0)
      option will load the KIDS package onto your system.
"BLD",114,1,27,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",114,1,28,0)
      system. You now need to use KIDS to install the Transport global.
"BLD",114,1,29,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"BLD",114,1,30,0)
      options:
"BLD",114,1,31,0)
         Print Transport Global
"BLD",114,1,32,0)
         Compare Transport Global to Current System
"BLD",114,1,33,0)
         Verify Checksums in Transport Global
"BLD",114,1,34,0)
         Backup a Transport Global
"BLD",114,1,35,0)
         Install Package(s)
"BLD",114,1,36,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"BLD",114,1,37,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"BLD",114,1,38,0)
  6.  MSM Sites - D ^%RCOPY to move the routine XPDIJ and XPDCPU to your
"BLD",114,1,39,0)
      other CPUs.
"BLD",114,1,40,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"BLD",114,1,41,0)
 ===========================================================================
"BLD",114,1,42,0)
  
"BLD",114,1,43,0)
 ROUTINES:
"BLD",114,1,44,0)
   The second line of the routine now looks like:
"BLD",114,1,45,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"BLD",114,1,46,0)
 
"BLD",114,1,47,0)
 Name           Checksum        Patch List
"BLD",114,1,48,0)
 -----------------------------------------------------------
"BLD",114,1,49,0)
 XPDCPU         6456291         41
"BLD",114,1,50,0)
 XPDET          4654700         15,39,41
"BLD",114,1,51,0)
 XPDI           15955866        10,21,39,41
"BLD",114,1,52,0)
 XPDIGP         6735250         41
"BLD",114,1,53,0)
 XPDIJ          10666490        2,21,28,41
"BLD",114,1,54,0)
 XPDIJ1         8772642         41
"BLD",114,1,55,0)
 XPDIL1         6509127         15,17,39,41
"BLD",114,1,56,0)
 XPDIP          9642216         15,21,28,30,41
"BLD",114,1,57,0)
 XPDIU          6010331         15,41
"BLD",114,1,58,0)
 XPDT           17390342        2,10,28,41
"BLD",114,1,59,0)
 XPDTC          12638033        10,15,21,39,41
"BLD",114,1,60,0)
 XQOO1          14519526        10,21,39,41
"BLD",114,1,61,0)
 ============================================================================
"BLD",114,4,0)
^9.64PA^^
"BLD",114,"ABPKG")
n
"BLD",114,"KRN",0)
^9.67PA^8994^15
"BLD",114,"KRN",.4,0)
.4
"BLD",114,"KRN",.401,0)
.401
"BLD",114,"KRN",.402,0)
.402
"BLD",114,"KRN",.403,0)
.403
"BLD",114,"KRN",.5,0)
.5
"BLD",114,"KRN",.84,0)
.84
"BLD",114,"KRN",3.6,0)
3.6
"BLD",114,"KRN",9.2,0)
9.2
"BLD",114,"KRN",9.8,0)
9.8
"BLD",114,"KRN",9.8,"NM",0)
^9.68A^22^12
"BLD",114,"KRN",9.8,"NM",5,0)
XPDI^^0^B49624626
"BLD",114,"KRN",9.8,"NM",10,0)
XQOO1^^0^B75430276
"BLD",114,"KRN",9.8,"NM",13,0)
XPDET^^0^B22095961
"BLD",114,"KRN",9.8,"NM",14,0)
XPDIL1^^0^B15879572
"BLD",114,"KRN",9.8,"NM",15,0)
XPDIP^^0^B35341957
"BLD",114,"KRN",9.8,"NM",16,0)
XPDCPU^^0^B13979719
"BLD",114,"KRN",9.8,"NM",17,0)
XPDIJ^^0^B26893697
"BLD",114,"KRN",9.8,"NM",18,0)
XPDTC^^0^B34290588
"BLD",114,"KRN",9.8,"NM",19,0)
XPDIU^^0^B8432812
"BLD",114,"KRN",9.8,"NM",20,0)
XPDT^^0^B46222136
"BLD",114,"KRN",9.8,"NM",21,0)
XPDIJ1^^0^B22436747
"BLD",114,"KRN",9.8,"NM",22,0)
XPDIGP^^0^B13685094
"BLD",114,"KRN",9.8,"NM","B","XPDCPU",16)

"BLD",114,"KRN",9.8,"NM","B","XPDET",13)

"BLD",114,"KRN",9.8,"NM","B","XPDI",5)

"BLD",114,"KRN",9.8,"NM","B","XPDIGP",22)

"BLD",114,"KRN",9.8,"NM","B","XPDIJ",17)

"BLD",114,"KRN",9.8,"NM","B","XPDIJ1",21)

"BLD",114,"KRN",9.8,"NM","B","XPDIL1",14)

"BLD",114,"KRN",9.8,"NM","B","XPDIP",15)

"BLD",114,"KRN",9.8,"NM","B","XPDIU",19)

"BLD",114,"KRN",9.8,"NM","B","XPDT",20)

"BLD",114,"KRN",9.8,"NM","B","XPDTC",18)

"BLD",114,"KRN",9.8,"NM","B","XQOO1",10)

"BLD",114,"KRN",19,0)
19
"BLD",114,"KRN",19.1,0)
19.1
"BLD",114,"KRN",101,0)
101
"BLD",114,"KRN",409.61,0)
409.61
"BLD",114,"KRN",8994,0)
8994
"BLD",114,"KRN",8995,0)
8995
"BLD",114,"KRN","B",.4,.4)

"BLD",114,"KRN","B",.401,.401)

"BLD",114,"KRN","B",.402,.402)

"BLD",114,"KRN","B",.403,.403)

"BLD",114,"KRN","B",.5,.5)

"BLD",114,"KRN","B",.84,.84)

"BLD",114,"KRN","B",3.6,3.6)

"BLD",114,"KRN","B",9.2,9.2)

"BLD",114,"KRN","B",9.8,9.8)

"BLD",114,"KRN","B",19,19)

"BLD",114,"KRN","B",19.1,19.1)

"BLD",114,"KRN","B",101,101)

"BLD",114,"KRN","B",409.61,409.61)

"BLD",114,"KRN","B",8994,8994)

"BLD",114,"KRN","B",8995,8995)

"BLD",114,"QUES",0)
^9.62^^
"PKG",283,-1)
1^1
"PKG",283,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",283,22,0)
^9.49I^1^1
"PKG",283,22,1,0)
8.0^2950729^2950729^6
"PKG",283,22,1,"PAH",1,0)
41^2960829^6
"PKG",283,22,1,"PAH",1,1,0)
^^61^61^2960830
"PKG",283,22,1,"PAH",1,1,1,0)
 This patch contains the following features:
"PKG",283,22,1,"PAH",1,1,2,0)

"PKG",283,22,1,"PAH",1,1,3,0)
-Fixes problems when installing PCE 1.0; 
"PKG",283,22,1,"PAH",1,1,4,0)
  When Options and Protocols are disabled and the Install is restarted, those
"PKG",283,22,1,"PAH",1,1,5,0)
  Protocols remain disabled even when install finishes. Nois MAR-0896-20332
"PKG",283,22,1,"PAH",1,1,6,0)
  Protocols are installed without pointer to the Package file.
"PKG",283,22,1,"PAH",1,1,7,0)
  All routines were not being installed on all CPUs.
"PKG",283,22,1,"PAH",1,1,8,0)
-Fixes bad expression error in DIK1 when loading patch GMRA*4*2 or DVBA*2.7*11
"PKG",283,22,1,"PAH",1,1,9,0)
 Nois POR-0896-50403
"PKG",283,22,1,"PAH",1,1,10,0)
-KIDS will now send an Alert if an Install encounters an error.
"PKG",283,22,1,"PAH",1,1,11,0)
==============================================================================
"PKG",283,22,1,"PAH",1,1,12,0)

"PKG",283,22,1,"PAH",1,1,13,0)
This patch should be installed during off-peak hours. Users can be on the
"PKG",283,22,1,"PAH",1,1,14,0)
system, but no user should be using KIDS during the install of this patch.
"PKG",283,22,1,"PAH",1,1,15,0)
Since this patch is an update to KIDS, this patch should not be installed
"PKG",283,22,1,"PAH",1,1,16,0)
with any other patch.
"PKG",283,22,1,"PAH",1,1,17,0)

"PKG",283,22,1,"PAH",1,1,18,0)
**MSM sites must manually move the routines XPDIJ and XPDCPU to their other
"PKG",283,22,1,"PAH",1,1,19,0)
  CPUs. KIDS cannot automatically move this routines for you.**
"PKG",283,22,1,"PAH",1,1,20,0)
==============================================================================
"PKG",283,22,1,"PAH",1,1,21,0)
  
"PKG",283,22,1,"PAH",1,1,22,0)
INSTALLATION:
"PKG",283,22,1,"PAH",1,1,23,0)
  1.  These routines are usually mapped on systems that allow mapping,
"PKG",283,22,1,"PAH",1,1,24,0)
      so you will need to disable mapping for the effected routines.
"PKG",283,22,1,"PAH",1,1,25,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",283,22,1,"PAH",1,1,26,0)
      option will load the KIDS package onto your system.
"PKG",283,22,1,"PAH",1,1,27,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",283,22,1,"PAH",1,1,28,0)
      system. You now need to use KIDS to install the Transport global.
"PKG",283,22,1,"PAH",1,1,29,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"PKG",283,22,1,"PAH",1,1,30,0)
      options:
"PKG",283,22,1,"PAH",1,1,31,0)
         Print Transport Global
"PKG",283,22,1,"PAH",1,1,32,0)
         Compare Transport Global to Current System
"PKG",283,22,1,"PAH",1,1,33,0)
         Verify Checksums in Transport Global
"PKG",283,22,1,"PAH",1,1,34,0)
         Backup a Transport Global
"PKG",283,22,1,"PAH",1,1,35,0)
         Install Package(s)
"PKG",283,22,1,"PAH",1,1,36,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"PKG",283,22,1,"PAH",1,1,37,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"PKG",283,22,1,"PAH",1,1,38,0)
  6.  MSM Sites - D ^%RCOPY to move the routine XPDIJ and XPDCPU to your
"PKG",283,22,1,"PAH",1,1,39,0)
      other CPUs.
"PKG",283,22,1,"PAH",1,1,40,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"PKG",283,22,1,"PAH",1,1,41,0)
 ===========================================================================
"PKG",283,22,1,"PAH",1,1,42,0)
  
"PKG",283,22,1,"PAH",1,1,43,0)
 ROUTINES:
"PKG",283,22,1,"PAH",1,1,44,0)
   The second line of the routine now looks like:
"PKG",283,22,1,"PAH",1,1,45,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"PKG",283,22,1,"PAH",1,1,46,0)
 
"PKG",283,22,1,"PAH",1,1,47,0)
 Name           Checksum        Patch List
"PKG",283,22,1,"PAH",1,1,48,0)
 -----------------------------------------------------------
"PKG",283,22,1,"PAH",1,1,49,0)
 XPDCPU         6456291         41
"PKG",283,22,1,"PAH",1,1,50,0)
 XPDET          4654700         15,39,41
"PKG",283,22,1,"PAH",1,1,51,0)
 XPDI           15955866        10,21,39,41
"PKG",283,22,1,"PAH",1,1,52,0)
 XPDIGP         6735250         41
"PKG",283,22,1,"PAH",1,1,53,0)
 XPDIJ          10666490        2,21,28,41
"PKG",283,22,1,"PAH",1,1,54,0)
 XPDIJ1         8772642         41
"PKG",283,22,1,"PAH",1,1,55,0)
 XPDIL1         6509127         15,17,39,41
"PKG",283,22,1,"PAH",1,1,56,0)
 XPDIP          9642216         15,21,28,30,41
"PKG",283,22,1,"PAH",1,1,57,0)
 XPDIU          6010331         15,41
"PKG",283,22,1,"PAH",1,1,58,0)
 XPDT           17390342        2,10,28,41
"PKG",283,22,1,"PAH",1,1,59,0)
 XPDTC          12638033        10,15,21,39,41
"PKG",283,22,1,"PAH",1,1,60,0)
 XQOO1          14519526        10,21,39,41
"PKG",283,22,1,"PAH",1,1,61,0)
 ============================================================================
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
12
"RTN","XPDCPU")
0^16^B13979719
"RTN","XPDCPU",1,0)
XPDCPU ;SFISC/RWF,RSD - Code that update each cpu ;08/29/96  08:25
"RTN","XPDCPU",2,0)
 ;;8.0;KERNEL;**41**;Jul 03, 1995
"RTN","XPDCPU",3,0)
 N DIC,X,XPDA
"RTN","XPDCPU",4,0)
 S DIC("S")="I $P(^(0),U,9)=2,$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))"
"RTN","XPDCPU",5,0)
 D EN1 Q:'XPDA
"RTN","XPDCPU",6,0)
 S X=$O(^XPD(9.7,XPDA,"VOL","B",^%ZOSF("VOL"),0)) Q:'X
"RTN","XPDCPU",7,0)
 D EN(XPDA,X)
"RTN","XPDCPU",8,0)
 Q
"RTN","XPDCPU",9,0)
 ;
"RTN","XPDCPU",10,0)
MOVE ;move routines to other CPU
"RTN","XPDCPU",11,0)
 N DIC,DIR,DIRUT,X,XPDA,XPDJ,Y
"RTN","XPDCPU",12,0)
 S DIC("S")="I $P(^(0),U,9)=3"
"RTN","XPDCPU",13,0)
 D EN1 Q:'XPDA
"RTN","XPDCPU",14,0)
 S DIR(0)="Y",DIR("A")="Want to move the Routine for this Package to another CPU",DIR("B")="YES",DIR("?")="YES means you want to update the routines on another CPU"
"RTN","XPDCPU",15,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDCPU",16,0)
 K ^XTMP("XPDR",XPDA)
"RTN","XPDCPU",17,0)
 S ^XTMP("XPDR",0)=DT_U_DT,XPDJ=""
"RTN","XPDCPU",18,0)
 F  S XPDJ=$O(^XPD(9.7,XPDA,"RTN","B",XPDJ)) Q:XPDJ=""  D
"RTN","XPDCPU",19,0)
 .Q:XPDJ="XPDCPU"
"RTN","XPDCPU",20,0)
 .N DIF,XCNP,%N
"RTN","XPDCPU",21,0)
 .S DIF="^XTMP(""XPDR"",XPDA,""RTN"",XPDJ,",XCNP=0,X=XPDJ
"RTN","XPDCPU",22,0)
 .X ^%ZOSF("LOAD")
"RTN","XPDCPU",23,0)
 I $D(^XTMP("XPDR",XPDA)) W !!,"Run INSTALL^XPDCPU on the other CPU to install the Routines.",!
"RTN","XPDCPU",24,0)
 Q
"RTN","XPDCPU",25,0)
INSTALL ;install routines
"RTN","XPDCPU",26,0)
 N DIC,DIR,DIRUT,X,XPDA,XPDJ,Y
"RTN","XPDCPU",27,0)
 S DIC("S")="I $P(^(0),U,9)=3,$D(^XTMP(""XPDR"",Y))"
"RTN","XPDCPU",28,0)
 D EN1 Q:'XPDA
"RTN","XPDCPU",29,0)
 S DIR(0)="Y",DIR("A")="Want to install the Routine for this Package",DIR("B")="YES",DIR("?")="YES means you want to install the routines on this CPU"
"RTN","XPDCPU",30,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDCPU",31,0)
 S XPDJ=""
"RTN","XPDCPU",32,0)
 F  S XPDJ=$O(^XTMP("XPDR",XPDA,"RTN",XPDJ)) Q:XPDJ=""  D
"RTN","XPDCPU",33,0)
 .N %,DIE,XCM,XCN,XCS
"RTN","XPDCPU",34,0)
 .S DIE="^XTMP(""XPDR"",XPDA,""RTN"",XPDJ,",XCN=0,X=XPDJ
"RTN","XPDCPU",35,0)
 .X ^%ZOSF("SAVE")
"RTN","XPDCPU",36,0)
 W !!,"Done",!!
"RTN","XPDCPU",37,0)
 Q
"RTN","XPDCPU",38,0)
 ;
"RTN","XPDCPU",39,0)
EN(XPDA,XPDVDA) ;XPDA=ien of INSTALL file, XPDVDA=VOLUME SET ien
"RTN","XPDCPU",40,0)
 L +^XPD(9.7,XPDA,"VOL",XPDVDA):2 E  W:IO]"" !,"Can't Lock global, another XPDCPU must be running",! Q
"RTN","XPDCPU",41,0)
 N Y,%,XPDNM
"RTN","XPDCPU",42,0)
 S Y=0,ZTREQ="@"
"RTN","XPDCPU",43,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%  Q:$D(XPDABORT)
"RTN","XPDCPU",44,0)
 .N XPDA,Y
"RTN","XPDCPU",45,0)
 .S XPDA=%,XPDNM=$P($G(^XPD(9.7,XPDA,0)),U) D EN2
"RTN","XPDCPU",46,0)
 Q
"RTN","XPDCPU",47,0)
EN1 ;ask for Install
"RTN","XPDCPU",48,0)
 N Y S XPDA=0
"RTN","XPDCPU",49,0)
 I $D(DUZ)_$D(DUZ(0))_$D(U)[0 D DT^DICRW
"RTN","XPDCPU",50,0)
 S DIC(0)="QEAMZ",DIC="^XPD(9.7,"
"RTN","XPDCPU",51,0)
 D ^DIC K DIC Q:Y'>0
"RTN","XPDCPU",52,0)
 S XPDA=+Y
"RTN","XPDCPU",53,0)
 Q
"RTN","XPDCPU",54,0)
EN2 N X,XPD,XPDBLD,XPDI,ZTUCI,ZTCPU,ZTRTN,ZTDTH,ZTIO,ZTDESC
"RTN","XPDCPU",55,0)
 ;must have XTMP & entry in file 9.7
"RTN","XPDCPU",56,0)
 Q:'$D(^XTMP("XPDI",XPDA))!'$D(^XPD(9.7,XPDA,0))
"RTN","XPDCPU",57,0)
 ;hang 1 hr or until VOLUME multiple is set, XPDIJ sets VOL multiple
"RTN","XPDCPU",58,0)
 F X=0:1:60 Q:$D(^XPD(9.7,XPDA,"VOL",+$G(XPDVDA),0))  H 60 W:IO]"" "."
"RTN","XPDCPU",59,0)
 I X=60 W:IO]"" !!,"Package ",$P(^XPD(9.7,XPDA,0),U)," never installed",! Q
"RTN","XPDCPU",60,0)
 S XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDCPU",61,0)
 D FILE(2),UPDT
"RTN","XPDCPU",62,0)
 W:IO]"" !,"Loading Routines"
"RTN","XPDCPU",63,0)
 I $D(^XTMP("XPDI",XPDA,"RTN","XPDCPU")) S X=$$RTNUP^XPDUTL("XPDCPU",2)
"RTN","XPDCPU",64,0)
 ;make sure routines have been loaded
"RTN","XPDCPU",65,0)
 F X=0:1:60 Q:$P($G(^XPD(9.7,XPDA,1)),U,2)  H 60 W:IO]"" "." D UPDT
"RTN","XPDCPU",66,0)
 D UPDT,RTN^XPDIJ(XPDA),UPDT
"RTN","XPDCPU",67,0)
 W:IO]"" !!,"Recompiling Template routines"
"RTN","XPDCPU",68,0)
 F XPD="DIKZ","DIEZ","DIPZ" D
"RTN","XPDCPU",69,0)
 .S XPDI="" Q:'$$CHCK
"RTN","XPDCPU",70,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPD,XPDI)) Q:'XPDI  S X=^(XPDI) D:X]"" @("EN2^"_XPD_"("""_XPDI_""","""","""_X_""")"),UPDT
"RTN","XPDCPU",71,0)
 D UPDT,FILE(1)
"RTN","XPDCPU",72,0)
 Q
"RTN","XPDCPU",73,0)
CHCK() ;check if the component is installed, return 1 if installed, 0 to abort
"RTN","XPDCPU",74,0)
 N XPDC,Y
"RTN","XPDCPU",75,0)
 I XPD="DIKZ" S XPDC="S Y=$G(^(+$O(^XPD(9.7,XPDA,4,""A""),-1),0))"
"RTN","XPDCPU",76,0)
 E  S Y=$S(XPD="DIPZ":.4,1:.402),XPDC="S Y=$G(^XPD(9.7,XPDA,""KRN"","_Y_",0))"
"RTN","XPDCPU",77,0)
 F  X XPDC Q:'Y!$P(Y,U,2)  H 60 D UPDT W:IO]"" "." I $D(ZTMQUE),$$STOP^%ZTLOAD S Y=0 Q
"RTN","XPDCPU",78,0)
 Q ''Y
"RTN","XPDCPU",79,0)
FILE(XPDF) ;set NOW into the VOLUME SET multiple, XPDF=field number
"RTN","XPDCPU",80,0)
 N XPD
"RTN","XPDCPU",81,0)
 S XPD(9.703,XPDVDA_","_XPDA_",",XPDF)=$$NOW^XLFDT
"RTN","XPDCPU",82,0)
 D FILE^DIE("","XPD")
"RTN","XPDCPU",83,0)
 Q
"RTN","XPDCPU",84,0)
UPDT ;update $H into VOLUME SET multiple, field 4
"RTN","XPDCPU",85,0)
 S ^XPD(9.7,XPDA,"VOL",XPDVDA,1)=$H
"RTN","XPDCPU",86,0)
 Q
"RTN","XPDET")
0^13^B22095961
"RTN","XPDET",1,0)
XPDET ;SFISC/RSD - Input tranforms & help for file 9.6 ;08/09/96  14:28
"RTN","XPDET",2,0)
 ;;8.0;KERNEL;**15,39,41**;Jul 10, 1995
"RTN","XPDET",3,0)
 Q
"RTN","XPDET",4,0)
INPUTB(X) ;input tranfrom for NAME in BUILD file
"RTN","XPDET",5,0)
 ;X=user input
"RTN","XPDET",6,0)
 ;name must be unique
"RTN","XPDET",7,0)
 I $L(X)>50!($L(X)<3)!$D(^XPD(9.6,"B",X)) K X Q
"RTN","XPDET",8,0)
 I X["*" K:$P(X,"*",2,3)'?1.2N1"."1.2N.1(1"V",1"T").2N1"*"1.3N X Q
"RTN","XPDET",9,0)
 S %=$L(X," ") I %<2 K X Q
"RTN","XPDET",10,0)
 S %=$P(X," ",%) K:%'?1.2N1"."1.2N.1(1"V",1"T").2N X
"RTN","XPDET",11,0)
 Q
"RTN","XPDET",12,0)
INPUTE(X) ;input transform for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",13,0)
 ;X=user input
"RTN","XPDET",14,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,XPDLK,Y
"RTN","XPDET",15,0)
 S XPDLK=$$GR(D1)
"RTN","XPDET",16,0)
 I XPDLK=""!X["*" K X Q
"RTN","XPDET",17,0)
 S DIC(0)="QEMZ",DIC=XPDLK
"RTN","XPDET",18,0)
 S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",19,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",20,0)
 S X=Y(0,0)
"RTN","XPDET",21,0)
 ;check that this doesn't exist already
"RTN","XPDET",22,0)
 I $D(^XPD(9.6,D0,"KRN",D1,"NM","B",X)) K X Q
"RTN","XPDET",23,0)
 ;if fm file, change X to contain file # of template
"RTN","XPDET",24,0)
 I D1<.404 S X=$$TX(X,$P(Y(0),U,$S(D1=.403:8,1:4)))
"RTN","XPDET",25,0)
 Q
"RTN","XPDET",26,0)
GLOBALE(X) ;input transform for GLOBAL multiple .01 field in file 9.6
"RTN","XPDET",27,0)
 I $L(X)>30!($L(X)<2) K X Q
"RTN","XPDET",28,0)
 I X["(",X'[")" K X Q
"RTN","XPDET",29,0)
 ;change ' back to " for subscripts, they were changed in the Pre-Lookup node of the DD, 7.5. This was done to trick FM, which doesn't allow " in .01 fields
"RTN","XPDET",30,0)
 S X=$TR(X,"'","""")
"RTN","XPDET",31,0)
 I '$D(@("^"_X)) K X
"RTN","XPDET",32,0)
 Q
"RTN","XPDET",33,0)
LOOKE(X) ;special lookup for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",34,0)
 Q:X'?1.E1"*"
"RTN","XPDET",35,0)
 N %,XPD,XPDI,XPDIC,XPDF,XPDLK,XPDX,Y
"RTN","XPDET",36,0)
 S XPDLK=$$GR(D1),XPDIC=DIC,XPDF=D1
"RTN","XPDET",37,0)
 I XPDLK="" K X Q
"RTN","XPDET",38,0)
 G:$E(X)="-" DEL
"RTN","XPDET",39,0)
 S XPDX=$P(X,"*"),XPDI("IEN")=0
"RTN","XPDET",40,0)
 D LIST^DIC(D1,"","","","*",.XPDI,XPDX,"","I $$SCR^XPDET(Y)")
"RTN","XPDET",41,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",42,0)
 K ^TMP("XPDX",$J)
"RTN","XPDET",43,0)
 ;loop thru list from lister and file using UPDATE^DIE
"RTN","XPDET",44,0)
 F XPDI=1:1 S X=$G(^TMP("DILIST",$J,1,XPDI)) Q:X=""  D
"RTN","XPDET",45,0)
 .S:D1<.404 %=^TMP("DILIST",$J,2,XPDI)_",",X=$$TX(X,$$GET1^DIQ(D1,%,$$TF(D1),"I"))
"RTN","XPDET",46,0)
 .S Y="+"_XPDI_","_D1_","_D0_",",^TMP("XPDX",$J,9.68,Y,.01)=X,^(.03)=0
"RTN","XPDET",47,0)
 I $D(^TMP("XPDX",$J)) D UPDATE^DIE("","^TMP(""XPDX"",$J)","^TMP(""XPD"",$J)")
"RTN","XPDET",48,0)
 ;if in Screenman then call MLOAD to update screen
"RTN","XPDET",49,0)
 I $D(DDS),$D(^TMP("XPD",$J)) D MLOAD^DDSUTL("^TMP(""XPD"",$J)")
"RTN","XPDET",50,0)
 S X=""
"RTN","XPDET",51,0)
 K ^TMP("XPDX",$J),^TMP("XPD",$J)
"RTN","XPDET",52,0)
 Q
"RTN","XPDET",53,0)
DEL ;delete using wild card
"RTN","XPDET",54,0)
 I X'?1"-"1.E1"*" K X Q
"RTN","XPDET",55,0)
 S X=$E(X,2,$L(X)-1),XPDX=X S:$L(X) XPDI("IEN")=0
"RTN","XPDET",56,0)
 D LIST^DIC(9.68,","_D1_","_D0_",","","","*",.XPDI,XPDX)
"RTN","XPDET",57,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",58,0)
 N DIK,DA,D2
"RTN","XPDET",59,0)
 S DIK=XPDIC,DA(1)=D1,DA(2)=D0
"RTN","XPDET",60,0)
 F XPDI=1:1 S (DA,D2)=$G(^TMP("DILIST",$J,2,XPDI)) Q:'DA  D
"RTN","XPDET",61,0)
 .D ^DIK
"RTN","XPDET",62,0)
 I $D(DDS) D MDEL^DDSUTL("^TMP(""DILIST"",$J,2)")
"RTN","XPDET",63,0)
 S X=""
"RTN","XPDET",64,0)
 K ^TMP("DILIST",$J)
"RTN","XPDET",65,0)
 Q
"RTN","XPDET",66,0)
HELP ;executable help of ENTRIES in KERNEL FILE multiple
"RTN","XPDET",67,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",68,0)
 ;file 9.8 is routine file, check that routine exists
"RTN","XPDET",69,0)
 S DIC=$$GR(D1),DIC(0)="M",X="??" Q:DIC=""  S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",70,0)
 D ^DIC Q
"RTN","XPDET",71,0)
HELPO ;executable help of INSTALL ORDER in KERNEL FILES multiple
"RTN","XPDET",72,0)
 N Y
"RTN","XPDET",73,0)
 W !,"Numbers in use:  ORDER     FILE#" S Y=0
"RTN","XPDET",74,0)
 F  S Y=$O(^XPD(9.6,D0,"KRN","AC",Y)) Q:'Y  W !,?18,$J(Y,2),?28,$O(^(Y,0))
"RTN","XPDET",75,0)
 W ! Q
"RTN","XPDET",76,0)
 ;
"RTN","XPDET",77,0)
SCRA(Y) ;screen of ACTION field in ENTRIES multiple in KERNEL FILES multiple, Y=action
"RTN","XPDET",78,0)
 ;Y=0 - send, 1 - delete, 2 - link, 3 - merge
"RTN","XPDET",79,0)
 ;all files can send to site
"RTN","XPDET",80,0)
 Q:'Y 1
"RTN","XPDET",81,0)
 ;.5=function file, can't delete, all others can
"RTN","XPDET",82,0)
 I Y=1 Q (D1'=.5)
"RTN","XPDET",83,0)
 ;then rest of code check if it is a Option or Protocal and can have MENU ITEMS
"RTN","XPDET",84,0)
 Q:D1'=19&(D1'=101) 0
"RTN","XPDET",85,0)
 N FGR,X
"RTN","XPDET",86,0)
 S X=$P(^XPD(9.6,D0,"KRN",D1,"NM",D2,0),U),FGR=$$FILE^XPDV(D1)
"RTN","XPDET",87,0)
 Q:X="" 0
"RTN","XPDET",88,0)
 S X=+$O(@FGR@("B",X,0))
"RTN","XPDET",89,0)
 ;if it has ITEMs, node 10 then ok
"RTN","XPDET",90,0)
 I $O(@FGR@(X,10,0)) Q 1
"RTN","XPDET",91,0)
 ;if type is menu,potocol,protocol menu,limited,extended,window suite
"RTN","XPDET",92,0)
 I "MOQLXZ"[$P($G(@FGR@(X,0)),U,4) Q 1
"RTN","XPDET",93,0)
 Q 0
"RTN","XPDET",94,0)
 ;
"RTN","XPDET",95,0)
 ;only Fileman templates need to know what file they are associated with.
"RTN","XPDET",96,0)
 ;this value is also triggered to field .02 in the DD.
"RTN","XPDET",97,0)
TX(X,Y) ;X=template name, Y=file #
"RTN","XPDET",98,0)
 Q X_"    FILE #"_Y
"RTN","XPDET",99,0)
 ;
"RTN","XPDET",100,0)
TF(F) ;F=file, return field of file# for templates
"RTN","XPDET",101,0)
 Q $S(F>.403:"",F<.403:4,1:7)
"RTN","XPDET",102,0)
 ;
"RTN","XPDET",103,0)
GR(X) Q $G(^DIC(X,0,"GL"))
"RTN","XPDET",104,0)
 ;
"RTN","XPDET",105,0)
 ;screens checks that X is not already in the ENTRIES multiple
"RTN","XPDET",106,0)
SCR(Y) ;screen logic for ENTRIES multiple in file 9.6
"RTN","XPDET",107,0)
 N %,X,Z
"RTN","XPDET",108,0)
 S Z=^(0),X=$P(Z,U)
"RTN","XPDET",109,0)
 ;FM files are less than .44
"RTN","XPDET",110,0)
 I XPDF<.44 D  Q:X="" 0
"RTN","XPDET",111,0)
 .S %=$S(XPDF=.403:$P(Z,U,8),1:$P(Z,U,4)),X=X_"    FILE #"_%
"RTN","XPDET",112,0)
 .S:XPDF'=.403&($P(Z,U,8)>2) %=0 S:'% X=""
"RTN","XPDET",113,0)
 ;routine must exist and must be type 'R'
"RTN","XPDET",114,0)
 I XPDF=9.8 Q:$T(^@X)=""!($P(Z,U,2)'="R") 0
"RTN","XPDET",115,0)
 Q '$D(@(XPDIC_"""B"",X)"))
"RTN","XPDET",116,0)
 ;
"RTN","XPDET",117,0)
 ;screen checks that X is not in the exclude list, XPDN(0)
"RTN","XPDET",118,0)
SCR1(Y) ;screen logic for exclude list
"RTN","XPDET",119,0)
 N %,X
"RTN","XPDET",120,0)
 ;if name X is in the exclude list, XPDN(0,X), then fail
"RTN","XPDET",121,0)
 S Y(0)=^(0),X=$P(Y(0),U) Q:$D(XPDN(0,X)) 0
"RTN","XPDET",122,0)
 ;check if X is refered in the namespace by check the subscript
"RTN","XPDET",123,0)
 ;before X, if sub exist and $P(X,sub)="" then it is part of the
"RTN","XPDET",124,0)
 ;namespace, fail and return 0
"RTN","XPDET",125,0)
 S %=$O(XPDN(0,X),-1) I $L(%) Q:$P(X,%)="" 0
"RTN","XPDET",126,0)
 Q $$SCR(.Y)
"RTN","XPDET",127,0)
 ;
"RTN","XPDET",128,0)
 ;screen on PACKAGE LINK field in file 9.6,
"RTN","XPDET",129,0)
PCK(Y) ;check Package File name, Y=ien in package file
"RTN","XPDET",130,0)
 N %,Y,Z
"RTN","XPDET",131,0)
 S Z=^(0)
"RTN","XPDET",132,0)
 ;DA is undef when you are adding a new Build without a version number
"RTN","XPDET",133,0)
 Q:'$D(^XPD(9.6,+$G(DA),0)) 1
"RTN","XPDET",134,0)
 S Y=$L($P(Z,U)),%=$P(^XPD(9.6,DA,0),U),%=$$PKG^XPDUTL(%)
"RTN","XPDET",135,0)
 Q $P(Z,U)=$E(%,1,Y)!($P(Z,U,2)=%)
"RTN","XPDET",136,0)
VOLE(X) ;input transform for VOLUME SET multiple in INSTALL file
"RTN","XPDET",137,0)
 ;X=user input
"RTN","XPDET",138,0)
 N D,DD,DIC,DICR,DIX,DIY,DO,DS,XPD,Y,%
"RTN","XPDET",139,0)
 S DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I ""CP""[$P(^(0),U,10)"
"RTN","XPDET",140,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",141,0)
 S X=Y(0,0)
"RTN","XPDET",142,0)
 Q
"RTN","XPDET",143,0)
VOLH ;executable help for VOLUME SET multiple in INSTALL file
"RTN","XPDET",144,0)
 N D,DD,DIC,DIE,DIX,DIY,DO,DS,DZ,X,Y,%
"RTN","XPDET",145,0)
 S X="??",DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I ""CP""[$P(^(0),U,10)"
"RTN","XPDET",146,0)
 D ^DIC
"RTN","XPDET",147,0)
 Q
"RTN","XPDET",148,0)
ID97 ;identifier for Install file
"RTN","XPDET",149,0)
 N XPDET,XPD,XPD0,XPD1,XPD2,XPD9
"RTN","XPDET",150,0)
 S XPD0=$G(^(0)),XPD1=$G(^(1)),XPD2=$G(^(2)),XPD9=$P(XPD0,U,9),XPD="" Q:XPD9=""
"RTN","XPDET",151,0)
 D
"RTN","XPDET",152,0)
 .;Loaded, get DATE LOADED
"RTN","XPDET",153,0)
 .I 'XPD9 S XPD=$$FMTE^XLFDT($P(XPD0,U,3),2) Q
"RTN","XPDET",154,0)
 .Q:XPD9>3
"RTN","XPDET",155,0)
 .;Started, get INSTALL START TIME
"RTN","XPDET",156,0)
 .I XPD9=2 S XPD=$$FMTE^XLFDT($P(XPD1,U),2) Q
"RTN","XPDET",157,0)
 .;Completed, get INSTALL COMPLETE TIME
"RTN","XPDET",158,0)
 .I XPD9=3 S XPD=$$FMTE^XLFDT($P(XPD1,U,3),2) Q
"RTN","XPDET",159,0)
 .;Queued, get QUEUED TASK NUMBER
"RTN","XPDET",160,0)
 .I XPD9=1 S XPD="#"_$P(XPD0,U,6) Q
"RTN","XPDET",161,0)
 S XPDET(1)="   "_$$EXTERNAL^DILFD(9.7,.02,"",XPD9)_"  "_XPD,XPDET(1,"F")="?0"
"RTN","XPDET",162,0)
 S:XPD2]"" XPDET(2)="=> "_$E(XPD2,1,70),XPDET(2,"F")="!?5"
"RTN","XPDET",163,0)
 D EN^DDIOL(.XPDET)
"RTN","XPDET",164,0)
 Q
"RTN","XPDI")
0^5^B49624626
"RTN","XPDI",1,0)
XPDI ;SFISC/RSD - Install Process ;08/16/96  09:28
"RTN","XPDI",2,0)
 ;;8.0;KERNEL;**10,21,39,41**;Jul 10, 1995
"RTN","XPDI",3,0)
EN ;install
"RTN","XPDI",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDNM,XPDNOQUE,XPDPKG,XPDST,XPDSET,XPDSET1,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDI",5,0)
 S %="I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK(%)
"RTN","XPDI",6,0)
 Q:'XPDST!$D(XPDQUIT)
"RTN","XPDI",7,0)
 S XPDT=0,(XPDSET,XPDSET1)=$P(^XPD(9.7,XPDST,0),U) K ^TMP($J)
"RTN","XPDI",8,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D  Q:$D(XPDT)<11!$D(XPDQUIT)
"RTN","XPDI",9,0)
 .S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2),XPDPKG=+$P($G(^XPD(9.7,+XPDT(XPDT),0)),U,2),%=$P(^(0),U,5)
"RTN","XPDI",10,0)
 .;run enviroment check routine
"RTN","XPDI",11,0)
 .S %=$$ENV^XPDIL1(1) I % S:%=2 XPDQUIT=1 Q
"RTN","XPDI",12,0)
 .D QUES(XPDA) Q:'$D(XPDT(+XPDT))!$D(XPDQUIT)
"RTN","XPDI",13,0)
 .;XPDIJ=XPDA if XPDIJ routine is part of Build
"RTN","XPDI",14,0)
 .S:$D(^XTMP("XPDI",XPDA,"RTN","XPDIJ")) XPDIJ=XPDA
"RTN","XPDI",15,0)
 .D XQSET(XPDA)
"RTN","XPDI",16,0)
 ;NONE = no Build to install
"RTN","XPDI",17,0)
 G NONE^XPDIL:'$O(XPDT(""))!$D(XPDQUIT)
"RTN","XPDI",18,0)
 W ! S XPDA=XPDST,XPDNM=XPDSET
"RTN","XPDI",19,0)
 ;disable options question
"RTN","XPDI",20,0)
 D DIR^XPDIQ("XPZ") I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",21,0)
 ;XPDSET=set name,also build name, of options that will be disabled
"RTN","XPDI",22,0)
 ;XPDSET1=setname or null if they don't want to disable
"RTN","XPDI",23,0)
 D  I XPDSET1="^" D ABRTALL(2) Q
"RTN","XPDI",24,0)
 .;if they say no, set XPDET1=""
"RTN","XPDI",25,0)
 .S:'$G(XPDQUES("XPZ1")) XPDSET1="",Y=0
"RTN","XPDI",26,0)
 .S ^XTMP("XQOO",XPDSET,0)=XPDSET_$C(9)_"being installed^"_DT_U_DUZ
"RTN","XPDI",27,0)
 .I XPDSET1]"" D  Q:XPDSET1="^"!(XPDSET1="")
"RTN","XPDI",28,0)
 ..;merge the options/protocols that were put in ^TMP($J,"XQOO",build name)
"RTN","XPDI",29,0)
 ..M ^XTMP("XQOO",XPDSET)=^TMP($J,"XQOO",XPDSET)
"RTN","XPDI",30,0)
 ..D INIT^XQOO(.XPDSET1) Q:"^"[XPDSET1
"RTN","XPDI",31,0)
 ..N DIR S DIR(0)="N^0:60:0",DIR("B")=0
"RTN","XPDI",32,0)
 ..S DIR("A")="Delay Install (Minutes)",DIR("?")="Enter the number of minutes to delay the installing of Routines after the Disable of Options"
"RTN","XPDI",33,0)
 ..W ! D ^DIR I $D(DIRUT) S XPDSET1="^"
"RTN","XPDI",34,0)
 .;Y is set in the call to DIR in previous .DO
"RTN","XPDI",35,0)
 .;save setname into first Build and the Delay in minutes, Y
"RTN","XPDI",36,0)
 .K XPD S XPD(9.7,XPDST_",",7)=(XPDSET1]"")_XPDSET,XPD(9.7,XPDST_",",8)=Y
"RTN","XPDI",37,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",38,0)
 ;check if they want to update other CPUs
"RTN","XPDI",39,0)
 I $G(XPDQUES("XPZ2")) D
"RTN","XPDI",40,0)
 .N DA,DIE,DR,Y
"RTN","XPDI",41,0)
 .S DA=XPDA,DIE="^XPD(9.7,",DR=30,DR(2,9.703)=".01"
"RTN","XPDI",42,0)
 .W !!,"Please enter the VOLUME SETS you want me to update.",!
"RTN","XPDI",43,0)
 .D ^DIE I '$O(^XPD(9.7,XPDA,"VOL",0)) W !!,"No VOLUME SETS selected!!" Q
"RTN","XPDI",44,0)
 .Q:$$TM^%ZTLOAD  ;quit if Taskman is running
"RTN","XPDI",45,0)
 .W !!,"TASKMAN is not running. If you install now, you must run the routine XPDCPU",!,"in the production UCI for each of the VOLUME SETS you have listed once"
"RTN","XPDI",46,0)
 .W !,"the installation starts!!",!,"If you Queue the install, the VOLUME SETS will be updated automatically.",*7,*7,!!
"RTN","XPDI",47,0)
DEV S POP=0 S:'$D(^DD(3.5,0)) POP=1
"RTN","XPDI",48,0)
 ;check if home device is defined
"RTN","XPDI",49,0)
 I 'POP S IOP="",%ZIS=0 D ^%ZIS
"RTN","XPDI",50,0)
 ;Kernel Virgin Install
"RTN","XPDI",51,0)
 I POP S XPDA=XPDST D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",52,0)
 ;set XPDA=starting Build, ask for device for messages
"RTN","XPDI",53,0)
 ;XPDNOQUE is defined means don't let them queue output
"RTN","XPDI",54,0)
 W !!,"Enter the Device you want to print the Install messages."
"RTN","XPDI",55,0)
 W:'$D(XPDNOQUE) !,"You can queue the install by enter a 'Q' at the device prompt."
"RTN","XPDI",56,0)
 W !,"Enter a '^' to abort the install.",!
"RTN","XPDI",57,0)
 S XPDA=XPDST,%ZIS=$P("Q",U,'$D(XPDNOQUE))
"RTN","XPDI",58,0)
 D ^%ZIS G:POP ASKABRT
"RTN","XPDI",59,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDI",60,0)
 S XPDD=$$FMADD^XLFDT(DT,7),^XTMP("XPDI",0)=XPDD_U_DT
"RTN","XPDI",61,0)
 I $D(IO("Q")) D  G ASKABRT:$D(ZTSK)[0,XPDIJ:$G(XPDIJ) Q
"RTN","XPDI",62,0)
 .N %DT
"RTN","XPDI",63,0)
 .S %DT="AEFRSX",%DT("A")="Requested Start Time: ",(%DT("B"),%DT(0))="NOW"
"RTN","XPDI",64,0)
 .;queue time must be in the future, but not more than 7 days
"RTN","XPDI",65,0)
 .F  D ^%DT Q:$D(DTOUT)  D:$$FMDIFF^XLFDT(XPDD,Y)<0  Q:Y>0
"RTN","XPDI",66,0)
 ..W !!,"Start Date shouldn't be more than a week in the future!",*7
"RTN","XPDI",67,0)
 ..S Y=-1
"RTN","XPDI",68,0)
 .Q:$D(DTOUT)
"RTN","XPDI",69,0)
 .S ZTDTH=Y,ZTRTN="EN^XPDIJ",ZTDESC="KIDS install",ZTSAVE("XPDA")=""
"RTN","XPDI",70,0)
 .D ^%ZTLOAD,HOME^%ZIS K IO("Q")
"RTN","XPDI",71,0)
 .Q:$D(ZTSK)[0
"RTN","XPDI",72,0)
 .W !,"Install Queued!",!!
"RTN","XPDI",73,0)
 .;save task into first Build
"RTN","XPDI",74,0)
 .K XPD S XPD(9.7,XPDST_",",5)=ZTSK,XPDT=0
"RTN","XPDI",75,0)
 .F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPD(9.7,+XPDT(XPDT)_",",.02)=1 D FILE^DIE("","XPD") K XPD
"RTN","XPDI",76,0)
 ;run install
"RTN","XPDI",77,0)
 U IO D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",78,0)
 Q
"RTN","XPDI",79,0)
QUES(XPDA) ;install questions; XPDA=ien in file 9.7
"RTN","XPDI",80,0)
 N XPDANS,XPDFIL,XPDFILN,XPDFILO,XPDNM,XPDQUES,X,Y
"RTN","XPDI",81,0)
 S XPDNM=$P(^XPD(9.7,XPDA,0),U) W !!,"Install Questions for ",XPDNM,!
"RTN","XPDI",82,0)
 ;pre-init questions
"RTN","XPDI",83,0)
 D DIR^XPDIQ("PRE") I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",84,0)
 ;file install questions
"RTN","XPDI",85,0)
 S XPDFIL=0
"RTN","XPDI",86,0)
 F  S XPDFIL=$O(^XTMP("XPDI",XPDA,"FIA",XPDFIL)) Q:'XPDFIL  S X=^(XPDFIL),X(0)=^(XPDFIL,0),X(1)=^(XPDFIL),XPDFILO=^(0,1) D  I $D(XPDQUIT) Q
"RTN","XPDI",87,0)
 .;check for DD screening logic
"RTN","XPDI",88,0)
 .I $G(^(10))]"" N XPDSCR S XPDSCR=^(10) ;^(10) is ref to ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,10) from prev line
"RTN","XPDI",89,0)
 .;XPDFILN=file name^global ref^partial DD
"RTN","XPDI",90,0)
 .;XPDANS=new file^DD screen failed^Data exists^update file name^user
"RTN","XPDI",91,0)
 .;doesn't want to update data  1=yes,0=no
"RTN","XPDI",92,0)
 .S XPDFILN=X_X(0)_U_X(1),XPDANS='($D(^DIC(XPDFIL,0))#2)_"^^"_''$O(@(X(0)_"0)"))
"RTN","XPDI",93,0)
 .W ! D DIR^XPDIQ("XPF",XPDFIL_"#") Q:$D(XPDQUIT)
"RTN","XPDI",94,0)
 .S:$G(XPDQUES("XPF"_XPDFIL_"#2"))=0 $P(XPDANS,U,5)=1
"RTN","XPDI",95,0)
 .S ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,2)=XPDANS
"RTN","XPDI",96,0)
 .F I=1:1:2 K XPDQUES("XPF"_XPDFIL_"#"_I)
"RTN","XPDI",97,0)
 ;XPDQUIT is by file questions in previous do loop, set in XPDIQ
"RTN","XPDI",98,0)
 I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",99,0)
 ;post-init questions
"RTN","XPDI",100,0)
 W ! D DIR^XPDIQ("POS") I $D(DIRUT)!$D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",101,0)
 Q
"RTN","XPDI",102,0)
 ;lookup into file 9.7, XPDS=DIC("S") for lookup, return 0-fail or ien
"RTN","XPDI",103,0)
LOOK(XPDS) ;lookup Install
"RTN","XPDI",104,0)
 N DIC,Y,XPD,%
"RTN","XPDI",105,0)
 K XPDT
"RTN","XPDI",106,0)
 S DIC(0)="QEAMZ",DIC="^XPD(9.7,"
"RTN","XPDI",107,0)
 S:$L($G(XPDS)) DIC("S")=XPDS
"RTN","XPDI",108,0)
 D ^DIC Q:Y<0 0
"RTN","XPDI",109,0)
 S XPD=+Y,XPDT=0
"RTN","XPDI",110,0)
 W !!,"This Distribution was loaded on ",$$FMTE^XLFDT($P(Y(0),U,3))," with header of ",!,$G(^XPD(9.7,XPD,2)),!,"It consisted of the following Install(s):",!
"RTN","XPDI",111,0)
 ;build XPDT array
"RTN","XPDI",112,0)
 F  S XPDT=$O(^XPD(9.7,"ASP",XPD,XPDT)) Q:'XPDT  S Y=+$O(^(XPDT,0)) D
"RTN","XPDI",113,0)
 .S %=$P($G(^XPD(9.7,Y,0)),U)
"RTN","XPDI",114,0)
 .I %="" W "**ERROR in Install, You need to remove the Distribution and reload it**",!  S XPDQUIT=1 Q
"RTN","XPDI",115,0)
 .S XPDT(XPDT)=Y_U_%,(XPDT("DA",Y),XPDT("NM",%))=XPDT W %,!
"RTN","XPDI",116,0)
 S:'$O(XPDT(0)) XPDQUIT=1
"RTN","XPDI",117,0)
 Q XPD
"RTN","XPDI",118,0)
 ;
"RTN","XPDI",119,0)
XQSET(XPDA) ;get options & protocols to disable
"RTN","XPDI",120,0)
 ;put in ^TMP($J,"XQOO",starting build name)
"RTN","XPDI",121,0)
 N A,I,X,Y
"RTN","XPDI",122,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",19,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",123,0)
 .S Y=$O(^DIC(19,"B",$P(X,U),0))
"RTN","XPDI",124,0)
 .;check that option exist and the Action is send or merge (0 or 3)
"RTN","XPDI",125,0)
 .I Y,$D(^DIC(19,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,19,Y)=$P(^(0),U,1,2)
"RTN","XPDI",126,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",101,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",127,0)
 .S Y=$O(^ORD(101,"B",$P(X,U),0))
"RTN","XPDI",128,0)
 .I Y,$D(^ORD(101,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,101,Y)=$P(^(0),U,1,2)
"RTN","XPDI",129,0)
 Q
"RTN","XPDI",130,0)
 ;XPDIJ need to install XPDIJ now & set routine flag to skip
"RTN","XPDI",131,0)
XPDIJ N DIE,XPDA,XCM,XCN,XCS,X
"RTN","XPDI",132,0)
 S XPDA=XPDIJ,DIE="^XTMP(""XPDI"",XPDIJ,""RTN"",""XPDIJ"",",XCN=0,X="XPDIJ"
"RTN","XPDI",133,0)
 X ^%ZOSF("SAVE")
"RTN","XPDI",134,0)
 S XCN=$$RTNUP^XPDUTL("XPDIJ",2)
"RTN","XPDI",135,0)
 Q
"RTN","XPDI",136,0)
 ;
"RTN","XPDI",137,0)
 ;XPDA=ien to del, XPDK=1 kill global, XPDALL=1 deleting all
"RTN","XPDI",138,0)
ABORT(XPDA,XPDK,XPDALL) ;abort install of Build XPDA
"RTN","XPDI",139,0)
 N %,DA,DIK,XPDJ,XPDNM,Y
"RTN","XPDI",140,0)
 Q:'$D(^XPD(9.7,XPDA,0))  S XPDNM=$P(^(0),U)
"RTN","XPDI",141,0)
 W !,XPDNM," Build will not be installed",$S(XPDK=1:", Transport Global deleted!",1:""),! Q:XPDK=2
"RTN","XPDI",142,0)
 S DIK="^XPD(9.7,",XPDJ=XPDT("NM",XPDNM),DA=XPDA
"RTN","XPDI",143,0)
 K XPDT("NM",XPDNM),XPDT("DA",XPDA),XPDT(XPDJ),XPDT("GP"),^XTMP("XPDI",XPDA)
"RTN","XPDI",144,0)
 ;if we are not deleting all packages and we are deleting the starting package
"RTN","XPDI",145,0)
 ;set the next package to the starting package. It must always be 1.
"RTN","XPDI",146,0)
 I '$G(XPDALL),XPDA=XPDST S Y=$O(XPDT(0)) D:Y
"RTN","XPDI",147,0)
 .S XPDST=+XPDT(Y),XPDT(1)=XPDT(Y),XPDT("DA",XPDST)=1,XPDT("NM",$P(XPDT(Y),U,2))=1,XPDIT=0
"RTN","XPDI",148,0)
 .K XPDT(Y) N XPD
"RTN","XPDI",149,0)
 .S %="XPD(9.7,"""_XPDST_","")",@%@(3)=XPDST,@%@(4)=1
"RTN","XPDI",150,0)
 .;loop thru the rest of the packages and reset the starting package field
"RTN","XPDI",151,0)
 .F  S Y=$O(XPDT(Y)) Q:'Y  D
"RTN","XPDI",152,0)
 ..S XPD(9.7,+XPDT(Y)_",",3)=XPDST
"RTN","XPDI",153,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",154,0)
 D ^DIK
"RTN","XPDI",155,0)
 Q
"RTN","XPDI",156,0)
ASKABRT ;ask if want to unload distribution
"RTN","XPDI",157,0)
 N DIR,DIRUT,X,Y
"RTN","XPDI",158,0)
 S XPDQUIT=1,DIR(0)="Y",DIR("A")="Install ABORTED, Want to remove the Transport Globals",DIR("B")="YES"
"RTN","XPDI",159,0)
 W ! D ^DIR I Y D ABRTALL(1)
"RTN","XPDI",160,0)
 Q
"RTN","XPDI",161,0)
ABRTALL(XPDK) ;abort all Builds
"RTN","XPDI",162,0)
 N XPDA
"RTN","XPDI",163,0)
 S XPDT=0
"RTN","XPDI",164,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPDA=+XPDT(XPDT) D ABORT(XPDA,XPDK,1)
"RTN","XPDI",165,0)
 Q
"RTN","XPDIGP")
0^22^B13685094
"RTN","XPDIGP",1,0)
XPDIGP ;SFISC/RSD - load Global Distribution ; 28 Aug 96 08:52
"RTN","XPDIGP",2,0)
 ;;8.0;KERNEL;**41**;Jul 10, 1995
"RTN","XPDIGP",3,0)
 ;XPDT is undefine if PKG^XPDIL1 aborted, need to close device
"RTN","XPDIGP",4,0)
 I '$D(XPDT) D ^%ZISC Q
"RTN","XPDIGP",5,0)
 N %,XPD,XPDIST,XPDBLD,XPDNM
"RTN","XPDIGP",6,0)
 S XPDA=+XPDT(1),XPDNM=$P(XPDT(1),U,2),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDIGP",7,0)
 ;update Install file, read in the other globals, close device
"RTN","XPDIGP",8,0)
 D XPCK,GPI:'$G(XPDQUIT),^%ZISC
"RTN","XPDIGP",9,0)
 I $G(XPDQUIT) D ABRTALL^XPDI(1) Q
"RTN","XPDIGP",10,0)
 ;run post install routine
"RTN","XPDIGP",11,0)
 S XPD=$$INRTN^XPDIL1("INIT") I XPD]"" D
"RTN","XPDIGP",12,0)
 .;% = routine name only, remove tag
"RTN","XPDIGP",13,0)
 .S %=$P(XPD,U,$L(XPD,U)) Q:'$D(^XTMP("XPDI",XPDA,"RTN",%))
"RTN","XPDIGP",14,0)
 .W ! D SAVE^XPDIJ(%),BMES^XPDUTL(" Running Post Install routine "_XPD),@XPD
"RTN","XPDIGP",15,0)
 .;update Package file
"RTN","XPDIGP",16,0)
 ;XPDIST is flag for site tracking, it is set in PKG^XPDIP
"RTN","XPDIGP",17,0)
 S XPDIST=0 D BMES^XPDUTL(" Updating KIDS files... "),PKG^XPDIP
"RTN","XPDIGP",18,0)
 ;sends site tracking bulletin
"RTN","XPDIGP",19,0)
 I XPDIST S %=$$EN^XPDIST(XPDA) D BMES^XPDUTL(" "_$P("NO ",U,'%)_"Install Message sent to FORUM ")
"RTN","XPDIGP",20,0)
 W !! D BMES^XPDUTL(" "_XPDNM_" Installed."),STMP^XPDIJ1(17) W !!
"RTN","XPDIGP",21,0)
 K ^XTMP("XPDI",XPDA),XPD
"RTN","XPDIGP",22,0)
 ;update the status field
"RTN","XPDIGP",23,0)
 S XPD(9.7,XPDA_",",.02)=3 D FILE^DIE("","XPD")
"RTN","XPDIGP",24,0)
 Q
"RTN","XPDIGP",25,0)
DISP ;display the contents
"RTN","XPDIGP",26,0)
 N X,Y,Z
"RTN","XPDIGP",27,0)
 W !,"This is a Global Distribution. It contains Global(s) that will",!,"update your system at this time. The following Global(s) will be installed:",!!
"RTN","XPDIGP",28,0)
 F Y=1:1 S X=$P(XPDGP,"^",Y) Q:X=""  D
"RTN","XPDIGP",29,0)
 .S Z=+$P(X,";"),X=$P(X,";",2),XPDT("GP",X)=Z_U_Y
"RTN","XPDIGP",30,0)
 .W "^"_X,?12,$P("Overwrite^Replace",U,Z+1),!
"RTN","XPDIGP",31,0)
 .;if unsubscripted global and replacing
"RTN","XPDIGP",32,0)
 .W:X'["("&Z "**WARNING - Global will be KILLED before install,",!,"Check global protection on ALL systems before continuing.",!
"RTN","XPDIGP",33,0)
 W !,"If you continue with the Load, the Global(s) will be",!,"Installed at this time.",!
"RTN","XPDIGP",34,0)
 Q
"RTN","XPDIGP",35,0)
GPI ;global package input
"RTN","XPDIGP",36,0)
 N DIRUT,GP,GR,X,XPDSEQ,Y,Z
"RTN","XPDIGP",37,0)
 ;start reading the HFS again
"RTN","XPDIGP",38,0)
 U IO R X:0,Y:0
"RTN","XPDIGP",39,0)
 ;the next read must be the GLOBAL
"RTN","XPDIGP",40,0)
 I X'="**GLOBAL**" U IO(0) W !!,"ERROR in HFS file format!" S XPDQUIT=1 Q
"RTN","XPDIGP",41,0)
 U IO(0) D BMES^XPDUTL(" "_Y) U IO
"RTN","XPDIGP",42,0)
 ;XPDSEQ is the disk sequence number
"RTN","XPDIGP",43,0)
 S GP=$P(Y,U,2),GR=$S(Y[")":$E(Y,1,$L(Y)-1)_",",1:Y_"("),XPDSEQ=1
"RTN","XPDIGP",44,0)
 K:XPDT("GP",GP) @Y
"RTN","XPDIGP",45,0)
 ;X=global ref, Y=global value. DIRUT is when user is prompted for
"RTN","XPDIGP",46,0)
 ;next disk in NEXTD and they abort
"RTN","XPDIGP",47,0)
 F  R X:0,Y:0 Q:X="**END**"  D  I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIGP",48,0)
 .;new global
"RTN","XPDIGP",49,0)
 .I X="**GLOBAL**" D  Q
"RTN","XPDIGP",50,0)
 ..;completes last global check point
"RTN","XPDIGP",51,0)
 ..D XPCOM(GP,Y)
"RTN","XPDIGP",52,0)
 ..;reset global ref
"RTN","XPDIGP",53,0)
 ..S GP=$P(Y,U,2),GR=$S(Y[")":$E(Y,1,$L(Y)-1)_",",1:Y_"(")
"RTN","XPDIGP",54,0)
 ..;kill global if flag is set
"RTN","XPDIGP",55,0)
 ..K:XPDT("GP",GP) @Y
"RTN","XPDIGP",56,0)
 .I X="**CONTINUE**" D NEXTD^XPDIL Q
"RTN","XPDIGP",57,0)
 .S @(GR_X)=Y
"RTN","XPDIGP",58,0)
 D XPCOM(GP)
"RTN","XPDIGP",59,0)
 U IO(0)
"RTN","XPDIGP",60,0)
 Q
"RTN","XPDIGP",61,0)
 ;
"RTN","XPDIGP",62,0)
 ;create Global multiple of Install file
"RTN","XPDIGP",63,0)
XPCK N DIR,DIRUT,X,XPD,XPDJ,X,Y,Z
"RTN","XPDIGP",64,0)
 S DIR(0)="Y",DIR("A")="Globals will now be installed, OK",DIR("B")="YES",DIR("?")="YES will continue with install, NO will abort install"
"RTN","XPDIGP",65,0)
 W ! D ^DIR I $D(DIRUT)!'Y S XPDQUIT=1 Q
"RTN","XPDIGP",66,0)
 W ! D BMES^XPDUTL(" Install Started for "_XPDNM_" : "),STMP^XPDIJ1(11),BMES^XPDUTL(" Installing Globals:")
"RTN","XPDIGP",67,0)
 S X=""
"RTN","XPDIGP",68,0)
 F  S X=$O(XPDT("GP",X)) Q:X=""  S Z=$P(XPDT("GP",X),U,2),XPD(9.718,"+"_Z_","_XPDA_",",.01)=X,XPDJ(Z)=Z
"RTN","XPDIGP",69,0)
 D:$D(XPD)>9 UPDATE^DIE("S","XPD","XPDJ")
"RTN","XPDIGP",70,0)
 Q
"RTN","XPDIGP",71,0)
 ;
"RTN","XPDIGP",72,0)
XPCOM(X,XPDN) ;complete checkpoint for global X,XPDN=next global
"RTN","XPDIGP",73,0)
 N GR,GP,XPD,Y,Z
"RTN","XPDIGP",74,0)
 U IO(0)
"RTN","XPDIGP",75,0)
 S Y=$$NOW^XLFDT,Z=+$P(XPDT("GP",X),U,2),XPD(9.718,Z_","_XPDA_",",1)=Y
"RTN","XPDIGP",76,0)
 D MES^XPDUTL("               "_$$FMTE^XLFDT(Y)),FILE^DIE("","XPD")
"RTN","XPDIGP",77,0)
 D:$L($G(XPDN)) BMES^XPDUTL(" "_XPDN)
"RTN","XPDIGP",78,0)
 U IO
"RTN","XPDIGP",79,0)
 Q
"RTN","XPDIJ")
0^17^B26893697
"RTN","XPDIJ",1,0)
XPDIJ ;SFISC/RSD - Install Job ;08/29/96  12:52
"RTN","XPDIJ",2,0)
 ;;8.0;KERNEL;**2,21,28,41**;Jul 10, 1995
"RTN","XPDIJ",3,0)
EN ;install all packages
"RTN","XPDIJ",4,0)
 ;XPDA=ien of first package
"RTN","XPDIJ",5,0)
 ;this is only needed for patch 41
"RTN","XPDIJ",6,0)
 I $D(^XTMP("XPDI",XPDA,"RTN","XPDIJ1")) D
"RTN","XPDIJ",7,0)
 .N DIE,XCM,XCN,XCS,X
"RTN","XPDIJ",8,0)
 .S DIE="^XTMP(""XPDI"",XPDA,""RTN"",""XPDIJ1"",",XCN=0,X="XPDIJ1"
"RTN","XPDIJ",9,0)
 .X ^%ZOSF("SAVE")
"RTN","XPDIJ",10,0)
 N XPD0,XPDSET,XPDQUIT,XPDVOL,X,Y,ZTRTN,ZTDTH,ZTIO,ZTDESC,ZTSK
"RTN","XPDIJ",11,0)
 I $$NEWERR^%ZTER N $ETRAP,$ESTACK S $ETRAP="D ERR^XPDIJ"
"RTN","XPDIJ",12,0)
 E  S X="ERR^XPDIJ",@^%ZOSF("TRAP")
"RTN","XPDIJ",13,0)
 Q:'$D(^XPD(9.7,+$G(XPDA),0))  S XPD0=^(0)
"RTN","XPDIJ",14,0)
 D INIT^XPDID
"RTN","XPDIJ",15,0)
 ;disable options & protocols for setname, XPDSET=1/0^setname^out of order msg.
"RTN","XPDIJ",16,0)
 S Y=$P(XPD0,U,8),XPDSET=+Y_U_$E(Y,2,99)_U_$S($L(Y):$P($G(^XTMP("XQOO",$E(Y,2,99),0)),U),1:"")
"RTN","XPDIJ",17,0)
 ;hang the number of seconds given in 0;10
"RTN","XPDIJ",18,0)
 I XPDSET D OFF^XQOO1($P(XPDSET,U,2)) I $P(XPD0,U,10) H ($P(XPD0,U,10)*60)
"RTN","XPDIJ",19,0)
 ;XPDVOL is set only if they want to update other CPUs
"RTN","XPDIJ",20,0)
 I $O(^XPD(9.7,XPDA,"VOL",0)) M XPDVOL=^XPD(9.7,XPDA,"VOL") D
"RTN","XPDIJ",21,0)
 .S Y=0
"RTN","XPDIJ",22,0)
 .F  S Y=$O(XPDVOL(Y)) Q:'Y  S $P(XPDVOL(Y,0),U,2,3)="^" K XPDVOL(Y,1)
"RTN","XPDIJ",23,0)
 .;jobup RTN^XPDIJ(XPDA), to install routines on other CPU if Taskman is running
"RTN","XPDIJ",24,0)
 .;check that taskman is running
"RTN","XPDIJ",25,0)
 .D:$$TM^%ZTLOAD
"RTN","XPDIJ",26,0)
 ..N XPDU,XPDY,XPDV,XPDV0,XPDVOL,ZTUCI,ZTCPU,ZTDESC,ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","XPDIJ",27,0)
 ..X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",28,0)
 ..F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",29,0)
 ...S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="KIDS update CPUs "_XPDV0,ZTCPU=XPDV0,ZTRTN="EN^XPDCPU("_XPDA_","_XPDV_")"
"RTN","XPDIJ",30,0)
 ...D ^%ZTLOAD
"RTN","XPDIJ",31,0)
 ...;save task number under Volume set multiple
"RTN","XPDIJ",32,0)
 ...Q:'$G(ZTSK)  K XPD
"RTN","XPDIJ",33,0)
 ...S XPD(9.703,XPDV_","_XPDA_",",3)=ZTSK D FILE^DIE("","XPD")
"RTN","XPDIJ",34,0)
 S Y=0
"RTN","XPDIJ",35,0)
 ;XPDABORT can be set in pre or post install to abort install
"RTN","XPDIJ",36,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%  Q:$D(XPDABORT)
"RTN","XPDIJ",37,0)
 .;build volume multiple for each package
"RTN","XPDIJ",38,0)
 .I $D(XPDVOL),'$D(^XPD(9.7,%,"VOL")) M ^("VOL")=XPDVOL
"RTN","XPDIJ",39,0)
 .N XPD,XPDA,XPDNM,XPDV,XPDV0,XPDVOL,XPDX,XPDY,Y
"RTN","XPDIJ",40,0)
 .S XPDA=%,XPDNM=$P($G(^XPD(9.7,XPDA,0)),U) D IN^XPDIJ1
"RTN","XPDIJ",41,0)
 .;check status of other cpu jobs, do if not this volume
"RTN","XPDIJ",42,0)
 .X ^%ZOSF("UCI") S XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",43,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=^(XPDV,0) D:$P(XPDV0,U)'=XPDY
"RTN","XPDIJ",44,0)
 ..;if completed time,write message and quit
"RTN","XPDIJ",45,0)
 ..I $P(XPDV0,U,2) D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",46,0)
 ..;if job had no start time, write message and quit
"RTN","XPDIJ",47,0)
 ..I '$P(XPDV0,U,3) D  I '$P(XPDV0,U,3)  D BMES^XPDUTL(" ** Job on VOLUME SET "_$P(XPDV0,U)_" never started **"),MES^XPDUTL(" ** "_$P(XPDV0,U)_" has NOT been updated! **") Q
"RTN","XPDIJ",48,0)
 ...D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to start.")
"RTN","XPDIJ",49,0)
 ...;hang 1 minute, try 5 times
"RTN","XPDIJ",50,0)
 ...F %=1:1:5 H 60 S XPDV0=^XPD(9.7,XPDA,"VOL",XPDV,0) Q:$P(XPDV0,U,3)
"RTN","XPDIJ",51,0)
 ..D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to complete.")
"RTN","XPDIJ",52,0)
 ..S XPD=0,XPDX=$G(^XPD(9.7,XPDA,"VOL",XPDV,1))
"RTN","XPDIJ",53,0)
 ..;check the last update node
"RTN","XPDIJ",54,0)
 ..F  S Y=$P(^XPD(9.7,XPDA,"VOL",XPDV,0),U,2),X=$G(^(1)),XPD=XPD+1 Q:XPD>360!Y  S:X'=XPDX XPD=0,XPDX=X H 10
"RTN","XPDIJ",55,0)
 ..;quit if we have a complete time
"RTN","XPDIJ",56,0)
 ..I Y D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",57,0)
 ..D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" has been idle for an hour."),MES^XPDUTL(" ** "_$P(XPDV0,U)_" has NOT been updated! **")
"RTN","XPDIJ",58,0)
 S Y=0
"RTN","XPDIJ",59,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%
"RTN","XPDIJ",60,0)
 .N Y,XPD
"RTN","XPDIJ",61,0)
 .;update the status field
"RTN","XPDIJ",62,0)
 .S XPD(9.7,%_",",.02)=3
"RTN","XPDIJ",63,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",64,0)
 .;kill transport global
"RTN","XPDIJ",65,0)
 .K ^XTMP("XPDI",XPDA)
"RTN","XPDIJ",66,0)
 ;ZTREQ tells taskman to delete task
"RTN","XPDIJ",67,0)
 I $G(ZTSK) S ZTREQ="@" D
"RTN","XPDIJ",68,0)
 .;remove task # from Install File
"RTN","XPDIJ",69,0)
 .N XPD S XPD(9.7,XPDA_",",5)="@"
"RTN","XPDIJ",70,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",71,0)
 D EXIT^XPDID("Install Completed"),^%ZISC
"RTN","XPDIJ",72,0)
 ;quit if install was aborted
"RTN","XPDIJ",73,0)
 Q:$D(XPDABORT)
"RTN","XPDIJ",74,0)
 ;put option back in order
"RTN","XPDIJ",75,0)
 I $P(XPDSET,U,2)]"" D ON^XQOO1($P(XPDSET,U,2)) K ^XTMP("XQOO",$P(XPDSET,U,2))
"RTN","XPDIJ",76,0)
 ;queue menu rebuild on current CPU
"RTN","XPDIJ",77,0)
 D CHEK^XQ83
"RTN","XPDIJ",78,0)
 ;check if need to queue menu rebuild on other CPUs
"RTN","XPDIJ",79,0)
 D:$O(^XPD(9.7,XPDA,"VOL",0))
"RTN","XPDIJ",80,0)
 .N XPDU,XPDY,XPDV,XPDV0,ZTUCI,ZTCPU
"RTN","XPDIJ",81,0)
 .X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",82,0)
 .;loop thru VOLUMES SET and don't do current volume set
"RTN","XPDIJ",83,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",84,0)
 ..S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="Install Menu Rebuild",ZTCPU=XPDV0,ZTRTN="CHEK^XQ83" D ^%ZTLOAD
"RTN","XPDIJ",85,0)
 Q
"RTN","XPDIJ",86,0)
 ;
"RTN","XPDIJ",87,0)
SAVE(X) ;restore routine X
"RTN","XPDIJ",88,0)
 N %,DIE,XCM,XCN,XCS
"RTN","XPDIJ",89,0)
 S DIE="^XTMP(""XPDI"",XPDA,""RTN"",X,",XCN=0
"RTN","XPDIJ",90,0)
 X ^%ZOSF("SAVE")
"RTN","XPDIJ",91,0)
 Q
"RTN","XPDIJ",92,0)
RTN(XPDA) ;restore all routines for package XPDA
"RTN","XPDIJ",93,0)
 ;^XPD("XPDI",XPDA,"RTN",routine name)=0-install, 1-delete, 2-skip^checksum
"RTN","XPDIJ",94,0)
 Q:$G(XPDA)=""
"RTN","XPDIJ",95,0)
 N X,XPDI,XPDJ S XPDI=""
"RTN","XPDIJ",96,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S XPDJ=^(XPDI) D
"RTN","XPDIJ",97,0)
 .;if we are doing VT graphic display, set counter
"RTN","XPDIJ",98,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+1 D:'(XPDIDCNT#XPDIDMOD) UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",99,0)
 .I 'XPDJ D SAVE(XPDI) Q
"RTN","XPDIJ",100,0)
 .;set checksum to null, since routine wasn't loaded
"RTN","XPDIJ",101,0)
 .I $P(XPDJ,U,2) S $P(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"KRN",9.8,"NM",$P(XPDJ,U,2),0),U,4)=""
"RTN","XPDIJ",102,0)
 .I $P(XPDJ,U)=1 S X=XPDI X ^%ZOSF("DEL")
"RTN","XPDIJ",103,0)
 ;if graphic display, update full count
"RTN","XPDIJ",104,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",105,0)
 Q
"RTN","XPDIJ",106,0)
 ;come here on error, record error in Install file and cleanup var.
"RTN","XPDIJ",107,0)
ERR D BMES^XPDUTL($$EC^%ZOSV),EXIT^XPDID()
"RTN","XPDIJ",108,0)
 ;record error in error processor & unwind stack
"RTN","XPDIJ",109,0)
 D ^%ZTER
"RTN","XPDIJ",110,0)
 S XQA(DUZ)="",XQAMSG="Install "_$E($P($G(^XPD(9.7,+$G(XPDA),0)),"^"),1,30)_" has encountered an Error."
"RTN","XPDIJ",111,0)
 D SETUP^XQALERT G UNWIND^%ZTER
"RTN","XPDIJ1")
0^21^B22436747
"RTN","XPDIJ1",1,0)
XPDIJ1 ;SFISC/RSD - Cont. of Install Job ;08/28/96  08:37
"RTN","XPDIJ1",2,0)
 ;;8.0;KERNEL;**41**;Jul 10, 1995
"RTN","XPDIJ1",3,0)
IN ;install XPDA
"RTN","XPDIJ1",4,0)
 ;XPDA=ien of file 9.7, XPDNM=package name
"RTN","XPDIJ1",5,0)
 Q:'$D(^XTMP("XPDI",XPDA))!'$D(^XPD(9.7,XPDA,0))
"RTN","XPDIJ1",6,0)
 ;check if already installed
"RTN","XPDIJ1",7,0)
 I $P($G(^XPD(9.7,XPDA,1)),U,3) D BMES^XPDUTL(" "_XPDNM_" Already Installed ") Q
"RTN","XPDIJ1",8,0)
 N DIFROM,XPD,XPDBLD,XPDCHECK,XPDCP,XPDI,XPDGREF,XPDIST,XPDIDTOT,XPDIDCNT,XPDIDMOD,XPDRTN
"RTN","XPDIJ1",9,0)
 ;XPDBLD subscript for build entry i.e. ^XTMP("XPDI",XPDA,"BLD",XPDBLD
"RTN","XPDIJ1",10,0)
 S DIFROM=$$VER^XPDUTL(XPDNM),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDGREF="^XTMP(""XPDI"","_XPDA_",""TEMP"")"
"RTN","XPDIJ1",11,0)
 D TITLE^XPDID(XPDNM)
"RTN","XPDIJ1",12,0)
 ;the $T is there only for installing patch 41 to prevent a noline error
"RTN","XPDIJ1",13,0)
 ;check that Package file has entry
"RTN","XPDIJ1",14,0)
 I $T(PKGADD^XPDIP)]"" S Y=$$PKGADD^XPDIP
"RTN","XPDIJ1",15,0)
 I '$$CHK(11) D
"RTN","XPDIJ1",16,0)
 .D BMES^XPDUTL(" Install Started for "_XPDNM_" : "),STMP(11)
"RTN","XPDIJ1",17,0)
 .;update status and installed by fields
"RTN","XPDIJ1",18,0)
 .S XPD(9.7,XPDA_",",.02)=2,XPD(9.7,XPDA_",",9)=DUZ
"RTN","XPDIJ1",19,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ1",20,0)
 E  D BMES^XPDUTL(" Install Restarted for "_XPDNM_" at "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",21,0)
 I '$$CHK(12) D
"RTN","XPDIJ1",22,0)
 .D BMES^XPDUTL(" Installing Routines:"),SETTOT^XPDID(9.8),RTN^XPDIJ(XPDA),STMP(12)
"RTN","XPDIJ1",23,0)
 E  D BMES^XPDUTL(" Routines already installed.")
"RTN","XPDIJ1",24,0)
 S XPDCP="INI"
"RTN","XPDIJ1",25,0)
 ;check if pre-install has completed
"RTN","XPDIJ1",26,0)
 I '$$VERCP^XPDUTL("XPD PREINSTALL COMPLETED") D  Q:$D(XPDABORT)
"RTN","XPDIJ1",27,0)
 .;setup XPDQUES array with pre-install questions/answers
"RTN","XPDIJ1",28,0)
 .D QUES^XPDIQ("PRE")
"RTN","XPDIJ1",29,0)
 .;XPDCHECK=ien of current checkpoint, (0)=name of checkpoint
"RTN","XPDIJ1",30,0)
 .;XPDCP="INI"-pre install or "INIT"-post install
"RTN","XPDIJ1",31,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ1",32,0)
 .S XPDCHECK=1
"RTN","XPDIJ1",33,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INI",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D  Q:$D(XPDABORT)
"RTN","XPDIJ1",34,0)
 ..;if there is no call back, quit
"RTN","XPDIJ1",35,0)
 ..Q:$G(^XPD(9.7,XPDA,"INI",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ1",36,0)
 ..;check if checkpoint has been completed
"RTN","XPDIJ1",37,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ1",38,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Pre-Install Routine: "_XPDRTN)
"RTN","XPDIJ1",39,0)
 ..;zero the progress bar
"RTN","XPDIJ1",40,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ1",41,0)
 ..D @XPDRTN
"RTN","XPDIJ1",42,0)
 ..;write message and abort if developer wants
"RTN","XPDIJ1",43,0)
 ..I $D(XPDABORT) D BMES^XPDUTL("Install ** ABORTED ** in Pre-Install program") Q
"RTN","XPDIJ1",44,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ1",45,0)
 .;complete pre-init check point
"RTN","XPDIJ1",46,0)
 .S %=$$COMCP^XPDUTL("XPD PREINSTALL COMPLETED")
"RTN","XPDIJ1",47,0)
 E  D BMES^XPDUTL(" Pre-Install already finished.")
"RTN","XPDIJ1",48,0)
 ;build XPDQUES arrays for all of the FM Files
"RTN","XPDIJ1",49,0)
 D QUES^XPDIQ("XPF")
"RTN","XPDIJ1",50,0)
 ;check the last file and see if it's already installed
"RTN","XPDIJ1",51,0)
 S XPD=$G(^(+$O(^XPD(9.7,XPDA,4,"A"),-1),0))
"RTN","XPDIJ1",52,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"FIA"))
"RTN","XPDIJ1",53,0)
 .D BMES^XPDUTL(" Installing Data Dictionaries: "),SETTOT^XPDID(4),FIA^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",54,0)
 E  D BMES^XPDUTL(" Data Dictionaries already installed.")
"RTN","XPDIJ1",55,0)
 S %=+$O(^XTMP("XPDI",XPDA,"DATA",""),-1),XPD=$G(^XPD(9.7,XPDA,4,%,0))
"RTN","XPDIJ1",56,0)
 I '$P(XPD,U,3) D:%
"RTN","XPDIJ1",57,0)
 .D BMES^XPDUTL(" Installing Data: "),DAT^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",58,0)
 E  D BMES^XPDUTL(" Data already installed.")
"RTN","XPDIJ1",59,0)
 S (%,XPD)=""
"RTN","XPDIJ1",60,0)
 F  S %=+$O(^XPD(9.7,XPDA,"KRN",%)) Q:'%  S XPD=$G(^(%,0)) Q:'$P(XPD,U,2)
"RTN","XPDIJ1",61,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"KRN"))
"RTN","XPDIJ1",62,0)
 .D BMES^XPDUTL(" Installing PACKAGE COMPONENTS: "),KRN^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ1",63,0)
 E  D BMES^XPDUTL(" PACKAGE COMPONENTS already installed.")
"RTN","XPDIJ1",64,0)
 S XPDCP="INIT"
"RTN","XPDIJ1",65,0)
 ;check if post-install has completed
"RTN","XPDIJ1",66,0)
 I '$$VERCP^XPDUTL("XPD POSTINSTALL COMPLETED") D
"RTN","XPDIJ1",67,0)
 .;setup XPDQUES array with post-install questions/answers
"RTN","XPDIJ1",68,0)
 .D QUES^XPDIQ("POS")
"RTN","XPDIJ1",69,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ1",70,0)
 .S XPDCHECK=1
"RTN","XPDIJ1",71,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INIT",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D
"RTN","XPDIJ1",72,0)
 ..;if there is no call back, quit
"RTN","XPDIJ1",73,0)
 ..Q:$G(^XPD(9.7,XPDA,"INIT",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ1",74,0)
 ..;quit if checkpoint has completed time
"RTN","XPDIJ1",75,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ1",76,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Post-Install Routine: "_XPDRTN)
"RTN","XPDIJ1",77,0)
 ..;zero the progress bar
"RTN","XPDIJ1",78,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ1",79,0)
 ..D @XPDRTN
"RTN","XPDIJ1",80,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ1",81,0)
 .;complete post-init check point
"RTN","XPDIJ1",82,0)
 .S %=$$COMCP^XPDUTL("XPD POSTINSTALL COMPLETED")
"RTN","XPDIJ1",83,0)
 E  D BMES^XPDUTL(" Post-Install already finished.")
"RTN","XPDIJ1",84,0)
 ;move routines to install file & Routine file
"RTN","XPDIJ1",85,0)
 D BMES^XPDUTL(" Updating Routine file..."),SETTOT^XPDID(9.8),RTN^XPDIP
"RTN","XPDIJ1",86,0)
 ;XPDIST is flag for site tracking^A/B install message, it is set in PKG^XPDIP
"RTN","XPDIJ1",87,0)
 ;install Package file, OERR parameter multiple, and Build file
"RTN","XPDIJ1",88,0)
 S XPDIST="" D BMES^XPDUTL(" Updating KIDS files..."),PKG^XPDIP
"RTN","XPDIJ1",89,0)
 D BMES^XPDUTL(" "_XPDNM_" Installed. "),STMP(17)
"RTN","XPDIJ1",90,0)
 ;sends install messages
"RTN","XPDIJ1",91,0)
 I $L(XPDIST) S %=$$EN^XPDIST(XPDA,XPDIST) D BMES^XPDUTL(" "_$P("NO ",U,'$P(%,"#",2))_"Install Message sent "_%)
"RTN","XPDIJ1",92,0)
 Q
"RTN","XPDIJ1",93,0)
CHK(X) ;check checkpoints in file 9.7, X=field #, returns 1=completed, 0=not completed
"RTN","XPDIJ1",94,0)
 Q $$GET1^DIQ(9.7,XPDA_",",X,"I")]""
"RTN","XPDIJ1",95,0)
 ;
"RTN","XPDIJ1",96,0)
STMP(X) ;timestamp checkpoints in file 9.7, X=field #
"RTN","XPDIJ1",97,0)
 N XPD,%
"RTN","XPDIJ1",98,0)
 S %=$$NOW^XLFDT,XPD(9.7,XPDA_",",X)=%
"RTN","XPDIJ1",99,0)
 D MES^XPDUTL("               "_$$FMTE^XLFDT(%)),FILE^DIE("","XPD")
"RTN","XPDIJ1",100,0)
 Q
"RTN","XPDIL1")
0^14^B15879572
"RTN","XPDIL1",1,0)
XPDIL1 ;SFISC/RSD - cont. of load Distribution Global; 08/16/96  07:51 ;08/16/96  09:00
"RTN","XPDIL1",2,0)
 ;;8.0;KERNEL;**15,17,39,41**;Jul 10, 1995
"RTN","XPDIL1",3,0)
 ;
"RTN","XPDIL1",4,0)
PKG(XPDA) ;check Package file
"RTN","XPDIL1",5,0)
 N D,DIC,XPD,XPDCP,XPDNM,XPDNOQUE,XPDPKG,X,Y,%
"RTN","XPDIL1",6,0)
 S XPDNM=$P(XPDT(XPDIT),U,2)
"RTN","XPDIL1",7,0)
 ;check KIDS version against sites version, skip if package is Kernel
"RTN","XPDIL1",8,0)
 I $$PKG^XPDUTL(XPDNM)'["KERNEL" D  I $D(XPDQUIT) D ABORT^XPDI(XPDA,1)
"RTN","XPDIL1",9,0)
 .;this is part of a Kernel multi package
"RTN","XPDIL1",10,0)
 .Q:$O(XPDT("NM","KERNEL"))["KERNEL"
"RTN","XPDIL1",11,0)
 .S Y=$G(^XTMP("XPDI",XPDA,"VER"))
"RTN","XPDIL1",12,0)
 .I $$VERSION^XPDUTL("XU")<Y W !!,"BUT I NEED VERSION ",+Y," OF KERNEL!"  S XPDQUIT=1
"RTN","XPDIL1",13,0)
 .I $$VERSION^XPDUTL("VA FILEMAN")<$P(Y,U,2) W !,"BUT I NEED VERSION ",+$P(Y,U,2)," OF VA FILEMAN!" S XPDQUIT=1
"RTN","XPDIL1",14,0)
 ;get national package name
"RTN","XPDIL1",15,0)
 S %=$O(^XTMP("XPDI",XPDA,"PKG",0)),XPDPKG(0)=$G(^(+%,0)),XPDPKG=%
"RTN","XPDIL1",16,0)
 ;XPDPKG=new ien^old ien
"RTN","XPDIL1",17,0)
 I XPDPKG S DIC="^DIC(9.4," D  S XPDPKG=+Y_U_XPDPKG
"RTN","XPDIL1",18,0)
 .S DIC(0)="X",X=$P(XPDPKG(0),U) D ^DIC Q:Y>0
"RTN","XPDIL1",19,0)
 .;if lookup fails try Prefix, C x-ref
"RTN","XPDIL1",20,0)
 .S X=$P(XPDPKG(0),U,2),D="C" D IX^DIC
"RTN","XPDIL1",21,0)
 ;add package to Install file
"RTN","XPDIL1",22,0)
 I XPDPKG>0 S XPD(9.7,XPDA_",",1)=+XPDPKG D FILE^DIE("","XPD")
"RTN","XPDIL1",23,0)
 ;XPDSKPE= does site want to run Environ. Check
"RTN","XPDIL1",24,0)
 I '$G(XPDSKPE),$$ENV(0) Q
"RTN","XPDIL1",25,0)
 ;global package can't have pre or post inits
"RTN","XPDIL1",26,0)
 Q:$D(XPDGP)
"RTN","XPDIL1",27,0)
 ;create pre-init checkpoint
"RTN","XPDIL1",28,0)
 S XPDCP="INI" I '$$NEWCP^XPDUTL("XPD PREINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",29,0)
 S %=$$INRTN("INI")
"RTN","XPDIL1",30,0)
 ;check for routine, use as call back
"RTN","XPDIL1",31,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD PREINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",32,0)
 ;create post-init checkpoint
"RTN","XPDIL1",33,0)
 S XPDCP="INIT" I '$$NEWCP^XPDUTL("XPD POSTINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",34,0)
 S %=$$INRTN("INIT")
"RTN","XPDIL1",35,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD POSTINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",36,0)
 ;create fileman and components check points and file rest of data
"RTN","XPDIL1",37,0)
 D XPCK^XPDIK("FIA"),XPCK^XPDIK("KRN")
"RTN","XPDIL1",38,0)
 Q
"RTN","XPDIL1",39,0)
INST(XPDNM) ;add to Install file
"RTN","XPDIL1",40,0)
 N DIC,DIR,DIRUT,DLAYGO,X,XPD,XPDA,XPDIE,XPDDIQ,Y
"RTN","XPDIL1",41,0)
 ;check if Build was already installed
"RTN","XPDIL1",42,0)
 ;XPD=0 abort install, else XPD=ien in Install file
"RTN","XPDIL1",43,0)
 I $D(^XPD(9.7,"B",XPDNM)) S Y=0 D  Q:$D(XPD) XPD
"RTN","XPDIL1",44,0)
 .W !,"The following Entries already exist in the INSTALL file: ",!
"RTN","XPDIL1",45,0)
 .F  S Y=$O(^XPD(9.7,"B",XPDNM,Y)) Q:'Y  D
"RTN","XPDIL1",46,0)
 ..Q:'$D(^XPD(9.7,Y,0))  S %=^(0)
"RTN","XPDIL1",47,0)
 ..W !,$P(%,U),"   "
"RTN","XPDIL1",48,0)
 ..I $P(%,U,9)<3,$D(^XTMP("XPDI",Y)) W "**Transport Global already exists**",*7 S XPD=0 Q
"RTN","XPDIL1",49,0)
 ..W $$EXTERNAL^DILFD(9.7,.02,"",$P(%,U,9)),!,"was loaded on ",$$FMTE^XLFDT($P($G(^XPD(9.7,Y,1)),U))
"RTN","XPDIL1",50,0)
 .;quit if transport global exist
"RTN","XPDIL1",51,0)
 .Q:$D(XPD)
"RTN","XPDIL1",52,0)
 .S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO"
"RTN","XPDIL1",53,0)
 .D ^DIR I $D(DIRUT)!'Y S XPD=0 Q
"RTN","XPDIL1",54,0)
 S DIC="^XPD(9.7,",DIC(0)="XL",DLAYGO=9.7,X=""""_XPDNM_""""
"RTN","XPDIL1",55,0)
 ;add to Install file, must be new
"RTN","XPDIL1",56,0)
 D ^DIC
"RTN","XPDIL1",57,0)
 I Y<0 W !,"Can't add Build ",XPDNM," to Install File" Q 0
"RTN","XPDIL1",58,0)
 ;set starting package to Y, if it is not already defined
"RTN","XPDIL1",59,0)
 S:'XPDST XPDST=+Y
"RTN","XPDIL1",60,0)
 ;XPDT array keeps track of all packages in this distribution
"RTN","XPDIL1",61,0)
 S XPDA=+Y,XPDT(XPDIT)=XPDA_U_XPDNM,(XPDT("DA",XPDA),XPDT("NM",XPDNM))=XPDIT
"RTN","XPDIL1",62,0)
 S %="XPDIE(9.7,"""_XPDA_","")",@%@(.02)=0,@%@(2)=$$NOW^XLFDT,@%@(3)=XPDST,@%@(4)=XPDIT,@%@(5)="",@%@(6)=XPDST("H1")
"RTN","XPDIL1",63,0)
 D FILE^DIE("","XPDIE")
"RTN","XPDIL1",64,0)
 Q XPDA
"RTN","XPDIL1",65,0)
 ;
"RTN","XPDIL1",66,0)
 ;XPDQUIT quit current package install, 1=kill global, 2=leave global
"RTN","XPDIL1",67,0)
 ;XPDQUIT(package) quit package install, 1=kill, 2=leave
"RTN","XPDIL1",68,0)
 ;XPDABORT quit the entire distribution, 1=kill, 2=leave
"RTN","XPDIL1",69,0)
 ;XPDENV 0=loading distribution, 1=installing
"RTN","XPDIL1",70,0)
ENV(XPDENV) ;enviroment check & version check
"RTN","XPDIL1",71,0)
 ;returns 0=ok, 1=current package rejected, 2=all packages rejected
"RTN","XPDIL1",72,0)
 N %,XPDI,XPDQUIT,XPDABORT
"RTN","XPDIL1",73,0)
 ;check version number, must be greater than existing version
"RTN","XPDIL1",74,0)
 I XPDPKG>0 S %=$$VER^XPDUTL(XPDNM) I %<$G(^DIC(9.4,+XPDPKG,"VERSION")) W !,"You have a Version greater than mine!",! D ABORT^XPDI(XPDA,1) Q 1
"RTN","XPDIL1",75,0)
 S %=$G(^XTMP("XPDI",XPDA,"PRE")) D:%]""
"RTN","XPDIL1",76,0)
 .W !,"Will first run the Environment Check Routine, ",%,!
"RTN","XPDIL1",77,0)
 .D SAVE^XPDIJ(%),@("^"_%)
"RTN","XPDIL1",78,0)
 I $G(XPDABORT) D  Q XPDQUIT
"RTN","XPDIL1",79,0)
 .;if during load & leave global return 0 so checkpoints can be set
"RTN","XPDIL1",80,0)
 .I 'XPDENV,XPDABORT=2 S XPDQUIT=0
"RTN","XPDIL1",81,0)
 .D ABRTALL^XPDI(XPDABORT) S XPDQUIT=2
"RTN","XPDIL1",82,0)
 Q:'$D(XPDQUIT) 0
"RTN","XPDIL1",83,0)
 ;kill global & during install
"RTN","XPDIL1",84,0)
 I $G(XPDQUIT) D:'(XPDQUIT=2&'XPDENV) ABORT^XPDI(XPDA,XPDQUIT)
"RTN","XPDIL1",85,0)
 S XPDI=""
"RTN","XPDIL1",86,0)
 F  S XPDI=$O(XPDQUIT(XPDI)) Q:XPDI=""  D:'(XPDQUIT(XPDI)=2&'XPDENV)
"RTN","XPDIL1",87,0)
 .S %=$G(XPDT("NM",XPDI)) D:% ABORT^XPDI(+XPDT(%),XPDQUIT(XPDI))
"RTN","XPDIL1",88,0)
 S XPDQUIT=$S('$D(XPDT("NM",XPDNM)):1,$G(XPDQUIT):XPDQUIT,1:0)
"RTN","XPDIL1",89,0)
 Q XPDQUIT
"RTN","XPDIL1",90,0)
 ;
"RTN","XPDIL1",91,0)
 ;return a routine that can be run
"RTN","XPDIL1",92,0)
INRTN(X) N Y
"RTN","XPDIL1",93,0)
 S Y=$G(^XTMP("XPDI",XPDA,X)) Q:Y="" ""
"RTN","XPDIL1",94,0)
 S Y=$S(Y["^":Y,1:"^"_Y)
"RTN","XPDIL1",95,0)
 Q Y
"RTN","XPDIP")
0^15^B35341957
"RTN","XPDIP",1,0)
XPDIP ;SFISC/RSD - Install Package & Routine file ;08/21/96  14:46
"RTN","XPDIP",2,0)
 ;;8.0;KERNEL;**15,21,28,30,41**;Jul 10, 1995
"RTN","XPDIP",3,0)
 Q
"RTN","XPDIP",4,0)
PKG ;
"RTN","XPDIP",5,0)
 N %,OLDA,DA,DIK,XPD,XPDFIL,XPDPKG,XPDBLDA,Y
"RTN","XPDIP",6,0)
 ;update variable for graphic display
"RTN","XPDIP",7,0)
 I $D(XPDIDVT) S XPDIDTOT=10,XPDIDMOD=1,XPDIDCNT=0 D:XPDIDVT UPDATE^XPDID(0)
"RTN","XPDIP",8,0)
 ;XPDPKG=ien of Package file, OLDA=old Package ien
"RTN","XPDIP",9,0)
 S Y=$$PKGADD,XPDPKG=$P(Y,U),OLDA=$P(Y,U,2)
"RTN","XPDIP",10,0)
 ;Package file entry not sent, XPDPKG=0
"RTN","XPDIP",11,0)
 G:'XPDPKG PKGEND
"RTN","XPDIP",12,0)
 ;update version multiple
"RTN","XPDIP",13,0)
 S DA=XPDPKG D PKGV
"RTN","XPDIP",14,0)
PKGH I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",15,0)
 S %=$P(^DIC(9.4,XPDPKG,0),U,4)
"RTN","XPDIP",16,0)
 ;repoint Help Frame (0;4)
"RTN","XPDIP",17,0)
 I $L(%),'% S $P(^DIC(9.4,XPDPKG,0),U,4)=$$LK^XPDIA("^DIC(9.2)",%),DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",18,0)
 ;OERR Package Parameter multiple in file 100.99
"RTN","XPDIP",19,0)
 D:$D(^ORD(100.99))&$D(^XTMP("XPDI",XPDA,"OER",OLDA))
"RTN","XPDIP",20,0)
 .S DA=XPDPKG,DA(1)=1,DIK="^ORD(100.99,1,5," D:$D(^ORD(100.99,1,5,DA)) ^DIK
"RTN","XPDIP",21,0)
 .S:'$D(^ORD(100.99,1,5,0)) ^ORD(100.99,1,5,0)=U_$P(^DD(100.99,5,0),U,2) S $P(^(0),U,3,4)=DA_U_($P(^(0),U,3)+1)
"RTN","XPDIP",22,0)
 .M ^ORD(100.99,1,5,DA)=^XTMP("XPDI",XPDA,"OER",OLDA) S $P(^(DA,0),U)=DA,%=$P(^(0),U,4)
"RTN","XPDIP",23,0)
 .S:$L(%) $P(^ORD(100.99,1,5,DA,0),U,4)=$$LK^XPDIA("^ORD(100.98)",%)
"RTN","XPDIP",24,0)
 .D IX1^DIK
"RTN","XPDIP",25,0)
PKGEND S XPDBLDA=$$BLD(XPDBLD) Q:'XPDBLDA
"RTN","XPDIP",26,0)
 ;move Alpha/Beta testing info to Kernel site para file
"RTN","XPDIP",27,0)
 I XPDPKG S %=$G(^XPD(9.6,XPDBLDA,"ABPKG")) D
"RTN","XPDIP",28,0)
 .;Install message and they have an address, set flag in XPDIST
"RTN","XPDIP",29,0)
 .I $P(%,U)="y",$P(%,U,2)="y",$L($P(%,U,3)) S $P(XPDIST,U,2)=$P(%,U,3)
"RTN","XPDIP",30,0)
 .D EN^XQABLOAD(XPDBLDA)
"RTN","XPDIP",31,0)
 Q
"RTN","XPDIP",32,0)
PKGADD() ;check Package file, add if not there
"RTN","XPDIP",33,0)
 ;return new Package file ien^old ien
"RTN","XPDIP",34,0)
 N DA,DIK,XPD,XPDFIL,XPDO,X,Y
"RTN","XPDIP",35,0)
 S DA=+$P(^XPD(9.7,XPDA,0),U,2),XPDO=+$O(^XTMP("XPDI",XPDA,"PKG",0)),X=$P($G(^(XPDO,0)),U)
"RTN","XPDIP",36,0)
 I DA,$D(^DIC(9.4,DA,0)) Q DA_U_XPDO
"RTN","XPDIP",37,0)
 ;quit if there was no package entry sent
"RTN","XPDIP",38,0)
 Q:'XPDO "0^0"
"RTN","XPDIP",39,0)
 S XPDFIL=9.4,Y=$$DIC^XPDIK(9.4,X) Q:'Y "0^0"
"RTN","XPDIP",40,0)
 S DA=+Y
"RTN","XPDIP",41,0)
 ;if new entry in package file, bring in everything
"RTN","XPDIP",42,0)
 I $P(Y,U,3) D
"RTN","XPDIP",43,0)
 .M ^DIC(9.4,DA)=^XTMP("XPDI",XPDA,"PKG",XPDO)
"RTN","XPDIP",44,0)
 .;kill the -1 flag node first
"RTN","XPDIP",45,0)
 .K ^DIC(9.4,DA,-1)
"RTN","XPDIP",46,0)
 .;re-cross ref after adding a new package
"RTN","XPDIP",47,0)
 .S DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",48,0)
 ;add package to file 9.7
"RTN","XPDIP",49,0)
 S XPD(9.7,XPDA_",",1)=DA D FILE^DIE("","XPD")
"RTN","XPDIP",50,0)
 Q DA_U_XPDO
"RTN","XPDIP",51,0)
 ;
"RTN","XPDIP",52,0)
BLD(XPDBLD) ;add Build entry, XPDBLD=Build ien in ^XTMP("XPDI",XPDA,"BLD",
"RTN","XPDIP",53,0)
 N DA,DIK,XPDFIL,Y
"RTN","XPDIP",54,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",55,0)
 ;XPDBLD=Build ien in ^XTMP, set in XPDIJ
"RTN","XPDIP",56,0)
 S XPDFIL=9.6,Y=$$DIC^XPDIK(9.6,XPDNM) Q:'Y ""
"RTN","XPDIP",57,0)
 S DA=+Y
"RTN","XPDIP",58,0)
 ;XPDPKG=Package file ien, could be 0 if no package file
"RTN","XPDIP",59,0)
 K:'$P(Y,U,3) ^XPD(9.6,DA),^XPD(9.6,"C",XPDPKG,DA)
"RTN","XPDIP",60,0)
 M ^XPD(9.6,DA)=^XTMP("XPDI",XPDA,"BLD",XPDBLD)
"RTN","XPDIP",61,0)
 ;reset Package File Link (0;2)
"RTN","XPDIP",62,0)
 ;XPDIST = national site tracking^A/B install message address
"RTN","XPDIP",63,0)
 S $P(^XPD(9.6,DA,0),U,2)=$S(XPDPKG:XPDPKG,1:"") S:$P(^(0),U,5)="y" XPDIST=1
"RTN","XPDIP",64,0)
 ;re-index cross-ref. on fields .01 and 1
"RTN","XPDIP",65,0)
 S DIK="^XPD(9.6," F Y=.01,1 S DIK(1)=Y D EN1^DIK
"RTN","XPDIP",66,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",67,0)
 Q DA
"RTN","XPDIP",68,0)
 ;
"RTN","XPDIP",69,0)
 ;update the version multiple in the package file
"RTN","XPDIP",70,0)
PKGV N %
"RTN","XPDIP",71,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",72,0)
 ;%=ien in the Version multiple_U_ien in Patch multiple in ^XTMP
"RTN","XPDIP",73,0)
 S %=$G(^XTMP("XPDI",XPDA,"PKG",OLDA,-1))
"RTN","XPDIP",74,0)
 I XPDNM'["*" D  Q
"RTN","XPDIP",75,0)
 .S %=+% Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,%,0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",76,0)
 .S $P(%,U,3,4)=DT_U_DUZ,%=$$PKGVER(DA,.%)
"RTN","XPDIP",77,0)
 ;update patch history multiple
"RTN","XPDIP",78,0)
 Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,+%,"PAH",+$P(%,U,2),0))  S %=$P(^(0),U) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",79,0)
 S:$P(^XPD(9.7,XPDA,2),XPDNM,2)["SEQ #" %=%_$P(^(2),XPDNM,2)
"RTN","XPDIP",80,0)
 S $P(%,U,2,3)=DT_U_DUZ,%=$$PKGPAT(DA,$$VER^XPDUTL(XPDNM),.%)
"RTN","XPDIP",81,0)
 Q
"RTN","XPDIP",82,0)
 ;
"RTN","XPDIP",83,0)
PKGVER(XPDA,XPDI) ;update version in package file, XPDA=ien, return ien
"RTN","XPDIP",84,0)
 ;XPDI=version^date distr.^date installed^install by
"RTN","XPDIP",85,0)
 ;XPDI(1)=root of description field
"RTN","XPDIP",86,0)
 N I,X,XPD,XPDIEN,XPDJ,XPDV
"RTN","XPDIP",87,0)
 S XPDIEN=","_XPDA_",",XPDV=$$MDIC(9.49,XPDIEN,$P(XPDI,U)) Q:'XPDV 0
"RTN","XPDIP",88,0)
 S XPD(9.4,XPDA_",",13)=$P(XPDI,U),X="XPD(9.49,"""_XPDV_XPDIEN_""")"
"RTN","XPDIP",89,0)
 F I=1:1:3 S:$P(XPDI,U,I+1)]"" @X@(I)=$P(XPDI,U,I+1)
"RTN","XPDIP",90,0)
 S:$D(XPDI(1)) @X@(41)=XPDI(1)
"RTN","XPDIP",91,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",92,0)
 Q XPDV
"RTN","XPDIP",93,0)
 ;
"RTN","XPDIP",94,0)
PKGPAT(XPDA,XPDV,XPDI) ;update patch history, XPDA=ien, XPDV=version
"RTN","XPDIP",95,0)
 ;XPDI=patch^date installed^install by,   returns version ien^patch ien
"RTN","XPDIP",96,0)
 N I,X,XPD,XPDP
"RTN","XPDIP",97,0)
 ;quit if we can't find the version multiple, resets XPDV=ien of version
"RTN","XPDIP",98,0)
 S XPDIEN=","_XPDA_",",XPDV=$$MDIC(9.49,XPDIEN,XPDV) Q:'XPDV 0
"RTN","XPDIP",99,0)
 S XPDIEN=","_XPDV_XPDIEN,XPDP=$$MDIC(9.4901,XPDIEN,$P(XPDI,U)) Q:'XPDP 0
"RTN","XPDIP",100,0)
 S X="XPD(9.4901,"""_XPDP_XPDIEN_""")"
"RTN","XPDIP",101,0)
 F I=.02,.03 S:$P(XPDI,U,I*100)]"" @X@(I)=$P(XPDI,U,I*100)
"RTN","XPDIP",102,0)
 S:$D(XPDI(1)) @X@(1)=XPDI(1)
"RTN","XPDIP",103,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",104,0)
 Q XPDV_U_XPDP
"RTN","XPDIP",105,0)
 ;
"RTN","XPDIP",106,0)
 ;XPDF=subfile #,XPDIEN=ien string, X=input
"RTN","XPDIP",107,0)
MDIC(XPDF,XPDIEN,XPDX) ;
"RTN","XPDIP",108,0)
 N DIERR,XPD,XPDN
"RTN","XPDIP",109,0)
 D FIND^DIC(XPDF,XPDIEN,"","XQf",XPDX,5,"","","","XPD")
"RTN","XPDIP",110,0)
 ;one or more matches, just return first one
"RTN","XPDIP",111,0)
 I $G(XPD(0)) D:XPD(0)>1  Q XPD(1)
"RTN","XPDIP",112,0)
 .N %
"RTN","XPDIP",113,0)
 .S %(1)=$P(^DD(XPDF,.01,0),U)_"  "_XPDX_"  is Duplicated,",%(2)=" only ien #"_XPD(1)_" was updated."
"RTN","XPDIP",114,0)
 .D MES^XPDUTL(.%)
"RTN","XPDIP",115,0)
 ;add a new entry
"RTN","XPDIP",116,0)
 S XPDN(XPDF,"+1"_XPDIEN,.01)=XPDX K XPD
"RTN","XPDIP",117,0)
 D UPDATE^DIE("","XPDN","XPD")
"RTN","XPDIP",118,0)
 I '$G(XPD(1)) D BMES^XPDUTL(" "_$P(^DD(XPDF,.01,0),U)_" "_XPDX_" **Couldn't Add to file**") Q 0
"RTN","XPDIP",119,0)
 Q XPD(1)
"RTN","XPDIP",120,0)
 ;
"RTN","XPDIP",121,0)
RTN ;move rtns to install file
"RTN","XPDIP",122,0)
 N XPD,XPDC,XPDCR,XPDI,XPDJ,XPDK,XPDL,XPDM,XPDR,XPDRH,X
"RTN","XPDIP",123,0)
 K ^XPD(9.7,XPDA,"RTN"),^TMP($J)
"RTN","XPDIP",124,0)
 S (XPDC,XPDCR,XPDRH)=0,XPDJ=""
"RTN","XPDIP",125,0)
 ;get all routines that were loaded, XPDM=action
"RTN","XPDIP",126,0)
 ;actions are 0=load, 1=delete, 2=skip
"RTN","XPDIP",127,0)
 F  S XPDJ=$O(^XTMP("XPDI",XPDA,"RTN",XPDJ)) Q:XPDJ=""  S XPDM=^(XPDJ) D:'XPDM
"RTN","XPDIP",128,0)
 .;XPD, build array to update ROUTINE multiple in INSTALL file
"RTN","XPDIP",129,0)
 .S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",130,0)
 .;XPDR, build array to update ROUTINE file
"RTN","XPDIP",131,0)
 .S:'$D(^DIC(9.8,"B",XPDJ)) XPDCR=XPDCR+1,^TMP($J,"XPDR",9.8,"?+"_XPDCR_",",.01)=XPDJ,^(1)="R"
"RTN","XPDIP",132,0)
 ;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",133,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDTOT*.4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",134,0)
 F XPDK="DIKZ","DIEZ","DIPZ" D
"RTN","XPDIP",135,0)
 .S XPDI=0
"RTN","XPDIP",136,0)
 .;loop thru list of compile template routines
"RTN","XPDIP",137,0)
 .;XTMP("XPDI",XPDA,"DIKZ",ien,routine name)
"RTN","XPDIP",138,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPDK,XPDI)),XPDJ="" Q:'XPDI  D
"RTN","XPDIP",139,0)
 ..I 'XPDRH D BMES^XPDUTL(" The following Routines were created during this install:") S XPDRH=1
"RTN","XPDIP",140,0)
 ..F  S XPDJ=$O(^XTMP("XPDI",XPDA,XPDK,XPDI,XPDJ)) Q:XPDJ=""  D:'$D(^XTMP("XPDI",XPDA,"RTN",XPDJ))
"RTN","XPDIP",141,0)
 ...S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",142,0)
 ...D MES^XPDUTL("     "_XPDJ)
"RTN","XPDIP",143,0)
 ;update routine multiple in Install file with routines and
"RTN","XPDIP",144,0)
 ;compile template routines
"RTN","XPDIP",145,0)
 I $D(^TMP($J,"XPD"))>9 D
"RTN","XPDIP",146,0)
 .D UPDATE^DIE("","^TMP($J,""XPD"")","^TMP($J,""XPDL"")")
"RTN","XPDIP",147,0)
 .;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",148,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+(XPDIDTOT*.40) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",149,0)
 ;update Routine file
"RTN","XPDIP",150,0)
 D:$D(^TMP($J,"XPDR"))>9 UPDATE^DIE("","^TMP($J,""XPDR"")")
"RTN","XPDIP",151,0)
 ;if we are doing VT graphic display, update 100%
"RTN","XPDIP",152,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",153,0)
 Q
"RTN","XPDIU")
0^19^B8432812
"RTN","XPDIU",1,0)
XPDIU ;SFISC/RSD - UNload/Convert Distribution Global; 26 Jan 96 09:01 ;08/22/96  11:00
"RTN","XPDIU",2,0)
 ;;8.0;KERNEL;**15,41**;Jul 10, 1995
"RTN","XPDIU",3,0)
EN1 ;unload
"RTN","XPDIU",4,0)
 N %,DA,DIK,DIR,DIRUT,X,XPD,XPDT,XPDQ,XPDQUIT,Y
"RTN","XPDIU",5,0)
 S DA=0 F  S DA=$O(^XTMP("XPDI",DA)) Q:'DA  I '$D(^XPD(9.7,DA)) K ^XTMP("XPDI",DA)
"RTN","XPDIU",6,0)
 S DA=$$LOOK^XPDI("I $P(^(0),U,9)<2") Q:'DA
"RTN","XPDIU",7,0)
 S XPDQ=^XPD(9.7,DA,0),DIR(0)="Y",DIR("A")="Want to continue with the Unload of this Distribution",DIR("B")="NO"
"RTN","XPDIU",8,0)
 S DIR("?")="YES will delete the Transport Global and the entry in the Install file for these Packages."
"RTN","XPDIU",9,0)
 I $P(XPDQ,U,9)=1,$P(XPDQ,U,6) W !,"This Distribution is Queued for Install with task number ",$P(XPDQ,U,6),!,"Don't forget to delete Taskman Task."
"RTN","XPDIU",10,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDIU",11,0)
 S XPD=0,DIK="^XPD(9.7,"
"RTN","XPDIU",12,0)
 F  S XPD=$O(XPDT(XPD)) Q:'XPD  S DA=+XPDT(XPD) D ^DIK K ^XTMP("XPDI",DA)
"RTN","XPDIU",13,0)
 I $D(^XTMP("XQOO",$P(XPDQ,U))) K ^($P(XPDQ,U))
"RTN","XPDIU",14,0)
 Q
"RTN","XPDIU",15,0)
EN2 ;convert
"RTN","XPDIU",16,0)
 N %,DA,DIK,DIR,DIRUT,X,XPD,XPDBLD,XPDI,XPDNM,XPDPKG,XPDT,XPDQUIT,Y
"RTN","XPDIU",17,0)
 S XPDI=$$LOOK^XPDI("I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y))") Q:'XPDI
"RTN","XPDIU",18,0)
 K XPDT("DA"),XPDT("NM")
"RTN","XPDIU",19,0)
 S XPDT=0 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D
"RTN","XPDIU",20,0)
 .S Y=+XPDT(XPDT) Q:$D(^XTMP("XPDI",Y))
"RTN","XPDIU",21,0)
 .W !,$P(XPDT(XPDT),U,2),"   ** Transport Global doesn't exist **",$C(7)
"RTN","XPDIU",22,0)
 .K XPDT(XPDT) S XPDQUIT=1
"RTN","XPDIU",23,0)
 Q:$D(XPDT)'>9!$D(XPDQUIT)
"RTN","XPDIU",24,0)
 S DIR(0)="Y",DIR("A")="Want to continue with the Conversion of the Package(s)",DIR("B")="NO"
"RTN","XPDIU",25,0)
 S DIR("?",1)="YES will convert the Packages to globals that can be transported.",DIR("?")="An entry will be added to the Build file and the entry in the Install file will be deleted."
"RTN","XPDIU",26,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDIU",27,0)
 S XPDT=0,DIK="^XPD(9.7,"
"RTN","XPDIU",28,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D  Q:$D(XPDQUIT)
"RTN","XPDIU",29,0)
 .S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDPKG=$O(^XTMP("XPDI",XPDA,"PKG",0))
"RTN","XPDIU",30,0)
 .S DA=$$BLD^XPDIP(XPDBLD) D:DA
"RTN","XPDIU",31,0)
 ..M ^XTMP("XPDT",DA)=^XTMP("XPDI",XPDA)
"RTN","XPDIU",32,0)
 .I 'DA W !,XPDNM,"   ** Couldn't add to Build file **" S XPDQUIT=1 Q
"RTN","XPDIU",33,0)
 .S DA=XPDA D ^DIK
"RTN","XPDIU",34,0)
 .K ^XTMP("XPDI",XPDA)
"RTN","XPDIU",35,0)
 W !,"  ** DONE **",!
"RTN","XPDIU",36,0)
 Q
"RTN","XPDIU",37,0)
DEL(Y) ;delete access to file 9.7, 0-can't delete, 1-can
"RTN","XPDIU",38,0)
 N %
"RTN","XPDIU",39,0)
 S %=$P(^XPD(9.7,Y,0),U,9)
"RTN","XPDIU",40,0)
 Q $S(%=3:1,%=2:0,$D(^XPD(9.7,"ASP",Y,1,Y)):1,1:0)
"RTN","XPDT")
0^20^B46222136
"RTN","XPDT",1,0)
XPDT ;SFISC/RSD - Transport a package; 15 Apr 96 10:15 ;08/22/96  11:56
"RTN","XPDT",2,0)
 ;;8.0;KERNEL;**2,10,28,41**;Jul 10, 1995
"RTN","XPDT",3,0)
EN ;build XTMP("XPDT",ien, XPDA=ien,XPDNM=name
"RTN","XPDT",4,0)
 ;XPDT(seq #)=ien^name^1=use current transport global on system
"RTN","XPDT",5,0)
 ;XPDT("DA",ien)=seq #
"RTN","XPDT",6,0)
 ;XPDVER=version number^package name
"RTN","XPDT",7,0)
 ;XPDGP=flag;global^flag;global^...  flag=1 replace global at site
"RTN","XPDT",8,0)
 N DIR,DIRUT,I,POP,XPD,XPDA,XPDERR,XPDGP,XPDGREF,XPDH,XPDHD,XPDI,XPDNM,XPDSEQ,XPDSIZ,XPDSIZA,XPDT,XPDTP,XPDVER,X,Y,Z
"RTN","XPDT",9,0)
 K ^TMP($J,"XPD")
"RTN","XPDT",10,0)
 S XPD="First Package Name: ",XPDT=0,DIR(0)="Y",DIR("A")="   Use this Transport Global",DIR("?")="Yes, will use the current Transport Global on your system. No, will create a new one."
"RTN","XPDT",11,0)
 W !!,"Enter the Package Names to be transported. The order in which",!,"they are entered will be the order in which they are installed.",!!
"RTN","XPDT",12,0)
 F  S XPDA=$$DIC^XPDE("AEMQZ",XPD) Q:'XPDA  D  Q:$D(DIRUT)!$D(XPDERR)
"RTN","XPDT",13,0)
 .S:'XPDT XPD="Another Package Name: "
"RTN","XPDT",14,0)
 .;XPDI=name^1=use current transport global
"RTN","XPDT",15,0)
 .S XPDI=$P(Y(0),U)_"^"
"RTN","XPDT",16,0)
 .I $D(XPDT("DA",XPDA)) W "   ",$P(Y(0),U)," already listed",! Q
"RTN","XPDT",17,0)
 .;if type is Global Package, quit if there is other packages
"RTN","XPDT",18,0)
 .I $P(Y(0),U,3)=2 W "   GLOBAL PACKAGE" D  Q:$D(DIRUT)
"RTN","XPDT",19,0)
 ..;if there is already a package in distribution, abort
"RTN","XPDT",20,0)
 ..I XPDT S DIRUT=1 W !,"A GLOBAL PACKAGE cannot be sent with any other packages" Q
"RTN","XPDT",21,0)
 ..W !?10,"will transport the following globals:",! S X=0,XPDGP=""
"RTN","XPDT",22,0)
 ..F  S X=$O(^XPD(9.6,XPDA,"GLO",X)) Q:'X  S Z=$G(^(X,0)) I $P(Z,U)]"" S XPDGP=XPDGP_($P(Z,U,2)="y")_";"_$P(Z,U)_"^" W ?12,$P(Z,U),!
"RTN","XPDT",23,0)
 ..;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",24,0)
 ..S XPDERR=1
"RTN","XPDT",25,0)
 .S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",26,0)
 .I $D(^XTMP("XPDT",XPDA)) W "     **Transport Global exists**" D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",27,0)
 G:'XPDT!$D(DIRUT) QUIT K XPDERR
"RTN","XPDT",28,0)
 W !!,"ORDER   PACKAGE",!
"RTN","XPDT",29,0)
 F XPDT=1:1:XPDT S Y=$P(XPDT(XPDT),U,2) W ?2,XPDT,?7,Y D  W !
"RTN","XPDT",30,0)
 .W:$P(XPDT(XPDT),U,3) "     **will use current Transport Global**"
"RTN","XPDT",31,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO",XPDH=""
"RTN","XPDT",32,0)
 W !! D ^DIR G:$D(DIRUT)!'Y QUIT K DIR
"RTN","XPDT",33,0)
 S DIR(0)="SAO^HF:Host File;PM:PackMan",DIR("A")="Transport through (HF)Host File or (PM)PackMan: ",DIR("?")="Enter the method of transport for the package(s)."
"RTN","XPDT",34,0)
 D ^DIR G:$D(DTOUT)!$D(DUOUT) QUIT K DIR
"RTN","XPDT",35,0)
 I Y="" W !,"No Transport Method selected, will only write Transport Global to ^XTMP." S XPDH=""
"RTN","XPDT",36,0)
 S:Y="PM" XPDTP=1
"RTN","XPDT",37,0)
 I Y="HF" D DEV G:POP QUIT
"RTN","XPDT",38,0)
 ;XPDTP = transports using Packman
"RTN","XPDT",39,0)
 I $G(XPDTP),XPDT>1 W !!,"You cannot send multiple Builds through PackMan." G QUIT
"RTN","XPDT",40,0)
 W !!
"RTN","XPDT",41,0)
 F XPDT=1:1:XPDT S XPDA=XPDT(XPDT),XPDNM=$P(XPDA,U,2) D  G:$D(XPDERR) ABORT
"RTN","XPDT",42,0)
 .W !?5,XPDNM,"..." S XPDGREF="^XTMP(""XPDT"","_+XPDA_",""TEMP"")"
"RTN","XPDT",43,0)
 .;if using current transport global, run pre-transp routine and quit
"RTN","XPDT",44,0)
 .I $P(XPDA,U,3) S XPDA=+XPDA D PRET Q
"RTN","XPDT",45,0)
 .;if package file link then set XPDVER=version number^package name
"RTN","XPDT",46,0)
 .S XPDA=+XPDA,XPDVER=$S($P(^XPD(9.6,XPDA,0),U,2):$$VER^XPDUTL(XPDNM)_U_$$PKG^XPDUTL(XPDNM),1:"")
"RTN","XPDT",47,0)
 .K ^XTMP("XPDT",XPDA)
"RTN","XPDT",48,0)
 .;GLOBAL PACKAGE
"RTN","XPDT",49,0)
 .I $D(XPDGP) D  S XPDT=1 Q
"RTN","XPDT",50,0)
 ..;can't send global package in packman message
"RTN","XPDT",51,0)
 ..I $G(XPDTP) S XPDERR=1 Q
"RTN","XPDT",52,0)
 ..;verify global package
"RTN","XPDT",53,0)
 ..I '$$GLOPKG^XPDV(XPDA) S XPDERR=1 Q
"RTN","XPDT",54,0)
 ..;get Environment check and Post Install routines
"RTN","XPDT",55,0)
 ..F Y="PRE","INIT" I $G(^XPD(9.6,XPDA,Y))]"" S X=^(Y) D
"RTN","XPDT",56,0)
 ...S ^XTMP("XPDT",XPDA,Y)=X,X=$P(X,U,$L(X,U)),%=$$LOAD^XPDTA(X,"0^")
"RTN","XPDT",57,0)
 ..D BLD^XPDTC,PRET
"RTN","XPDT",58,0)
 .F X="DD^XPDTC","KRN^XPDTC","QUES^XPDTC","INT^XPDTC","BLD^XPDTC" D @X Q:$D(XPDERR)
"RTN","XPDT",59,0)
 .D:'$D(XPDERR) PRET
"RTN","XPDT",60,0)
 ;XPDTP - call ^XPDTP to build Packman message
"RTN","XPDT",61,0)
 I $G(XPDTP) S XPDA=+XPDT(XPDT) D ^XPDTP G QUIT
"RTN","XPDT",62,0)
 I $L(XPDH) D GO G QUIT
"RTN","XPDT",63,0)
 ;if no device then just create transport global
"RTN","XPDT",64,0)
 W !! F XPDT=1:1:XPDT W "Transport Global ^XTMP(""XPDT"","_+XPDT(XPDT)_") created for ",$P(XPDT(XPDT),U,2),!
"RTN","XPDT",65,0)
 Q
"RTN","XPDT",66,0)
DEV N FIL,DIR,IOP,X,Y,%ZIS W !
"RTN","XPDT",67,0)
 D HOME^%ZIS
"RTN","XPDT",68,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to output package(s).",POP=0
"RTN","XPDT",69,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDT",70,0)
 ;if no file, then quit
"RTN","XPDT",71,0)
 Q:Y=""  S FIL=Y
"RTN","XPDT",72,0)
 S DIR(0)="F^3:80",DIR("A")="Header Comment"
"RTN","XPDT",73,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",74,0)
 S XPDH=Y,%ZIS="",%ZIS("HFSNAME")=FIL,%ZIS("HFSMODE")="W",IOP="HFS",(XPDSIZ,XPDSIZA)=0,XPDSEQ=1
"RTN","XPDT",75,0)
 ;if MSM and HFS file is on device A or B, then get size for floppy disk
"RTN","XPDT",76,0)
 ;XPDSIZ=disk size, XPDSIZA=accummulated size,XPDSEQ=disk sequence number
"RTN","XPDT",77,0)
 I ^%ZOSF("OS")["MSM",FIL?1(1"A",1"B")1":"1.E D  Q:POP
"RTN","XPDT",78,0)
 .S DIR(0)="N^0:5000",DIR("A")="Size of Diskette (1K blocks)",DIR("B")=1400,DIR("?")="Enter the number of 1K blocks which each diskette will hold, 0 means unlimited space"
"RTN","XPDT",79,0)
 .D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",80,0)
 .S XPDSIZ=$S(Y:Y*1024,1:0)
"RTN","XPDT",81,0)
 D ^%ZIS I POP W !!,"**Incorrect Host File name**",!,$C(7) Q
"RTN","XPDT",82,0)
 ;write date and comment header
"RTN","XPDT",83,0)
 S XPDHD="KIDS Distribution saved on "_$$HTE^XLFDT($H)
"RTN","XPDT",84,0)
 U IO W $$SUM(XPDHD),!,$$SUM(XPDH),!
"RTN","XPDT",85,0)
 ;U IO(0) is to insure I am writing to the terminal
"RTN","XPDT",86,0)
 U IO(0) Q
"RTN","XPDT",87,0)
 ;
"RTN","XPDT",88,0)
GO S I=1,Y="" U IO
"RTN","XPDT",89,0)
 ;Global Package, header is different and there is only 1 package
"RTN","XPDT",90,0)
 I $D(XPDGP) W $$SUM("**KIDS**GLOBALS:"_$P(XPDT(1),U,2)_U_XPDGP),! G GO1
"RTN","XPDT",91,0)
 ;write header that maintains package list, keep less than 255 char
"RTN","XPDT",92,0)
 E  F  D  W $$SUM("**KIDS**:"_Y),! Q:I=XPDT  S Y="",I=I+1
"RTN","XPDT",93,0)
 .F I=I:1 S Y=Y_$P(XPDT(I),U,2)_"^" Q:$L(Y)>200!(I=XPDT)
"RTN","XPDT",94,0)
 ;after the package list write an extra line feed
"RTN","XPDT",95,0)
GO1 W ! S XPDSIZA=XPDSIZA+2
"RTN","XPDT",96,0)
 F XPDT=1:1:XPDT S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2) D GW K ^XTMP("XPDT",XPDA)
"RTN","XPDT",97,0)
 W "**END**",!
"RTN","XPDT",98,0)
 ;GLOBAL PACKAGE there could only be one package, write globals
"RTN","XPDT",99,0)
 I $D(XPDGP) D GPW W "**END**",!
"RTN","XPDT",100,0)
 ;we're done with device, close it
"RTN","XPDT",101,0)
 W "**END**",! D ^%ZISC
"RTN","XPDT",102,0)
 W !!,"Package Transported Successfully",!
"RTN","XPDT",103,0)
 Q
"RTN","XPDT",104,0)
GW ;global write
"RTN","XPDT",105,0)
 N GR,GCK,GL
"RTN","XPDT",106,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDT",107,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDT",108,0)
 ;the next INSTALL NAME
"RTN","XPDT",109,0)
 W $$SUM("**INSTALL NAME**",1),!,$$SUM(XPDNM),!
"RTN","XPDT",110,0)
 F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",111,0)
 Q
"RTN","XPDT",112,0)
GPW ;global package write
"RTN","XPDT",113,0)
 N I,G,GR,GCK,GL
"RTN","XPDT",114,0)
 W !
"RTN","XPDT",115,0)
 F I=1:1 S G=$P(XPDGP,U,I) Q:G=""  D
"RTN","XPDT",116,0)
 .S GR="^"_$P(G,";",2),GCK=$S(GR[")":$E(GR,1,$L(GR)-1)_",",1:GR_"("),GL=$L(GCK)
"RTN","XPDT",117,0)
 .;GLOBAL line will mark the begining of global for all lines until
"RTN","XPDT",118,0)
 .;the next GLOBAL
"RTN","XPDT",119,0)
 .W $$SUM("**GLOBAL**",1),!,$$SUM(GR),!
"RTN","XPDT",120,0)
 .F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",121,0)
 Q
"RTN","XPDT",122,0)
QUIT F XPDT=1:1:XPDT L -^XPD(9.6,+XPDT(XPDT))
"RTN","XPDT",123,0)
 Q
"RTN","XPDT",124,0)
ABORT W !!,"**TRANSPORT ABORTED**",*7
"RTN","XPDT",125,0)
 D QUIT
"RTN","XPDT",126,0)
 F XPDT=1:1:XPDT K ^XTMP("XPDT",+XPDT(XPDT))
"RTN","XPDT",127,0)
 D ^%ZISC
"RTN","XPDT",128,0)
 Q
"RTN","XPDT",129,0)
SUM(X,Z) ;X=string to write, Z 0=don't check size
"RTN","XPDT",130,0)
 S XPDSIZA=XPDSIZA+$L(X)+2
"RTN","XPDT",131,0)
 ;ask for next disk
"RTN","XPDT",132,0)
 ;this code is for MSM system only
"RTN","XPDT",133,0)
 I $G(Z),XPDSIZ,XPDSIZ-XPDSIZA<1024 D
"RTN","XPDT",134,0)
 .;write continue flag at end of this file
"RTN","XPDT",135,0)
 .W "**CONTINUE**",!,"**END**",!
"RTN","XPDT",136,0)
 .;should call %ZIS HFS utilities to close and open file
"RTN","XPDT",137,0)
 .C IO U IO(0)
"RTN","XPDT",138,0)
 .N DIR,G,GR,GCK,GL,I,X,Y
"RTN","XPDT",139,0)
 .W !!,"Diskette #",XPDSEQ," is full."
"RTN","XPDT",140,0)
 .S DIR(0)="E",DIR("A")="Insert the next diskette and Press the return key",DIR("?")="The current diskette is full, insert a new diskette to continue."
"RTN","XPDT",141,0)
 .;$D(DIRUT)=the user aborted the distribution
"RTN","XPDT",142,0)
 .D ^DIR I $D(DIRUT) D ABORT Q
"RTN","XPDT",143,0)
 .W ! S XPDSEQ=XPDSEQ+1,XPDSIZA=0
"RTN","XPDT",144,0)
 .;MSM specific code to open HFS
"RTN","XPDT",145,0)
 .O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDT",146,0)
 .W $$SUM("Continuation #"_XPDSEQ_" of "_XPDHD),!,$$SUM(XPDH),!,$$SUM("**SEQ**:"_XPDSEQ),!!
"RTN","XPDT",147,0)
 .S XPDSIZA=XPDSIZA+2
"RTN","XPDT",148,0)
 Q X
"RTN","XPDT",149,0)
 ;
"RTN","XPDT",150,0)
PRET ;Pre-Transport Routine
"RTN","XPDT",151,0)
 N Y S Y=$G(^XPD(9.6,XPDA,"PRET")) Q:Y=""
"RTN","XPDT",152,0)
 I '$$RTN^XPDV(Y) W !!,"Pre-Transportation Routine DOESN'T EXIST!!",*7 Q
"RTN","XPDT",153,0)
 S Y=$S(Y["^":Y,1:"^"_Y) W !,"Running Pre-Transportation Routine ",Y
"RTN","XPDT",154,0)
 D @Y Q
"RTN","XPDTC")
0^18^B34290588
"RTN","XPDTC",1,0)
XPDTC ;SFISC/RSD - Transport calls ;08/21/96  14:11
"RTN","XPDTC",2,0)
 ;;8.0;KERNEL;**10,15,21,39,41**;Jul 10, 1995
"RTN","XPDTC",3,0)
 Q
"RTN","XPDTC",4,0)
 ;^XTMP("XPDT",XPDA,data type,file #,
"RTN","XPDTC",5,0)
 ;XPDA=ien of File 9.6, XPDNM=.01 field
"RTN","XPDTC",6,0)
DD ;build DD
"RTN","XPDTC",7,0)
 N FILE,FGR,FNAM,Z2,Z3,Z4
"RTN","XPDTC",8,0)
 S FILE=0,FGR="^XTMP(""XPDT"",XPDA)",FNAM=$NA(^XPD(9.6,XPDA,4,"APDD"))
"RTN","XPDTC",9,0)
 F  S FILE=$O(^XPD(9.6,XPDA,4,FILE)) Q:'FILE  D
"RTN","XPDTC",10,0)
 .S Z2=$G(^XPD(9.6,XPDA,4,FILE,222)),Z3=$G(^(223)),Z4=$G(^(224))
"RTN","XPDTC",11,0)
 .Q:$$DATA^XPDV(FILE,Z2)
"RTN","XPDTC",12,0)
 .D FIA^DIFROMSU(FILE,"",FNAM,FGR,Z2,Z3,Z4,XPDVER),DIERR:$D(DIERR)
"RTN","XPDTC",13,0)
 Q:'$D(^XTMP("XPDT",XPDA,"FIA"))
"RTN","XPDTC",14,0)
 ;send DD and Data
"RTN","XPDTC",15,0)
 D DDOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR),DATAOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR)
"RTN","XPDTC",16,0)
 Q
"RTN","XPDTC",17,0)
 ;XPDERR is checked in XPDT and will abort transport
"RTN","XPDTC",18,0)
DIERR ;record error
"RTN","XPDTC",19,0)
 D MSG^DIALOG("EW",.XPD) S XPDERR=1
"RTN","XPDTC",20,0)
 Q
"RTN","XPDTC",21,0)
KRN ;build Kernel Files
"RTN","XPDTC",22,0)
 ;XPDFILE=file #, XPDOLDA=ien in Build file
"RTN","XPDTC",23,0)
 N %,%1,%2,DA,EACT,FACT,FGR,XPDFILE,XPDOLDA,XPDI,Y0
"RTN","XPDTC",24,0)
 F XPDFILE=1:1 S Y0=$P($T(FILES+XPDFILE^XPDE),";;",2,99) Q:Y0=""  S XPDI(+Y0)=Y0
"RTN","XPDTC",25,0)
 ;XPDI(XPDFILE)=file;order;x-ref;fact;eact;fpre;epre;fpos;epos;fdel
"RTN","XPDTC",26,0)
 S XPDFILE=0
"RTN","XPDTC",27,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  S XPDI=$G(XPDI(XPDFILE)),FACT=$P(XPDI,";",4),EACT=$P(XPDI,";",5) D  Q:$D(XPDERR)  D:FACT]"" ACT(FACT)
"RTN","XPDTC",28,0)
 .;need to add code to check if File and data is already being sent in the File
"RTN","XPDTC",29,0)
 .;mult. If it is, don't bother sending it again.  DTL(XPDFILE)
"RTN","XPDTC",30,0)
 .S XPDOLDA=0,FGR=$$FILE^XPDV(XPDFILE) I FGR="" S XPDERR=1 Q
"RTN","XPDTC",31,0)
 .K ^TMP($J,"XPD")
"RTN","XPDTC",32,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDTC",33,0)
 ..;If deleting at site get an unused DA
"RTN","XPDTC",34,0)
 ..I $P(Y0,U,3)=1 S DA=$O(@FGR@(" "),-1)+1 F DA=DA:1 Q:'$D(^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA))
"RTN","XPDTC",35,0)
 ..;$P(Y0,U,2) is file # for this template, reset Y0 before getting DA
"RTN","XPDTC",36,0)
 ..E  S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY^XPDV(Y0)
"RTN","XPDTC",37,0)
 ..I 'DA S XPDERR=1 Q
"RTN","XPDTC",38,0)
 ..;(-1)=action flag: 1-delete,2-link,3-merge menus '^' ien in Build file
"RTN","XPDTC",39,0)
 ..S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,-1)=+$P(Y0,U,3)_"^"_XPDOLDA
"RTN","XPDTC",40,0)
 ..;if action is 1-delete then only send .01 field and set checksum to ""
"RTN","XPDTC",41,0)
 ..I $P(Y0,U,3)=1 S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,0)=$P(Y0,U),$P(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA),U,4)="" Q
"RTN","XPDTC",42,0)
 ..M ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)=@FGR@(DA)
"RTN","XPDTC",43,0)
 ..;execute entry build action
"RTN","XPDTC",44,0)
 ..D:EACT]"" ACT(EACT)
"RTN","XPDTC",45,0)
 .;quit if no entries were saved
"RTN","XPDTC",46,0)
 .Q:'$O(^XTMP("XPDT",XPDA,"KRN",XPDFILE,0))
"RTN","XPDTC",47,0)
 .;XPDI=XPDI(XPDFILE), build x-ref of order to install
"RTN","XPDTC",48,0)
 .S %=$P(^DIC(XPDFILE,0),U),^XTMP("XPDT",XPDA,"ORD",+$P(XPDI,";",2),XPDFILE)=XPDI,^(XPDFILE,0)=%
"RTN","XPDTC",49,0)
 .Q
"RTN","XPDTC",50,0)
 Q
"RTN","XPDTC",51,0)
QUES ;build from Install Questions multiple
"RTN","XPDTC",52,0)
 N I,J,X,%
"RTN","XPDTC",53,0)
 S X=""
"RTN","XPDTC",54,0)
 ;the "B" x-ref will give me the order of the questions
"RTN","XPDTC",55,0)
 F  S X=$O(^XPD(9.6,XPDA,"QUES","B",X)) Q:X=""  S I=$$QUES^XPDV(X) S:'I XPDERR=1 D:I
"RTN","XPDTC",56,0)
 .S J=0 F  S J=$O(^XPD(9.6,XPDA,"QUES",I,J)) Q:J=""  D
"RTN","XPDTC",57,0)
 ..;tranform J to DIR subscripts
"RTN","XPDTC",58,0)
 ..I $L(J)=1!(J="QQ") S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"1ABQ","0AB?"))=^(J) Q  ;^(J) ref to ^XPD(9.6,XPDA,"QUES",I,J)
"RTN","XPDTC",59,0)
 ..;set the word processing fields into DIR("?",#) structure
"RTN","XPDTC",60,0)
 ..F %=1:1 Q:'$D(^XPD(9.6,XPDA,"QUES",I,J,%,0))  S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"AQ10","A?"),%)=^(0)
"RTN","XPDTC",61,0)
 ;send the File questions
"RTN","XPDTC",62,0)
 F I=1:2 S X=$P($T(QUESTION+I),";;",2) Q:X=""  S Y=$P($T(QUESTION+I+1),";;",2) D
"RTN","XPDTC",63,0)
 .S ^XTMP("XPDT",XPDA,"QUES",$P(X,";"),0)=$P(X,";",2),^("A")=$P(X,";",3),^("B")=$P(X,";",4),^("??")=$P(X,";",5) S:Y]"" ^("M")=Y
"RTN","XPDTC",64,0)
 Q
"RTN","XPDTC",65,0)
INT ;build pre,post, & enviroment init routines
"RTN","XPDTC",66,0)
 N %,I,X
"RTN","XPDTC",67,0)
 F I="PRE","INI","INIT" I $G(^XPD(9.6,XPDA,I))]"" S X=^(I) D
"RTN","XPDTC",68,0)
 .S ^XTMP("XPDT",XPDA,I)=X,X=$P(X,U,$L(X,U)) Q:$D(^("RTN",X))
"RTN","XPDTC",69,0)
 .I '$$RTN^XPDV(X) W !,"Routine ",X," **NOT FOUND**" S XPDERR=1 Q
"RTN","XPDTC",70,0)
 .S %=$$LOAD^XPDTA(X,"0^")
"RTN","XPDTC",71,0)
 Q
"RTN","XPDTC",72,0)
BLD ;build Build file, Package file and Order Parameter file
"RTN","XPDTC",73,0)
 N %,DIC,X,XPD,XPDI,XPDV,Y
"RTN","XPDTC",74,0)
 ;save version of kernel and fm
"RTN","XPDTC",75,0)
 S ^XTMP("XPDT",XPDA,"VER")=$$VERSION^XPDUTL("XU")_U_$$VERSION^XPDUTL("VA FILEMAN")
"RTN","XPDTC",76,0)
 M ^XTMP("XPDT",XPDA,"BLD",XPDA)=^XPD(9.6,XPDA)
"RTN","XPDTC",77,0)
 ;check national package file pointer
"RTN","XPDTC",78,0)
 S XPDI=+$P(^XPD(9.6,XPDA,0),U,2) Q:'XPDI
"RTN","XPDTC",79,0)
 S $P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,2)=$$PT^XPDTA("^DIC(9.4)",XPDI)
"RTN","XPDTC",80,0)
 ;quit if no pointer to package file
"RTN","XPDTC",81,0)
 Q:'$D(^DIC(9.4,XPDI))
"RTN","XPDTC",82,0)
 ;update version multiple in package file,XPD=version^date distributed
"RTN","XPDTC",83,0)
 S XPD=$$VER^XPDUTL(XPDNM)_U_$P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,4)
"RTN","XPDTC",84,0)
 ;XPD(1)=root of description field
"RTN","XPDTC",85,0)
 S:$D(^XTMP("XPDT",XPDA,"BLD",XPDA,1)) XPD(1)=$NA(^(1))
"RTN","XPDTC",86,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,0)=^DIC(9.4,XPDI,0),^XTMP("XPDT",XPDA,"PKG",XPDI,22,0)="^"_$P(^DD(9.4,22,0),U,2)_"^1^1"
"RTN","XPDTC",87,0)
 ;XPDNM'["*" is a version release
"RTN","XPDTC",88,0)
 I XPDNM'["*" D
"RTN","XPDTC",89,0)
 .S XPDV=$$PKGVER^XPDIP(XPDI,.XPD)
"RTN","XPDTC",90,0)
 .;Merge is used to set single nodes and merge multiples
"RTN","XPDTC",91,0)
 .F %=1,5,7,20,"DEV","VERSION" M ^XTMP("XPDT",XPDA,"PKG",XPDI,%)=^DIC(9.4,XPDI,%)
"RTN","XPDTC",92,0)
 .;XPDV=ien of Version Multiple
"RTN","XPDTC",93,0)
 .I $D(^DIC(9.4,XPDI,22,XPDV))'>9 W !!,"**Version multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",94,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1)=^DIC(9.4,XPDI,22,XPDV)
"RTN","XPDTC",95,0)
 ;this is a patch, %=version number, $P(XPD,U)=patch number
"RTN","XPDTC",96,0)
 E  D
"RTN","XPDTC",97,0)
 .S %=$P(XPD,U),$P(XPD,U)=$P(XPDNM,"*",3),XPDV=$$PKGPAT^XPDIP(XPDI,%,.XPD)
"RTN","XPDTC",98,0)
 .S ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,0)=^DIC(9.4,XPDI,22,+XPDV,0)
"RTN","XPDTC",99,0)
 .I $D(^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2)))'>9 W !!,"**Patch multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",100,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,"PAH",1)=^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2))
"RTN","XPDTC",101,0)
 ;M ^XTMP("XPDT",XPDA,"PKG",XPDI)=^DIC(9.4,XPDI)
"RTN","XPDTC",102,0)
 ;save the version ien^patch ien on -1 node
"RTN","XPDTC",103,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,-1)="1^1"
"RTN","XPDTC",104,0)
 ;resolve Primary Help Frame (0;4)
"RTN","XPDTC",105,0)
 S %=+$P(^DIC(9.4,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"PKG",XPDI,0),U,4)=$$PT^XPDTA("^DIC(9.2)",%)
"RTN","XPDTC",106,0)
 ;transport the PACKAGE PARAMETER multiple under file 100.99
"RTN","XPDTC",107,0)
 ;quit of GLOBAL PACKAGE
"RTN","XPDTC",108,0)
 Q:'$D(^ORD(100.99,1,5,XPDI,0))!$D(XPDGP)
"RTN","XPDTC",109,0)
 M ^XTMP("XPDT",XPDA,"OER",XPDI)=^ORD(100.99,1,5,XPDI)
"RTN","XPDTC",110,0)
 ;resolve Display Group Default (0;4)
"RTN","XPDTC",111,0)
 S %=+$P(^ORD(100.99,1,5,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"OER",XPDI,0),U,4)=$$PT^XPDTA("^ORD(100.98)",%)
"RTN","XPDTC",112,0)
 Q
"RTN","XPDTC",113,0)
 ;
"RTN","XPDTC",114,0)
ACT(%) ;execute action
"RTN","XPDTC",115,0)
 ;user can count on DA,XPDFILE,XPDNM,XPDOLDA being around
"RTN","XPDTC",116,0)
 ;DA=ien in ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)
"RTN","XPDTC",117,0)
 ;XPDOLDA=ien in ^XPD(9.6,XPDA,"KRN",XPDIFLE,"NM",XPDOLDA)
"RTN","XPDTC",118,0)
 N EACT,FACT,FGR,K0,Y0
"RTN","XPDTC",119,0)
 S:%'["^" %="^"_%
"RTN","XPDTC",120,0)
 D @% Q
"RTN","XPDTC",121,0)
 ;
"RTN","XPDTC",122,0)
 ;the following are the default questions for the INSTALL QUESTIONS
"RTN","XPDTC",123,0)
 ;in file 9.6, the format is:
"RTN","XPDTC",124,0)
 ;;field .01;field 1;field 2;field 4;field 7
"RTN","XPDTC",125,0)
 ;;field 10
"RTN","XPDTC",126,0)
QUESTION ;package install questions
"RTN","XPDTC",127,0)
 ;;XPF1;Y;Shall I write over your |FLAG| File;YES;^D REP^XPDH
"RTN","XPDTC",128,0)
 ;;D XPF1^XPDIQ
"RTN","XPDTC",129,0)
 ;;XPF2;Y;Want my data |FLAG| yours;YES;^D DTA^XPDH
"RTN","XPDTC",130,0)
 ;;D XPF2^XPDIQ
"RTN","XPDTC",131,0)
 ;;XPZ1;Y;Want to DISABLE Scheduled Options, Menu Options, and Protocols;YES;^D OPT^XPDH
"RTN","XPDTC",132,0)
 ;;D XPZ1^XPDIQ
"RTN","XPDTC",133,0)
 ;;XPZ2;Y;Want to MOVE routines to other CPUs;NO;^D RTN^XPDH
"RTN","XPDTC",134,0)
 ;;D XPZ2^XPDIQ
"RTN","XQOO1")
0^10^B75430276
"RTN","XQOO1",1,0)
XQOO1 ;SEA/Luke - Out-of-order set calls ;08/09/96  13:46
"RTN","XQOO1",2,0)
 ;;8.0;KERNEL;**10,21,39,41**;Jul 10, 1995
"RTN","XQOO1",3,0)
 ;
"RTN","XQOO1",4,0)
OFF(XQSET) ;Mark options and protocols Out Of Order
"RTN","XQOO1",5,0)
 N %,DA,XQMESS,XQN
"RTN","XQOO1",6,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",7,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",8,0)
 ;
"RTN","XQOO1",9,0)
 S XQN=0
"RTN","XQOO1",10,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,19,XQN)) Q:XQN=""  D
"RTN","XQOO1",11,0)
 .Q:'$D(^DIC(19,XQN,0))#2  S %=$P(^(0),U,3)
"RTN","XQOO1",12,0)
 .;quit if KIDS and option already out by nonKIDS user
"RTN","XQOO1",13,0)
 .Q:$D(XPDSET)&(%]"")&(%'[$C(9))  S %=$P(%,$C(9))
"RTN","XQOO1",14,0)
 .;if KIDS save off current OOO message
"RTN","XQOO1",15,0)
 .I $D(XPDSET),%]"",%'=XQSET,$D(^XTMP("XQOO",%)) S $P(^XTMP("XQOO",XQSET,19,XQN),U,3)=%
"RTN","XQOO1",16,0)
 .S $P(^DIC(19,XQN,0),U,3)=XQMESS,DA=XQN D REDO^XQ7
"RTN","XQOO1",17,0)
 .Q
"RTN","XQOO1",18,0)
 ;
"RTN","XQOO1",19,0)
 S XQN=0
"RTN","XQOO1",20,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,101,XQN)) Q:XQN=""  D
"RTN","XQOO1",21,0)
 .Q:'$D(^ORD(101,XQN,0))#2  S %=$P(^(0),U,3)
"RTN","XQOO1",22,0)
 .Q:$D(XPDSET)&(%]"")&(%'[$C(9))  S %=$P(%,$C(9))
"RTN","XQOO1",23,0)
 .I $D(XPDSET),%]"",%'=XQSET,$D(^XTMP("XQOO",%)) S $P(^XTMP("XQOO",XQSET,101,XQN),U,3)=%
"RTN","XQOO1",24,0)
 .S $P(^ORD(101,XQN,0),U,3)=XQMESS
"RTN","XQOO1",25,0)
 .Q
"RTN","XQOO1",26,0)
 D OUT
"RTN","XQOO1",27,0)
 D KICK^XQ7
"RTN","XQOO1",28,0)
 Q
"RTN","XQOO1",29,0)
 ;
"RTN","XQOO1",30,0)
ON(XQSET) ;Remove Out Of Order messages from the set XQSET
"RTN","XQOO1",31,0)
 N %,%1,DA,XQN
"RTN","XQOO1",32,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",33,0)
 ;
"RTN","XQOO1",34,0)
 S XQN=0
"RTN","XQOO1",35,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,19,XQN)) Q:XQN=""  S XQMESS=$P(^(XQN),U,3) D
"RTN","XQOO1",36,0)
 .Q:'$D(^DIC(19,XQN,0))#2  S %=$P(^(0),U,3),%1=$S($D(XPDSET):$P(XQMESS,$C(9)),1:"")
"RTN","XQOO1",37,0)
 .;quit if OOO message is set by nonKIDS
"RTN","XQOO1",38,0)
 .Q:$D(XPDSET)&(%'[$C(9))  S %=$P(%,$C(9))
"RTN","XQOO1",39,0)
 .I $D(XPDSET),%'=XQSET,%]"",$D(^XTMP("XQOO",%)) Q  ;another set has this option
"RTN","XQOO1",40,0)
 .;if we have another message to restore, check that set still exist
"RTN","XQOO1",41,0)
 .I XQMESS]"" S XQMESS=$S(%1="":"",'$D(^XTMP("XQOO",%1)):"",1:XQMESS)
"RTN","XQOO1",42,0)
 .S $P(^DIC(19,XQN,0),U,3)=XQMESS,DA=XQN D REDO^XQ7
"RTN","XQOO1",43,0)
 .Q
"RTN","XQOO1",44,0)
 ;
"RTN","XQOO1",45,0)
 S XQN=0
"RTN","XQOO1",46,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,101,XQN)) Q:XQN=""  S XQMESS=$P(^(XQN),U,3) D
"RTN","XQOO1",47,0)
 .Q:'$D(^ORD(101,XQN,0))#2  S %=$P(^(0),U,3),%1=$S($D(XPDSET):$P(XQMESS,$C(9)),1:"")
"RTN","XQOO1",48,0)
 .Q:$D(XPDSET)&(%'[$C(9))  S %=$P(%,$C(9))
"RTN","XQOO1",49,0)
 .I $D(XPDSET),%'=XQSET,%]"",$D(^XTMP("XQOO",%)) Q
"RTN","XQOO1",50,0)
 .I XQMESS]"" S XQMESS=$S(%1="":"",'$D(^XTMP("XQOO",%1)):"",1:XQMESS)
"RTN","XQOO1",51,0)
 .S $P(^ORD(101,XQN,0),U,3)=XQMESS
"RTN","XQOO1",52,0)
 .Q
"RTN","XQOO1",53,0)
 ;
"RTN","XQOO1",54,0)
 I '$D(XPDSET) D
"RTN","XQOO1",55,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",56,0)
 .S DIR("A")="Should I remove the option set "_XQSET_" from ^XTMP?"
"RTN","XQOO1",57,0)
 .S DIR("?")=XQSET_" is the list of options and/or protocols you just turned on."
"RTN","XQOO1",58,0)
 .D ^DIR
"RTN","XQOO1",59,0)
 .I Y K ^XTMP("XQOO",XQSET)
"RTN","XQOO1",60,0)
 .K DIR,Y
"RTN","XQOO1",61,0)
 .Q
"RTN","XQOO1",62,0)
 D OUT
"RTN","XQOO1",63,0)
 D KICK^XQ7
"RTN","XQOO1",64,0)
 Q
"RTN","XQOO1",65,0)
 ;
"RTN","XQOO1",66,0)
ADD(XQSET,XQFIL,XQN) ;New option/protocol - add to set and mark it OOO
"RTN","XQOO1",67,0)
 ;Called by KIDS during a build
"RTN","XQOO1",68,0)
 I '$D(^XTMP("XQOO",XQSET,0)) S XQSET="^" D OUT Q
"RTN","XQOO1",69,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",70,0)
 S XQGL=$S(XQFIL=19:"^DIC(",1:"^ORD(")
"RTN","XQOO1",71,0)
 S %=@(XQGL_XQFIL_","_XQN_",0)"),^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(%,U)_"^"_$P(%,U,2)
"RTN","XQOO1",72,0)
 S %=XQGL_XQFIL_","_XQN_",0)",$P(@%,U,3)=XQMESS
"RTN","XQOO1",73,0)
 D OUT
"RTN","XQOO1",74,0)
 Q
"RTN","XQOO1",75,0)
 ;
"RTN","XQOO1",76,0)
KIDS(XQSET,XQFIL,XQNAME,XQFLAG) ;Turn on/off an option or protocol
"RTN","XQOO1",77,0)
 ;Called only from KIDS during an install so OERR would work
"RTN","XQOO1",78,0)
 ;XQFLAG is set to 0 to put an option or protocol out of order,
"RTN","XQOO1",79,0)
 ;1 to turn it on, and I return it as -1 if the request 
"RTN","XQOO1",80,0)
 ;fails.
"RTN","XQOO1",81,0)
 ;
"RTN","XQOO1",82,0)
 N XQGL,XQMESS,XQMES2,XQN
"RTN","XQOO1",83,0)
 I '$D(^XTMP("XQOO",XQSET)) S XQFLAG=-1 Q
"RTN","XQOO1",84,0)
 S XQGL=$S(XQFIL=19:"^DIC(19)",XQFIL=101:"^ORD(101)",1:"")
"RTN","XQOO1",85,0)
 I XQGL="" S XQFLAG=-1 Q
"RTN","XQOO1",86,0)
 I XQNAME=+XQNAME S XQN=XQNAME
"RTN","XQOO1",87,0)
 E  D  I XQFLAG<0 Q
"RTN","XQOO1",88,0)
 .S XQN=$O(@XQGL@("B",XQNAME,0)) I XQN'>0 S XQFLAG=-1
"RTN","XQOO1",89,0)
 .Q
"RTN","XQOO1",90,0)
 S %=@XQGL@(XQN,0) S XQMES2=$P(%,U,3)
"RTN","XQOO1",91,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",92,0)
 I XQMESS=XQMES2 S XQMES2=""
"RTN","XQOO1",93,0)
 I '$D(^XTMP("XQOO",XQSET,XQFIL,XQN)) S ^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(@XQGL@(XQN,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",94,0)
 ;
"RTN","XQOO1",95,0)
 I 'XQFLAG D
"RTN","XQOO1",96,0)
 .I XQMES2]"" S $P(^XTMP("XQOO",XQSET,XQFIL,XQN),U,3)=XQMES2
"RTN","XQOO1",97,0)
 .S $P(@XQGL@(XQN,0),U,3)=XQMESS
"RTN","XQOO1",98,0)
 .Q
"RTN","XQOO1",99,0)
 I XQFLAG D
"RTN","XQOO1",100,0)
 .S $P(@XQGL@(XQN,0),U,3)=""
"RTN","XQOO1",101,0)
 .Q
"RTN","XQOO1",102,0)
 ;
"RTN","XQOO1",103,0)
OUT ;Exit point
"RTN","XQOO1",104,0)
 K %,XQFIL,XQGL,XQMESS,XQN,XQS
"RTN","XQOO1",105,0)
 Q
"RTN","XQOO1",106,0)
 ;
"RTN","XQOO1",107,0)
OFFOP ;Option entry for turning off options
"RTN","XQOO1",108,0)
 W !
"RTN","XQOO1",109,0)
 S XQSET=""
"RTN","XQOO1",110,0)
 D GETSET(.XQSET)
"RTN","XQOO1",111,0)
 I XQSET]"" D
"RTN","XQOO1",112,0)
 .S DIR(0)="Y",DIR("B")="N"
"RTN","XQOO1",113,0)
 .S DIR("A")="Mark the options in "_XQSET_" Out-Of Order now"
"RTN","XQOO1",114,0)
 .S DIR("?")="If you answer ""Yes"" you will mark all the options in the set "_XQSET_" Out Of Order."
"RTN","XQOO1",115,0)
 .D ^DIR
"RTN","XQOO1",116,0)
 .I Y D OFF(XQSET)
"RTN","XQOO1",117,0)
 .K DIR,X,Y
"RTN","XQOO1",118,0)
 .Q
"RTN","XQOO1",119,0)
 Q
"RTN","XQOO1",120,0)
 ;
"RTN","XQOO1",121,0)
 ;
"RTN","XQOO1",122,0)
ONOP ;Option entry for turning on options
"RTN","XQOO1",123,0)
 S XQSET=""
"RTN","XQOO1",124,0)
 D GETSET(.XQSET)
"RTN","XQOO1",125,0)
 I XQSET]"" D
"RTN","XQOO1",126,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",127,0)
 .S DIR("A")="Return options in "_XQSET_" to general use"
"RTN","XQOO1",128,0)
 .S DIR("?")="If you answer ""Yes"" you will remove the Out-Of-Order message from the options in the set "_XQSET
"RTN","XQOO1",129,0)
 .D ^DIR
"RTN","XQOO1",130,0)
 .I Y D ON(XQSET)
"RTN","XQOO1",131,0)
 .K DIR,X,Y
"RTN","XQOO1",132,0)
 .Q
"RTN","XQOO1",133,0)
 D KICK^XQ7
"RTN","XQOO1",134,0)
 Q
"RTN","XQOO1",135,0)
 ;
"RTN","XQOO1",136,0)
GETSET(XQSET) ;Get the name of the option set in question
"RTN","XQOO1",137,0)
 I '$D(^XTMP("XQOO")) W !!,"There are currently no option sets definded in ^XTMP." Q
"RTN","XQOO1",138,0)
 S XQI=0
"RTN","XQOO1",139,0)
 D SETS^XQOO2(.XQI)
"RTN","XQOO1",140,0)
 I XQI=1 S XQSET=0,XQSET=$O(^XTMP("XQOO",XQSET)) Q
"RTN","XQOO1",141,0)
 I XQI>1 D
"RTN","XQOO1",142,0)
 .S DIR(0)="NO^1:"_XQI,DIR("B")=XQI
"RTN","XQOO1",143,0)
 .S DIR("A")=" Please enter the number of the option set you want"
"RTN","XQOO1",144,0)
 .S DIR("?")=" Which option set do you want to work with? 1, "_XQI_" etc."
"RTN","XQOO1",145,0)
 .W !
"RTN","XQOO1",146,0)
 .D ^DIR
"RTN","XQOO1",147,0)
 .S XQSET=0 F XQI=1:1:+Y S XQSET=$O(^XTMP("XQOO",XQSET))
"RTN","XQOO1",148,0)
 .Q
"RTN","XQOO1",149,0)
 K XQI
"RTN","XQOO1",150,0)
 Q
"RTN","XQOO1",151,0)
 ;
"RTN","XQOO1",152,0)
 ;
"RTN","XQOO1",153,0)
REBLD ;Rebuild a "lost" set of options and protocols
"RTN","XQOO1",154,0)
 N XQ,XQMESS,XQOP,XQPROT,XQSET
"RTN","XQOO1",155,0)
 S (XQOP,XQPROT)=0
"RTN","XQOO1",156,0)
 ;
"RTN","XQOO1",157,0)
 S DIR(0)="F^3:30"
"RTN","XQOO1",158,0)
 S DIR("A")=" Please enter the exact Out-Of-Order message"
"RTN","XQOO1",159,0)
 S DIR("?")=" All options/protocols with this message are reclaimed into a set in ^XTMP"
"RTN","XQOO1",160,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",161,0)
 S XQMESS=X K DIR
"RTN","XQOO1",162,0)
 ;
"RTN","XQOO1",163,0)
RE1 S DIR(0)="F^1:20"
"RTN","XQOO1",164,0)
 S DIR("A")=" What do you want to name the recovered set? "
"RTN","XQOO1",165,0)
 S DIR("?")=" Enter any name of up to 20 characters"
"RTN","XQOO1",166,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",167,0)
 S XQSET=X K DIR
"RTN","XQOO1",168,0)
 I $D(^XTMP("XQOO",XQSET,0)) D  G RE1
"RTN","XQOO1",169,0)
 .W !,"Sorry, that set already exists.  Use the Create/Modify option to"
"RTN","XQOO1",170,0)
 .W !?3,"modify it, or choose another name."
"RTN","XQOO1",171,0)
 .Q
"RTN","XQOO1",172,0)
 ;
"RTN","XQOO1",173,0)
REFIND ;Find options and protocols with the message XQMESS
"RTN","XQOO1",174,0)
 S XQ=0 F  S XQ=$O(^DIC(19,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",175,0)
 .Q:$P(^DIC(19,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",176,0)
 .S ^XTMP("XQOO",XQSET,19,XQ)=$P(^DIC(19,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",177,0)
 .S XQOP=XQOP+1
"RTN","XQOO1",178,0)
 .Q
"RTN","XQOO1",179,0)
 ;
"RTN","XQOO1",180,0)
 S XQ=0 F  S XQ=$O(^ORD(101,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",181,0)
 .Q:$P(^ORD(101,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",182,0)
 .S ^XTMP("XQOO",XQSET,101,XQ)=$P(^ORD(101,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",183,0)
 .S XQPROT=XQPROT+1
"RTN","XQOO1",184,0)
 .Q
"RTN","XQOO1",185,0)
 ;
"RTN","XQOO1",186,0)
 I XQOP>0!(XQPROT>0) D  G OUTRE
"RTN","XQOO1",187,0)
 .D ^XQDATE
"RTN","XQOO1",188,0)
 .S %=$P(^VA(200,DUZ,0),U),%=$P(%,",")
"RTN","XQOO1",189,0)
 .S ^XTMP("XQOO",XQSET,0)=XQMESS_U_%Y_U_%
"RTN","XQOO1",190,0)
 .S ^XTMP("XQOO",0)=DT+7
"RTN","XQOO1",191,0)
 .W !!,"Set named ",XQSET," recovered with ",XQOP," options and ",XQPROT," protocols."
"RTN","XQOO1",192,0)
 .Q
"RTN","XQOO1",193,0)
 E  W !!,"No options or protocols with the message ",XQMESS," were found." G OUTRE
"RTN","XQOO1",194,0)
 Q
"RTN","XQOO1",195,0)
 ;
"RTN","XQOO1",196,0)
OUTRE ;Exit point for REBLD
"RTN","XQOO1",197,0)
 K %,%Y,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,XQ,XQMESS,XQOP,XQPROT,XQSET,Y
"RTN","XQOO1",198,0)
 Q
"RTN","XQOO1",199,0)
 ;
"RTN","XQOO1",200,0)
TOG ;Toggle options and protocols on and off. (XQOOTOG option)
"RTN","XQOO1",201,0)
 N XQ
"RTN","XQOO1",202,0)
 D T1,OUTT,T2,KICK^XQ7
"RTN","XQOO1",203,0)
 ;
"RTN","XQOO1",204,0)
OUTT ;Exit for XQOOTOG
"RTN","XQOO1",205,0)
 K DIC,DTOUT,DUOUT,X,Y
"RTN","XQOO1",206,0)
 Q
"RTN","XQOO1",207,0)
 ;
"RTN","XQOO1",208,0)
T1 ;Toggle options
"RTN","XQOO1",209,0)
 S DIC=19,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of an option: "
"RTN","XQOO1",210,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",211,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",212,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",213,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",214,0)
 ..W !!,"Option ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",215,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",216,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",217,0)
 ..D ^DIR
"RTN","XQOO1",218,0)
 ..I Y S $P(^DIC(19,XQ,0),U,3)="",DA=XQ D REDO^XQ7
"RTN","XQOO1",219,0)
 ..K DIR,X,Y
"RTN","XQOO1",220,0)
 ..Q
"RTN","XQOO1",221,0)
 .E  W ! D
"RTN","XQOO1",222,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this option out of order: "
"RTN","XQOO1",223,0)
 ..S DIR("?")="This option is in service.  Enter a string to remove it from use."
"RTN","XQOO1",224,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",225,0)
 ..I '$D(DIRUT) S $P(^DIC(19,XQ,0),U,3)=Y,DA=XQ D REDO^XQ7
"RTN","XQOO1",226,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",227,0)
 ..Q
"RTN","XQOO1",228,0)
 .Q
"RTN","XQOO1",229,0)
 Q
"RTN","XQOO1",230,0)
 ;
"RTN","XQOO1",231,0)
T2 ;Toggle protocols
"RTN","XQOO1",232,0)
 S DIC=101,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of a protocol: "
"RTN","XQOO1",233,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",234,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",235,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",236,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",237,0)
 ..W !!,"Protocol ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",238,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",239,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",240,0)
 ..D ^DIR
"RTN","XQOO1",241,0)
 ..I Y S $P(^ORD(101,XQ,0),U,3)=""
"RTN","XQOO1",242,0)
 ..K DA,DIR,X,Y
"RTN","XQOO1",243,0)
 ..Q
"RTN","XQOO1",244,0)
 .E  W ! D
"RTN","XQOO1",245,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this protocol out of order: "
"RTN","XQOO1",246,0)
 ..S DIR("?")="This protocol is in service.  Enter a string to remove it from use."
"RTN","XQOO1",247,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",248,0)
 ..I '$D(DIRUT) S $P(^ORD(101,XQ,0),U,3)=Y
"RTN","XQOO1",249,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",250,0)
 ..Q
"RTN","XQOO1",251,0)
 .Q
"RTN","XQOO1",252,0)
 Q
"VER")
8.0^21.0
**END**
**END**
